
SpeedGPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afe0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001010  0800b0f0  0800b0f0  0001b0f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c100  0800c100  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800c100  0800c100  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c100  0800c100  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800c100  0800c100  0001c100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c108  0800c108  0001c108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800c10c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003c6c  200001f4  0800c300  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003e60  0800c300  00023e60  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030b10  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000060bd  00000000  00000000  00050d2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001a211  00000000  00000000  00056dea  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000018c0  00000000  00000000  00071000  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002710  00000000  00000000  000728c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001b993  00000000  00000000  00074fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000189c1  00000000  00000000  00090963  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0008a38e  00000000  00000000  000a9324  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001336b2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056c0  00000000  00000000  00133730  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b0d8 	.word	0x0800b0d8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	0800b0d8 	.word	0x0800b0d8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b44:	f1a2 0201 	sub.w	r2, r2, #1
 8000b48:	d1ed      	bne.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <_Z13BuzzerSetFreqt>:


void BuzzerSetFreq(uint16_t freq)
{

	TIM2->PSC = (48000000  / ((BUZZER_VOLUME_MAX*2)*freq)) - 1; //prescaller
 8000f44:	23fa      	movs	r3, #250	; 0xfa
 8000f46:	4343      	muls	r3, r0
 8000f48:	4803      	ldr	r0, [pc, #12]	; (8000f58 <_Z13BuzzerSetFreqt+0x14>)
 8000f4a:	fb90 f0f3 	sdiv	r0, r0, r3
 8000f4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f52:	3801      	subs	r0, #1
 8000f54:	6298      	str	r0, [r3, #40]	; 0x28
}
 8000f56:	4770      	bx	lr
 8000f58:	02dc6c00 	.word	0x02dc6c00

08000f5c <_Z15BuzzerSetVolumet>:
void BuzzerSetVolume(uint16_t volume)
{
	if(volume > BUZZER_VOLUME_MAX)
		volume = BUZZER_VOLUME_MAX;

	TIM2->CCR1 = volume;
 8000f5c:	287d      	cmp	r0, #125	; 0x7d
 8000f5e:	bf28      	it	cs
 8000f60:	207d      	movcs	r0, #125	; 0x7d
 8000f62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f66:	6358      	str	r0, [r3, #52]	; 0x34
}
 8000f68:	4770      	bx	lr

08000f6a <_ZN5Flash6SDcardD1Ev>:

}

SDcard::~SDcard() {
	// TODO !CodeTemplates.destructorstub.tododesc!
}
 8000f6a:	4770      	bx	lr

08000f6c <_ZN5Flash6SDcardD0Ev>:
SDcard::~SDcard() {
 8000f6c:	b510      	push	{r4, lr}
 8000f6e:	4604      	mov	r4, r0
}
 8000f70:	f44f 7113 	mov.w	r1, #588	; 0x24c
 8000f74:	f008 f836 	bl	8008fe4 <_ZdlPvj>
 8000f78:	4620      	mov	r0, r4
 8000f7a:	bd10      	pop	{r4, pc}

08000f7c <_ZN5Flash6SDcardC1Ev>:
SDcard::SDcard() {
 8000f7c:	4b01      	ldr	r3, [pc, #4]	; (8000f84 <_ZN5Flash6SDcardC1Ev+0x8>)
 8000f7e:	6003      	str	r3, [r0, #0]
}
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	0800b10c 	.word	0x0800b10c

08000f88 <_ZN5Flash6SDcard11writeStringEPKcS2_>:
FRESULT SDcard::writeString(const char * filename,const char * strin )
{
 8000f88:	b510      	push	{r4, lr}
 8000f8a:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8000f8e:	4614      	mov	r4, r2
	FRESULT res;
	FIL logFile;
#ifdef DEBUG_FROM_UART3
		UART_Printf("f_open() \r\n");
#endif
	res = f_open(&logFile,filename, FA_OPEN_APPEND | FA_WRITE);
 8000f90:	4668      	mov	r0, sp
 8000f92:	2232      	movs	r2, #50	; 0x32
 8000f94:	f005 fb22 	bl	80065dc <f_open>
	if(res != FR_OK) {
 8000f98:	b948      	cbnz	r0, 8000fae <_ZN5Flash6SDcard11writeStringEPKcS2_+0x26>
#ifdef DEBUG_FROM_UART3
	UART_Printf("f_open() OK %d" , res);
#endif
	//unsigned int bytesToWrite = strlen(strin);
	int bytesWritten=0;
	bytesWritten = f_printf(&logFile,"%s\n", strin);//(&logFile, strin, bytesToWrite, &bytesWritten);
 8000f9a:	4622      	mov	r2, r4
 8000f9c:	4906      	ldr	r1, [pc, #24]	; (8000fb8 <_ZN5Flash6SDcard11writeStringEPKcS2_+0x30>)
 8000f9e:	4668      	mov	r0, sp
 8000fa0:	f005 fedb 	bl	8006d5a <f_printf>
#ifdef DEBUG_FROM_UART3
		UART_Printf("f_printf() %d bytes \r\n",bytesWritten);
#endif
	if(bytesWritten == -1) {
 8000fa4:	3001      	adds	r0, #1
 8000fa6:	d005      	beq.n	8000fb4 <_ZN5Flash6SDcard11writeStringEPKcS2_+0x2c>
//		UART_Printf("WARNING! Disk is full.\r\n");
//	}

		UART_Printf("f_close() \r\n");
#endif
	res = f_close(&logFile);
 8000fa8:	4668      	mov	r0, sp
 8000faa:	f005 fec9 	bl	8006d40 <f_close>
		UART_Printf("f_close() failed, res = %d\r\n", res);
#endif
		return res;
	}
	return FR_OK;
}
 8000fae:	f50d 7d14 	add.w	sp, sp, #592	; 0x250
 8000fb2:	bd10      	pop	{r4, pc}
		return res;
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	e7fa      	b.n	8000fae <_ZN5Flash6SDcard11writeStringEPKcS2_+0x26>
 8000fb8:	0800b100 	.word	0x0800b100

08000fbc <_ZN5Flash6SDcard6initSDEv>:

FRESULT SDcard::initSD(){
 8000fbc:	b510      	push	{r4, lr}
 8000fbe:	4604      	mov	r4, r0
#ifdef DEBUG_FROM_UART3
		UART_Printf("Init SD \r\n");
#endif
	init = sd_ini()?FR_DISK_ERR:FR_OK;
 8000fc0:	f001 f9a4 	bl	800230c <_Z6sd_iniv>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	b118      	cbz	r0, 8000fd0 <_ZN5Flash6SDcard6initSDEv+0x14>
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f884 0240 	strb.w	r0, [r4, #576]	; 0x240
		mount = f_mount(&fs, "", 0);
		return mount;
	}else{
		return FR_DISK_ERR;
	}
}
 8000fce:	bd10      	pop	{r4, pc}
	init = sd_ini()?FR_DISK_ERR:FR_OK;
 8000fd0:	f884 0240 	strb.w	r0, [r4, #576]	; 0x240
		mount = f_mount(&fs, "", 0);
 8000fd4:	4903      	ldr	r1, [pc, #12]	; (8000fe4 <_ZN5Flash6SDcard6initSDEv+0x28>)
 8000fd6:	1d20      	adds	r0, r4, #4
 8000fd8:	f005 fada 	bl	8006590 <f_mount>
 8000fdc:	f884 0241 	strb.w	r0, [r4, #577]	; 0x241
		return mount;
 8000fe0:	e7f5      	b.n	8000fce <_ZN5Flash6SDcard6initSDEv+0x12>
 8000fe2:	bf00      	nop
 8000fe4:	0800ba2c 	.word	0x0800ba2c

08000fe8 <I2C_Write>:
#define YA_OFFSET_H         0x7A
#define YA_OFFSET_L         0x7B
#define ZA_OFFSET_H         0x7D
#define ZA_OFFSET_L         0x7E
I2C_HandleTypeDef* ihandle;
IIC_Result I2C_Write(uint8_t device_address, uint8_t register_address, uint8_t data) {
 8000fe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Format array to send */
	d[0] = register_address;
	d[1] = data;

	/* Try to transmit via I2C */
	if (HAL_I2C_Master_Transmit(ihandle, (uint16_t)device_address, (uint8_t *)d, 2, 1000) != HAL_OK) {
 8000fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fee:	4c09      	ldr	r4, [pc, #36]	; (8001014 <I2C_Write+0x2c>)
	d[0] = register_address;
 8000ff0:	f88d 100c 	strb.w	r1, [sp, #12]
	d[1] = data;
 8000ff4:	f88d 200d 	strb.w	r2, [sp, #13]
	if (HAL_I2C_Master_Transmit(ihandle, (uint16_t)device_address, (uint8_t *)d, 2, 1000) != HAL_OK) {
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	4601      	mov	r1, r0
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	aa03      	add	r2, sp, #12
 8001000:	6820      	ldr	r0, [r4, #0]
 8001002:	f002 f91d 	bl	8003240 <HAL_I2C_Master_Transmit>
 8001006:	b118      	cbz	r0, 8001010 <I2C_Write+0x28>
		/* Check error */
		if (HAL_I2C_GetError(ihandle) != HAL_I2C_ERROR_AF) {
 8001008:	6820      	ldr	r0, [r4, #0]
 800100a:	f002 fc9b 	bl	8003944 <HAL_I2C_GetError>
 800100e:	2001      	movs	r0, #1
	}

	/* Return OK */

	return IIC_Result_Ok;
}
 8001010:	b004      	add	sp, #16
 8001012:	bd10      	pop	{r4, pc}
 8001014:	20000210 	.word	0x20000210

08001018 <I2C_ReadMulti>:

IIC_Result I2C_ReadMulti(uint8_t device_address, uint8_t register_address, uint8_t* data, uint16_t count) {
 8001018:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}

	/* Send register address */
	if (HAL_I2C_Master_Transmit(ihandle, (uint16_t)device_address, &register_address, 1, 1000) != HAL_OK) {
 800101c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8001020:	4c0f      	ldr	r4, [pc, #60]	; (8001060 <I2C_ReadMulti+0x48>)
IIC_Result I2C_ReadMulti(uint8_t device_address, uint8_t register_address, uint8_t* data, uint16_t count) {
 8001022:	4617      	mov	r7, r2
 8001024:	aa04      	add	r2, sp, #16
 8001026:	f802 1d01 	strb.w	r1, [r2, #-1]!
 800102a:	4698      	mov	r8, r3
	if (HAL_I2C_Master_Transmit(ihandle, (uint16_t)device_address, &register_address, 1, 1000) != HAL_OK) {
 800102c:	4605      	mov	r5, r0
 800102e:	4601      	mov	r1, r0
 8001030:	9600      	str	r6, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	6820      	ldr	r0, [r4, #0]
 8001036:	f002 f903 	bl	8003240 <HAL_I2C_Master_Transmit>
 800103a:	b120      	cbz	r0, 8001046 <I2C_ReadMulti+0x2e>
		return IIC_Result_Error;
	}
	/* Receive multiple byte */
	if (HAL_I2C_Master_Receive(ihandle, device_address, data, count, 1000) != HAL_OK) {
		/* Check error */
		if (HAL_I2C_GetError(ihandle) != HAL_I2C_ERROR_AF) {
 800103c:	6820      	ldr	r0, [r4, #0]
 800103e:	f002 fc81 	bl	8003944 <HAL_I2C_GetError>
 8001042:	2001      	movs	r0, #1
 8001044:	e008      	b.n	8001058 <I2C_ReadMulti+0x40>
	if (HAL_I2C_Master_Receive(ihandle, device_address, data, count, 1000) != HAL_OK) {
 8001046:	9600      	str	r6, [sp, #0]
 8001048:	4643      	mov	r3, r8
 800104a:	463a      	mov	r2, r7
 800104c:	4629      	mov	r1, r5
 800104e:	6820      	ldr	r0, [r4, #0]
 8001050:	f002 f9c4 	bl	80033dc <HAL_I2C_Master_Receive>
 8001054:	2800      	cmp	r0, #0
 8001056:	d1f1      	bne.n	800103c <I2C_ReadMulti+0x24>
	}

	/* Return OK */

	return IIC_Result_Ok;
}
 8001058:	b004      	add	sp, #16
 800105a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800105e:	bf00      	nop
 8001060:	20000210 	.word	0x20000210

08001064 <I2C_Read>:
IIC_Result I2C_Read(uint8_t device_address, uint8_t register_address, uint8_t* data) {
 8001064:	b5f0      	push	{r4, r5, r6, r7, lr}

	/* Send address */

	if (HAL_I2C_Master_Transmit(ihandle, (uint16_t)device_address, &register_address, 1, 1000) != HAL_OK) {
 8001066:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
IIC_Result I2C_Read(uint8_t device_address, uint8_t register_address, uint8_t* data) {
 800106a:	b085      	sub	sp, #20
	if (HAL_I2C_Master_Transmit(ihandle, (uint16_t)device_address, &register_address, 1, 1000) != HAL_OK) {
 800106c:	4c0e      	ldr	r4, [pc, #56]	; (80010a8 <I2C_Read+0x44>)
IIC_Result I2C_Read(uint8_t device_address, uint8_t register_address, uint8_t* data) {
 800106e:	4617      	mov	r7, r2
 8001070:	aa04      	add	r2, sp, #16
 8001072:	f802 1d01 	strb.w	r1, [r2, #-1]!
	if (HAL_I2C_Master_Transmit(ihandle, (uint16_t)device_address, &register_address, 1, 1000) != HAL_OK) {
 8001076:	4605      	mov	r5, r0
 8001078:	4601      	mov	r1, r0
 800107a:	9600      	str	r6, [sp, #0]
 800107c:	2301      	movs	r3, #1
 800107e:	6820      	ldr	r0, [r4, #0]
 8001080:	f002 f8de 	bl	8003240 <HAL_I2C_Master_Transmit>
 8001084:	b120      	cbz	r0, 8001090 <I2C_Read+0x2c>
		if (HAL_I2C_GetError(ihandle) != HAL_I2C_ERROR_AF) {
 8001086:	6820      	ldr	r0, [r4, #0]
 8001088:	f002 fc5c 	bl	8003944 <HAL_I2C_GetError>
 800108c:	2001      	movs	r0, #1
 800108e:	e008      	b.n	80010a2 <I2C_Read+0x3e>

		return IIC_Result_Error;
	}

	/* Receive multiple byte */
	if (HAL_I2C_Master_Receive(ihandle, device_address, data, 1, 1000) != HAL_OK) {
 8001090:	9600      	str	r6, [sp, #0]
 8001092:	2301      	movs	r3, #1
 8001094:	463a      	mov	r2, r7
 8001096:	4629      	mov	r1, r5
 8001098:	6820      	ldr	r0, [r4, #0]
 800109a:	f002 f99f 	bl	80033dc <HAL_I2C_Master_Receive>
 800109e:	2800      	cmp	r0, #0
 80010a0:	d1f1      	bne.n	8001086 <I2C_Read+0x22>
	}

	/* Return OK */

	return IIC_Result_Ok;
}
 80010a2:	b005      	add	sp, #20
 80010a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000210 	.word	0x20000210

080010ac <I2C_IsDeviceConnected>:

IIC_Result I2C_IsDeviceConnected(uint8_t device_address) {

	/* Check if device is ready for communication */
	if (HAL_I2C_IsDeviceReady(ihandle, device_address, 2, 5) != HAL_OK) {
 80010ac:	4601      	mov	r1, r0
 80010ae:	4805      	ldr	r0, [pc, #20]	; (80010c4 <I2C_IsDeviceConnected+0x18>)
IIC_Result I2C_IsDeviceConnected(uint8_t device_address) {
 80010b0:	b508      	push	{r3, lr}
	if (HAL_I2C_IsDeviceReady(ihandle, device_address, 2, 5) != HAL_OK) {
 80010b2:	2202      	movs	r2, #2
 80010b4:	2305      	movs	r3, #5
 80010b6:	6800      	ldr	r0, [r0, #0]
 80010b8:	f002 fb9a 	bl	80037f0 <HAL_I2C_IsDeviceReady>
	}

	/* Return OK */

	return IIC_Result_Ok;
}
 80010bc:	3000      	adds	r0, #0
 80010be:	bf18      	it	ne
 80010c0:	2001      	movne	r0, #1
 80010c2:	bd08      	pop	{r3, pc}
 80010c4:	20000210 	.word	0x20000210

080010c8 <MPU9250_Init>:

TM_MPU9250_Result_t MPU9250_Init(I2C_HandleTypeDef* handle,TM_MPU9250_t* MPU9250, TM_MPU9250_Device_t dev) {
	ihandle = handle;
 80010c8:	4b59      	ldr	r3, [pc, #356]	; (8001230 <MPU9250_Init+0x168>)
TM_MPU9250_Result_t MPU9250_Init(I2C_HandleTypeDef* handle,TM_MPU9250_t* MPU9250, TM_MPU9250_Device_t dev) {
 80010ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ihandle = handle;
 80010cc:	6018      	str	r0, [r3, #0]
	 uint8_t data;

	    /* Set values */
	    MPU9250->I2C_Addr = MPU9250_I2C_ADDR | (uint8_t)dev;
	    MPU9250->I2C_Addr_Mag = MPU9250_I2C_ADDR_MAG;
 80010ce:	2318      	movs	r3, #24
	    MPU9250->I2C_Addr = MPU9250_I2C_ADDR | (uint8_t)dev;
 80010d0:	f042 00d0 	orr.w	r0, r2, #208	; 0xd0
 80010d4:	f881 0044 	strb.w	r0, [r1, #68]	; 0x44
	    MPU9250->I2C_Addr_Mag = MPU9250_I2C_ADDR_MAG;
 80010d8:	f881 3045 	strb.w	r3, [r1, #69]	; 0x45
TM_MPU9250_Result_t MPU9250_Init(I2C_HandleTypeDef* handle,TM_MPU9250_t* MPU9250, TM_MPU9250_Device_t dev) {
 80010dc:	460c      	mov	r4, r1




	    /* Check if device connected */
	    if (I2C_IsDeviceConnected(MPU9250->I2C_Addr) != IIC_Result_Ok) {
 80010de:	f7ff ffe5 	bl	80010ac <I2C_IsDeviceConnected>
 80010e2:	4605      	mov	r5, r0
 80010e4:	b110      	cbz	r0, 80010ec <MPU9250_Init+0x24>
	        return TM_MPU9250_Result_DeviceNotConnected;
 80010e6:	2002      	movs	r0, #2
	    MPU9250->AMult = 2.0f / 32768.0f;
	    MPU9250->GMult = 250.0f / 32768.0f;
	    MPU9250->MMult = 10.0f * 4912.0f / 32768.0f;

	    return TM_MPU9250_Result_Ok;
}
 80010e8:	b003      	add	sp, #12
 80010ea:	bd30      	pop	{r4, r5, pc}
	    I2C_Read( MPU9250->I2C_Addr, WHO_AM_I_MPU9250, &data);
 80010ec:	f10d 0207 	add.w	r2, sp, #7
 80010f0:	2175      	movs	r1, #117	; 0x75
 80010f2:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 80010f6:	f7ff ffb5 	bl	8001064 <I2C_Read>
	    if (data != 0x71) {
 80010fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80010fe:	2b71      	cmp	r3, #113	; 0x71
 8001100:	d1f1      	bne.n	80010e6 <MPU9250_Init+0x1e>
	    I2C_Write( MPU9250->I2C_Addr, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 8001102:	462a      	mov	r2, r5
 8001104:	216b      	movs	r1, #107	; 0x6b
 8001106:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800110a:	f7ff ff6d 	bl	8000fe8 <I2C_Write>
	    HAL_Delay(100); // Wait for all registers to reset
 800110e:	2064      	movs	r0, #100	; 0x64
 8001110:	f001 fcf6 	bl	8002b00 <HAL_Delay>
	    I2C_Write( MPU9250->I2C_Addr, PWR_MGMT_1, 0x01);  // Auto select clock source to be PLL gyroscope reference if ready else
 8001114:	2201      	movs	r2, #1
 8001116:	216b      	movs	r1, #107	; 0x6b
 8001118:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800111c:	f7ff ff64 	bl	8000fe8 <I2C_Write>
	    HAL_Delay(200);
 8001120:	20c8      	movs	r0, #200	; 0xc8
 8001122:	f001 fced 	bl	8002b00 <HAL_Delay>
	    I2C_Write( MPU9250->I2C_Addr, CONFIG, 0x03);
 8001126:	2203      	movs	r2, #3
 8001128:	211a      	movs	r1, #26
 800112a:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800112e:	f7ff ff5b 	bl	8000fe8 <I2C_Write>
	    I2C_Write( MPU9250->I2C_Addr, SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; a rate consistent with the filter update rate
 8001132:	2204      	movs	r2, #4
 8001134:	2119      	movs	r1, #25
 8001136:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800113a:	f7ff ff55 	bl	8000fe8 <I2C_Write>
	    I2C_Read( MPU9250->I2C_Addr, GYRO_CONFIG, &data); // get current GYRO_CONFIG register value
 800113e:	f10d 0207 	add.w	r2, sp, #7
 8001142:	211b      	movs	r1, #27
 8001144:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8001148:	f7ff ff8c 	bl	8001064 <I2C_Read>
	    data &= ~0x18; // Clear AFS bits [4:3]
 800114c:	f89d 2007 	ldrb.w	r2, [sp, #7]
	    I2C_Write( MPU9250->I2C_Addr, GYRO_CONFIG, data); // Write new GYRO_CONFIG value to register
 8001150:	211b      	movs	r1, #27
	    data &= ~0x18; // Clear AFS bits [4:3]
 8001152:	f002 02e5 	and.w	r2, r2, #229	; 0xe5
	    I2C_Write( MPU9250->I2C_Addr, GYRO_CONFIG, data); // Write new GYRO_CONFIG value to register
 8001156:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
	    data &= ~0x18; // Clear AFS bits [4:3]
 800115a:	f88d 2007 	strb.w	r2, [sp, #7]
	    I2C_Write( MPU9250->I2C_Addr, GYRO_CONFIG, data); // Write new GYRO_CONFIG value to register
 800115e:	f7ff ff43 	bl	8000fe8 <I2C_Write>
	    I2C_Read( MPU9250->I2C_Addr, ACCEL_CONFIG, &data); // get current ACCEL_CONFIG register value
 8001162:	f10d 0207 	add.w	r2, sp, #7
 8001166:	211c      	movs	r1, #28
 8001168:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800116c:	f7ff ff7a 	bl	8001064 <I2C_Read>
	    data &= ~0x18;  // Clear AFS bits [4:3]
 8001170:	f89d 2007 	ldrb.w	r2, [sp, #7]
	    I2C_Write( MPU9250->I2C_Addr, ACCEL_CONFIG, data); // Write new ACCEL_CONFIG register value
 8001174:	211c      	movs	r1, #28
	    data &= ~0x18;  // Clear AFS bits [4:3]
 8001176:	f002 02e7 	and.w	r2, r2, #231	; 0xe7
	    I2C_Write( MPU9250->I2C_Addr, ACCEL_CONFIG, data); // Write new ACCEL_CONFIG register value
 800117a:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
	    data &= ~0x18;  // Clear AFS bits [4:3]
 800117e:	f88d 2007 	strb.w	r2, [sp, #7]
	    I2C_Write( MPU9250->I2C_Addr, ACCEL_CONFIG, data); // Write new ACCEL_CONFIG register value
 8001182:	f7ff ff31 	bl	8000fe8 <I2C_Write>
	    I2C_Read( MPU9250->I2C_Addr, ACCEL_CONFIG2, &data); // get current ACCEL_CONFIG2 register value
 8001186:	f10d 0207 	add.w	r2, sp, #7
 800118a:	211d      	movs	r1, #29
 800118c:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8001190:	f7ff ff68 	bl	8001064 <I2C_Read>
	    data &= ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8001194:	f89d 2007 	ldrb.w	r2, [sp, #7]
	    I2C_Write( MPU9250->I2C_Addr, ACCEL_CONFIG2, data); // Write new ACCEL_CONFIG2 register value
 8001198:	211d      	movs	r1, #29
	    data &= ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 800119a:	f022 020f 	bic.w	r2, r2, #15
	    data |= 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 800119e:	f042 0203 	orr.w	r2, r2, #3
	    I2C_Write( MPU9250->I2C_Addr, ACCEL_CONFIG2, data); // Write new ACCEL_CONFIG2 register value
 80011a2:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
	    data |= 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 80011a6:	f88d 2007 	strb.w	r2, [sp, #7]
	    I2C_Write( MPU9250->I2C_Addr, ACCEL_CONFIG2, data); // Write new ACCEL_CONFIG2 register value
 80011aa:	f7ff ff1d 	bl	8000fe8 <I2C_Write>
	    I2C_Write( MPU9250->I2C_Addr, INT_PIN_CFG, 0x22);
 80011ae:	2222      	movs	r2, #34	; 0x22
 80011b0:	2137      	movs	r1, #55	; 0x37
 80011b2:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 80011b6:	f7ff ff17 	bl	8000fe8 <I2C_Write>
	    I2C_Write( MPU9250->I2C_Addr, INT_ENABLE, 0x01);
 80011ba:	2201      	movs	r2, #1
 80011bc:	2138      	movs	r1, #56	; 0x38
 80011be:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 80011c2:	f7ff ff11 	bl	8000fe8 <I2C_Write>
	    if (I2C_IsDeviceConnected( MPU9250->I2C_Addr_Mag) !=  IIC_Result_Ok) {
 80011c6:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
 80011ca:	f7ff ff6f 	bl	80010ac <I2C_IsDeviceConnected>
 80011ce:	4605      	mov	r5, r0
 80011d0:	2800      	cmp	r0, #0
 80011d2:	d188      	bne.n	80010e6 <MPU9250_Init+0x1e>
	    I2C_Write( MPU9250->I2C_Addr_Mag, AK8963_CNTL, 0x00); // Power down magnetometer
 80011d4:	4602      	mov	r2, r0
 80011d6:	210a      	movs	r1, #10
 80011d8:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
 80011dc:	f7ff ff04 	bl	8000fe8 <I2C_Write>
	    HAL_Delay(10);
 80011e0:	200a      	movs	r0, #10
 80011e2:	f001 fc8d 	bl	8002b00 <HAL_Delay>
	    I2C_Write( MPU9250->I2C_Addr_Mag, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 80011e6:	220f      	movs	r2, #15
 80011e8:	210a      	movs	r1, #10
 80011ea:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
 80011ee:	f7ff fefb 	bl	8000fe8 <I2C_Write>
	    HAL_Delay(10);
 80011f2:	200a      	movs	r0, #10
 80011f4:	f001 fc84 	bl	8002b00 <HAL_Delay>
	    I2C_Write( MPU9250->I2C_Addr_Mag, AK8963_CNTL, 0x00); // Power down magnetometer
 80011f8:	462a      	mov	r2, r5
 80011fa:	210a      	movs	r1, #10
 80011fc:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
 8001200:	f7ff fef2 	bl	8000fe8 <I2C_Write>
	    HAL_Delay(10);
 8001204:	200a      	movs	r0, #10
 8001206:	f001 fc7b 	bl	8002b00 <HAL_Delay>
	    I2C_Write( MPU9250->I2C_Addr_Mag, AK8963_CNTL, 1 << 4 | 2); // Set magnetometer data resolution and sample ODR
 800120a:	2212      	movs	r2, #18
 800120c:	210a      	movs	r1, #10
 800120e:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
 8001212:	f7ff fee9 	bl	8000fe8 <I2C_Write>
	    HAL_Delay(10);
 8001216:	200a      	movs	r0, #10
 8001218:	f001 fc72 	bl	8002b00 <HAL_Delay>
	    MPU9250->AMult = 2.0f / 32768.0f;
 800121c:	f04f 5362 	mov.w	r3, #947912704	; 0x38800000
 8001220:	63a3      	str	r3, [r4, #56]	; 0x38
	    MPU9250->GMult = 250.0f / 32768.0f;
 8001222:	4b04      	ldr	r3, [pc, #16]	; (8001234 <MPU9250_Init+0x16c>)
	    return TM_MPU9250_Result_Ok;
 8001224:	4628      	mov	r0, r5
	    MPU9250->GMult = 250.0f / 32768.0f;
 8001226:	63e3      	str	r3, [r4, #60]	; 0x3c
	    MPU9250->MMult = 10.0f * 4912.0f / 32768.0f;
 8001228:	4b03      	ldr	r3, [pc, #12]	; (8001238 <MPU9250_Init+0x170>)
 800122a:	6423      	str	r3, [r4, #64]	; 0x40
	    return TM_MPU9250_Result_Ok;
 800122c:	e75c      	b.n	80010e8 <MPU9250_Init+0x20>
 800122e:	bf00      	nop
 8001230:	20000210 	.word	0x20000210
 8001234:	3bfa0000 	.word	0x3bfa0000
 8001238:	3fbfe000 	.word	0x3fbfe000

0800123c <TM_MPU9250_ReadAcce>:


TM_MPU9250_Result_t TM_MPU9250_ReadAcce(TM_MPU9250_t* MPU9250) {
 800123c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800123e:	4604      	mov	r4, r0
	uint8_t data[6];

	/* Read accelerometer data */
	I2C_ReadMulti( MPU9250->I2C_Addr, ACCEL_XOUT_H, data, 6);
 8001240:	466a      	mov	r2, sp
 8001242:	213b      	movs	r1, #59	; 0x3b
 8001244:	2306      	movs	r3, #6
 8001246:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
 800124a:	f7ff fee5 	bl	8001018 <I2C_ReadMulti>

	MPU9250->Ax_Raw = ((int16_t)data[0] << 8) | data[1];
 800124e:	f89d 3000 	ldrb.w	r3, [sp]
 8001252:	f89d 0001 	ldrb.w	r0, [sp, #1]
	MPU9250->Ay_Raw = ((int16_t)data[2] << 8) | data[3];
 8001256:	f89d 6003 	ldrb.w	r6, [sp, #3]
	MPU9250->Ax_Raw = ((int16_t)data[0] << 8) | data[1];
 800125a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	MPU9250->Ay_Raw = ((int16_t)data[2] << 8) | data[3];
 800125e:	f89d 3002 	ldrb.w	r3, [sp, #2]
	MPU9250->Az_Raw = ((int16_t)data[4] << 8) | data[5];
 8001262:	f89d 5005 	ldrb.w	r5, [sp, #5]
	MPU9250->Ay_Raw = ((int16_t)data[2] << 8) | data[3];
 8001266:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
	MPU9250->Az_Raw = ((int16_t)data[4] << 8) | data[5];
 800126a:	f89d 3004 	ldrb.w	r3, [sp, #4]

	MPU9250->Ax = (float)MPU9250->Ax_Raw * MPU9250->AMult;
 800126e:	6ba7      	ldr	r7, [r4, #56]	; 0x38
	MPU9250->Az_Raw = ((int16_t)data[4] << 8) | data[5];
 8001270:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	MPU9250->Ay_Raw = ((int16_t)data[2] << 8) | data[3];
 8001274:	b236      	sxth	r6, r6
	MPU9250->Az_Raw = ((int16_t)data[4] << 8) | data[5];
 8001276:	b22d      	sxth	r5, r5
	MPU9250->Ax_Raw = ((int16_t)data[0] << 8) | data[1];
 8001278:	b200      	sxth	r0, r0
 800127a:	84a0      	strh	r0, [r4, #36]	; 0x24
	MPU9250->Ay_Raw = ((int16_t)data[2] << 8) | data[3];
 800127c:	84e6      	strh	r6, [r4, #38]	; 0x26
	MPU9250->Az_Raw = ((int16_t)data[4] << 8) | data[5];
 800127e:	8525      	strh	r5, [r4, #40]	; 0x28
	MPU9250->Ax = (float)MPU9250->Ax_Raw * MPU9250->AMult;
 8001280:	f7ff fcbc 	bl	8000bfc <__aeabi_i2f>
 8001284:	4639      	mov	r1, r7
 8001286:	f7ff fd0d 	bl	8000ca4 <__aeabi_fmul>
 800128a:	6020      	str	r0, [r4, #0]
	MPU9250->Ay = (float)MPU9250->Ay_Raw * MPU9250->AMult;
 800128c:	4630      	mov	r0, r6
 800128e:	f7ff fcb5 	bl	8000bfc <__aeabi_i2f>
 8001292:	4639      	mov	r1, r7
 8001294:	f7ff fd06 	bl	8000ca4 <__aeabi_fmul>
 8001298:	6060      	str	r0, [r4, #4]
	MPU9250->Az = (float)MPU9250->Az_Raw * MPU9250->AMult;
 800129a:	4628      	mov	r0, r5
 800129c:	f7ff fcae 	bl	8000bfc <__aeabi_i2f>
 80012a0:	4639      	mov	r1, r7
 80012a2:	f7ff fcff 	bl	8000ca4 <__aeabi_fmul>
 80012a6:	60a0      	str	r0, [r4, #8]
	  return TM_MPU9250_Result_Ok;
}
 80012a8:	2000      	movs	r0, #0
 80012aa:	b003      	add	sp, #12
 80012ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012ae <TM_MPU9250_ReadGyro>:

TM_MPU9250_Result_t TM_MPU9250_ReadGyro(TM_MPU9250_t* MPU9250) {
 80012ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80012b0:	4604      	mov	r4, r0
	uint8_t data[6];
	I2C_ReadMulti( MPU9250->I2C_Addr, GYRO_XOUT_H, data, 6);
 80012b2:	466a      	mov	r2, sp
 80012b4:	2143      	movs	r1, #67	; 0x43
 80012b6:	2306      	movs	r3, #6
 80012b8:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
 80012bc:	f7ff feac 	bl	8001018 <I2C_ReadMulti>

	MPU9250->Gx_Raw = ((int16_t)data[0] << 8) | data[1];
 80012c0:	f89d 3000 	ldrb.w	r3, [sp]
 80012c4:	f89d 0001 	ldrb.w	r0, [sp, #1]
	MPU9250->Gy_Raw = ((int16_t)data[2] << 8) | data[3];
 80012c8:	f89d 6003 	ldrb.w	r6, [sp, #3]
	MPU9250->Gx_Raw = ((int16_t)data[0] << 8) | data[1];
 80012cc:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	MPU9250->Gy_Raw = ((int16_t)data[2] << 8) | data[3];
 80012d0:	f89d 3002 	ldrb.w	r3, [sp, #2]
	MPU9250->Gz_Raw = ((int16_t)data[4] << 8) | data[5];
 80012d4:	f89d 5005 	ldrb.w	r5, [sp, #5]
	MPU9250->Gy_Raw = ((int16_t)data[2] << 8) | data[3];
 80012d8:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
	MPU9250->Gz_Raw = ((int16_t)data[4] << 8) | data[5];
 80012dc:	f89d 3004 	ldrb.w	r3, [sp, #4]

	MPU9250->Gx = (float)MPU9250->Gx_Raw * MPU9250->GMult;
 80012e0:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	MPU9250->Gz_Raw = ((int16_t)data[4] << 8) | data[5];
 80012e2:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	MPU9250->Gy_Raw = ((int16_t)data[2] << 8) | data[3];
 80012e6:	b236      	sxth	r6, r6
	MPU9250->Gz_Raw = ((int16_t)data[4] << 8) | data[5];
 80012e8:	b22d      	sxth	r5, r5
	MPU9250->Gx_Raw = ((int16_t)data[0] << 8) | data[1];
 80012ea:	b200      	sxth	r0, r0
 80012ec:	8560      	strh	r0, [r4, #42]	; 0x2a
	MPU9250->Gy_Raw = ((int16_t)data[2] << 8) | data[3];
 80012ee:	85a6      	strh	r6, [r4, #44]	; 0x2c
	MPU9250->Gz_Raw = ((int16_t)data[4] << 8) | data[5];
 80012f0:	85e5      	strh	r5, [r4, #46]	; 0x2e
	MPU9250->Gx = (float)MPU9250->Gx_Raw * MPU9250->GMult;
 80012f2:	f7ff fc83 	bl	8000bfc <__aeabi_i2f>
 80012f6:	4639      	mov	r1, r7
 80012f8:	f7ff fcd4 	bl	8000ca4 <__aeabi_fmul>
 80012fc:	60e0      	str	r0, [r4, #12]
	MPU9250->Gy = (float)MPU9250->Gy_Raw * MPU9250->GMult;
 80012fe:	4630      	mov	r0, r6
 8001300:	f7ff fc7c 	bl	8000bfc <__aeabi_i2f>
 8001304:	4639      	mov	r1, r7
 8001306:	f7ff fccd 	bl	8000ca4 <__aeabi_fmul>
 800130a:	6120      	str	r0, [r4, #16]
	MPU9250->Gz = (float)MPU9250->Gz_Raw * MPU9250->GMult;
 800130c:	4628      	mov	r0, r5
 800130e:	f7ff fc75 	bl	8000bfc <__aeabi_i2f>
 8001312:	4639      	mov	r1, r7
 8001314:	f7ff fcc6 	bl	8000ca4 <__aeabi_fmul>
 8001318:	6160      	str	r0, [r4, #20]
	  return TM_MPU9250_Result_Ok;
}
 800131a:	2000      	movs	r0, #0
 800131c:	b003      	add	sp, #12
 800131e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001320 <TM_MPU9250_ReadMag>:

TM_MPU9250_Result_t TM_MPU9250_ReadMag(TM_MPU9250_t* MPU9250) {
 8001320:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001322:	4604      	mov	r4, r0
	uint8_t data[7];
	uint8_t check;

	/* Check status */
	I2C_Read( MPU9250->I2C_Addr_Mag, AK8963_ST1, &check);
 8001324:	f10d 0207 	add.w	r2, sp, #7
 8001328:	2102      	movs	r1, #2
 800132a:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
 800132e:	f7ff fe99 	bl	8001064 <I2C_Read>

	if (check & 0x01) {
 8001332:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001336:	07da      	lsls	r2, r3, #31
 8001338:	d51f      	bpl.n	800137a <TM_MPU9250_ReadMag+0x5a>
		I2C_ReadMulti( MPU9250->I2C_Addr_Mag, AK8963_XOUT_L, data, 7);
 800133a:	2307      	movs	r3, #7
 800133c:	aa02      	add	r2, sp, #8
 800133e:	2103      	movs	r1, #3
 8001340:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
 8001344:	f7ff fe68 	bl	8001018 <I2C_ReadMulti>
		if (!(data[6] & 0x08)) {
 8001348:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800134c:	071b      	lsls	r3, r3, #28
 800134e:	d414      	bmi.n	800137a <TM_MPU9250_ReadMag+0x5a>
			MPU9250->Mx_Raw = ((int16_t)data[1] << 8) | data[0];
 8001350:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8001354:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001358:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800135c:	8623      	strh	r3, [r4, #48]	; 0x30
			MPU9250->My_Raw = ((int16_t)data[3] << 8) | data[2];
 800135e:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8001362:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8001366:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800136a:	8663      	strh	r3, [r4, #50]	; 0x32
			MPU9250->Mz_Raw = ((int16_t)data[5] << 8) | data[4];
 800136c:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8001370:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001374:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001378:	86a3      	strh	r3, [r4, #52]	; 0x34
		}
	}
	  return TM_MPU9250_Result_Ok;
}
 800137a:	2000      	movs	r0, #0
 800137c:	b004      	add	sp, #16
 800137e:	bd10      	pop	{r4, pc}

08001380 <configureTimerForRunTimeStats>:
/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{

}
 8001380:	4770      	bx	lr

08001382 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
return 0;
}
 8001382:	2000      	movs	r0, #0
 8001384:	4770      	bx	lr
	...

08001388 <_ZN8Keyboard6Button16setDefaultBuzzerEv>:
#include  "keyboard.h"
namespace Keyboard{


void Button::setDefaultBuzzer()
{
 8001388:	4603      	mov	r3, r0
	this->shortPressBuzzer=defShortPressBuzzer;
 800138a:	4a0b      	ldr	r2, [pc, #44]	; (80013b8 <_ZN8Keyboard6Button16setDefaultBuzzerEv+0x30>)
 800138c:	6810      	ldr	r0, [r2, #0]
 800138e:	8892      	ldrh	r2, [r2, #4]
 8001390:	6158      	str	r0, [r3, #20]
 8001392:	831a      	strh	r2, [r3, #24]
	this->longPressBuzzer = defLongPressBuzzer;
 8001394:	4a09      	ldr	r2, [pc, #36]	; (80013bc <_ZN8Keyboard6Button16setDefaultBuzzerEv+0x34>)
 8001396:	6811      	ldr	r1, [r2, #0]
 8001398:	8892      	ldrh	r2, [r2, #4]
 800139a:	f8c3 101a 	str.w	r1, [r3, #26]
 800139e:	83da      	strh	r2, [r3, #30]
	this->longReleeseBuzzer= defLongReleeseBuzzer;
 80013a0:	4a07      	ldr	r2, [pc, #28]	; (80013c0 <_ZN8Keyboard6Button16setDefaultBuzzerEv+0x38>)
 80013a2:	6810      	ldr	r0, [r2, #0]
 80013a4:	8892      	ldrh	r2, [r2, #4]
 80013a6:	6218      	str	r0, [r3, #32]
 80013a8:	849a      	strh	r2, [r3, #36]	; 0x24
	this->shortReleeseBuzzer = defShortReleeseBuzzer;
 80013aa:	4a06      	ldr	r2, [pc, #24]	; (80013c4 <_ZN8Keyboard6Button16setDefaultBuzzerEv+0x3c>)
 80013ac:	6811      	ldr	r1, [r2, #0]
 80013ae:	8892      	ldrh	r2, [r2, #4]
 80013b0:	f8c3 1026 	str.w	r1, [r3, #38]	; 0x26
 80013b4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80013b6:	4770      	bx	lr
 80013b8:	0800b896 	.word	0x0800b896
 80013bc:	0800b890 	.word	0x0800b890
 80013c0:	0800b89c 	.word	0x0800b89c
 80013c4:	0800b8a2 	.word	0x0800b8a2

080013c8 <_ZN8Keyboard6Button7readPinEv>:
	this->setDefaultBuzzer();
}

bool Button::readPin()
		{
	bool result = HAL_GPIO_ReadPin(buttonPort, buttonPin)==GPIO_PIN_RESET;
 80013c8:	8981      	ldrh	r1, [r0, #12]
		{
 80013ca:	b508      	push	{r3, lr}
	bool result = HAL_GPIO_ReadPin(buttonPort, buttonPin)==GPIO_PIN_RESET;
 80013cc:	6880      	ldr	r0, [r0, #8]
 80013ce:	f001 fd3b 	bl	8002e48 <HAL_GPIO_ReadPin>
	return result;
		}
 80013d2:	fab0 f080 	clz	r0, r0
 80013d6:	0940      	lsrs	r0, r0, #5
 80013d8:	bd08      	pop	{r3, pc}

080013da <_ZN8Keyboard6Button15btnShortPressedEv>:
	return BUTTON_POLL;
}

void Button::btnShortPressed()
{
	this->btnState = BUTTON_SHORT_PRESSED;
 80013da:	2305      	movs	r3, #5
{
 80013dc:	b510      	push	{r4, lr}
	this->btnState = BUTTON_SHORT_PRESSED;
 80013de:	7003      	strb	r3, [r0, #0]
{
 80013e0:	4604      	mov	r4, r0
		    this->start_press_timer = osKernelGetTickCount();
 80013e2:	f005 fe5b 	bl	800709c <osKernelGetTickCount>
 80013e6:	6060      	str	r0, [r4, #4]
}
 80013e8:	bd10      	pop	{r4, pc}

080013ea <_ZN8Keyboard6Button14checkLongpressEv>:
	this->btnState = BUTTON_POLL;

}

bool Button::checkLongpress()
{
 80013ea:	b510      	push	{r4, lr}
	if((this->start_press_timer + BTN_LONG_PRESS_TIME_DELAY)<osKernelGetTickCount())
 80013ec:	6844      	ldr	r4, [r0, #4]
 80013ee:	f005 fe55 	bl	800709c <osKernelGetTickCount>
 80013f2:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
	{
		return true;
	}
	return false;
};
 80013f6:	4284      	cmp	r4, r0
 80013f8:	bf2c      	ite	cs
 80013fa:	2000      	movcs	r0, #0
 80013fc:	2001      	movcc	r0, #1
 80013fe:	bd10      	pop	{r4, pc}

08001400 <_ZN8Keyboard6Button8getStateEv>:
{
 8001400:	b510      	push	{r4, lr}
 8001402:	4604      	mov	r4, r0
	bool pinState = readPin();
 8001404:	f7ff ffe0 	bl	80013c8 <_ZN8Keyboard6Button7readPinEv>
 8001408:	7823      	ldrb	r3, [r4, #0]
	if(pinState && this->btnState==BUTTON_POLL)
 800140a:	b1b0      	cbz	r0, 800143a <_ZN8Keyboard6Button8getStateEv+0x3a>
		btnShortPressed();
 800140c:	4620      	mov	r0, r4
	if(pinState && this->btnState==BUTTON_POLL)
 800140e:	b91b      	cbnz	r3, 8001418 <_ZN8Keyboard6Button8getStateEv+0x18>
		btnShortPressed();
 8001410:	f7ff ffe3 	bl	80013da <_ZN8Keyboard6Button15btnShortPressedEv>
		return BUTTON_SHORT_PRESSED;
 8001414:	2005      	movs	r0, #5
}
 8001416:	bd10      	pop	{r4, pc}
	if(pinState && checkLongpress() && (this->btnState==BUTTON_SHORT_PRESSED))
 8001418:	f7ff ffe7 	bl	80013ea <_ZN8Keyboard6Button14checkLongpressEv>
 800141c:	b908      	cbnz	r0, 8001422 <_ZN8Keyboard6Button8getStateEv+0x22>
		return BUTTON_POLL;
 800141e:	2000      	movs	r0, #0
 8001420:	e7f9      	b.n	8001416 <_ZN8Keyboard6Button8getStateEv+0x16>
	if(pinState && checkLongpress() && (this->btnState==BUTTON_SHORT_PRESSED))
 8001422:	7823      	ldrb	r3, [r4, #0]
 8001424:	2b05      	cmp	r3, #5
 8001426:	d1fa      	bne.n	800141e <_ZN8Keyboard6Button8getStateEv+0x1e>
	this->btnState = BUTTON_LONG_PRESSED;
 8001428:	2001      	movs	r0, #1
 800142a:	7020      	strb	r0, [r4, #0]
		return BUTTON_LONG_PRESSED;
 800142c:	e7f3      	b.n	8001416 <_ZN8Keyboard6Button8getStateEv+0x16>
	if(!pinState && (this->btnState==BUTTON_LONG_PRESSED))
 800142e:	2b01      	cmp	r3, #1
 8001430:	d1f5      	bne.n	800141e <_ZN8Keyboard6Button8getStateEv+0x1e>
	this->start_press_timer = 0 ;
 8001432:	6060      	str	r0, [r4, #4]
	this->btnState = BUTTON_POLL;
 8001434:	7020      	strb	r0, [r4, #0]
		return BUTTON_LONG_RELEASED;
 8001436:	2002      	movs	r0, #2
 8001438:	e7ed      	b.n	8001416 <_ZN8Keyboard6Button8getStateEv+0x16>
	if(!pinState && (this->btnState==BUTTON_SHORT_PRESSED))
 800143a:	2b05      	cmp	r3, #5
 800143c:	d1f7      	bne.n	800142e <_ZN8Keyboard6Button8getStateEv+0x2e>
	this->btnState = BUTTON_POLL;
 800143e:	7020      	strb	r0, [r4, #0]
		return BUTTON_SHORT_RELEASED;
 8001440:	2006      	movs	r0, #6
 8001442:	e7e8      	b.n	8001416 <_ZN8Keyboard6Button8getStateEv+0x16>

08001444 <_ZN8Keyboard6HadlerC1EP7osQueueINS_17buttonEventStructEEPS1_I12buzzerStructE>:
Button::Button(GPIO_TypeDef * btnPort,uint16_t btnPin,const char* label):Label(label)
 8001444:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <_ZN8Keyboard6HadlerC1EP7osQueueINS_17buttonEventStructEEPS1_I12buzzerStructE+0x5c>)


Hadler::Hadler(osQueue<buttonEventStruct> *  keyQueue,	osQueue<buzzerStruct> * buzQueue): keyboardQueue(keyQueue), buzzerQueue(buzQueue)
 8001446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
Button::Button(GPIO_TypeDef * btnPort,uint16_t btnPin,const char* label):Label(label)
 800144a:	2500      	movs	r5, #0
 800144c:	6103      	str	r3, [r0, #16]
	this->buttonPin = btnPin;
 800144e:	2320      	movs	r3, #32
Hadler::Hadler(osQueue<buttonEventStruct> *  keyQueue,	osQueue<buzzerStruct> * buzQueue): keyboardQueue(keyQueue), buzzerQueue(buzQueue)
 8001450:	4604      	mov	r4, r0
	this->buttonPort = btnPort;
 8001452:	4e14      	ldr	r6, [pc, #80]	; (80014a4 <_ZN8Keyboard6HadlerC1EP7osQueueINS_17buttonEventStructEEPS1_I12buzzerStructE+0x60>)
Button::Button(GPIO_TypeDef * btnPort,uint16_t btnPin,const char* label):Label(label)
 8001454:	7005      	strb	r5, [r0, #0]
 8001456:	6045      	str	r5, [r0, #4]
	this->buttonPort = btnPort;
 8001458:	6086      	str	r6, [r0, #8]
	this->buttonPin = btnPin;
 800145a:	8183      	strh	r3, [r0, #12]
Hadler::Hadler(osQueue<buttonEventStruct> *  keyQueue,	osQueue<buzzerStruct> * buzQueue): keyboardQueue(keyQueue), buzzerQueue(buzQueue)
 800145c:	4688      	mov	r8, r1
 800145e:	4617      	mov	r7, r2
	this->setDefaultBuzzer();
 8001460:	f7ff ff92 	bl	8001388 <_ZN8Keyboard6Button16setDefaultBuzzerEv>
Button::Button(GPIO_TypeDef * btnPort,uint16_t btnPin,const char* label):Label(label)
 8001464:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <_ZN8Keyboard6HadlerC1EP7osQueueINS_17buttonEventStructEEPS1_I12buzzerStructE+0x64>)
	this->setDefaultBuzzer();
 8001466:	f104 002c 	add.w	r0, r4, #44	; 0x2c
Button::Button(GPIO_TypeDef * btnPort,uint16_t btnPin,const char* label):Label(label)
 800146a:	63e3      	str	r3, [r4, #60]	; 0x3c
	this->buttonPin = btnPin;
 800146c:	2310      	movs	r3, #16
Button::Button(GPIO_TypeDef * btnPort,uint16_t btnPin,const char* label):Label(label)
 800146e:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
	this->buttonPin = btnPin;
 8001472:	8723      	strh	r3, [r4, #56]	; 0x38
Button::Button(GPIO_TypeDef * btnPort,uint16_t btnPin,const char* label):Label(label)
 8001474:	6325      	str	r5, [r4, #48]	; 0x30
	this->buttonPort = btnPort;
 8001476:	6366      	str	r6, [r4, #52]	; 0x34
	this->setDefaultBuzzer();
 8001478:	f7ff ff86 	bl	8001388 <_ZN8Keyboard6Button16setDefaultBuzzerEv>
Button::Button(GPIO_TypeDef * btnPort,uint16_t btnPin,const char* label):Label(label)
 800147c:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <_ZN8Keyboard6HadlerC1EP7osQueueINS_17buttonEventStructEEPS1_I12buzzerStructE+0x68>)
	this->setDefaultBuzzer();
 800147e:	f104 0058 	add.w	r0, r4, #88	; 0x58
Button::Button(GPIO_TypeDef * btnPort,uint16_t btnPin,const char* label):Label(label)
 8001482:	66a3      	str	r3, [r4, #104]	; 0x68
	this->buttonPin = btnPin;
 8001484:	2308      	movs	r3, #8
Button::Button(GPIO_TypeDef * btnPort,uint16_t btnPin,const char* label):Label(label)
 8001486:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 800148a:	65e5      	str	r5, [r4, #92]	; 0x5c
	this->buttonPort = btnPort;
 800148c:	6626      	str	r6, [r4, #96]	; 0x60
	this->buttonPin = btnPin;
 800148e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
	this->setDefaultBuzzer();
 8001492:	f7ff ff79 	bl	8001388 <_ZN8Keyboard6Button16setDefaultBuzzerEv>
Hadler::Hadler(osQueue<buttonEventStruct> *  keyQueue,	osQueue<buzzerStruct> * buzQueue): keyboardQueue(keyQueue), buzzerQueue(buzQueue)
 8001496:	e9c4 8721 	strd	r8, r7, [r4, #132]	; 0x84
{

}
 800149a:	4620      	mov	r0, r4
 800149c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014a0:	0800b880 	.word	0x0800b880
 80014a4:	40010c00 	.word	0x40010c00
 80014a8:	0800b885 	.word	0x0800b885
 80014ac:	0800b88a 	.word	0x0800b88a

080014b0 <_ZN8Keyboard6Hadler13checkKeyboardEv>:
void Hadler::checkKeyboard()
{
 80014b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80014b2:	4605      	mov	r5, r0
 80014b4:	4604      	mov	r4, r0
 80014b6:	f100 0784 	add.w	r7, r0, #132	; 0x84
	for (int i = 0; i <BTN_COUNT ; ++i)
	{
		ButtonState stat = buttons[i].getState();
 80014ba:	4620      	mov	r0, r4
 80014bc:	f7ff ffa0 	bl	8001400 <_ZN8Keyboard6Button8getStateEv>
		switch (stat) {
 80014c0:	3801      	subs	r0, #1
 80014c2:	2805      	cmp	r0, #5
 80014c4:	d81d      	bhi.n	8001502 <_ZN8Keyboard6Hadler13checkKeyboardEv+0x52>
 80014c6:	e8df f000 	tbb	[pc, r0]
 80014ca:	0d03      	.short	0x0d03
 80014cc:	26211c1c 	.word	0x26211c1c
							return this->longPressBuzzer;
 80014d0:	4623      	mov	r3, r4
				case BUTTON_LONG_PRESSED:
						this->buzzerQueue->send(buttons[i].getBuzzer(BUTTON_LONG_PRESSED));
 80014d2:	f8d5 6088 	ldr.w	r6, [r5, #136]	; 0x88
							return this->longPressBuzzer;
 80014d6:	f853 0f1a 	ldr.w	r0, [r3, #26]!
						return this->shortReleeseBuzzer;
 80014da:	9000      	str	r0, [sp, #0]
 80014dc:	889b      	ldrh	r3, [r3, #4]
 80014de:	f8ad 3004 	strh.w	r3, [sp, #4]
 80014e2:	e008      	b.n	80014f6 <_ZN8Keyboard6Hadler13checkKeyboardEv+0x46>
					break;
				case BUTTON_LONG_RELEASED:
					this->buzzerQueue->send(buttons[i].getBuzzer(BUTTON_LONG_RELEASED));
 80014e4:	f8d5 6088 	ldr.w	r6, [r5, #136]	; 0x88
						return this->longReleeseBuzzer;
 80014e8:	f104 0320 	add.w	r3, r4, #32
						return this->shortPressBuzzer;
 80014ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014f0:	9000      	str	r0, [sp, #0]
 80014f2:	f8ad 1004 	strh.w	r1, [sp, #4]
		return osMessageQueueGet(xHandle, val, NULL, xTicksToWait);
	}

	osStatus_t send(const T & val, TickType_t xTicksToWait = 0U)
	{
		return osMessageQueuePut(xHandle, &val, NULL, xTicksToWait);
 80014f6:	2300      	movs	r3, #0
 80014f8:	4669      	mov	r1, sp
 80014fa:	461a      	mov	r2, r3
 80014fc:	6830      	ldr	r0, [r6, #0]
 80014fe:	f005 ff33 	bl	8007368 <osMessageQueuePut>
 8001502:	342c      	adds	r4, #44	; 0x2c
	for (int i = 0; i <BTN_COUNT ; ++i)
 8001504:	42a7      	cmp	r7, r4
 8001506:	d1d8      	bne.n	80014ba <_ZN8Keyboard6Hadler13checkKeyboardEv+0xa>
				default:
					break;
			}
	}

}
 8001508:	b003      	add	sp, #12
 800150a:	bdf0      	pop	{r4, r5, r6, r7, pc}
					this->buzzerQueue->send(buttons[i].getBuzzer(BUTTON_SHORT_PRESSED));
 800150c:	f8d5 6088 	ldr.w	r6, [r5, #136]	; 0x88
						return this->shortPressBuzzer;
 8001510:	f104 0314 	add.w	r3, r4, #20
 8001514:	e7ea      	b.n	80014ec <_ZN8Keyboard6Hadler13checkKeyboardEv+0x3c>
						return this->shortReleeseBuzzer;
 8001516:	4623      	mov	r3, r4
					this->buzzerQueue->send(buttons[i].getBuzzer(BUTTON_SHORT_RELEASED));
 8001518:	f8d5 6088 	ldr.w	r6, [r5, #136]	; 0x88
						return this->shortReleeseBuzzer;
 800151c:	f853 0f26 	ldr.w	r0, [r3, #38]!
 8001520:	e7db      	b.n	80014da <_ZN8Keyboard6Hadler13checkKeyboardEv+0x2a>
	...

08001524 <_Z17StartKeyboardTaskPv>:
			BuzzerSetVolume(0);
		}
	}
}
void StartKeyboardTask(void *argument)
{
 8001524:	b500      	push	{lr}
 8001526:	b0a5      	sub	sp, #148	; 0x94
	Keyboard::Hadler KeyboardHadler = Keyboard::Hadler(&keyboardQueueHandle,&buzzerQueueHandle);
 8001528:	4a05      	ldr	r2, [pc, #20]	; (8001540 <_Z17StartKeyboardTaskPv+0x1c>)
 800152a:	4906      	ldr	r1, [pc, #24]	; (8001544 <_Z17StartKeyboardTaskPv+0x20>)
 800152c:	a801      	add	r0, sp, #4
 800152e:	f7ff ff89 	bl	8001444 <_ZN8Keyboard6HadlerC1EP7osQueueINS_17buttonEventStructEEPS1_I12buzzerStructE>
	for(;;)
	{
		KeyboardHadler.checkKeyboard();
 8001532:	a801      	add	r0, sp, #4
 8001534:	f7ff ffbc 	bl	80014b0 <_ZN8Keyboard6Hadler13checkKeyboardEv>
		osDelay(BTN_CHECK_DELAY);
 8001538:	2005      	movs	r0, #5
 800153a:	f005 fe0b 	bl	8007154 <osDelay>
 800153e:	e7f8      	b.n	8001532 <_Z17StartKeyboardTaskPv+0xe>
 8001540:	20000280 	.word	0x20000280
 8001544:	2000042c 	.word	0x2000042c

08001548 <_Z14StartAccelTaskPv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartAccelTask */
void StartAccelTask(void *argument)
{
 8001548:	b508      	push	{r3, lr}
	for(;;)
	{
		osSemaphoreAcquire(accelStructBinarySemHandle, osWaitForever);
 800154a:	4d10      	ldr	r5, [pc, #64]	; (800158c <_Z14StartAccelTaskPv+0x44>)
		TM_MPU9250_ReadAcce(&accelStruct);
 800154c:	4c10      	ldr	r4, [pc, #64]	; (8001590 <_Z14StartAccelTaskPv+0x48>)
		osSemaphoreAcquire(accelStructBinarySemHandle, osWaitForever);
 800154e:	f04f 31ff 	mov.w	r1, #4294967295
 8001552:	6828      	ldr	r0, [r5, #0]
 8001554:	f005 fe60 	bl	8007218 <osSemaphoreAcquire>
		TM_MPU9250_ReadAcce(&accelStruct);
 8001558:	4620      	mov	r0, r4
 800155a:	f7ff fe6f 	bl	800123c <TM_MPU9250_ReadAcce>
		osDelay(1);
 800155e:	2001      	movs	r0, #1
 8001560:	f005 fdf8 	bl	8007154 <osDelay>
		TM_MPU9250_ReadGyro(&accelStruct);
 8001564:	4620      	mov	r0, r4
 8001566:	f7ff fea2 	bl	80012ae <TM_MPU9250_ReadGyro>
		osDelay(1);
 800156a:	2001      	movs	r0, #1
 800156c:	f005 fdf2 	bl	8007154 <osDelay>
		TM_MPU9250_ReadMag(&accelStruct);
 8001570:	4620      	mov	r0, r4
 8001572:	f7ff fed5 	bl	8001320 <TM_MPU9250_ReadMag>
		osDelay(1);
 8001576:	2001      	movs	r0, #1
 8001578:	f005 fdec 	bl	8007154 <osDelay>
		osSemaphoreRelease(accelStructBinarySemHandle);
 800157c:	6828      	ldr	r0, [r5, #0]
 800157e:	f005 fe89 	bl	8007294 <osSemaphoreRelease>
		osDelay(2);
 8001582:	2002      	movs	r0, #2
 8001584:	f005 fde6 	bl	8007154 <osDelay>
 8001588:	e7e1      	b.n	800154e <_Z14StartAccelTaskPv+0x6>
 800158a:	bf00      	nop
 800158c:	2000026c 	.word	0x2000026c
 8001590:	20000224 	.word	0x20000224

08001594 <_Z23StartgpsNMEA_ParserTaskPv>:
	}
}

void StartgpsNMEA_ParserTask(void *argument)
{
 8001594:	b510      	push	{r4, lr}
 8001596:	b0fe      	sub	sp, #504	; 0x1f8
	/* USER CODE BEGIN StartgpsNMEA_ParserTask */
	/* Infinite loop */
	osStatus_t status;

	NMEA_UART::GPS_MESSEGE_TYPE messageType;
	NMEA_UART::Parser gpsParser;
 8001598:	a801      	add	r0, sp, #4
 800159a:	f000 fbdb 	bl	8001d54 <_ZN9NMEA_UART6ParserC1Ev>
	for(;;)
	{
		using namespace NMEA_UART;
		uint8_t sym=0;
 800159e:	f04f 0400 	mov.w	r4, #0
		return osMessageQueueGet(xHandle, val, NULL, xTicksToWait);
 80015a2:	4809      	ldr	r0, [pc, #36]	; (80015c8 <_Z23StartgpsNMEA_ParserTaskPv+0x34>)
 80015a4:	f04f 33ff 	mov.w	r3, #4294967295
 80015a8:	2200      	movs	r2, #0
 80015aa:	f10d 0103 	add.w	r1, sp, #3
 80015ae:	6800      	ldr	r0, [r0, #0]
 80015b0:	f88d 4003 	strb.w	r4, [sp, #3]
 80015b4:	f005 ff1c 	bl	80073f0 <osMessageQueueGet>
		status =GPS_UARTQueueHandle.receive(&sym);  //osMessageQueueGet(GPS_UARTQueueHandle, &sym, NULL, osWaitForever);   // wait for message
		if (status == osOK) {
 80015b8:	2800      	cmp	r0, #0
 80015ba:	d1f2      	bne.n	80015a2 <_Z23StartgpsNMEA_ParserTaskPv+0xe>

			messageType  = gpsParser.charParser(sym);
 80015bc:	f89d 1003 	ldrb.w	r1, [sp, #3]
 80015c0:	a801      	add	r0, sp, #4
 80015c2:	f000 fca5 	bl	8001f10 <_ZN9NMEA_UART6Parser10charParserEh>
				break;
			}

		}

	}
 80015c6:	e7ec      	b.n	80015a2 <_Z23StartgpsNMEA_ParserTaskPv+0xe>
 80015c8:	20000214 	.word	0x20000214

080015cc <_Z16StartDysplayTaskPv>:
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08a      	sub	sp, #40	; 0x28
		osSemaphoreAcquire(accelStructBinarySemHandle,osWaitForever);
 80015d0:	4f59      	ldr	r7, [pc, #356]	; (8001738 <_Z16StartDysplayTaskPv+0x16c>)
 80015d2:	f04f 31ff 	mov.w	r1, #4294967295
 80015d6:	6838      	ldr	r0, [r7, #0]
 80015d8:	f005 fe1e 	bl	8007218 <osSemaphoreAcquire>
		ssd1306_Fill(Black);
 80015dc:	2000      	movs	r0, #0
 80015de:	f000 ff3d 	bl	800245c <_Z12ssd1306_Fill13SSD1306_COLOR>
		ssd1306_SetCursor(2,2);
 80015e2:	2102      	movs	r1, #2
		sprintf(str, "Mx %d", accelStruct.Mx_Raw*50);
 80015e4:	2632      	movs	r6, #50	; 0x32
		sprintf(str, "Ax %d", accelStruct.Ax_Raw);
 80015e6:	4d55      	ldr	r5, [pc, #340]	; (800173c <_Z16StartDysplayTaskPv+0x170>)
		ssd1306_WriteString(str,Font_7x10,White);
 80015e8:	4c55      	ldr	r4, [pc, #340]	; (8001740 <_Z16StartDysplayTaskPv+0x174>)
		ssd1306_SetCursor(2,2);
 80015ea:	4608      	mov	r0, r1
 80015ec:	f001 f854 	bl	8002698 <_Z17ssd1306_SetCursorhh>
		sprintf(str, "Ax %d", accelStruct.Ax_Raw);
 80015f0:	f9b5 2024 	ldrsh.w	r2, [r5, #36]	; 0x24
 80015f4:	4953      	ldr	r1, [pc, #332]	; (8001744 <_Z16StartDysplayTaskPv+0x178>)
 80015f6:	a802      	add	r0, sp, #8
 80015f8:	f008 fa4c 	bl	8009a94 <siprintf>
		ssd1306_WriteString(str,Font_7x10,White);
 80015fc:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001600:	2301      	movs	r3, #1
 8001602:	a802      	add	r0, sp, #8
 8001604:	f001 f832 	bl	800266c <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
		ssd1306_SetCursor(2,12);
 8001608:	210c      	movs	r1, #12
 800160a:	2002      	movs	r0, #2
 800160c:	f001 f844 	bl	8002698 <_Z17ssd1306_SetCursorhh>
		sprintf(str, "Ay %d", accelStruct.Ay_Raw);
 8001610:	f9b5 2026 	ldrsh.w	r2, [r5, #38]	; 0x26
 8001614:	494c      	ldr	r1, [pc, #304]	; (8001748 <_Z16StartDysplayTaskPv+0x17c>)
 8001616:	a802      	add	r0, sp, #8
 8001618:	f008 fa3c 	bl	8009a94 <siprintf>
		ssd1306_WriteString(str,Font_7x10,White);
 800161c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001620:	2301      	movs	r3, #1
 8001622:	a802      	add	r0, sp, #8
 8001624:	f001 f822 	bl	800266c <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
		ssd1306_SetCursor(2,22);
 8001628:	2116      	movs	r1, #22
 800162a:	2002      	movs	r0, #2
 800162c:	f001 f834 	bl	8002698 <_Z17ssd1306_SetCursorhh>
		sprintf(str, "Az %d", accelStruct.Az_Raw);
 8001630:	f9b5 2028 	ldrsh.w	r2, [r5, #40]	; 0x28
 8001634:	4945      	ldr	r1, [pc, #276]	; (800174c <_Z16StartDysplayTaskPv+0x180>)
 8001636:	a802      	add	r0, sp, #8
 8001638:	f008 fa2c 	bl	8009a94 <siprintf>
		ssd1306_WriteString(str,Font_7x10,White);
 800163c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001640:	2301      	movs	r3, #1
 8001642:	a802      	add	r0, sp, #8
 8001644:	f001 f812 	bl	800266c <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
		ssd1306_SetCursor(60,2);
 8001648:	2102      	movs	r1, #2
 800164a:	203c      	movs	r0, #60	; 0x3c
 800164c:	f001 f824 	bl	8002698 <_Z17ssd1306_SetCursorhh>
		sprintf(str, "Gx %d", accelStruct.Gx_Raw);
 8001650:	f9b5 202a 	ldrsh.w	r2, [r5, #42]	; 0x2a
 8001654:	493e      	ldr	r1, [pc, #248]	; (8001750 <_Z16StartDysplayTaskPv+0x184>)
 8001656:	a802      	add	r0, sp, #8
 8001658:	f008 fa1c 	bl	8009a94 <siprintf>
		ssd1306_WriteString(str,Font_7x10,White);
 800165c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001660:	2301      	movs	r3, #1
 8001662:	a802      	add	r0, sp, #8
 8001664:	f001 f802 	bl	800266c <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
		ssd1306_SetCursor(60,12);
 8001668:	210c      	movs	r1, #12
 800166a:	203c      	movs	r0, #60	; 0x3c
 800166c:	f001 f814 	bl	8002698 <_Z17ssd1306_SetCursorhh>
		sprintf(str, "Gy %d", accelStruct.Gy_Raw);
 8001670:	f9b5 202c 	ldrsh.w	r2, [r5, #44]	; 0x2c
 8001674:	4937      	ldr	r1, [pc, #220]	; (8001754 <_Z16StartDysplayTaskPv+0x188>)
 8001676:	a802      	add	r0, sp, #8
 8001678:	f008 fa0c 	bl	8009a94 <siprintf>
			ssd1306_WriteString(str,Font_7x10,White);
 800167c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001680:	2301      	movs	r3, #1
 8001682:	a802      	add	r0, sp, #8
 8001684:	f000 fff2 	bl	800266c <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
		ssd1306_SetCursor(60,22);
 8001688:	2116      	movs	r1, #22
 800168a:	203c      	movs	r0, #60	; 0x3c
 800168c:	f001 f804 	bl	8002698 <_Z17ssd1306_SetCursorhh>
		sprintf(str, "Gz %d", accelStruct.Gz_Raw);
 8001690:	f9b5 202e 	ldrsh.w	r2, [r5, #46]	; 0x2e
 8001694:	4930      	ldr	r1, [pc, #192]	; (8001758 <_Z16StartDysplayTaskPv+0x18c>)
 8001696:	a802      	add	r0, sp, #8
 8001698:	f008 f9fc 	bl	8009a94 <siprintf>
		ssd1306_WriteString(str,Font_7x10,White);
 800169c:	e894 0006 	ldmia.w	r4, {r1, r2}
 80016a0:	2301      	movs	r3, #1
 80016a2:	a802      	add	r0, sp, #8
 80016a4:	f000 ffe2 	bl	800266c <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
		ssd1306_SetCursor(2,33);
 80016a8:	2121      	movs	r1, #33	; 0x21
 80016aa:	2002      	movs	r0, #2
 80016ac:	f000 fff4 	bl	8002698 <_Z17ssd1306_SetCursorhh>
		sprintf(str, "Mx %d", accelStruct.Mx_Raw*50);
 80016b0:	f9b5 2030 	ldrsh.w	r2, [r5, #48]	; 0x30
 80016b4:	4929      	ldr	r1, [pc, #164]	; (800175c <_Z16StartDysplayTaskPv+0x190>)
 80016b6:	4372      	muls	r2, r6
 80016b8:	a802      	add	r0, sp, #8
 80016ba:	f008 f9eb 	bl	8009a94 <siprintf>
		ssd1306_WriteString(str,Font_7x10,White);
 80016be:	e894 0006 	ldmia.w	r4, {r1, r2}
 80016c2:	2301      	movs	r3, #1
 80016c4:	a802      	add	r0, sp, #8
 80016c6:	f000 ffd1 	bl	800266c <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
		ssd1306_SetCursor(2,43);
 80016ca:	212b      	movs	r1, #43	; 0x2b
 80016cc:	2002      	movs	r0, #2
 80016ce:	f000 ffe3 	bl	8002698 <_Z17ssd1306_SetCursorhh>
		sprintf(str, "My %d", accelStruct.My_Raw*50);
 80016d2:	f9b5 2032 	ldrsh.w	r2, [r5, #50]	; 0x32
 80016d6:	4922      	ldr	r1, [pc, #136]	; (8001760 <_Z16StartDysplayTaskPv+0x194>)
 80016d8:	4372      	muls	r2, r6
 80016da:	a802      	add	r0, sp, #8
 80016dc:	f008 f9da 	bl	8009a94 <siprintf>
		ssd1306_WriteString(str,Font_7x10,White);
 80016e0:	e894 0006 	ldmia.w	r4, {r1, r2}
 80016e4:	2301      	movs	r3, #1
 80016e6:	a802      	add	r0, sp, #8
 80016e8:	f000 ffc0 	bl	800266c <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
		ssd1306_SetCursor(2,53);
 80016ec:	2135      	movs	r1, #53	; 0x35
 80016ee:	2002      	movs	r0, #2
 80016f0:	f000 ffd2 	bl	8002698 <_Z17ssd1306_SetCursorhh>
		sprintf(str, "Mz %d", accelStruct.Mz_Raw*50);
 80016f4:	f9b5 2034 	ldrsh.w	r2, [r5, #52]	; 0x34
 80016f8:	491a      	ldr	r1, [pc, #104]	; (8001764 <_Z16StartDysplayTaskPv+0x198>)
 80016fa:	4372      	muls	r2, r6
 80016fc:	a802      	add	r0, sp, #8
 80016fe:	f008 f9c9 	bl	8009a94 <siprintf>
		ssd1306_WriteString(str,Font_7x10,White);
 8001702:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001706:	2301      	movs	r3, #1
 8001708:	a802      	add	r0, sp, #8
 800170a:	f000 ffaf 	bl	800266c <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
		osSemaphoreRelease(accelStructBinarySemHandle);
 800170e:	6838      	ldr	r0, [r7, #0]
 8001710:	f005 fdc0 	bl	8007294 <osSemaphoreRelease>
		tempString.fileName="accel.txt";
 8001714:	4b14      	ldr	r3, [pc, #80]	; (8001768 <_Z16StartDysplayTaskPv+0x19c>)
		return osMessageQueuePut(xHandle, &val, NULL, xTicksToWait);
 8001716:	4815      	ldr	r0, [pc, #84]	; (800176c <_Z16StartDysplayTaskPv+0x1a0>)
 8001718:	9300      	str	r3, [sp, #0]
		tempString.string = "Строка String";
 800171a:	4b15      	ldr	r3, [pc, #84]	; (8001770 <_Z16StartDysplayTaskPv+0x1a4>)
 800171c:	4669      	mov	r1, sp
 800171e:	9301      	str	r3, [sp, #4]
 8001720:	2300      	movs	r3, #0
 8001722:	6800      	ldr	r0, [r0, #0]
 8001724:	461a      	mov	r2, r3
 8001726:	f005 fe1f 	bl	8007368 <osMessageQueuePut>
		ssd1306_UpdateScreen();
 800172a:	f000 fea5 	bl	8002478 <_Z20ssd1306_UpdateScreenv>
		osDelay(100);
 800172e:	2064      	movs	r0, #100	; 0x64
 8001730:	f005 fd10 	bl	8007154 <osDelay>
 8001734:	e74c      	b.n	80015d0 <_Z16StartDysplayTaskPv+0x4>
 8001736:	bf00      	nop
 8001738:	2000026c 	.word	0x2000026c
 800173c:	20000224 	.word	0x20000224
 8001740:	20000000 	.word	0x20000000
 8001744:	0800b93c 	.word	0x0800b93c
 8001748:	0800b942 	.word	0x0800b942
 800174c:	0800b948 	.word	0x0800b948
 8001750:	0800b94e 	.word	0x0800b94e
 8001754:	0800b954 	.word	0x0800b954
 8001758:	0800b95a 	.word	0x0800b95a
 800175c:	0800b960 	.word	0x0800b960
 8001760:	0800b966 	.word	0x0800b966
 8001764:	0800b96c 	.word	0x0800b96c
 8001768:	0800b972 	.word	0x0800b972
 800176c:	20000478 	.word	0x20000478
 8001770:	0800b97c 	.word	0x0800b97c

08001774 <_Z15StartSDcardTaskPv>:
{
 8001774:	b510      	push	{r4, lr}
 8001776:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
	Flash::SDcard card;
 800177a:	a803      	add	r0, sp, #12
 800177c:	f7ff fbfe 	bl	8000f7c <_ZN5Flash6SDcardC1Ev>
	FRESULT init_result = card.initSD();
 8001780:	a803      	add	r0, sp, #12
 8001782:	f7ff fc1b 	bl	8000fbc <_ZN5Flash6SDcard6initSDEv>
		queueStatus = toSDcardStringQueueHandle.receive(&tempString);
 8001786:	4c0d      	ldr	r4, [pc, #52]	; (80017bc <_Z15StartSDcardTaskPv+0x48>)
		while(init_result!=FR_OK)
 8001788:	b138      	cbz	r0, 800179a <_Z15StartSDcardTaskPv+0x26>
			osDelay(1000);
 800178a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800178e:	f005 fce1 	bl	8007154 <osDelay>
			init_result = card.initSD();
 8001792:	a803      	add	r0, sp, #12
 8001794:	f7ff fc12 	bl	8000fbc <_ZN5Flash6SDcard6initSDEv>
		while(init_result!=FR_OK)
 8001798:	e7f6      	b.n	8001788 <_Z15StartSDcardTaskPv+0x14>
		return osMessageQueueGet(xHandle, val, NULL, xTicksToWait);
 800179a:	f04f 33ff 	mov.w	r3, #4294967295
 800179e:	2200      	movs	r2, #0
 80017a0:	a901      	add	r1, sp, #4
 80017a2:	6820      	ldr	r0, [r4, #0]
 80017a4:	f005 fe24 	bl	80073f0 <osMessageQueueGet>
		if(queueStatus == osOK){
 80017a8:	2800      	cmp	r0, #0
 80017aa:	d1f6      	bne.n	800179a <_Z15StartSDcardTaskPv+0x26>
		FRESULT writeRes = card.writeString(tempString.fileName, tempString.string);
 80017ac:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
 80017b0:	a803      	add	r0, sp, #12
 80017b2:	f7ff fbe9 	bl	8000f88 <_ZN5Flash6SDcard11writeStringEPKcS2_>
		if(writeRes!= FR_OK)
 80017b6:	2800      	cmp	r0, #0
 80017b8:	d1e6      	bne.n	8001788 <_Z15StartSDcardTaskPv+0x14>
 80017ba:	e7ee      	b.n	800179a <_Z15StartSDcardTaskPv+0x26>
 80017bc:	20000478 	.word	0x20000478

080017c0 <_Z15StartBuzzerTaskPv>:
{
 80017c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
		status = buzzerQueueHandle.receive(&buzzerParameters); // osMessageQueueGet(buzzerQueueHandle, &buzzerParameters, NULL, osWaitForever);   // wait for message
 80017c2:	4d0d      	ldr	r5, [pc, #52]	; (80017f8 <_Z15StartBuzzerTaskPv+0x38>)
 80017c4:	f04f 33ff 	mov.w	r3, #4294967295
 80017c8:	2200      	movs	r2, #0
 80017ca:	4669      	mov	r1, sp
 80017cc:	6828      	ldr	r0, [r5, #0]
 80017ce:	f005 fe0f 	bl	80073f0 <osMessageQueueGet>
		if (status == osOK) {
 80017d2:	4604      	mov	r4, r0
 80017d4:	2800      	cmp	r0, #0
 80017d6:	d1f5      	bne.n	80017c4 <_Z15StartBuzzerTaskPv+0x4>
			BuzzerSetFreq(buzzerParameters.freq);
 80017d8:	f8bd 0000 	ldrh.w	r0, [sp]
 80017dc:	f7ff fbb2 	bl	8000f44 <_Z13BuzzerSetFreqt>
			BuzzerSetVolume(buzzerParameters.volume);
 80017e0:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80017e4:	f7ff fbba 	bl	8000f5c <_Z15BuzzerSetVolumet>
			osDelay(buzzerParameters.duration);
 80017e8:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 80017ec:	f005 fcb2 	bl	8007154 <osDelay>
			BuzzerSetVolume(0);
 80017f0:	4620      	mov	r0, r4
 80017f2:	f7ff fbb3 	bl	8000f5c <_Z15BuzzerSetVolumet>
 80017f6:	e7e5      	b.n	80017c4 <_Z15StartBuzzerTaskPv+0x4>
 80017f8:	20000280 	.word	0x20000280

080017fc <_ZN6osTask5startEPFvPvE>:
{
		priority=osPriority;
}


	void start(osThreadFunc_t func)
 80017fc:	b530      	push	{r4, r5, lr}
 80017fe:	4604      	mov	r4, r0
 8001800:	460d      	mov	r5, r1
 8001802:	b08b      	sub	sp, #44	; 0x2c
	{
		const osThreadAttr_t Task_attributes = {
 8001804:	2220      	movs	r2, #32
 8001806:	2100      	movs	r1, #0
 8001808:	a802      	add	r0, sp, #8
 800180a:	f007 fc34 	bl	8009076 <memset>
				stack_mem :NULL,// &TaskBuffer[0],
				stack_size: stack_size*4,
				priority : (osPriority_t) priority,
				tz_module : NULL,
				reserved:NULL
		};
 800180e:	68a3      	ldr	r3, [r4, #8]

		TaskHandle = osThreadNew(func, NULL, &Task_attributes);
 8001810:	aa01      	add	r2, sp, #4
		};
 8001812:	9301      	str	r3, [sp, #4]
				stack_size: stack_size*4,
 8001814:	89a3      	ldrh	r3, [r4, #12]
		TaskHandle = osThreadNew(func, NULL, &Task_attributes);
 8001816:	2100      	movs	r1, #0
				stack_size: stack_size*4,
 8001818:	009b      	lsls	r3, r3, #2
		};
 800181a:	9306      	str	r3, [sp, #24]
 800181c:	6863      	ldr	r3, [r4, #4]
		TaskHandle = osThreadNew(func, NULL, &Task_attributes);
 800181e:	4628      	mov	r0, r5
		};
 8001820:	9307      	str	r3, [sp, #28]
		TaskHandle = osThreadNew(func, NULL, &Task_attributes);
 8001822:	f005 fc51 	bl	80070c8 <osThreadNew>
 8001826:	6020      	str	r0, [r4, #0]
	}
 8001828:	b00b      	add	sp, #44	; 0x2c
 800182a:	bd30      	pop	{r4, r5, pc}

0800182c <Error_Handler>:
}

void Error_Handler(void)
{
	HAL_UART_Transmit(&huart3, (uint8_t *) "ERROR ERROR!!!", 14, 10);
 800182c:	230a      	movs	r3, #10
 800182e:	220e      	movs	r2, #14
 8001830:	4901      	ldr	r1, [pc, #4]	; (8001838 <Error_Handler+0xc>)
 8001832:	4802      	ldr	r0, [pc, #8]	; (800183c <Error_Handler+0x10>)
 8001834:	f002 bf42 	b.w	80046bc <HAL_UART_Transmit>
 8001838:	0800b8a8 	.word	0x0800b8a8
 800183c:	200003ec 	.word	0x200003ec

08001840 <_Z18SystemClock_Configv>:
}
void SystemClock_Config(void)
{
 8001840:	b510      	push	{r4, lr}
 8001842:	b094      	sub	sp, #80	; 0x50
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001844:	2214      	movs	r2, #20
 8001846:	2100      	movs	r1, #0
 8001848:	a80c      	add	r0, sp, #48	; 0x30
 800184a:	f007 fc14 	bl	8009076 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800184e:	2214      	movs	r2, #20
 8001850:	2100      	movs	r1, #0
 8001852:	eb0d 0002 	add.w	r0, sp, r2
 8001856:	f007 fc0e 	bl	8009076 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800185a:	2210      	movs	r2, #16
 800185c:	2100      	movs	r1, #0
 800185e:	a801      	add	r0, sp, #4
 8001860:	f007 fc09 	bl	8009076 <memset>
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001864:	2402      	movs	r4, #2
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001866:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800186a:	2201      	movs	r2, #1
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800186c:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001870:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001874:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001878:	a80a      	add	r0, sp, #40	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800187a:	920e      	str	r2, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800187c:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800187e:	f002 f863 	bl	8003948 <HAL_RCC_OscConfig>
 8001882:	b108      	cbz	r0, 8001888 <_Z18SystemClock_Configv+0x48>
	{
		Error_Handler();
 8001884:	f7ff ffd2 	bl	800182c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001888:	230f      	movs	r3, #15
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800188a:	e9cd 3405 	strd	r3, r4, [sp, #20]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800188e:	2400      	movs	r4, #0
 8001890:	f44f 6380 	mov.w	r3, #1024	; 0x400
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001894:	2102      	movs	r1, #2
 8001896:	a805      	add	r0, sp, #20
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001898:	e9cd 4307 	strd	r4, r3, [sp, #28]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800189c:	9409      	str	r4, [sp, #36]	; 0x24
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800189e:	f002 fa2b 	bl	8003cf8 <HAL_RCC_ClockConfig>
 80018a2:	b108      	cbz	r0, 80018a8 <_Z18SystemClock_Configv+0x68>
	{
		Error_Handler();
 80018a4:	f7ff ffc2 	bl	800182c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80018a8:	2310      	movs	r3, #16
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018aa:	a801      	add	r0, sp, #4
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80018ac:	9301      	str	r3, [sp, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80018ae:	9404      	str	r4, [sp, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018b0:	f002 fade 	bl	8003e70 <HAL_RCCEx_PeriphCLKConfig>
 80018b4:	b108      	cbz	r0, 80018ba <_Z18SystemClock_Configv+0x7a>
	{
		Error_Handler();
 80018b6:	f7ff ffb9 	bl	800182c <Error_Handler>
	}
}
 80018ba:	b014      	add	sp, #80	; 0x50
 80018bc:	bd10      	pop	{r4, pc}
	...

080018c0 <main>:
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08e      	sub	sp, #56	; 0x38
	HAL_Init();
 80018c4:	f001 f8f8 	bl	8002ab8 <HAL_Init>
	SystemClock_Config();
 80018c8:	f7ff ffba 	bl	8001840 <_Z18SystemClock_Configv>
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	2210      	movs	r2, #16
 80018ce:	2100      	movs	r1, #0
 80018d0:	a807      	add	r0, sp, #28
 80018d2:	f007 fbd0 	bl	8009076 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80018d6:	4bb9      	ldr	r3, [pc, #740]	; (8001bbc <main+0x2fc>)

	/*Configure GPIO pin : SD_SPI_CS_Pin */
	GPIO_InitStruct.Pin = SD_SPI_CS_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018d8:	2400      	movs	r4, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80018da:	699a      	ldr	r2, [r3, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018dc:	2501      	movs	r5, #1
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80018de:	f042 0210 	orr.w	r2, r2, #16
 80018e2:	619a      	str	r2, [r3, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e4:	2740      	movs	r7, #64	; 0x40
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018e6:	2603      	movs	r6, #3
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80018e8:	699a      	ldr	r2, [r3, #24]

	/*Configure GPIO pin : GPS_EN_Pin */
	GPIO_InitStruct.Pin = GPS_EN_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ea:	f04f 0802 	mov.w	r8, #2
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80018ee:	f002 0210 	and.w	r2, r2, #16
 80018f2:	9201      	str	r2, [sp, #4]
 80018f4:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80018f6:	699a      	ldr	r2, [r3, #24]
	HAL_GPIO_WritePin(SD_SPI_CS_GPIO_Port, SD_SPI_CS_Pin, GPIO_PIN_SET);
 80018f8:	2140      	movs	r1, #64	; 0x40
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80018fa:	f042 0220 	orr.w	r2, r2, #32
 80018fe:	619a      	str	r2, [r3, #24]
 8001900:	699a      	ldr	r2, [r3, #24]
	HAL_GPIO_WritePin(SD_SPI_CS_GPIO_Port, SD_SPI_CS_Pin, GPIO_PIN_SET);
 8001902:	48af      	ldr	r0, [pc, #700]	; (8001bc0 <main+0x300>)
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001904:	f002 0220 	and.w	r2, r2, #32
 8001908:	9202      	str	r2, [sp, #8]
 800190a:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800190c:	699a      	ldr	r2, [r3, #24]
 800190e:	f042 0204 	orr.w	r2, r2, #4
 8001912:	619a      	str	r2, [r3, #24]
 8001914:	699a      	ldr	r2, [r3, #24]
 8001916:	f002 0204 	and.w	r2, r2, #4
 800191a:	9203      	str	r2, [sp, #12]
 800191c:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800191e:	699a      	ldr	r2, [r3, #24]
 8001920:	f042 0208 	orr.w	r2, r2, #8
 8001924:	619a      	str	r2, [r3, #24]
 8001926:	699b      	ldr	r3, [r3, #24]
	HAL_GPIO_WritePin(SD_SPI_CS_GPIO_Port, SD_SPI_CS_Pin, GPIO_PIN_SET);
 8001928:	2201      	movs	r2, #1
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800192a:	f003 0308 	and.w	r3, r3, #8
 800192e:	9304      	str	r3, [sp, #16]
 8001930:	9b04      	ldr	r3, [sp, #16]
	HAL_GPIO_WritePin(SD_SPI_CS_GPIO_Port, SD_SPI_CS_Pin, GPIO_PIN_SET);
 8001932:	f001 fa8f 	bl	8002e54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPS_EN_GPIO_Port, GPS_EN_Pin, GPIO_PIN_RESET);
 8001936:	2200      	movs	r2, #0
 8001938:	2101      	movs	r1, #1
 800193a:	48a2      	ldr	r0, [pc, #648]	; (8001bc4 <main+0x304>)
 800193c:	f001 fa8a 	bl	8002e54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_LE_GPIO_Port, LED_LE_Pin, GPIO_PIN_SET);
 8001940:	2201      	movs	r2, #1
 8001942:	2140      	movs	r1, #64	; 0x40
 8001944:	489f      	ldr	r0, [pc, #636]	; (8001bc4 <main+0x304>)
 8001946:	f001 fa85 	bl	8002e54 <HAL_GPIO_WritePin>
	HAL_GPIO_Init(SD_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800194a:	a907      	add	r1, sp, #28
 800194c:	489c      	ldr	r0, [pc, #624]	; (8001bc0 <main+0x300>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194e:	e9cd 7507 	strd	r7, r5, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001952:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
	HAL_GPIO_Init(SD_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001956:	f001 f997 	bl	8002c88 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPS_EN_GPIO_Port, &GPIO_InitStruct);
 800195a:	a907      	add	r1, sp, #28
 800195c:	4899      	ldr	r0, [pc, #612]	; (8001bc4 <main+0x304>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195e:	e9cd 5507 	strd	r5, r5, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	9409      	str	r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001964:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
	HAL_GPIO_Init(GPS_EN_GPIO_Port, &GPIO_InitStruct);
 8001968:	f001 f98e 	bl	8002c88 <HAL_GPIO_Init>

	/*Configure GPIO pin : GPS_PPS_Pin */
	GPIO_InitStruct.Pin = GPS_PPS_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPS_PPS_GPIO_Port, &GPIO_InitStruct);
 800196c:	a907      	add	r1, sp, #28
 800196e:	4895      	ldr	r0, [pc, #596]	; (8001bc4 <main+0x304>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001970:	e9cd 8407 	strd	r8, r4, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	9409      	str	r4, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPS_PPS_GPIO_Port, &GPIO_InitStruct);
 8001976:	f001 f987 	bl	8002c88 <HAL_GPIO_Init>

	/*Configure GPIO pin : MPU_INT_Pin */
	GPIO_InitStruct.Pin = MPU_INT_Pin;
 800197a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(MPU_INT_GPIO_Port, &GPIO_InitStruct);
 800197e:	a907      	add	r1, sp, #28
 8001980:	488f      	ldr	r0, [pc, #572]	; (8001bc0 <main+0x300>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001982:	e9cd 3407 	strd	r3, r4, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	9409      	str	r4, [sp, #36]	; 0x24
	HAL_GPIO_Init(MPU_INT_GPIO_Port, &GPIO_InitStruct);
 8001988:	f001 f97e 	bl	8002c88 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN_3_Pin BTN_2_Pin BTN_1_Pin */
	GPIO_InitStruct.Pin = BTN_3_Pin|BTN_2_Pin|BTN_1_Pin;
 800198c:	2338      	movs	r3, #56	; 0x38
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800198e:	a907      	add	r1, sp, #28
 8001990:	488c      	ldr	r0, [pc, #560]	; (8001bc4 <main+0x304>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001992:	e9cd 3407 	strd	r3, r4, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001996:	9509      	str	r5, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001998:	f001 f976 	bl	8002c88 <HAL_GPIO_Init>
	/*Configure GPIO pin : LED_LE_Pin */
	GPIO_InitStruct.Pin = LED_LE_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(LED_LE_GPIO_Port, &GPIO_InitStruct);
 800199c:	4889      	ldr	r0, [pc, #548]	; (8001bc4 <main+0x304>)
 800199e:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a0:	e9cd 7507 	strd	r7, r5, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019a4:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
	HAL_GPIO_Init(LED_LE_GPIO_Port, &GPIO_InitStruct);
 80019a8:	f001 f96e 	bl	8002c88 <HAL_GPIO_Init>
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80019ac:	f44f 7382 	mov.w	r3, #260	; 0x104
	hspi2.Instance = SPI2;
 80019b0:	4885      	ldr	r0, [pc, #532]	; (8001bc8 <main+0x308>)
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80019b2:	4f86      	ldr	r7, [pc, #536]	; (8001bcc <main+0x30c>)
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80019b4:	e9c0 4402 	strd	r4, r4, [r0, #8]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80019b8:	e9c0 7300 	strd	r7, r3, [r0]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80019bc:	f44f 7300 	mov.w	r3, #512	; 0x200
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019c0:	e9c0 3406 	strd	r3, r4, [r0, #24]
	hspi2.Init.CRCPolynomial = 10;
 80019c4:	230a      	movs	r3, #10
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019c6:	e9c0 4404 	strd	r4, r4, [r0, #16]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80019ca:	e9c0 4408 	strd	r4, r4, [r0, #32]
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019ce:	6284      	str	r4, [r0, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 80019d0:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80019d2:	f002 fb0e 	bl	8003ff2 <HAL_SPI_Init>
 80019d6:	b108      	cbz	r0, 80019dc <main+0x11c>
		Error_Handler();
 80019d8:	f7ff ff28 	bl	800182c <Error_Handler>
	huart1.Init.BaudRate = 115200;
 80019dc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
	huart1.Instance = USART1;
 80019e0:	487b      	ldr	r0, [pc, #492]	; (8001bd0 <main+0x310>)
	huart1.Init.BaudRate = 115200;
 80019e2:	4e7c      	ldr	r6, [pc, #496]	; (8001bd4 <main+0x314>)
	huart1.Init.Mode = UART_MODE_TX_RX;
 80019e4:	220c      	movs	r2, #12
	huart1.Init.BaudRate = 115200;
 80019e6:	e9c0 6300 	strd	r6, r3, [r0]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019ea:	2300      	movs	r3, #0
	huart1.Init.StopBits = UART_STOPBITS_1;
 80019ec:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart1.Init.Parity = UART_PARITY_NONE;
 80019f0:	6103      	str	r3, [r0, #16]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019f2:	e9c0 2305 	strd	r2, r3, [r0, #20]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019f6:	61c3      	str	r3, [r0, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80019f8:	f002 fe32 	bl	8004660 <HAL_UART_Init>
 80019fc:	b108      	cbz	r0, 8001a02 <main+0x142>
		Error_Handler();
 80019fe:	f7ff ff15 	bl	800182c <Error_Handler>
	HAL_UART_Receive_IT (&huart1, receiveBuffer, (uint8_t) 1);
 8001a02:	2201      	movs	r2, #1
 8001a04:	4974      	ldr	r1, [pc, #464]	; (8001bd8 <main+0x318>)
 8001a06:	4872      	ldr	r0, [pc, #456]	; (8001bd0 <main+0x310>)
 8001a08:	f002 feb1 	bl	800476e <HAL_UART_Receive_IT>
	huart3.Init.BaudRate = 115200;
 8001a0c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
	huart3.Instance = USART3;
 8001a10:	4872      	ldr	r0, [pc, #456]	; (8001bdc <main+0x31c>)
	huart3.Init.BaudRate = 115200;
 8001a12:	4d73      	ldr	r5, [pc, #460]	; (8001be0 <main+0x320>)
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001a14:	220c      	movs	r2, #12
	huart3.Init.BaudRate = 115200;
 8001a16:	e9c0 5300 	strd	r5, r3, [r0]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a1a:	2300      	movs	r3, #0
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001a1c:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001a20:	6103      	str	r3, [r0, #16]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a22:	e9c0 2305 	strd	r2, r3, [r0, #20]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a26:	61c3      	str	r3, [r0, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a28:	f002 fe1a 	bl	8004660 <HAL_UART_Init>
 8001a2c:	b108      	cbz	r0, 8001a32 <main+0x172>
		Error_Handler();
 8001a2e:	f7ff fefd 	bl	800182c <Error_Handler>
	hi2c1.Instance = I2C1;
 8001a32:	486c      	ldr	r0, [pc, #432]	; (8001be4 <main+0x324>)
	hi2c1.Init.ClockSpeed = 400000;
 8001a34:	4c6c      	ldr	r4, [pc, #432]	; (8001be8 <main+0x328>)
 8001a36:	4b6d      	ldr	r3, [pc, #436]	; (8001bec <main+0x32c>)
 8001a38:	e9c0 4300 	strd	r4, r3, [r0]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a3c:	2400      	movs	r4, #0
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	hi2c1.Init.OwnAddress1 = 0;
 8001a42:	e9c0 4402 	strd	r4, r4, [r0, #8]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a46:	e9c0 3404 	strd	r3, r4, [r0, #16]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a4a:	e9c0 4406 	strd	r4, r4, [r0, #24]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a4e:	6204      	str	r4, [r0, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a50:	f001 fb52 	bl	80030f8 <HAL_I2C_Init>
 8001a54:	b108      	cbz	r0, 8001a5a <main+0x19a>
		Error_Handler();
 8001a56:	f7ff fee9 	bl	800182c <Error_Handler>
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001a5a:	221c      	movs	r2, #28
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	eb0d 0002 	add.w	r0, sp, r2
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a62:	e9cd 4405 	strd	r4, r4, [sp, #20]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001a66:	f007 fb06 	bl	8009076 <memset>
	htim2.Init.Prescaler = 479;
 8001a6a:	f240 13df 	movw	r3, #479	; 0x1df
 8001a6e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	htim2.Instance = TIM2;
 8001a72:	485f      	ldr	r0, [pc, #380]	; (8001bf0 <main+0x330>)
	htim2.Init.Prescaler = 479;
 8001a74:	e9c0 1300 	strd	r1, r3, [r0]
	htim2.Init.Period = 254;
 8001a78:	23fe      	movs	r3, #254	; 0xfe
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a7a:	6084      	str	r4, [r0, #8]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a7c:	e9c0 3403 	strd	r3, r4, [r0, #12]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a80:	6184      	str	r4, [r0, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a82:	f002 fc8d 	bl	80043a0 <HAL_TIM_PWM_Init>
 8001a86:	b108      	cbz	r0, 8001a8c <main+0x1cc>
		Error_Handler();
 8001a88:	f7ff fed0 	bl	800182c <Error_Handler>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a8c:	2300      	movs	r3, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a8e:	a905      	add	r1, sp, #20
 8001a90:	4857      	ldr	r0, [pc, #348]	; (8001bf0 <main+0x330>)
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a92:	e9cd 3305 	strd	r3, r3, [sp, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a96:	f002 fd55 	bl	8004544 <HAL_TIMEx_MasterConfigSynchronization>
 8001a9a:	b108      	cbz	r0, 8001aa0 <main+0x1e0>
		Error_Handler();
 8001a9c:	f7ff fec6 	bl	800182c <Error_Handler>
	sConfigOC.Pulse = 124;
 8001aa0:	2260      	movs	r2, #96	; 0x60
 8001aa2:	237c      	movs	r3, #124	; 0x7c
 8001aa4:	e9cd 2307 	strd	r2, r3, [sp, #28]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aa8:	2200      	movs	r2, #0
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aaa:	a907      	add	r1, sp, #28
 8001aac:	4850      	ldr	r0, [pc, #320]	; (8001bf0 <main+0x330>)
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aae:	9209      	str	r2, [sp, #36]	; 0x24
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ab0:	920b      	str	r2, [sp, #44]	; 0x2c
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ab2:	f002 fcbb 	bl	800442c <HAL_TIM_PWM_ConfigChannel>
 8001ab6:	b108      	cbz	r0, 8001abc <main+0x1fc>
		Error_Handler();
 8001ab8:	f7ff feb8 	bl	800182c <Error_Handler>
	HAL_TIM_MspPostInit(&htim2);
 8001abc:	484c      	ldr	r0, [pc, #304]	; (8001bf0 <main+0x330>)
 8001abe:	f000 fea3 	bl	8002808 <HAL_TIM_MspPostInit>
	BuzzerSetVolume(0);
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	f7ff fa4a 	bl	8000f5c <_Z15BuzzerSetVolumet>
	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4849      	ldr	r0, [pc, #292]	; (8001bf0 <main+0x330>)
 8001acc:	f002 fd1e 	bl	800450c <HAL_TIM_OC_Start>
	HAL_Delay(50);
 8001ad0:	2032      	movs	r0, #50	; 0x32
 8001ad2:	f001 f815 	bl	8002b00 <HAL_Delay>
	ssd1306_Init();
 8001ad6:	f000 fcf5 	bl	80024c4 <_Z12ssd1306_Initv>
	HAL_Delay(50);
 8001ada:	2032      	movs	r0, #50	; 0x32
 8001adc:	f001 f810 	bl	8002b00 <HAL_Delay>
	ssd1306_Fill(Black);
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	f000 fcbb 	bl	800245c <_Z12ssd1306_Fill13SSD1306_COLOR>
	HAL_Delay(50);
 8001ae6:	2032      	movs	r0, #50	; 0x32
 8001ae8:	f001 f80a 	bl	8002b00 <HAL_Delay>
	ssd1306_UpdateScreen();
 8001aec:	f000 fcc4 	bl	8002478 <_Z20ssd1306_UpdateScreenv>
	HAL_Delay(50);
 8001af0:	2032      	movs	r0, #50	; 0x32
 8001af2:	f001 f805 	bl	8002b00 <HAL_Delay>
	MPU9250_Init(&hi2c1,&accelStruct,TM_MPU9250_Device_0);
 8001af6:	2200      	movs	r2, #0
 8001af8:	493e      	ldr	r1, [pc, #248]	; (8001bf4 <main+0x334>)
 8001afa:	483a      	ldr	r0, [pc, #232]	; (8001be4 <main+0x324>)
 8001afc:	f7ff fae4 	bl	80010c8 <MPU9250_Init>
	USART1->CR1 |= USART_CR1_RXNEIE; /*//прерывание по приему данных*/
 8001b00:	4a34      	ldr	r2, [pc, #208]	; (8001bd4 <main+0x314>)
	HAL_UART_Receive_IT (&huart1, receiveBuffer, (uint8_t) 1);
 8001b02:	4935      	ldr	r1, [pc, #212]	; (8001bd8 <main+0x318>)
	USART1->CR1 |= USART_CR1_RXNEIE; /*//прерывание по приему данных*/
 8001b04:	68d3      	ldr	r3, [r2, #12]
	HAL_UART_Receive_IT (&huart1, receiveBuffer, (uint8_t) 1);
 8001b06:	4832      	ldr	r0, [pc, #200]	; (8001bd0 <main+0x310>)
	USART1->CR1 |= USART_CR1_RXNEIE; /*//прерывание по приему данных*/
 8001b08:	f043 0320 	orr.w	r3, r3, #32
 8001b0c:	60d3      	str	r3, [r2, #12]
	HAL_UART_Receive_IT (&huart1, receiveBuffer, (uint8_t) 1);
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f002 fe2d 	bl	800476e <HAL_UART_Receive_IT>
	osKernelInitialize();
 8001b14:	f005 fa86 	bl	8007024 <osKernelInitialize>
	I2C_BinarySemHandle = osSemaphoreNew(1, 1, &I2C_BinarySem_attributes);
 8001b18:	2101      	movs	r1, #1
 8001b1a:	4a37      	ldr	r2, [pc, #220]	; (8001bf8 <main+0x338>)
 8001b1c:	4608      	mov	r0, r1
 8001b1e:	f005 fb35 	bl	800718c <osSemaphoreNew>
	accelStructBinarySemHandle = osSemaphoreNew(1,1, &accelStructBinarySem_attributes);
 8001b22:	2101      	movs	r1, #1
	I2C_BinarySemHandle = osSemaphoreNew(1, 1, &I2C_BinarySem_attributes);
 8001b24:	4b35      	ldr	r3, [pc, #212]	; (8001bfc <main+0x33c>)
	accelStructBinarySemHandle = osSemaphoreNew(1,1, &accelStructBinarySem_attributes);
 8001b26:	4a36      	ldr	r2, [pc, #216]	; (8001c00 <main+0x340>)
	I2C_BinarySemHandle = osSemaphoreNew(1, 1, &I2C_BinarySem_attributes);
 8001b28:	6018      	str	r0, [r3, #0]
	accelStructBinarySemHandle = osSemaphoreNew(1,1, &accelStructBinarySem_attributes);
 8001b2a:	4608      	mov	r0, r1
 8001b2c:	f005 fb2e 	bl	800718c <osSemaphoreNew>
	debugUARTBinarySemHandle = osSemaphoreNew(1,1, &debugUARTBinarySem_attributes);
 8001b30:	2101      	movs	r1, #1
	accelStructBinarySemHandle = osSemaphoreNew(1,1, &accelStructBinarySem_attributes);
 8001b32:	4b34      	ldr	r3, [pc, #208]	; (8001c04 <main+0x344>)
	debugUARTBinarySemHandle = osSemaphoreNew(1,1, &debugUARTBinarySem_attributes);
 8001b34:	4a34      	ldr	r2, [pc, #208]	; (8001c08 <main+0x348>)
	accelStructBinarySemHandle = osSemaphoreNew(1,1, &accelStructBinarySem_attributes);
 8001b36:	6018      	str	r0, [r3, #0]
	debugUARTBinarySemHandle = osSemaphoreNew(1,1, &debugUARTBinarySem_attributes);
 8001b38:	4608      	mov	r0, r1
 8001b3a:	f005 fb27 	bl	800718c <osSemaphoreNew>
 8001b3e:	4b33      	ldr	r3, [pc, #204]	; (8001c0c <main+0x34c>)
				name : NameQ,
 8001b40:	4c33      	ldr	r4, [pc, #204]	; (8001c10 <main+0x350>)
 8001b42:	6018      	str	r0, [r3, #0]
		const osMessageQueueAttr_t attributes = {
 8001b44:	2214      	movs	r2, #20
 8001b46:	2100      	movs	r1, #0
 8001b48:	a808      	add	r0, sp, #32
 8001b4a:	f007 fa94 	bl	8009076 <memset>
 8001b4e:	68a3      	ldr	r3, [r4, #8]
		xHandle=osMessageQueueNew (queueSize, sizeof(T), &attributes);
 8001b50:	aa07      	add	r2, sp, #28
 8001b52:	2106      	movs	r1, #6
 8001b54:	88a0      	ldrh	r0, [r4, #4]
		const osMessageQueueAttr_t attributes = {
 8001b56:	9307      	str	r3, [sp, #28]
		xHandle=osMessageQueueNew (queueSize, sizeof(T), &attributes);
 8001b58:	f005 fbd6 	bl	8007308 <osMessageQueueNew>
 8001b5c:	6020      	str	r0, [r4, #0]
				name : NameQ,
 8001b5e:	4c2d      	ldr	r4, [pc, #180]	; (8001c14 <main+0x354>)
		const osMessageQueueAttr_t attributes = {
 8001b60:	2214      	movs	r2, #20
 8001b62:	2100      	movs	r1, #0
 8001b64:	a808      	add	r0, sp, #32
 8001b66:	f007 fa86 	bl	8009076 <memset>
 8001b6a:	68a3      	ldr	r3, [r4, #8]
		xHandle=osMessageQueueNew (queueSize, sizeof(T), &attributes);
 8001b6c:	aa07      	add	r2, sp, #28
 8001b6e:	2102      	movs	r1, #2
 8001b70:	88a0      	ldrh	r0, [r4, #4]
		const osMessageQueueAttr_t attributes = {
 8001b72:	9307      	str	r3, [sp, #28]
		xHandle=osMessageQueueNew (queueSize, sizeof(T), &attributes);
 8001b74:	f005 fbc8 	bl	8007308 <osMessageQueueNew>
 8001b78:	6020      	str	r0, [r4, #0]
				name : NameQ,
 8001b7a:	4c27      	ldr	r4, [pc, #156]	; (8001c18 <main+0x358>)
		const osMessageQueueAttr_t attributes = {
 8001b7c:	2214      	movs	r2, #20
 8001b7e:	2100      	movs	r1, #0
 8001b80:	a808      	add	r0, sp, #32
 8001b82:	f007 fa78 	bl	8009076 <memset>
 8001b86:	68a3      	ldr	r3, [r4, #8]
		xHandle=osMessageQueueNew (queueSize, sizeof(T), &attributes);
 8001b88:	aa07      	add	r2, sp, #28
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	88a0      	ldrh	r0, [r4, #4]
		const osMessageQueueAttr_t attributes = {
 8001b8e:	9307      	str	r3, [sp, #28]
		xHandle=osMessageQueueNew (queueSize, sizeof(T), &attributes);
 8001b90:	f005 fbba 	bl	8007308 <osMessageQueueNew>
 8001b94:	6020      	str	r0, [r4, #0]
				name : NameQ,
 8001b96:	4c21      	ldr	r4, [pc, #132]	; (8001c1c <main+0x35c>)
		const osMessageQueueAttr_t attributes = {
 8001b98:	2214      	movs	r2, #20
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	a808      	add	r0, sp, #32
 8001b9e:	f007 fa6a 	bl	8009076 <memset>
 8001ba2:	68a3      	ldr	r3, [r4, #8]
		xHandle=osMessageQueueNew (queueSize, sizeof(T), &attributes);
 8001ba4:	aa07      	add	r2, sp, #28
 8001ba6:	2108      	movs	r1, #8
 8001ba8:	88a0      	ldrh	r0, [r4, #4]
		const osMessageQueueAttr_t attributes = {
 8001baa:	9307      	str	r3, [sp, #28]
		xHandle=osMessageQueueNew (queueSize, sizeof(T), &attributes);
 8001bac:	f005 fbac 	bl	8007308 <osMessageQueueNew>
	buzzerTask.start(StartBuzzerTask);				//Handle = osThreadNew(StartBuzzerTask, NULL, &buzzerTask_attributes);
 8001bb0:	491b      	ldr	r1, [pc, #108]	; (8001c20 <main+0x360>)
 8001bb2:	6020      	str	r0, [r4, #0]
 8001bb4:	481b      	ldr	r0, [pc, #108]	; (8001c24 <main+0x364>)
 8001bb6:	f7ff fe21 	bl	80017fc <_ZN6osTask5startEPFvPvE>
 8001bba:	e035      	b.n	8001c28 <main+0x368>
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	40010800 	.word	0x40010800
 8001bc4:	40010c00 	.word	0x40010c00
 8001bc8:	20000314 	.word	0x20000314
 8001bcc:	40003800 	.word	0x40003800
 8001bd0:	200003ac 	.word	0x200003ac
 8001bd4:	40013800 	.word	0x40013800
 8001bd8:	20000448 	.word	0x20000448
 8001bdc:	200003ec 	.word	0x200003ec
 8001be0:	40004800 	.word	0x40004800
 8001be4:	200002c0 	.word	0x200002c0
 8001be8:	40005400 	.word	0x40005400
 8001bec:	00061a80 	.word	0x00061a80
 8001bf0:	2000036c 	.word	0x2000036c
 8001bf4:	20000224 	.word	0x20000224
 8001bf8:	0800b990 	.word	0x0800b990
 8001bfc:	20000220 	.word	0x20000220
 8001c00:	0800b9b0 	.word	0x0800b9b0
 8001c04:	2000026c 	.word	0x2000026c
 8001c08:	0800b9a0 	.word	0x0800b9a0
 8001c0c:	2000029c 	.word	0x2000029c
 8001c10:	20000280 	.word	0x20000280
 8001c14:	2000042c 	.word	0x2000042c
 8001c18:	20000214 	.word	0x20000214
 8001c1c:	20000478 	.word	0x20000478
 8001c20:	080017c1 	.word	0x080017c1
 8001c24:	2000028c 	.word	0x2000028c
	keyboardTask.start(StartKeyboardTask);			//Handle = osThreadNew(StartKeyboardTask, NULL, &keyboardTask_attributes);
 8001c28:	490b      	ldr	r1, [pc, #44]	; (8001c58 <main+0x398>)
 8001c2a:	480c      	ldr	r0, [pc, #48]	; (8001c5c <main+0x39c>)
 8001c2c:	f7ff fde6 	bl	80017fc <_ZN6osTask5startEPFvPvE>
	dysplayTask.start(StartDysplayTask);			//Handle = osThreadNew(StartDysplayTask, NULL, &dysplayTask_attributes);
 8001c30:	490b      	ldr	r1, [pc, #44]	; (8001c60 <main+0x3a0>)
 8001c32:	480c      	ldr	r0, [pc, #48]	; (8001c64 <main+0x3a4>)
 8001c34:	f7ff fde2 	bl	80017fc <_ZN6osTask5startEPFvPvE>
	accelTask.start(StartAccelTask);				//Handle = osThreadNew(StartAccelTask, NULL, &accelTask_attributes);
 8001c38:	490b      	ldr	r1, [pc, #44]	; (8001c68 <main+0x3a8>)
 8001c3a:	480c      	ldr	r0, [pc, #48]	; (8001c6c <main+0x3ac>)
 8001c3c:	f7ff fdde 	bl	80017fc <_ZN6osTask5startEPFvPvE>
	gpsNMEA_ParserT.start(StartgpsNMEA_ParserTask);	//Handle = osThreadNew(StartgpsNMEA_ParserTask, NULL, &gpsNMEA_ParserT_attributes);
 8001c40:	490b      	ldr	r1, [pc, #44]	; (8001c70 <main+0x3b0>)
 8001c42:	480c      	ldr	r0, [pc, #48]	; (8001c74 <main+0x3b4>)
 8001c44:	f7ff fdda 	bl	80017fc <_ZN6osTask5startEPFvPvE>
	sdCardTask.start(StartSDcardTask);
 8001c48:	490b      	ldr	r1, [pc, #44]	; (8001c78 <main+0x3b8>)
 8001c4a:	480c      	ldr	r0, [pc, #48]	; (8001c7c <main+0x3bc>)
 8001c4c:	f7ff fdd6 	bl	80017fc <_ZN6osTask5startEPFvPvE>
	osKernelStart();
 8001c50:	f005 fa04 	bl	800705c <osKernelStart>
 8001c54:	e7fe      	b.n	8001c54 <main+0x394>
 8001c56:	bf00      	nop
 8001c58:	08001525 	.word	0x08001525
 8001c5c:	20000438 	.word	0x20000438
 8001c60:	080015cd 	.word	0x080015cd
 8001c64:	200002a0 	.word	0x200002a0
 8001c68:	08001549 	.word	0x08001549
 8001c6c:	20000270 	.word	0x20000270
 8001c70:	08001595 	.word	0x08001595
 8001c74:	200002b0 	.word	0x200002b0
 8001c78:	08001775 	.word	0x08001775
 8001c7c:	20000468 	.word	0x20000468

08001c80 <_GLOBAL__sub_I_hi2c1>:
	osTask(const char *name,uint16_t stack,osPriority_t osPriority=osPriorityNormal ):NameQ(name),stack_size(stack)
 8001c80:	491b      	ldr	r1, [pc, #108]	; (8001cf0 <_GLOBAL__sub_I_hi2c1+0x70>)
 8001c82:	4b1c      	ldr	r3, [pc, #112]	; (8001cf4 <_GLOBAL__sub_I_hi2c1+0x74>)
 8001c84:	2240      	movs	r2, #64	; 0x40
 8001c86:	608b      	str	r3, [r1, #8]
		priority=osPriority;
 8001c88:	2318      	movs	r3, #24
	osTask(const char *name,uint16_t stack,osPriority_t osPriority=osPriorityNormal ):NameQ(name),stack_size(stack)
 8001c8a:	818a      	strh	r2, [r1, #12]
		priority=osPriority;
 8001c8c:	604b      	str	r3, [r1, #4]
	osTask(const char *name,uint16_t stack,osPriority_t osPriority=osPriorityNormal ):NameQ(name),stack_size(stack)
 8001c8e:	481a      	ldr	r0, [pc, #104]	; (8001cf8 <_GLOBAL__sub_I_hi2c1+0x78>)
 8001c90:	491a      	ldr	r1, [pc, #104]	; (8001cfc <_GLOBAL__sub_I_hi2c1+0x7c>)
 8001c92:	6088      	str	r0, [r1, #8]
 8001c94:	2046      	movs	r0, #70	; 0x46
		priority=osPriority;
 8001c96:	604b      	str	r3, [r1, #4]
	osTask(const char *name,uint16_t stack,osPriority_t osPriority=osPriorityNormal ):NameQ(name),stack_size(stack)
 8001c98:	8188      	strh	r0, [r1, #12]
 8001c9a:	4919      	ldr	r1, [pc, #100]	; (8001d00 <_GLOBAL__sub_I_hi2c1+0x80>)
 8001c9c:	4819      	ldr	r0, [pc, #100]	; (8001d04 <_GLOBAL__sub_I_hi2c1+0x84>)
		priority=osPriority;
 8001c9e:	604b      	str	r3, [r1, #4]
	osTask(const char *name,uint16_t stack,osPriority_t osPriority=osPriorityNormal ):NameQ(name),stack_size(stack)
 8001ca0:	6088      	str	r0, [r1, #8]
 8001ca2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001ca6:	8188      	strh	r0, [r1, #12]
 8001ca8:	4917      	ldr	r1, [pc, #92]	; (8001d08 <_GLOBAL__sub_I_hi2c1+0x88>)
 8001caa:	4818      	ldr	r0, [pc, #96]	; (8001d0c <_GLOBAL__sub_I_hi2c1+0x8c>)
		priority=osPriority;
 8001cac:	604b      	str	r3, [r1, #4]
	osTask(const char *name,uint16_t stack,osPriority_t osPriority=osPriorityNormal ):NameQ(name),stack_size(stack)
 8001cae:	6088      	str	r0, [r1, #8]
 8001cb0:	818a      	strh	r2, [r1, #12]
 8001cb2:	4817      	ldr	r0, [pc, #92]	; (8001d10 <_GLOBAL__sub_I_hi2c1+0x90>)
 8001cb4:	4917      	ldr	r1, [pc, #92]	; (8001d14 <_GLOBAL__sub_I_hi2c1+0x94>)
 8001cb6:	6088      	str	r0, [r1, #8]
 8001cb8:	20c8      	movs	r0, #200	; 0xc8
		priority=osPriority;
 8001cba:	604b      	str	r3, [r1, #4]
	osTask(const char *name,uint16_t stack,osPriority_t osPriority=osPriorityNormal ):NameQ(name),stack_size(stack)
 8001cbc:	8188      	strh	r0, [r1, #12]
 8001cbe:	4916      	ldr	r1, [pc, #88]	; (8001d18 <_GLOBAL__sub_I_hi2c1+0x98>)
 8001cc0:	4816      	ldr	r0, [pc, #88]	; (8001d1c <_GLOBAL__sub_I_hi2c1+0x9c>)
		priority=osPriority;
 8001cc2:	604b      	str	r3, [r1, #4]
	osTask(const char *name,uint16_t stack,osPriority_t osPriority=osPriorityNormal ):NameQ(name),stack_size(stack)
 8001cc4:	6088      	str	r0, [r1, #8]
 8001cc6:	f44f 6080 	mov.w	r0, #1024	; 0x400
	osQueue(uint16_t count,const char *name):NameQ(name),queueSize(count)
 8001cca:	2301      	movs	r3, #1
	osTask(const char *name,uint16_t stack,osPriority_t osPriority=osPriorityNormal ):NameQ(name),stack_size(stack)
 8001ccc:	8188      	strh	r0, [r1, #12]
	osQueue(uint16_t count,const char *name):NameQ(name),queueSize(count)
 8001cce:	4914      	ldr	r1, [pc, #80]	; (8001d20 <_GLOBAL__sub_I_hi2c1+0xa0>)
 8001cd0:	4814      	ldr	r0, [pc, #80]	; (8001d24 <_GLOBAL__sub_I_hi2c1+0xa4>)
 8001cd2:	808b      	strh	r3, [r1, #4]
 8001cd4:	6088      	str	r0, [r1, #8]
 8001cd6:	4914      	ldr	r1, [pc, #80]	; (8001d28 <_GLOBAL__sub_I_hi2c1+0xa8>)
 8001cd8:	4814      	ldr	r0, [pc, #80]	; (8001d2c <_GLOBAL__sub_I_hi2c1+0xac>)
 8001cda:	808b      	strh	r3, [r1, #4]
 8001cdc:	6088      	str	r0, [r1, #8]
 8001cde:	4914      	ldr	r1, [pc, #80]	; (8001d30 <_GLOBAL__sub_I_hi2c1+0xb0>)
 8001ce0:	808b      	strh	r3, [r1, #4]
 8001ce2:	4b14      	ldr	r3, [pc, #80]	; (8001d34 <_GLOBAL__sub_I_hi2c1+0xb4>)
 8001ce4:	608b      	str	r3, [r1, #8]
 8001ce6:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <_GLOBAL__sub_I_hi2c1+0xb8>)
 8001ce8:	809a      	strh	r2, [r3, #4]
 8001cea:	4a14      	ldr	r2, [pc, #80]	; (8001d3c <_GLOBAL__sub_I_hi2c1+0xbc>)
 8001cec:	609a      	str	r2, [r3, #8]

}
 8001cee:	4770      	bx	lr
 8001cf0:	2000028c 	.word	0x2000028c
 8001cf4:	0800b8b7 	.word	0x0800b8b7
 8001cf8:	0800b8c2 	.word	0x0800b8c2
 8001cfc:	20000438 	.word	0x20000438
 8001d00:	200002a0 	.word	0x200002a0
 8001d04:	0800b8cf 	.word	0x0800b8cf
 8001d08:	20000270 	.word	0x20000270
 8001d0c:	0800b8db 	.word	0x0800b8db
 8001d10:	0800b8e5 	.word	0x0800b8e5
 8001d14:	200002b0 	.word	0x200002b0
 8001d18:	20000468 	.word	0x20000468
 8001d1c:	0800b8f5 	.word	0x0800b8f5
 8001d20:	20000280 	.word	0x20000280
 8001d24:	0800b900 	.word	0x0800b900
 8001d28:	20000478 	.word	0x20000478
 8001d2c:	0800b90c 	.word	0x0800b90c
 8001d30:	2000042c 	.word	0x2000042c
 8001d34:	0800b920 	.word	0x0800b920
 8001d38:	20000214 	.word	0x20000214
 8001d3c:	0800b92e 	.word	0x0800b92e

08001d40 <_ZN9NMEA_UART6ParserD1Ev>:
    GPS_COUNT = 0;

}

Parser::~Parser() {
}
 8001d40:	4770      	bx	lr

08001d42 <_ZN9NMEA_UART6ParserD0Ev>:
Parser::~Parser() {
 8001d42:	b510      	push	{r4, lr}
 8001d44:	4604      	mov	r4, r0
}
 8001d46:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001d4a:	f007 f94b 	bl	8008fe4 <_ZdlPvj>
 8001d4e:	4620      	mov	r0, r4
 8001d50:	bd10      	pop	{r4, pc}
	...

08001d54 <_ZN9NMEA_UART6ParserC1Ev>:
    GSV { UNUSED, UNUSED, ViewSatellite, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED}
 8001d54:	4601      	mov	r1, r0
 8001d56:	4a65      	ldr	r2, [pc, #404]	; (8001eec <_ZN9NMEA_UART6ParserC1Ev+0x198>)
Parser::Parser() :
 8001d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    GSV { UNUSED, UNUSED, ViewSatellite, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED}
 8001d5c:	f841 2b04 	str.w	r2, [r1], #4
 8001d60:	f100 020e 	add.w	r2, r0, #14
 8001d64:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
 8001d68:	f100 0235 	add.w	r2, r0, #53	; 0x35
 8001d6c:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
 8001d70:	f8c0 20e0 	str.w	r2, [r0, #224]	; 0xe0
 8001d74:	f8c0 1120 	str.w	r1, [r0, #288]	; 0x120
 8001d78:	f100 023e 	add.w	r2, r0, #62	; 0x3e
 8001d7c:	f100 0163 	add.w	r1, r0, #99	; 0x63
 8001d80:	f100 042a 	add.w	r4, r0, #42	; 0x2a
 8001d84:	f100 0e2c 	add.w	lr, r0, #44	; 0x2c
 8001d88:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
 8001d8c:	f100 0848 	add.w	r8, r0, #72	; 0x48
 8001d90:	f100 02a0 	add.w	r2, r0, #160	; 0xa0
 8001d94:	f8c0 1134 	str.w	r1, [r0, #308]	; 0x134
 8001d98:	f100 0165 	add.w	r1, r0, #101	; 0x65
 8001d9c:	e9c0 823e 	strd	r8, r2, [r0, #248]	; 0xf8
 8001da0:	f100 0710 	add.w	r7, r0, #16
 8001da4:	f100 061c 	add.w	r6, r0, #28
 8001da8:	f100 051e 	add.w	r5, r0, #30
 8001dac:	f8c0 40d8 	str.w	r4, [r0, #216]	; 0xd8
 8001db0:	f8c0 e0dc 	str.w	lr, [r0, #220]	; 0xdc
 8001db4:	f100 0c46 	add.w	ip, r0, #70	; 0x46
 8001db8:	f8c0 e108 	str.w	lr, [r0, #264]	; 0x108
 8001dbc:	f8c0 4130 	str.w	r4, [r0, #304]	; 0x130
 8001dc0:	f8c0 1138 	str.w	r1, [r0, #312]	; 0x138
 8001dc4:	f100 0468 	add.w	r4, r0, #104	; 0x68
 8001dc8:	f100 018c 	add.w	r1, r0, #140	; 0x8c
 8001dcc:	f100 0851 	add.w	r8, r0, #81	; 0x51
 8001dd0:	f100 0e5a 	add.w	lr, r0, #90	; 0x5a
 8001dd4:	e9c0 223a 	strd	r2, r2, [r0, #232]	; 0xe8
 8001dd8:	e9c0 c23c 	strd	ip, r2, [r0, #240]	; 0xf0
 8001ddc:	f8c0 2104 	str.w	r2, [r0, #260]	; 0x104
 8001de0:	f8c0 210c 	str.w	r2, [r0, #268]	; 0x10c
 8001de4:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
 8001de8:	f8c0 211c 	str.w	r2, [r0, #284]	; 0x11c
 8001dec:	f8c0 70cc 	str.w	r7, [r0, #204]	; 0xcc
 8001df0:	f8c0 60d0 	str.w	r6, [r0, #208]	; 0xd0
 8001df4:	f8c0 50d4 	str.w	r5, [r0, #212]	; 0xd4
 8001df8:	f8c0 8100 	str.w	r8, [r0, #256]	; 0x100
 8001dfc:	f8c0 e110 	str.w	lr, [r0, #272]	; 0x110
 8001e00:	f8c0 c118 	str.w	ip, [r0, #280]	; 0x118
 8001e04:	f8c0 7124 	str.w	r7, [r0, #292]	; 0x124
 8001e08:	f8c0 6128 	str.w	r6, [r0, #296]	; 0x128
 8001e0c:	f8c0 512c 	str.w	r5, [r0, #300]	; 0x12c
 8001e10:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
 8001e14:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
 8001e18:	f100 0474 	add.w	r4, r0, #116	; 0x74
 8001e1c:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
 8001e20:	f100 0480 	add.w	r4, r0, #128	; 0x80
 8001e24:	f8c0 415c 	str.w	r4, [r0, #348]	; 0x15c
 8001e28:	f8c0 1198 	str.w	r1, [r0, #408]	; 0x198
 8001e2c:	f100 0482 	add.w	r4, r0, #130	; 0x82
 8001e30:	f100 0194 	add.w	r1, r0, #148	; 0x94
 8001e34:	f8c0 4160 	str.w	r4, [r0, #352]	; 0x160
 8001e38:	f8c0 119c 	str.w	r1, [r0, #412]	; 0x19c
 8001e3c:	f100 0484 	add.w	r4, r0, #132	; 0x84
 8001e40:	f100 019c 	add.w	r1, r0, #156	; 0x9c
 8001e44:	f8c0 2144 	str.w	r2, [r0, #324]	; 0x144
 8001e48:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
 8001e4c:	f8c0 2150 	str.w	r2, [r0, #336]	; 0x150
 8001e50:	f8c0 2154 	str.w	r2, [r0, #340]	; 0x154
 8001e54:	f8c0 2158 	str.w	r2, [r0, #344]	; 0x158
 8001e58:	f8c0 2164 	str.w	r2, [r0, #356]	; 0x164
 8001e5c:	f8c0 2168 	str.w	r2, [r0, #360]	; 0x168
 8001e60:	f8c0 216c 	str.w	r2, [r0, #364]	; 0x16c
 8001e64:	f8c0 2170 	str.w	r2, [r0, #368]	; 0x170
 8001e68:	f8c0 2174 	str.w	r2, [r0, #372]	; 0x174
 8001e6c:	f8c0 2178 	str.w	r2, [r0, #376]	; 0x178
 8001e70:	f8c0 217c 	str.w	r2, [r0, #380]	; 0x17c
 8001e74:	f8c0 2180 	str.w	r2, [r0, #384]	; 0x180
 8001e78:	f8c0 2184 	str.w	r2, [r0, #388]	; 0x184
 8001e7c:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 8001e80:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 8001e84:	f8c0 2190 	str.w	r2, [r0, #400]	; 0x190
 8001e88:	f8c0 21a0 	str.w	r2, [r0, #416]	; 0x1a0
 8001e8c:	f8c0 21a4 	str.w	r2, [r0, #420]	; 0x1a4
 8001e90:	f8c0 21a8 	str.w	r2, [r0, #424]	; 0x1a8
 8001e94:	f8c0 21b0 	str.w	r2, [r0, #432]	; 0x1b0
 8001e98:	f8c0 21b4 	str.w	r2, [r0, #436]	; 0x1b4
 8001e9c:	f8c0 21b8 	str.w	r2, [r0, #440]	; 0x1b8
 8001ea0:	f8c0 21bc 	str.w	r2, [r0, #444]	; 0x1bc
 8001ea4:	f8c0 4194 	str.w	r4, [r0, #404]	; 0x194
 8001ea8:	f8c0 11ac 	str.w	r1, [r0, #428]	; 0x1ac
 8001eac:	f8c0 21c0 	str.w	r2, [r0, #448]	; 0x1c0
 8001eb0:	f8c0 21c4 	str.w	r2, [r0, #452]	; 0x1c4
 8001eb4:	f8c0 21c8 	str.w	r2, [r0, #456]	; 0x1c8
 8001eb8:	f8c0 21cc 	str.w	r2, [r0, #460]	; 0x1cc
 8001ebc:	f8c0 21d0 	str.w	r2, [r0, #464]	; 0x1d0
 8001ec0:	f8c0 21d4 	str.w	r2, [r0, #468]	; 0x1d4
 8001ec4:	f8c0 21d8 	str.w	r2, [r0, #472]	; 0x1d8
 8001ec8:	f8c0 21dc 	str.w	r2, [r0, #476]	; 0x1dc
 8001ecc:	f8c0 21e0 	str.w	r2, [r0, #480]	; 0x1e0
 8001ed0:	f8c0 21e4 	str.w	r2, [r0, #484]	; 0x1e4
 8001ed4:	f8c0 21e8 	str.w	r2, [r0, #488]	; 0x1e8
 8001ed8:	f8c0 21ec 	str.w	r2, [r0, #492]	; 0x1ec
 8001edc:	f8c0 21f0 	str.w	r2, [r0, #496]	; 0x1f0
    GLONAS_COUNT = 0;
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f8a0 20c0 	strh.w	r2, [r0, #192]	; 0xc0
}
 8001ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001eea:	bf00      	nop
 8001eec:	0800ba00 	.word	0x0800ba00

08001ef0 <_ZN9NMEA_UART10asciiToIntEPc>:
    resultDecCoor = dd + ((float) mm / 60) + ((float) ss / 60);
    return (resultDecCoor);
}

/*//Конвертация String в Int, строка без точки, "154" -> 154*/
int asciiToInt(char* s) {
 8001ef0:	1e42      	subs	r2, r0, #1
    int n = 0;
    while (*s >= '0' && *s <= '9') {
        n *= 10;
 8001ef2:	210a      	movs	r1, #10
    int n = 0;
 8001ef4:	2000      	movs	r0, #0
int asciiToInt(char* s) {
 8001ef6:	b510      	push	{r4, lr}
    while (*s >= '0' && *s <= '9') {
 8001ef8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8001efc:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 8001f00:	2c09      	cmp	r4, #9
 8001f02:	d803      	bhi.n	8001f0c <_ZN9NMEA_UART10asciiToIntEPc+0x1c>
        n += *s++;
 8001f04:	fb01 3000 	mla	r0, r1, r0, r3
        n -= '0';
 8001f08:	3830      	subs	r0, #48	; 0x30
    while (*s >= '0' && *s <= '9') {
 8001f0a:	e7f5      	b.n	8001ef8 <_ZN9NMEA_UART10asciiToIntEPc+0x8>
    }
    return (n);
}
 8001f0c:	bd10      	pop	{r4, pc}
	...

08001f10 <_ZN9NMEA_UART6Parser10charParserEh>:
    if (data == '$') {
 8001f10:	2924      	cmp	r1, #36	; 0x24
GPS_MESSEGE_TYPE Parser::charParser(unsigned char data) {
 8001f12:	b570      	push	{r4, r5, r6, lr}
 8001f14:	4604      	mov	r4, r0
 8001f16:	4e8e      	ldr	r6, [pc, #568]	; (8002150 <_ZN9NMEA_UART6Parser10charParserEh+0x240>)
    if (data == '$') {
 8001f18:	d108      	bne.n	8001f2c <_ZN9NMEA_UART6Parser10charParserEh+0x1c>
        ComaPoint = 0xff;
 8001f1a:	22ff      	movs	r2, #255	; 0xff
        ByteCount = 0;
 8001f1c:	2000      	movs	r0, #0
        ComaPoint = 0xff;
 8001f1e:	4b8d      	ldr	r3, [pc, #564]	; (8002154 <_ZN9NMEA_UART6Parser10charParserEh+0x244>)
        ByteCount = 0;
 8001f20:	7030      	strb	r0, [r6, #0]
        ComaPoint = 0xff;
 8001f22:	701a      	strb	r2, [r3, #0]
        MsgTxt = (char*) &MsgType;
 8001f24:	4b8c      	ldr	r3, [pc, #560]	; (8002158 <_ZN9NMEA_UART6Parser10charParserEh+0x248>)
 8001f26:	4a8d      	ldr	r2, [pc, #564]	; (800215c <_ZN9NMEA_UART6Parser10charParserEh+0x24c>)
 8001f28:	601a      	str	r2, [r3, #0]
}
 8001f2a:	bd70      	pop	{r4, r5, r6, pc}
    if (ByteCount == 0xff)
 8001f2c:	7833      	ldrb	r3, [r6, #0]
 8001f2e:	2bff      	cmp	r3, #255	; 0xff
 8001f30:	d101      	bne.n	8001f36 <_ZN9NMEA_UART6Parser10charParserEh+0x26>
        return (GPS_NULL);
 8001f32:	2000      	movs	r0, #0
 8001f34:	e7f9      	b.n	8001f2a <_ZN9NMEA_UART6Parser10charParserEh+0x1a>
    ByteCount++;
 8001f36:	1c5a      	adds	r2, r3, #1
 8001f38:	b2d2      	uxtb	r2, r2
    if (ByteCount <= 1)
 8001f3a:	2a01      	cmp	r2, #1
    ByteCount++;
 8001f3c:	7032      	strb	r2, [r6, #0]
    if (ByteCount <= 1)
 8001f3e:	d0f8      	beq.n	8001f32 <_ZN9NMEA_UART6Parser10charParserEh+0x22>
    if (ByteCount < 6 && ByteCount > 1) /*//берем 4 символа заголовка*/
 8001f40:	3b01      	subs	r3, #1
 8001f42:	2b03      	cmp	r3, #3
 8001f44:	d805      	bhi.n	8001f52 <_ZN9NMEA_UART6Parser10charParserEh+0x42>
        *MsgTxt = data; /*//и делаем из него число*/
 8001f46:	4a84      	ldr	r2, [pc, #528]	; (8002158 <_ZN9NMEA_UART6Parser10charParserEh+0x248>)
 8001f48:	6813      	ldr	r3, [r2, #0]
 8001f4a:	f803 1b01 	strb.w	r1, [r3], #1
        MsgTxt++;
 8001f4e:	6013      	str	r3, [r2, #0]
 8001f50:	e7ef      	b.n	8001f32 <_ZN9NMEA_UART6Parser10charParserEh+0x22>
    switch (MsgType) {
 8001f52:	4d82      	ldr	r5, [pc, #520]	; (800215c <_ZN9NMEA_UART6Parser10charParserEh+0x24c>)
 8001f54:	4a82      	ldr	r2, [pc, #520]	; (8002160 <_ZN9NMEA_UART6Parser10charParserEh+0x250>)
 8001f56:	682b      	ldr	r3, [r5, #0]
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d055      	beq.n	8002008 <_ZN9NMEA_UART6Parser10charParserEh+0xf8>
 8001f5c:	d826      	bhi.n	8001fac <_ZN9NMEA_UART6Parser10charParserEh+0x9c>
 8001f5e:	f1a2 7201 	sub.w	r2, r2, #33816576	; 0x2040000
 8001f62:	f5a2 3202 	sub.w	r2, r2, #133120	; 0x20800
 8001f66:	f2a2 22fe 	subw	r2, r2, #766	; 0x2fe
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	f000 8092 	beq.w	8002094 <_ZN9NMEA_UART6Parser10charParserEh+0x184>
 8001f70:	d806      	bhi.n	8001f80 <_ZN9NMEA_UART6Parser10charParserEh+0x70>
 8001f72:	3a02      	subs	r2, #2
 8001f74:	4293      	cmp	r3, r2
 8001f76:	f000 808d 	beq.w	8002094 <_ZN9NMEA_UART6Parser10charParserEh+0x184>
        ByteCount = 0xff;
 8001f7a:	23ff      	movs	r3, #255	; 0xff
 8001f7c:	7033      	strb	r3, [r6, #0]
 8001f7e:	e7d8      	b.n	8001f32 <_ZN9NMEA_UART6Parser10charParserEh+0x22>
    switch (MsgType) {
 8001f80:	4a78      	ldr	r2, [pc, #480]	; (8002164 <_ZN9NMEA_UART6Parser10charParserEh+0x254>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d002      	beq.n	8001f8c <_ZN9NMEA_UART6Parser10charParserEh+0x7c>
 8001f86:	3202      	adds	r2, #2
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d1f6      	bne.n	8001f7a <_ZN9NMEA_UART6Parser10charParserEh+0x6a>
        if (data == ',') {
 8001f8c:	292c      	cmp	r1, #44	; 0x2c
 8001f8e:	f040 80ca 	bne.w	8002126 <_ZN9NMEA_UART6Parser10charParserEh+0x216>
            CharPoint = 0;
 8001f92:	2000      	movs	r0, #0
            ComaPoint++;
 8001f94:	4a6f      	ldr	r2, [pc, #444]	; (8002154 <_ZN9NMEA_UART6Parser10charParserEh+0x244>)
 8001f96:	7813      	ldrb	r3, [r2, #0]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	7013      	strb	r3, [r2, #0]
            CharPoint = 0;
 8001f9e:	4a72      	ldr	r2, [pc, #456]	; (8002168 <_ZN9NMEA_UART6Parser10charParserEh+0x258>)
            GSA[ComaPoint][0] = 0;
 8001fa0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
            CharPoint = 0;
 8001fa4:	7010      	strb	r0, [r2, #0]
            GSA[ComaPoint][0] = 0;
 8001fa6:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
 8001faa:	e03b      	b.n	8002024 <_ZN9NMEA_UART6Parser10charParserEh+0x114>
    switch (MsgType) {
 8001fac:	4a6f      	ldr	r2, [pc, #444]	; (800216c <_ZN9NMEA_UART6Parser10charParserEh+0x25c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d051      	beq.n	8002056 <_ZN9NMEA_UART6Parser10charParserEh+0x146>
 8001fb2:	d813      	bhi.n	8001fdc <_ZN9NMEA_UART6Parser10charParserEh+0xcc>
 8001fb4:	f1a2 2204 	sub.w	r2, r2, #67109888	; 0x4000400
 8001fb8:	f5a2 22e0 	sub.w	r2, r2, #458752	; 0x70000
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d023      	beq.n	8002008 <_ZN9NMEA_UART6Parser10charParserEh+0xf8>
 8001fc0:	f102 6280 	add.w	r2, r2, #67108864	; 0x4000000
 8001fc4:	f502 22e0 	add.w	r2, r2, #458752	; 0x70000
 8001fc8:	f202 32fe 	addw	r2, r2, #1022	; 0x3fe
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d1d4      	bne.n	8001f7a <_ZN9NMEA_UART6Parser10charParserEh+0x6a>
        if (data == ',') {
 8001fd0:	292c      	cmp	r1, #44	; 0x2c
 8001fd2:	d042      	beq.n	800205a <_ZN9NMEA_UART6Parser10charParserEh+0x14a>
        if (data == '*') {
 8001fd4:	292a      	cmp	r1, #42	; 0x2a
 8001fd6:	d14e      	bne.n	8002076 <_ZN9NMEA_UART6Parser10charParserEh+0x166>
            return (GPS_NVTG);
 8001fd8:	2008      	movs	r0, #8
 8001fda:	e7a6      	b.n	8001f2a <_ZN9NMEA_UART6Parser10charParserEh+0x1a>
    switch (MsgType) {
 8001fdc:	4a64      	ldr	r2, [pc, #400]	; (8002170 <_ZN9NMEA_UART6Parser10charParserEh+0x260>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	f000 8084 	beq.w	80020ec <_ZN9NMEA_UART6Parser10charParserEh+0x1dc>
 8001fe4:	3204      	adds	r2, #4
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d1c7      	bne.n	8001f7a <_ZN9NMEA_UART6Parser10charParserEh+0x6a>
        if (data == ',') {
 8001fea:	292c      	cmp	r1, #44	; 0x2c
 8001fec:	d173      	bne.n	80020d6 <_ZN9NMEA_UART6Parser10charParserEh+0x1c6>
            CharPoint = 0;
 8001fee:	2000      	movs	r0, #0
            ComaPoint++;
 8001ff0:	4a58      	ldr	r2, [pc, #352]	; (8002154 <_ZN9NMEA_UART6Parser10charParserEh+0x244>)
 8001ff2:	7813      	ldrb	r3, [r2, #0]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	7013      	strb	r3, [r2, #0]
            CharPoint = 0;
 8001ffa:	4a5b      	ldr	r2, [pc, #364]	; (8002168 <_ZN9NMEA_UART6Parser10charParserEh+0x258>)
            GSV[ComaPoint][0] = 0;
 8001ffc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
            CharPoint = 0;
 8002000:	7010      	strb	r0, [r2, #0]
            GSV[ComaPoint][0] = 0;
 8002002:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 8002006:	e00d      	b.n	8002024 <_ZN9NMEA_UART6Parser10charParserEh+0x114>
        if (data == ',') {
 8002008:	292c      	cmp	r1, #44	; 0x2c
 800200a:	d10d      	bne.n	8002028 <_ZN9NMEA_UART6Parser10charParserEh+0x118>
            CharPoint = 0;
 800200c:	2000      	movs	r0, #0
            ComaPoint++;
 800200e:	4a51      	ldr	r2, [pc, #324]	; (8002154 <_ZN9NMEA_UART6Parser10charParserEh+0x244>)
 8002010:	7813      	ldrb	r3, [r2, #0]
 8002012:	3301      	adds	r3, #1
 8002014:	b2db      	uxtb	r3, r3
 8002016:	7013      	strb	r3, [r2, #0]
            RMC[ComaPoint][0] = 0;
 8002018:	eb04 0483 	add.w	r4, r4, r3, lsl #2
            CharPoint = 0;
 800201c:	4a52      	ldr	r2, [pc, #328]	; (8002168 <_ZN9NMEA_UART6Parser10charParserEh+0x258>)
            RMC[ComaPoint][0] = 0;
 800201e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
            CharPoint = 0;
 8002022:	7010      	strb	r0, [r2, #0]
            GSA[ComaPoint][0] = 0;
 8002024:	7018      	strb	r0, [r3, #0]
            return (GPS_NULL);
 8002026:	e780      	b.n	8001f2a <_ZN9NMEA_UART6Parser10charParserEh+0x1a>
        if ((data) == ('*')) {
 8002028:	292a      	cmp	r1, #42	; 0x2a
 800202a:	d103      	bne.n	8002034 <_ZN9NMEA_UART6Parser10charParserEh+0x124>
            MsgType = 0;
 800202c:	2300      	movs	r3, #0
            return (GPS_NRMC);
 800202e:	2002      	movs	r0, #2
            MsgType = 0;
 8002030:	602b      	str	r3, [r5, #0]
            return (GPS_NRMC);
 8002032:	e77a      	b.n	8001f2a <_ZN9NMEA_UART6Parser10charParserEh+0x1a>
        RMC[ComaPoint][CharPoint++] = data;
 8002034:	4b47      	ldr	r3, [pc, #284]	; (8002154 <_ZN9NMEA_UART6Parser10charParserEh+0x244>)
 8002036:	484c      	ldr	r0, [pc, #304]	; (8002168 <_ZN9NMEA_UART6Parser10charParserEh+0x258>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	7802      	ldrb	r2, [r0, #0]
 800203c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8002040:	f8d4 50c4 	ldr.w	r5, [r4, #196]	; 0xc4
 8002044:	1c53      	adds	r3, r2, #1
 8002046:	54a9      	strb	r1, [r5, r2]
 8002048:	b2db      	uxtb	r3, r3
        RMC[ComaPoint][CharPoint] = 0;
 800204a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
        RMC[ComaPoint][CharPoint++] = data;
 800204e:	7003      	strb	r3, [r0, #0]
        GSA[ComaPoint][CharPoint] = 0;
 8002050:	2000      	movs	r0, #0
 8002052:	54d0      	strb	r0, [r2, r3]
        return (GPS_NULL);
 8002054:	e769      	b.n	8001f2a <_ZN9NMEA_UART6Parser10charParserEh+0x1a>
        if (data == ',') {
 8002056:	292c      	cmp	r1, #44	; 0x2c
 8002058:	d10b      	bne.n	8002072 <_ZN9NMEA_UART6Parser10charParserEh+0x162>
            CharPoint = 0;
 800205a:	2000      	movs	r0, #0
            ComaPoint++;
 800205c:	4a3d      	ldr	r2, [pc, #244]	; (8002154 <_ZN9NMEA_UART6Parser10charParserEh+0x244>)
 800205e:	7813      	ldrb	r3, [r2, #0]
 8002060:	3301      	adds	r3, #1
 8002062:	b2db      	uxtb	r3, r3
 8002064:	7013      	strb	r3, [r2, #0]
            CharPoint = 0;
 8002066:	4a40      	ldr	r2, [pc, #256]	; (8002168 <_ZN9NMEA_UART6Parser10charParserEh+0x258>)
            VTG[ComaPoint][0] = 0;
 8002068:	333e      	adds	r3, #62	; 0x3e
            CharPoint = 0;
 800206a:	7010      	strb	r0, [r2, #0]
            GGA[ComaPoint][0] = 0;
 800206c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002070:	e7d8      	b.n	8002024 <_ZN9NMEA_UART6Parser10charParserEh+0x114>
        if (data == '*') {
 8002072:	292a      	cmp	r1, #42	; 0x2a
 8002074:	d068      	beq.n	8002148 <_ZN9NMEA_UART6Parser10charParserEh+0x238>
        VTG[ComaPoint][CharPoint++] = data;
 8002076:	4b37      	ldr	r3, [pc, #220]	; (8002154 <_ZN9NMEA_UART6Parser10charParserEh+0x244>)
 8002078:	483b      	ldr	r0, [pc, #236]	; (8002168 <_ZN9NMEA_UART6Parser10charParserEh+0x258>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	7802      	ldrb	r2, [r0, #0]
 800207e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8002082:	f8d4 50f8 	ldr.w	r5, [r4, #248]	; 0xf8
 8002086:	1c53      	adds	r3, r2, #1
 8002088:	b2db      	uxtb	r3, r3
 800208a:	7003      	strb	r3, [r0, #0]
 800208c:	54a9      	strb	r1, [r5, r2]
        VTG[ComaPoint][CharPoint] = 0;
 800208e:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
 8002092:	e7dd      	b.n	8002050 <_ZN9NMEA_UART6Parser10charParserEh+0x140>
        if (data == ',') {
 8002094:	292c      	cmp	r1, #44	; 0x2c
 8002096:	d109      	bne.n	80020ac <_ZN9NMEA_UART6Parser10charParserEh+0x19c>
            CharPoint = 0;
 8002098:	2000      	movs	r0, #0
            ComaPoint++;
 800209a:	4a2e      	ldr	r2, [pc, #184]	; (8002154 <_ZN9NMEA_UART6Parser10charParserEh+0x244>)
 800209c:	7813      	ldrb	r3, [r2, #0]
 800209e:	3301      	adds	r3, #1
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	7013      	strb	r3, [r2, #0]
            CharPoint = 0;
 80020a4:	4a30      	ldr	r2, [pc, #192]	; (8002168 <_ZN9NMEA_UART6Parser10charParserEh+0x258>)
            GGA[ComaPoint][0] = 0;
 80020a6:	3348      	adds	r3, #72	; 0x48
            CharPoint = 0;
 80020a8:	7010      	strb	r0, [r2, #0]
 80020aa:	e7df      	b.n	800206c <_ZN9NMEA_UART6Parser10charParserEh+0x15c>
        if (data == '*') {
 80020ac:	292a      	cmp	r1, #42	; 0x2a
 80020ae:	d103      	bne.n	80020b8 <_ZN9NMEA_UART6Parser10charParserEh+0x1a8>
            MsgType = 0;
 80020b0:	2300      	movs	r3, #0
            return (GPS_NGGA);
 80020b2:	2004      	movs	r0, #4
            MsgType = 0;
 80020b4:	602b      	str	r3, [r5, #0]
            return (GPS_NGGA);
 80020b6:	e738      	b.n	8001f2a <_ZN9NMEA_UART6Parser10charParserEh+0x1a>
        GGA[ComaPoint][CharPoint++] = data;
 80020b8:	4b26      	ldr	r3, [pc, #152]	; (8002154 <_ZN9NMEA_UART6Parser10charParserEh+0x244>)
 80020ba:	482b      	ldr	r0, [pc, #172]	; (8002168 <_ZN9NMEA_UART6Parser10charParserEh+0x258>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	7802      	ldrb	r2, [r0, #0]
 80020c0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80020c4:	f8d4 5120 	ldr.w	r5, [r4, #288]	; 0x120
 80020c8:	1c53      	adds	r3, r2, #1
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	54a9      	strb	r1, [r5, r2]
 80020ce:	7003      	strb	r3, [r0, #0]
        GGA[ComaPoint][CharPoint] = 0;
 80020d0:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 80020d4:	e7bc      	b.n	8002050 <_ZN9NMEA_UART6Parser10charParserEh+0x140>
        if (data == '*') {
 80020d6:	292a      	cmp	r1, #42	; 0x2a
 80020d8:	d116      	bne.n	8002108 <_ZN9NMEA_UART6Parser10charParserEh+0x1f8>
            GPS_COUNT = asciiToInt(ViewSatellite);
 80020da:	309c      	adds	r0, #156	; 0x9c
 80020dc:	f7ff ff08 	bl	8001ef0 <_ZN9NMEA_UART10asciiToIntEPc>
            MsgType = 0;
 80020e0:	2300      	movs	r3, #0
            GPS_COUNT = asciiToInt(ViewSatellite);
 80020e2:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
            MsgType = 0;
 80020e6:	602b      	str	r3, [r5, #0]
            return (GPS_PGSV);
 80020e8:	2005      	movs	r0, #5
 80020ea:	e71e      	b.n	8001f2a <_ZN9NMEA_UART6Parser10charParserEh+0x1a>
        if (data == ',') {
 80020ec:	292c      	cmp	r1, #44	; 0x2c
 80020ee:	f43f af7e 	beq.w	8001fee <_ZN9NMEA_UART6Parser10charParserEh+0xde>
        if (data == '*') {
 80020f2:	292a      	cmp	r1, #42	; 0x2a
 80020f4:	d108      	bne.n	8002108 <_ZN9NMEA_UART6Parser10charParserEh+0x1f8>
            GLONAS_COUNT = asciiToInt(ViewSatellite);
 80020f6:	309c      	adds	r0, #156	; 0x9c
 80020f8:	f7ff fefa 	bl	8001ef0 <_ZN9NMEA_UART10asciiToIntEPc>
            MsgType = 0;
 80020fc:	2300      	movs	r3, #0
            GLONAS_COUNT = asciiToInt(ViewSatellite);
 80020fe:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
            MsgType = 0;
 8002102:	602b      	str	r3, [r5, #0]
            return (GPS_LGSV);
 8002104:	2006      	movs	r0, #6
 8002106:	e710      	b.n	8001f2a <_ZN9NMEA_UART6Parser10charParserEh+0x1a>
        GSV[ComaPoint][CharPoint++] = data;
 8002108:	4b12      	ldr	r3, [pc, #72]	; (8002154 <_ZN9NMEA_UART6Parser10charParserEh+0x244>)
 800210a:	4817      	ldr	r0, [pc, #92]	; (8002168 <_ZN9NMEA_UART6Parser10charParserEh+0x258>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	7802      	ldrb	r2, [r0, #0]
 8002110:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8002114:	f8d4 51a4 	ldr.w	r5, [r4, #420]	; 0x1a4
 8002118:	1c53      	adds	r3, r2, #1
 800211a:	b2db      	uxtb	r3, r3
 800211c:	7003      	strb	r3, [r0, #0]
 800211e:	54a9      	strb	r1, [r5, r2]
        GSV[ComaPoint][CharPoint] = 0;
 8002120:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
 8002124:	e794      	b.n	8002050 <_ZN9NMEA_UART6Parser10charParserEh+0x140>
        if (data == '*') {
 8002126:	292a      	cmp	r1, #42	; 0x2a
 8002128:	d010      	beq.n	800214c <_ZN9NMEA_UART6Parser10charParserEh+0x23c>
        GSA[ComaPoint][CharPoint++] = data;
 800212a:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <_ZN9NMEA_UART6Parser10charParserEh+0x244>)
 800212c:	480e      	ldr	r0, [pc, #56]	; (8002168 <_ZN9NMEA_UART6Parser10charParserEh+0x258>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	7802      	ldrb	r2, [r0, #0]
 8002132:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8002136:	f8d4 515c 	ldr.w	r5, [r4, #348]	; 0x15c
 800213a:	1c53      	adds	r3, r2, #1
 800213c:	b2db      	uxtb	r3, r3
 800213e:	54a9      	strb	r1, [r5, r2]
 8002140:	7003      	strb	r3, [r0, #0]
        GSA[ComaPoint][CharPoint] = 0;
 8002142:	f8d4 215c 	ldr.w	r2, [r4, #348]	; 0x15c
 8002146:	e783      	b.n	8002050 <_ZN9NMEA_UART6Parser10charParserEh+0x140>
            return (GPS_PVTG);
 8002148:	2007      	movs	r0, #7
 800214a:	e6ee      	b.n	8001f2a <_ZN9NMEA_UART6Parser10charParserEh+0x1a>
            return (GPS_GNGSA);
 800214c:	200a      	movs	r0, #10
 800214e:	e6ec      	b.n	8001f2a <_ZN9NMEA_UART6Parser10charParserEh+0x1a>
 8002150:	2000000c 	.word	0x2000000c
 8002154:	2000000d 	.word	0x2000000d
 8002158:	20000008 	.word	0x20000008
 800215c:	20000484 	.word	0x20000484
 8002160:	434d524e 	.word	0x434d524e
 8002164:	4153474e 	.word	0x4153474e
 8002168:	20000488 	.word	0x20000488
 800216c:	47545650 	.word	0x47545650
 8002170:	5653474c 	.word	0x5653474c

08002174 <_Z14SPIx_WriteReadh>:
{

}
//-----------------------------------------------
uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8002174:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t receivedbyte = 0;
 8002176:	2300      	movs	r3, #0
 8002178:	aa06      	add	r2, sp, #24
 800217a:	f802 3d01 	strb.w	r3, [r2, #-1]!
	if(HAL_SPI_TransmitReceive(&hspi2,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 800217e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
{
 8002182:	f88d 000f 	strb.w	r0, [sp, #15]
	if(HAL_SPI_TransmitReceive(&hspi2,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	f10d 010f 	add.w	r1, sp, #15
 800218c:	2301      	movs	r3, #1
 800218e:	4804      	ldr	r0, [pc, #16]	; (80021a0 <_Z14SPIx_WriteReadh+0x2c>)
 8002190:	f001 ff6a 	bl	8004068 <HAL_SPI_TransmitReceive>
	{
		Error();
	}
	return receivedbyte;
}
 8002194:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8002198:	b007      	add	sp, #28
 800219a:	f85d fb04 	ldr.w	pc, [sp], #4
 800219e:	bf00      	nop
 80021a0:	20000314 	.word	0x20000314

080021a4 <_Z15SPI_ReceiveBytev>:
	SPIx_WriteRead(bt);
}
//-----------------------------------------------
uint8_t SPI_ReceiveByte(void)
{
	uint8_t bt = SPIx_WriteRead(0xFF);
 80021a4:	20ff      	movs	r0, #255	; 0xff
 80021a6:	f7ff bfe5 	b.w	8002174 <_Z14SPIx_WriteReadh>

080021aa <_Z11SPI_Releasev>:
	return bt;
}
//-----------------------------------------------
void SPI_Release(void)
{
	SPIx_WriteRead(0xFF);
 80021aa:	20ff      	movs	r0, #255	; 0xff
 80021ac:	f7ff bfe2 	b.w	8002174 <_Z14SPIx_WriteReadh>

080021b0 <_Z14SPI_wait_readyv>:
}
//-----------------------------------------------
uint8_t SPI_wait_ready(void)
{
 80021b0:	b538      	push	{r3, r4, r5, lr}
	uint8_t res;
	uint16_t cnt;
	cnt=0;
 80021b2:	2400      	movs	r4, #0
 80021b4:	f64f 75ff 	movw	r5, #65535	; 0xffff
	do { //���� ��������� ��������� BUSY
		res=SPI_ReceiveByte();
 80021b8:	f7ff fff4 	bl	80021a4 <_Z15SPI_ReceiveBytev>
		cnt++;
 80021bc:	3401      	adds	r4, #1
	} while ( (res!=0xFF)&&(cnt<0xFFFF) );
 80021be:	28ff      	cmp	r0, #255	; 0xff
		cnt++;
 80021c0:	b2a4      	uxth	r4, r4
	} while ( (res!=0xFF)&&(cnt<0xFFFF) );
 80021c2:	d003      	beq.n	80021cc <_Z14SPI_wait_readyv+0x1c>
 80021c4:	42ac      	cmp	r4, r5
 80021c6:	d1f7      	bne.n	80021b8 <_Z14SPI_wait_readyv+0x8>
	if (cnt>=0xFFFF) return 1;
 80021c8:	2001      	movs	r0, #1
 80021ca:	e002      	b.n	80021d2 <_Z14SPI_wait_readyv+0x22>
 80021cc:	42ac      	cmp	r4, r5
 80021ce:	bf08      	it	eq
 80021d0:	2001      	moveq	r0, #1
	return res;
}
 80021d2:	bd38      	pop	{r3, r4, r5, pc}

080021d4 <_Z6SD_cmdhm>:
	sprintf(str1,"sd.cpp SD_cmd :%d  value:0x%04X\r\n",cmd,arg);
	HAL_UART_Transmit(&huart3,(uint8_t*)str1,strlen(str1),0x1000);
#endif
	uint8_t n, res;
	// ACMD<n> is the command sequense of CMD55-CMD<n>
	if (cmd & 0x80)
 80021d4:	0602      	lsls	r2, r0, #24
{
 80021d6:	b538      	push	{r3, r4, r5, lr}
 80021d8:	4604      	mov	r4, r0
 80021da:	460d      	mov	r5, r1
	if (cmd & 0x80)
 80021dc:	d507      	bpl.n	80021ee <_Z6SD_cmdhm+0x1a>
	{
		cmd &= 0x7F;
		res = SD_cmd(CMD55, 0);
 80021de:	2100      	movs	r1, #0
 80021e0:	2077      	movs	r0, #119	; 0x77
 80021e2:	f7ff fff7 	bl	80021d4 <_Z6SD_cmdhm>
		if (res > 1) return res;
 80021e6:	2801      	cmp	r0, #1
 80021e8:	d831      	bhi.n	800224e <_Z6SD_cmdhm+0x7a>
		cmd &= 0x7F;
 80021ea:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	}
	// Select the card
	SS_SD_DESELECT();
 80021ee:	2201      	movs	r2, #1
 80021f0:	2140      	movs	r1, #64	; 0x40
 80021f2:	4818      	ldr	r0, [pc, #96]	; (8002254 <_Z6SD_cmdhm+0x80>)
 80021f4:	f000 fe2e 	bl	8002e54 <HAL_GPIO_WritePin>
	SPI_ReceiveByte();
 80021f8:	f7ff ffd4 	bl	80021a4 <_Z15SPI_ReceiveBytev>
	SS_SD_SELECT();
 80021fc:	2200      	movs	r2, #0
 80021fe:	2140      	movs	r1, #64	; 0x40
 8002200:	4814      	ldr	r0, [pc, #80]	; (8002254 <_Z6SD_cmdhm+0x80>)
 8002202:	f000 fe27 	bl	8002e54 <HAL_GPIO_WritePin>
	SPI_ReceiveByte();
 8002206:	f7ff ffcd 	bl	80021a4 <_Z15SPI_ReceiveBytev>
	SPIx_WriteRead(bt);
 800220a:	4620      	mov	r0, r4
 800220c:	f7ff ffb2 	bl	8002174 <_Z14SPIx_WriteReadh>
 8002210:	0e28      	lsrs	r0, r5, #24
 8002212:	f7ff ffaf 	bl	8002174 <_Z14SPIx_WriteReadh>
 8002216:	f3c5 4007 	ubfx	r0, r5, #16, #8
 800221a:	f7ff ffab 	bl	8002174 <_Z14SPIx_WriteReadh>
 800221e:	f3c5 2007 	ubfx	r0, r5, #8, #8
 8002222:	f7ff ffa7 	bl	8002174 <_Z14SPIx_WriteReadh>
 8002226:	b2e8      	uxtb	r0, r5
 8002228:	f7ff ffa4 	bl	8002174 <_Z14SPIx_WriteReadh>
	SPI_SendByte((uint8_t)(arg >> 24)); // Argument[31..24]
	SPI_SendByte((uint8_t)(arg >> 16)); // Argument[23..16]
	SPI_SendByte((uint8_t)(arg >> 8)); // Argument[15..8]
	SPI_SendByte((uint8_t)arg); // Argument[7..0]
	n = 0x01; // Dummy CRC + Stop
	if (cmd == CMD0) {n = 0x95;} // Valid CRC for CMD0(0)
 800222c:	2c40      	cmp	r4, #64	; 0x40
 800222e:	d00f      	beq.n	8002250 <_Z6SD_cmdhm+0x7c>
	if (cmd == CMD8) {n = 0x87;} // Valid CRC for CMD8(0x1AA)
 8002230:	2c48      	cmp	r4, #72	; 0x48
 8002232:	bf14      	ite	ne
 8002234:	2001      	movne	r0, #1
 8002236:	2087      	moveq	r0, #135	; 0x87
	SPIx_WriteRead(bt);
 8002238:	f7ff ff9c 	bl	8002174 <_Z14SPIx_WriteReadh>
 800223c:	240a      	movs	r4, #10
	SPI_SendByte(n);	
	// Receive a command response
	n = 10; // Wait for a valid response in timeout of 10 attempts
	do {
		res = SPI_ReceiveByte();
 800223e:	f7ff ffb1 	bl	80021a4 <_Z15SPI_ReceiveBytev>
	} while ((res & 0x80) && --n);
 8002242:	0603      	lsls	r3, r0, #24
 8002244:	d503      	bpl.n	800224e <_Z6SD_cmdhm+0x7a>
 8002246:	3c01      	subs	r4, #1
 8002248:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800224c:	d1f7      	bne.n	800223e <_Z6SD_cmdhm+0x6a>
	return res;
}
 800224e:	bd38      	pop	{r3, r4, r5, pc}
	if (cmd == CMD0) {n = 0x95;} // Valid CRC for CMD0(0)
 8002250:	2095      	movs	r0, #149	; 0x95
 8002252:	e7f1      	b.n	8002238 <_Z6SD_cmdhm+0x64>
 8002254:	40010800 	.word	0x40010800

08002258 <_Z13SD_Read_BlockPhm>:
{
	HAL_Delay(30);
}
//-----------------------------------------------
uint8_t SD_Read_Block (uint8_t *buff, uint32_t lba)
{
 8002258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800225a:	4606      	mov	r6, r0
	HAL_UART_Transmit(&huart3,(uint8_t*)str1,strlen(str1),0x1000);
#endif
	uint8_t result;
	uint16_t cnt;

	result=SD_cmd (CMD17, lba); //CMD17 ������� ��� 50 � 96
 800225c:	2051      	movs	r0, #81	; 0x51
 800225e:	f7ff ffb9 	bl	80021d4 <_Z6SD_cmdhm>
	if (result!=0x00) {
 8002262:	4605      	mov	r5, r0
 8002264:	b110      	cbz	r0, 800226c <_Z13SD_Read_BlockPhm+0x14>

#ifdef SD_DEBUG
	sprintf(str1,"sd.cpp SD_Read_Block: Error 5\r\n");
	HAL_UART_Transmit(&huart3,(uint8_t*)str1,strlen(str1),0x1000);
#endif
		return 5;
 8002266:	2505      	movs	r5, #5
	HAL_UART_Transmit(&huart3,(uint8_t*)"\r\n",2,0x1000);
	HAL_UART_Transmit(&huart3,(uint8_t*)"\r\n",2,0x1000);

#endif
	return 0;
}
 8002268:	4628      	mov	r0, r5
 800226a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	SPI_Release();
 800226c:	f7ff ff9d 	bl	80021aa <_Z11SPI_Releasev>
	cnt=0;
 8002270:	462c      	mov	r4, r5
 8002272:	f64f 77ff 	movw	r7, #65535	; 0xffff
		result=SPI_ReceiveByte();
 8002276:	f7ff ff95 	bl	80021a4 <_Z15SPI_ReceiveBytev>
		cnt++;
 800227a:	3401      	adds	r4, #1
	} while ( (result!=0xFE)&&(cnt<0xFFFF) );
 800227c:	28fe      	cmp	r0, #254	; 0xfe
		cnt++;
 800227e:	b2a4      	uxth	r4, r4
	} while ( (result!=0xFE)&&(cnt<0xFFFF) );
 8002280:	d002      	beq.n	8002288 <_Z13SD_Read_BlockPhm+0x30>
 8002282:	42bc      	cmp	r4, r7
 8002284:	d1f7      	bne.n	8002276 <_Z13SD_Read_BlockPhm+0x1e>
 8002286:	e7ee      	b.n	8002266 <_Z13SD_Read_BlockPhm+0xe>
	if (cnt>=0xFFFF)
 8002288:	42bc      	cmp	r4, r7
 800228a:	d0ec      	beq.n	8002266 <_Z13SD_Read_BlockPhm+0xe>
 800228c:	1e74      	subs	r4, r6, #1
 800228e:	f206 16ff 	addw	r6, r6, #511	; 0x1ff
	for (cnt=0;cnt<512;cnt++) buff[cnt]=SPI_ReceiveByte(); //�������� ����� ����� �� ���� � �����
 8002292:	f7ff ff87 	bl	80021a4 <_Z15SPI_ReceiveBytev>
 8002296:	f804 0f01 	strb.w	r0, [r4, #1]!
 800229a:	42b4      	cmp	r4, r6
 800229c:	d1f9      	bne.n	8002292 <_Z13SD_Read_BlockPhm+0x3a>
	SPI_Release(); //���������� ����������� �����
 800229e:	f7ff ff84 	bl	80021aa <_Z11SPI_Releasev>
	SPI_Release();
 80022a2:	f7ff ff82 	bl	80021aa <_Z11SPI_Releasev>
	return 0;
 80022a6:	e7df      	b.n	8002268 <_Z13SD_Read_BlockPhm+0x10>

080022a8 <_Z14SD_Write_BlockPhm>:
//-----------------------------------------------
uint8_t SD_Write_Block (uint8_t *buff, uint32_t lba)
{
 80022a8:	b570      	push	{r4, r5, r6, lr}
 80022aa:	4604      	mov	r4, r0
	HAL_UART_Transmit(&huart3,(uint8_t*)str1,strlen(str1),0x1000);
#endif

	uint8_t result;
	uint16_t cnt;
	result=SD_cmd(CMD24,lba);
 80022ac:	2058      	movs	r0, #88	; 0x58
 80022ae:	f7ff ff91 	bl	80021d4 <_Z6SD_cmdhm>
	if (result!=0x00){
 80022b2:	4605      	mov	r5, r0
 80022b4:	b110      	cbz	r0, 80022bc <_Z14SD_Write_BlockPhm+0x14>

#ifdef SD_DEBUG
	sprintf(str1,"sd.cpp SD_WRITE_Block: Error 6 \r\n");
	HAL_UART_Transmit(&huart3,(uint8_t*)str1,strlen(str1),0x1000);
#endif
		return 6;
 80022b6:	2506      	movs	r5, #6
	HAL_UART_Transmit(&huart3,(uint8_t*)str1,strlen(str1),0x1000);
#endif
		return 6;
	}
	return 0;
}
 80022b8:	4628      	mov	r0, r5
 80022ba:	bd70      	pop	{r4, r5, r6, pc}
	SPI_Release();
 80022bc:	f7ff ff75 	bl	80021aa <_Z11SPI_Releasev>
	SPIx_WriteRead(bt);
 80022c0:	20fe      	movs	r0, #254	; 0xfe
 80022c2:	f7ff ff57 	bl	8002174 <_Z14SPIx_WriteReadh>
 80022c6:	1e66      	subs	r6, r4, #1
 80022c8:	f204 14ff 	addw	r4, r4, #511	; 0x1ff
 80022cc:	f816 0f01 	ldrb.w	r0, [r6, #1]!
 80022d0:	f7ff ff50 	bl	8002174 <_Z14SPIx_WriteReadh>
	for (cnt=0;cnt<512;cnt++) SPI_SendByte(buff[cnt]);
 80022d4:	42a6      	cmp	r6, r4
 80022d6:	d1f9      	bne.n	80022cc <_Z14SD_Write_BlockPhm+0x24>
	SPI_Release();
 80022d8:	f7ff ff67 	bl	80021aa <_Z11SPI_Releasev>
	SPI_Release();
 80022dc:	f7ff ff65 	bl	80021aa <_Z11SPI_Releasev>
	result=SPI_ReceiveByte();
 80022e0:	f7ff ff60 	bl	80021a4 <_Z15SPI_ReceiveBytev>
	if ((result&0x05)!=0x05){
 80022e4:	f000 0005 	and.w	r0, r0, #5
 80022e8:	2805      	cmp	r0, #5
 80022ea:	d1e4      	bne.n	80022b6 <_Z14SD_Write_BlockPhm+0xe>
	cnt=0;
 80022ec:	2400      	movs	r4, #0
 80022ee:	f64f 76ff 	movw	r6, #65535	; 0xffff
		result=SPI_ReceiveByte();
 80022f2:	f7ff ff57 	bl	80021a4 <_Z15SPI_ReceiveBytev>
		cnt++;
 80022f6:	3401      	adds	r4, #1
	} while ( (result!=0xFF)&&(cnt<0xFFFF) );
 80022f8:	28ff      	cmp	r0, #255	; 0xff
		cnt++;
 80022fa:	b2a4      	uxth	r4, r4
	} while ( (result!=0xFF)&&(cnt<0xFFFF) );
 80022fc:	d002      	beq.n	8002304 <_Z14SD_Write_BlockPhm+0x5c>
 80022fe:	42b4      	cmp	r4, r6
 8002300:	d1f7      	bne.n	80022f2 <_Z14SD_Write_BlockPhm+0x4a>
 8002302:	e7d8      	b.n	80022b6 <_Z14SD_Write_BlockPhm+0xe>
	if (cnt>=0xFFFF){
 8002304:	42b4      	cmp	r4, r6
 8002306:	d1d7      	bne.n	80022b8 <_Z14SD_Write_BlockPhm+0x10>
 8002308:	e7d5      	b.n	80022b6 <_Z14SD_Write_BlockPhm+0xe>
	...

0800230c <_Z6sd_iniv>:
	uint8_t i, cmd;
	int16_t tmr;
	uint32_t temp;


	sdinfo.type = 0;
 800230c:	2300      	movs	r3, #0
{
 800230e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	sdinfo.type = 0;
 8002310:	4d45      	ldr	r5, [pc, #276]	; (8002428 <_Z6sd_iniv+0x11c>)
	uint8_t ocr[4];

	temp = hspi2.Init.BaudRatePrescaler;
 8002312:	4e46      	ldr	r6, [pc, #280]	; (800242c <_Z6sd_iniv+0x120>)
	sdinfo.type = 0;
 8002314:	702b      	strb	r3, [r5, #0]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128; //156.25 kbbs
 8002316:	2330      	movs	r3, #48	; 0x30
	HAL_SPI_Init(&hspi2);
 8002318:	4630      	mov	r0, r6
	temp = hspi2.Init.BaudRatePrescaler;
 800231a:	69f7      	ldr	r7, [r6, #28]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128; //156.25 kbbs
 800231c:	61f3      	str	r3, [r6, #28]
	HAL_SPI_Init(&hspi2);
 800231e:	f001 fe68 	bl	8003ff2 <HAL_SPI_Init>

	SS_SD_DESELECT();
 8002322:	2201      	movs	r2, #1
 8002324:	2140      	movs	r1, #64	; 0x40
 8002326:	4842      	ldr	r0, [pc, #264]	; (8002430 <_Z6sd_iniv+0x124>)
 8002328:	f000 fd94 	bl	8002e54 <HAL_GPIO_WritePin>
 800232c:	240a      	movs	r4, #10
 800232e:	3c01      	subs	r4, #1
	for(i=0;i<10;i++) //80 ��������� (�� ����� 74) ������� ��� 91
		SPI_Release();
 8002330:	f7ff ff3b 	bl	80021aa <_Z11SPI_Releasev>
	for(i=0;i<10;i++) //80 ��������� (�� ����� 74) ������� ��� 91
 8002334:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8002338:	d1f9      	bne.n	800232e <_Z6sd_iniv+0x22>
	hspi2.Init.BaudRatePrescaler = temp;
	HAL_SPI_Init(&hspi2);
 800233a:	483c      	ldr	r0, [pc, #240]	; (800242c <_Z6sd_iniv+0x120>)
	hspi2.Init.BaudRatePrescaler = temp;
 800233c:	61f7      	str	r7, [r6, #28]
	HAL_SPI_Init(&hspi2);
 800233e:	f001 fe58 	bl	8003ff2 <HAL_SPI_Init>
	SS_SD_SELECT();
 8002342:	4622      	mov	r2, r4
 8002344:	2140      	movs	r1, #64	; 0x40
 8002346:	483a      	ldr	r0, [pc, #232]	; (8002430 <_Z6sd_iniv+0x124>)
 8002348:	f000 fd84 	bl	8002e54 <HAL_GPIO_WritePin>

	if (SD_cmd(CMD0, 0) == 1) // Enter Idle state
 800234c:	4621      	mov	r1, r4
 800234e:	2040      	movs	r0, #64	; 0x40
 8002350:	f7ff ff40 	bl	80021d4 <_Z6SD_cmdhm>
 8002354:	2801      	cmp	r0, #1
 8002356:	4606      	mov	r6, r0
 8002358:	d145      	bne.n	80023e6 <_Z6sd_iniv+0xda>
	{
		HAL_Delay(1000);
 800235a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800235e:	f000 fbcf 	bl	8002b00 <HAL_Delay>
		//SPI_Release();
		if (SD_cmd(CMD8, 0x1AA) == 1) // SDv2
 8002362:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002366:	2048      	movs	r0, #72	; 0x48
 8002368:	f7ff ff34 	bl	80021d4 <_Z6SD_cmdhm>
 800236c:	2801      	cmp	r0, #1
 800236e:	d120      	bne.n	80023b2 <_Z6sd_iniv+0xa6>
		{
			for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8002370:	af01      	add	r7, sp, #4
 8002372:	f7ff ff17 	bl	80021a4 <_Z15SPI_ReceiveBytev>
 8002376:	5538      	strb	r0, [r7, r4]
 8002378:	3401      	adds	r4, #1
 800237a:	2c04      	cmp	r4, #4
 800237c:	d1f9      	bne.n	8002372 <_Z6sd_iniv+0x66>
#ifdef SD_DEBUG
			sprintf(str1,"OCR: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",ocr[0],ocr[1],ocr[2],ocr[3]);
			HAL_UART_Transmit(&huart3,(uint8_t*)str1,strlen(str1),0x1000);
#endif
			// Get trailing return value of R7 resp
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) // The card can work at vdd range of 2.7-3.6V
 800237e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d003      	beq.n	800238e <_Z6sd_iniv+0x82>
	}
#ifdef SD_DEBUG
	sprintf(str1,"Type SD: 0x%02X\r\n",sdinfo.type);
	HAL_UART_Transmit(&huart3,(uint8_t*)str1,strlen(str1),0x1000);
#endif
	return 0;
 8002386:	2400      	movs	r4, #0
}
 8002388:	4620      	mov	r0, r4
 800238a:	b003      	add	sp, #12
 800238c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) // The card can work at vdd range of 2.7-3.6V
 800238e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002392:	2baa      	cmp	r3, #170	; 0xaa
 8002394:	d1f7      	bne.n	8002386 <_Z6sd_iniv+0x7a>
 8002396:	f642 64e0 	movw	r4, #12000	; 0x2ee0
				for (tmr = 12000; tmr && SD_cmd(ACMD41, 1UL << 30); tmr--)
 800239a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800239e:	20e9      	movs	r0, #233	; 0xe9
 80023a0:	f7ff ff18 	bl	80021d4 <_Z6SD_cmdhm>
 80023a4:	4601      	mov	r1, r0
 80023a6:	b300      	cbz	r0, 80023ea <_Z6sd_iniv+0xde>
 80023a8:	3c01      	subs	r4, #1
 80023aa:	b2a4      	uxth	r4, r4
 80023ac:	2c00      	cmp	r4, #0
 80023ae:	d1f4      	bne.n	800239a <_Z6sd_iniv+0x8e>
 80023b0:	e7e9      	b.n	8002386 <_Z6sd_iniv+0x7a>
			if (SD_cmd(ACMD41, 0) <= 1)
 80023b2:	4621      	mov	r1, r4
 80023b4:	20e9      	movs	r0, #233	; 0xe9
 80023b6:	f7ff ff0d 	bl	80021d4 <_Z6SD_cmdhm>
 80023ba:	2801      	cmp	r0, #1
				sdinfo.type = CT_SD1; cmd = ACMD41; // SDv1
 80023bc:	bf95      	itete	ls
 80023be:	2302      	movls	r3, #2
				sdinfo.type = CT_MMC; cmd = CMD1; // MMCv3
 80023c0:	702e      	strbhi	r6, [r5, #0]
				sdinfo.type = CT_SD1; cmd = ACMD41; // SDv1
 80023c2:	26e9      	movls	r6, #233	; 0xe9
				sdinfo.type = CT_MMC; cmd = CMD1; // MMCv3
 80023c4:	2641      	movhi	r6, #65	; 0x41
 80023c6:	f246 14a8 	movw	r4, #25000	; 0x61a8
				sdinfo.type = CT_SD1; cmd = ACMD41; // SDv1
 80023ca:	bf98      	it	ls
 80023cc:	702b      	strbls	r3, [r5, #0]
			for (tmr = 25000; tmr && SD_cmd(cmd, 0); tmr--) ; // Wait for leaving idle state
 80023ce:	2100      	movs	r1, #0
 80023d0:	4630      	mov	r0, r6
 80023d2:	f7ff feff 	bl	80021d4 <_Z6SD_cmdhm>
 80023d6:	b1f0      	cbz	r0, 8002416 <_Z6sd_iniv+0x10a>
 80023d8:	3c01      	subs	r4, #1
 80023da:	b2a4      	uxth	r4, r4
 80023dc:	2c00      	cmp	r4, #0
 80023de:	d1f6      	bne.n	80023ce <_Z6sd_iniv+0xc2>
				sdinfo.type = 0;
 80023e0:	2400      	movs	r4, #0
 80023e2:	702c      	strb	r4, [r5, #0]
 80023e4:	e7d0      	b.n	8002388 <_Z6sd_iniv+0x7c>
		return 1;
 80023e6:	2401      	movs	r4, #1
 80023e8:	e7ce      	b.n	8002388 <_Z6sd_iniv+0x7c>
				if (tmr && SD_cmd(CMD58, 0) == 0)
 80023ea:	207a      	movs	r0, #122	; 0x7a
 80023ec:	f7ff fef2 	bl	80021d4 <_Z6SD_cmdhm>
 80023f0:	4604      	mov	r4, r0
 80023f2:	2800      	cmp	r0, #0
 80023f4:	d1c7      	bne.n	8002386 <_Z6sd_iniv+0x7a>
 80023f6:	4626      	mov	r6, r4
						ocr[i] = SPI_ReceiveByte();
 80023f8:	f7ff fed4 	bl	80021a4 <_Z15SPI_ReceiveBytev>
 80023fc:	55b8      	strb	r0, [r7, r6]
 80023fe:	3601      	adds	r6, #1
					for (i = 0; i < 4; i++)
 8002400:	2e04      	cmp	r6, #4
 8002402:	d1f9      	bne.n	80023f8 <_Z6sd_iniv+0xec>
					sdinfo.type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; // SDv2 (HC or SC)
 8002404:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002408:	f013 0f40 	tst.w	r3, #64	; 0x40
 800240c:	bf14      	ite	ne
 800240e:	230c      	movne	r3, #12
 8002410:	2304      	moveq	r3, #4
 8002412:	702b      	strb	r3, [r5, #0]
 8002414:	e7b8      	b.n	8002388 <_Z6sd_iniv+0x7c>
			if (!tmr || SD_cmd(CMD16, 512) != 0) // Set R/W block length to 512
 8002416:	f44f 7100 	mov.w	r1, #512	; 0x200
 800241a:	2050      	movs	r0, #80	; 0x50
 800241c:	f7ff feda 	bl	80021d4 <_Z6SD_cmdhm>
 8002420:	2800      	cmp	r0, #0
 8002422:	d1dd      	bne.n	80023e0 <_Z6sd_iniv+0xd4>
 8002424:	e7af      	b.n	8002386 <_Z6sd_iniv+0x7a>
 8002426:	bf00      	nop
 8002428:	20000489 	.word	0x20000489
 800242c:	20000314 	.word	0x20000314
 8002430:	40010800 	.word	0x40010800

08002434 <_ZL20ssd1306_WriteCommandh>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8002434:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8002436:	2301      	movs	r3, #1
 8002438:	210a      	movs	r1, #10
{
 800243a:	aa06      	add	r2, sp, #24
 800243c:	f802 0d01 	strb.w	r0, [r2, #-1]!
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8002440:	9200      	str	r2, [sp, #0]
 8002442:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	2178      	movs	r1, #120	; 0x78
 800244a:	4803      	ldr	r0, [pc, #12]	; (8002458 <_ZL20ssd1306_WriteCommandh+0x24>)
 800244c:	f001 f940 	bl	80036d0 <HAL_I2C_Mem_Write>

}
 8002450:	b007      	add	sp, #28
 8002452:	f85d fb04 	ldr.w	pc, [sp], #4
 8002456:	bf00      	nop
 8002458:	200002c0 	.word	0x200002c0

0800245c <_Z12ssd1306_Fill13SSD1306_COLOR>:
void ssd1306_Fill(SSD1306_COLOR color)
{
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800245c:	2300      	movs	r3, #0
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800245e:	4905      	ldr	r1, [pc, #20]	; (8002474 <_Z12ssd1306_Fill13SSD1306_COLOR+0x18>)
 8002460:	1c02      	adds	r2, r0, #0
 8002462:	bf18      	it	ne
 8002464:	2201      	movne	r2, #1
 8002466:	4252      	negs	r2, r2
 8002468:	545a      	strb	r2, [r3, r1]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800246a:	3301      	adds	r3, #1
 800246c:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 8002470:	d1f6      	bne.n	8002460 <_Z12ssd1306_Fill13SSD1306_COLOR+0x4>
	}
}
 8002472:	4770      	bx	lr
 8002474:	2000048a 	.word	0x2000048a

08002478 <_Z20ssd1306_UpdateScreenv>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 8002478:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800247a:	2400      	movs	r4, #0
	for (i = 0; i < 8; i++) {
		ssd1306_WriteCommand(0xB0 + i);
		ssd1306_WriteCommand(0x00);
		ssd1306_WriteCommand(0x10);

		HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100);
 800247c:	4e0f      	ldr	r6, [pc, #60]	; (80024bc <_Z20ssd1306_UpdateScreenv+0x44>)
 800247e:	4d10      	ldr	r5, [pc, #64]	; (80024c0 <_Z20ssd1306_UpdateScreenv+0x48>)
		ssd1306_WriteCommand(0xB0 + i);
 8002480:	f1a4 0050 	sub.w	r0, r4, #80	; 0x50
 8002484:	b2c0      	uxtb	r0, r0
 8002486:	f7ff ffd5 	bl	8002434 <_ZL20ssd1306_WriteCommandh>
		ssd1306_WriteCommand(0x00);
 800248a:	2000      	movs	r0, #0
 800248c:	f7ff ffd2 	bl	8002434 <_ZL20ssd1306_WriteCommandh>
		ssd1306_WriteCommand(0x10);
 8002490:	2010      	movs	r0, #16
 8002492:	f7ff ffcf 	bl	8002434 <_ZL20ssd1306_WriteCommandh>
		HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100);
 8002496:	2382      	movs	r3, #130	; 0x82
 8002498:	2264      	movs	r2, #100	; 0x64
 800249a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800249e:	fb03 6304 	mla	r3, r3, r4, r6
 80024a2:	2240      	movs	r2, #64	; 0x40
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	2178      	movs	r1, #120	; 0x78
 80024a8:	2301      	movs	r3, #1
 80024aa:	4628      	mov	r0, r5
 80024ac:	3401      	adds	r4, #1
 80024ae:	f001 f90f 	bl	80036d0 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 80024b2:	2c08      	cmp	r4, #8
 80024b4:	d1e4      	bne.n	8002480 <_Z20ssd1306_UpdateScreenv+0x8>

	}
}
 80024b6:	b004      	add	sp, #16
 80024b8:	bd70      	pop	{r4, r5, r6, pc}
 80024ba:	bf00      	nop
 80024bc:	2000048a 	.word	0x2000048a
 80024c0:	200002c0 	.word	0x200002c0

080024c4 <_Z12ssd1306_Initv>:
{
 80024c4:	b508      	push	{r3, lr}
	HAL_Delay(100);
 80024c6:	2064      	movs	r0, #100	; 0x64
 80024c8:	f000 fb1a 	bl	8002b00 <HAL_Delay>
	ssd1306_WriteCommand(0xAE); //display off
 80024cc:	20ae      	movs	r0, #174	; 0xae
 80024ce:	f7ff ffb1 	bl	8002434 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80024d2:	2020      	movs	r0, #32
 80024d4:	f7ff ffae 	bl	8002434 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80024d8:	2010      	movs	r0, #16
 80024da:	f7ff ffab 	bl	8002434 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80024de:	20b0      	movs	r0, #176	; 0xb0
 80024e0:	f7ff ffa8 	bl	8002434 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80024e4:	20c8      	movs	r0, #200	; 0xc8
 80024e6:	f7ff ffa5 	bl	8002434 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x00); //---set low column address
 80024ea:	2000      	movs	r0, #0
 80024ec:	f7ff ffa2 	bl	8002434 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x10); //---set high column address
 80024f0:	2010      	movs	r0, #16
 80024f2:	f7ff ff9f 	bl	8002434 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x40); //--set start line address
 80024f6:	2040      	movs	r0, #64	; 0x40
 80024f8:	f7ff ff9c 	bl	8002434 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 80024fc:	2081      	movs	r0, #129	; 0x81
 80024fe:	f7ff ff99 	bl	8002434 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xFF);
 8002502:	20ff      	movs	r0, #255	; 0xff
 8002504:	f7ff ff96 	bl	8002434 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 8002508:	20a1      	movs	r0, #161	; 0xa1
 800250a:	f7ff ff93 	bl	8002434 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xA6); //--set normal display
 800250e:	20a6      	movs	r0, #166	; 0xa6
 8002510:	f7ff ff90 	bl	8002434 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8002514:	20a8      	movs	r0, #168	; 0xa8
 8002516:	f7ff ff8d 	bl	8002434 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x3F); //
 800251a:	203f      	movs	r0, #63	; 0x3f
 800251c:	f7ff ff8a 	bl	8002434 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002520:	20a4      	movs	r0, #164	; 0xa4
 8002522:	f7ff ff87 	bl	8002434 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8002526:	20d3      	movs	r0, #211	; 0xd3
 8002528:	f7ff ff84 	bl	8002434 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x00); //-not offset
 800252c:	2000      	movs	r0, #0
 800252e:	f7ff ff81 	bl	8002434 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002532:	20d5      	movs	r0, #213	; 0xd5
 8002534:	f7ff ff7e 	bl	8002434 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002538:	20f0      	movs	r0, #240	; 0xf0
 800253a:	f7ff ff7b 	bl	8002434 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800253e:	20d9      	movs	r0, #217	; 0xd9
 8002540:	f7ff ff78 	bl	8002434 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x22); //
 8002544:	2022      	movs	r0, #34	; 0x22
 8002546:	f7ff ff75 	bl	8002434 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 800254a:	20da      	movs	r0, #218	; 0xda
 800254c:	f7ff ff72 	bl	8002434 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x12);
 8002550:	2012      	movs	r0, #18
 8002552:	f7ff ff6f 	bl	8002434 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8002556:	20db      	movs	r0, #219	; 0xdb
 8002558:	f7ff ff6c 	bl	8002434 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800255c:	2020      	movs	r0, #32
 800255e:	f7ff ff69 	bl	8002434 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002562:	208d      	movs	r0, #141	; 0x8d
 8002564:	f7ff ff66 	bl	8002434 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x14); //
 8002568:	2014      	movs	r0, #20
 800256a:	f7ff ff63 	bl	8002434 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 800256e:	20af      	movs	r0, #175	; 0xaf
 8002570:	f7ff ff60 	bl	8002434 <_ZL20ssd1306_WriteCommandh>
	ssd1306_Fill(Black);
 8002574:	2000      	movs	r0, #0
 8002576:	f7ff ff71 	bl	800245c <_Z12ssd1306_Fill13SSD1306_COLOR>
	ssd1306_UpdateScreen();
 800257a:	f7ff ff7d 	bl	8002478 <_Z20ssd1306_UpdateScreenv>
	SSD1306.Initialized = 1;
 800257e:	2001      	movs	r0, #1
	SSD1306.CurrentX = 0;
 8002580:	2200      	movs	r2, #0
 8002582:	4b02      	ldr	r3, [pc, #8]	; (800258c <_Z12ssd1306_Initv+0xc8>)
	SSD1306.Initialized = 1;
 8002584:	7158      	strb	r0, [r3, #5]
	SSD1306.CurrentX = 0;
 8002586:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002588:	805a      	strh	r2, [r3, #2]
}
 800258a:	bd08      	pop	{r3, pc}
 800258c:	2000089a 	.word	0x2000089a

08002590 <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR>:
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8002590:	2881      	cmp	r0, #129	; 0x81
{
 8002592:	b530      	push	{r4, r5, lr}
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8002594:	d817      	bhi.n	80025c6 <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0x36>
 8002596:	293f      	cmp	r1, #63	; 0x3f
 8002598:	d815      	bhi.n	80025c6 <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0x36>
		// Don't write outside the buffer
		return;
	}

	// Check if pixel should be inverted
	if (SSD1306.Inverted)
 800259a:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0x38>)
 800259c:	791b      	ldrb	r3, [r3, #4]
 800259e:	b113      	cbz	r3, 80025a6 <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0x16>
	{
		color = (SSD1306_COLOR)!color;
 80025a0:	fab2 f282 	clz	r2, r2
 80025a4:	0952      	lsrs	r2, r2, #5
 80025a6:	2382      	movs	r3, #130	; 0x82
 80025a8:	08cc      	lsrs	r4, r1, #3
 80025aa:	fb03 0004 	mla	r0, r3, r4, r0
 80025ae:	f001 0407 	and.w	r4, r1, #7
 80025b2:	2101      	movs	r1, #1
 80025b4:	4d05      	ldr	r5, [pc, #20]	; (80025cc <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0x3c>)
 80025b6:	40a1      	lsls	r1, r4
 80025b8:	562b      	ldrsb	r3, [r5, r0]
 80025ba:	b249      	sxtb	r1, r1
	}

	// Draw in the right color
	if (color == White)
 80025bc:	2a01      	cmp	r2, #1
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80025be:	bf0c      	ite	eq
 80025c0:	430b      	orreq	r3, r1
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80025c2:	438b      	bicne	r3, r1
 80025c4:	542b      	strb	r3, [r5, r0]
	}
}
 80025c6:	bd30      	pop	{r4, r5, pc}
 80025c8:	2000089a 	.word	0x2000089a
 80025cc:	2000048a 	.word	0x2000048a

080025d0 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 80025d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025d4:	b087      	sub	sp, #28
 80025d6:	4607      	mov	r7, r0
 80025d8:	a806      	add	r0, sp, #24
 80025da:	e900 0006 	stmdb	r0, {r1, r2}
 80025de:	469b      	mov	fp, r3
	uint32_t i, b, j;

	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80025e0:	4b21      	ldr	r3, [pc, #132]	; (8002668 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0x98>)
 80025e2:	f89d 9010 	ldrb.w	r9, [sp, #16]
 80025e6:	881c      	ldrh	r4, [r3, #0]
 80025e8:	9301      	str	r3, [sp, #4]
 80025ea:	eb04 0209 	add.w	r2, r4, r9
 80025ee:	2a81      	cmp	r2, #129	; 0x81
 80025f0:	dc37      	bgt.n	8002662 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0x92>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80025f2:	885b      	ldrh	r3, [r3, #2]
 80025f4:	f89d a011 	ldrb.w	sl, [sp, #17]
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	eb03 020a 	add.w	r2, r3, sl
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80025fe:	2a3f      	cmp	r2, #63	; 0x3f
 8002600:	dc2f      	bgt.n	8002662 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0x92>
		// Not enough space on current line
		return 0;
	}

	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 8002602:	2500      	movs	r5, #0
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002604:	f1a7 0220 	sub.w	r2, r7, #32
 8002608:	fb0a f302 	mul.w	r3, sl, r2
 800260c:	9302      	str	r3, [sp, #8]
	for (i = 0; i < Font.FontHeight; i++)
 800260e:	45aa      	cmp	sl, r5
 8002610:	d920      	bls.n	8002654 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0x84>
		for (j = 0; j < Font.FontWidth; j++)
 8002612:	2600      	movs	r6, #0
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002614:	9b02      	ldr	r3, [sp, #8]
 8002616:	9905      	ldr	r1, [sp, #20]
 8002618:	195a      	adds	r2, r3, r5
 800261a:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 800261e:	9303      	str	r3, [sp, #12]
 8002620:	9b00      	ldr	r3, [sp, #0]
 8002622:	eb05 0803 	add.w	r8, r5, r3
 8002626:	fa5f f888 	uxtb.w	r8, r8
		for (j = 0; j < Font.FontWidth; j++)
 800262a:	45b1      	cmp	r9, r6
 800262c:	d910      	bls.n	8002650 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0x80>
		{
			if ((b << j) & 0x8000)
 800262e:	9b03      	ldr	r3, [sp, #12]
 8002630:	1930      	adds	r0, r6, r4
 8002632:	fa03 f206 	lsl.w	r2, r3, r6
 8002636:	0413      	lsls	r3, r2, #16
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
			}
			else
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002638:	bf58      	it	pl
 800263a:	fabb f28b 	clzpl	r2, fp
 800263e:	b2c0      	uxtb	r0, r0
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002640:	bf4c      	ite	mi
 8002642:	465a      	movmi	r2, fp
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002644:	0952      	lsrpl	r2, r2, #5
 8002646:	4641      	mov	r1, r8
 8002648:	f7ff ffa2 	bl	8002590 <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR>
		for (j = 0; j < Font.FontWidth; j++)
 800264c:	3601      	adds	r6, #1
 800264e:	e7ec      	b.n	800262a <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0x5a>
	for (i = 0; i < Font.FontHeight; i++)
 8002650:	3501      	adds	r5, #1
 8002652:	e7dc      	b.n	800260e <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0x3e>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 8002654:	9b01      	ldr	r3, [sp, #4]
 8002656:	444c      	add	r4, r9
 8002658:	801c      	strh	r4, [r3, #0]

	// Return written char for validation
	return ch;
}
 800265a:	4638      	mov	r0, r7
 800265c:	b007      	add	sp, #28
 800265e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
 8002662:	2700      	movs	r7, #0
 8002664:	e7f9      	b.n	800265a <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0x8a>
 8002666:	bf00      	nop
 8002668:	2000089a 	.word	0x2000089a

0800266c <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 800266c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800266e:	466d      	mov	r5, sp
 8002670:	461f      	mov	r7, r3
 8002672:	e885 0006 	stmia.w	r5, {r1, r2}
 8002676:	1e46      	subs	r6, r0, #1
	// Write until null-byte
	while (*str)
 8002678:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 800267c:	b144      	cbz	r4, 8002690 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR+0x24>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 800267e:	e895 0006 	ldmia.w	r5, {r1, r2}
 8002682:	4620      	mov	r0, r4
 8002684:	463b      	mov	r3, r7
 8002686:	f7ff ffa3 	bl	80025d0 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR>
 800268a:	7834      	ldrb	r4, [r6, #0]
 800268c:	42a0      	cmp	r0, r4
 800268e:	d0f3      	beq.n	8002678 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR+0xc>
		str++;
	}

	// Everything ok
	return *str;
}
 8002690:	4620      	mov	r0, r4
 8002692:	b003      	add	sp, #12
 8002694:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002698 <_Z17ssd1306_SetCursorhh>:
//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
	SSD1306.CurrentX = x;
 8002698:	4b01      	ldr	r3, [pc, #4]	; (80026a0 <_Z17ssd1306_SetCursorhh+0x8>)
 800269a:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 800269c:	8059      	strh	r1, [r3, #2]
}
 800269e:	4770      	bx	lr
 80026a0:	2000089a 	.word	0x2000089a

080026a4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80026a4:	4b11      	ldr	r3, [pc, #68]	; (80026ec <HAL_MspInit+0x48>)
{
 80026a6:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 80026a8:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026aa:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 80026ac:	f042 0201 	orr.w	r2, r2, #1
 80026b0:	619a      	str	r2, [r3, #24]
 80026b2:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026b4:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 80026b8:	f002 0201 	and.w	r2, r2, #1
 80026bc:	9200      	str	r2, [sp, #0]
 80026be:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026c0:	69da      	ldr	r2, [r3, #28]
 80026c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80026c6:	61da      	str	r2, [r3, #28]
 80026c8:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026ca:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 80026cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d0:	9301      	str	r3, [sp, #4]
 80026d2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026d4:	f000 fa38 	bl	8002b48 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80026d8:	4a05      	ldr	r2, [pc, #20]	; (80026f0 <HAL_MspInit+0x4c>)
 80026da:	6853      	ldr	r3, [r2, #4]
 80026dc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80026e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026e6:	b003      	add	sp, #12
 80026e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80026ec:	40021000 	.word	0x40021000
 80026f0:	40010000 	.word	0x40010000

080026f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026f4:	b510      	push	{r4, lr}
 80026f6:	4604      	mov	r4, r0
 80026f8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026fa:	2210      	movs	r2, #16
 80026fc:	2100      	movs	r1, #0
 80026fe:	a802      	add	r0, sp, #8
 8002700:	f006 fcb9 	bl	8009076 <memset>
  if(hi2c->Instance==I2C1)
 8002704:	6822      	ldr	r2, [r4, #0]
 8002706:	4b15      	ldr	r3, [pc, #84]	; (800275c <HAL_I2C_MspInit+0x68>)
 8002708:	429a      	cmp	r2, r3
 800270a:	d124      	bne.n	8002756 <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800270c:	4c14      	ldr	r4, [pc, #80]	; (8002760 <HAL_I2C_MspInit+0x6c>)
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800270e:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002712:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002714:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002716:	f043 0308 	orr.w	r3, r3, #8
 800271a:	61a3      	str	r3, [r4, #24]
 800271c:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800271e:	4811      	ldr	r0, [pc, #68]	; (8002764 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002720:	f003 0308 	and.w	r3, r3, #8
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002728:	2312      	movs	r3, #18
 800272a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800272e:	2303      	movs	r3, #3
 8002730:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002732:	f000 faa9 	bl	8002c88 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002736:	4a0c      	ldr	r2, [pc, #48]	; (8002768 <HAL_I2C_MspInit+0x74>)
 8002738:	6853      	ldr	r3, [r2, #4]
 800273a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800273e:	f043 0302 	orr.w	r3, r3, #2
 8002742:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002744:	69e3      	ldr	r3, [r4, #28]
 8002746:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800274a:	61e3      	str	r3, [r4, #28]
 800274c:	69e3      	ldr	r3, [r4, #28]
 800274e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002752:	9301      	str	r3, [sp, #4]
 8002754:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002756:	b006      	add	sp, #24
 8002758:	bd10      	pop	{r4, pc}
 800275a:	bf00      	nop
 800275c:	40005400 	.word	0x40005400
 8002760:	40021000 	.word	0x40021000
 8002764:	40010c00 	.word	0x40010c00
 8002768:	40010000 	.word	0x40010000

0800276c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800276c:	b510      	push	{r4, lr}
 800276e:	4604      	mov	r4, r0
 8002770:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002772:	2210      	movs	r2, #16
 8002774:	2100      	movs	r1, #0
 8002776:	a802      	add	r0, sp, #8
 8002778:	f006 fc7d 	bl	8009076 <memset>
  if(hspi->Instance==SPI2)
 800277c:	6822      	ldr	r2, [r4, #0]
 800277e:	4b17      	ldr	r3, [pc, #92]	; (80027dc <HAL_SPI_MspInit+0x70>)
 8002780:	429a      	cmp	r2, r3
 8002782:	d128      	bne.n	80027d6 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002784:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 8002788:	69da      	ldr	r2, [r3, #28]
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800278a:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI2_CLK_ENABLE();
 800278c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002790:	61da      	str	r2, [r3, #28]
 8002792:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002794:	4812      	ldr	r0, [pc, #72]	; (80027e0 <HAL_SPI_MspInit+0x74>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002796:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800279a:	9200      	str	r2, [sp, #0]
 800279c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800279e:	699a      	ldr	r2, [r3, #24]
 80027a0:	f042 0208 	orr.w	r2, r2, #8
 80027a4:	619a      	str	r2, [r3, #24]
 80027a6:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a8:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ac:	f003 0308 	and.w	r3, r3, #8
 80027b0:	9301      	str	r3, [sp, #4]
 80027b2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b4:	2302      	movs	r3, #2
 80027b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027ba:	2303      	movs	r3, #3
 80027bc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027be:	f000 fa63 	bl	8002c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027c6:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c8:	4805      	ldr	r0, [pc, #20]	; (80027e0 <HAL_SPI_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ca:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ce:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d2:	f000 fa59 	bl	8002c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80027d6:	b006      	add	sp, #24
 80027d8:	bd10      	pop	{r4, pc}
 80027da:	bf00      	nop
 80027dc:	40003800 	.word	0x40003800
 80027e0:	40010c00 	.word	0x40010c00

080027e4 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM2)
 80027e4:	6803      	ldr	r3, [r0, #0]
{
 80027e6:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM2)
 80027e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ec:	d10a      	bne.n	8002804 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027ee:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80027f2:	69da      	ldr	r2, [r3, #28]
 80027f4:	f042 0201 	orr.w	r2, r2, #1
 80027f8:	61da      	str	r2, [r3, #28]
 80027fa:	69db      	ldr	r3, [r3, #28]
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	9301      	str	r3, [sp, #4]
 8002802:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002804:	b002      	add	sp, #8
 8002806:	4770      	bx	lr

08002808 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002808:	b510      	push	{r4, lr}
 800280a:	4604      	mov	r4, r0
 800280c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800280e:	2210      	movs	r2, #16
 8002810:	2100      	movs	r1, #0
 8002812:	a802      	add	r0, sp, #8
 8002814:	f006 fc2f 	bl	8009076 <memset>
  if(htim->Instance==TIM2)
 8002818:	6823      	ldr	r3, [r4, #0]
 800281a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800281e:	d113      	bne.n	8002848 <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002820:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002824:	699a      	ldr	r2, [r3, #24]
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8002826:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002828:	f042 0204 	orr.w	r2, r2, #4
 800282c:	619a      	str	r2, [r3, #24]
 800282e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002830:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002832:	f003 0304 	and.w	r3, r3, #4
 8002836:	9301      	str	r3, [sp, #4]
 8002838:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283a:	2302      	movs	r3, #2
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800283c:	4803      	ldr	r0, [pc, #12]	; (800284c <HAL_TIM_MspPostInit+0x44>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002842:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8002844:	f000 fa20 	bl	8002c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002848:	b006      	add	sp, #24
 800284a:	bd10      	pop	{r4, pc}
 800284c:	40010800 	.word	0x40010800

08002850 <HAL_UART_MspInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002850:	2210      	movs	r2, #16
{
 8002852:	b510      	push	{r4, lr}
 8002854:	4604      	mov	r4, r0
 8002856:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002858:	eb0d 0002 	add.w	r0, sp, r2
 800285c:	2100      	movs	r1, #0
 800285e:	f006 fc0a 	bl	8009076 <memset>
  if(huart->Instance==USART1)
 8002862:	6823      	ldr	r3, [r4, #0]
 8002864:	4a30      	ldr	r2, [pc, #192]	; (8002928 <HAL_UART_MspInit+0xd8>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d131      	bne.n	80028ce <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800286a:	4b30      	ldr	r3, [pc, #192]	; (800292c <HAL_UART_MspInit+0xdc>)
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286c:	f44f 7000 	mov.w	r0, #512	; 0x200
    __HAL_RCC_USART1_CLK_ENABLE();
 8002870:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002872:	a904      	add	r1, sp, #16
    __HAL_RCC_USART1_CLK_ENABLE();
 8002874:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002878:	619a      	str	r2, [r3, #24]
 800287a:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800287c:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 800287e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002882:	9200      	str	r2, [sp, #0]
 8002884:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002886:	699a      	ldr	r2, [r3, #24]
 8002888:	f042 0204 	orr.w	r2, r2, #4
 800288c:	619a      	str	r2, [r3, #24]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	9301      	str	r3, [sp, #4]
 8002896:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002898:	2302      	movs	r3, #2
 800289a:	e9cd 0304 	strd	r0, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800289e:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a0:	4823      	ldr	r0, [pc, #140]	; (8002930 <HAL_UART_MspInit+0xe0>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028a2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a4:	f000 f9f0 	bl	8002c88 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ac:	a904      	add	r1, sp, #16
 80028ae:	4820      	ldr	r0, [pc, #128]	; (8002930 <HAL_UART_MspInit+0xe0>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028b0:	e9cd 3404 	strd	r3, r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b4:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b6:	f000 f9e7 	bl	8002c88 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80028ba:	2025      	movs	r0, #37	; 0x25
 80028bc:	4622      	mov	r2, r4
 80028be:	2105      	movs	r1, #5
 80028c0:	f000 f942 	bl	8002b48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028c4:	2025      	movs	r0, #37	; 0x25
 80028c6:	f000 f973 	bl	8002bb0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80028ca:	b008      	add	sp, #32
 80028cc:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 80028ce:	4a19      	ldr	r2, [pc, #100]	; (8002934 <HAL_UART_MspInit+0xe4>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d1fa      	bne.n	80028ca <HAL_UART_MspInit+0x7a>
    __HAL_RCC_USART3_CLK_ENABLE();
 80028d4:	4b15      	ldr	r3, [pc, #84]	; (800292c <HAL_UART_MspInit+0xdc>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028d6:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 80028d8:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028da:	4817      	ldr	r0, [pc, #92]	; (8002938 <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80028dc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80028e0:	61da      	str	r2, [r3, #28]
 80028e2:	69da      	ldr	r2, [r3, #28]
 80028e4:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80028e8:	9202      	str	r2, [sp, #8]
 80028ea:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ec:	699a      	ldr	r2, [r3, #24]
 80028ee:	f042 0208 	orr.w	r2, r2, #8
 80028f2:	619a      	str	r2, [r3, #24]
 80028f4:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	9303      	str	r3, [sp, #12]
 8002900:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002902:	2302      	movs	r3, #2
 8002904:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002908:	2303      	movs	r3, #3
 800290a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800290c:	f000 f9bc 	bl	8002c88 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002910:	2300      	movs	r3, #0
 8002912:	f44f 6100 	mov.w	r1, #2048	; 0x800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002916:	4808      	ldr	r0, [pc, #32]	; (8002938 <HAL_UART_MspInit+0xe8>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002918:	e9cd 1304 	strd	r1, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800291c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002920:	f000 f9b2 	bl	8002c88 <HAL_GPIO_Init>
}
 8002924:	e7d1      	b.n	80028ca <HAL_UART_MspInit+0x7a>
 8002926:	bf00      	nop
 8002928:	40013800 	.word	0x40013800
 800292c:	40021000 	.word	0x40021000
 8002930:	40010800 	.word	0x40010800
 8002934:	40004800 	.word	0x40004800
 8002938:	40010c00 	.word	0x40010c00

0800293c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800293c:	4770      	bx	lr

0800293e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800293e:	e7fe      	b.n	800293e <HardFault_Handler>

08002940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002940:	e7fe      	b.n	8002940 <MemManage_Handler>

08002942 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002942:	e7fe      	b.n	8002942 <BusFault_Handler>

08002944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002944:	e7fe      	b.n	8002944 <UsageFault_Handler>

08002946 <DebugMon_Handler>:
 8002946:	4770      	bx	lr

08002948 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002948:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800294a:	f000 f8c7 	bl	8002adc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800294e:	f005 fe51 	bl	80085f4 <xTaskGetSchedulerState>
 8002952:	2801      	cmp	r0, #1
 8002954:	d003      	beq.n	800295e <SysTick_Handler+0x16>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002956:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  xPortSysTickHandler();
 800295a:	f006 b9a3 	b.w	8008ca4 <xPortSysTickHandler>
}
 800295e:	bd08      	pop	{r3, pc}

08002960 <USART1_IRQHandler>:
{
  /* USER CODE BEGIN USART1_IRQn 0 */
	unsigned char tmp;


	if((USART1->SR & USART_SR_RXNE)!=0)
 8002960:	4b0d      	ldr	r3, [pc, #52]	; (8002998 <USART1_IRQHandler+0x38>)
{
 8002962:	b507      	push	{r0, r1, r2, lr}
	if((USART1->SR & USART_SR_RXNE)!=0)
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	0692      	lsls	r2, r2, #26
 8002968:	d50f      	bpl.n	800298a <USART1_IRQHandler+0x2a>
	{
		tmp = USART1->DR;                   //прочитать принятый байт
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	a902      	add	r1, sp, #8
 800296e:	f801 3d01 	strb.w	r3, [r1, #-1]!
		osMessageQueuePut(GPS_UARTQueueHandle, &tmp, 0U, 0U);
 8002972:	2300      	movs	r3, #0
 8002974:	4809      	ldr	r0, [pc, #36]	; (800299c <USART1_IRQHandler+0x3c>)
 8002976:	461a      	mov	r2, r3
 8002978:	6800      	ldr	r0, [r0, #0]
 800297a:	f004 fcf5 	bl	8007368 <osMessageQueuePut>
		HAL_UART_Receive_IT(&huart1, tmp, (uint8_t)1);
 800297e:	2201      	movs	r2, #1
 8002980:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8002984:	4806      	ldr	r0, [pc, #24]	; (80029a0 <USART1_IRQHandler+0x40>)
 8002986:	f001 fef2 	bl	800476e <HAL_UART_Receive_IT>
	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800298a:	4805      	ldr	r0, [pc, #20]	; (80029a0 <USART1_IRQHandler+0x40>)
 800298c:	f001 ff54 	bl	8004838 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002990:	b003      	add	sp, #12
 8002992:	f85d fb04 	ldr.w	pc, [sp], #4
 8002996:	bf00      	nop
 8002998:	40013800 	.word	0x40013800
 800299c:	20000214 	.word	0x20000214
 80029a0:	200003ac 	.word	0x200003ac

080029a4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80029a4:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80029a6:	4b0a      	ldr	r3, [pc, #40]	; (80029d0 <_sbrk+0x2c>)
{
 80029a8:	4602      	mov	r2, r0
	if (heap_end == 0)
 80029aa:	6819      	ldr	r1, [r3, #0]
 80029ac:	b909      	cbnz	r1, 80029b2 <_sbrk+0xe>
		heap_end = &end;
 80029ae:	4909      	ldr	r1, [pc, #36]	; (80029d4 <_sbrk+0x30>)
 80029b0:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80029b2:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 80029b4:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80029b6:	4402      	add	r2, r0
 80029b8:	428a      	cmp	r2, r1
 80029ba:	d906      	bls.n	80029ca <_sbrk+0x26>
	{
		errno = ENOMEM;
 80029bc:	f006 fb16 	bl	8008fec <__errno>
 80029c0:	230c      	movs	r3, #12
 80029c2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80029c4:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 80029c8:	bd08      	pop	{r3, pc}
	heap_end += incr;
 80029ca:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 80029cc:	e7fc      	b.n	80029c8 <_sbrk+0x24>
 80029ce:	bf00      	nop
 80029d0:	200008a0 	.word	0x200008a0
 80029d4:	20003e60 	.word	0x20003e60

080029d8 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80029d8:	4b0f      	ldr	r3, [pc, #60]	; (8002a18 <SystemInit+0x40>)
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	f042 0201 	orr.w	r2, r2, #1
 80029e0:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80029e2:	6859      	ldr	r1, [r3, #4]
 80029e4:	4a0d      	ldr	r2, [pc, #52]	; (8002a1c <SystemInit+0x44>)
 80029e6:	400a      	ands	r2, r1
 80029e8:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80029f0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80029f4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029fc:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002a04:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002a06:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002a0a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002a0c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a10:	4b03      	ldr	r3, [pc, #12]	; (8002a20 <SystemInit+0x48>)
 8002a12:	609a      	str	r2, [r3, #8]
#endif 
}
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	f8ff0000 	.word	0xf8ff0000
 8002a20:	e000ed00 	.word	0xe000ed00

08002a24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002a24:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002a26:	e003      	b.n	8002a30 <LoopCopyDataInit>

08002a28 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002a28:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002a2a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002a2c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002a2e:	3104      	adds	r1, #4

08002a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002a30:	480a      	ldr	r0, [pc, #40]	; (8002a5c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002a32:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002a34:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002a36:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002a38:	d3f6      	bcc.n	8002a28 <CopyDataInit>
  ldr r2, =_sbss
 8002a3a:	4a0a      	ldr	r2, [pc, #40]	; (8002a64 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002a3c:	e002      	b.n	8002a44 <LoopFillZerobss>

08002a3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002a3e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002a40:	f842 3b04 	str.w	r3, [r2], #4

08002a44 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002a44:	4b08      	ldr	r3, [pc, #32]	; (8002a68 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002a46:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002a48:	d3f9      	bcc.n	8002a3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a4a:	f7ff ffc5 	bl	80029d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a4e:	f006 fad3 	bl	8008ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a52:	f7fe ff35 	bl	80018c0 <main>
  bx lr
 8002a56:	4770      	bx	lr
  ldr r3, =_sidata
 8002a58:	0800c10c 	.word	0x0800c10c
  ldr r0, =_sdata
 8002a5c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002a60:	200001f4 	.word	0x200001f4
  ldr r2, =_sbss
 8002a64:	200001f4 	.word	0x200001f4
  ldr r3, = _ebss
 8002a68:	20003e60 	.word	0x20003e60

08002a6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a6c:	e7fe      	b.n	8002a6c <ADC1_2_IRQHandler>
	...

08002a70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a70:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a72:	4b0e      	ldr	r3, [pc, #56]	; (8002aac <HAL_InitTick+0x3c>)
{
 8002a74:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a76:	7818      	ldrb	r0, [r3, #0]
 8002a78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a7c:	fbb3 f3f0 	udiv	r3, r3, r0
 8002a80:	4a0b      	ldr	r2, [pc, #44]	; (8002ab0 <HAL_InitTick+0x40>)
 8002a82:	6810      	ldr	r0, [r2, #0]
 8002a84:	fbb0 f0f3 	udiv	r0, r0, r3
 8002a88:	f000 f8a0 	bl	8002bcc <HAL_SYSTICK_Config>
 8002a8c:	4604      	mov	r4, r0
 8002a8e:	b958      	cbnz	r0, 8002aa8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a90:	2d0f      	cmp	r5, #15
 8002a92:	d809      	bhi.n	8002aa8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a94:	4602      	mov	r2, r0
 8002a96:	4629      	mov	r1, r5
 8002a98:	f04f 30ff 	mov.w	r0, #4294967295
 8002a9c:	f000 f854 	bl	8002b48 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002aa0:	4620      	mov	r0, r4
 8002aa2:	4b04      	ldr	r3, [pc, #16]	; (8002ab4 <HAL_InitTick+0x44>)
 8002aa4:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002aa6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002aa8:	2001      	movs	r0, #1
 8002aaa:	e7fc      	b.n	8002aa6 <HAL_InitTick+0x36>
 8002aac:	20000014 	.word	0x20000014
 8002ab0:	20000010 	.word	0x20000010
 8002ab4:	20000018 	.word	0x20000018

08002ab8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ab8:	4a07      	ldr	r2, [pc, #28]	; (8002ad8 <HAL_Init+0x20>)
{
 8002aba:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002abc:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002abe:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ac0:	f043 0310 	orr.w	r3, r3, #16
 8002ac4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ac6:	f000 f82d 	bl	8002b24 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002aca:	200f      	movs	r0, #15
 8002acc:	f7ff ffd0 	bl	8002a70 <HAL_InitTick>
  HAL_MspInit();
 8002ad0:	f7ff fde8 	bl	80026a4 <HAL_MspInit>
}
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	bd08      	pop	{r3, pc}
 8002ad8:	40022000 	.word	0x40022000

08002adc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002adc:	4a03      	ldr	r2, [pc, #12]	; (8002aec <HAL_IncTick+0x10>)
 8002ade:	4b04      	ldr	r3, [pc, #16]	; (8002af0 <HAL_IncTick+0x14>)
 8002ae0:	6811      	ldr	r1, [r2, #0]
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	440b      	add	r3, r1
 8002ae6:	6013      	str	r3, [r2, #0]
}
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	20003e18 	.word	0x20003e18
 8002af0:	20000014 	.word	0x20000014

08002af4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002af4:	4b01      	ldr	r3, [pc, #4]	; (8002afc <HAL_GetTick+0x8>)
 8002af6:	6818      	ldr	r0, [r3, #0]
}
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	20003e18 	.word	0x20003e18

08002b00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b00:	b538      	push	{r3, r4, r5, lr}
 8002b02:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002b04:	f7ff fff6 	bl	8002af4 <HAL_GetTick>
 8002b08:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b0a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002b0c:	bf1e      	ittt	ne
 8002b0e:	4b04      	ldrne	r3, [pc, #16]	; (8002b20 <HAL_Delay+0x20>)
 8002b10:	781b      	ldrbne	r3, [r3, #0]
 8002b12:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b14:	f7ff ffee 	bl	8002af4 <HAL_GetTick>
 8002b18:	1b40      	subs	r0, r0, r5
 8002b1a:	42a0      	cmp	r0, r4
 8002b1c:	d3fa      	bcc.n	8002b14 <HAL_Delay+0x14>
  {
  }
}
 8002b1e:	bd38      	pop	{r3, r4, r5, pc}
 8002b20:	20000014 	.word	0x20000014

08002b24 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b24:	4a07      	ldr	r2, [pc, #28]	; (8002b44 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b26:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b28:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b2a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b2e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b32:	041b      	lsls	r3, r3, #16
 8002b34:	0c1b      	lsrs	r3, r3, #16
 8002b36:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8002b3e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002b40:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002b42:	4770      	bx	lr
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b48:	4b17      	ldr	r3, [pc, #92]	; (8002ba8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b4a:	b570      	push	{r4, r5, r6, lr}
 8002b4c:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b4e:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b52:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b56:	f1c4 0507 	rsb	r5, r4, #7
 8002b5a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b5c:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b60:	bf28      	it	cs
 8002b62:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b64:	2b06      	cmp	r3, #6
 8002b66:	bf98      	it	ls
 8002b68:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b6a:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b6e:	bf88      	it	hi
 8002b70:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b72:	ea21 0303 	bic.w	r3, r1, r3
 8002b76:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b78:	fa06 f404 	lsl.w	r4, r6, r4
 8002b7c:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8002b80:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b82:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b86:	bfa8      	it	ge
 8002b88:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8002b8c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b90:	bfb8      	it	lt
 8002b92:	4a06      	ldrlt	r2, [pc, #24]	; (8002bac <HAL_NVIC_SetPriority+0x64>)
 8002b94:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b96:	bfab      	itete	ge
 8002b98:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b9c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba0:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba4:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002ba6:	bd70      	pop	{r4, r5, r6, pc}
 8002ba8:	e000ed00 	.word	0xe000ed00
 8002bac:	e000ed14 	.word	0xe000ed14

08002bb0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002bb0:	2800      	cmp	r0, #0
 8002bb2:	db08      	blt.n	8002bc6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	0942      	lsrs	r2, r0, #5
 8002bb8:	f000 001f 	and.w	r0, r0, #31
 8002bbc:	fa03 f000 	lsl.w	r0, r3, r0
 8002bc0:	4b01      	ldr	r3, [pc, #4]	; (8002bc8 <HAL_NVIC_EnableIRQ+0x18>)
 8002bc2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002bc6:	4770      	bx	lr
 8002bc8:	e000e100 	.word	0xe000e100

08002bcc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bcc:	3801      	subs	r0, #1
 8002bce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002bd2:	d20a      	bcs.n	8002bea <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd4:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bd6:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd8:	4a06      	ldr	r2, [pc, #24]	; (8002bf4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bda:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bdc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002be0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002be2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002be4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002bea:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	e000e010 	.word	0xe000e010
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002bf8:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8002bfc:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d003      	beq.n	8002c0a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c02:	2304      	movs	r3, #4
 8002c04:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8002c06:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8002c08:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c0a:	6803      	ldr	r3, [r0, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	f022 020e 	bic.w	r2, r2, #14
 8002c12:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	f022 0201 	bic.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002c1c:	4a18      	ldr	r2, [pc, #96]	; (8002c80 <HAL_DMA_Abort_IT+0x88>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d01f      	beq.n	8002c62 <HAL_DMA_Abort_IT+0x6a>
 8002c22:	3214      	adds	r2, #20
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d01e      	beq.n	8002c66 <HAL_DMA_Abort_IT+0x6e>
 8002c28:	3214      	adds	r2, #20
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d01d      	beq.n	8002c6a <HAL_DMA_Abort_IT+0x72>
 8002c2e:	3214      	adds	r2, #20
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d01d      	beq.n	8002c70 <HAL_DMA_Abort_IT+0x78>
 8002c34:	3214      	adds	r2, #20
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d01d      	beq.n	8002c76 <HAL_DMA_Abort_IT+0x7e>
 8002c3a:	3214      	adds	r2, #20
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	bf0c      	ite	eq
 8002c40:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8002c44:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8002c48:	4a0e      	ldr	r2, [pc, #56]	; (8002c84 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 8002c4a:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002c4c:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 8002c54:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8002c56:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002c5a:	b17b      	cbz	r3, 8002c7c <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 8002c5c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002c5e:	4620      	mov	r0, r4
 8002c60:	e7d2      	b.n	8002c08 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002c62:	2301      	movs	r3, #1
 8002c64:	e7f0      	b.n	8002c48 <HAL_DMA_Abort_IT+0x50>
 8002c66:	2310      	movs	r3, #16
 8002c68:	e7ee      	b.n	8002c48 <HAL_DMA_Abort_IT+0x50>
 8002c6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c6e:	e7eb      	b.n	8002c48 <HAL_DMA_Abort_IT+0x50>
 8002c70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c74:	e7e8      	b.n	8002c48 <HAL_DMA_Abort_IT+0x50>
 8002c76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c7a:	e7e5      	b.n	8002c48 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	e7c3      	b.n	8002c08 <HAL_DMA_Abort_IT+0x10>
 8002c80:	40020008 	.word	0x40020008
 8002c84:	40020000 	.word	0x40020000

08002c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c8c:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8002c8e:	4626      	mov	r6, r4
 8002c90:	4b65      	ldr	r3, [pc, #404]	; (8002e28 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c92:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8002e38 <HAL_GPIO_Init+0x1b0>
 8002c96:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8002e3c <HAL_GPIO_Init+0x1b4>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c9a:	680a      	ldr	r2, [r1, #0]
 8002c9c:	fa32 f506 	lsrs.w	r5, r2, r6
 8002ca0:	d102      	bne.n	8002ca8 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8002ca2:	b003      	add	sp, #12
 8002ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8002ca8:	f04f 0801 	mov.w	r8, #1
 8002cac:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cb0:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8002cb4:	4590      	cmp	r8, r2
 8002cb6:	d17e      	bne.n	8002db6 <HAL_GPIO_Init+0x12e>
      switch (GPIO_Init->Mode)
 8002cb8:	684d      	ldr	r5, [r1, #4]
 8002cba:	2d12      	cmp	r5, #18
 8002cbc:	f000 80a9 	beq.w	8002e12 <HAL_GPIO_Init+0x18a>
 8002cc0:	f200 8082 	bhi.w	8002dc8 <HAL_GPIO_Init+0x140>
 8002cc4:	2d02      	cmp	r5, #2
 8002cc6:	f000 80a1 	beq.w	8002e0c <HAL_GPIO_Init+0x184>
 8002cca:	d876      	bhi.n	8002dba <HAL_GPIO_Init+0x132>
 8002ccc:	2d00      	cmp	r5, #0
 8002cce:	f000 8088 	beq.w	8002de2 <HAL_GPIO_Init+0x15a>
 8002cd2:	2d01      	cmp	r5, #1
 8002cd4:	f000 8098 	beq.w	8002e08 <HAL_GPIO_Init+0x180>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002cd8:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002cdc:	2aff      	cmp	r2, #255	; 0xff
 8002cde:	bf93      	iteet	ls
 8002ce0:	4682      	movls	sl, r0
 8002ce2:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8002ce6:	3d08      	subhi	r5, #8
 8002ce8:	f8d0 b000 	ldrls.w	fp, [r0]
 8002cec:	bf92      	itee	ls
 8002cee:	00b5      	lslls	r5, r6, #2
 8002cf0:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8002cf4:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002cf6:	fa09 f805 	lsl.w	r8, r9, r5
 8002cfa:	ea2b 0808 	bic.w	r8, fp, r8
 8002cfe:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d02:	bf88      	it	hi
 8002d04:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d08:	ea48 0505 	orr.w	r5, r8, r5
 8002d0c:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d10:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8002d14:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8002d18:	d04d      	beq.n	8002db6 <HAL_GPIO_Init+0x12e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d1a:	4f44      	ldr	r7, [pc, #272]	; (8002e2c <HAL_GPIO_Init+0x1a4>)
 8002d1c:	f026 0803 	bic.w	r8, r6, #3
 8002d20:	69bd      	ldr	r5, [r7, #24]
 8002d22:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8002d26:	f045 0501 	orr.w	r5, r5, #1
 8002d2a:	61bd      	str	r5, [r7, #24]
 8002d2c:	69bd      	ldr	r5, [r7, #24]
 8002d2e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8002d32:	f005 0501 	and.w	r5, r5, #1
 8002d36:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d38:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d3c:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d3e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8002d42:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d46:	fa09 f90b 	lsl.w	r9, r9, fp
 8002d4a:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d4e:	4d38      	ldr	r5, [pc, #224]	; (8002e30 <HAL_GPIO_Init+0x1a8>)
 8002d50:	42a8      	cmp	r0, r5
 8002d52:	d063      	beq.n	8002e1c <HAL_GPIO_Init+0x194>
 8002d54:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002d58:	42a8      	cmp	r0, r5
 8002d5a:	d061      	beq.n	8002e20 <HAL_GPIO_Init+0x198>
 8002d5c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002d60:	42a8      	cmp	r0, r5
 8002d62:	d05f      	beq.n	8002e24 <HAL_GPIO_Init+0x19c>
 8002d64:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002d68:	42a8      	cmp	r0, r5
 8002d6a:	bf0c      	ite	eq
 8002d6c:	2503      	moveq	r5, #3
 8002d6e:	2504      	movne	r5, #4
 8002d70:	fa05 f50b 	lsl.w	r5, r5, fp
 8002d74:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8002d78:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8002d7c:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d7e:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002d82:	bf14      	ite	ne
 8002d84:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d86:	4395      	biceq	r5, r2
 8002d88:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8002d8a:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d8c:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002d90:	bf14      	ite	ne
 8002d92:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d94:	4395      	biceq	r5, r2
 8002d96:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d98:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d9a:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d9e:	bf14      	ite	ne
 8002da0:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002da2:	4395      	biceq	r5, r2
 8002da4:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8002da6:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002da8:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002dac:	bf14      	ite	ne
 8002dae:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002db0:	ea25 0202 	biceq.w	r2, r5, r2
 8002db4:	60da      	str	r2, [r3, #12]
	position++;
 8002db6:	3601      	adds	r6, #1
 8002db8:	e76f      	b.n	8002c9a <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8002dba:	2d03      	cmp	r5, #3
 8002dbc:	d022      	beq.n	8002e04 <HAL_GPIO_Init+0x17c>
 8002dbe:	2d11      	cmp	r5, #17
 8002dc0:	d18a      	bne.n	8002cd8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002dc2:	68cc      	ldr	r4, [r1, #12]
 8002dc4:	3404      	adds	r4, #4
          break;
 8002dc6:	e787      	b.n	8002cd8 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8002dc8:	4f1a      	ldr	r7, [pc, #104]	; (8002e34 <HAL_GPIO_Init+0x1ac>)
 8002dca:	42bd      	cmp	r5, r7
 8002dcc:	d009      	beq.n	8002de2 <HAL_GPIO_Init+0x15a>
 8002dce:	d812      	bhi.n	8002df6 <HAL_GPIO_Init+0x16e>
 8002dd0:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8002e40 <HAL_GPIO_Init+0x1b8>
 8002dd4:	454d      	cmp	r5, r9
 8002dd6:	d004      	beq.n	8002de2 <HAL_GPIO_Init+0x15a>
 8002dd8:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8002ddc:	454d      	cmp	r5, r9
 8002dde:	f47f af7b 	bne.w	8002cd8 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002de2:	688c      	ldr	r4, [r1, #8]
 8002de4:	b1c4      	cbz	r4, 8002e18 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002de6:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8002de8:	bf0c      	ite	eq
 8002dea:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8002dee:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002df2:	2408      	movs	r4, #8
 8002df4:	e770      	b.n	8002cd8 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8002df6:	4565      	cmp	r5, ip
 8002df8:	d0f3      	beq.n	8002de2 <HAL_GPIO_Init+0x15a>
 8002dfa:	4575      	cmp	r5, lr
 8002dfc:	d0f1      	beq.n	8002de2 <HAL_GPIO_Init+0x15a>
 8002dfe:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8002e44 <HAL_GPIO_Init+0x1bc>
 8002e02:	e7eb      	b.n	8002ddc <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e04:	2400      	movs	r4, #0
 8002e06:	e767      	b.n	8002cd8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e08:	68cc      	ldr	r4, [r1, #12]
          break;
 8002e0a:	e765      	b.n	8002cd8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e0c:	68cc      	ldr	r4, [r1, #12]
 8002e0e:	3408      	adds	r4, #8
          break;
 8002e10:	e762      	b.n	8002cd8 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e12:	68cc      	ldr	r4, [r1, #12]
 8002e14:	340c      	adds	r4, #12
          break;
 8002e16:	e75f      	b.n	8002cd8 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e18:	2404      	movs	r4, #4
 8002e1a:	e75d      	b.n	8002cd8 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e1c:	2500      	movs	r5, #0
 8002e1e:	e7a7      	b.n	8002d70 <HAL_GPIO_Init+0xe8>
 8002e20:	2501      	movs	r5, #1
 8002e22:	e7a5      	b.n	8002d70 <HAL_GPIO_Init+0xe8>
 8002e24:	2502      	movs	r5, #2
 8002e26:	e7a3      	b.n	8002d70 <HAL_GPIO_Init+0xe8>
 8002e28:	40010400 	.word	0x40010400
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	40010800 	.word	0x40010800
 8002e34:	10210000 	.word	0x10210000
 8002e38:	10310000 	.word	0x10310000
 8002e3c:	10320000 	.word	0x10320000
 8002e40:	10110000 	.word	0x10110000
 8002e44:	10220000 	.word	0x10220000

08002e48 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e48:	6883      	ldr	r3, [r0, #8]
 8002e4a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002e4c:	bf14      	ite	ne
 8002e4e:	2001      	movne	r0, #1
 8002e50:	2000      	moveq	r0, #0
 8002e52:	4770      	bx	lr

08002e54 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e54:	b10a      	cbz	r2, 8002e5a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e56:	6101      	str	r1, [r0, #16]
  }
}
 8002e58:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e5a:	0409      	lsls	r1, r1, #16
 8002e5c:	e7fb      	b.n	8002e56 <HAL_GPIO_WritePin+0x2>

08002e5e <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e5e:	6801      	ldr	r1, [r0, #0]
 8002e60:	2200      	movs	r2, #0
 8002e62:	694b      	ldr	r3, [r1, #20]
 8002e64:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8002e68:	d010      	beq.n	8002e8c <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e6a:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8002e6e:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e70:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e72:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e74:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e78:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e7c:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e7e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e82:	f043 0304 	orr.w	r3, r3, #4
 8002e86:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8002e88:	2001      	movs	r0, #1
 8002e8a:	4770      	bx	lr
  }
  return HAL_OK;
 8002e8c:	4618      	mov	r0, r3
}
 8002e8e:	4770      	bx	lr

08002e90 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8002e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e94:	4604      	mov	r4, r0
 8002e96:	4616      	mov	r6, r2
 8002e98:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e9a:	b28f      	uxth	r7, r1
 8002e9c:	6825      	ldr	r5, [r4, #0]
 8002e9e:	6968      	ldr	r0, [r5, #20]
 8002ea0:	ea37 0000 	bics.w	r0, r7, r0
 8002ea4:	d017      	beq.n	8002ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ea6:	696b      	ldr	r3, [r5, #20]
 8002ea8:	055a      	lsls	r2, r3, #21
 8002eaa:	d516      	bpl.n	8002eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eac:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8002eae:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eb4:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eb6:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8002eba:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ec0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ec8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002eca:	f042 0204 	orr.w	r2, r2, #4
        return HAL_ERROR;
 8002ece:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ed0:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002ed2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002eda:	1c73      	adds	r3, r6, #1
 8002edc:	d0df      	beq.n	8002e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ede:	f7ff fe09 	bl	8002af4 <HAL_GetTick>
 8002ee2:	eba0 0008 	sub.w	r0, r0, r8
 8002ee6:	42b0      	cmp	r0, r6
 8002ee8:	d801      	bhi.n	8002eee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>
 8002eea:	2e00      	cmp	r6, #0
 8002eec:	d1d6      	bne.n	8002e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002eee:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ef0:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ef2:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ef4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ef8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002efc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002efe:	f042 0220 	orr.w	r2, r2, #32
 8002f02:	e7e4      	b.n	8002ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>

08002f04 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8002f04:	b570      	push	{r4, r5, r6, lr}
 8002f06:	4604      	mov	r4, r0
 8002f08:	460d      	mov	r5, r1
 8002f0a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f0c:	6823      	ldr	r3, [r4, #0]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	075b      	lsls	r3, r3, #29
 8002f12:	d501      	bpl.n	8002f18 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8002f14:	2000      	movs	r0, #0
}
 8002f16:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f18:	4620      	mov	r0, r4
 8002f1a:	f7ff ffa0 	bl	8002e5e <I2C_IsAcknowledgeFailed>
 8002f1e:	b9a8      	cbnz	r0, 8002f4c <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8002f20:	1c6a      	adds	r2, r5, #1
 8002f22:	d0f3      	beq.n	8002f0c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f24:	f7ff fde6 	bl	8002af4 <HAL_GetTick>
 8002f28:	1b80      	subs	r0, r0, r6
 8002f2a:	42a8      	cmp	r0, r5
 8002f2c:	d801      	bhi.n	8002f32 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8002f2e:	2d00      	cmp	r5, #0
 8002f30:	d1ec      	bne.n	8002f0c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f32:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f34:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f36:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f38:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f3c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f40:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002f42:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f46:	f042 0220 	orr.w	r2, r2, #32
 8002f4a:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002f4c:	2001      	movs	r0, #1
 8002f4e:	e7e2      	b.n	8002f16 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

08002f50 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8002f50:	b570      	push	{r4, r5, r6, lr}
 8002f52:	4604      	mov	r4, r0
 8002f54:	460d      	mov	r5, r1
 8002f56:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f58:	6820      	ldr	r0, [r4, #0]
 8002f5a:	6943      	ldr	r3, [r0, #20]
 8002f5c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8002f60:	d001      	beq.n	8002f66 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8002f62:	2000      	movs	r0, #0
 8002f64:	e010      	b.n	8002f88 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f66:	6942      	ldr	r2, [r0, #20]
 8002f68:	06d2      	lsls	r2, r2, #27
 8002f6a:	d50e      	bpl.n	8002f8a <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f6c:	f06f 0210 	mvn.w	r2, #16
 8002f70:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f72:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f74:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f76:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f7a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002f7e:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002f80:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f82:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002f84:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002f88:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f8a:	f7ff fdb3 	bl	8002af4 <HAL_GetTick>
 8002f8e:	1b80      	subs	r0, r0, r6
 8002f90:	42a8      	cmp	r0, r5
 8002f92:	d801      	bhi.n	8002f98 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8002f94:	2d00      	cmp	r5, #0
 8002f96:	d1df      	bne.n	8002f58 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f98:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f9a:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f9c:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f9e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fa2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fa6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002fa8:	f042 0220 	orr.w	r2, r2, #32
 8002fac:	e7e8      	b.n	8002f80 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08002fae <I2C_WaitOnFlagUntilTimeout>:
{
 8002fae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fb2:	4604      	mov	r4, r0
 8002fb4:	4690      	mov	r8, r2
 8002fb6:	461f      	mov	r7, r3
 8002fb8:	9e08      	ldr	r6, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fba:	ea4f 4911 	mov.w	r9, r1, lsr #16
 8002fbe:	b28d      	uxth	r5, r1
 8002fc0:	6821      	ldr	r1, [r4, #0]
 8002fc2:	f1b9 0f01 	cmp.w	r9, #1
 8002fc6:	bf0c      	ite	eq
 8002fc8:	694b      	ldreq	r3, [r1, #20]
 8002fca:	698b      	ldrne	r3, [r1, #24]
 8002fcc:	ea35 0303 	bics.w	r3, r5, r3
 8002fd0:	bf0c      	ite	eq
 8002fd2:	2301      	moveq	r3, #1
 8002fd4:	2300      	movne	r3, #0
 8002fd6:	4598      	cmp	r8, r3
 8002fd8:	d001      	beq.n	8002fde <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8002fda:	2000      	movs	r0, #0
 8002fdc:	e016      	b.n	800300c <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 8002fde:	1c7b      	adds	r3, r7, #1
 8002fe0:	d0ef      	beq.n	8002fc2 <I2C_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe2:	f7ff fd87 	bl	8002af4 <HAL_GetTick>
 8002fe6:	1b80      	subs	r0, r0, r6
 8002fe8:	42b8      	cmp	r0, r7
 8002fea:	d801      	bhi.n	8002ff0 <I2C_WaitOnFlagUntilTimeout+0x42>
 8002fec:	2f00      	cmp	r7, #0
 8002fee:	d1e7      	bne.n	8002fc0 <I2C_WaitOnFlagUntilTimeout+0x12>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ff0:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ff2:	2220      	movs	r2, #32
        __HAL_UNLOCK(hi2c);
 8002ff4:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ff6:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ff8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ffc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003000:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003002:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003006:	f042 0220 	orr.w	r2, r2, #32
 800300a:	6422      	str	r2, [r4, #64]	; 0x40
}
 800300c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003010 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8003010:	b570      	push	{r4, r5, r6, lr}
 8003012:	4604      	mov	r4, r0
 8003014:	460d      	mov	r5, r1
 8003016:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003018:	6823      	ldr	r3, [r4, #0]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	061b      	lsls	r3, r3, #24
 800301e:	d501      	bpl.n	8003024 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8003020:	2000      	movs	r0, #0
}
 8003022:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003024:	4620      	mov	r0, r4
 8003026:	f7ff ff1a 	bl	8002e5e <I2C_IsAcknowledgeFailed>
 800302a:	b9a8      	cbnz	r0, 8003058 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 800302c:	1c6a      	adds	r2, r5, #1
 800302e:	d0f3      	beq.n	8003018 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003030:	f7ff fd60 	bl	8002af4 <HAL_GetTick>
 8003034:	1b80      	subs	r0, r0, r6
 8003036:	42a8      	cmp	r0, r5
 8003038:	d801      	bhi.n	800303e <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800303a:	2d00      	cmp	r5, #0
 800303c:	d1ec      	bne.n	8003018 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800303e:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003040:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003042:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003044:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003048:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800304c:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800304e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003052:	f042 0220 	orr.w	r2, r2, #32
 8003056:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003058:	2001      	movs	r0, #1
 800305a:	e7e2      	b.n	8003022 <I2C_WaitOnTXEFlagUntilTimeout+0x12>

0800305c <I2C_RequestMemoryWrite>:
{
 800305c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8003060:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003062:	6802      	ldr	r2, [r0, #0]
{
 8003064:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003066:	6813      	ldr	r3, [r2, #0]
{
 8003068:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800306a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800306e:	6013      	str	r3, [r2, #0]
{
 8003070:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003072:	9600      	str	r6, [sp, #0]
 8003074:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003076:	2200      	movs	r2, #0
 8003078:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 800307c:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800307e:	f7ff ff96 	bl	8002fae <I2C_WaitOnFlagUntilTimeout>
 8003082:	b118      	cbz	r0, 800308c <I2C_RequestMemoryWrite+0x30>
      return HAL_ERROR;
 8003084:	2001      	movs	r0, #1
}
 8003086:	b004      	add	sp, #16
 8003088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800308c:	6823      	ldr	r3, [r4, #0]
 800308e:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8003092:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003094:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003096:	4633      	mov	r3, r6
 8003098:	4916      	ldr	r1, [pc, #88]	; (80030f4 <I2C_RequestMemoryWrite+0x98>)
 800309a:	4620      	mov	r0, r4
 800309c:	f7ff fef8 	bl	8002e90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030a0:	2800      	cmp	r0, #0
 80030a2:	d1ef      	bne.n	8003084 <I2C_RequestMemoryWrite+0x28>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030a4:	6823      	ldr	r3, [r4, #0]
 80030a6:	9003      	str	r0, [sp, #12]
 80030a8:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030aa:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ac:	9203      	str	r2, [sp, #12]
 80030ae:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030b0:	4632      	mov	r2, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030b2:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030b4:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030b6:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030b8:	f7ff ffaa 	bl	8003010 <I2C_WaitOnTXEFlagUntilTimeout>
 80030bc:	b140      	cbz	r0, 80030d0 <I2C_RequestMemoryWrite+0x74>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80030c0:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c2:	bf01      	itttt	eq
 80030c4:	6822      	ldreq	r2, [r4, #0]
 80030c6:	6813      	ldreq	r3, [r2, #0]
 80030c8:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80030cc:	6013      	streq	r3, [r2, #0]
 80030ce:	e7d9      	b.n	8003084 <I2C_RequestMemoryWrite+0x28>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030d0:	f1b8 0f01 	cmp.w	r8, #1
 80030d4:	6823      	ldr	r3, [r4, #0]
 80030d6:	d102      	bne.n	80030de <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030d8:	b2ed      	uxtb	r5, r5
 80030da:	611d      	str	r5, [r3, #16]
 80030dc:	e7d3      	b.n	8003086 <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80030de:	0a2a      	lsrs	r2, r5, #8
 80030e0:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030e2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80030e4:	4632      	mov	r2, r6
 80030e6:	4620      	mov	r0, r4
 80030e8:	f7ff ff92 	bl	8003010 <I2C_WaitOnTXEFlagUntilTimeout>
 80030ec:	2800      	cmp	r0, #0
 80030ee:	d1e6      	bne.n	80030be <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030f0:	6823      	ldr	r3, [r4, #0]
 80030f2:	e7f1      	b.n	80030d8 <I2C_RequestMemoryWrite+0x7c>
 80030f4:	00010002 	.word	0x00010002

080030f8 <HAL_I2C_Init>:
{
 80030f8:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 80030fa:	4604      	mov	r4, r0
 80030fc:	b908      	cbnz	r0, 8003102 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 80030fe:	2001      	movs	r0, #1
}
 8003100:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003102:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003106:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800310a:	b91b      	cbnz	r3, 8003114 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 800310c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8003110:	f7ff faf0 	bl	80026f4 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003114:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8003116:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003118:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800311c:	6813      	ldr	r3, [r2, #0]
 800311e:	f023 0301 	bic.w	r3, r3, #1
 8003122:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003124:	f000 fe84 	bl	8003e30 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003128:	6863      	ldr	r3, [r4, #4]
 800312a:	4a41      	ldr	r2, [pc, #260]	; (8003230 <HAL_I2C_Init+0x138>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d84d      	bhi.n	80031cc <HAL_I2C_Init+0xd4>
 8003130:	4a40      	ldr	r2, [pc, #256]	; (8003234 <HAL_I2C_Init+0x13c>)
 8003132:	4290      	cmp	r0, r2
 8003134:	d9e3      	bls.n	80030fe <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8003136:	4940      	ldr	r1, [pc, #256]	; (8003238 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003138:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800313a:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800313e:	6855      	ldr	r5, [r2, #4]
 8003140:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8003144:	430d      	orrs	r5, r1
 8003146:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003148:	6a15      	ldr	r5, [r2, #32]
 800314a:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800314e:	3101      	adds	r1, #1
 8003150:	4329      	orrs	r1, r5
 8003152:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003154:	69d1      	ldr	r1, [r2, #28]
 8003156:	4d36      	ldr	r5, [pc, #216]	; (8003230 <HAL_I2C_Init+0x138>)
 8003158:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800315c:	42ab      	cmp	r3, r5
 800315e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003162:	f100 30ff 	add.w	r0, r0, #4294967295
 8003166:	d848      	bhi.n	80031fa <HAL_I2C_Init+0x102>
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	fbb0 f0f3 	udiv	r0, r0, r3
 800316e:	1c43      	adds	r3, r0, #1
 8003170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003174:	2b04      	cmp	r3, #4
 8003176:	bf38      	it	cc
 8003178:	2304      	movcc	r3, #4
 800317a:	430b      	orrs	r3, r1
 800317c:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800317e:	6811      	ldr	r1, [r2, #0]
 8003180:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8003184:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8003188:	4303      	orrs	r3, r0
 800318a:	430b      	orrs	r3, r1
 800318c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800318e:	6891      	ldr	r1, [r2, #8]
 8003190:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8003194:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8003198:	4303      	orrs	r3, r0
 800319a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800319e:	430b      	orrs	r3, r1
 80031a0:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031a2:	68d1      	ldr	r1, [r2, #12]
 80031a4:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80031a8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80031ac:	4303      	orrs	r3, r0
 80031ae:	430b      	orrs	r3, r1
 80031b0:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80031b2:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031b4:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 80031b6:	f043 0301 	orr.w	r3, r3, #1
 80031ba:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80031bc:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031be:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031c4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c6:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80031ca:	e799      	b.n	8003100 <HAL_I2C_Init+0x8>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031cc:	4a1b      	ldr	r2, [pc, #108]	; (800323c <HAL_I2C_Init+0x144>)
 80031ce:	4290      	cmp	r0, r2
 80031d0:	d995      	bls.n	80030fe <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80031d2:	4e19      	ldr	r6, [pc, #100]	; (8003238 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031d4:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 80031d8:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031dc:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031de:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031e0:	6855      	ldr	r5, [r2, #4]
 80031e2:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80031e6:	4335      	orrs	r5, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031e8:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031ec:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031ee:	6a15      	ldr	r5, [r2, #32]
 80031f0:	fbb1 f1f6 	udiv	r1, r1, r6
 80031f4:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80031f8:	e7a9      	b.n	800314e <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031fa:	68a5      	ldr	r5, [r4, #8]
 80031fc:	b955      	cbnz	r5, 8003214 <HAL_I2C_Init+0x11c>
 80031fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003202:	fbb0 f0f3 	udiv	r0, r0, r3
 8003206:	1c43      	adds	r3, r0, #1
 8003208:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800320c:	b16b      	cbz	r3, 800322a <HAL_I2C_Init+0x132>
 800320e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003212:	e7b2      	b.n	800317a <HAL_I2C_Init+0x82>
 8003214:	2519      	movs	r5, #25
 8003216:	436b      	muls	r3, r5
 8003218:	fbb0 f0f3 	udiv	r0, r0, r3
 800321c:	1c43      	adds	r3, r0, #1
 800321e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003222:	b113      	cbz	r3, 800322a <HAL_I2C_Init+0x132>
 8003224:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003228:	e7a7      	b.n	800317a <HAL_I2C_Init+0x82>
 800322a:	2301      	movs	r3, #1
 800322c:	e7a5      	b.n	800317a <HAL_I2C_Init+0x82>
 800322e:	bf00      	nop
 8003230:	000186a0 	.word	0x000186a0
 8003234:	001e847f 	.word	0x001e847f
 8003238:	000f4240 	.word	0x000f4240
 800323c:	003d08ff 	.word	0x003d08ff

08003240 <HAL_I2C_Master_Transmit>:
{
 8003240:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8003244:	4604      	mov	r4, r0
 8003246:	461f      	mov	r7, r3
 8003248:	460d      	mov	r5, r1
 800324a:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 800324c:	f7ff fc52 	bl	8002af4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003250:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8003254:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003256:	2b20      	cmp	r3, #32
 8003258:	d004      	beq.n	8003264 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 800325a:	2502      	movs	r5, #2
}
 800325c:	4628      	mov	r0, r5
 800325e:	b004      	add	sp, #16
 8003260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003264:	9000      	str	r0, [sp, #0]
 8003266:	2319      	movs	r3, #25
 8003268:	2201      	movs	r2, #1
 800326a:	4958      	ldr	r1, [pc, #352]	; (80033cc <HAL_I2C_Master_Transmit+0x18c>)
 800326c:	4620      	mov	r0, r4
 800326e:	f7ff fe9e 	bl	8002fae <I2C_WaitOnFlagUntilTimeout>
 8003272:	2800      	cmp	r0, #0
 8003274:	d1f1      	bne.n	800325a <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8003276:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800327a:	2b01      	cmp	r3, #1
 800327c:	d0ed      	beq.n	800325a <HAL_I2C_Master_Transmit+0x1a>
 800327e:	2301      	movs	r3, #1
 8003280:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003284:	6823      	ldr	r3, [r4, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800328a:	bf5e      	ittt	pl
 800328c:	681a      	ldrpl	r2, [r3, #0]
 800328e:	f042 0201 	orrpl.w	r2, r2, #1
 8003292:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800329a:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800329c:	2221      	movs	r2, #33	; 0x21
 800329e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032a2:	2210      	movs	r2, #16
 80032a4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032a8:	2200      	movs	r2, #0
 80032aa:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80032ac:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032ae:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80032b0:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80032b4:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032b6:	4a46      	ldr	r2, [pc, #280]	; (80033d0 <HAL_I2C_Master_Transmit+0x190>)
 80032b8:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032bc:	2a08      	cmp	r2, #8
 80032be:	d004      	beq.n	80032ca <HAL_I2C_Master_Transmit+0x8a>
 80032c0:	2a01      	cmp	r2, #1
 80032c2:	d002      	beq.n	80032ca <HAL_I2C_Master_Transmit+0x8a>
 80032c4:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80032c8:	d104      	bne.n	80032d4 <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	e002      	b.n	80032da <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80032d4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80032d6:	2a12      	cmp	r2, #18
 80032d8:	d0f7      	beq.n	80032ca <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032da:	9600      	str	r6, [sp, #0]
 80032dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80032de:	2200      	movs	r2, #0
 80032e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032e4:	4620      	mov	r0, r4
 80032e6:	f7ff fe62 	bl	8002fae <I2C_WaitOnFlagUntilTimeout>
 80032ea:	b108      	cbz	r0, 80032f0 <HAL_I2C_Master_Transmit+0xb0>
        return HAL_ERROR;
 80032ec:	2501      	movs	r5, #1
 80032ee:	e7b5      	b.n	800325c <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032f0:	6923      	ldr	r3, [r4, #16]
 80032f2:	6822      	ldr	r2, [r4, #0]
 80032f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032f8:	d121      	bne.n	800333e <HAL_I2C_Master_Transmit+0xfe>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032fa:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 80032fe:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003300:	4633      	mov	r3, r6
 8003302:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003304:	4933      	ldr	r1, [pc, #204]	; (80033d4 <HAL_I2C_Master_Transmit+0x194>)
 8003306:	4620      	mov	r0, r4
 8003308:	f7ff fdc2 	bl	8002e90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800330c:	4605      	mov	r5, r0
 800330e:	2800      	cmp	r0, #0
 8003310:	d1ec      	bne.n	80032ec <HAL_I2C_Master_Transmit+0xac>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003312:	6823      	ldr	r3, [r4, #0]
 8003314:	9003      	str	r0, [sp, #12]
 8003316:	695a      	ldr	r2, [r3, #20]
 8003318:	9203      	str	r2, [sp, #12]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	9303      	str	r3, [sp, #12]
 800331e:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8003320:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003322:	b9f3      	cbnz	r3, 8003362 <HAL_I2C_Master_Transmit+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003324:	6821      	ldr	r1, [r4, #0]
 8003326:	680a      	ldr	r2, [r1, #0]
 8003328:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800332c:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800332e:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8003330:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8003334:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003338:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 800333c:	e78e      	b.n	800325c <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800333e:	11eb      	asrs	r3, r5, #7
 8003340:	f003 0306 	and.w	r3, r3, #6
 8003344:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8003348:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800334a:	4923      	ldr	r1, [pc, #140]	; (80033d8 <HAL_I2C_Master_Transmit+0x198>)
 800334c:	4633      	mov	r3, r6
 800334e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003350:	4620      	mov	r0, r4
 8003352:	f7ff fd9d 	bl	8002e90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003356:	2800      	cmp	r0, #0
 8003358:	d1c8      	bne.n	80032ec <HAL_I2C_Master_Transmit+0xac>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800335a:	6823      	ldr	r3, [r4, #0]
 800335c:	b2ed      	uxtb	r5, r5
 800335e:	611d      	str	r5, [r3, #16]
 8003360:	e7ce      	b.n	8003300 <HAL_I2C_Master_Transmit+0xc0>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003362:	4632      	mov	r2, r6
 8003364:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003366:	4620      	mov	r0, r4
 8003368:	f7ff fe52 	bl	8003010 <I2C_WaitOnTXEFlagUntilTimeout>
 800336c:	b140      	cbz	r0, 8003380 <HAL_I2C_Master_Transmit+0x140>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800336e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003370:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003372:	bf01      	itttt	eq
 8003374:	6822      	ldreq	r2, [r4, #0]
 8003376:	6813      	ldreq	r3, [r2, #0]
 8003378:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 800337c:	6013      	streq	r3, [r2, #0]
 800337e:	e7b5      	b.n	80032ec <HAL_I2C_Master_Transmit+0xac>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003380:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003382:	6820      	ldr	r0, [r4, #0]
 8003384:	461a      	mov	r2, r3
 8003386:	f812 1b01 	ldrb.w	r1, [r2], #1
 800338a:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 800338c:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800338e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003390:	3a01      	subs	r2, #1
 8003392:	b292      	uxth	r2, r2
 8003394:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003396:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003398:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 800339a:	1e51      	subs	r1, r2, #1
 800339c:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800339e:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 80033a0:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033a2:	d50a      	bpl.n	80033ba <HAL_I2C_Master_Transmit+0x17a>
 80033a4:	b149      	cbz	r1, 80033ba <HAL_I2C_Master_Transmit+0x17a>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033a6:	7859      	ldrb	r1, [r3, #1]
        hi2c->pBuffPtr++;
 80033a8:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033aa:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 80033ac:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80033ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80033b0:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 80033b2:	3b01      	subs	r3, #1
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80033b8:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ba:	4632      	mov	r2, r6
 80033bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80033be:	4620      	mov	r0, r4
 80033c0:	f7ff fda0 	bl	8002f04 <I2C_WaitOnBTFFlagUntilTimeout>
 80033c4:	2800      	cmp	r0, #0
 80033c6:	d0ab      	beq.n	8003320 <HAL_I2C_Master_Transmit+0xe0>
 80033c8:	e7d1      	b.n	800336e <HAL_I2C_Master_Transmit+0x12e>
 80033ca:	bf00      	nop
 80033cc:	00100002 	.word	0x00100002
 80033d0:	ffff0000 	.word	0xffff0000
 80033d4:	00010002 	.word	0x00010002
 80033d8:	00010008 	.word	0x00010008

080033dc <HAL_I2C_Master_Receive>:
{
 80033dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80033e0:	4604      	mov	r4, r0
 80033e2:	b089      	sub	sp, #36	; 0x24
 80033e4:	4698      	mov	r8, r3
 80033e6:	460f      	mov	r7, r1
 80033e8:	4691      	mov	r9, r2
 80033ea:	9e10      	ldr	r6, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 80033ec:	f7ff fb82 	bl	8002af4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80033f0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 80033f4:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80033f6:	2b20      	cmp	r3, #32
 80033f8:	d004      	beq.n	8003404 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 80033fa:	2702      	movs	r7, #2
}
 80033fc:	4638      	mov	r0, r7
 80033fe:	b009      	add	sp, #36	; 0x24
 8003400:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003404:	9000      	str	r0, [sp, #0]
 8003406:	2319      	movs	r3, #25
 8003408:	2201      	movs	r2, #1
 800340a:	499d      	ldr	r1, [pc, #628]	; (8003680 <HAL_I2C_Master_Receive+0x2a4>)
 800340c:	4620      	mov	r0, r4
 800340e:	f7ff fdce 	bl	8002fae <I2C_WaitOnFlagUntilTimeout>
 8003412:	2800      	cmp	r0, #0
 8003414:	d1f1      	bne.n	80033fa <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 8003416:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800341a:	2b01      	cmp	r3, #1
 800341c:	d0ed      	beq.n	80033fa <HAL_I2C_Master_Receive+0x1e>
 800341e:	2301      	movs	r3, #1
 8003420:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003424:	6823      	ldr	r3, [r4, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800342a:	bf5e      	ittt	pl
 800342c:	681a      	ldrpl	r2, [r3, #0]
 800342e:	f042 0201 	orrpl.w	r2, r2, #1
 8003432:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800343a:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800343c:	2222      	movs	r2, #34	; 0x22
 800343e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003442:	2210      	movs	r2, #16
 8003444:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003448:	2200      	movs	r2, #0
 800344a:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 800344c:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003450:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8003452:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8003456:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003458:	4a8a      	ldr	r2, [pc, #552]	; (8003684 <HAL_I2C_Master_Receive+0x2a8>)
 800345a:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800345c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800345e:	6819      	ldr	r1, [r3, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003460:	2a08      	cmp	r2, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003462:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8003466:	6019      	str	r1, [r3, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003468:	d004      	beq.n	8003474 <HAL_I2C_Master_Receive+0x98>
 800346a:	2a01      	cmp	r2, #1
 800346c:	d002      	beq.n	8003474 <HAL_I2C_Master_Receive+0x98>
 800346e:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8003472:	d104      	bne.n	800347e <HAL_I2C_Master_Receive+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	e002      	b.n	8003484 <HAL_I2C_Master_Receive+0xa8>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800347e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003480:	2a11      	cmp	r2, #17
 8003482:	d0f7      	beq.n	8003474 <HAL_I2C_Master_Receive+0x98>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003484:	9500      	str	r5, [sp, #0]
 8003486:	4633      	mov	r3, r6
 8003488:	2200      	movs	r2, #0
 800348a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800348e:	4620      	mov	r0, r4
 8003490:	f7ff fd8d 	bl	8002fae <I2C_WaitOnFlagUntilTimeout>
 8003494:	b108      	cbz	r0, 800349a <HAL_I2C_Master_Receive+0xbe>
      return HAL_ERROR;
 8003496:	2701      	movs	r7, #1
 8003498:	e7b0      	b.n	80033fc <HAL_I2C_Master_Receive+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800349a:	6922      	ldr	r2, [r4, #16]
 800349c:	6823      	ldr	r3, [r4, #0]
 800349e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80034a2:	d123      	bne.n	80034ec <HAL_I2C_Master_Receive+0x110>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80034a4:	f047 0701 	orr.w	r7, r7, #1
 80034a8:	b2ff      	uxtb	r7, r7
 80034aa:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034ac:	462b      	mov	r3, r5
 80034ae:	4632      	mov	r2, r6
 80034b0:	4975      	ldr	r1, [pc, #468]	; (8003688 <HAL_I2C_Master_Receive+0x2ac>)
 80034b2:	4620      	mov	r0, r4
 80034b4:	f7ff fcec 	bl	8002e90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034b8:	4607      	mov	r7, r0
 80034ba:	2800      	cmp	r0, #0
 80034bc:	d1eb      	bne.n	8003496 <HAL_I2C_Master_Receive+0xba>
    if (hi2c->XferSize == 0U)
 80034be:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80034c0:	6823      	ldr	r3, [r4, #0]
 80034c2:	2a00      	cmp	r2, #0
 80034c4:	d146      	bne.n	8003554 <HAL_I2C_Master_Receive+0x178>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034c6:	9003      	str	r0, [sp, #12]
 80034c8:	695a      	ldr	r2, [r3, #20]
 80034ca:	9203      	str	r2, [sp, #12]
 80034cc:	699a      	ldr	r2, [r3, #24]
 80034ce:	9203      	str	r2, [sp, #12]
 80034d0:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034d8:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80034da:	2320      	movs	r3, #32
 80034dc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e0:	2300      	movs	r3, #0
 80034e2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80034e6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80034ea:	e787      	b.n	80033fc <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80034ec:	ea4f 18e7 	mov.w	r8, r7, asr #7
 80034f0:	f008 0806 	and.w	r8, r8, #6
 80034f4:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 80034f8:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80034fa:	4964      	ldr	r1, [pc, #400]	; (800368c <HAL_I2C_Master_Receive+0x2b0>)
 80034fc:	462b      	mov	r3, r5
 80034fe:	4632      	mov	r2, r6
 8003500:	4620      	mov	r0, r4
 8003502:	f7ff fcc5 	bl	8002e90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003506:	2800      	cmp	r0, #0
 8003508:	d1c5      	bne.n	8003496 <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800350a:	6823      	ldr	r3, [r4, #0]
 800350c:	b2ff      	uxtb	r7, r7
 800350e:	611f      	str	r7, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003510:	4632      	mov	r2, r6
 8003512:	462b      	mov	r3, r5
 8003514:	495c      	ldr	r1, [pc, #368]	; (8003688 <HAL_I2C_Master_Receive+0x2ac>)
 8003516:	4620      	mov	r0, r4
 8003518:	f7ff fcba 	bl	8002e90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800351c:	4602      	mov	r2, r0
 800351e:	2800      	cmp	r0, #0
 8003520:	d1b9      	bne.n	8003496 <HAL_I2C_Master_Receive+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003522:	6823      	ldr	r3, [r4, #0]
 8003524:	9007      	str	r0, [sp, #28]
 8003526:	6959      	ldr	r1, [r3, #20]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003528:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800352a:	9107      	str	r1, [sp, #28]
 800352c:	6999      	ldr	r1, [r3, #24]
 800352e:	9107      	str	r1, [sp, #28]
 8003530:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003532:	6819      	ldr	r1, [r3, #0]
 8003534:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003538:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800353a:	9500      	str	r5, [sp, #0]
 800353c:	4633      	mov	r3, r6
 800353e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003542:	f7ff fd34 	bl	8002fae <I2C_WaitOnFlagUntilTimeout>
 8003546:	2800      	cmp	r0, #0
 8003548:	d1a5      	bne.n	8003496 <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800354a:	6822      	ldr	r2, [r4, #0]
 800354c:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8003550:	6113      	str	r3, [r2, #16]
 8003552:	e7ab      	b.n	80034ac <HAL_I2C_Master_Receive+0xd0>
    else if (hi2c->XferSize == 1U)
 8003554:	2a01      	cmp	r2, #1
 8003556:	d131      	bne.n	80035bc <HAL_I2C_Master_Receive+0x1e0>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800355e:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003560:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003562:	6823      	ldr	r3, [r4, #0]
 8003564:	9004      	str	r0, [sp, #16]
 8003566:	695a      	ldr	r2, [r3, #20]
 8003568:	9204      	str	r2, [sp, #16]
 800356a:	699a      	ldr	r2, [r3, #24]
 800356c:	9204      	str	r2, [sp, #16]
 800356e:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003576:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003578:	b662      	cpsie	i
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800357a:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8003690 <HAL_I2C_Master_Receive+0x2b4>
    while (hi2c->XferSize > 0U)
 800357e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0aa      	beq.n	80034da <HAL_I2C_Master_Receive+0xfe>
      if (hi2c->XferSize <= 3U)
 8003584:	2b03      	cmp	r3, #3
 8003586:	f200 8085 	bhi.w	8003694 <HAL_I2C_Master_Receive+0x2b8>
        if (hi2c->XferSize == 1U)
 800358a:	2b01      	cmp	r3, #1
 800358c:	d132      	bne.n	80035f4 <HAL_I2C_Master_Receive+0x218>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800358e:	462a      	mov	r2, r5
 8003590:	4631      	mov	r1, r6
 8003592:	4620      	mov	r0, r4
 8003594:	f7ff fcdc 	bl	8002f50 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003598:	2800      	cmp	r0, #0
 800359a:	f47f af7c 	bne.w	8003496 <HAL_I2C_Master_Receive+0xba>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800359e:	6823      	ldr	r3, [r4, #0]
 80035a0:	691a      	ldr	r2, [r3, #16]
 80035a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80035a4:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80035a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80035a8:	3301      	adds	r3, #1
 80035aa:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80035ac:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80035ae:	3b01      	subs	r3, #1
 80035b0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80035b2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	8563      	strh	r3, [r4, #42]	; 0x2a
 80035ba:	e7e0      	b.n	800357e <HAL_I2C_Master_Receive+0x1a2>
    else if (hi2c->XferSize == 2U)
 80035bc:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035be:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 80035c0:	d10e      	bne.n	80035e0 <HAL_I2C_Master_Receive+0x204>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80035c8:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ca:	6823      	ldr	r3, [r4, #0]
 80035cc:	9005      	str	r0, [sp, #20]
 80035ce:	695a      	ldr	r2, [r3, #20]
 80035d0:	9205      	str	r2, [sp, #20]
 80035d2:	699a      	ldr	r2, [r3, #24]
 80035d4:	9205      	str	r2, [sp, #20]
 80035d6:	9a05      	ldr	r2, [sp, #20]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035de:	e7ca      	b.n	8003576 <HAL_I2C_Master_Receive+0x19a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035e4:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035e6:	9006      	str	r0, [sp, #24]
 80035e8:	695a      	ldr	r2, [r3, #20]
 80035ea:	9206      	str	r2, [sp, #24]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	9306      	str	r3, [sp, #24]
 80035f0:	9b06      	ldr	r3, [sp, #24]
 80035f2:	e7c2      	b.n	800357a <HAL_I2C_Master_Receive+0x19e>
        else if (hi2c->XferSize == 2U)
 80035f4:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035f6:	9500      	str	r5, [sp, #0]
 80035f8:	4633      	mov	r3, r6
 80035fa:	f04f 0200 	mov.w	r2, #0
 80035fe:	4641      	mov	r1, r8
 8003600:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8003602:	d119      	bne.n	8003638 <HAL_I2C_Master_Receive+0x25c>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003604:	f7ff fcd3 	bl	8002fae <I2C_WaitOnFlagUntilTimeout>
 8003608:	2800      	cmp	r0, #0
 800360a:	f47f af44 	bne.w	8003496 <HAL_I2C_Master_Receive+0xba>
 800360e:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003610:	6823      	ldr	r3, [r4, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003618:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800361a:	691a      	ldr	r2, [r3, #16]
 800361c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800361e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003620:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003622:	3301      	adds	r3, #1
 8003624:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003626:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003628:	3b01      	subs	r3, #1
 800362a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800362c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800362e:	3b01      	subs	r3, #1
 8003630:	b29b      	uxth	r3, r3
 8003632:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003634:	b662      	cpsie	i
 8003636:	e7b2      	b.n	800359e <HAL_I2C_Master_Receive+0x1c2>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003638:	f7ff fcb9 	bl	8002fae <I2C_WaitOnFlagUntilTimeout>
 800363c:	4602      	mov	r2, r0
 800363e:	2800      	cmp	r0, #0
 8003640:	f47f af29 	bne.w	8003496 <HAL_I2C_Master_Receive+0xba>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003644:	6821      	ldr	r1, [r4, #0]
 8003646:	680b      	ldr	r3, [r1, #0]
 8003648:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800364c:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800364e:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003650:	6823      	ldr	r3, [r4, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003652:	4620      	mov	r0, r4
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003654:	6919      	ldr	r1, [r3, #16]
 8003656:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003658:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 800365a:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800365c:	9500      	str	r5, [sp, #0]
          hi2c->pBuffPtr++;
 800365e:	3301      	adds	r3, #1
 8003660:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003662:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003664:	4641      	mov	r1, r8
          hi2c->XferSize--;
 8003666:	3b01      	subs	r3, #1
 8003668:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800366a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800366c:	3b01      	subs	r3, #1
 800366e:	b29b      	uxth	r3, r3
 8003670:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003672:	4633      	mov	r3, r6
 8003674:	f7ff fc9b 	bl	8002fae <I2C_WaitOnFlagUntilTimeout>
 8003678:	2800      	cmp	r0, #0
 800367a:	d0c9      	beq.n	8003610 <HAL_I2C_Master_Receive+0x234>
 800367c:	e70b      	b.n	8003496 <HAL_I2C_Master_Receive+0xba>
 800367e:	bf00      	nop
 8003680:	00100002 	.word	0x00100002
 8003684:	ffff0000 	.word	0xffff0000
 8003688:	00010002 	.word	0x00010002
 800368c:	00010008 	.word	0x00010008
 8003690:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003694:	462a      	mov	r2, r5
 8003696:	4631      	mov	r1, r6
 8003698:	4620      	mov	r0, r4
 800369a:	f7ff fc59 	bl	8002f50 <I2C_WaitOnRXNEFlagUntilTimeout>
 800369e:	2800      	cmp	r0, #0
 80036a0:	f47f aef9 	bne.w	8003496 <HAL_I2C_Master_Receive+0xba>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036a4:	6823      	ldr	r3, [r4, #0]
 80036a6:	691a      	ldr	r2, [r3, #16]
 80036a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036aa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80036ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80036ae:	1c53      	adds	r3, r2, #1
 80036b0:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80036b2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80036b4:	3b01      	subs	r3, #1
 80036b6:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80036b8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80036ba:	3b01      	subs	r3, #1
 80036bc:	b29b      	uxth	r3, r3
 80036be:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80036c0:	6823      	ldr	r3, [r4, #0]
 80036c2:	6959      	ldr	r1, [r3, #20]
 80036c4:	0749      	lsls	r1, r1, #29
 80036c6:	f57f af5a 	bpl.w	800357e <HAL_I2C_Master_Receive+0x1a2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	7053      	strb	r3, [r2, #1]
 80036ce:	e76a      	b.n	80035a6 <HAL_I2C_Master_Receive+0x1ca>

080036d0 <HAL_I2C_Mem_Write>:
{
 80036d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80036d4:	4604      	mov	r4, r0
 80036d6:	4699      	mov	r9, r3
 80036d8:	460f      	mov	r7, r1
 80036da:	4690      	mov	r8, r2
 80036dc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80036de:	f7ff fa09 	bl	8002af4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80036e2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 80036e6:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80036e8:	2b20      	cmp	r3, #32
 80036ea:	d003      	beq.n	80036f4 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 80036ec:	2002      	movs	r0, #2
}
 80036ee:	b003      	add	sp, #12
 80036f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036f4:	9000      	str	r0, [sp, #0]
 80036f6:	2319      	movs	r3, #25
 80036f8:	2201      	movs	r2, #1
 80036fa:	493b      	ldr	r1, [pc, #236]	; (80037e8 <HAL_I2C_Mem_Write+0x118>)
 80036fc:	4620      	mov	r0, r4
 80036fe:	f7ff fc56 	bl	8002fae <I2C_WaitOnFlagUntilTimeout>
 8003702:	2800      	cmp	r0, #0
 8003704:	d1f2      	bne.n	80036ec <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8003706:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800370a:	2b01      	cmp	r3, #1
 800370c:	d0ee      	beq.n	80036ec <HAL_I2C_Mem_Write+0x1c>
 800370e:	2301      	movs	r3, #1
 8003710:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003714:	6823      	ldr	r3, [r4, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003716:	4620      	mov	r0, r4
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	07d1      	lsls	r1, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800371c:	bf58      	it	pl
 800371e:	681a      	ldrpl	r2, [r3, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003720:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 8003722:	bf5c      	itt	pl
 8003724:	f042 0201 	orrpl.w	r2, r2, #1
 8003728:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003730:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003732:	2321      	movs	r3, #33	; 0x21
 8003734:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003738:	2340      	movs	r3, #64	; 0x40
 800373a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800373e:	2300      	movs	r3, #0
 8003740:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003744:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->pBuffPtr    = pData;
 8003748:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800374a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800374e:	4642      	mov	r2, r8
    hi2c->XferCount   = Size;
 8003750:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003752:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003754:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003756:	4b25      	ldr	r3, [pc, #148]	; (80037ec <HAL_I2C_Mem_Write+0x11c>)
 8003758:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800375a:	464b      	mov	r3, r9
 800375c:	f7ff fc7e 	bl	800305c <I2C_RequestMemoryWrite>
 8003760:	2800      	cmp	r0, #0
 8003762:	d02a      	beq.n	80037ba <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 8003764:	2001      	movs	r0, #1
 8003766:	e7c2      	b.n	80036ee <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003768:	f7ff fc52 	bl	8003010 <I2C_WaitOnTXEFlagUntilTimeout>
 800376c:	b140      	cbz	r0, 8003780 <HAL_I2C_Mem_Write+0xb0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800376e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003770:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003772:	bf01      	itttt	eq
 8003774:	6822      	ldreq	r2, [r4, #0]
 8003776:	6813      	ldreq	r3, [r2, #0]
 8003778:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 800377c:	6013      	streq	r3, [r2, #0]
 800377e:	e7f1      	b.n	8003764 <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003780:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003782:	6827      	ldr	r7, [r4, #0]
 8003784:	461a      	mov	r2, r3
 8003786:	f812 1b01 	ldrb.w	r1, [r2], #1
 800378a:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 800378c:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800378e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003790:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003792:	3a01      	subs	r2, #1
 8003794:	b292      	uxth	r2, r2
 8003796:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003798:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 800379a:	1e48      	subs	r0, r1, #1
 800379c:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800379e:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 80037a0:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037a2:	d50a      	bpl.n	80037ba <HAL_I2C_Mem_Write+0xea>
 80037a4:	b148      	cbz	r0, 80037ba <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037a6:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 80037a8:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037aa:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 80037ac:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80037ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80037b0:	3902      	subs	r1, #2
        hi2c->XferCount--;
 80037b2:	3b01      	subs	r3, #1
 80037b4:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80037b6:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80037b8:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80037ba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037bc:	462a      	mov	r2, r5
 80037be:	4631      	mov	r1, r6
 80037c0:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1d0      	bne.n	8003768 <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037c6:	f7ff fb9d 	bl	8002f04 <I2C_WaitOnBTFFlagUntilTimeout>
 80037ca:	2800      	cmp	r0, #0
 80037cc:	d1cf      	bne.n	800376e <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ce:	6822      	ldr	r2, [r4, #0]
 80037d0:	6813      	ldr	r3, [r2, #0]
 80037d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037d6:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80037d8:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 80037da:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80037de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e2:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 80037e6:	e782      	b.n	80036ee <HAL_I2C_Mem_Write+0x1e>
 80037e8:	00100002 	.word	0x00100002
 80037ec:	ffff0000 	.word	0xffff0000

080037f0 <HAL_I2C_IsDeviceReady>:
{
 80037f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037f4:	4604      	mov	r4, r0
 80037f6:	b085      	sub	sp, #20
 80037f8:	4698      	mov	r8, r3
 80037fa:	4689      	mov	r9, r1
 80037fc:	4692      	mov	sl, r2
  uint32_t tickstart = HAL_GetTick();
 80037fe:	f7ff f979 	bl	8002af4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003802:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8003806:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003808:	2b20      	cmp	r3, #32
 800380a:	d003      	beq.n	8003814 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 800380c:	2002      	movs	r0, #2
}
 800380e:	b005      	add	sp, #20
 8003810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003814:	9000      	str	r0, [sp, #0]
 8003816:	2319      	movs	r3, #25
 8003818:	2201      	movs	r2, #1
 800381a:	4949      	ldr	r1, [pc, #292]	; (8003940 <HAL_I2C_IsDeviceReady+0x150>)
 800381c:	4620      	mov	r0, r4
 800381e:	f7ff fbc6 	bl	8002fae <I2C_WaitOnFlagUntilTimeout>
 8003822:	2800      	cmp	r0, #0
 8003824:	d1f2      	bne.n	800380c <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 8003826:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800382a:	2b01      	cmp	r3, #1
 800382c:	d0ee      	beq.n	800380c <HAL_I2C_IsDeviceReady+0x1c>
 800382e:	2301      	movs	r3, #1
 8003830:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003834:	6823      	ldr	r3, [r4, #0]
  uint32_t I2C_Trials = 1U;
 8003836:	2701      	movs	r7, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003838:	681a      	ldr	r2, [r3, #0]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800383a:	f8df b104 	ldr.w	fp, [pc, #260]	; 8003940 <HAL_I2C_IsDeviceReady+0x150>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800383e:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8003840:	bf58      	it	pl
 8003842:	681a      	ldrpl	r2, [r3, #0]
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003844:	f009 09fe 	and.w	r9, r9, #254	; 0xfe
      __HAL_I2C_ENABLE(hi2c);
 8003848:	bf5c      	itt	pl
 800384a:	f042 0201 	orrpl.w	r2, r2, #1
 800384e:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003856:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003858:	2324      	movs	r3, #36	; 0x24
 800385a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800385e:	2300      	movs	r3, #0
 8003860:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003862:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8003866:	62e3      	str	r3, [r4, #44]	; 0x2c
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003868:	6822      	ldr	r2, [r4, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800386a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800386e:	6813      	ldr	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003870:	4620      	mov	r0, r4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003876:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003878:	9500      	str	r5, [sp, #0]
 800387a:	4643      	mov	r3, r8
 800387c:	2200      	movs	r2, #0
 800387e:	f7ff fb96 	bl	8002fae <I2C_WaitOnFlagUntilTimeout>
 8003882:	b108      	cbz	r0, 8003888 <HAL_I2C_IsDeviceReady+0x98>
    return HAL_ERROR;
 8003884:	2001      	movs	r0, #1
 8003886:	e7c2      	b.n	800380e <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003888:	6823      	ldr	r3, [r4, #0]
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800388a:	26a0      	movs	r6, #160	; 0xa0
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800388c:	f8c3 9010 	str.w	r9, [r3, #16]
      tickstart = HAL_GetTick();
 8003890:	f7ff f930 	bl	8002af4 <HAL_GetTick>
 8003894:	4605      	mov	r5, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003896:	6823      	ldr	r3, [r4, #0]
 8003898:	695a      	ldr	r2, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800389a:	695b      	ldr	r3, [r3, #20]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800389c:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80038a0:	f3c3 2380 	ubfx	r3, r3, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80038a4:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80038a8:	29a0      	cmp	r1, #160	; 0xa0
 80038aa:	d001      	beq.n	80038b0 <HAL_I2C_IsDeviceReady+0xc0>
 80038ac:	b902      	cbnz	r2, 80038b0 <HAL_I2C_IsDeviceReady+0xc0>
 80038ae:	b303      	cbz	r3, 80038f2 <HAL_I2C_IsDeviceReady+0x102>
      hi2c->State = HAL_I2C_STATE_READY;
 80038b0:	2620      	movs	r6, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80038b2:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 80038b4:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80038b8:	695a      	ldr	r2, [r3, #20]
 80038ba:	f012 0f02 	tst.w	r2, #2
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038c4:	601a      	str	r2, [r3, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80038c6:	d026      	beq.n	8003916 <HAL_I2C_IsDeviceReady+0x126>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038c8:	2200      	movs	r2, #0
 80038ca:	9203      	str	r2, [sp, #12]
 80038cc:	695a      	ldr	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038ce:	491c      	ldr	r1, [pc, #112]	; (8003940 <HAL_I2C_IsDeviceReady+0x150>)
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038d0:	9203      	str	r2, [sp, #12]
 80038d2:	699b      	ldr	r3, [r3, #24]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038d4:	2201      	movs	r2, #1
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038d6:	9303      	str	r3, [sp, #12]
 80038d8:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038da:	9500      	str	r5, [sp, #0]
 80038dc:	2319      	movs	r3, #25
 80038de:	4620      	mov	r0, r4
 80038e0:	f7ff fb65 	bl	8002fae <I2C_WaitOnFlagUntilTimeout>
 80038e4:	2800      	cmp	r0, #0
 80038e6:	d1cd      	bne.n	8003884 <HAL_I2C_IsDeviceReady+0x94>
        hi2c->State = HAL_I2C_STATE_READY;
 80038e8:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80038ec:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 80038f0:	e78d      	b.n	800380e <HAL_I2C_IsDeviceReady+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038f2:	f7ff f8ff 	bl	8002af4 <HAL_GetTick>
 80038f6:	1b40      	subs	r0, r0, r5
 80038f8:	4540      	cmp	r0, r8
 80038fa:	d802      	bhi.n	8003902 <HAL_I2C_IsDeviceReady+0x112>
 80038fc:	f1b8 0f00 	cmp.w	r8, #0
 8003900:	d101      	bne.n	8003906 <HAL_I2C_IsDeviceReady+0x116>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003902:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003906:	6823      	ldr	r3, [r4, #0]
 8003908:	695a      	ldr	r2, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800390a:	695b      	ldr	r3, [r3, #20]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800390c:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003910:	f3c3 2380 	ubfx	r3, r3, #10, #1
 8003914:	e7c6      	b.n	80038a4 <HAL_I2C_IsDeviceReady+0xb4>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003916:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800391a:	4659      	mov	r1, fp
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800391c:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800391e:	4620      	mov	r0, r4
 8003920:	9500      	str	r5, [sp, #0]
 8003922:	2319      	movs	r3, #25
 8003924:	2201      	movs	r2, #1
 8003926:	f7ff fb42 	bl	8002fae <I2C_WaitOnFlagUntilTimeout>
 800392a:	2800      	cmp	r0, #0
 800392c:	d1aa      	bne.n	8003884 <HAL_I2C_IsDeviceReady+0x94>
      I2C_Trials++;
 800392e:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 8003930:	4557      	cmp	r7, sl
 8003932:	d399      	bcc.n	8003868 <HAL_I2C_IsDeviceReady+0x78>
    hi2c->State = HAL_I2C_STATE_READY;
 8003934:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8003938:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 800393c:	e7a2      	b.n	8003884 <HAL_I2C_IsDeviceReady+0x94>
 800393e:	bf00      	nop
 8003940:	00100002 	.word	0x00100002

08003944 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8003944:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8003946:	4770      	bx	lr

08003948 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003948:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800394c:	4605      	mov	r5, r0
 800394e:	b908      	cbnz	r0, 8003954 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8003950:	2001      	movs	r0, #1
 8003952:	e03c      	b.n	80039ce <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003954:	6803      	ldr	r3, [r0, #0]
 8003956:	07db      	lsls	r3, r3, #31
 8003958:	d410      	bmi.n	800397c <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800395a:	682b      	ldr	r3, [r5, #0]
 800395c:	079f      	lsls	r7, r3, #30
 800395e:	d45d      	bmi.n	8003a1c <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003960:	682b      	ldr	r3, [r5, #0]
 8003962:	0719      	lsls	r1, r3, #28
 8003964:	f100 8094 	bmi.w	8003a90 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003968:	682b      	ldr	r3, [r5, #0]
 800396a:	075a      	lsls	r2, r3, #29
 800396c:	f100 80be 	bmi.w	8003aec <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003970:	69e8      	ldr	r0, [r5, #28]
 8003972:	2800      	cmp	r0, #0
 8003974:	f040 812c 	bne.w	8003bd0 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8003978:	2000      	movs	r0, #0
 800397a:	e028      	b.n	80039ce <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800397c:	4c8f      	ldr	r4, [pc, #572]	; (8003bbc <HAL_RCC_OscConfig+0x274>)
 800397e:	6863      	ldr	r3, [r4, #4]
 8003980:	f003 030c 	and.w	r3, r3, #12
 8003984:	2b04      	cmp	r3, #4
 8003986:	d007      	beq.n	8003998 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003988:	6863      	ldr	r3, [r4, #4]
 800398a:	f003 030c 	and.w	r3, r3, #12
 800398e:	2b08      	cmp	r3, #8
 8003990:	d109      	bne.n	80039a6 <HAL_RCC_OscConfig+0x5e>
 8003992:	6863      	ldr	r3, [r4, #4]
 8003994:	03de      	lsls	r6, r3, #15
 8003996:	d506      	bpl.n	80039a6 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003998:	6823      	ldr	r3, [r4, #0]
 800399a:	039c      	lsls	r4, r3, #14
 800399c:	d5dd      	bpl.n	800395a <HAL_RCC_OscConfig+0x12>
 800399e:	686b      	ldr	r3, [r5, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1da      	bne.n	800395a <HAL_RCC_OscConfig+0x12>
 80039a4:	e7d4      	b.n	8003950 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039a6:	686b      	ldr	r3, [r5, #4]
 80039a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ac:	d112      	bne.n	80039d4 <HAL_RCC_OscConfig+0x8c>
 80039ae:	6823      	ldr	r3, [r4, #0]
 80039b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039b4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80039b6:	f7ff f89d 	bl	8002af4 <HAL_GetTick>
 80039ba:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039bc:	6823      	ldr	r3, [r4, #0]
 80039be:	0398      	lsls	r0, r3, #14
 80039c0:	d4cb      	bmi.n	800395a <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039c2:	f7ff f897 	bl	8002af4 <HAL_GetTick>
 80039c6:	1b80      	subs	r0, r0, r6
 80039c8:	2864      	cmp	r0, #100	; 0x64
 80039ca:	d9f7      	bls.n	80039bc <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80039cc:	2003      	movs	r0, #3
}
 80039ce:	b002      	add	sp, #8
 80039d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039d4:	b99b      	cbnz	r3, 80039fe <HAL_RCC_OscConfig+0xb6>
 80039d6:	6823      	ldr	r3, [r4, #0]
 80039d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039dc:	6023      	str	r3, [r4, #0]
 80039de:	6823      	ldr	r3, [r4, #0]
 80039e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039e4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80039e6:	f7ff f885 	bl	8002af4 <HAL_GetTick>
 80039ea:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ec:	6823      	ldr	r3, [r4, #0]
 80039ee:	0399      	lsls	r1, r3, #14
 80039f0:	d5b3      	bpl.n	800395a <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039f2:	f7ff f87f 	bl	8002af4 <HAL_GetTick>
 80039f6:	1b80      	subs	r0, r0, r6
 80039f8:	2864      	cmp	r0, #100	; 0x64
 80039fa:	d9f7      	bls.n	80039ec <HAL_RCC_OscConfig+0xa4>
 80039fc:	e7e6      	b.n	80039cc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a02:	6823      	ldr	r3, [r4, #0]
 8003a04:	d103      	bne.n	8003a0e <HAL_RCC_OscConfig+0xc6>
 8003a06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a0a:	6023      	str	r3, [r4, #0]
 8003a0c:	e7cf      	b.n	80039ae <HAL_RCC_OscConfig+0x66>
 8003a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a12:	6023      	str	r3, [r4, #0]
 8003a14:	6823      	ldr	r3, [r4, #0]
 8003a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a1a:	e7cb      	b.n	80039b4 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a1c:	4c67      	ldr	r4, [pc, #412]	; (8003bbc <HAL_RCC_OscConfig+0x274>)
 8003a1e:	6863      	ldr	r3, [r4, #4]
 8003a20:	f013 0f0c 	tst.w	r3, #12
 8003a24:	d007      	beq.n	8003a36 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a26:	6863      	ldr	r3, [r4, #4]
 8003a28:	f003 030c 	and.w	r3, r3, #12
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d110      	bne.n	8003a52 <HAL_RCC_OscConfig+0x10a>
 8003a30:	6863      	ldr	r3, [r4, #4]
 8003a32:	03da      	lsls	r2, r3, #15
 8003a34:	d40d      	bmi.n	8003a52 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a36:	6823      	ldr	r3, [r4, #0]
 8003a38:	079b      	lsls	r3, r3, #30
 8003a3a:	d502      	bpl.n	8003a42 <HAL_RCC_OscConfig+0xfa>
 8003a3c:	692b      	ldr	r3, [r5, #16]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d186      	bne.n	8003950 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a42:	6823      	ldr	r3, [r4, #0]
 8003a44:	696a      	ldr	r2, [r5, #20]
 8003a46:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003a4a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003a4e:	6023      	str	r3, [r4, #0]
 8003a50:	e786      	b.n	8003960 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a52:	692a      	ldr	r2, [r5, #16]
 8003a54:	4b5a      	ldr	r3, [pc, #360]	; (8003bc0 <HAL_RCC_OscConfig+0x278>)
 8003a56:	b16a      	cbz	r2, 8003a74 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8003a58:	2201      	movs	r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003a5c:	f7ff f84a 	bl	8002af4 <HAL_GetTick>
 8003a60:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a62:	6823      	ldr	r3, [r4, #0]
 8003a64:	079f      	lsls	r7, r3, #30
 8003a66:	d4ec      	bmi.n	8003a42 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a68:	f7ff f844 	bl	8002af4 <HAL_GetTick>
 8003a6c:	1b80      	subs	r0, r0, r6
 8003a6e:	2802      	cmp	r0, #2
 8003a70:	d9f7      	bls.n	8003a62 <HAL_RCC_OscConfig+0x11a>
 8003a72:	e7ab      	b.n	80039cc <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8003a74:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003a76:	f7ff f83d 	bl	8002af4 <HAL_GetTick>
 8003a7a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a7c:	6823      	ldr	r3, [r4, #0]
 8003a7e:	0798      	lsls	r0, r3, #30
 8003a80:	f57f af6e 	bpl.w	8003960 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a84:	f7ff f836 	bl	8002af4 <HAL_GetTick>
 8003a88:	1b80      	subs	r0, r0, r6
 8003a8a:	2802      	cmp	r0, #2
 8003a8c:	d9f6      	bls.n	8003a7c <HAL_RCC_OscConfig+0x134>
 8003a8e:	e79d      	b.n	80039cc <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a90:	69aa      	ldr	r2, [r5, #24]
 8003a92:	4c4a      	ldr	r4, [pc, #296]	; (8003bbc <HAL_RCC_OscConfig+0x274>)
 8003a94:	4b4b      	ldr	r3, [pc, #300]	; (8003bc4 <HAL_RCC_OscConfig+0x27c>)
 8003a96:	b1da      	cbz	r2, 8003ad0 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8003a98:	2201      	movs	r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003a9c:	f7ff f82a 	bl	8002af4 <HAL_GetTick>
 8003aa0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003aa4:	079b      	lsls	r3, r3, #30
 8003aa6:	d50d      	bpl.n	8003ac4 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003aa8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003aac:	4b46      	ldr	r3, [pc, #280]	; (8003bc8 <HAL_RCC_OscConfig+0x280>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ab4:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8003ab6:	bf00      	nop
  }
  while (Delay --);
 8003ab8:	9b01      	ldr	r3, [sp, #4]
 8003aba:	1e5a      	subs	r2, r3, #1
 8003abc:	9201      	str	r2, [sp, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1f9      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x16e>
 8003ac2:	e751      	b.n	8003968 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ac4:	f7ff f816 	bl	8002af4 <HAL_GetTick>
 8003ac8:	1b80      	subs	r0, r0, r6
 8003aca:	2802      	cmp	r0, #2
 8003acc:	d9e9      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x15a>
 8003ace:	e77d      	b.n	80039cc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8003ad0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003ad2:	f7ff f80f 	bl	8002af4 <HAL_GetTick>
 8003ad6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ad8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ada:	079f      	lsls	r7, r3, #30
 8003adc:	f57f af44 	bpl.w	8003968 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ae0:	f7ff f808 	bl	8002af4 <HAL_GetTick>
 8003ae4:	1b80      	subs	r0, r0, r6
 8003ae6:	2802      	cmp	r0, #2
 8003ae8:	d9f6      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x190>
 8003aea:	e76f      	b.n	80039cc <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aec:	4c33      	ldr	r4, [pc, #204]	; (8003bbc <HAL_RCC_OscConfig+0x274>)
 8003aee:	69e3      	ldr	r3, [r4, #28]
 8003af0:	00d8      	lsls	r0, r3, #3
 8003af2:	d424      	bmi.n	8003b3e <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8003af4:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003af6:	69e3      	ldr	r3, [r4, #28]
 8003af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003afc:	61e3      	str	r3, [r4, #28]
 8003afe:	69e3      	ldr	r3, [r4, #28]
 8003b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b08:	4e30      	ldr	r6, [pc, #192]	; (8003bcc <HAL_RCC_OscConfig+0x284>)
 8003b0a:	6833      	ldr	r3, [r6, #0]
 8003b0c:	05d9      	lsls	r1, r3, #23
 8003b0e:	d518      	bpl.n	8003b42 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b10:	68eb      	ldr	r3, [r5, #12]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d126      	bne.n	8003b64 <HAL_RCC_OscConfig+0x21c>
 8003b16:	6a23      	ldr	r3, [r4, #32]
 8003b18:	f043 0301 	orr.w	r3, r3, #1
 8003b1c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8003b1e:	f7fe ffe9 	bl	8002af4 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b22:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003b26:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b28:	6a23      	ldr	r3, [r4, #32]
 8003b2a:	079b      	lsls	r3, r3, #30
 8003b2c:	d53f      	bpl.n	8003bae <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8003b2e:	2f00      	cmp	r7, #0
 8003b30:	f43f af1e 	beq.w	8003970 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b34:	69e3      	ldr	r3, [r4, #28]
 8003b36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b3a:	61e3      	str	r3, [r4, #28]
 8003b3c:	e718      	b.n	8003970 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8003b3e:	2700      	movs	r7, #0
 8003b40:	e7e2      	b.n	8003b08 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b42:	6833      	ldr	r3, [r6, #0]
 8003b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b48:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003b4a:	f7fe ffd3 	bl	8002af4 <HAL_GetTick>
 8003b4e:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b50:	6833      	ldr	r3, [r6, #0]
 8003b52:	05da      	lsls	r2, r3, #23
 8003b54:	d4dc      	bmi.n	8003b10 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b56:	f7fe ffcd 	bl	8002af4 <HAL_GetTick>
 8003b5a:	eba0 0008 	sub.w	r0, r0, r8
 8003b5e:	2864      	cmp	r0, #100	; 0x64
 8003b60:	d9f6      	bls.n	8003b50 <HAL_RCC_OscConfig+0x208>
 8003b62:	e733      	b.n	80039cc <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b64:	b9ab      	cbnz	r3, 8003b92 <HAL_RCC_OscConfig+0x24a>
 8003b66:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b68:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b6c:	f023 0301 	bic.w	r3, r3, #1
 8003b70:	6223      	str	r3, [r4, #32]
 8003b72:	6a23      	ldr	r3, [r4, #32]
 8003b74:	f023 0304 	bic.w	r3, r3, #4
 8003b78:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8003b7a:	f7fe ffbb 	bl	8002af4 <HAL_GetTick>
 8003b7e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b80:	6a23      	ldr	r3, [r4, #32]
 8003b82:	0798      	lsls	r0, r3, #30
 8003b84:	d5d3      	bpl.n	8003b2e <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b86:	f7fe ffb5 	bl	8002af4 <HAL_GetTick>
 8003b8a:	1b80      	subs	r0, r0, r6
 8003b8c:	4540      	cmp	r0, r8
 8003b8e:	d9f7      	bls.n	8003b80 <HAL_RCC_OscConfig+0x238>
 8003b90:	e71c      	b.n	80039cc <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b92:	2b05      	cmp	r3, #5
 8003b94:	6a23      	ldr	r3, [r4, #32]
 8003b96:	d103      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x258>
 8003b98:	f043 0304 	orr.w	r3, r3, #4
 8003b9c:	6223      	str	r3, [r4, #32]
 8003b9e:	e7ba      	b.n	8003b16 <HAL_RCC_OscConfig+0x1ce>
 8003ba0:	f023 0301 	bic.w	r3, r3, #1
 8003ba4:	6223      	str	r3, [r4, #32]
 8003ba6:	6a23      	ldr	r3, [r4, #32]
 8003ba8:	f023 0304 	bic.w	r3, r3, #4
 8003bac:	e7b6      	b.n	8003b1c <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bae:	f7fe ffa1 	bl	8002af4 <HAL_GetTick>
 8003bb2:	eba0 0008 	sub.w	r0, r0, r8
 8003bb6:	42b0      	cmp	r0, r6
 8003bb8:	d9b6      	bls.n	8003b28 <HAL_RCC_OscConfig+0x1e0>
 8003bba:	e707      	b.n	80039cc <HAL_RCC_OscConfig+0x84>
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	42420000 	.word	0x42420000
 8003bc4:	42420480 	.word	0x42420480
 8003bc8:	20000010 	.word	0x20000010
 8003bcc:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bd0:	4b2a      	ldr	r3, [pc, #168]	; (8003c7c <HAL_RCC_OscConfig+0x334>)
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	461c      	mov	r4, r3
 8003bd6:	f002 020c 	and.w	r2, r2, #12
 8003bda:	2a08      	cmp	r2, #8
 8003bdc:	d03d      	beq.n	8003c5a <HAL_RCC_OscConfig+0x312>
 8003bde:	2300      	movs	r3, #0
 8003be0:	4e27      	ldr	r6, [pc, #156]	; (8003c80 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003be2:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003be4:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003be6:	d12b      	bne.n	8003c40 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8003be8:	f7fe ff84 	bl	8002af4 <HAL_GetTick>
 8003bec:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bee:	6823      	ldr	r3, [r4, #0]
 8003bf0:	0199      	lsls	r1, r3, #6
 8003bf2:	d41f      	bmi.n	8003c34 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003bf4:	6a2b      	ldr	r3, [r5, #32]
 8003bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bfa:	d105      	bne.n	8003c08 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003bfc:	6862      	ldr	r2, [r4, #4]
 8003bfe:	68a9      	ldr	r1, [r5, #8]
 8003c00:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003c04:	430a      	orrs	r2, r1
 8003c06:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c08:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8003c0a:	6862      	ldr	r2, [r4, #4]
 8003c0c:	430b      	orrs	r3, r1
 8003c0e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8003c12:	4313      	orrs	r3, r2
 8003c14:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8003c16:	2301      	movs	r3, #1
 8003c18:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003c1a:	f7fe ff6b 	bl	8002af4 <HAL_GetTick>
 8003c1e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c20:	6823      	ldr	r3, [r4, #0]
 8003c22:	019a      	lsls	r2, r3, #6
 8003c24:	f53f aea8 	bmi.w	8003978 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c28:	f7fe ff64 	bl	8002af4 <HAL_GetTick>
 8003c2c:	1b40      	subs	r0, r0, r5
 8003c2e:	2802      	cmp	r0, #2
 8003c30:	d9f6      	bls.n	8003c20 <HAL_RCC_OscConfig+0x2d8>
 8003c32:	e6cb      	b.n	80039cc <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c34:	f7fe ff5e 	bl	8002af4 <HAL_GetTick>
 8003c38:	1bc0      	subs	r0, r0, r7
 8003c3a:	2802      	cmp	r0, #2
 8003c3c:	d9d7      	bls.n	8003bee <HAL_RCC_OscConfig+0x2a6>
 8003c3e:	e6c5      	b.n	80039cc <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8003c40:	f7fe ff58 	bl	8002af4 <HAL_GetTick>
 8003c44:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c46:	6823      	ldr	r3, [r4, #0]
 8003c48:	019b      	lsls	r3, r3, #6
 8003c4a:	f57f ae95 	bpl.w	8003978 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c4e:	f7fe ff51 	bl	8002af4 <HAL_GetTick>
 8003c52:	1b40      	subs	r0, r0, r5
 8003c54:	2802      	cmp	r0, #2
 8003c56:	d9f6      	bls.n	8003c46 <HAL_RCC_OscConfig+0x2fe>
 8003c58:	e6b8      	b.n	80039cc <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c5a:	2801      	cmp	r0, #1
 8003c5c:	f43f aeb7 	beq.w	80039ce <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8003c60:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c62:	6a2b      	ldr	r3, [r5, #32]
 8003c64:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	f47f ae71 	bne.w	8003950 <HAL_RCC_OscConfig+0x8>
 8003c6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c70:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8003c74:	1ac0      	subs	r0, r0, r3
 8003c76:	bf18      	it	ne
 8003c78:	2001      	movne	r0, #1
 8003c7a:	e6a8      	b.n	80039ce <HAL_RCC_OscConfig+0x86>
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	42420060 	.word	0x42420060

08003c84 <HAL_RCC_GetSysClockFreq>:
{
 8003c84:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003c86:	4b18      	ldr	r3, [pc, #96]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8003c88:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003c8a:	ac02      	add	r4, sp, #8
 8003c8c:	f103 0510 	add.w	r5, r3, #16
 8003c90:	4622      	mov	r2, r4
 8003c92:	6818      	ldr	r0, [r3, #0]
 8003c94:	6859      	ldr	r1, [r3, #4]
 8003c96:	3308      	adds	r3, #8
 8003c98:	c203      	stmia	r2!, {r0, r1}
 8003c9a:	42ab      	cmp	r3, r5
 8003c9c:	4614      	mov	r4, r2
 8003c9e:	d1f7      	bne.n	8003c90 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003ca0:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8003ca4:	4911      	ldr	r1, [pc, #68]	; (8003cec <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003ca6:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8003caa:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003cac:	f003 020c 	and.w	r2, r3, #12
 8003cb0:	2a08      	cmp	r2, #8
 8003cb2:	d117      	bne.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003cb4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8003cb8:	a806      	add	r0, sp, #24
 8003cba:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003cbc:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003cbe:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003cc2:	d50c      	bpl.n	8003cde <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003cc4:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003cc6:	480a      	ldr	r0, [pc, #40]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003cc8:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ccc:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003cce:	aa06      	add	r2, sp, #24
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003cd6:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8003cda:	b007      	add	sp, #28
 8003cdc:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003cde:	4805      	ldr	r0, [pc, #20]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x70>)
 8003ce0:	4350      	muls	r0, r2
 8003ce2:	e7fa      	b.n	8003cda <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8003ce4:	4802      	ldr	r0, [pc, #8]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8003ce6:	e7f8      	b.n	8003cda <HAL_RCC_GetSysClockFreq+0x56>
 8003ce8:	0800b0f0 	.word	0x0800b0f0
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	007a1200 	.word	0x007a1200
 8003cf4:	003d0900 	.word	0x003d0900

08003cf8 <HAL_RCC_ClockConfig>:
{
 8003cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cfc:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8003cfe:	4604      	mov	r4, r0
 8003d00:	b910      	cbnz	r0, 8003d08 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003d02:	2001      	movs	r0, #1
}
 8003d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d08:	4a44      	ldr	r2, [pc, #272]	; (8003e1c <HAL_RCC_ClockConfig+0x124>)
 8003d0a:	6813      	ldr	r3, [r2, #0]
 8003d0c:	f003 0307 	and.w	r3, r3, #7
 8003d10:	428b      	cmp	r3, r1
 8003d12:	d328      	bcc.n	8003d66 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d14:	6821      	ldr	r1, [r4, #0]
 8003d16:	078e      	lsls	r6, r1, #30
 8003d18:	d430      	bmi.n	8003d7c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d1a:	07ca      	lsls	r2, r1, #31
 8003d1c:	d443      	bmi.n	8003da6 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d1e:	4a3f      	ldr	r2, [pc, #252]	; (8003e1c <HAL_RCC_ClockConfig+0x124>)
 8003d20:	6813      	ldr	r3, [r2, #0]
 8003d22:	f003 0307 	and.w	r3, r3, #7
 8003d26:	42ab      	cmp	r3, r5
 8003d28:	d865      	bhi.n	8003df6 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d2a:	6822      	ldr	r2, [r4, #0]
 8003d2c:	4d3c      	ldr	r5, [pc, #240]	; (8003e20 <HAL_RCC_ClockConfig+0x128>)
 8003d2e:	f012 0f04 	tst.w	r2, #4
 8003d32:	d16c      	bne.n	8003e0e <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d34:	0713      	lsls	r3, r2, #28
 8003d36:	d506      	bpl.n	8003d46 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d38:	686b      	ldr	r3, [r5, #4]
 8003d3a:	6922      	ldr	r2, [r4, #16]
 8003d3c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003d40:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003d44:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d46:	f7ff ff9d 	bl	8003c84 <HAL_RCC_GetSysClockFreq>
 8003d4a:	686b      	ldr	r3, [r5, #4]
 8003d4c:	4a35      	ldr	r2, [pc, #212]	; (8003e24 <HAL_RCC_ClockConfig+0x12c>)
 8003d4e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003d52:	5cd3      	ldrb	r3, [r2, r3]
 8003d54:	40d8      	lsrs	r0, r3
 8003d56:	4b34      	ldr	r3, [pc, #208]	; (8003e28 <HAL_RCC_ClockConfig+0x130>)
 8003d58:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003d5a:	4b34      	ldr	r3, [pc, #208]	; (8003e2c <HAL_RCC_ClockConfig+0x134>)
 8003d5c:	6818      	ldr	r0, [r3, #0]
 8003d5e:	f7fe fe87 	bl	8002a70 <HAL_InitTick>
  return HAL_OK;
 8003d62:	2000      	movs	r0, #0
 8003d64:	e7ce      	b.n	8003d04 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d66:	6813      	ldr	r3, [r2, #0]
 8003d68:	f023 0307 	bic.w	r3, r3, #7
 8003d6c:	430b      	orrs	r3, r1
 8003d6e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d70:	6813      	ldr	r3, [r2, #0]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	428b      	cmp	r3, r1
 8003d78:	d1c3      	bne.n	8003d02 <HAL_RCC_ClockConfig+0xa>
 8003d7a:	e7cb      	b.n	8003d14 <HAL_RCC_ClockConfig+0x1c>
 8003d7c:	4b28      	ldr	r3, [pc, #160]	; (8003e20 <HAL_RCC_ClockConfig+0x128>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d7e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d82:	bf1e      	ittt	ne
 8003d84:	685a      	ldrne	r2, [r3, #4]
 8003d86:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8003d8a:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d8c:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d8e:	bf42      	ittt	mi
 8003d90:	685a      	ldrmi	r2, [r3, #4]
 8003d92:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8003d96:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	68a0      	ldr	r0, [r4, #8]
 8003d9c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003da0:	4302      	orrs	r2, r0
 8003da2:	605a      	str	r2, [r3, #4]
 8003da4:	e7b9      	b.n	8003d1a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003da6:	6862      	ldr	r2, [r4, #4]
 8003da8:	4e1d      	ldr	r6, [pc, #116]	; (8003e20 <HAL_RCC_ClockConfig+0x128>)
 8003daa:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dac:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dae:	d11a      	bne.n	8003de6 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003db0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003db4:	d0a5      	beq.n	8003d02 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003db6:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003db8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dbc:	f023 0303 	bic.w	r3, r3, #3
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003dc4:	f7fe fe96 	bl	8002af4 <HAL_GetTick>
 8003dc8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dca:	6873      	ldr	r3, [r6, #4]
 8003dcc:	6862      	ldr	r2, [r4, #4]
 8003dce:	f003 030c 	and.w	r3, r3, #12
 8003dd2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003dd6:	d0a2      	beq.n	8003d1e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dd8:	f7fe fe8c 	bl	8002af4 <HAL_GetTick>
 8003ddc:	1bc0      	subs	r0, r0, r7
 8003dde:	4540      	cmp	r0, r8
 8003de0:	d9f3      	bls.n	8003dca <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8003de2:	2003      	movs	r0, #3
 8003de4:	e78e      	b.n	8003d04 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003de6:	2a02      	cmp	r2, #2
 8003de8:	d102      	bne.n	8003df0 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dea:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003dee:	e7e1      	b.n	8003db4 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df0:	f013 0f02 	tst.w	r3, #2
 8003df4:	e7de      	b.n	8003db4 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df6:	6813      	ldr	r3, [r2, #0]
 8003df8:	f023 0307 	bic.w	r3, r3, #7
 8003dfc:	432b      	orrs	r3, r5
 8003dfe:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e00:	6813      	ldr	r3, [r2, #0]
 8003e02:	f003 0307 	and.w	r3, r3, #7
 8003e06:	42ab      	cmp	r3, r5
 8003e08:	f47f af7b 	bne.w	8003d02 <HAL_RCC_ClockConfig+0xa>
 8003e0c:	e78d      	b.n	8003d2a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e0e:	686b      	ldr	r3, [r5, #4]
 8003e10:	68e1      	ldr	r1, [r4, #12]
 8003e12:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003e16:	430b      	orrs	r3, r1
 8003e18:	606b      	str	r3, [r5, #4]
 8003e1a:	e78b      	b.n	8003d34 <HAL_RCC_ClockConfig+0x3c>
 8003e1c:	40022000 	.word	0x40022000
 8003e20:	40021000 	.word	0x40021000
 8003e24:	0800ba08 	.word	0x0800ba08
 8003e28:	20000010 	.word	0x20000010
 8003e2c:	20000018 	.word	0x20000018

08003e30 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e30:	4b04      	ldr	r3, [pc, #16]	; (8003e44 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003e32:	4a05      	ldr	r2, [pc, #20]	; (8003e48 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003e3a:	5cd3      	ldrb	r3, [r2, r3]
 8003e3c:	4a03      	ldr	r2, [pc, #12]	; (8003e4c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003e3e:	6810      	ldr	r0, [r2, #0]
}
 8003e40:	40d8      	lsrs	r0, r3
 8003e42:	4770      	bx	lr
 8003e44:	40021000 	.word	0x40021000
 8003e48:	0800ba18 	.word	0x0800ba18
 8003e4c:	20000010 	.word	0x20000010

08003e50 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e50:	4b04      	ldr	r3, [pc, #16]	; (8003e64 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003e52:	4a05      	ldr	r2, [pc, #20]	; (8003e68 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003e5a:	5cd3      	ldrb	r3, [r2, r3]
 8003e5c:	4a03      	ldr	r2, [pc, #12]	; (8003e6c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003e5e:	6810      	ldr	r0, [r2, #0]
}
 8003e60:	40d8      	lsrs	r0, r3
 8003e62:	4770      	bx	lr
 8003e64:	40021000 	.word	0x40021000
 8003e68:	0800ba18 	.word	0x0800ba18
 8003e6c:	20000010 	.word	0x20000010

08003e70 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e70:	6803      	ldr	r3, [r0, #0]
{
 8003e72:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e76:	07d9      	lsls	r1, r3, #31
{
 8003e78:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e7a:	d520      	bpl.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e7c:	4c35      	ldr	r4, [pc, #212]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8003e7e:	69e3      	ldr	r3, [r4, #28]
 8003e80:	00da      	lsls	r2, r3, #3
 8003e82:	d432      	bmi.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8003e84:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e86:	69e3      	ldr	r3, [r4, #28]
 8003e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e8c:	61e3      	str	r3, [r4, #28]
 8003e8e:	69e3      	ldr	r3, [r4, #28]
 8003e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e94:	9301      	str	r3, [sp, #4]
 8003e96:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e98:	4e2f      	ldr	r6, [pc, #188]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003e9a:	6833      	ldr	r3, [r6, #0]
 8003e9c:	05db      	lsls	r3, r3, #23
 8003e9e:	d526      	bpl.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ea0:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ea2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003ea6:	d136      	bne.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ea8:	6a23      	ldr	r3, [r4, #32]
 8003eaa:	686a      	ldr	r2, [r5, #4]
 8003eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003eb4:	b11f      	cbz	r7, 8003ebe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eb6:	69e3      	ldr	r3, [r4, #28]
 8003eb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ebc:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ebe:	6828      	ldr	r0, [r5, #0]
 8003ec0:	0783      	lsls	r3, r0, #30
 8003ec2:	d506      	bpl.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ec4:	4a23      	ldr	r2, [pc, #140]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8003ec6:	68a9      	ldr	r1, [r5, #8]
 8003ec8:	6853      	ldr	r3, [r2, #4]
 8003eca:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003ece:	430b      	orrs	r3, r1
 8003ed0:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ed2:	f010 0010 	ands.w	r0, r0, #16
 8003ed6:	d01b      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ed8:	4a1e      	ldr	r2, [pc, #120]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8003eda:	68e9      	ldr	r1, [r5, #12]
 8003edc:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003ede:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ee0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003ee4:	430b      	orrs	r3, r1
 8003ee6:	6053      	str	r3, [r2, #4]
 8003ee8:	e012      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8003eea:	2700      	movs	r7, #0
 8003eec:	e7d4      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eee:	6833      	ldr	r3, [r6, #0]
 8003ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ef4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003ef6:	f7fe fdfd 	bl	8002af4 <HAL_GetTick>
 8003efa:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003efc:	6833      	ldr	r3, [r6, #0]
 8003efe:	05d8      	lsls	r0, r3, #23
 8003f00:	d4ce      	bmi.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f02:	f7fe fdf7 	bl	8002af4 <HAL_GetTick>
 8003f06:	eba0 0008 	sub.w	r0, r0, r8
 8003f0a:	2864      	cmp	r0, #100	; 0x64
 8003f0c:	d9f6      	bls.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8003f0e:	2003      	movs	r0, #3
}
 8003f10:	b002      	add	sp, #8
 8003f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f16:	686a      	ldr	r2, [r5, #4]
 8003f18:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d0c3      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f20:	2001      	movs	r0, #1
 8003f22:	4a0e      	ldr	r2, [pc, #56]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f24:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f26:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f28:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f2a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f2e:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8003f30:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f32:	07d9      	lsls	r1, r3, #31
 8003f34:	d5b8      	bpl.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8003f36:	f7fe fddd 	bl	8002af4 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f3a:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003f3e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f40:	6a23      	ldr	r3, [r4, #32]
 8003f42:	079a      	lsls	r2, r3, #30
 8003f44:	d4b0      	bmi.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f46:	f7fe fdd5 	bl	8002af4 <HAL_GetTick>
 8003f4a:	1b80      	subs	r0, r0, r6
 8003f4c:	4540      	cmp	r0, r8
 8003f4e:	d9f7      	bls.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8003f50:	e7dd      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8003f52:	bf00      	nop
 8003f54:	40021000 	.word	0x40021000
 8003f58:	40007000 	.word	0x40007000
 8003f5c:	42420440 	.word	0x42420440

08003f60 <SPI_WaitFlagStateUntilTimeout.constprop.6>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8003f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f62:	4604      	mov	r4, r0
 8003f64:	460e      	mov	r6, r1
 8003f66:	4615      	mov	r5, r2
 8003f68:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f6a:	6821      	ldr	r1, [r4, #0]
 8003f6c:	688a      	ldr	r2, [r1, #8]
 8003f6e:	ea36 0302 	bics.w	r3, r6, r2
 8003f72:	d001      	beq.n	8003f78 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8003f74:	2000      	movs	r0, #0
 8003f76:	e02d      	b.n	8003fd4 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x74>
    if (Timeout != HAL_MAX_DELAY)
 8003f78:	1c6b      	adds	r3, r5, #1
 8003f7a:	d0f7      	beq.n	8003f6c <SPI_WaitFlagStateUntilTimeout.constprop.6+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003f7c:	f7fe fdba 	bl	8002af4 <HAL_GetTick>
 8003f80:	1bc0      	subs	r0, r0, r7
 8003f82:	4285      	cmp	r5, r0
 8003f84:	d8f1      	bhi.n	8003f6a <SPI_WaitFlagStateUntilTimeout.constprop.6+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f86:	6823      	ldr	r3, [r4, #0]
 8003f88:	685a      	ldr	r2, [r3, #4]
 8003f8a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f8e:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f90:	6862      	ldr	r2, [r4, #4]
 8003f92:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003f96:	d10a      	bne.n	8003fae <SPI_WaitFlagStateUntilTimeout.constprop.6+0x4e>
 8003f98:	68a2      	ldr	r2, [r4, #8]
 8003f9a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003f9e:	d002      	beq.n	8003fa6 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fa0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003fa4:	d103      	bne.n	8003fae <SPI_WaitFlagStateUntilTimeout.constprop.6+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fac:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003fb0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003fb4:	d107      	bne.n	8003fc6 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x66>
          SPI_RESET_CRC(hspi);
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fc4:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8003fcc:	2300      	movs	r3, #0
 8003fce:	2003      	movs	r0, #3
 8003fd0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8003fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003fd6 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003fd6:	b510      	push	{r4, lr}
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fd8:	4613      	mov	r3, r2
 8003fda:	460a      	mov	r2, r1
 8003fdc:	2180      	movs	r1, #128	; 0x80
{
 8003fde:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fe0:	f7ff ffbe 	bl	8003f60 <SPI_WaitFlagStateUntilTimeout.constprop.6>
 8003fe4:	b120      	cbz	r0, 8003ff0 <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8003fe6:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fe8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003fea:	f043 0320 	orr.w	r3, r3, #32
 8003fee:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8003ff0:	bd10      	pop	{r4, pc}

08003ff2 <HAL_SPI_Init>:
{
 8003ff2:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8003ff4:	4604      	mov	r4, r0
 8003ff6:	2800      	cmp	r0, #0
 8003ff8:	d034      	beq.n	8004064 <HAL_SPI_Init+0x72>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ffe:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8004002:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004006:	b91b      	cbnz	r3, 8004010 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8004008:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800400c:	f7fe fbae 	bl	800276c <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004010:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8004012:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004014:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8004018:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800401a:	69a1      	ldr	r1, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 800401c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004020:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004022:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8004026:	4303      	orrs	r3, r0
 8004028:	68e0      	ldr	r0, [r4, #12]
 800402a:	4303      	orrs	r3, r0
 800402c:	6920      	ldr	r0, [r4, #16]
 800402e:	4303      	orrs	r3, r0
 8004030:	6960      	ldr	r0, [r4, #20]
 8004032:	4303      	orrs	r3, r0
 8004034:	69e0      	ldr	r0, [r4, #28]
 8004036:	4303      	orrs	r3, r0
 8004038:	6a20      	ldr	r0, [r4, #32]
 800403a:	4303      	orrs	r3, r0
 800403c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800403e:	4303      	orrs	r3, r0
 8004040:	f401 7000 	and.w	r0, r1, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004044:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004046:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004048:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800404c:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800404e:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004050:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004052:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004054:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004058:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 800405a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800405c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800405e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8004062:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004064:	2001      	movs	r0, #1
 8004066:	e7fc      	b.n	8004062 <HAL_SPI_Init+0x70>

08004068 <HAL_SPI_TransmitReceive>:
{
 8004068:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800406c:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 800406e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8004072:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8004074:	2b01      	cmp	r3, #1
{
 8004076:	460d      	mov	r5, r1
 8004078:	4691      	mov	r9, r2
 800407a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 800407c:	f000 80e2 	beq.w	8004244 <HAL_SPI_TransmitReceive+0x1dc>
 8004080:	2301      	movs	r3, #1
 8004082:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004086:	f7fe fd35 	bl	8002af4 <HAL_GetTick>
  tmp_state           = hspi->State;
 800408a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 800408e:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 8004090:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004092:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 8004094:	6861      	ldr	r1, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004096:	d00a      	beq.n	80040ae <HAL_SPI_TransmitReceive+0x46>
 8004098:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 800409c:	f040 80d0 	bne.w	8004240 <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80040a0:	68a0      	ldr	r0, [r4, #8]
 80040a2:	2800      	cmp	r0, #0
 80040a4:	f040 80cc 	bne.w	8004240 <HAL_SPI_TransmitReceive+0x1d8>
 80040a8:	2b04      	cmp	r3, #4
 80040aa:	f040 80c9 	bne.w	8004240 <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80040ae:	2d00      	cmp	r5, #0
 80040b0:	f000 80c4 	beq.w	800423c <HAL_SPI_TransmitReceive+0x1d4>
 80040b4:	f1b9 0f00 	cmp.w	r9, #0
 80040b8:	f000 80c0 	beq.w	800423c <HAL_SPI_TransmitReceive+0x1d4>
 80040bc:	2e00      	cmp	r6, #0
 80040be:	f000 80bd 	beq.w	800423c <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80040c2:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80040c6:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80040ca:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80040cc:	bf1c      	itt	ne
 80040ce:	2305      	movne	r3, #5
 80040d0:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040d4:	2300      	movs	r3, #0
 80040d6:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 80040d8:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040dc:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 80040de:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 80040e0:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040e2:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 80040e4:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040e6:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80040e8:	bf58      	it	pl
 80040ea:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80040ec:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 80040ee:	bf58      	it	pl
 80040f0:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 80040f4:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 80040f6:	bf58      	it	pl
 80040f8:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040fa:	68e2      	ldr	r2, [r4, #12]
 80040fc:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8004100:	d158      	bne.n	80041b4 <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004102:	b109      	cbz	r1, 8004108 <HAL_SPI_TransmitReceive+0xa0>
 8004104:	2e01      	cmp	r6, #1
 8004106:	d107      	bne.n	8004118 <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004108:	f835 2b02 	ldrh.w	r2, [r5], #2
 800410c:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800410e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004110:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004112:	3b01      	subs	r3, #1
 8004114:	b29b      	uxth	r3, r3
 8004116:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8004118:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800411a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800411c:	b29b      	uxth	r3, r3
 800411e:	b9ab      	cbnz	r3, 800414c <HAL_SPI_TransmitReceive+0xe4>
 8004120:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004122:	b29b      	uxth	r3, r3
 8004124:	b993      	cbnz	r3, 800414c <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004126:	4642      	mov	r2, r8
 8004128:	4639      	mov	r1, r7
 800412a:	4620      	mov	r0, r4
 800412c:	f7ff ff53 	bl	8003fd6 <SPI_EndRxTxTransaction>
 8004130:	2800      	cmp	r0, #0
 8004132:	f040 8081 	bne.w	8004238 <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004136:	68a3      	ldr	r3, [r4, #8]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d132      	bne.n	80041a2 <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800413c:	6823      	ldr	r3, [r4, #0]
 800413e:	9001      	str	r0, [sp, #4]
 8004140:	68da      	ldr	r2, [r3, #12]
 8004142:	9201      	str	r2, [sp, #4]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	9301      	str	r3, [sp, #4]
 8004148:	9b01      	ldr	r3, [sp, #4]
 800414a:	e02a      	b.n	80041a2 <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800414c:	6822      	ldr	r2, [r4, #0]
 800414e:	6893      	ldr	r3, [r2, #8]
 8004150:	0799      	lsls	r1, r3, #30
 8004152:	d50d      	bpl.n	8004170 <HAL_SPI_TransmitReceive+0x108>
 8004154:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004156:	b29b      	uxth	r3, r3
 8004158:	b153      	cbz	r3, 8004170 <HAL_SPI_TransmitReceive+0x108>
 800415a:	b14d      	cbz	r5, 8004170 <HAL_SPI_TransmitReceive+0x108>
        txallowed = 0U;
 800415c:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800415e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004160:	f833 1b02 	ldrh.w	r1, [r3], #2
 8004164:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004166:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004168:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800416a:	3b01      	subs	r3, #1
 800416c:	b29b      	uxth	r3, r3
 800416e:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004170:	6893      	ldr	r3, [r2, #8]
 8004172:	07db      	lsls	r3, r3, #31
 8004174:	d50c      	bpl.n	8004190 <HAL_SPI_TransmitReceive+0x128>
 8004176:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004178:	b29b      	uxth	r3, r3
 800417a:	b14b      	cbz	r3, 8004190 <HAL_SPI_TransmitReceive+0x128>
        txallowed = 1U;
 800417c:	2501      	movs	r5, #1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800417e:	68d2      	ldr	r2, [r2, #12]
 8004180:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004182:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004186:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004188:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800418a:	3b01      	subs	r3, #1
 800418c:	b29b      	uxth	r3, r3
 800418e:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004190:	f7fe fcb0 	bl	8002af4 <HAL_GetTick>
 8004194:	eba0 0008 	sub.w	r0, r0, r8
 8004198:	4287      	cmp	r7, r0
 800419a:	d8be      	bhi.n	800411a <HAL_SPI_TransmitReceive+0xb2>
 800419c:	1c7e      	adds	r6, r7, #1
 800419e:	d0bc      	beq.n	800411a <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 80041a0:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80041a2:	2301      	movs	r3, #1
 80041a4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80041a8:	2300      	movs	r3, #0
 80041aa:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80041ae:	b003      	add	sp, #12
 80041b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041b4:	b109      	cbz	r1, 80041ba <HAL_SPI_TransmitReceive+0x152>
 80041b6:	2e01      	cmp	r6, #1
 80041b8:	d108      	bne.n	80041cc <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041ba:	782a      	ldrb	r2, [r5, #0]
 80041bc:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80041c0:	3301      	adds	r3, #1
 80041c2:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80041c4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80041c6:	3b01      	subs	r3, #1
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80041cc:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041ce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	b91b      	cbnz	r3, 80041dc <HAL_SPI_TransmitReceive+0x174>
 80041d4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0a4      	beq.n	8004126 <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041dc:	6822      	ldr	r2, [r4, #0]
 80041de:	6893      	ldr	r3, [r2, #8]
 80041e0:	0798      	lsls	r0, r3, #30
 80041e2:	d50e      	bpl.n	8004202 <HAL_SPI_TransmitReceive+0x19a>
 80041e4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	b15b      	cbz	r3, 8004202 <HAL_SPI_TransmitReceive+0x19a>
 80041ea:	b155      	cbz	r5, 8004202 <HAL_SPI_TransmitReceive+0x19a>
        txallowed = 0U;
 80041ec:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80041ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 80041f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80041f6:	3301      	adds	r3, #1
 80041f8:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80041fa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80041fc:	3b01      	subs	r3, #1
 80041fe:	b29b      	uxth	r3, r3
 8004200:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004202:	6822      	ldr	r2, [r4, #0]
 8004204:	6893      	ldr	r3, [r2, #8]
 8004206:	07d9      	lsls	r1, r3, #31
 8004208:	d50d      	bpl.n	8004226 <HAL_SPI_TransmitReceive+0x1be>
 800420a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800420c:	b29b      	uxth	r3, r3
 800420e:	b153      	cbz	r3, 8004226 <HAL_SPI_TransmitReceive+0x1be>
        txallowed = 1U;
 8004210:	2501      	movs	r5, #1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004212:	68d2      	ldr	r2, [r2, #12]
 8004214:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004216:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004218:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800421a:	3301      	adds	r3, #1
 800421c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800421e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004220:	3b01      	subs	r3, #1
 8004222:	b29b      	uxth	r3, r3
 8004224:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004226:	f7fe fc65 	bl	8002af4 <HAL_GetTick>
 800422a:	eba0 0008 	sub.w	r0, r0, r8
 800422e:	4287      	cmp	r7, r0
 8004230:	d8cd      	bhi.n	80041ce <HAL_SPI_TransmitReceive+0x166>
 8004232:	1c7b      	adds	r3, r7, #1
 8004234:	d0cb      	beq.n	80041ce <HAL_SPI_TransmitReceive+0x166>
 8004236:	e7b3      	b.n	80041a0 <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004238:	2320      	movs	r3, #32
 800423a:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 800423c:	2001      	movs	r0, #1
 800423e:	e7b0      	b.n	80041a2 <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 8004240:	2002      	movs	r0, #2
 8004242:	e7ae      	b.n	80041a2 <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 8004244:	2002      	movs	r0, #2
 8004246:	e7b2      	b.n	80041ae <HAL_SPI_TransmitReceive+0x146>

08004248 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004248:	6a03      	ldr	r3, [r0, #32]
{
 800424a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800424c:	f023 0301 	bic.w	r3, r3, #1
 8004250:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004252:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004254:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004256:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004258:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800425a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800425e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004260:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8004262:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8004266:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004268:	4d0a      	ldr	r5, [pc, #40]	; (8004294 <TIM_OC1_SetConfig+0x4c>)
 800426a:	42a8      	cmp	r0, r5
 800426c:	d10b      	bne.n	8004286 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800426e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8004270:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004274:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004276:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800427a:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800427e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8004280:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004284:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004286:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004288:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800428a:	684a      	ldr	r2, [r1, #4]
 800428c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800428e:	6203      	str	r3, [r0, #32]
}
 8004290:	bd70      	pop	{r4, r5, r6, pc}
 8004292:	bf00      	nop
 8004294:	40012c00 	.word	0x40012c00

08004298 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004298:	6a03      	ldr	r3, [r0, #32]
{
 800429a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800429c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042a0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042a2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042a4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042a6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042a8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042aa:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80042ae:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042b0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80042b2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042b6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042ba:	4d0b      	ldr	r5, [pc, #44]	; (80042e8 <TIM_OC3_SetConfig+0x50>)
 80042bc:	42a8      	cmp	r0, r5
 80042be:	d10d      	bne.n	80042dc <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042c0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80042c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042c6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042ca:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042ce:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80042d2:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80042d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042d8:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042dc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042de:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042e0:	684a      	ldr	r2, [r1, #4]
 80042e2:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042e4:	6203      	str	r3, [r0, #32]
}
 80042e6:	bd70      	pop	{r4, r5, r6, pc}
 80042e8:	40012c00 	.word	0x40012c00

080042ec <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042ec:	6a03      	ldr	r3, [r0, #32]
{
 80042ee:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042f4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042f6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042f8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042fa:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042fc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042fe:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004302:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004306:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8004308:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800430c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004310:	4d06      	ldr	r5, [pc, #24]	; (800432c <TIM_OC4_SetConfig+0x40>)
 8004312:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004314:	bf02      	ittt	eq
 8004316:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004318:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800431c:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004320:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004322:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004324:	684a      	ldr	r2, [r1, #4]
 8004326:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004328:	6203      	str	r3, [r0, #32]
}
 800432a:	bd30      	pop	{r4, r5, pc}
 800432c:	40012c00 	.word	0x40012c00

08004330 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004330:	4a1a      	ldr	r2, [pc, #104]	; (800439c <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8004332:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004334:	4290      	cmp	r0, r2
 8004336:	d00a      	beq.n	800434e <TIM_Base_SetConfig+0x1e>
 8004338:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800433c:	d007      	beq.n	800434e <TIM_Base_SetConfig+0x1e>
 800433e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004342:	4290      	cmp	r0, r2
 8004344:	d003      	beq.n	800434e <TIM_Base_SetConfig+0x1e>
 8004346:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800434a:	4290      	cmp	r0, r2
 800434c:	d115      	bne.n	800437a <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 800434e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004354:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004356:	4a11      	ldr	r2, [pc, #68]	; (800439c <TIM_Base_SetConfig+0x6c>)
 8004358:	4290      	cmp	r0, r2
 800435a:	d00a      	beq.n	8004372 <TIM_Base_SetConfig+0x42>
 800435c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004360:	d007      	beq.n	8004372 <TIM_Base_SetConfig+0x42>
 8004362:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004366:	4290      	cmp	r0, r2
 8004368:	d003      	beq.n	8004372 <TIM_Base_SetConfig+0x42>
 800436a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800436e:	4290      	cmp	r0, r2
 8004370:	d103      	bne.n	800437a <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004372:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004374:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004378:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800437a:	694a      	ldr	r2, [r1, #20]
 800437c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004380:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004382:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004384:	688b      	ldr	r3, [r1, #8]
 8004386:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004388:	680b      	ldr	r3, [r1, #0]
 800438a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800438c:	4b03      	ldr	r3, [pc, #12]	; (800439c <TIM_Base_SetConfig+0x6c>)
 800438e:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8004390:	bf04      	itt	eq
 8004392:	690b      	ldreq	r3, [r1, #16]
 8004394:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004396:	2301      	movs	r3, #1
 8004398:	6143      	str	r3, [r0, #20]
}
 800439a:	4770      	bx	lr
 800439c:	40012c00 	.word	0x40012c00

080043a0 <HAL_TIM_PWM_Init>:
{
 80043a0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80043a2:	4604      	mov	r4, r0
 80043a4:	b1a0      	cbz	r0, 80043d0 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80043a6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80043aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80043ae:	b91b      	cbnz	r3, 80043b8 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80043b0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80043b4:	f7fe fa16 	bl	80027e4 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80043b8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043ba:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80043bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043c0:	1d21      	adds	r1, r4, #4
 80043c2:	f7ff ffb5 	bl	8004330 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80043c6:	2301      	movs	r3, #1
  return HAL_OK;
 80043c8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80043ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80043ce:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80043d0:	2001      	movs	r0, #1
 80043d2:	e7fc      	b.n	80043ce <HAL_TIM_PWM_Init+0x2e>

080043d4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043d4:	6a03      	ldr	r3, [r0, #32]
{
 80043d6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043d8:	f023 0310 	bic.w	r3, r3, #16
 80043dc:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80043de:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80043e0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80043e2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043e4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043e6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043ea:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043ee:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80043f0:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043f4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043f8:	4d0b      	ldr	r5, [pc, #44]	; (8004428 <TIM_OC2_SetConfig+0x54>)
 80043fa:	42a8      	cmp	r0, r5
 80043fc:	d10d      	bne.n	800441a <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043fe:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004400:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004404:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004408:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800440c:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8004410:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8004412:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004416:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800441a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800441c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800441e:	684a      	ldr	r2, [r1, #4]
 8004420:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004422:	6203      	str	r3, [r0, #32]
}
 8004424:	bd70      	pop	{r4, r5, r6, pc}
 8004426:	bf00      	nop
 8004428:	40012c00 	.word	0x40012c00

0800442c <HAL_TIM_PWM_ConfigChannel>:
{
 800442c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800442e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8004432:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004434:	2b01      	cmp	r3, #1
 8004436:	f04f 0002 	mov.w	r0, #2
 800443a:	d025      	beq.n	8004488 <HAL_TIM_PWM_ConfigChannel+0x5c>
 800443c:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800443e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8004442:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8004446:	2a0c      	cmp	r2, #12
 8004448:	d818      	bhi.n	800447c <HAL_TIM_PWM_ConfigChannel+0x50>
 800444a:	e8df f002 	tbb	[pc, r2]
 800444e:	1707      	.short	0x1707
 8004450:	171e1717 	.word	0x171e1717
 8004454:	172f1717 	.word	0x172f1717
 8004458:	1717      	.short	0x1717
 800445a:	40          	.byte	0x40
 800445b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800445c:	6820      	ldr	r0, [r4, #0]
 800445e:	f7ff fef3 	bl	8004248 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004462:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004464:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004466:	699a      	ldr	r2, [r3, #24]
 8004468:	f042 0208 	orr.w	r2, r2, #8
 800446c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800446e:	699a      	ldr	r2, [r3, #24]
 8004470:	f022 0204 	bic.w	r2, r2, #4
 8004474:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004476:	699a      	ldr	r2, [r3, #24]
 8004478:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800447a:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 800447c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800447e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004480:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004484:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004488:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800448a:	6820      	ldr	r0, [r4, #0]
 800448c:	f7ff ffa2 	bl	80043d4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004490:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004492:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004494:	699a      	ldr	r2, [r3, #24]
 8004496:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800449a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800449c:	699a      	ldr	r2, [r3, #24]
 800449e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044a4:	699a      	ldr	r2, [r3, #24]
 80044a6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80044aa:	e7e6      	b.n	800447a <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044ac:	6820      	ldr	r0, [r4, #0]
 80044ae:	f7ff fef3 	bl	8004298 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044b2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044b4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044b6:	69da      	ldr	r2, [r3, #28]
 80044b8:	f042 0208 	orr.w	r2, r2, #8
 80044bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044be:	69da      	ldr	r2, [r3, #28]
 80044c0:	f022 0204 	bic.w	r2, r2, #4
 80044c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044c6:	69da      	ldr	r2, [r3, #28]
 80044c8:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044ca:	61da      	str	r2, [r3, #28]
      break;
 80044cc:	e7d6      	b.n	800447c <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044ce:	6820      	ldr	r0, [r4, #0]
 80044d0:	f7ff ff0c 	bl	80042ec <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044d4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044d6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044d8:	69da      	ldr	r2, [r3, #28]
 80044da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044de:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044e0:	69da      	ldr	r2, [r3, #28]
 80044e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044e6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044e8:	69da      	ldr	r2, [r3, #28]
 80044ea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80044ee:	e7ec      	b.n	80044ca <HAL_TIM_PWM_ConfigChannel+0x9e>

080044f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044f0:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044f2:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044f4:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044f6:	f001 011f 	and.w	r1, r1, #31
 80044fa:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80044fc:	ea23 0304 	bic.w	r3, r3, r4
 8004500:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004502:	6a03      	ldr	r3, [r0, #32]
 8004504:	408a      	lsls	r2, r1
 8004506:	431a      	orrs	r2, r3
 8004508:	6202      	str	r2, [r0, #32]
}
 800450a:	bd10      	pop	{r4, pc}

0800450c <HAL_TIM_OC_Start>:
{
 800450c:	b510      	push	{r4, lr}
 800450e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004510:	2201      	movs	r2, #1
 8004512:	6800      	ldr	r0, [r0, #0]
 8004514:	f7ff ffec 	bl	80044f0 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004518:	6823      	ldr	r3, [r4, #0]
 800451a:	4a09      	ldr	r2, [pc, #36]	; (8004540 <HAL_TIM_OC_Start+0x34>)
}
 800451c:	2000      	movs	r0, #0
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800451e:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8004520:	bf02      	ittt	eq
 8004522:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8004524:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8004528:	645a      	streq	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004530:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8004532:	bf1e      	ittt	ne
 8004534:	681a      	ldrne	r2, [r3, #0]
 8004536:	f042 0201 	orrne.w	r2, r2, #1
 800453a:	601a      	strne	r2, [r3, #0]
}
 800453c:	bd10      	pop	{r4, pc}
 800453e:	bf00      	nop
 8004540:	40012c00 	.word	0x40012c00

08004544 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004544:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8004548:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 800454a:	2b01      	cmp	r3, #1
 800454c:	f04f 0302 	mov.w	r3, #2
 8004550:	d014      	beq.n	800457c <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004552:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004554:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8004558:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800455a:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800455c:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800455e:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004560:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004564:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004568:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800456a:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800456c:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800456e:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004570:	2301      	movs	r3, #1
 8004572:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004576:	2300      	movs	r3, #0
 8004578:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800457c:	4618      	mov	r0, r3

  return HAL_OK;
}
 800457e:	bd30      	pop	{r4, r5, pc}

08004580 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004580:	6803      	ldr	r3, [r0, #0]
 8004582:	68da      	ldr	r2, [r3, #12]
 8004584:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004588:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800458a:	695a      	ldr	r2, [r3, #20]
 800458c:	f022 0201 	bic.w	r2, r2, #1
 8004590:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004592:	2320      	movs	r3, #32
 8004594:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8004598:	4770      	bx	lr
	...

0800459c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800459c:	b538      	push	{r3, r4, r5, lr}
 800459e:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045a0:	6803      	ldr	r3, [r0, #0]
 80045a2:	68c1      	ldr	r1, [r0, #12]
 80045a4:	691a      	ldr	r2, [r3, #16]
 80045a6:	2419      	movs	r4, #25
 80045a8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80045ac:	430a      	orrs	r2, r1
 80045ae:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045b0:	6882      	ldr	r2, [r0, #8]
 80045b2:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80045b4:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045b6:	4302      	orrs	r2, r0
 80045b8:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 80045ba:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80045be:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045c2:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80045c4:	430a      	orrs	r2, r1
 80045c6:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045c8:	695a      	ldr	r2, [r3, #20]
 80045ca:	69a9      	ldr	r1, [r5, #24]
 80045cc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80045d0:	430a      	orrs	r2, r1
 80045d2:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80045d4:	4a0d      	ldr	r2, [pc, #52]	; (800460c <UART_SetConfig+0x70>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d114      	bne.n	8004604 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80045da:	f7ff fc39 	bl	8003e50 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045de:	4360      	muls	r0, r4
 80045e0:	686c      	ldr	r4, [r5, #4]
 80045e2:	2264      	movs	r2, #100	; 0x64
 80045e4:	00a4      	lsls	r4, r4, #2
 80045e6:	fbb0 f0f4 	udiv	r0, r0, r4
 80045ea:	fbb0 f1f2 	udiv	r1, r0, r2
 80045ee:	fb02 0311 	mls	r3, r2, r1, r0
 80045f2:	011b      	lsls	r3, r3, #4
 80045f4:	3332      	adds	r3, #50	; 0x32
 80045f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80045fa:	682c      	ldr	r4, [r5, #0]
 80045fc:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8004600:	60a3      	str	r3, [r4, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 8004602:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8004604:	f7ff fc14 	bl	8003e30 <HAL_RCC_GetPCLK1Freq>
 8004608:	e7e9      	b.n	80045de <UART_SetConfig+0x42>
 800460a:	bf00      	nop
 800460c:	40013800 	.word	0x40013800

08004610 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8004610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004612:	4604      	mov	r4, r0
 8004614:	460e      	mov	r6, r1
 8004616:	4617      	mov	r7, r2
 8004618:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800461a:	6821      	ldr	r1, [r4, #0]
 800461c:	680b      	ldr	r3, [r1, #0]
 800461e:	ea36 0303 	bics.w	r3, r6, r3
 8004622:	d101      	bne.n	8004628 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8004624:	2000      	movs	r0, #0
 8004626:	e014      	b.n	8004652 <UART_WaitOnFlagUntilTimeout.constprop.3+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8004628:	1c6b      	adds	r3, r5, #1
 800462a:	d0f7      	beq.n	800461c <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800462c:	b995      	cbnz	r5, 8004654 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800462e:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8004630:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004632:	68da      	ldr	r2, [r3, #12]
 8004634:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004638:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800463a:	695a      	ldr	r2, [r3, #20]
 800463c:	f022 0201 	bic.w	r2, r2, #1
 8004640:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8004642:	2320      	movs	r3, #32
 8004644:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004648:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800464c:	2300      	movs	r3, #0
 800464e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8004652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004654:	f7fe fa4e 	bl	8002af4 <HAL_GetTick>
 8004658:	1bc0      	subs	r0, r0, r7
 800465a:	4285      	cmp	r5, r0
 800465c:	d2dd      	bcs.n	800461a <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800465e:	e7e6      	b.n	800462e <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08004660 <HAL_UART_Init>:
{
 8004660:	b510      	push	{r4, lr}
  if (huart == NULL)
 8004662:	4604      	mov	r4, r0
 8004664:	b340      	cbz	r0, 80046b8 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004666:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800466a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800466e:	b91b      	cbnz	r3, 8004678 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8004670:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8004674:	f7fe f8ec 	bl	8002850 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8004678:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800467a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800467c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8004680:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8004682:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8004684:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004688:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800468a:	f7ff ff87 	bl	800459c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800468e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004690:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004692:	691a      	ldr	r2, [r3, #16]
 8004694:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004698:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800469a:	695a      	ldr	r2, [r3, #20]
 800469c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046a0:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80046a2:	68da      	ldr	r2, [r3, #12]
 80046a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046a8:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80046aa:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ac:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80046ae:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80046b2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80046b6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80046b8:	2001      	movs	r0, #1
 80046ba:	e7fc      	b.n	80046b6 <HAL_UART_Init+0x56>

080046bc <HAL_UART_Transmit>:
{
 80046bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046c0:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80046c2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 80046c6:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80046c8:	2b20      	cmp	r3, #32
{
 80046ca:	460d      	mov	r5, r1
 80046cc:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80046ce:	d14c      	bne.n	800476a <HAL_UART_Transmit+0xae>
    if ((pData == NULL) || (Size == 0U))
 80046d0:	2900      	cmp	r1, #0
 80046d2:	d048      	beq.n	8004766 <HAL_UART_Transmit+0xaa>
 80046d4:	2a00      	cmp	r2, #0
 80046d6:	d046      	beq.n	8004766 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 80046d8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d044      	beq.n	800476a <HAL_UART_Transmit+0xae>
 80046e0:	2301      	movs	r3, #1
 80046e2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046e6:	2300      	movs	r3, #0
 80046e8:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046ea:	2321      	movs	r3, #33	; 0x21
 80046ec:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80046f0:	f7fe fa00 	bl	8002af4 <HAL_GetTick>
 80046f4:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 80046f6:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80046fa:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046fe:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004700:	b29b      	uxth	r3, r3
 8004702:	b963      	cbnz	r3, 800471e <HAL_UART_Transmit+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004704:	463b      	mov	r3, r7
 8004706:	4632      	mov	r2, r6
 8004708:	2140      	movs	r1, #64	; 0x40
 800470a:	4620      	mov	r0, r4
 800470c:	f7ff ff80 	bl	8004610 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8004710:	b9a0      	cbnz	r0, 800473c <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 8004712:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8004714:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8004718:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 800471c:	e00f      	b.n	800473e <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 800471e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004720:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8004722:	3b01      	subs	r3, #1
 8004724:	b29b      	uxth	r3, r3
 8004726:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004728:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800472a:	2180      	movs	r1, #128	; 0x80
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800472c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004730:	4620      	mov	r0, r4
 8004732:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004734:	d10e      	bne.n	8004754 <HAL_UART_Transmit+0x98>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004736:	f7ff ff6b 	bl	8004610 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800473a:	b110      	cbz	r0, 8004742 <HAL_UART_Transmit+0x86>
          return HAL_TIMEOUT;
 800473c:	2003      	movs	r0, #3
}
 800473e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004742:	882b      	ldrh	r3, [r5, #0]
 8004744:	6822      	ldr	r2, [r4, #0]
 8004746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800474a:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800474c:	6923      	ldr	r3, [r4, #16]
 800474e:	b943      	cbnz	r3, 8004762 <HAL_UART_Transmit+0xa6>
          pData += 2U;
 8004750:	3502      	adds	r5, #2
 8004752:	e7d4      	b.n	80046fe <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004754:	f7ff ff5c 	bl	8004610 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8004758:	2800      	cmp	r0, #0
 800475a:	d1ef      	bne.n	800473c <HAL_UART_Transmit+0x80>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800475c:	6823      	ldr	r3, [r4, #0]
 800475e:	782a      	ldrb	r2, [r5, #0]
 8004760:	605a      	str	r2, [r3, #4]
 8004762:	3501      	adds	r5, #1
 8004764:	e7cb      	b.n	80046fe <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8004766:	2001      	movs	r0, #1
 8004768:	e7e9      	b.n	800473e <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 800476a:	2002      	movs	r0, #2
 800476c:	e7e7      	b.n	800473e <HAL_UART_Transmit+0x82>

0800476e <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800476e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8004772:	2b20      	cmp	r3, #32
 8004774:	d120      	bne.n	80047b8 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8004776:	b1e9      	cbz	r1, 80047b4 <HAL_UART_Receive_IT+0x46>
 8004778:	b1e2      	cbz	r2, 80047b4 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 800477a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800477e:	2b01      	cmp	r3, #1
 8004780:	d01a      	beq.n	80047b8 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 8004782:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8004784:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004786:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004788:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800478a:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800478c:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004790:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8004792:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004794:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 8004796:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800479a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800479e:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80047a0:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 80047a2:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80047a4:	f041 0101 	orr.w	r1, r1, #1
 80047a8:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80047aa:	68d1      	ldr	r1, [r2, #12]
 80047ac:	f041 0120 	orr.w	r1, r1, #32
 80047b0:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 80047b2:	4770      	bx	lr
      return HAL_ERROR;
 80047b4:	2001      	movs	r0, #1
 80047b6:	4770      	bx	lr
    return HAL_BUSY;
 80047b8:	2002      	movs	r0, #2
}
 80047ba:	4770      	bx	lr

080047bc <HAL_UART_TxCpltCallback>:
 80047bc:	4770      	bx	lr

080047be <HAL_UART_RxCpltCallback>:
 80047be:	4770      	bx	lr

080047c0 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047c0:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 80047c4:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047c6:	2b22      	cmp	r3, #34	; 0x22
 80047c8:	d133      	bne.n	8004832 <UART_Receive_IT+0x72>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80047ca:	6881      	ldr	r1, [r0, #8]
 80047cc:	6904      	ldr	r4, [r0, #16]
 80047ce:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80047d2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80047d4:	6802      	ldr	r2, [r0, #0]
 80047d6:	d123      	bne.n	8004820 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047d8:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80047da:	b9ec      	cbnz	r4, 8004818 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047e0:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 80047e4:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80047e6:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80047e8:	3c01      	subs	r4, #1
 80047ea:	b2a4      	uxth	r4, r4
 80047ec:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80047ee:	b98c      	cbnz	r4, 8004814 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047f0:	6803      	ldr	r3, [r0, #0]
 80047f2:	68da      	ldr	r2, [r3, #12]
 80047f4:	f022 0220 	bic.w	r2, r2, #32
 80047f8:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80047fa:	68da      	ldr	r2, [r3, #12]
 80047fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004800:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004802:	695a      	ldr	r2, [r3, #20]
 8004804:	f022 0201 	bic.w	r2, r2, #1
 8004808:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800480a:	2320      	movs	r3, #32
 800480c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8004810:	f7ff ffd5 	bl	80047be <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8004814:	2000      	movs	r0, #0
 8004816:	e00d      	b.n	8004834 <UART_Receive_IT+0x74>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004818:	b2d2      	uxtb	r2, r2
 800481a:	f823 2b01 	strh.w	r2, [r3], #1
 800481e:	e7e1      	b.n	80047e4 <UART_Receive_IT+0x24>
 8004820:	1c59      	adds	r1, r3, #1
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004822:	6852      	ldr	r2, [r2, #4]
 8004824:	6281      	str	r1, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004826:	b90c      	cbnz	r4, 800482c <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004828:	701a      	strb	r2, [r3, #0]
 800482a:	e7dc      	b.n	80047e6 <UART_Receive_IT+0x26>
 800482c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004830:	e7fa      	b.n	8004828 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8004832:	2002      	movs	r0, #2
}
 8004834:	bd10      	pop	{r4, pc}

08004836 <HAL_UART_ErrorCallback>:
 8004836:	4770      	bx	lr

08004838 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004838:	6803      	ldr	r3, [r0, #0]
{
 800483a:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800483c:	681a      	ldr	r2, [r3, #0]
{
 800483e:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8004840:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004842:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004844:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8004846:	d107      	bne.n	8004858 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004848:	0696      	lsls	r6, r2, #26
 800484a:	d558      	bpl.n	80048fe <HAL_UART_IRQHandler+0xc6>
 800484c:	068d      	lsls	r5, r1, #26
 800484e:	d556      	bpl.n	80048fe <HAL_UART_IRQHandler+0xc6>
}
 8004850:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8004854:	f7ff bfb4 	b.w	80047c0 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004858:	f015 0501 	ands.w	r5, r5, #1
 800485c:	d102      	bne.n	8004864 <HAL_UART_IRQHandler+0x2c>
 800485e:	f411 7f90 	tst.w	r1, #288	; 0x120
 8004862:	d04c      	beq.n	80048fe <HAL_UART_IRQHandler+0xc6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004864:	07d3      	lsls	r3, r2, #31
 8004866:	d505      	bpl.n	8004874 <HAL_UART_IRQHandler+0x3c>
 8004868:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800486a:	bf42      	ittt	mi
 800486c:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 800486e:	f043 0301 	orrmi.w	r3, r3, #1
 8004872:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004874:	0750      	lsls	r0, r2, #29
 8004876:	d504      	bpl.n	8004882 <HAL_UART_IRQHandler+0x4a>
 8004878:	b11d      	cbz	r5, 8004882 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800487a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800487c:	f043 0302 	orr.w	r3, r3, #2
 8004880:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004882:	0793      	lsls	r3, r2, #30
 8004884:	d504      	bpl.n	8004890 <HAL_UART_IRQHandler+0x58>
 8004886:	b11d      	cbz	r5, 8004890 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004888:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800488a:	f043 0304 	orr.w	r3, r3, #4
 800488e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004890:	0716      	lsls	r6, r2, #28
 8004892:	d504      	bpl.n	800489e <HAL_UART_IRQHandler+0x66>
 8004894:	b11d      	cbz	r5, 800489e <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004896:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004898:	f043 0308 	orr.w	r3, r3, #8
 800489c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800489e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80048a0:	b343      	cbz	r3, 80048f4 <HAL_UART_IRQHandler+0xbc>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048a2:	0695      	lsls	r5, r2, #26
 80048a4:	d504      	bpl.n	80048b0 <HAL_UART_IRQHandler+0x78>
 80048a6:	0688      	lsls	r0, r1, #26
 80048a8:	d502      	bpl.n	80048b0 <HAL_UART_IRQHandler+0x78>
        UART_Receive_IT(huart);
 80048aa:	4620      	mov	r0, r4
 80048ac:	f7ff ff88 	bl	80047c0 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80048b0:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 80048b2:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80048b4:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80048b6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80048b8:	0711      	lsls	r1, r2, #28
 80048ba:	d402      	bmi.n	80048c2 <HAL_UART_IRQHandler+0x8a>
 80048bc:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80048c0:	d019      	beq.n	80048f6 <HAL_UART_IRQHandler+0xbe>
        UART_EndRxTransfer(huart);
 80048c2:	f7ff fe5d 	bl	8004580 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c6:	6823      	ldr	r3, [r4, #0]
 80048c8:	695a      	ldr	r2, [r3, #20]
 80048ca:	0652      	lsls	r2, r2, #25
 80048cc:	d50f      	bpl.n	80048ee <HAL_UART_IRQHandler+0xb6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048ce:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80048d0:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048d6:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80048d8:	b148      	cbz	r0, 80048ee <HAL_UART_IRQHandler+0xb6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048da:	4b26      	ldr	r3, [pc, #152]	; (8004974 <HAL_UART_IRQHandler+0x13c>)
 80048dc:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048de:	f7fe f98b 	bl	8002bf8 <HAL_DMA_Abort_IT>
 80048e2:	b138      	cbz	r0, 80048f4 <HAL_UART_IRQHandler+0xbc>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048e4:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 80048e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048ea:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80048ec:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80048ee:	4620      	mov	r0, r4
 80048f0:	f7ff ffa1 	bl	8004836 <HAL_UART_ErrorCallback>
}
 80048f4:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80048f6:	f7ff ff9e 	bl	8004836 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048fa:	63e5      	str	r5, [r4, #60]	; 0x3c
 80048fc:	e7fa      	b.n	80048f4 <HAL_UART_IRQHandler+0xbc>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80048fe:	0616      	lsls	r6, r2, #24
 8004900:	d528      	bpl.n	8004954 <HAL_UART_IRQHandler+0x11c>
 8004902:	060d      	lsls	r5, r1, #24
 8004904:	d526      	bpl.n	8004954 <HAL_UART_IRQHandler+0x11c>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004906:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800490a:	2a21      	cmp	r2, #33	; 0x21
 800490c:	d1f2      	bne.n	80048f4 <HAL_UART_IRQHandler+0xbc>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800490e:	68a1      	ldr	r1, [r4, #8]
 8004910:	6a22      	ldr	r2, [r4, #32]
 8004912:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8004916:	d118      	bne.n	800494a <HAL_UART_IRQHandler+0x112>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004918:	8811      	ldrh	r1, [r2, #0]
 800491a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800491e:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004920:	6921      	ldr	r1, [r4, #16]
 8004922:	b981      	cbnz	r1, 8004946 <HAL_UART_IRQHandler+0x10e>
        huart->pTxBuffPtr += 2U;
 8004924:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8004926:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8004928:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800492a:	3a01      	subs	r2, #1
 800492c:	b292      	uxth	r2, r2
 800492e:	84e2      	strh	r2, [r4, #38]	; 0x26
 8004930:	2a00      	cmp	r2, #0
 8004932:	d1df      	bne.n	80048f4 <HAL_UART_IRQHandler+0xbc>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004934:	68da      	ldr	r2, [r3, #12]
 8004936:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800493a:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800493c:	68da      	ldr	r2, [r3, #12]
 800493e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004942:	60da      	str	r2, [r3, #12]
 8004944:	e7d6      	b.n	80048f4 <HAL_UART_IRQHandler+0xbc>
        huart->pTxBuffPtr += 1U;
 8004946:	3201      	adds	r2, #1
 8004948:	e7ed      	b.n	8004926 <HAL_UART_IRQHandler+0xee>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800494a:	1c51      	adds	r1, r2, #1
 800494c:	6221      	str	r1, [r4, #32]
 800494e:	7812      	ldrb	r2, [r2, #0]
 8004950:	605a      	str	r2, [r3, #4]
 8004952:	e7e9      	b.n	8004928 <HAL_UART_IRQHandler+0xf0>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004954:	0650      	lsls	r0, r2, #25
 8004956:	d5cd      	bpl.n	80048f4 <HAL_UART_IRQHandler+0xbc>
 8004958:	064a      	lsls	r2, r1, #25
 800495a:	d5cb      	bpl.n	80048f4 <HAL_UART_IRQHandler+0xbc>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800495c:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 800495e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004960:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004964:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004966:	2320      	movs	r3, #32
 8004968:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800496c:	f7ff ff26 	bl	80047bc <HAL_UART_TxCpltCallback>
 8004970:	e7c0      	b.n	80048f4 <HAL_UART_IRQHandler+0xbc>
 8004972:	bf00      	nop
 8004974:	08004979 	.word	0x08004979

08004978 <UART_DMAAbortOnError>:
{
 8004978:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 800497a:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800497c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 800497e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004980:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8004982:	f7ff ff58 	bl	8004836 <HAL_UART_ErrorCallback>
}
 8004986:	bd08      	pop	{r3, pc}

08004988 <disk_status>:
#ifdef SD_DEBUG
	sprintf(str1,"disk.cpp disk_status() \r\n");
	HAL_UART_Transmit(&huart3,(uint8_t*)str1,strlen(str1),0x1000);
#endif
	return 0;
}
 8004988:	2000      	movs	r0, #0
 800498a:	4770      	bx	lr

0800498c <disk_initialize>:

DSTATUS disk_initialize (
		BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
	Stat &= ~STA_NOINIT;
 800498c:	4a03      	ldr	r2, [pc, #12]	; (800499c <disk_initialize+0x10>)
	return 0;
}
 800498e:	2000      	movs	r0, #0
	Stat &= ~STA_NOINIT;
 8004990:	7813      	ldrb	r3, [r2, #0]
 8004992:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004996:	7013      	strb	r3, [r2, #0]
}
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	2000001c 	.word	0x2000001c

080049a0 <disk_read>:
		BYTE pdrv,		/* Physical drive nmuber to identify the drive */
		BYTE *buff,		/* Data buffer to store read data */
		LBA_t sector,	/* Start sector in LBA */
		UINT count		/* Number of sectors to read */
)
{
 80049a0:	b538      	push	{r3, r4, r5, lr}
 80049a2:	460d      	mov	r5, r1
 80049a4:	461c      	mov	r4, r3
#ifdef SD_DEBUG
	sprintf(str1,"disk.cpp disk_read()  sector: %lu; count: %d\r\n",sector, count);
	HAL_UART_Transmit(&huart3,(uint8_t*)str1,strlen(str1),0x1000);
#endif

	if (pdrv || !count) return RES_PARERR;
 80049a6:	b9d8      	cbnz	r0, 80049e0 <disk_read+0x40>
 80049a8:	b1d3      	cbz	r3, 80049e0 <disk_read+0x40>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80049aa:	4b10      	ldr	r3, [pc, #64]	; (80049ec <disk_read+0x4c>)
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	07db      	lsls	r3, r3, #31
 80049b0:	d418      	bmi.n	80049e4 <disk_read+0x44>
	 sector *= 512; /* Convert to byte address if needed  if (!(sdinfo.type & 4)) */

	if (count == 1) /* Single block read */
 80049b2:	2c01      	cmp	r4, #1
 80049b4:	d109      	bne.n	80049ca <disk_read+0x2a>
	{
		uint8_t res  =  SD_Read_Block(buff,sector);
 80049b6:	4628      	mov	r0, r5
 80049b8:	0251      	lsls	r1, r2, #9
 80049ba:	f7fd fc4d 	bl	8002258 <_Z13SD_Read_BlockPhm>
		if(res!=0) return RES_ERROR;
 80049be:	4605      	mov	r5, r0
 80049c0:	b990      	cbnz	r0, 80049e8 <disk_read+0x48>
	{

		HAL_UART_Transmit(&huart3,(uint8_t*)"Multiple R\r\n",12,0x1000);

	}
	SPI_Release();
 80049c2:	f7fd fbf2 	bl	80021aa <_Z11SPI_Releasev>
	return count ? RES_ERROR : RES_OK;
 80049c6:	4628      	mov	r0, r5
	/* USER CODE END READ */
}
 80049c8:	bd38      	pop	{r3, r4, r5, pc}
		HAL_UART_Transmit(&huart3,(uint8_t*)"Multiple R\r\n",12,0x1000);
 80049ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049ce:	220c      	movs	r2, #12
 80049d0:	4907      	ldr	r1, [pc, #28]	; (80049f0 <disk_read+0x50>)
 80049d2:	4808      	ldr	r0, [pc, #32]	; (80049f4 <disk_read+0x54>)
 80049d4:	f7ff fe72 	bl	80046bc <HAL_UART_Transmit>
	SPI_Release();
 80049d8:	f7fd fbe7 	bl	80021aa <_Z11SPI_Releasev>
	return count ? RES_ERROR : RES_OK;
 80049dc:	2001      	movs	r0, #1
 80049de:	e7f3      	b.n	80049c8 <disk_read+0x28>
	if (pdrv || !count) return RES_PARERR;
 80049e0:	2004      	movs	r0, #4
 80049e2:	e7f1      	b.n	80049c8 <disk_read+0x28>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80049e4:	2003      	movs	r0, #3
 80049e6:	e7ef      	b.n	80049c8 <disk_read+0x28>
		if(res!=0) return RES_ERROR;
 80049e8:	4620      	mov	r0, r4
 80049ea:	e7ed      	b.n	80049c8 <disk_read+0x28>
 80049ec:	2000001c 	.word	0x2000001c
 80049f0:	0800ba20 	.word	0x0800ba20
 80049f4:	200003ec 	.word	0x200003ec

080049f8 <disk_write>:
		BYTE pdrv,			/* Physical drive nmuber to identify the drive */
		const BYTE *buff,	/* Data to be written */
		LBA_t sector,		/* Start sector in LBA */
		UINT count			/* Number of sectors to write */
)
{
 80049f8:	b538      	push	{r3, r4, r5, lr}
 80049fa:	460d      	mov	r5, r1
 80049fc:	461c      	mov	r4, r3
#ifdef SD_DEBUG
	sprintf(str1,"disk.cpp disk_write()  sector: %lu; count: %d\r\n",sector, count);
	HAL_UART_Transmit(&huart3,(uint8_t*)str1,strlen(str1),0x1000);
#endif

	if (pdrv || !count) return RES_PARERR;
 80049fe:	b9b8      	cbnz	r0, 8004a30 <disk_write+0x38>
 8004a00:	b1b3      	cbz	r3, 8004a30 <disk_write+0x38>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004a02:	4b0f      	ldr	r3, [pc, #60]	; (8004a40 <disk_write+0x48>)
 8004a04:	7819      	ldrb	r1, [r3, #0]
 8004a06:	07c9      	lsls	r1, r1, #31
 8004a08:	d414      	bmi.n	8004a34 <disk_write+0x3c>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	075b      	lsls	r3, r3, #29
 8004a0e:	d413      	bmi.n	8004a38 <disk_write+0x40>

		sector *= 512;
	 /* Convert to byte address if needed */
	if (count == 1) /* Single block read */
 8004a10:	2c01      	cmp	r4, #1
 8004a12:	d109      	bne.n	8004a28 <disk_write+0x30>
	{
		uint8_t res = SD_Write_Block((BYTE*)buff,sector); //Ñ÷èòàåì áëîê â áóôåð
 8004a14:	4628      	mov	r0, r5
 8004a16:	0251      	lsls	r1, r2, #9
 8004a18:	f7fd fc46 	bl	80022a8 <_Z14SD_Write_BlockPhm>
		if (res!=0)return RES_ERROR;
 8004a1c:	4605      	mov	r5, r0
 8004a1e:	b968      	cbnz	r0, 8004a3c <disk_write+0x44>
	}
	else /* Multiple block read */
	{
		//	HAL_UART_Transmit(&huart3,(uint8_t*)"Multiple W\r\n",12,0x1000);
	}
	SPI_Release();
 8004a20:	f7fd fbc3 	bl	80021aa <_Z11SPI_Releasev>
	return count ? RES_ERROR : RES_OK;
 8004a24:	4628      	mov	r0, r5
}
 8004a26:	bd38      	pop	{r3, r4, r5, pc}
	SPI_Release();
 8004a28:	f7fd fbbf 	bl	80021aa <_Z11SPI_Releasev>
	return count ? RES_ERROR : RES_OK;
 8004a2c:	2001      	movs	r0, #1
 8004a2e:	e7fa      	b.n	8004a26 <disk_write+0x2e>
	if (pdrv || !count) return RES_PARERR;
 8004a30:	2004      	movs	r0, #4
 8004a32:	e7f8      	b.n	8004a26 <disk_write+0x2e>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004a34:	2003      	movs	r0, #3
 8004a36:	e7f6      	b.n	8004a26 <disk_write+0x2e>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8004a38:	2002      	movs	r0, #2
 8004a3a:	e7f4      	b.n	8004a26 <disk_write+0x2e>
		if (res!=0)return RES_ERROR;
 8004a3c:	4620      	mov	r0, r4
 8004a3e:	e7f2      	b.n	8004a26 <disk_write+0x2e>
 8004a40:	2000001c 	.word	0x2000001c

08004a44 <disk_ioctl>:
DRESULT disk_ioctl (
		BYTE pdrv,		/* Physical drive nmuber (0..) */
		BYTE cmd,		/* Control code */
		void *buff		/* Buffer to send/receive control data */
)
{
 8004a44:	b510      	push	{r4, lr}

#ifdef SD_DEBUG
	sprintf(str1,"disk.cpp disk_ioctl()  CMD: %d\r\n",cmd);
	HAL_UART_Transmit(&huart3,(uint8_t*)str1,strlen(str1),0x1000);
#endif
	if (pdrv) return RES_PARERR;
 8004a46:	b9e0      	cbnz	r0, 8004a82 <disk_ioctl+0x3e>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004a48:	4b10      	ldr	r3, [pc, #64]	; (8004a8c <disk_ioctl+0x48>)
 8004a4a:	781c      	ldrb	r4, [r3, #0]
 8004a4c:	f014 0401 	ands.w	r4, r4, #1
 8004a50:	d119      	bne.n	8004a86 <disk_ioctl+0x42>
	res = RES_ERROR;
	switch (cmd)
 8004a52:	b119      	cbz	r1, 8004a5c <disk_ioctl+0x18>
 8004a54:	2902      	cmp	r1, #2
 8004a56:	d010      	beq.n	8004a7a <disk_ioctl+0x36>
		res = RES_OK;
		break;


	default:
		res = RES_PARERR;
 8004a58:	2404      	movs	r4, #4
 8004a5a:	e00a      	b.n	8004a72 <disk_ioctl+0x2e>
		SS_SD_SELECT();
 8004a5c:	460a      	mov	r2, r1
 8004a5e:	480c      	ldr	r0, [pc, #48]	; (8004a90 <disk_ioctl+0x4c>)
 8004a60:	2140      	movs	r1, #64	; 0x40
 8004a62:	f7fe f9f7 	bl	8002e54 <HAL_GPIO_WritePin>
		if (SPI_wait_ready() == 0xFF)
 8004a66:	f7fd fba3 	bl	80021b0 <_Z14SPI_wait_readyv>
			res = RES_OK;
 8004a6a:	f1b0 04ff 	subs.w	r4, r0, #255	; 0xff
 8004a6e:	bf18      	it	ne
 8004a70:	2401      	movne	r4, #1
	}
	SPI_Release();
 8004a72:	f7fd fb9a 	bl	80021aa <_Z11SPI_Releasev>
	return res;
}
 8004a76:	4620      	mov	r0, r4
 8004a78:	bd10      	pop	{r4, pc}
		*(WORD*)buff = 512;
 8004a7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a7e:	8013      	strh	r3, [r2, #0]
		break;
 8004a80:	e7f7      	b.n	8004a72 <disk_ioctl+0x2e>
	if (pdrv) return RES_PARERR;
 8004a82:	2404      	movs	r4, #4
 8004a84:	e7f7      	b.n	8004a76 <disk_ioctl+0x32>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004a86:	2403      	movs	r4, #3
 8004a88:	e7f5      	b.n	8004a76 <disk_ioctl+0x32>
 8004a8a:	bf00      	nop
 8004a8c:	2000001c 	.word	0x2000001c
 8004a90:	40010800 	.word	0x40010800

08004a94 <ld_dword>:
static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 8004a94:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 8004a96:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 8004a98:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 8004a9a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return rv;
}
 8004a9e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8004aa2:	4770      	bx	lr

08004aa4 <ld_qword>:

#if FF_FS_EXFAT
static QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8004aa4:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}

	rv = ptr[7];
	rv = rv << 8 | ptr[6];
	rv = rv << 8 | ptr[5];
	rv = rv << 8 | ptr[4];
	rv = rv << 8 | ptr[3];
 8004aa8:	2500      	movs	r5, #0
	rv = rv << 8 | ptr[4];
 8004aaa:	6841      	ldr	r1, [r0, #4]
	rv = rv << 8 | ptr[3];
 8004aac:	78c4      	ldrb	r4, [r0, #3]
 8004aae:	0e0b      	lsrs	r3, r1, #24
 8004ab0:	ea45 0c03 	orr.w	ip, r5, r3
	rv = rv << 8 | ptr[2];
 8004ab4:	2500      	movs	r5, #0
	rv = rv << 8 | ptr[3];
 8004ab6:	020a      	lsls	r2, r1, #8
 8004ab8:	ea44 0b02 	orr.w	fp, r4, r2
	rv = rv << 8 | ptr[2];
 8004abc:	ea4f 230c 	mov.w	r3, ip, lsl #8
 8004ac0:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
 8004ac4:	ea45 0c03 	orr.w	ip, r5, r3
	rv = rv << 8 | ptr[1];
 8004ac8:	2500      	movs	r5, #0
	rv = rv << 8 | ptr[2];
 8004aca:	7884      	ldrb	r4, [r0, #2]
 8004acc:	ea4f 220b 	mov.w	r2, fp, lsl #8
 8004ad0:	ea44 0b02 	orr.w	fp, r4, r2
	rv = rv << 8 | ptr[1];
 8004ad4:	ea4f 230c 	mov.w	r3, ip, lsl #8
 8004ad8:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
 8004adc:	ea45 0c03 	orr.w	ip, r5, r3
	rv = rv << 8 | ptr[0];
 8004ae0:	2500      	movs	r5, #0
	rv = rv << 8 | ptr[1];
 8004ae2:	7844      	ldrb	r4, [r0, #1]
 8004ae4:	ea4f 220b 	mov.w	r2, fp, lsl #8
 8004ae8:	ea44 0b02 	orr.w	fp, r4, r2
	rv = rv << 8 | ptr[0];
 8004aec:	ea4f 230c 	mov.w	r3, ip, lsl #8
 8004af0:	7804      	ldrb	r4, [r0, #0]
 8004af2:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
 8004af6:	ea4f 220b 	mov.w	r2, fp, lsl #8
	return rv;
}
 8004afa:	ea44 0002 	orr.w	r0, r4, r2
 8004afe:	ea45 0103 	orr.w	r1, r5, r3
 8004b02:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}

08004b06 <st_dword>:
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8004b06:	0a0b      	lsrs	r3, r1, #8
 8004b08:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004b0a:	7043      	strb	r3, [r0, #1]
 8004b0c:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8004b0e:	0e09      	lsrs	r1, r1, #24
 8004b10:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8004b12:	70c1      	strb	r1, [r0, #3]
}
 8004b14:	4770      	bx	lr

08004b16 <st_qword>:

#if FF_FS_EXFAT
static void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8004b16:	0a11      	lsrs	r1, r2, #8
 8004b18:	7002      	strb	r2, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004b1a:	7041      	strb	r1, [r0, #1]
 8004b1c:	0c11      	lsrs	r1, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8004b1e:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8004b20:	70c2      	strb	r2, [r0, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 8004b22:	0a1a      	lsrs	r2, r3, #8
 8004b24:	7103      	strb	r3, [r0, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8004b26:	7142      	strb	r2, [r0, #5]
 8004b28:	0c1a      	lsrs	r2, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8004b2a:	0e1b      	lsrs	r3, r3, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8004b2c:	7081      	strb	r1, [r0, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004b2e:	7182      	strb	r2, [r0, #6]
	*ptr++ = (BYTE)val;
 8004b30:	71c3      	strb	r3, [r0, #7]
}
 8004b32:	4770      	bx	lr

08004b34 <mem_set>:
}


/* Fill memory block */
static void mem_set (void* dst, int val, UINT cnt)
{
 8004b34:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 8004b36:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 8004b3a:	4290      	cmp	r0, r2
 8004b3c:	d1fb      	bne.n	8004b36 <mem_set+0x2>
}
 8004b3e:	4770      	bx	lr

08004b40 <mem_cmp>:


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
 8004b40:	b510      	push	{r4, lr}
 8004b42:	4402      	add	r2, r0
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 8004b44:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004b48:	f811 4b01 	ldrb.w	r4, [r1], #1
	} while (--cnt && r == 0);
 8004b4c:	4290      	cmp	r0, r2
		r = *d++ - *s++;
 8004b4e:	eba3 0304 	sub.w	r3, r3, r4
	} while (--cnt && r == 0);
 8004b52:	d001      	beq.n	8004b58 <mem_cmp+0x18>
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d0f5      	beq.n	8004b44 <mem_cmp+0x4>

	return r;
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	bd10      	pop	{r4, pc}

08004b5c <tchar2uni>:

/* Get a Unicode code point from the TCHAR string in defined API encodeing */
static DWORD tchar2uni (	/* Returns a character in UTF-16 encoding (>=0x10000 on surrogate pair, 0xFFFFFFFF on decode error) */
	const TCHAR** str		/* Pointer to pointer to TCHAR string in configured encoding */
)
{
 8004b5c:	b530      	push	{r4, r5, lr}
	DWORD uc;
	const TCHAR *p = *str;
 8004b5e:	6803      	ldr	r3, [r0, #0]
{
 8004b60:	4604      	mov	r4, r0

#elif FF_LFN_UNICODE == 2	/* UTF-8 input */
	BYTE b;
	int nf;

	uc = (BYTE)*p++;	/* Get an encoding unit */
 8004b62:	1c59      	adds	r1, r3, #1
 8004b64:	781b      	ldrb	r3, [r3, #0]
	if (uc & 0x80) {	/* Multiple byte code? */
 8004b66:	061a      	lsls	r2, r3, #24
 8004b68:	d402      	bmi.n	8004b70 <tchar2uni+0x14>
	uc = (BYTE)*p++;	/* Get an encoding unit */
 8004b6a:	4618      	mov	r0, r3
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
	}
	uc = wc;

#endif
	*str = p;	/* Next read pointer */
 8004b6c:	6021      	str	r1, [r4, #0]
	return uc;
}
 8004b6e:	bd30      	pop	{r4, r5, pc}
		if ((uc & 0xE0) == 0xC0) {	/* 2-byte sequence? */
 8004b70:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
 8004b74:	2ac0      	cmp	r2, #192	; 0xc0
 8004b76:	d129      	bne.n	8004bcc <tchar2uni+0x70>
			uc &= 0x1F; nf = 1;
 8004b78:	f003 001f 	and.w	r0, r3, #31
 8004b7c:	2301      	movs	r3, #1
			b = (BYTE)*p++;
 8004b7e:	f811 2b01 	ldrb.w	r2, [r1], #1
			if ((b & 0xC0) != 0x80) return 0xFFFFFFFF;	/* Wrong sequence? */
 8004b82:	f002 05c0 	and.w	r5, r2, #192	; 0xc0
 8004b86:	2d80      	cmp	r5, #128	; 0x80
 8004b88:	d130      	bne.n	8004bec <tchar2uni+0x90>
			uc = uc << 6 | (b & 0x3F);
 8004b8a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
		} while (--nf != 0);
 8004b8e:	3b01      	subs	r3, #1
			uc = uc << 6 | (b & 0x3F);
 8004b90:	ea42 1080 	orr.w	r0, r2, r0, lsl #6
		} while (--nf != 0);
 8004b94:	d1f3      	bne.n	8004b7e <tchar2uni+0x22>
		if (uc < 0x80 || IsSurrogate(uc) || uc >= 0x110000) return 0xFFFFFFFF;	/* Wrong code? */
 8004b96:	4b17      	ldr	r3, [pc, #92]	; (8004bf4 <tchar2uni+0x98>)
 8004b98:	f1a0 0280 	sub.w	r2, r0, #128	; 0x80
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d825      	bhi.n	8004bec <tchar2uni+0x90>
 8004ba0:	f5a0 4358 	sub.w	r3, r0, #55296	; 0xd800
 8004ba4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ba8:	d320      	bcc.n	8004bec <tchar2uni+0x90>
		if (uc >= 0x010000) uc = 0xD800DC00 | ((uc - 0x10000) << 6 & 0x3FF0000) | (uc & 0x3FF);	/* Make a surrogate pair if needed */
 8004baa:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8004bae:	d3dd      	bcc.n	8004b6c <tchar2uni+0x10>
 8004bb0:	4a11      	ldr	r2, [pc, #68]	; (8004bf8 <tchar2uni+0x9c>)
 8004bb2:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 8004bb6:	ea02 1283 	and.w	r2, r2, r3, lsl #6
 8004bba:	f3c0 0309 	ubfx	r3, r0, #0, #10
 8004bbe:	f043 4358 	orr.w	r3, r3, #3623878656	; 0xd8000000
 8004bc2:	f443 435c 	orr.w	r3, r3, #56320	; 0xdc00
 8004bc6:	ea42 0003 	orr.w	r0, r2, r3
 8004bca:	e7cf      	b.n	8004b6c <tchar2uni+0x10>
			if ((uc & 0xF0) == 0xE0) {	/* 3-byte sequence? */
 8004bcc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004bd0:	2ae0      	cmp	r2, #224	; 0xe0
 8004bd2:	d103      	bne.n	8004bdc <tchar2uni+0x80>
				uc &= 0x0F; nf = 2;
 8004bd4:	f003 000f 	and.w	r0, r3, #15
 8004bd8:	2302      	movs	r3, #2
 8004bda:	e7d0      	b.n	8004b7e <tchar2uni+0x22>
				if ((uc & 0xF8) == 0xF0) {	/* 4-byte sequence? */
 8004bdc:	f003 02f8 	and.w	r2, r3, #248	; 0xf8
 8004be0:	2af0      	cmp	r2, #240	; 0xf0
 8004be2:	d103      	bne.n	8004bec <tchar2uni+0x90>
					uc &= 0x07; nf = 3;
 8004be4:	f003 0007 	and.w	r0, r3, #7
 8004be8:	2303      	movs	r3, #3
 8004bea:	e7c8      	b.n	8004b7e <tchar2uni+0x22>
					return 0xFFFFFFFF;
 8004bec:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf0:	e7bd      	b.n	8004b6e <tchar2uni+0x12>
 8004bf2:	bf00      	nop
 8004bf4:	0010ff7f 	.word	0x0010ff7f
 8004bf8:	03ff0000 	.word	0x03ff0000

08004bfc <clst2sect>:
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;		/* Cluster number is origin from 2 */
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8004bfc:	69c3      	ldr	r3, [r0, #28]
	clst -= 2;		/* Cluster number is origin from 2 */
 8004bfe:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8004c00:	3b02      	subs	r3, #2
 8004c02:	428b      	cmp	r3, r1
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 8004c04:	bf83      	ittte	hi
 8004c06:	8943      	ldrhhi	r3, [r0, #10]
 8004c08:	6b00      	ldrhi	r0, [r0, #48]	; 0x30
 8004c0a:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8004c0e:	2000      	movls	r0, #0
}
 8004c10:	4770      	bx	lr

08004c12 <sum_sfn>:
/*-----------------------------------------------------------------------*/

static BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8004c12:	4602      	mov	r2, r0
 8004c14:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
 8004c18:	2000      	movs	r0, #0
	UINT n = 11;

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8004c1a:	01c3      	lsls	r3, r0, #7
 8004c1c:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 8004c20:	f812 0b01 	ldrb.w	r0, [r2], #1
 8004c24:	4403      	add	r3, r0
	} while (--n);
 8004c26:	428a      	cmp	r2, r1
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8004c28:	f003 00ff 	and.w	r0, r3, #255	; 0xff
	} while (--n);
 8004c2c:	d1f5      	bne.n	8004c1a <sum_sfn+0x8>
	return sum;
}
 8004c2e:	4770      	bx	lr

08004c30 <xdir_sum>:
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
	for (i = sum = 0; i < szblk; i++) {
 8004c30:	2300      	movs	r3, #0
 8004c32:	461a      	mov	r2, r3
{
 8004c34:	b510      	push	{r4, lr}
	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
 8004c36:	7841      	ldrb	r1, [r0, #1]
 8004c38:	3101      	adds	r1, #1
 8004c3a:	0149      	lsls	r1, r1, #5
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
 8004c3c:	2a02      	cmp	r2, #2
			i++;
 8004c3e:	bf0c      	ite	eq
 8004c40:	2203      	moveq	r2, #3
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8004c42:	5c84      	ldrbne	r4, [r0, r2]
	for (i = sum = 0; i < szblk; i++) {
 8004c44:	f102 0201 	add.w	r2, r2, #1
 8004c48:	bf1f      	itttt	ne
 8004c4a:	eb04 34c3 	addne.w	r4, r4, r3, lsl #15
 8004c4e:	b2a4      	uxthne	r4, r4
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8004c50:	eb04 0353 	addne.w	r3, r4, r3, lsr #1
 8004c54:	b29b      	uxthne	r3, r3
	for (i = sum = 0; i < szblk; i++) {
 8004c56:	4291      	cmp	r1, r2
 8004c58:	d8f0      	bhi.n	8004c3c <xdir_sum+0xc>
		}
	}
	return sum;
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	bd10      	pop	{r4, pc}

08004c5e <get_ldnumber>:
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8004c5e:	6803      	ldr	r3, [r0, #0]
{
 8004c60:	b510      	push	{r4, lr}
	if (!tp) return vol;	/* Invalid path name? */
 8004c62:	b15b      	cbz	r3, 8004c7c <get_ldnumber+0x1e>
 8004c64:	461a      	mov	r2, r3
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
 8004c66:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004c6a:	291f      	cmp	r1, #31
 8004c6c:	d90f      	bls.n	8004c8e <get_ldnumber+0x30>
 8004c6e:	293a      	cmp	r1, #58	; 0x3a
 8004c70:	d1f9      	bne.n	8004c66 <get_ldnumber+0x8>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
		i = FF_VOLUMES;
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 8004c72:	7819      	ldrb	r1, [r3, #0]
 8004c74:	f1a1 0430 	sub.w	r4, r1, #48	; 0x30
 8004c78:	2c09      	cmp	r4, #9
 8004c7a:	d902      	bls.n	8004c82 <get_ldnumber+0x24>
	if (!tp) return vol;	/* Invalid path name? */
 8004c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c80:	e006      	b.n	8004c90 <get_ldnumber+0x32>
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 8004c82:	3302      	adds	r3, #2
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d1f9      	bne.n	8004c7c <get_ldnumber+0x1e>
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8004c88:	2930      	cmp	r1, #48	; 0x30
 8004c8a:	d1f7      	bne.n	8004c7c <get_ldnumber+0x1e>
			vol = i;		/* Drive number */
			*path = tt;		/* Snip the drive prefix off */
 8004c8c:	6002      	str	r2, [r0, #0]
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
 8004c8e:	2000      	movs	r0, #0
}
 8004c90:	bd10      	pop	{r4, pc}

08004c92 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 8004c92:	b538      	push	{r3, r4, r5, lr}
 8004c94:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8004c96:	4604      	mov	r4, r0
 8004c98:	b918      	cbnz	r0, 8004ca2 <validate+0x10>
	FRESULT res = FR_INVALID_OBJECT;
 8004c9a:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	602b      	str	r3, [r5, #0]
	return res;
}
 8004ca0:	bd38      	pop	{r3, r4, r5, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8004ca2:	6803      	ldr	r3, [r0, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0f8      	beq.n	8004c9a <validate+0x8>
 8004ca8:	781a      	ldrb	r2, [r3, #0]
 8004caa:	2a00      	cmp	r2, #0
 8004cac:	d0f5      	beq.n	8004c9a <validate+0x8>
 8004cae:	8881      	ldrh	r1, [r0, #4]
 8004cb0:	88da      	ldrh	r2, [r3, #6]
 8004cb2:	4291      	cmp	r1, r2
 8004cb4:	d1f1      	bne.n	8004c9a <validate+0x8>
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8004cb6:	7858      	ldrb	r0, [r3, #1]
 8004cb8:	f7ff fe66 	bl	8004988 <disk_status>
 8004cbc:	f010 0001 	ands.w	r0, r0, #1
 8004cc0:	d1eb      	bne.n	8004c9a <validate+0x8>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8004cc2:	6823      	ldr	r3, [r4, #0]
 8004cc4:	e7eb      	b.n	8004c9e <validate+0xc>

08004cc6 <xname_sum>:
{
 8004cc6:	b538      	push	{r3, r4, r5, lr}
 8004cc8:	4605      	mov	r5, r0
	WORD sum = 0;
 8004cca:	2400      	movs	r4, #0
	while ((chr = *name++) != 0) {
 8004ccc:	f835 0b02 	ldrh.w	r0, [r5], #2
 8004cd0:	b908      	cbnz	r0, 8004cd6 <xname_sum+0x10>
}
 8004cd2:	4620      	mov	r0, r4
 8004cd4:	bd38      	pop	{r3, r4, r5, pc}
		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
 8004cd6:	f002 f95f 	bl	8006f98 <ff_wtoupper>
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8004cda:	0863      	lsrs	r3, r4, #1
		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
 8004cdc:	b280      	uxth	r0, r0
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8004cde:	eb03 33c4 	add.w	r3, r3, r4, lsl #15
 8004ce2:	b2c2      	uxtb	r2, r0
 8004ce4:	4413      	add	r3, r2
 8004ce6:	b29b      	uxth	r3, r3
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8004ce8:	0a00      	lsrs	r0, r0, #8
 8004cea:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8004cee:	eb00 30c3 	add.w	r0, r0, r3, lsl #15
 8004cf2:	b284      	uxth	r4, r0
 8004cf4:	e7ea      	b.n	8004ccc <xname_sum+0x6>

08004cf6 <mem_cpy.part.0>:
static void mem_cpy (void* dst, const void* src, UINT cnt)
 8004cf6:	3801      	subs	r0, #1
 8004cf8:	440a      	add	r2, r1
			*d++ = *s++;
 8004cfa:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
 8004cfe:	4291      	cmp	r1, r2
			*d++ = *s++;
 8004d00:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 8004d04:	d1f9      	bne.n	8004cfa <mem_cpy.part.0+0x4>
}
 8004d06:	4770      	bx	lr

08004d08 <ld_clust.isra.4>:
	rv = rv << 8 | ptr[0];
 8004d08:	7eca      	ldrb	r2, [r1, #27]
 8004d0a:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 8004d0c:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8004d0e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8004d12:	bf01      	itttt	eq
 8004d14:	7d48      	ldrbeq	r0, [r1, #21]
 8004d16:	7d0a      	ldrbeq	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004d18:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 8004d1c:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	4770      	bx	lr

08004d24 <st_clust.isra.5>:
	*ptr++ = (BYTE)val; val >>= 8;
 8004d24:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8004d28:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 8004d2a:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8004d2c:	7803      	ldrb	r3, [r0, #0]
 8004d2e:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004d30:	bf01      	itttt	eq
 8004d32:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8004d34:	750a      	strbeq	r2, [r1, #20]
 8004d36:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 8004d38:	754a      	strbeq	r2, [r1, #21]
}
 8004d3a:	4770      	bx	lr

08004d3c <init_alloc_info.isra.6>:
static void init_alloc_info (
 8004d3c:	b538      	push	{r3, r4, r5, lr}
 8004d3e:	4605      	mov	r5, r0
	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
 8004d40:	3034      	adds	r0, #52	; 0x34
static void init_alloc_info (
 8004d42:	460c      	mov	r4, r1
	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
 8004d44:	f7ff fea6 	bl	8004a94 <ld_dword>
 8004d48:	6088      	str	r0, [r1, #8]
	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
 8004d4a:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8004d4e:	f7ff fea9 	bl	8004aa4 <ld_qword>
 8004d52:	e9c4 0104 	strd	r0, r1, [r4, #16]
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
 8004d56:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	71e3      	strb	r3, [r4, #7]
	obj->n_frag = 0;										/* No last fragment info */
 8004d60:	2300      	movs	r3, #0
 8004d62:	61e3      	str	r3, [r4, #28]
}
 8004d64:	bd38      	pop	{r3, r4, r5, pc}

08004d66 <sync_window.part.7>:
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
 8004d66:	b570      	push	{r4, r5, r6, lr}
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 8004d68:	f100 063c 	add.w	r6, r0, #60	; 0x3c
 8004d6c:	6b82      	ldr	r2, [r0, #56]	; 0x38
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
 8004d6e:	4605      	mov	r5, r0
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 8004d70:	2301      	movs	r3, #1
 8004d72:	4631      	mov	r1, r6
 8004d74:	7840      	ldrb	r0, [r0, #1]
 8004d76:	f7ff fe3f 	bl	80049f8 <disk_write>
 8004d7a:	4604      	mov	r4, r0
 8004d7c:	b988      	cbnz	r0, 8004da2 <sync_window.part.7+0x3c>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8004d7e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8004d80:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004d82:	6a2a      	ldr	r2, [r5, #32]
 8004d84:	1acb      	subs	r3, r1, r3
 8004d86:	4293      	cmp	r3, r2
			fs->wflag = 0;	/* Clear window dirty flag */
 8004d88:	70e8      	strb	r0, [r5, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8004d8a:	d208      	bcs.n	8004d9e <sync_window.part.7+0x38>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8004d8c:	78ab      	ldrb	r3, [r5, #2]
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d105      	bne.n	8004d9e <sync_window.part.7+0x38>
 8004d92:	440a      	add	r2, r1
 8004d94:	2301      	movs	r3, #1
 8004d96:	4631      	mov	r1, r6
 8004d98:	7868      	ldrb	r0, [r5, #1]
 8004d9a:	f7ff fe2d 	bl	80049f8 <disk_write>
}
 8004d9e:	4620      	mov	r0, r4
 8004da0:	bd70      	pop	{r4, r5, r6, pc}
			res = FR_DISK_ERR;
 8004da2:	2401      	movs	r4, #1
 8004da4:	e7fb      	b.n	8004d9e <sync_window.part.7+0x38>

08004da6 <move_window>:
{
 8004da6:	b538      	push	{r3, r4, r5, lr}
	if (sect != fs->winsect) {	/* Window offset changed? */
 8004da8:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
 8004daa:	4604      	mov	r4, r0
	if (sect != fs->winsect) {	/* Window offset changed? */
 8004dac:	428b      	cmp	r3, r1
{
 8004dae:	460d      	mov	r5, r1
	if (sect != fs->winsect) {	/* Window offset changed? */
 8004db0:	d015      	beq.n	8004dde <move_window+0x38>
	if (fs->wflag) {	/* Is the disk access window dirty? */
 8004db2:	78c3      	ldrb	r3, [r0, #3]
 8004db4:	b973      	cbnz	r3, 8004dd4 <move_window+0x2e>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 8004db6:	462a      	mov	r2, r5
 8004db8:	2301      	movs	r3, #1
 8004dba:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8004dbe:	7860      	ldrb	r0, [r4, #1]
 8004dc0:	f7ff fdee 	bl	80049a0 <disk_read>
				res = FR_DISK_ERR;
 8004dc4:	2800      	cmp	r0, #0
 8004dc6:	bf16      	itet	ne
 8004dc8:	f04f 35ff 	movne.w	r5, #4294967295
 8004dcc:	2000      	moveq	r0, #0
 8004dce:	2001      	movne	r0, #1
			fs->winsect = sect;
 8004dd0:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8004dd2:	bd38      	pop	{r3, r4, r5, pc}
 8004dd4:	f7ff ffc7 	bl	8004d66 <sync_window.part.7>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004dd8:	2800      	cmp	r0, #0
 8004dda:	d1fa      	bne.n	8004dd2 <move_window+0x2c>
 8004ddc:	e7eb      	b.n	8004db6 <move_window+0x10>
	FRESULT res = FR_OK;
 8004dde:	2000      	movs	r0, #0
 8004de0:	e7f7      	b.n	8004dd2 <move_window+0x2c>

08004de2 <change_bitmap>:
{
 8004de2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 8004de6:	f04f 0901 	mov.w	r9, #1
{
 8004dea:	4605      	mov	r5, r0
 8004dec:	4616      	mov	r6, r2
 8004dee:	461f      	mov	r7, r3
	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8004df0:	1e8c      	subs	r4, r1, #2
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
 8004df2:	6b41      	ldr	r1, [r0, #52]	; 0x34
	i = clst / 8 % SS(fs);					/* Byte offset in the sector */
 8004df4:	f3c4 08c8 	ubfx	r8, r4, #3, #9
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
 8004df8:	eb01 3114 	add.w	r1, r1, r4, lsr #12
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 8004dfc:	f004 0407 	and.w	r4, r4, #7
 8004e00:	fa09 f404 	lsl.w	r4, r9, r4
 8004e04:	b2e4      	uxtb	r4, r4
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8004e06:	4628      	mov	r0, r5
 8004e08:	f101 0a01 	add.w	sl, r1, #1
 8004e0c:	f7ff ffcb 	bl	8004da6 <move_window>
 8004e10:	b118      	cbz	r0, 8004e1a <change_bitmap+0x38>
 8004e12:	2001      	movs	r0, #1
}
 8004e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e18:	4698      	mov	r8, r3
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8004e1a:	eb05 0208 	add.w	r2, r5, r8
 8004e1e:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 8004e22:	4223      	tst	r3, r4
 8004e24:	bf14      	ite	ne
 8004e26:	2101      	movne	r1, #1
 8004e28:	2100      	moveq	r1, #0
 8004e2a:	42b9      	cmp	r1, r7
 8004e2c:	d015      	beq.n	8004e5a <change_bitmap+0x78>
				fs->win[i] ^= bm;	/* Flip the bit */
 8004e2e:	4063      	eors	r3, r4
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8004e30:	3e01      	subs	r6, #1
				fs->win[i] ^= bm;	/* Flip the bit */
 8004e32:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
				fs->wflag = 1;
 8004e36:	f885 9003 	strb.w	r9, [r5, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8004e3a:	d0eb      	beq.n	8004e14 <change_bitmap+0x32>
			} while (bm <<= 1);		/* Next bit */
 8004e3c:	0064      	lsls	r4, r4, #1
 8004e3e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8004e42:	d1ea      	bne.n	8004e1a <change_bitmap+0x38>
		} while (++i < SS(fs));		/* Next byte */
 8004e44:	f108 0301 	add.w	r3, r8, #1
 8004e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
			bm = 1;
 8004e4c:	f04f 0401 	mov.w	r4, #1
		i = 0;
 8004e50:	f04f 0800 	mov.w	r8, #0
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8004e54:	4651      	mov	r1, sl
		} while (++i < SS(fs));		/* Next byte */
 8004e56:	d1df      	bne.n	8004e18 <change_bitmap+0x36>
 8004e58:	e7d5      	b.n	8004e06 <change_bitmap+0x24>
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8004e5a:	2002      	movs	r0, #2
 8004e5c:	e7da      	b.n	8004e14 <change_bitmap+0x32>

08004e5e <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004e5e:	2901      	cmp	r1, #1
{
 8004e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e62:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004e64:	f240 8090 	bls.w	8004f88 <get_fat+0x12a>
	FATFS *fs = obj->fs;
 8004e68:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004e6a:	69eb      	ldr	r3, [r5, #28]
 8004e6c:	428b      	cmp	r3, r1
 8004e6e:	f240 808b 	bls.w	8004f88 <get_fat+0x12a>
		switch (fs->fs_type) {
 8004e72:	782b      	ldrb	r3, [r5, #0]
 8004e74:	3b01      	subs	r3, #1
 8004e76:	2b03      	cmp	r3, #3
 8004e78:	f200 8086 	bhi.w	8004f88 <get_fat+0x12a>
 8004e7c:	e8df f003 	tbb	[pc, r3]
 8004e80:	4e3b2902 	.word	0x4e3b2902
			bc = (UINT)clst; bc += bc / 2;
 8004e84:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004e88:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8004e8a:	4628      	mov	r0, r5
 8004e8c:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 8004e90:	f7ff ff89 	bl	8004da6 <move_window>
 8004e94:	b110      	cbz	r0, 8004e9c <get_fat+0x3e>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004e96:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004e9c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8004e9e:	1c77      	adds	r7, r6, #1
 8004ea0:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8004ea4:	442e      	add	r6, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004ea6:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8004eaa:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8004eac:	f896 603c 	ldrb.w	r6, [r6, #60]	; 0x3c
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004eb0:	f7ff ff79 	bl	8004da6 <move_window>
 8004eb4:	2800      	cmp	r0, #0
 8004eb6:	d1ee      	bne.n	8004e96 <get_fat+0x38>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8004eb8:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8004ebc:	443d      	add	r5, r7
 8004ebe:	f895 003c 	ldrb.w	r0, [r5, #60]	; 0x3c
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8004ec2:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8004ec4:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8004ec8:	bf4c      	ite	mi
 8004eca:	0900      	lsrmi	r0, r0, #4
 8004ecc:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8004ed0:	e7e3      	b.n	8004e9a <get_fat+0x3c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004ed2:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8004eda:	f7ff ff64 	bl	8004da6 <move_window>
 8004ede:	2800      	cmp	r0, #0
 8004ee0:	d1d9      	bne.n	8004e96 <get_fat+0x38>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8004ee2:	0064      	lsls	r4, r4, #1
 8004ee4:	f404 73ff 	and.w	r3, r4, #510	; 0x1fe
 8004ee8:	353c      	adds	r5, #60	; 0x3c
 8004eea:	18ea      	adds	r2, r5, r3
	rv = rv << 8 | ptr[0];
 8004eec:	7854      	ldrb	r4, [r2, #1]
 8004eee:	5ce8      	ldrb	r0, [r5, r3]
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8004ef0:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
			break;
 8004ef4:	e7d1      	b.n	8004e9a <get_fat+0x3c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004ef6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8004ef8:	4628      	mov	r0, r5
 8004efa:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8004efe:	f7ff ff52 	bl	8004da6 <move_window>
 8004f02:	2800      	cmp	r0, #0
 8004f04:	d1c7      	bne.n	8004e96 <get_fat+0x38>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8004f06:	00a4      	lsls	r4, r4, #2
 8004f08:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 8004f0c:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8004f10:	4420      	add	r0, r4
 8004f12:	f7ff fdbf 	bl	8004a94 <ld_dword>
 8004f16:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 8004f1a:	e7be      	b.n	8004e9a <get_fat+0x3c>
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
 8004f1c:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 8004f20:	ea52 0103 	orrs.w	r1, r2, r3
 8004f24:	79c1      	ldrb	r1, [r0, #7]
 8004f26:	d001      	beq.n	8004f2c <get_fat+0xce>
 8004f28:	6886      	ldr	r6, [r0, #8]
 8004f2a:	b906      	cbnz	r6, 8004f2e <get_fat+0xd0>
 8004f2c:	bb61      	cbnz	r1, 8004f88 <get_fat+0x12a>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8004f2e:	6886      	ldr	r6, [r0, #8]
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 8004f30:	2902      	cmp	r1, #2
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8004f32:	eba4 0606 	sub.w	r6, r4, r6
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 8004f36:	896f      	ldrh	r7, [r5, #10]
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 8004f38:	d10d      	bne.n	8004f56 <get_fat+0xf8>
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 8004f3a:	f112 30ff 	adds.w	r0, r2, #4294967295
 8004f3e:	f143 31ff 	adc.w	r1, r3, #4294967295
 8004f42:	0a43      	lsrs	r3, r0, #9
 8004f44:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 8004f48:	fbb3 f3f7 	udiv	r3, r3, r7
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 8004f4c:	429e      	cmp	r6, r3
 8004f4e:	d81b      	bhi.n	8004f88 <get_fat+0x12a>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 8004f50:	d01c      	beq.n	8004f8c <get_fat+0x12e>
 8004f52:	1c60      	adds	r0, r4, #1
 8004f54:	e7a1      	b.n	8004e9a <get_fat+0x3c>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8004f56:	2903      	cmp	r1, #3
 8004f58:	d102      	bne.n	8004f60 <get_fat+0x102>
 8004f5a:	6983      	ldr	r3, [r0, #24]
 8004f5c:	42b3      	cmp	r3, r6
 8004f5e:	d8f8      	bhi.n	8004f52 <get_fat+0xf4>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8004f60:	69c3      	ldr	r3, [r0, #28]
 8004f62:	b99b      	cbnz	r3, 8004f8c <get_fat+0x12e>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004f64:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8004f66:	4628      	mov	r0, r5
 8004f68:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8004f6c:	f7ff ff1b 	bl	8004da6 <move_window>
 8004f70:	2800      	cmp	r0, #0
 8004f72:	d190      	bne.n	8004e96 <get_fat+0x38>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8004f74:	00a0      	lsls	r0, r4, #2
 8004f76:	353c      	adds	r5, #60	; 0x3c
 8004f78:	f400 70fe 	and.w	r0, r0, #508	; 0x1fc
 8004f7c:	4428      	add	r0, r5
 8004f7e:	f7ff fd89 	bl	8004a94 <ld_dword>
 8004f82:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004f86:	e788      	b.n	8004e9a <get_fat+0x3c>
		val = 1;	/* Internal error */
 8004f88:	2001      	movs	r0, #1
 8004f8a:	e786      	b.n	8004e9a <get_fat+0x3c>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 8004f8c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	return val;
 8004f90:	e783      	b.n	8004e9a <get_fat+0x3c>

08004f92 <dir_sdi>:
{
 8004f92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = dp->obj.fs;
 8004f94:	6804      	ldr	r4, [r0, #0]
{
 8004f96:	4605      	mov	r5, r0
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004f98:	7823      	ldrb	r3, [r4, #0]
{
 8004f9a:	460e      	mov	r6, r1
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004f9c:	2b04      	cmp	r3, #4
 8004f9e:	bf0c      	ite	eq
 8004fa0:	f04f 5280 	moveq.w	r2, #268435456	; 0x10000000
 8004fa4:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
 8004fa8:	428a      	cmp	r2, r1
 8004faa:	d801      	bhi.n	8004fb0 <dir_sdi+0x1e>
		return FR_INT_ERR;
 8004fac:	2002      	movs	r0, #2
}
 8004fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004fb0:	06ca      	lsls	r2, r1, #27
 8004fb2:	d1fb      	bne.n	8004fac <dir_sdi+0x1a>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004fb4:	6882      	ldr	r2, [r0, #8]
	dp->dptr = ofs;				/* Set current offset */
 8004fb6:	6329      	str	r1, [r5, #48]	; 0x30
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004fb8:	bb22      	cbnz	r2, 8005004 <dir_sdi+0x72>
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d813      	bhi.n	8004fe6 <dir_sdi+0x54>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8004fbe:	8923      	ldrh	r3, [r4, #8]
 8004fc0:	ebb3 1f56 	cmp.w	r3, r6, lsr #5
 8004fc4:	d9f2      	bls.n	8004fac <dir_sdi+0x1a>
		dp->sect = fs->dirbase;
 8004fc6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004fc8:	63ab      	str	r3, [r5, #56]	; 0x38
	if (dp->sect == 0) return FR_INT_ERR;
 8004fca:	6bab      	ldr	r3, [r5, #56]	; 0x38
	dp->clust = clst;					/* Current cluster# */
 8004fcc:	636a      	str	r2, [r5, #52]	; 0x34
	if (dp->sect == 0) return FR_INT_ERR;
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d0ec      	beq.n	8004fac <dir_sdi+0x1a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004fd2:	eb03 2356 	add.w	r3, r3, r6, lsr #9
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004fd6:	343c      	adds	r4, #60	; 0x3c
 8004fd8:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8004fdc:	4434      	add	r4, r6
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004fde:	63ab      	str	r3, [r5, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004fe0:	63ec      	str	r4, [r5, #60]	; 0x3c
	return FR_OK;
 8004fe2:	2000      	movs	r0, #0
 8004fe4:	e7e3      	b.n	8004fae <dir_sdi+0x1c>
		clst = (DWORD)fs->dirbase;
 8004fe6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8004fe8:	71c2      	strb	r2, [r0, #7]
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d0e7      	beq.n	8004fbe <dir_sdi+0x2c>
		while (ofs >= csz) {				/* Follow cluster chain */
 8004fee:	461a      	mov	r2, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004ff0:	8967      	ldrh	r7, [r4, #10]
 8004ff2:	027f      	lsls	r7, r7, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8004ff4:	42be      	cmp	r6, r7
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004ff6:	4611      	mov	r1, r2
		while (ofs >= csz) {				/* Follow cluster chain */
 8004ff8:	d206      	bcs.n	8005008 <dir_sdi+0x76>
		dp->sect = clst2sect(fs, clst);
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	f7ff fdfe 	bl	8004bfc <clst2sect>
 8005000:	63a8      	str	r0, [r5, #56]	; 0x38
 8005002:	e7e2      	b.n	8004fca <dir_sdi+0x38>
 8005004:	4613      	mov	r3, r2
 8005006:	e7f2      	b.n	8004fee <dir_sdi+0x5c>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005008:	4628      	mov	r0, r5
 800500a:	f7ff ff28 	bl	8004e5e <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800500e:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005010:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005012:	d006      	beq.n	8005022 <dir_sdi+0x90>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005014:	2801      	cmp	r0, #1
 8005016:	d9c9      	bls.n	8004fac <dir_sdi+0x1a>
 8005018:	69e3      	ldr	r3, [r4, #28]
 800501a:	4283      	cmp	r3, r0
 800501c:	d9c6      	bls.n	8004fac <dir_sdi+0x1a>
			ofs -= csz;
 800501e:	1bf6      	subs	r6, r6, r7
 8005020:	e7e8      	b.n	8004ff4 <dir_sdi+0x62>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005022:	2001      	movs	r0, #1
 8005024:	e7c3      	b.n	8004fae <dir_sdi+0x1c>
	...

08005028 <check_fs>:
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 8005028:	2300      	movs	r3, #0
{
 800502a:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 800502c:	70c3      	strb	r3, [r0, #3]
 800502e:	f04f 33ff 	mov.w	r3, #4294967295
 8005032:	6383      	str	r3, [r0, #56]	; 0x38
{
 8005034:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 8005036:	f7ff feb6 	bl	8004da6 <move_window>
 800503a:	bb50      	cbnz	r0, 8005092 <check_fs+0x6a>
	rv = rv << 8 | ptr[0];
 800503c:	f894 223b 	ldrb.w	r2, [r4, #571]	; 0x23b
 8005040:	f894 323a 	ldrb.w	r3, [r4, #570]	; 0x23a
 8005044:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot signature (always here regardless of the sector size) */
 8005048:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800504c:	4293      	cmp	r3, r2
 800504e:	d122      	bne.n	8005096 <check_fs+0x6e>
	if (FF_FS_EXFAT && !mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
 8005050:	220b      	movs	r2, #11
 8005052:	4914      	ldr	r1, [pc, #80]	; (80050a4 <check_fs+0x7c>)
 8005054:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8005058:	f7ff fd72 	bl	8004b40 <mem_cmp>
 800505c:	b1e8      	cbz	r0, 800509a <check_fs+0x72>
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 800505e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005062:	2beb      	cmp	r3, #235	; 0xeb
 8005064:	d003      	beq.n	800506e <check_fs+0x46>
 8005066:	3318      	adds	r3, #24
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b01      	cmp	r3, #1
 800506c:	d817      	bhi.n	800509e <check_fs+0x76>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 800506e:	2203      	movs	r2, #3
 8005070:	490d      	ldr	r1, [pc, #52]	; (80050a8 <check_fs+0x80>)
 8005072:	f104 0072 	add.w	r0, r4, #114	; 0x72
 8005076:	f7ff fd63 	bl	8004b40 <mem_cmp>
 800507a:	b148      	cbz	r0, 8005090 <check_fs+0x68>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 800507c:	2205      	movs	r2, #5
 800507e:	490b      	ldr	r1, [pc, #44]	; (80050ac <check_fs+0x84>)
 8005080:	f104 008e 	add.w	r0, r4, #142	; 0x8e
 8005084:	f7ff fd5c 	bl	8004b40 <mem_cmp>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 8005088:	2800      	cmp	r0, #0
 800508a:	bf14      	ite	ne
 800508c:	2002      	movne	r0, #2
 800508e:	2000      	moveq	r0, #0
}
 8005090:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 8005092:	2004      	movs	r0, #4
 8005094:	e7fc      	b.n	8005090 <check_fs+0x68>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot signature (always here regardless of the sector size) */
 8005096:	2003      	movs	r0, #3
 8005098:	e7fa      	b.n	8005090 <check_fs+0x68>
	if (FF_FS_EXFAT && !mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
 800509a:	2001      	movs	r0, #1
 800509c:	e7f8      	b.n	8005090 <check_fs+0x68>
	return 2;	/* Valid BS but not FAT */
 800509e:	2002      	movs	r0, #2
 80050a0:	e7f6      	b.n	8005090 <check_fs+0x68>
 80050a2:	bf00      	nop
 80050a4:	0800baba 	.word	0x0800baba
 80050a8:	0800bac6 	.word	0x0800bac6
 80050ac:	0800baca 	.word	0x0800baca

080050b0 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80050b0:	2901      	cmp	r1, #1
{
 80050b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050b6:	4605      	mov	r5, r0
 80050b8:	460c      	mov	r4, r1
 80050ba:	4616      	mov	r6, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80050bc:	d977      	bls.n	80051ae <put_fat+0xfe>
 80050be:	69c3      	ldr	r3, [r0, #28]
 80050c0:	428b      	cmp	r3, r1
 80050c2:	d974      	bls.n	80051ae <put_fat+0xfe>
		switch (fs->fs_type) {
 80050c4:	7803      	ldrb	r3, [r0, #0]
 80050c6:	3b01      	subs	r3, #1
 80050c8:	2b03      	cmp	r3, #3
 80050ca:	d870      	bhi.n	80051ae <put_fat+0xfe>
 80050cc:	e8df f003 	tbb	[pc, r3]
 80050d0:	51513e02 	.word	0x51513e02
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 80050d4:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80050d8:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80050da:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 80050de:	f7ff fe62 	bl	8004da6 <move_window>
			if (res != FR_OK) break;
 80050e2:	4607      	mov	r7, r0
 80050e4:	bb38      	cbnz	r0, 8005136 <put_fat+0x86>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Update 1st byte */
 80050e6:	f014 0401 	ands.w	r4, r4, #1
			p = fs->win + bc++ % SS(fs);
 80050ea:	f105 093c 	add.w	r9, r5, #60	; 0x3c
 80050ee:	f108 0a01 	add.w	sl, r8, #1
 80050f2:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Update 1st byte */
 80050f6:	bf17      	itett	ne
 80050f8:	f819 3008 	ldrbne.w	r3, [r9, r8]
 80050fc:	b2f3      	uxtbeq	r3, r6
 80050fe:	f003 020f 	andne.w	r2, r3, #15
 8005102:	0133      	lslne	r3, r6, #4
 8005104:	bf1c      	itt	ne
 8005106:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 800510a:	4313      	orrne	r3, r2
 800510c:	f809 3008 	strb.w	r3, [r9, r8]
			fs->wflag = 1;
 8005110:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005112:	6aa9      	ldr	r1, [r5, #40]	; 0x28
			fs->wflag = 1;
 8005114:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005116:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 800511a:	4628      	mov	r0, r5
 800511c:	f7ff fe43 	bl	8004da6 <move_window>
			if (res != FR_OK) break;
 8005120:	4607      	mov	r7, r0
 8005122:	b940      	cbnz	r0, 8005136 <put_fat+0x86>
			p = fs->win + bc % SS(fs);
 8005124:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 8005128:	b144      	cbz	r4, 800513c <put_fat+0x8c>
 800512a:	f3c6 1607 	ubfx	r6, r6, #4, #8
 800512e:	f809 600a 	strb.w	r6, [r9, sl]
			fs->wflag = 1;
 8005132:	2301      	movs	r3, #1
 8005134:	70eb      	strb	r3, [r5, #3]
}
 8005136:	4638      	mov	r0, r7
 8005138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 800513c:	f819 200a 	ldrb.w	r2, [r9, sl]
 8005140:	f3c6 2603 	ubfx	r6, r6, #8, #4
 8005144:	f022 020f 	bic.w	r2, r2, #15
 8005148:	4316      	orrs	r6, r2
 800514a:	e7f0      	b.n	800512e <put_fat+0x7e>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800514c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800514e:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8005152:	f7ff fe28 	bl	8004da6 <move_window>
			if (res != FR_OK) break;
 8005156:	4607      	mov	r7, r0
 8005158:	2800      	cmp	r0, #0
 800515a:	d1ec      	bne.n	8005136 <put_fat+0x86>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 800515c:	0064      	lsls	r4, r4, #1
 800515e:	f105 033c 	add.w	r3, r5, #60	; 0x3c
 8005162:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 8005166:	551e      	strb	r6, [r3, r4]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8005168:	1919      	adds	r1, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 800516a:	f3c6 2607 	ubfx	r6, r6, #8, #8
	*ptr++ = (BYTE)val;
 800516e:	704e      	strb	r6, [r1, #1]
 8005170:	e7df      	b.n	8005132 <put_fat+0x82>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005172:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8005174:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8005178:	f7ff fe15 	bl	8004da6 <move_window>
			if (res != FR_OK) break;
 800517c:	4607      	mov	r7, r0
 800517e:	2800      	cmp	r0, #0
 8005180:	d1d9      	bne.n	8005136 <put_fat+0x86>
 8005182:	00a4      	lsls	r4, r4, #2
 8005184:	f105 033c 	add.w	r3, r5, #60	; 0x3c
 8005188:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 800518c:	441c      	add	r4, r3
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800518e:	782b      	ldrb	r3, [r5, #0]
 8005190:	2b04      	cmp	r3, #4
 8005192:	d007      	beq.n	80051a4 <put_fat+0xf4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005194:	4620      	mov	r0, r4
 8005196:	f7ff fc7d 	bl	8004a94 <ld_dword>
 800519a:	f026 4670 	bic.w	r6, r6, #4026531840	; 0xf0000000
 800519e:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 80051a2:	4306      	orrs	r6, r0
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80051a4:	4631      	mov	r1, r6
 80051a6:	4620      	mov	r0, r4
 80051a8:	f7ff fcad 	bl	8004b06 <st_dword>
 80051ac:	e7c1      	b.n	8005132 <put_fat+0x82>
	FRESULT res = FR_INT_ERR;
 80051ae:	2702      	movs	r7, #2
 80051b0:	e7c1      	b.n	8005136 <put_fat+0x86>

080051b2 <fill_last_frag>:
{
 80051b2:	b570      	push	{r4, r5, r6, lr}
 80051b4:	4604      	mov	r4, r0
 80051b6:	460d      	mov	r5, r1
 80051b8:	4616      	mov	r6, r2
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 80051ba:	69e3      	ldr	r3, [r4, #28]
 80051bc:	b90b      	cbnz	r3, 80051c2 <fill_last_frag+0x10>
	return FR_OK;
 80051be:	4618      	mov	r0, r3
}
 80051c0:	bd70      	pop	{r4, r5, r6, pc}
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 80051c2:	1aea      	subs	r2, r5, r3
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	f102 0101 	add.w	r1, r2, #1
 80051ca:	6820      	ldr	r0, [r4, #0]
 80051cc:	bf8c      	ite	hi
 80051ce:	3202      	addhi	r2, #2
 80051d0:	4632      	movls	r2, r6
 80051d2:	f7ff ff6d 	bl	80050b0 <put_fat>
		if (res != FR_OK) return res;
 80051d6:	2800      	cmp	r0, #0
 80051d8:	d1f2      	bne.n	80051c0 <fill_last_frag+0xe>
		obj->n_frag--;
 80051da:	69e3      	ldr	r3, [r4, #28]
 80051dc:	3b01      	subs	r3, #1
 80051de:	61e3      	str	r3, [r4, #28]
 80051e0:	e7eb      	b.n	80051ba <fill_last_frag+0x8>

080051e2 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80051e2:	2901      	cmp	r1, #1
{
 80051e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051e8:	4606      	mov	r6, r0
 80051ea:	460d      	mov	r5, r1
 80051ec:	4617      	mov	r7, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80051ee:	d802      	bhi.n	80051f6 <remove_chain+0x14>
 80051f0:	2002      	movs	r0, #2
}
 80051f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	FATFS *fs = obj->fs;
 80051f6:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80051f8:	69e3      	ldr	r3, [r4, #28]
 80051fa:	428b      	cmp	r3, r1
 80051fc:	d9f8      	bls.n	80051f0 <remove_chain+0xe>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80051fe:	b96a      	cbnz	r2, 800521c <remove_chain+0x3a>
{
 8005200:	46a9      	mov	r9, r5
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005202:	4629      	mov	r1, r5
 8005204:	4630      	mov	r0, r6
 8005206:	f7ff fe2a 	bl	8004e5e <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 800520a:	4680      	mov	r8, r0
 800520c:	b388      	cbz	r0, 8005272 <remove_chain+0x90>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800520e:	2801      	cmp	r0, #1
 8005210:	d0ee      	beq.n	80051f0 <remove_chain+0xe>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005212:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005216:	d110      	bne.n	800523a <remove_chain+0x58>
 8005218:	2001      	movs	r0, #1
 800521a:	e7ea      	b.n	80051f2 <remove_chain+0x10>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800521c:	7823      	ldrb	r3, [r4, #0]
 800521e:	2b04      	cmp	r3, #4
 8005220:	d102      	bne.n	8005228 <remove_chain+0x46>
 8005222:	79c3      	ldrb	r3, [r0, #7]
 8005224:	2b02      	cmp	r3, #2
 8005226:	d0eb      	beq.n	8005200 <remove_chain+0x1e>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005228:	f04f 32ff 	mov.w	r2, #4294967295
 800522c:	4639      	mov	r1, r7
 800522e:	4620      	mov	r0, r4
 8005230:	f7ff ff3e 	bl	80050b0 <put_fat>
		if (res != FR_OK) return res;
 8005234:	2800      	cmp	r0, #0
 8005236:	d0e3      	beq.n	8005200 <remove_chain+0x1e>
 8005238:	e7db      	b.n	80051f2 <remove_chain+0x10>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800523a:	7823      	ldrb	r3, [r4, #0]
 800523c:	2b04      	cmp	r3, #4
 800523e:	d11d      	bne.n	800527c <remove_chain+0x9a>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005240:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
 8005244:	3a02      	subs	r2, #2
 8005246:	4293      	cmp	r3, r2
 8005248:	d320      	bcc.n	800528c <remove_chain+0xaa>
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800524a:	1c6a      	adds	r2, r5, #1
 800524c:	4542      	cmp	r2, r8
 800524e:	d00c      	beq.n	800526a <remove_chain+0x88>
			if (fs->fs_type == FS_EXFAT) {
 8005250:	7823      	ldrb	r3, [r4, #0]
 8005252:	2b04      	cmp	r3, #4
 8005254:	d108      	bne.n	8005268 <remove_chain+0x86>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 8005256:	2300      	movs	r3, #0
 8005258:	eba2 0209 	sub.w	r2, r2, r9
 800525c:	4649      	mov	r1, r9
 800525e:	4620      	mov	r0, r4
 8005260:	f7ff fdbf 	bl	8004de2 <change_bitmap>
				if (res != FR_OK) return res;
 8005264:	2800      	cmp	r0, #0
 8005266:	d1c4      	bne.n	80051f2 <remove_chain+0x10>
 8005268:	46c1      	mov	r9, r8
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800526a:	69e3      	ldr	r3, [r4, #28]
 800526c:	4645      	mov	r5, r8
 800526e:	4543      	cmp	r3, r8
 8005270:	d8c7      	bhi.n	8005202 <remove_chain+0x20>
	if (fs->fs_type == FS_EXFAT) {
 8005272:	7823      	ldrb	r3, [r4, #0]
 8005274:	2b04      	cmp	r3, #4
 8005276:	d010      	beq.n	800529a <remove_chain+0xb8>
	return FR_OK;
 8005278:	2000      	movs	r0, #0
 800527a:	e7ba      	b.n	80051f2 <remove_chain+0x10>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800527c:	2200      	movs	r2, #0
 800527e:	4629      	mov	r1, r5
 8005280:	4620      	mov	r0, r4
 8005282:	f7ff ff15 	bl	80050b0 <put_fat>
			if (res != FR_OK) return res;
 8005286:	2800      	cmp	r0, #0
 8005288:	d0da      	beq.n	8005240 <remove_chain+0x5e>
 800528a:	e7b2      	b.n	80051f2 <remove_chain+0x10>
			fs->free_clst++;
 800528c:	3301      	adds	r3, #1
 800528e:	61a3      	str	r3, [r4, #24]
			fs->fsi_flag |= 1;
 8005290:	7923      	ldrb	r3, [r4, #4]
 8005292:	f043 0301 	orr.w	r3, r3, #1
 8005296:	7123      	strb	r3, [r4, #4]
 8005298:	e7d7      	b.n	800524a <remove_chain+0x68>
		if (pclst == 0) {	/* Has the entire chain been removed? */
 800529a:	b90f      	cbnz	r7, 80052a0 <remove_chain+0xbe>
			obj->stat = 0;		/* Change the chain status 'initial' */
 800529c:	71f7      	strb	r7, [r6, #7]
 800529e:	e7eb      	b.n	8005278 <remove_chain+0x96>
			if (obj->stat == 0) {	/* Is it a fragmented chain from the beginning of this session? */
 80052a0:	79f3      	ldrb	r3, [r6, #7]
 80052a2:	b98b      	cbnz	r3, 80052c8 <remove_chain+0xe6>
				clst = obj->sclust;		/* Follow the chain to check if it gets contiguous */
 80052a4:	68b4      	ldr	r4, [r6, #8]
				while (clst != pclst) {
 80052a6:	42bc      	cmp	r4, r7
 80052a8:	d102      	bne.n	80052b0 <remove_chain+0xce>
					obj->stat = 2;	/* Change the chain status 'contiguous' */
 80052aa:	2302      	movs	r3, #2
 80052ac:	71f3      	strb	r3, [r6, #7]
 80052ae:	e7e3      	b.n	8005278 <remove_chain+0x96>
					nxt = get_fat(obj, clst);
 80052b0:	4621      	mov	r1, r4
 80052b2:	4630      	mov	r0, r6
 80052b4:	f7ff fdd3 	bl	8004e5e <get_fat>
					if (nxt < 2) return FR_INT_ERR;
 80052b8:	2801      	cmp	r0, #1
 80052ba:	d999      	bls.n	80051f0 <remove_chain+0xe>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
 80052bc:	1c43      	adds	r3, r0, #1
 80052be:	d0ab      	beq.n	8005218 <remove_chain+0x36>
					if (nxt != clst + 1) break;	/* Not contiguous? */
 80052c0:	3401      	adds	r4, #1
 80052c2:	4284      	cmp	r4, r0
 80052c4:	d0ef      	beq.n	80052a6 <remove_chain+0xc4>
 80052c6:	e7d7      	b.n	8005278 <remove_chain+0x96>
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
 80052c8:	2b03      	cmp	r3, #3
 80052ca:	d1d5      	bne.n	8005278 <remove_chain+0x96>
 80052cc:	68b3      	ldr	r3, [r6, #8]
 80052ce:	42bb      	cmp	r3, r7
 80052d0:	d8d2      	bhi.n	8005278 <remove_chain+0x96>
 80052d2:	69b2      	ldr	r2, [r6, #24]
 80052d4:	4413      	add	r3, r2
 80052d6:	42bb      	cmp	r3, r7
 80052d8:	d2e7      	bcs.n	80052aa <remove_chain+0xc8>
 80052da:	e7cd      	b.n	8005278 <remove_chain+0x96>

080052dc <fill_first_frag>:
{
 80052dc:	b570      	push	{r4, r5, r6, lr}
	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
 80052de:	79c3      	ldrb	r3, [r0, #7]
{
 80052e0:	4604      	mov	r4, r0
	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
 80052e2:	2b03      	cmp	r3, #3
 80052e4:	d110      	bne.n	8005308 <fill_first_frag+0x2c>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 80052e6:	6881      	ldr	r1, [r0, #8]
 80052e8:	6983      	ldr	r3, [r0, #24]
 80052ea:	18cd      	adds	r5, r1, r3
 80052ec:	42a9      	cmp	r1, r5
 80052ee:	d102      	bne.n	80052f6 <fill_first_frag+0x1a>
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 80052f0:	2000      	movs	r0, #0
 80052f2:	71e0      	strb	r0, [r4, #7]
 80052f4:	e007      	b.n	8005306 <fill_first_frag+0x2a>
			res = put_fat(obj->fs, cl, cl + 1);
 80052f6:	1c4e      	adds	r6, r1, #1
 80052f8:	4632      	mov	r2, r6
 80052fa:	6820      	ldr	r0, [r4, #0]
 80052fc:	f7ff fed8 	bl	80050b0 <put_fat>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8005300:	4631      	mov	r1, r6
			if (res != FR_OK) return res;
 8005302:	2800      	cmp	r0, #0
 8005304:	d0f2      	beq.n	80052ec <fill_first_frag+0x10>
}
 8005306:	bd70      	pop	{r4, r5, r6, pc}
	return FR_OK;
 8005308:	2000      	movs	r0, #0
 800530a:	e7fc      	b.n	8005306 <fill_first_frag+0x2a>

0800530c <mount_volume>:
{
 800530c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	*rfs = 0;
 8005310:	2300      	movs	r3, #0
 8005312:	600b      	str	r3, [r1, #0]
{
 8005314:	460f      	mov	r7, r1
 8005316:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 8005318:	f7ff fca1 	bl	8004c5e <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800531c:	1e06      	subs	r6, r0, #0
 800531e:	f2c0 8175 	blt.w	800560c <mount_volume+0x300>
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8005322:	4bbd      	ldr	r3, [pc, #756]	; (8005618 <mount_volume+0x30c>)
 8005324:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8005328:	2c00      	cmp	r4, #0
 800532a:	f000 8171 	beq.w	8005610 <mount_volume+0x304>
	*rfs = fs;							/* Return pointer to the filesystem object */
 800532e:	603c      	str	r4, [r7, #0]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8005330:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005332:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8005336:	b173      	cbz	r3, 8005356 <mount_volume+0x4a>
		stat = disk_status(fs->pdrv);
 8005338:	7860      	ldrb	r0, [r4, #1]
 800533a:	f7ff fb25 	bl	8004988 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800533e:	07c7      	lsls	r7, r0, #31
 8005340:	d409      	bmi.n	8005356 <mount_volume+0x4a>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005342:	2d00      	cmp	r5, #0
 8005344:	f000 80f1 	beq.w	800552a <mount_volume+0x21e>
 8005348:	f010 0004 	ands.w	r0, r0, #4
 800534c:	d000      	beq.n	8005350 <mount_volume+0x44>
				return FR_WRITE_PROTECTED;
 800534e:	200a      	movs	r0, #10
}
 8005350:	b004      	add	sp, #16
 8005352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	fs->fs_type = 0;					/* Clear the filesystem object */
 8005356:	2300      	movs	r3, #0
	fs->pdrv = LD2PD(vol);				/* Volume hosting physical drive */
 8005358:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the filesystem object */
 800535a:	7023      	strb	r3, [r4, #0]
	fs->pdrv = LD2PD(vol);				/* Volume hosting physical drive */
 800535c:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 800535e:	f7ff fb15 	bl	800498c <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005362:	07c1      	lsls	r1, r0, #31
 8005364:	f100 8156 	bmi.w	8005614 <mount_volume+0x308>
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005368:	b10d      	cbz	r5, 800536e <mount_volume+0x62>
 800536a:	0742      	lsls	r2, r0, #29
 800536c:	d4ef      	bmi.n	800534e <mount_volume+0x42>
	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD */
 800536e:	2100      	movs	r1, #0
 8005370:	4620      	mov	r0, r4
 8005372:	f7ff fe59 	bl	8005028 <check_fs>
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is a FAT VBR as auto scan, not a BS or disk error */
 8005376:	2802      	cmp	r0, #2
 8005378:	f040 809c 	bne.w	80054b4 <mount_volume+0x1a8>
 800537c:	2100      	movs	r1, #0
 800537e:	f204 2502 	addw	r5, r4, #514	; 0x202
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 8005382:	4628      	mov	r0, r5
 8005384:	f7ff fb86 	bl	8004a94 <ld_dword>
 8005388:	f84d 0021 	str.w	r0, [sp, r1, lsl #2]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 800538c:	3101      	adds	r1, #1
 800538e:	2904      	cmp	r1, #4
 8005390:	f105 0510 	add.w	r5, r5, #16
 8005394:	d1f5      	bne.n	8005382 <mount_volume+0x76>
 8005396:	2500      	movs	r5, #0
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 8005398:	f85d 1025 	ldr.w	r1, [sp, r5, lsl #2]
 800539c:	2900      	cmp	r1, #0
 800539e:	f000 8081 	beq.w	80054a4 <mount_volume+0x198>
 80053a2:	4620      	mov	r0, r4
 80053a4:	f7ff fe40 	bl	8005028 <check_fs>
	} while (part == 0 && fmt >= 2 && ++i < 4);
 80053a8:	2801      	cmp	r0, #1
 80053aa:	d87c      	bhi.n	80054a6 <mount_volume+0x19a>
	if (fmt == 1) {
 80053ac:	2801      	cmp	r0, #1
	bsect = fs->winsect;					/* Volume location */
 80053ae:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	if (fmt == 1) {
 80053b0:	f040 80bd 	bne.w	800552e <mount_volume+0x222>
 80053b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80053b8:	f104 027c 	add.w	r2, r4, #124	; 0x7c
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 80053bc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80053c0:	2e00      	cmp	r6, #0
 80053c2:	d17e      	bne.n	80054c2 <mount_volume+0x1b6>
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d1f9      	bne.n	80053bc <mount_volume+0xb0>
	rv = rv << 8 | ptr[0];
 80053c8:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
 80053cc:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 80053d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
 80053d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053d8:	d173      	bne.n	80054c2 <mount_volume+0x1b6>
		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 80053da:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 80053de:	2b09      	cmp	r3, #9
 80053e0:	d16f      	bne.n	80054c2 <mount_volume+0x1b6>
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 80053e2:	f104 0084 	add.w	r0, r4, #132	; 0x84
 80053e6:	f7ff fb5d 	bl	8004aa4 <ld_qword>
 80053ea:	eb10 0805 	adds.w	r8, r0, r5
 80053ee:	f141 0900 	adc.w	r9, r1, #0
		if (!FF_LBA64 && maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 80053f2:	f1b9 0f01 	cmp.w	r9, #1
 80053f6:	bf08      	it	eq
 80053f8:	f1b8 0f00 	cmpeq.w	r8, #0
 80053fc:	d261      	bcs.n	80054c2 <mount_volume+0x1b6>
		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 80053fe:	f104 0090 	add.w	r0, r4, #144	; 0x90
 8005402:	f7ff fb47 	bl	8004a94 <ld_dword>
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8005406:	f894 70aa 	ldrb.w	r7, [r4, #170]	; 0xaa
		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800540a:	6220      	str	r0, [r4, #32]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800540c:	2f01      	cmp	r7, #1
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800540e:	70a7      	strb	r7, [r4, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8005410:	d157      	bne.n	80054c2 <mount_volume+0x1b6>
		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 8005412:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
 8005416:	fa07 fa03 	lsl.w	sl, r7, r3
 800541a:	fa1f f38a 	uxth.w	r3, sl
 800541e:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 8005420:	2b00      	cmp	r3, #0
 8005422:	d04e      	beq.n	80054c2 <mount_volume+0x1b6>
		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 8005424:	f104 0098 	add.w	r0, r4, #152	; 0x98
 8005428:	f7ff fb34 	bl	8004a94 <ld_dword>
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800542c:	4b7b      	ldr	r3, [pc, #492]	; (800561c <mount_volume+0x310>)
		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800542e:	4607      	mov	r7, r0
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8005430:	4298      	cmp	r0, r3
 8005432:	d846      	bhi.n	80054c2 <mount_volume+0x1b6>
		fs->n_fatent = nclst + 2;
 8005434:	1c83      	adds	r3, r0, #2
 8005436:	61e3      	str	r3, [r4, #28]
		fs->volbase = bsect;
 8005438:	6265      	str	r5, [r4, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800543a:	f104 0094 	add.w	r0, r4, #148	; 0x94
 800543e:	f7ff fb29 	bl	8004a94 <ld_dword>
 8005442:	1941      	adds	r1, r0, r5
 8005444:	6321      	str	r1, [r4, #48]	; 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8005446:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 800544a:	f7ff fb23 	bl	8004a94 <ld_dword>
 800544e:	4428      	add	r0, r5
 8005450:	62a0      	str	r0, [r4, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 8005452:	4608      	mov	r0, r1
 8005454:	2100      	movs	r1, #0
 8005456:	fa1f f38a 	uxth.w	r3, sl
 800545a:	435f      	muls	r7, r3
 800545c:	19c2      	adds	r2, r0, r7
 800545e:	f141 0300 	adc.w	r3, r1, #0
 8005462:	4599      	cmp	r9, r3
 8005464:	bf08      	it	eq
 8005466:	4590      	cmpeq	r8, r2
 8005468:	d32b      	bcc.n	80054c2 <mount_volume+0x1b6>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800546a:	f104 009c 	add.w	r0, r4, #156	; 0x9c
 800546e:	f7ff fb11 	bl	8004a94 <ld_dword>
		so = i = 0;
 8005472:	4635      	mov	r5, r6
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 8005474:	62e0      	str	r0, [r4, #44]	; 0x2c
			if (i == 0) {
 8005476:	b965      	cbnz	r5, 8005492 <mount_volume+0x186>
				if (so >= fs->csize) return FR_NO_FILESYSTEM;	/* Not found? */
 8005478:	8963      	ldrh	r3, [r4, #10]
 800547a:	42b3      	cmp	r3, r6
 800547c:	d921      	bls.n	80054c2 <mount_volume+0x1b6>
				if (move_window(fs, clst2sect(fs, (DWORD)fs->dirbase) + so) != FR_OK) return FR_DISK_ERR;
 800547e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005480:	4620      	mov	r0, r4
 8005482:	f7ff fbbb 	bl	8004bfc <clst2sect>
 8005486:	1981      	adds	r1, r0, r6
 8005488:	4620      	mov	r0, r4
 800548a:	f7ff fc8c 	bl	8004da6 <move_window>
 800548e:	b998      	cbnz	r0, 80054b8 <mount_volume+0x1ac>
				so++;
 8005490:	3601      	adds	r6, #1
			if (fs->win[i] == ET_BITMAP) break;				/* Is it a bitmap entry? */
 8005492:	1963      	adds	r3, r4, r5
 8005494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005498:	2b81      	cmp	r3, #129	; 0x81
 800549a:	d014      	beq.n	80054c6 <mount_volume+0x1ba>
			i = (i + SZDIRE) % SS(fs);	/* Next entry */
 800549c:	3520      	adds	r5, #32
 800549e:	f3c5 0508 	ubfx	r5, r5, #0, #9
			if (i == 0) {
 80054a2:	e7e8      	b.n	8005476 <mount_volume+0x16a>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 80054a4:	2003      	movs	r0, #3
	} while (part == 0 && fmt >= 2 && ++i < 4);
 80054a6:	3501      	adds	r5, #1
 80054a8:	2d04      	cmp	r5, #4
 80054aa:	f47f af75 	bne.w	8005398 <mount_volume+0x8c>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80054ae:	2804      	cmp	r0, #4
 80054b0:	d107      	bne.n	80054c2 <mount_volume+0x1b6>
 80054b2:	e001      	b.n	80054b8 <mount_volume+0x1ac>
 80054b4:	2804      	cmp	r0, #4
 80054b6:	d101      	bne.n	80054bc <mount_volume+0x1b0>
 80054b8:	2001      	movs	r0, #1
 80054ba:	e749      	b.n	8005350 <mount_volume+0x44>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80054bc:	2801      	cmp	r0, #1
 80054be:	f67f af75 	bls.w	80053ac <mount_volume+0xa0>
 80054c2:	200d      	movs	r0, #13
 80054c4:	e744      	b.n	8005350 <mount_volume+0x44>
		bcl = ld_dword(fs->win + i + 20);					/* Bitmap cluster */
 80054c6:	f105 0014 	add.w	r0, r5, #20
 80054ca:	f104 063c 	add.w	r6, r4, #60	; 0x3c
 80054ce:	4430      	add	r0, r6
 80054d0:	f7ff fae0 	bl	8004a94 <ld_dword>
		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;
 80054d4:	2801      	cmp	r0, #1
		bcl = ld_dword(fs->win + i + 20);					/* Bitmap cluster */
 80054d6:	4605      	mov	r5, r0
		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;
 80054d8:	d9f3      	bls.n	80054c2 <mount_volume+0x1b6>
 80054da:	69e3      	ldr	r3, [r4, #28]
 80054dc:	4283      	cmp	r3, r0
 80054de:	d9f0      	bls.n	80054c2 <mount_volume+0x1b6>
		fs->bitbase = fs->database + fs->csize * (bcl - 2);	/* Bitmap sector */
 80054e0:	8962      	ldrh	r2, [r4, #10]
 80054e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80054e4:	1e83      	subs	r3, r0, #2
 80054e6:	fb03 1302 	mla	r3, r3, r2, r1
 80054ea:	6363      	str	r3, [r4, #52]	; 0x34
			if (move_window(fs, fs->fatbase + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
 80054ec:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80054ee:	4620      	mov	r0, r4
 80054f0:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 80054f4:	f7ff fc57 	bl	8004da6 <move_window>
 80054f8:	2800      	cmp	r0, #0
 80054fa:	d1dd      	bne.n	80054b8 <mount_volume+0x1ac>
			cv = ld_dword(fs->win + bcl % (SS(fs) / 4) * 4);
 80054fc:	f005 007f 	and.w	r0, r5, #127	; 0x7f
 8005500:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8005504:	f7ff fac6 	bl	8004a94 <ld_dword>
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
 8005508:	1c43      	adds	r3, r0, #1
 800550a:	d004      	beq.n	8005516 <mount_volume+0x20a>
			if (cv != ++bcl) return FR_NO_FILESYSTEM;	/* Fragmented? */
 800550c:	1c6b      	adds	r3, r5, #1
 800550e:	4298      	cmp	r0, r3
 8005510:	4605      	mov	r5, r0
 8005512:	d0eb      	beq.n	80054ec <mount_volume+0x1e0>
 8005514:	e7d5      	b.n	80054c2 <mount_volume+0x1b6>
		fmt = FS_EXFAT;			/* FAT sub-type */
 8005516:	2704      	movs	r7, #4
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005518:	e9c4 0005 	strd	r0, r0, [r4, #20]
	fs->id = ++Fsid;		/* Volume mount ID */
 800551c:	4a40      	ldr	r2, [pc, #256]	; (8005620 <mount_volume+0x314>)
	fs->fs_type = (BYTE)fmt;/* FAT sub-type */
 800551e:	7027      	strb	r7, [r4, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 8005520:	8813      	ldrh	r3, [r2, #0]
 8005522:	3301      	adds	r3, #1
 8005524:	b29b      	uxth	r3, r3
 8005526:	8013      	strh	r3, [r2, #0]
 8005528:	80e3      	strh	r3, [r4, #6]
	return FR_OK;
 800552a:	2000      	movs	r0, #0
 800552c:	e710      	b.n	8005350 <mount_volume+0x44>
	rv = rv << 8 | ptr[0];
 800552e:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8005532:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 8005536:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800553a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800553e:	d1c0      	bne.n	80054c2 <mount_volume+0x1b6>
	rv = rv << 8 | ptr[0];
 8005540:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 8005544:	f894 6052 	ldrb.w	r6, [r4, #82]	; 0x52
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005548:	ea56 2603 	orrs.w	r6, r6, r3, lsl #8
 800554c:	d104      	bne.n	8005558 <mount_volume+0x24c>
 800554e:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8005552:	f7ff fa9f 	bl	8004a94 <ld_dword>
 8005556:	4606      	mov	r6, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005558:	f894 904c 	ldrb.w	r9, [r4, #76]	; 0x4c
		fs->fsize = fasize;
 800555c:	6226      	str	r6, [r4, #32]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800555e:	f109 33ff 	add.w	r3, r9, #4294967295
 8005562:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005564:	f884 9002 	strb.w	r9, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005568:	d8ab      	bhi.n	80054c2 <mount_volume+0x1b6>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800556a:	f894 7049 	ldrb.w	r7, [r4, #73]	; 0x49
 800556e:	b2bb      	uxth	r3, r7
 8005570:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005572:	2b00      	cmp	r3, #0
 8005574:	d0a5      	beq.n	80054c2 <mount_volume+0x1b6>
 8005576:	1e7b      	subs	r3, r7, #1
 8005578:	423b      	tst	r3, r7
 800557a:	d1a2      	bne.n	80054c2 <mount_volume+0x1b6>
	rv = rv << 8 | ptr[0];
 800557c:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
 8005580:	f894 804d 	ldrb.w	r8, [r4, #77]	; 0x4d
 8005584:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005588:	f018 0f0f 	tst.w	r8, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800558c:	f8a4 8008 	strh.w	r8, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005590:	d197      	bne.n	80054c2 <mount_volume+0x1b6>
	rv = rv << 8 | ptr[0];
 8005592:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
 8005596:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800559a:	ea50 2001 	orrs.w	r0, r0, r1, lsl #8
 800559e:	d103      	bne.n	80055a8 <mount_volume+0x29c>
 80055a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80055a4:	f7ff fa76 	bl	8004a94 <ld_dword>
	rv = rv << 8 | ptr[0];
 80055a8:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
 80055ac:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80055b0:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 80055b4:	d085      	beq.n	80054c2 <mount_volume+0x1b6>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80055b6:	fb06 f909 	mul.w	r9, r6, r9
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80055ba:	eb03 1218 	add.w	r2, r3, r8, lsr #4
 80055be:	444a      	add	r2, r9
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80055c0:	4290      	cmp	r0, r2
 80055c2:	f4ff af7e 	bcc.w	80054c2 <mount_volume+0x1b6>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80055c6:	1a81      	subs	r1, r0, r2
 80055c8:	fbb1 f1f7 	udiv	r1, r1, r7
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80055cc:	2900      	cmp	r1, #0
 80055ce:	f43f af78 	beq.w	80054c2 <mount_volume+0x1b6>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 80055d2:	4814      	ldr	r0, [pc, #80]	; (8005624 <mount_volume+0x318>)
 80055d4:	4281      	cmp	r1, r0
 80055d6:	f63f af74 	bhi.w	80054c2 <mount_volume+0x1b6>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80055da:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 80055de:	4281      	cmp	r1, r0
 80055e0:	d922      	bls.n	8005628 <mount_volume+0x31c>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 80055e2:	2703      	movs	r7, #3
 80055e4:	e026      	b.n	8005634 <mount_volume+0x328>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80055e6:	f1b8 0f00 	cmp.w	r8, #0
 80055ea:	f43f af6a 	beq.w	80054c2 <mount_volume+0x1b6>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80055ee:	2f02      	cmp	r7, #2
 80055f0:	ea4f 0041 	mov.w	r0, r1, lsl #1
 80055f4:	bf18      	it	ne
 80055f6:	1840      	addne	r0, r0, r1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80055f8:	444b      	add	r3, r9
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80055fa:	bf18      	it	ne
 80055fc:	f001 0101 	andne.w	r1, r1, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005600:	62e3      	str	r3, [r4, #44]	; 0x2c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005602:	bf0c      	ite	eq
 8005604:	4601      	moveq	r1, r0
 8005606:	eb01 0150 	addne.w	r1, r1, r0, lsr #1
 800560a:	e02e      	b.n	800566a <mount_volume+0x35e>
	if (vol < 0) return FR_INVALID_DRIVE;
 800560c:	200b      	movs	r0, #11
 800560e:	e69f      	b.n	8005350 <mount_volume+0x44>
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8005610:	200c      	movs	r0, #12
 8005612:	e69d      	b.n	8005350 <mount_volume+0x44>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005614:	2003      	movs	r0, #3
 8005616:	e69b      	b.n	8005350 <mount_volume+0x44>
 8005618:	200008a4 	.word	0x200008a4
 800561c:	7ffffffd 	.word	0x7ffffffd
 8005620:	200008a8 	.word	0x200008a8
 8005624:	0ffffff5 	.word	0x0ffffff5
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005628:	f640 77f5 	movw	r7, #4085	; 0xff5
 800562c:	42b9      	cmp	r1, r7
 800562e:	bf94      	ite	ls
 8005630:	2701      	movls	r7, #1
 8005632:	2702      	movhi	r7, #2
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005634:	3102      	adds	r1, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005636:	442b      	add	r3, r5
		fs->database = bsect + sysect;					/* Data start sector */
 8005638:	442a      	add	r2, r5
		if (fmt == FS_FAT32) {
 800563a:	2f03      	cmp	r7, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800563c:	61e1      	str	r1, [r4, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800563e:	6265      	str	r5, [r4, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005640:	62a3      	str	r3, [r4, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8005642:	6322      	str	r2, [r4, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8005644:	d1cf      	bne.n	80055e6 <mount_volume+0x2da>
	rv = rv << 8 | ptr[0];
 8005646:	f894 2067 	ldrb.w	r2, [r4, #103]	; 0x67
 800564a:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800564e:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8005652:	f47f af36 	bne.w	80054c2 <mount_volume+0x1b6>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005656:	f1b8 0f00 	cmp.w	r8, #0
 800565a:	f47f af32 	bne.w	80054c2 <mount_volume+0x1b6>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800565e:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005662:	f7ff fa17 	bl	8004a94 <ld_dword>
 8005666:	62e0      	str	r0, [r4, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005668:	0089      	lsls	r1, r1, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800566a:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
 800566e:	ebb6 2f51 	cmp.w	r6, r1, lsr #9
 8005672:	f4ff af26 	bcc.w	80054c2 <mount_volume+0x1b6>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005676:	f04f 33ff 	mov.w	r3, #4294967295
 800567a:	e9c4 3305 	strd	r3, r3, [r4, #20]
		fs->fsi_flag = 0x80;
 800567e:	2380      	movs	r3, #128	; 0x80
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 8005680:	2f03      	cmp	r7, #3
		fs->fsi_flag = 0x80;
 8005682:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 8005684:	f47f af4a 	bne.w	800551c <mount_volume+0x210>
	rv = rv << 8 | ptr[0];
 8005688:	f894 206d 	ldrb.w	r2, [r4, #109]	; 0x6d
 800568c:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8005690:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005694:	2b01      	cmp	r3, #1
 8005696:	f47f af41 	bne.w	800551c <mount_volume+0x210>
			&& move_window(fs, bsect + 1) == FR_OK)
 800569a:	1c69      	adds	r1, r5, #1
 800569c:	4620      	mov	r0, r4
 800569e:	f7ff fb82 	bl	8004da6 <move_window>
 80056a2:	2800      	cmp	r0, #0
 80056a4:	f47f af3a 	bne.w	800551c <mount_volume+0x210>
	rv = rv << 8 | ptr[0];
 80056a8:	f894 223b 	ldrb.w	r2, [r4, #571]	; 0x23b
 80056ac:	f894 323a 	ldrb.w	r3, [r4, #570]	; 0x23a
			fs->fsi_flag = 0;
 80056b0:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 80056b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 80056b6:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80056ba:	4293      	cmp	r3, r2
 80056bc:	f47f af2e 	bne.w	800551c <mount_volume+0x210>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80056c0:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80056c4:	f7ff f9e6 	bl	8004a94 <ld_dword>
 80056c8:	4b0b      	ldr	r3, [pc, #44]	; (80056f8 <mount_volume+0x3ec>)
 80056ca:	4298      	cmp	r0, r3
 80056cc:	f47f af26 	bne.w	800551c <mount_volume+0x210>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80056d0:	f504 7008 	add.w	r0, r4, #544	; 0x220
 80056d4:	f7ff f9de 	bl	8004a94 <ld_dword>
 80056d8:	4b08      	ldr	r3, [pc, #32]	; (80056fc <mount_volume+0x3f0>)
 80056da:	4298      	cmp	r0, r3
 80056dc:	f47f af1e 	bne.w	800551c <mount_volume+0x210>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80056e0:	f504 7009 	add.w	r0, r4, #548	; 0x224
 80056e4:	f7ff f9d6 	bl	8004a94 <ld_dword>
 80056e8:	61a0      	str	r0, [r4, #24]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80056ea:	f504 700a 	add.w	r0, r4, #552	; 0x228
 80056ee:	f7ff f9d1 	bl	8004a94 <ld_dword>
 80056f2:	6160      	str	r0, [r4, #20]
 80056f4:	e712      	b.n	800551c <mount_volume+0x210>
 80056f6:	bf00      	nop
 80056f8:	41615252 	.word	0x41615252
 80056fc:	61417272 	.word	0x61417272

08005700 <create_chain>:
{
 8005700:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005704:	4607      	mov	r7, r0
	FATFS *fs = obj->fs;
 8005706:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8005708:	4689      	mov	r9, r1
 800570a:	b949      	cbnz	r1, 8005720 <create_chain+0x20>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 800570c:	696e      	ldr	r6, [r5, #20]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800570e:	b1ce      	cbz	r6, 8005744 <create_chain+0x44>
 8005710:	69eb      	ldr	r3, [r5, #28]
 8005712:	42b3      	cmp	r3, r6
 8005714:	bf98      	it	ls
 8005716:	2601      	movls	r6, #1
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 8005718:	69ab      	ldr	r3, [r5, #24]
 800571a:	b9ab      	cbnz	r3, 8005748 <create_chain+0x48>
 800571c:	2400      	movs	r4, #0
 800571e:	e009      	b.n	8005734 <create_chain+0x34>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005720:	f7ff fb9d 	bl	8004e5e <get_fat>
		if (cs < 2) return 1;				/* Test for insanity */
 8005724:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005726:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Test for insanity */
 8005728:	f240 80de 	bls.w	80058e8 <create_chain+0x1e8>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 800572c:	1c42      	adds	r2, r0, #1
 800572e:	d104      	bne.n	800573a <create_chain+0x3a>
					ncl = 2;
 8005730:	f04f 34ff 	mov.w	r4, #4294967295
}
 8005734:	4620      	mov	r0, r4
 8005736:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800573a:	69eb      	ldr	r3, [r5, #28]
 800573c:	4283      	cmp	r3, r0
 800573e:	d8f9      	bhi.n	8005734 <create_chain+0x34>
 8005740:	464e      	mov	r6, r9
 8005742:	e7e9      	b.n	8005718 <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005744:	2601      	movs	r6, #1
 8005746:	e7e7      	b.n	8005718 <create_chain+0x18>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8005748:	782a      	ldrb	r2, [r5, #0]
 800574a:	69eb      	ldr	r3, [r5, #28]
 800574c:	2a04      	cmp	r2, #4
 800574e:	f040 8088 	bne.w	8005862 <create_chain+0x162>
	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8005752:	f1a6 0a02 	sub.w	sl, r6, #2
	if (clst >= fs->n_fatent - 2) clst = 0;
 8005756:	3b02      	subs	r3, #2
 8005758:	459a      	cmp	sl, r3
 800575a:	bf28      	it	cs
 800575c:	f04f 0a00 	movcs.w	sl, #0
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8005760:	f04f 0b01 	mov.w	fp, #1
	scl = val = clst; ctr = 0;
 8005764:	46d0      	mov	r8, sl
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 8005766:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8005768:	4628      	mov	r0, r5
 800576a:	eb01 3118 	add.w	r1, r1, r8, lsr #12
 800576e:	f7ff fb1a 	bl	8004da6 <move_window>
 8005772:	2800      	cmp	r0, #0
 8005774:	d149      	bne.n	800580a <create_chain+0x10a>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8005776:	f008 0307 	and.w	r3, r8, #7
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800577a:	69ea      	ldr	r2, [r5, #28]
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800577c:	fa0b f303 	lsl.w	r3, fp, r3
 8005780:	f3c8 01c8 	ubfx	r1, r8, #3, #9
 8005784:	b2db      	uxtb	r3, r3
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8005786:	1e90      	subs	r0, r2, #2
			bm = 1;
 8005788:	4644      	mov	r4, r8
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800578a:	f108 0801 	add.w	r8, r8, #1
 800578e:	4580      	cmp	r8, r0
					val = 0; bm = 0; i = SS(fs);
 8005790:	bf28      	it	cs
 8005792:	f04f 0800 	movcs.w	r8, #0
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8005796:	eb05 0201 	add.w	r2, r5, r1
 800579a:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
					val = 0; bm = 0; i = SS(fs);
 800579e:	bf28      	it	cs
 80057a0:	f44f 7100 	movcs.w	r1, #512	; 0x200
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 80057a4:	ea02 0203 	and.w	r2, r2, r3
 80057a8:	bf3a      	itte	cc
 80057aa:	005b      	lslcc	r3, r3, #1
 80057ac:	b2db      	uxtbcc	r3, r3
					val = 0; bm = 0; i = SS(fs);
 80057ae:	4643      	movcs	r3, r8
				if (bv == 0) {	/* Is it a free cluster? */
 80057b0:	bb0a      	cbnz	r2, 80057f6 <create_chain+0xf6>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 80057b2:	3402      	adds	r4, #2
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 80057b4:	1e63      	subs	r3, r4, #1
 80057b6:	3303      	adds	r3, #3
 80057b8:	d8bc      	bhi.n	8005734 <create_chain+0x34>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 80057ba:	2301      	movs	r3, #1
 80057bc:	4621      	mov	r1, r4
 80057be:	461a      	mov	r2, r3
 80057c0:	4628      	mov	r0, r5
 80057c2:	f7ff fb0e 	bl	8004de2 <change_bitmap>
		if (res == FR_INT_ERR) return 1;
 80057c6:	2802      	cmp	r0, #2
 80057c8:	f000 808e 	beq.w	80058e8 <create_chain+0x1e8>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 80057cc:	2801      	cmp	r0, #1
 80057ce:	d0af      	beq.n	8005730 <create_chain+0x30>
		if (clst == 0) {							/* Is it a new chain? */
 80057d0:	f1b9 0f00 	cmp.w	r9, #0
 80057d4:	d11e      	bne.n	8005814 <create_chain+0x114>
			obj->stat = 2;							/* Set status 'contiguous' */
 80057d6:	2302      	movs	r3, #2
				obj->stat = 3;						/* Change status 'just fragmented' */
 80057d8:	71fb      	strb	r3, [r7, #7]
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 80057da:	79fb      	ldrb	r3, [r7, #7]
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d007      	beq.n	80057f0 <create_chain+0xf0>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 80057e0:	f109 0201 	add.w	r2, r9, #1
 80057e4:	42a2      	cmp	r2, r4
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	d121      	bne.n	800582e <create_chain+0x12e>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 80057ea:	b1f3      	cbz	r3, 800582a <create_chain+0x12a>
 80057ec:	3301      	adds	r3, #1
 80057ee:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80057f0:	2800      	cmp	r0, #0
 80057f2:	d179      	bne.n	80058e8 <create_chain+0x1e8>
 80057f4:	e027      	b.n	8005846 <create_chain+0x146>
				if (val == clst) return 0;	/* All cluster scanned? */
 80057f6:	45c2      	cmp	sl, r8
 80057f8:	d00a      	beq.n	8005810 <create_chain+0x110>
			} while (bm != 0);
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1c4      	bne.n	8005788 <create_chain+0x88>
		} while (++i < SS(fs));
 80057fe:	3101      	adds	r1, #1
 8005800:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005804:	d2af      	bcs.n	8005766 <create_chain+0x66>
			bm = 1;
 8005806:	2301      	movs	r3, #1
 8005808:	e7be      	b.n	8005788 <create_chain+0x88>
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 800580a:	f04f 34ff 	mov.w	r4, #4294967295
 800580e:	e7d1      	b.n	80057b4 <create_chain+0xb4>
				if (val == clst) return 0;	/* All cluster scanned? */
 8005810:	2400      	movs	r4, #0
 8005812:	e7cf      	b.n	80057b4 <create_chain+0xb4>
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8005814:	79fb      	ldrb	r3, [r7, #7]
 8005816:	2b02      	cmp	r3, #2
 8005818:	d1df      	bne.n	80057da <create_chain+0xda>
 800581a:	1c73      	adds	r3, r6, #1
 800581c:	42a3      	cmp	r3, r4
 800581e:	d0dc      	beq.n	80057da <create_chain+0xda>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	1af6      	subs	r6, r6, r3
 8005824:	61be      	str	r6, [r7, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8005826:	2303      	movs	r3, #3
 8005828:	e7d6      	b.n	80057d8 <create_chain+0xd8>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800582a:	2302      	movs	r3, #2
 800582c:	e7df      	b.n	80057ee <create_chain+0xee>
				if (obj->n_frag == 0) obj->n_frag = 1;
 800582e:	b90b      	cbnz	r3, 8005834 <create_chain+0x134>
 8005830:	2301      	movs	r3, #1
 8005832:	61fb      	str	r3, [r7, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 8005834:	4622      	mov	r2, r4
 8005836:	4649      	mov	r1, r9
 8005838:	4638      	mov	r0, r7
 800583a:	f7ff fcba 	bl	80051b2 <fill_last_frag>
				if (res == FR_OK) obj->n_frag = 1;
 800583e:	2800      	cmp	r0, #0
 8005840:	d14f      	bne.n	80058e2 <create_chain+0x1e2>
 8005842:	2301      	movs	r3, #1
 8005844:	61fb      	str	r3, [r7, #28]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005846:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
 800584a:	3a02      	subs	r2, #2
 800584c:	4293      	cmp	r3, r2
 800584e:	bf9c      	itt	ls
 8005850:	f103 33ff 	addls.w	r3, r3, #4294967295
 8005854:	61ab      	strls	r3, [r5, #24]
		fs->fsi_flag |= 1;
 8005856:	792b      	ldrb	r3, [r5, #4]
		fs->last_clst = ncl;
 8005858:	616c      	str	r4, [r5, #20]
		fs->fsi_flag |= 1;
 800585a:	f043 0301 	orr.w	r3, r3, #1
 800585e:	712b      	strb	r3, [r5, #4]
 8005860:	e768      	b.n	8005734 <create_chain+0x34>
		if (scl == clst) {						/* Stretching an existing chain? */
 8005862:	454e      	cmp	r6, r9
 8005864:	d114      	bne.n	8005890 <create_chain+0x190>
			ncl = scl + 1;						/* Test if next cluster is free */
 8005866:	1c74      	adds	r4, r6, #1
			if (ncl >= fs->n_fatent) ncl = 2;
 8005868:	429c      	cmp	r4, r3
 800586a:	bf28      	it	cs
 800586c:	2402      	movcs	r4, #2
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 800586e:	4638      	mov	r0, r7
 8005870:	4621      	mov	r1, r4
 8005872:	f7ff faf4 	bl	8004e5e <get_fat>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8005876:	2801      	cmp	r0, #1
 8005878:	d036      	beq.n	80058e8 <create_chain+0x1e8>
 800587a:	1c43      	adds	r3, r0, #1
 800587c:	f43f af58 	beq.w	8005730 <create_chain+0x30>
			if (cs != 0) {						/* Not free? */
 8005880:	b1e0      	cbz	r0, 80058bc <create_chain+0x1bc>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 8005882:	696b      	ldr	r3, [r5, #20]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 8005884:	2b01      	cmp	r3, #1
 8005886:	d903      	bls.n	8005890 <create_chain+0x190>
 8005888:	69ea      	ldr	r2, [r5, #28]
 800588a:	4293      	cmp	r3, r2
 800588c:	bf38      	it	cc
 800588e:	461e      	movcc	r6, r3
 8005890:	4634      	mov	r4, r6
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005892:	69eb      	ldr	r3, [r5, #28]
				ncl++;							/* Next cluster */
 8005894:	3401      	adds	r4, #1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005896:	42a3      	cmp	r3, r4
 8005898:	d803      	bhi.n	80058a2 <create_chain+0x1a2>
					if (ncl > scl) return 0;	/* No free cluster found? */
 800589a:	2e01      	cmp	r6, #1
 800589c:	f67f af3e 	bls.w	800571c <create_chain+0x1c>
					ncl = 2;
 80058a0:	2402      	movs	r4, #2
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 80058a2:	4621      	mov	r1, r4
 80058a4:	4638      	mov	r0, r7
 80058a6:	f7ff fada 	bl	8004e5e <get_fat>
				if (cs == 0) break;				/* Found a free cluster? */
 80058aa:	b148      	cbz	r0, 80058c0 <create_chain+0x1c0>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 80058ac:	2801      	cmp	r0, #1
 80058ae:	d01b      	beq.n	80058e8 <create_chain+0x1e8>
 80058b0:	3001      	adds	r0, #1
 80058b2:	f43f af3d 	beq.w	8005730 <create_chain+0x30>
				if (ncl == scl) return 0;		/* No free cluster found? */
 80058b6:	42b4      	cmp	r4, r6
 80058b8:	d1eb      	bne.n	8005892 <create_chain+0x192>
 80058ba:	e72f      	b.n	800571c <create_chain+0x1c>
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 80058bc:	2c00      	cmp	r4, #0
 80058be:	d0e7      	beq.n	8005890 <create_chain+0x190>
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 80058c0:	f04f 32ff 	mov.w	r2, #4294967295
 80058c4:	4621      	mov	r1, r4
 80058c6:	4628      	mov	r0, r5
 80058c8:	f7ff fbf2 	bl	80050b0 <put_fat>
		if (res == FR_OK && clst != 0) {
 80058cc:	b948      	cbnz	r0, 80058e2 <create_chain+0x1e2>
 80058ce:	f1b9 0f00 	cmp.w	r9, #0
 80058d2:	d0b8      	beq.n	8005846 <create_chain+0x146>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 80058d4:	4622      	mov	r2, r4
 80058d6:	4649      	mov	r1, r9
 80058d8:	4628      	mov	r0, r5
 80058da:	f7ff fbe9 	bl	80050b0 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80058de:	2800      	cmp	r0, #0
 80058e0:	d0b1      	beq.n	8005846 <create_chain+0x146>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80058e2:	2801      	cmp	r0, #1
 80058e4:	f43f af24 	beq.w	8005730 <create_chain+0x30>
 80058e8:	2401      	movs	r4, #1
 80058ea:	e723      	b.n	8005734 <create_chain+0x34>

080058ec <sync_fs>:
{
 80058ec:	b570      	push	{r4, r5, r6, lr}
	if (fs->wflag) {	/* Is the disk access window dirty? */
 80058ee:	78c3      	ldrb	r3, [r0, #3]
{
 80058f0:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Is the disk access window dirty? */
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d144      	bne.n	8005980 <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 80058f6:	7823      	ldrb	r3, [r4, #0]
 80058f8:	2b03      	cmp	r3, #3
 80058fa:	d138      	bne.n	800596e <sync_fs+0x82>
 80058fc:	7926      	ldrb	r6, [r4, #4]
 80058fe:	2e01      	cmp	r6, #1
 8005900:	d135      	bne.n	800596e <sync_fs+0x82>
			mem_set(fs->win, 0, sizeof fs->win);
 8005902:	f104 053c 	add.w	r5, r4, #60	; 0x3c
 8005906:	f44f 7200 	mov.w	r2, #512	; 0x200
 800590a:	2100      	movs	r1, #0
 800590c:	4628      	mov	r0, r5
 800590e:	f7ff f911 	bl	8004b34 <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 8005912:	2355      	movs	r3, #85	; 0x55
 8005914:	f884 323a 	strb.w	r3, [r4, #570]	; 0x23a
	*ptr++ = (BYTE)val;
 8005918:	23aa      	movs	r3, #170	; 0xaa
 800591a:	f884 323b 	strb.w	r3, [r4, #571]	; 0x23b
	*ptr++ = (BYTE)val; val >>= 8;
 800591e:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
 8005920:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8005922:	2172      	movs	r1, #114	; 0x72
 8005924:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	*ptr++ = (BYTE)val; val >>= 8;
 8005928:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	*ptr++ = (BYTE)val; val >>= 8;
 800592c:	2361      	movs	r3, #97	; 0x61
	*ptr++ = (BYTE)val;
 800592e:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
	*ptr++ = (BYTE)val; val >>= 8;
 8005932:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005936:	f884 2222 	strb.w	r2, [r4, #546]	; 0x222
	*ptr++ = (BYTE)val;
 800593a:	f884 3223 	strb.w	r3, [r4, #547]	; 0x223
	*ptr++ = (BYTE)val; val >>= 8;
 800593e:	f884 1220 	strb.w	r1, [r4, #544]	; 0x220
	*ptr++ = (BYTE)val; val >>= 8;
 8005942:	f884 1221 	strb.w	r1, [r4, #545]	; 0x221
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005946:	f504 7009 	add.w	r0, r4, #548	; 0x224
 800594a:	69a1      	ldr	r1, [r4, #24]
 800594c:	f7ff f8db 	bl	8004b06 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005950:	6961      	ldr	r1, [r4, #20]
 8005952:	f504 700a 	add.w	r0, r4, #552	; 0x228
 8005956:	f7ff f8d6 	bl	8004b06 <st_dword>
			fs->winsect = fs->volbase + 1;
 800595a:	6a62      	ldr	r2, [r4, #36]	; 0x24
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 800595c:	4633      	mov	r3, r6
			fs->winsect = fs->volbase + 1;
 800595e:	3201      	adds	r2, #1
 8005960:	63a2      	str	r2, [r4, #56]	; 0x38
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8005962:	4629      	mov	r1, r5
 8005964:	7860      	ldrb	r0, [r4, #1]
 8005966:	f7ff f847 	bl	80049f8 <disk_write>
			fs->fsi_flag = 0;
 800596a:	2300      	movs	r3, #0
 800596c:	7123      	strb	r3, [r4, #4]
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800596e:	2200      	movs	r2, #0
 8005970:	7860      	ldrb	r0, [r4, #1]
 8005972:	4611      	mov	r1, r2
 8005974:	f7ff f866 	bl	8004a44 <disk_ioctl>
 8005978:	3000      	adds	r0, #0
 800597a:	bf18      	it	ne
 800597c:	2001      	movne	r0, #1
 800597e:	e003      	b.n	8005988 <sync_fs+0x9c>
 8005980:	f7ff f9f1 	bl	8004d66 <sync_window.part.7>
	if (res == FR_OK) {
 8005984:	2800      	cmp	r0, #0
 8005986:	d0b6      	beq.n	80058f6 <sync_fs+0xa>
}
 8005988:	bd70      	pop	{r4, r5, r6, pc}

0800598a <dir_clear>:
{
 800598a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Is the disk access window dirty? */
 800598c:	78c3      	ldrb	r3, [r0, #3]
{
 800598e:	4604      	mov	r4, r0
 8005990:	460d      	mov	r5, r1
	if (fs->wflag) {	/* Is the disk access window dirty? */
 8005992:	b9b3      	cbnz	r3, 80059c2 <dir_clear+0x38>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8005994:	4629      	mov	r1, r5
 8005996:	4620      	mov	r0, r4
 8005998:	f7ff f930 	bl	8004bfc <clst2sect>
	mem_set(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 800599c:	f104 063c 	add.w	r6, r4, #60	; 0x3c
	fs->winsect = sect;				/* Set window to top of the cluster */
 80059a0:	63a0      	str	r0, [r4, #56]	; 0x38
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 80059a2:	4607      	mov	r7, r0
	mem_set(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 80059a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059a8:	2100      	movs	r1, #0
 80059aa:	4630      	mov	r0, r6
 80059ac:	f7ff f8c2 	bl	8004b34 <mem_set>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 80059b0:	2500      	movs	r5, #0
 80059b2:	8963      	ldrh	r3, [r4, #10]
 80059b4:	429d      	cmp	r5, r3
 80059b6:	d30a      	bcc.n	80059ce <dir_clear+0x44>
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 80059b8:	8960      	ldrh	r0, [r4, #10]
 80059ba:	1b40      	subs	r0, r0, r5
 80059bc:	bf18      	it	ne
 80059be:	2001      	movne	r0, #1
}
 80059c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059c2:	f7ff f9d0 	bl	8004d66 <sync_window.part.7>
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80059c6:	2800      	cmp	r0, #0
 80059c8:	d0e4      	beq.n	8005994 <dir_clear+0xa>
 80059ca:	2001      	movs	r0, #1
 80059cc:	e7f8      	b.n	80059c0 <dir_clear+0x36>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 80059ce:	2301      	movs	r3, #1
 80059d0:	197a      	adds	r2, r7, r5
 80059d2:	4631      	mov	r1, r6
 80059d4:	7860      	ldrb	r0, [r4, #1]
 80059d6:	f7ff f80f 	bl	80049f8 <disk_write>
 80059da:	2800      	cmp	r0, #0
 80059dc:	d1ec      	bne.n	80059b8 <dir_clear+0x2e>
 80059de:	3501      	adds	r5, #1
 80059e0:	e7e7      	b.n	80059b2 <dir_clear+0x28>

080059e2 <dir_next>:
{
 80059e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = dp->obj.fs;
 80059e6:	6805      	ldr	r5, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80059e8:	6b07      	ldr	r7, [r0, #48]	; 0x30
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 80059ea:	782b      	ldrb	r3, [r5, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80059ec:	3720      	adds	r7, #32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 80059ee:	2b04      	cmp	r3, #4
 80059f0:	bf0c      	ite	eq
 80059f2:	f04f 5380 	moveq.w	r3, #268435456	; 0x10000000
 80059f6:	f44f 1300 	movne.w	r3, #2097152	; 0x200000
 80059fa:	42bb      	cmp	r3, r7
 80059fc:	bf9c      	itt	ls
 80059fe:	2300      	movls	r3, #0
 8005a00:	6383      	strls	r3, [r0, #56]	; 0x38
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8005a02:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
 8005a04:	4604      	mov	r4, r0
 8005a06:	4689      	mov	r9, r1
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8005a08:	b173      	cbz	r3, 8005a28 <dir_next+0x46>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005a0a:	f3c7 0808 	ubfx	r8, r7, #0, #9
 8005a0e:	f1b8 0f00 	cmp.w	r8, #0
 8005a12:	d13c      	bne.n	8005a8e <dir_next+0xac>
		if (dp->clust == 0) {	/* Static table */
 8005a14:	6b41      	ldr	r1, [r0, #52]	; 0x34
		dp->sect++;				/* Next sector */
 8005a16:	3301      	adds	r3, #1
 8005a18:	6383      	str	r3, [r0, #56]	; 0x38
		if (dp->clust == 0) {	/* Static table */
 8005a1a:	b939      	cbnz	r1, 8005a2c <dir_next+0x4a>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005a1c:	892b      	ldrh	r3, [r5, #8]
 8005a1e:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
 8005a22:	d834      	bhi.n	8005a8e <dir_next+0xac>
				dp->sect = 0; return FR_NO_FILE;
 8005a24:	2300      	movs	r3, #0
 8005a26:	63a3      	str	r3, [r4, #56]	; 0x38
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8005a28:	2004      	movs	r0, #4
 8005a2a:	e00a      	b.n	8005a42 <dir_next+0x60>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 8005a2c:	896b      	ldrh	r3, [r5, #10]
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	ea13 2357 	ands.w	r3, r3, r7, lsr #9
 8005a34:	d12b      	bne.n	8005a8e <dir_next+0xac>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8005a36:	f7ff fa12 	bl	8004e5e <get_fat>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8005a3a:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8005a3c:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8005a3e:	d802      	bhi.n	8005a46 <dir_next+0x64>
 8005a40:	2002      	movs	r0, #2
}
 8005a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005a46:	1c42      	adds	r2, r0, #1
 8005a48:	d101      	bne.n	8005a4e <dir_next+0x6c>
 8005a4a:	2001      	movs	r0, #1
 8005a4c:	e7f9      	b.n	8005a42 <dir_next+0x60>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8005a4e:	69eb      	ldr	r3, [r5, #28]
 8005a50:	4283      	cmp	r3, r0
 8005a52:	d816      	bhi.n	8005a82 <dir_next+0xa0>
					if (!stretch) {								/* If no stretch, report EOT */
 8005a54:	f1b9 0f00 	cmp.w	r9, #0
 8005a58:	d0e4      	beq.n	8005a24 <dir_next+0x42>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005a5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a5c:	4620      	mov	r0, r4
 8005a5e:	f7ff fe4f 	bl	8005700 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005a62:	4606      	mov	r6, r0
 8005a64:	b1c8      	cbz	r0, 8005a9a <dir_next+0xb8>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005a66:	2801      	cmp	r0, #1
 8005a68:	d0ea      	beq.n	8005a40 <dir_next+0x5e>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005a6a:	1c43      	adds	r3, r0, #1
 8005a6c:	d0ed      	beq.n	8005a4a <dir_next+0x68>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8005a6e:	4601      	mov	r1, r0
 8005a70:	4628      	mov	r0, r5
 8005a72:	f7ff ff8a 	bl	800598a <dir_clear>
 8005a76:	2800      	cmp	r0, #0
 8005a78:	d1e7      	bne.n	8005a4a <dir_next+0x68>
					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
 8005a7a:	79e3      	ldrb	r3, [r4, #7]
 8005a7c:	f043 0304 	orr.w	r3, r3, #4
 8005a80:	71e3      	strb	r3, [r4, #7]
				dp->clust = clst;		/* Initialize data for new cluster */
 8005a82:	6366      	str	r6, [r4, #52]	; 0x34
				dp->sect = clst2sect(fs, clst);
 8005a84:	4631      	mov	r1, r6
 8005a86:	4628      	mov	r0, r5
 8005a88:	f7ff f8b8 	bl	8004bfc <clst2sect>
 8005a8c:	63a0      	str	r0, [r4, #56]	; 0x38
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005a8e:	353c      	adds	r5, #60	; 0x3c
 8005a90:	4445      	add	r5, r8
	dp->dptr = ofs;						/* Current entry */
 8005a92:	6327      	str	r7, [r4, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005a94:	63e5      	str	r5, [r4, #60]	; 0x3c
	return FR_OK;
 8005a96:	2000      	movs	r0, #0
 8005a98:	e7d3      	b.n	8005a42 <dir_next+0x60>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005a9a:	2007      	movs	r0, #7
 8005a9c:	e7d1      	b.n	8005a42 <dir_next+0x60>

08005a9e <load_xdir>:
{
 8005a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aa2:	4605      	mov	r5, r0
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 8005aa4:	6800      	ldr	r0, [r0, #0]
	res = move_window(dp->obj.fs, dp->sect);
 8005aa6:	6ba9      	ldr	r1, [r5, #56]	; 0x38
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 8005aa8:	6906      	ldr	r6, [r0, #16]
	res = move_window(dp->obj.fs, dp->sect);
 8005aaa:	f7ff f97c 	bl	8004da6 <move_window>
	if (res != FR_OK) return res;
 8005aae:	4604      	mov	r4, r0
 8005ab0:	b920      	cbnz	r0, 8005abc <load_xdir+0x1e>
	if (dp->dir[XDIR_Type] != ET_FILEDIR) return FR_INT_ERR;	/* Invalid order */
 8005ab2:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8005ab4:	780b      	ldrb	r3, [r1, #0]
 8005ab6:	2b85      	cmp	r3, #133	; 0x85
 8005ab8:	d003      	beq.n	8005ac2 <load_xdir+0x24>
 8005aba:	2402      	movs	r4, #2
}
 8005abc:	4620      	mov	r0, r4
 8005abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ac2:	2220      	movs	r2, #32
 8005ac4:	4630      	mov	r0, r6
 8005ac6:	f7ff f916 	bl	8004cf6 <mem_cpy.part.0>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 8005aca:	7877      	ldrb	r7, [r6, #1]
 8005acc:	3701      	adds	r7, #1
 8005ace:	017f      	lsls	r7, r7, #5
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 8005ad0:	f1a7 0360 	sub.w	r3, r7, #96	; 0x60
 8005ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ad8:	d8ef      	bhi.n	8005aba <load_xdir+0x1c>
	res = dir_next(dp, 0);
 8005ada:	4621      	mov	r1, r4
 8005adc:	4628      	mov	r0, r5
 8005ade:	f7ff ff80 	bl	80059e2 <dir_next>
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 8005ae2:	2804      	cmp	r0, #4
	res = dir_next(dp, 0);
 8005ae4:	4604      	mov	r4, r0
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 8005ae6:	d0e8      	beq.n	8005aba <load_xdir+0x1c>
	if (res != FR_OK) return res;
 8005ae8:	2800      	cmp	r0, #0
 8005aea:	d1e7      	bne.n	8005abc <load_xdir+0x1e>
	res = move_window(dp->obj.fs, dp->sect);
 8005aec:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8005aee:	6828      	ldr	r0, [r5, #0]
 8005af0:	f7ff f959 	bl	8004da6 <move_window>
	if (res != FR_OK) return res;
 8005af4:	4604      	mov	r4, r0
 8005af6:	2800      	cmp	r0, #0
 8005af8:	d1e0      	bne.n	8005abc <load_xdir+0x1e>
	if (dp->dir[XDIR_Type] != ET_STREAM) return FR_INT_ERR;	/* Invalid order */
 8005afa:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8005afc:	780b      	ldrb	r3, [r1, #0]
 8005afe:	2bc0      	cmp	r3, #192	; 0xc0
 8005b00:	d1db      	bne.n	8005aba <load_xdir+0x1c>
 8005b02:	2220      	movs	r2, #32
 8005b04:	18b0      	adds	r0, r6, r2
 8005b06:	f7ff f8f6 	bl	8004cf6 <mem_cpy.part.0>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8005b0a:	220f      	movs	r2, #15
 8005b0c:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
 8005b10:	332c      	adds	r3, #44	; 0x2c
 8005b12:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b16:	ebb7 1f43 	cmp.w	r7, r3, lsl #5
 8005b1a:	d3ce      	bcc.n	8005aba <load_xdir+0x1c>
	i = 2 * SZDIRE;	/* Name offset to load */
 8005b1c:	f04f 0840 	mov.w	r8, #64	; 0x40
		res = dir_next(dp, 0);
 8005b20:	2100      	movs	r1, #0
 8005b22:	4628      	mov	r0, r5
 8005b24:	f7ff ff5d 	bl	80059e2 <dir_next>
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 8005b28:	2804      	cmp	r0, #4
		res = dir_next(dp, 0);
 8005b2a:	4604      	mov	r4, r0
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 8005b2c:	d0c5      	beq.n	8005aba <load_xdir+0x1c>
		if (res != FR_OK) return res;
 8005b2e:	2800      	cmp	r0, #0
 8005b30:	d1c4      	bne.n	8005abc <load_xdir+0x1e>
		res = move_window(dp->obj.fs, dp->sect);
 8005b32:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8005b34:	6828      	ldr	r0, [r5, #0]
 8005b36:	f7ff f936 	bl	8004da6 <move_window>
		if (res != FR_OK) return res;
 8005b3a:	4604      	mov	r4, r0
 8005b3c:	2800      	cmp	r0, #0
 8005b3e:	d1bd      	bne.n	8005abc <load_xdir+0x1e>
		if (dp->dir[XDIR_Type] != ET_FILENAME) return FR_INT_ERR;	/* Invalid order */
 8005b40:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8005b42:	780b      	ldrb	r3, [r1, #0]
 8005b44:	2bc1      	cmp	r3, #193	; 0xc1
 8005b46:	d1b8      	bne.n	8005aba <load_xdir+0x1c>
		if (i < MAXDIRB(FF_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 8005b48:	f5b8 7f18 	cmp.w	r8, #608	; 0x260
 8005b4c:	d204      	bcs.n	8005b58 <load_xdir+0xba>
 8005b4e:	2220      	movs	r2, #32
 8005b50:	eb06 0008 	add.w	r0, r6, r8
 8005b54:	f7ff f8cf 	bl	8004cf6 <mem_cpy.part.0>
	} while ((i += SZDIRE) < sz_ent);
 8005b58:	f108 0820 	add.w	r8, r8, #32
 8005b5c:	4547      	cmp	r7, r8
 8005b5e:	d8df      	bhi.n	8005b20 <load_xdir+0x82>
	if (i <= MAXDIRB(FF_MAX_LFN)) {
 8005b60:	f5b8 7f18 	cmp.w	r8, #608	; 0x260
 8005b64:	d8aa      	bhi.n	8005abc <load_xdir+0x1e>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 8005b66:	4630      	mov	r0, r6
 8005b68:	f7ff f862 	bl	8004c30 <xdir_sum>
	rv = rv << 8 | ptr[0];
 8005b6c:	78f2      	ldrb	r2, [r6, #3]
 8005b6e:	78b3      	ldrb	r3, [r6, #2]
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 8005b70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005b74:	4298      	cmp	r0, r3
 8005b76:	d0a1      	beq.n	8005abc <load_xdir+0x1e>
 8005b78:	e79f      	b.n	8005aba <load_xdir+0x1c>

08005b7a <dir_alloc>:
{
 8005b7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b7c:	460e      	mov	r6, r1
	res = dir_sdi(dp, 0);
 8005b7e:	2100      	movs	r1, #0
{
 8005b80:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8005b82:	6805      	ldr	r5, [r0, #0]
	res = dir_sdi(dp, 0);
 8005b84:	f7ff fa05 	bl	8004f92 <dir_sdi>
	if (res == FR_OK) {
 8005b88:	bb00      	cbnz	r0, 8005bcc <dir_alloc+0x52>
		n = 0;
 8005b8a:	4607      	mov	r7, r0
			res = move_window(fs, dp->sect);
 8005b8c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005b8e:	4628      	mov	r0, r5
 8005b90:	f7ff f909 	bl	8004da6 <move_window>
			if (res != FR_OK) break;
 8005b94:	b9d0      	cbnz	r0, 8005bcc <dir_alloc+0x52>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8005b96:	782a      	ldrb	r2, [r5, #0]
 8005b98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005b9a:	2a04      	cmp	r2, #4
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	d107      	bne.n	8005bb0 <dir_alloc+0x36>
 8005ba0:	43db      	mvns	r3, r3
 8005ba2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005ba6:	b153      	cbz	r3, 8005bbe <dir_alloc+0x44>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005ba8:	3701      	adds	r7, #1
 8005baa:	42b7      	cmp	r7, r6
 8005bac:	d108      	bne.n	8005bc0 <dir_alloc+0x46>
}
 8005bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8005bb0:	2be5      	cmp	r3, #229	; 0xe5
 8005bb2:	bf16      	itet	ne
 8005bb4:	fab3 f383 	clzne	r3, r3
 8005bb8:	2301      	moveq	r3, #1
 8005bba:	095b      	lsrne	r3, r3, #5
 8005bbc:	e7f3      	b.n	8005ba6 <dir_alloc+0x2c>
				n = 0;					/* Not a blank entry. Restart to search */
 8005bbe:	461f      	mov	r7, r3
			res = dir_next(dp, 1);
 8005bc0:	2101      	movs	r1, #1
 8005bc2:	4620      	mov	r0, r4
 8005bc4:	f7ff ff0d 	bl	80059e2 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005bc8:	2800      	cmp	r0, #0
 8005bca:	d0df      	beq.n	8005b8c <dir_alloc+0x12>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005bcc:	2804      	cmp	r0, #4
 8005bce:	bf08      	it	eq
 8005bd0:	2007      	moveq	r0, #7
 8005bd2:	e7ec      	b.n	8005bae <dir_alloc+0x34>

08005bd4 <store_xdir>:
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 8005bd4:	6803      	ldr	r3, [r0, #0]
{
 8005bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 8005bda:	691e      	ldr	r6, [r3, #16]
{
 8005bdc:	4605      	mov	r5, r0
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 8005bde:	4630      	mov	r0, r6
 8005be0:	f7ff f826 	bl	8004c30 <xdir_sum>
	*ptr++ = (BYTE)val; val >>= 8;
 8005be4:	70b0      	strb	r0, [r6, #2]
 8005be6:	0a00      	lsrs	r0, r0, #8
	*ptr++ = (BYTE)val;
 8005be8:	70f0      	strb	r0, [r6, #3]
	res = dir_sdi(dp, dp->blk_ofs);
 8005bea:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8005bec:	4628      	mov	r0, r5
	nent = dirb[XDIR_NumSec] + 1;
 8005bee:	7877      	ldrb	r7, [r6, #1]
	res = dir_sdi(dp, dp->blk_ofs);
 8005bf0:	f7ff f9cf 	bl	8004f92 <dir_sdi>
		dp->obj.fs->wflag = 1;
 8005bf4:	f04f 0801 	mov.w	r8, #1
	res = dir_sdi(dp, dp->blk_ofs);
 8005bf8:	4604      	mov	r4, r0
	while (res == FR_OK) {
 8005bfa:	b12c      	cbz	r4, 8005c08 <store_xdir+0x34>
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 8005bfc:	2c02      	cmp	r4, #2
 8005bfe:	bf28      	it	cs
 8005c00:	2402      	movcs	r4, #2
}
 8005c02:	b2e0      	uxtb	r0, r4
 8005c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		res = move_window(dp->obj.fs, dp->sect);
 8005c08:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8005c0a:	6828      	ldr	r0, [r5, #0]
 8005c0c:	f7ff f8cb 	bl	8004da6 <move_window>
		if (res != FR_OK) break;
 8005c10:	4604      	mov	r4, r0
 8005c12:	2800      	cmp	r0, #0
 8005c14:	d1f2      	bne.n	8005bfc <store_xdir+0x28>
 8005c16:	2220      	movs	r2, #32
 8005c18:	4631      	mov	r1, r6
 8005c1a:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8005c1c:	f7ff f86b 	bl	8004cf6 <mem_cpy.part.0>
		dp->obj.fs->wflag = 1;
 8005c20:	682b      	ldr	r3, [r5, #0]
 8005c22:	f883 8003 	strb.w	r8, [r3, #3]
		if (--nent == 0) break;
 8005c26:	2f00      	cmp	r7, #0
 8005c28:	d0e8      	beq.n	8005bfc <store_xdir+0x28>
		res = dir_next(dp, 0);
 8005c2a:	4621      	mov	r1, r4
 8005c2c:	4628      	mov	r0, r5
 8005c2e:	f7ff fed8 	bl	80059e2 <dir_next>
		dirb += SZDIRE;
 8005c32:	3620      	adds	r6, #32
		res = dir_next(dp, 0);
 8005c34:	4604      	mov	r4, r0
 8005c36:	3f01      	subs	r7, #1
 8005c38:	e7df      	b.n	8005bfa <store_xdir+0x26>
	...

08005c3c <dir_read.constprop.15>:
static FRESULT dir_read (
 8005c3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BYTE ord = 0xFF, sum = 0xFF;
 8005c40:	27ff      	movs	r7, #255	; 0xff
static FRESULT dir_read (
 8005c42:	4605      	mov	r5, r0
	BYTE ord = 0xFF, sum = 0xFF;
 8005c44:	463c      	mov	r4, r7
	FRESULT res = FR_NO_FILE;
 8005c46:	f04f 0a04 	mov.w	sl, #4
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005c4a:	f64f 79ff 	movw	r9, #65535	; 0xffff
	FATFS *fs = dp->obj.fs;
 8005c4e:	6806      	ldr	r6, [r0, #0]
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005c50:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8005d84 <dir_read.constprop.15+0x148>
	while (dp->sect) {
 8005c54:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8005c56:	b921      	cbnz	r1, 8005c62 <dir_read.constprop.15+0x26>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8005c58:	f1ba 0f00 	cmp.w	sl, #0
 8005c5c:	f000 8087 	beq.w	8005d6e <dir_read.constprop.15+0x132>
 8005c60:	e076      	b.n	8005d50 <dir_read.constprop.15+0x114>
		res = move_window(fs, dp->sect);
 8005c62:	4630      	mov	r0, r6
 8005c64:	f7ff f89f 	bl	8004da6 <move_window>
		if (res != FR_OK) break;
 8005c68:	4682      	mov	sl, r0
 8005c6a:	2800      	cmp	r0, #0
 8005c6c:	d170      	bne.n	8005d50 <dir_read.constprop.15+0x114>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
 8005c6e:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8005c70:	7803      	ldrb	r3, [r0, #0]
		if (b == 0) {
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	f000 8082 	beq.w	8005d7c <dir_read.constprop.15+0x140>
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8005c78:	7832      	ldrb	r2, [r6, #0]
 8005c7a:	2a04      	cmp	r2, #4
 8005c7c:	d111      	bne.n	8005ca2 <dir_read.constprop.15+0x66>
				if (b == ET_FILEDIR) {		/* Start of the file entry block? */
 8005c7e:	2b85      	cmp	r3, #133	; 0x85
 8005c80:	d15f      	bne.n	8005d42 <dir_read.constprop.15+0x106>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8005c82:	6b2b      	ldr	r3, [r5, #48]	; 0x30
					res = load_xdir(dp);	/* Load the entry block */
 8005c84:	4628      	mov	r0, r5
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8005c86:	64eb      	str	r3, [r5, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 8005c88:	f7ff ff09 	bl	8005a9e <load_xdir>
					if (res == FR_OK) {
 8005c8c:	4682      	mov	sl, r0
 8005c8e:	2800      	cmp	r0, #0
 8005c90:	d15e      	bne.n	8005d50 <dir_read.constprop.15+0x114>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 8005c92:	6933      	ldr	r3, [r6, #16]
 8005c94:	791b      	ldrb	r3, [r3, #4]
 8005c96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c9a:	71ab      	strb	r3, [r5, #6]
}
 8005c9c:	4650      	mov	r0, sl
 8005c9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8005ca2:	7ac2      	ldrb	r2, [r0, #11]
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8005ca4:	2be5      	cmp	r3, #229	; 0xe5
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8005ca6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005caa:	71aa      	strb	r2, [r5, #6]
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8005cac:	d055      	beq.n	8005d5a <dir_read.constprop.15+0x11e>
 8005cae:	2b2e      	cmp	r3, #46	; 0x2e
 8005cb0:	d053      	beq.n	8005d5a <dir_read.constprop.15+0x11e>
 8005cb2:	f022 0120 	bic.w	r1, r2, #32
 8005cb6:	2908      	cmp	r1, #8
 8005cb8:	d04f      	beq.n	8005d5a <dir_read.constprop.15+0x11e>
				if (attr == AM_LFN) {			/* An LFN entry is found */
 8005cba:	2a0f      	cmp	r2, #15
 8005cbc:	d152      	bne.n	8005d64 <dir_read.constprop.15+0x128>
					if (b & LLEF) {			/* Is it start of an LFN sequence? */
 8005cbe:	065a      	lsls	r2, r3, #25
 8005cc0:	d549      	bpl.n	8005d56 <dir_read.constprop.15+0x11a>
						b &= (BYTE)~LLEF; ord = b;
 8005cc2:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
 8005cc6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
						sum = dp->dir[LDIR_Chksum];
 8005cc8:	7b47      	ldrb	r7, [r0, #13]
						dp->blk_ofs = dp->dptr;
 8005cca:	64eb      	str	r3, [r5, #76]	; 0x4c
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005ccc:	7b43      	ldrb	r3, [r0, #13]
 8005cce:	42bb      	cmp	r3, r7
 8005cd0:	d143      	bne.n	8005d5a <dir_read.constprop.15+0x11e>
	rv = rv << 8 | ptr[0];
 8005cd2:	7ec2      	ldrb	r2, [r0, #27]
 8005cd4:	7e83      	ldrb	r3, [r0, #26]
 8005cd6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8005cda:	b21b      	sxth	r3, r3
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d13c      	bne.n	8005d5a <dir_read.constprop.15+0x11e>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8005ce0:	f04f 0c0d 	mov.w	ip, #13
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005ce4:	f04f 0e01 	mov.w	lr, #1
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8005ce8:	7802      	ldrb	r2, [r0, #0]
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005cea:	68f1      	ldr	r1, [r6, #12]
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8005cec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cf0:	3a01      	subs	r2, #1
 8005cf2:	fb0c fc02 	mul.w	ip, ip, r2
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005cf6:	f813 a008 	ldrb.w	sl, [r3, r8]
 8005cfa:	eb00 020a 	add.w	r2, r0, sl
	rv = rv << 8 | ptr[0];
 8005cfe:	f892 b001 	ldrb.w	fp, [r2, #1]
 8005d02:	f810 200a 	ldrb.w	r2, [r0, sl]
 8005d06:	ea42 220b 	orr.w	r2, r2, fp, lsl #8
		if (wc != 0) {
 8005d0a:	f1be 0f00 	cmp.w	lr, #0
 8005d0e:	d026      	beq.n	8005d5e <dir_read.constprop.15+0x122>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 8005d10:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8005d14:	d821      	bhi.n	8005d5a <dir_read.constprop.15+0x11e>
	rv = rv << 8 | ptr[0];
 8005d16:	4696      	mov	lr, r2
			lfnbuf[i++] = wc = uc;			/* Store it */
 8005d18:	f821 201c 	strh.w	r2, [r1, ip, lsl #1]
 8005d1c:	f10c 0c01 	add.w	ip, ip, #1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005d20:	3301      	adds	r3, #1
 8005d22:	2b0d      	cmp	r3, #13
 8005d24:	d1e7      	bne.n	8005cf6 <dir_read.constprop.15+0xba>
	if (dir[LDIR_Ord] & LLEF && wc != 0) {	/* Put terminator if it is the last LFN part and not terminated */
 8005d26:	7803      	ldrb	r3, [r0, #0]
 8005d28:	065b      	lsls	r3, r3, #25
 8005d2a:	d508      	bpl.n	8005d3e <dir_read.constprop.15+0x102>
 8005d2c:	f1be 0f00 	cmp.w	lr, #0
 8005d30:	d005      	beq.n	8005d3e <dir_read.constprop.15+0x102>
		if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 8005d32:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8005d36:	d810      	bhi.n	8005d5a <dir_read.constprop.15+0x11e>
		lfnbuf[i] = 0;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	f821 301c 	strh.w	r3, [r1, ip, lsl #1]
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005d3e:	3c01      	subs	r4, #1
 8005d40:	b2e4      	uxtb	r4, r4
		res = dir_next(dp, 0);		/* Next entry */
 8005d42:	2100      	movs	r1, #0
 8005d44:	4628      	mov	r0, r5
 8005d46:	f7ff fe4c 	bl	80059e2 <dir_next>
		if (res != FR_OK) break;
 8005d4a:	4682      	mov	sl, r0
 8005d4c:	2800      	cmp	r0, #0
 8005d4e:	d081      	beq.n	8005c54 <dir_read.constprop.15+0x18>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8005d50:	2300      	movs	r3, #0
 8005d52:	63ab      	str	r3, [r5, #56]	; 0x38
 8005d54:	e7a2      	b.n	8005c9c <dir_read.constprop.15+0x60>
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005d56:	42a3      	cmp	r3, r4
 8005d58:	d0b8      	beq.n	8005ccc <dir_read.constprop.15+0x90>
 8005d5a:	24ff      	movs	r4, #255	; 0xff
 8005d5c:	e7f1      	b.n	8005d42 <dir_read.constprop.15+0x106>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005d5e:	454a      	cmp	r2, r9
 8005d60:	d0de      	beq.n	8005d20 <dir_read.constprop.15+0xe4>
 8005d62:	e7fa      	b.n	8005d5a <dir_read.constprop.15+0x11e>
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8005d64:	b934      	cbnz	r4, 8005d74 <dir_read.constprop.15+0x138>
 8005d66:	f7fe ff54 	bl	8004c12 <sum_sfn>
 8005d6a:	42b8      	cmp	r0, r7
 8005d6c:	d102      	bne.n	8005d74 <dir_read.constprop.15+0x138>
		res = move_window(fs, dp->sect);
 8005d6e:	f04f 0a00 	mov.w	sl, #0
 8005d72:	e793      	b.n	8005c9c <dir_read.constprop.15+0x60>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8005d74:	f04f 33ff 	mov.w	r3, #4294967295
 8005d78:	64eb      	str	r3, [r5, #76]	; 0x4c
 8005d7a:	e78f      	b.n	8005c9c <dir_read.constprop.15+0x60>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8005d7c:	f04f 0a04 	mov.w	sl, #4
 8005d80:	e7e6      	b.n	8005d50 <dir_read.constprop.15+0x114>
 8005d82:	bf00      	nop
 8005d84:	0800baad 	.word	0x0800baad

08005d88 <dir_find>:
{
 8005d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005d8c:	2100      	movs	r1, #0
{
 8005d8e:	b085      	sub	sp, #20
 8005d90:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8005d92:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005d96:	f7ff f8fc 	bl	8004f92 <dir_sdi>
	if (res != FR_OK) return res;
 8005d9a:	4682      	mov	sl, r0
 8005d9c:	2800      	cmp	r0, #0
 8005d9e:	f040 80d1 	bne.w	8005f44 <dir_find+0x1bc>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8005da2:	f898 3000 	ldrb.w	r3, [r8]
 8005da6:	2b04      	cmp	r3, #4
 8005da8:	d139      	bne.n	8005e1e <dir_find+0x96>
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 8005daa:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8005dae:	f7fe ff8a 	bl	8004cc6 <xname_sum>
 8005db2:	4607      	mov	r7, r0
		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
 8005db4:	4620      	mov	r0, r4
 8005db6:	f7ff ff41 	bl	8005c3c <dir_read.constprop.15>
 8005dba:	b108      	cbz	r0, 8005dc0 <dir_find+0x38>
 8005dbc:	4682      	mov	sl, r0
 8005dbe:	e0c1      	b.n	8005f44 <dir_find+0x1bc>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8005dc0:	f8d8 3010 	ldr.w	r3, [r8, #16]
	rv = rv << 8 | ptr[0];
 8005dc4:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
 8005dc8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8005dcc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005dd0:	4297      	cmp	r7, r2
 8005dd2:	d1ef      	bne.n	8005db4 <dir_find+0x2c>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8005dd4:	4605      	mov	r5, r0
 8005dd6:	2640      	movs	r6, #64	; 0x40
 8005dd8:	f893 9023 	ldrb.w	r9, [r3, #35]	; 0x23
 8005ddc:	454d      	cmp	r5, r9
 8005dde:	d106      	bne.n	8005dee <dir_find+0x66>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8005de0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005de4:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1e3      	bne.n	8005db4 <dir_find+0x2c>
 8005dec:	e0aa      	b.n	8005f44 <dir_find+0x1bc>
				if ((di % SZDIRE) == 0) di += 2;
 8005dee:	06f1      	lsls	r1, r6, #27
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8005df0:	f8d8 3010 	ldr.w	r3, [r8, #16]
				if ((di % SZDIRE) == 0) di += 2;
 8005df4:	bf08      	it	eq
 8005df6:	3602      	addeq	r6, #2
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8005df8:	199a      	adds	r2, r3, r6
	rv = rv << 8 | ptr[0];
 8005dfa:	7850      	ldrb	r0, [r2, #1]
 8005dfc:	5d9b      	ldrb	r3, [r3, r6]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8005dfe:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8005e02:	f001 f8c9 	bl	8006f98 <ff_wtoupper>
 8005e06:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005e0a:	4683      	mov	fp, r0
 8005e0c:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
 8005e10:	f001 f8c2 	bl	8006f98 <ff_wtoupper>
 8005e14:	4583      	cmp	fp, r0
 8005e16:	d1cd      	bne.n	8005db4 <dir_find+0x2c>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8005e18:	3602      	adds	r6, #2
 8005e1a:	3501      	adds	r5, #1
 8005e1c:	e7de      	b.n	8005ddc <dir_find+0x54>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005e1e:	f04f 0bff 	mov.w	fp, #255	; 0xff
 8005e22:	f04f 33ff 	mov.w	r3, #4294967295
 8005e26:	465e      	mov	r6, fp
 8005e28:	64e3      	str	r3, [r4, #76]	; 0x4c
		res = move_window(fs, dp->sect);
 8005e2a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005e2c:	4640      	mov	r0, r8
 8005e2e:	f7fe ffba 	bl	8004da6 <move_window>
		if (res != FR_OK) break;
 8005e32:	2800      	cmp	r0, #0
 8005e34:	d1c2      	bne.n	8005dbc <dir_find+0x34>
		c = dp->dir[DIR_Name];
 8005e36:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8005e38:	782f      	ldrb	r7, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005e3a:	2f00      	cmp	r7, #0
 8005e3c:	f000 8086 	beq.w	8005f4c <dir_find+0x1c4>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005e40:	7aea      	ldrb	r2, [r5, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005e42:	2fe5      	cmp	r7, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005e44:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8005e48:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005e4a:	d003      	beq.n	8005e54 <dir_find+0xcc>
 8005e4c:	0712      	lsls	r2, r2, #28
 8005e4e:	d505      	bpl.n	8005e5c <dir_find+0xd4>
 8005e50:	2b0f      	cmp	r3, #15
 8005e52:	d005      	beq.n	8005e60 <dir_find+0xd8>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005e54:	f04f 33ff 	mov.w	r3, #4294967295
 8005e58:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005e5a:	e05a      	b.n	8005f12 <dir_find+0x18a>
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005e5c:	2b0f      	cmp	r3, #15
 8005e5e:	d15f      	bne.n	8005f20 <dir_find+0x198>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8005e60:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8005e64:	0658      	lsls	r0, r3, #25
 8005e66:	d44b      	bmi.n	8005f00 <dir_find+0x178>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005e68:	0679      	lsls	r1, r7, #25
 8005e6a:	d550      	bpl.n	8005f0e <dir_find+0x186>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005e6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
						sum = dp->dir[LDIR_Chksum];
 8005e6e:	f895 b00d 	ldrb.w	fp, [r5, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005e72:	f007 07bf 	and.w	r7, r7, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005e76:	64e3      	str	r3, [r4, #76]	; 0x4c
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005e78:	7b6b      	ldrb	r3, [r5, #13]
 8005e7a:	455b      	cmp	r3, fp
 8005e7c:	d149      	bne.n	8005f12 <dir_find+0x18a>
	rv = rv << 8 | ptr[0];
 8005e7e:	7eeb      	ldrb	r3, [r5, #27]
 8005e80:	7eae      	ldrb	r6, [r5, #26]
 8005e82:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005e86:	b236      	sxth	r6, r6
 8005e88:	2e00      	cmp	r6, #0
 8005e8a:	d142      	bne.n	8005f12 <dir_find+0x18a>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005e8c:	f895 9000 	ldrb.w	r9, [r5]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005e90:	f8d8 300c 	ldr.w	r3, [r8, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005e94:	f009 093f 	and.w	r9, r9, #63	; 0x3f
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005e98:	9300      	str	r3, [sp, #0]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005e9a:	f109 33ff 	add.w	r3, r9, #4294967295
 8005e9e:	f04f 090d 	mov.w	r9, #13
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005ea2:	2101      	movs	r1, #1
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005ea4:	fb09 f903 	mul.w	r9, r9, r3
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005ea8:	4b2a      	ldr	r3, [pc, #168]	; (8005f54 <dir_find+0x1cc>)
 8005eaa:	5cf2      	ldrb	r2, [r6, r3]
 8005eac:	18ab      	adds	r3, r5, r2
	rv = rv << 8 | ptr[0];
 8005eae:	785b      	ldrb	r3, [r3, #1]
 8005eb0:	5caa      	ldrb	r2, [r5, r2]
 8005eb2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
		if (wc != 0) {
 8005eb6:	b371      	cbz	r1, 8005f16 <dir_find+0x18e>
			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005eb8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8005ebc:	d829      	bhi.n	8005f12 <dir_find+0x18a>
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	9303      	str	r3, [sp, #12]
 8005ec2:	f001 f869 	bl	8006f98 <ff_wtoupper>
 8005ec6:	9b00      	ldr	r3, [sp, #0]
 8005ec8:	9002      	str	r0, [sp, #8]
 8005eca:	f109 0201 	add.w	r2, r9, #1
 8005ece:	f833 0019 	ldrh.w	r0, [r3, r9, lsl #1]
 8005ed2:	9201      	str	r2, [sp, #4]
 8005ed4:	f001 f860 	bl	8006f98 <ff_wtoupper>
 8005ed8:	9902      	ldr	r1, [sp, #8]
 8005eda:	4281      	cmp	r1, r0
 8005edc:	d119      	bne.n	8005f12 <dir_find+0x18a>
	rv = rv << 8 | ptr[0];
 8005ede:	9b03      	ldr	r3, [sp, #12]
			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005ee0:	9a01      	ldr	r2, [sp, #4]
	rv = rv << 8 | ptr[0];
 8005ee2:	4619      	mov	r1, r3
			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005ee4:	4691      	mov	r9, r2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005ee6:	3601      	adds	r6, #1
 8005ee8:	2e0d      	cmp	r6, #13
 8005eea:	d1dd      	bne.n	8005ea8 <dir_find+0x120>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005eec:	782b      	ldrb	r3, [r5, #0]
 8005eee:	065a      	lsls	r2, r3, #25
 8005ef0:	d504      	bpl.n	8005efc <dir_find+0x174>
 8005ef2:	b119      	cbz	r1, 8005efc <dir_find+0x174>
 8005ef4:	9b00      	ldr	r3, [sp, #0]
 8005ef6:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
 8005efa:	b953      	cbnz	r3, 8005f12 <dir_find+0x18a>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005efc:	3f01      	subs	r7, #1
 8005efe:	b2fe      	uxtb	r6, r7
		res = dir_next(dp, 0);	/* Next entry */
 8005f00:	2100      	movs	r1, #0
 8005f02:	4620      	mov	r0, r4
 8005f04:	f7ff fd6d 	bl	80059e2 <dir_next>
	} while (res == FR_OK);
 8005f08:	2800      	cmp	r0, #0
 8005f0a:	d08e      	beq.n	8005e2a <dir_find+0xa2>
 8005f0c:	e756      	b.n	8005dbc <dir_find+0x34>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005f0e:	42be      	cmp	r6, r7
 8005f10:	d0b2      	beq.n	8005e78 <dir_find+0xf0>
 8005f12:	26ff      	movs	r6, #255	; 0xff
 8005f14:	e7f4      	b.n	8005f00 <dir_find+0x178>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005f16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d0e3      	beq.n	8005ee6 <dir_find+0x15e>
 8005f1e:	e7f8      	b.n	8005f12 <dir_find+0x18a>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005f20:	b926      	cbnz	r6, 8005f2c <dir_find+0x1a4>
 8005f22:	4628      	mov	r0, r5
 8005f24:	f7fe fe75 	bl	8004c12 <sum_sfn>
 8005f28:	4558      	cmp	r0, fp
 8005f2a:	d00b      	beq.n	8005f44 <dir_find+0x1bc>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005f2c:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8005f30:	07db      	lsls	r3, r3, #31
 8005f32:	d48f      	bmi.n	8005e54 <dir_find+0xcc>
 8005f34:	220b      	movs	r2, #11
 8005f36:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8005f3a:	4628      	mov	r0, r5
 8005f3c:	f7fe fe00 	bl	8004b40 <mem_cmp>
 8005f40:	2800      	cmp	r0, #0
 8005f42:	d187      	bne.n	8005e54 <dir_find+0xcc>
}
 8005f44:	4650      	mov	r0, sl
 8005f46:	b005      	add	sp, #20
 8005f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005f4c:	f04f 0a04 	mov.w	sl, #4
 8005f50:	e7f8      	b.n	8005f44 <dir_find+0x1bc>
 8005f52:	bf00      	nop
 8005f54:	0800baad 	.word	0x0800baad

08005f58 <dir_register>:
{
 8005f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8005f5c:	f890 504b 	ldrb.w	r5, [r0, #75]	; 0x4b
{
 8005f60:	b099      	sub	sp, #100	; 0x64
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8005f62:	f015 05a0 	ands.w	r5, r5, #160	; 0xa0
{
 8005f66:	4604      	mov	r4, r0
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8005f68:	f040 8114 	bne.w	8006194 <dir_register+0x23c>
	FATFS *fs = dp->obj.fs;
 8005f6c:	6806      	ldr	r6, [r0, #0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8005f6e:	68f2      	ldr	r2, [r6, #12]
 8005f70:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d162      	bne.n	800603e <dir_register+0xe6>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8005f78:	7833      	ldrb	r3, [r6, #0]
 8005f7a:	2b04      	cmp	r3, #4
 8005f7c:	f040 809f 	bne.w	80060be <dir_register+0x166>
		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8005f80:	230f      	movs	r3, #15
 8005f82:	350e      	adds	r5, #14
 8005f84:	fbb5 f5f3 	udiv	r5, r5, r3
		res = dir_alloc(dp, nent);		/* Allocate directory entries */
 8005f88:	4620      	mov	r0, r4
 8005f8a:	1ca9      	adds	r1, r5, #2
 8005f8c:	f7ff fdf5 	bl	8005b7a <dir_alloc>
		if (res != FR_OK) return res;
 8005f90:	4682      	mov	sl, r0
 8005f92:	2800      	cmp	r0, #0
 8005f94:	f040 808f 	bne.w	80060b6 <dir_register+0x15e>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 8005f98:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005f9a:	f105 6500 	add.w	r5, r5, #134217728	; 0x8000000
 8005f9e:	3501      	adds	r5, #1
 8005fa0:	eba3 1545 	sub.w	r5, r3, r5, lsl #5
		if (dp->obj.stat & 4) {			/* Has the directory been stretched by new allocation? */
 8005fa4:	79e3      	ldrb	r3, [r4, #7]
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 8005fa6:	64e5      	str	r5, [r4, #76]	; 0x4c
		if (dp->obj.stat & 4) {			/* Has the directory been stretched by new allocation? */
 8005fa8:	075a      	lsls	r2, r3, #29
 8005faa:	d54a      	bpl.n	8006042 <dir_register+0xea>
			dp->obj.stat &= ~4;
 8005fac:	f023 0304 	bic.w	r3, r3, #4
 8005fb0:	71e3      	strb	r3, [r4, #7]
			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	f7ff f992 	bl	80052dc <fill_first_frag>
			if (res != FR_OK) return res;
 8005fb8:	2800      	cmp	r0, #0
 8005fba:	d13e      	bne.n	800603a <dir_register+0xe2>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill the last fragment on the FAT if needed */
 8005fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8005fc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	f7ff f8f5 	bl	80051b2 <fill_last_frag>
			if (res != FR_OK) return res;
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	d136      	bne.n	800603a <dir_register+0xe2>
			if (dp->obj.sclust != 0) {		/* Is it a sub-directory? */
 8005fcc:	68a3      	ldr	r3, [r4, #8]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d037      	beq.n	8006042 <dir_register+0xea>
	dp->obj.fs = obj->fs;
 8005fd2:	6823      	ldr	r3, [r4, #0]
	dp->blk_ofs = obj->c_ofs;
 8005fd4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	dp->obj.fs = obj->fs;
 8005fd6:	9304      	str	r3, [sp, #16]
	dp->obj.sclust = obj->c_scl;
 8005fd8:	6a23      	ldr	r3, [r4, #32]
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8005fda:	a804      	add	r0, sp, #16
	dp->obj.sclust = obj->c_scl;
 8005fdc:	9306      	str	r3, [sp, #24]
	dp->obj.stat = (BYTE)obj->c_size;
 8005fde:	6a63      	ldr	r3, [r4, #36]	; 0x24
	dp->obj.n_frag = 0;
 8005fe0:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
	dp->obj.stat = (BYTE)obj->c_size;
 8005fe4:	f88d 3017 	strb.w	r3, [sp, #23]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8005fe8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005fec:	e9cd 3a08 	strd	r3, sl, [sp, #32]
	dp->blk_ofs = obj->c_ofs;
 8005ff0:	9117      	str	r1, [sp, #92]	; 0x5c
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8005ff2:	f7fe ffce 	bl	8004f92 <dir_sdi>
	if (res == FR_OK) {
 8005ff6:	bb00      	cbnz	r0, 800603a <dir_register+0xe2>
		res = load_xdir(dp);		/* Load the object's entry block */
 8005ff8:	a804      	add	r0, sp, #16
 8005ffa:	f7ff fd50 	bl	8005a9e <load_xdir>
				if (res != FR_OK) return res;
 8005ffe:	b9e0      	cbnz	r0, 800603a <dir_register+0xe2>
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);			/* Increase the directory size by cluster size */
 8006000:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8006004:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006008:	8970      	ldrh	r0, [r6, #10]
 800600a:	fbe1 2300 	umlal	r2, r3, r1, r0
				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);
 800600e:	6930      	ldr	r0, [r6, #16]
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);			/* Increase the directory size by cluster size */
 8006010:	e9c4 2304 	strd	r2, r3, [r4, #16]
				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);
 8006014:	3038      	adds	r0, #56	; 0x38
 8006016:	f7fe fd7e 	bl	8004b16 <st_qword>
				st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800601a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800601e:	6930      	ldr	r0, [r6, #16]
 8006020:	3028      	adds	r0, #40	; 0x28
 8006022:	f7fe fd78 	bl	8004b16 <st_qword>
				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;			/* Update the allocation status */
 8006026:	79e3      	ldrb	r3, [r4, #7]
 8006028:	6932      	ldr	r2, [r6, #16]
 800602a:	f043 0301 	orr.w	r3, r3, #1
 800602e:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
				res = store_xdir(&dj);				/* Store the object status */
 8006032:	a804      	add	r0, sp, #16
 8006034:	f7ff fdce 	bl	8005bd4 <store_xdir>
				if (res != FR_OK) return res;
 8006038:	b118      	cbz	r0, 8006042 <dir_register+0xea>
 800603a:	4682      	mov	sl, r0
 800603c:	e03b      	b.n	80060b6 <dir_register+0x15e>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800603e:	3501      	adds	r5, #1
 8006040:	e796      	b.n	8005f70 <dir_register+0x18>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 8006042:	e9d6 5403 	ldrd	r5, r4, [r6, #12]
	mem_set(dirb, 0, 2 * SZDIRE);
 8006046:	2240      	movs	r2, #64	; 0x40
 8006048:	2100      	movs	r1, #0
 800604a:	4620      	mov	r0, r4
 800604c:	f7fe fd72 	bl	8004b34 <mem_set>
	dirb[0 * SZDIRE + XDIR_Type] = ET_FILEDIR;
 8006050:	2385      	movs	r3, #133	; 0x85
	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
 8006052:	2100      	movs	r1, #0
	dirb[0 * SZDIRE + XDIR_Type] = ET_FILEDIR;
 8006054:	7023      	strb	r3, [r4, #0]
	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
 8006056:	23c0      	movs	r3, #192	; 0xc0
	nlen = nc1 = 0; wc = 1;
 8006058:	2001      	movs	r0, #1
	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
 800605a:	f884 3020 	strb.w	r3, [r4, #32]
	nlen = nc1 = 0; wc = 1;
 800605e:	460a      	mov	r2, r1
	i = SZDIRE * 2;	/* Top of file_name entries */
 8006060:	2340      	movs	r3, #64	; 0x40
		dirb[i++] = ET_FILENAME; dirb[i++] = 0;
 8006062:	f04f 0cc1 	mov.w	ip, #193	; 0xc1
 8006066:	468e      	mov	lr, r1
 8006068:	1c5f      	adds	r7, r3, #1
 800606a:	f804 c003 	strb.w	ip, [r4, r3]
 800606e:	b2ce      	uxtb	r6, r1
 8006070:	f804 e007 	strb.w	lr, [r4, r7]
 8006074:	3302      	adds	r3, #2
			if (wc != 0 && (wc = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
 8006076:	b120      	cbz	r0, 8006082 <dir_register+0x12a>
 8006078:	f835 0012 	ldrh.w	r0, [r5, r2, lsl #1]
 800607c:	b108      	cbz	r0, 8006082 <dir_register+0x12a>
 800607e:	3201      	adds	r2, #1
 8006080:	b2d2      	uxtb	r2, r2
	*ptr++ = (BYTE)val;
 8006082:	18e7      	adds	r7, r4, r3
	*ptr++ = (BYTE)val; val >>= 8;
 8006084:	54e0      	strb	r0, [r4, r3]
 8006086:	ea4f 2810 	mov.w	r8, r0, lsr #8
			i += 2;
 800608a:	3302      	adds	r3, #2
	*ptr++ = (BYTE)val;
 800608c:	f887 8001 	strb.w	r8, [r7, #1]
		} while (i % SZDIRE != 0);
 8006090:	06df      	lsls	r7, r3, #27
 8006092:	d1f0      	bne.n	8006076 <dir_register+0x11e>
	} while (lfn[nlen]);	/* Fill next entry if any char follows */
 8006094:	f835 7012 	ldrh.w	r7, [r5, r2, lsl #1]
 8006098:	3101      	adds	r1, #1
 800609a:	2f00      	cmp	r7, #0
 800609c:	d1e4      	bne.n	8006068 <dir_register+0x110>
	dirb[XDIR_NumSec] = 1 + nc1;	/* Set secondary count (C0 + C1s) */
 800609e:	1cb3      	adds	r3, r6, #2
	dirb[XDIR_NumName] = nlen;		/* Set name length */
 80060a0:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	dirb[XDIR_NumSec] = 1 + nc1;	/* Set secondary count (C0 + C1s) */
 80060a4:	7063      	strb	r3, [r4, #1]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 80060a6:	4628      	mov	r0, r5
 80060a8:	f7fe fe0d 	bl	8004cc6 <xname_sum>
	*ptr++ = (BYTE)val; val >>= 8;
 80060ac:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
 80060b0:	0a00      	lsrs	r0, r0, #8
	*ptr++ = (BYTE)val;
 80060b2:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
}
 80060b6:	4650      	mov	r0, sl
 80060b8:	b019      	add	sp, #100	; 0x64
 80060ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	mem_cpy(sn, dp->fn, 12);
 80060be:	f104 0740 	add.w	r7, r4, #64	; 0x40
 80060c2:	220c      	movs	r2, #12
 80060c4:	4639      	mov	r1, r7
 80060c6:	a804      	add	r0, sp, #16
 80060c8:	f7fe fe15 	bl	8004cf6 <mem_cpy.part.0>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80060cc:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80060d0:	07db      	lsls	r3, r3, #31
 80060d2:	d568      	bpl.n	80061a6 <dir_register+0x24e>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80060d4:	2340      	movs	r3, #64	; 0x40
		for (n = 1; n < 100; n++) {
 80060d6:	f04f 0901 	mov.w	r9, #1
				if (sreg & 0x10000) sreg ^= 0x11021;
 80060da:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 80062bc <dir_register+0x364>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80060de:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
 80060e2:	220b      	movs	r2, #11
 80060e4:	a904      	add	r1, sp, #16
 80060e6:	4638      	mov	r0, r7
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80060e8:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 80060ec:	f7fe fe03 	bl	8004cf6 <mem_cpy.part.0>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80060f0:	f1b9 0f05 	cmp.w	r9, #5
 80060f4:	d94a      	bls.n	800618c <dir_register+0x234>
 80060f6:	464b      	mov	r3, r9
 80060f8:	f1aa 0102 	sub.w	r1, sl, #2
		while (*lfn) {	/* Create a CRC as hash value */
 80060fc:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 8006100:	bbaa      	cbnz	r2, 800616e <dir_register+0x216>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006102:	2207      	movs	r2, #7
		c = (BYTE)((seq % 16) + '0');
 8006104:	f003 000f 	and.w	r0, r3, #15
 8006108:	f100 0130 	add.w	r1, r0, #48	; 0x30
		if (c > '9') c += 7;
 800610c:	2939      	cmp	r1, #57	; 0x39
 800610e:	bf88      	it	hi
 8006110:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
		ns[i--] = c;
 8006114:	3a01      	subs	r2, #1
 8006116:	a802      	add	r0, sp, #8
 8006118:	4410      	add	r0, r2
	} while (seq);
 800611a:	091b      	lsrs	r3, r3, #4
		ns[i--] = c;
 800611c:	7041      	strb	r1, [r0, #1]
	} while (seq);
 800611e:	d1f1      	bne.n	8006104 <dir_register+0x1ac>
	ns[i] = '~';
 8006120:	207e      	movs	r0, #126	; 0x7e
 8006122:	a918      	add	r1, sp, #96	; 0x60
 8006124:	4411      	add	r1, r2
 8006126:	f801 0c58 	strb.w	r0, [r1, #-88]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800612a:	4293      	cmp	r3, r2
 800612c:	d003      	beq.n	8006136 <dir_register+0x1de>
 800612e:	5cf9      	ldrb	r1, [r7, r3]
 8006130:	1c58      	adds	r0, r3, #1
 8006132:	2920      	cmp	r1, #32
 8006134:	d12c      	bne.n	8006190 <dir_register+0x238>
 8006136:	443b      	add	r3, r7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006138:	2a07      	cmp	r2, #7
 800613a:	bf8f      	iteee	hi
 800613c:	2120      	movhi	r1, #32
 800613e:	a918      	addls	r1, sp, #96	; 0x60
 8006140:	1889      	addls	r1, r1, r2
 8006142:	f811 1c58 	ldrbls.w	r1, [r1, #-88]
 8006146:	bf98      	it	ls
 8006148:	3201      	addls	r2, #1
 800614a:	f803 1b01 	strb.w	r1, [r3], #1
	} while (j < 8);
 800614e:	1bd9      	subs	r1, r3, r7
 8006150:	2907      	cmp	r1, #7
 8006152:	d9f1      	bls.n	8006138 <dir_register+0x1e0>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006154:	4620      	mov	r0, r4
 8006156:	f7ff fe17 	bl	8005d88 <dir_find>
			if (res != FR_OK) break;
 800615a:	4682      	mov	sl, r0
 800615c:	b9e8      	cbnz	r0, 800619a <dir_register+0x242>
		for (n = 1; n < 100; n++) {
 800615e:	f109 0901 	add.w	r9, r9, #1
 8006162:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8006166:	d1bc      	bne.n	80060e2 <dir_register+0x18a>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006168:	f04f 0a07 	mov.w	sl, #7
 800616c:	e7a3      	b.n	80060b6 <dir_register+0x15e>
		while (*lfn) {	/* Create a CRC as hash value */
 800616e:	2010      	movs	r0, #16
				sreg = (sreg << 1) + (wc & 1);
 8006170:	f002 0c01 	and.w	ip, r2, #1
 8006174:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
 8006178:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800617c:	bf18      	it	ne
 800617e:	ea83 0308 	eorne.w	r3, r3, r8
			for (i = 0; i < 16; i++) {
 8006182:	3801      	subs	r0, #1
				wc >>= 1;
 8006184:	ea4f 0252 	mov.w	r2, r2, lsr #1
			for (i = 0; i < 16; i++) {
 8006188:	d1f2      	bne.n	8006170 <dir_register+0x218>
 800618a:	e7b7      	b.n	80060fc <dir_register+0x1a4>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800618c:	464b      	mov	r3, r9
 800618e:	e7b8      	b.n	8006102 <dir_register+0x1aa>
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006190:	4603      	mov	r3, r0
 8006192:	e7ca      	b.n	800612a <dir_register+0x1d2>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006194:	f04f 0a06 	mov.w	sl, #6
 8006198:	e78d      	b.n	80060b6 <dir_register+0x15e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800619a:	2804      	cmp	r0, #4
 800619c:	d18b      	bne.n	80060b6 <dir_register+0x15e>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800619e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80061a2:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80061a6:	f89d 301b 	ldrb.w	r3, [sp, #27]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80061aa:	4620      	mov	r0, r4
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80061ac:	079b      	lsls	r3, r3, #30
 80061ae:	bf43      	ittte	mi
 80061b0:	230d      	movmi	r3, #13
 80061b2:	350c      	addmi	r5, #12
 80061b4:	fbb5 f5f3 	udivmi	r5, r5, r3
 80061b8:	2501      	movpl	r5, #1
 80061ba:	bf48      	it	mi
 80061bc:	3501      	addmi	r5, #1
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80061be:	4629      	mov	r1, r5
 80061c0:	f7ff fcdb 	bl	8005b7a <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80061c4:	4682      	mov	sl, r0
 80061c6:	2800      	cmp	r0, #0
 80061c8:	f47f af75 	bne.w	80060b6 <dir_register+0x15e>
 80061cc:	3d01      	subs	r5, #1
 80061ce:	d058      	beq.n	8006282 <dir_register+0x32a>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80061d0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80061d2:	4620      	mov	r0, r4
 80061d4:	eba1 1145 	sub.w	r1, r1, r5, lsl #5
 80061d8:	f7fe fedb 	bl	8004f92 <dir_sdi>
		if (res == FR_OK) {
 80061dc:	4682      	mov	sl, r0
 80061de:	2800      	cmp	r0, #0
 80061e0:	f47f af69 	bne.w	80060b6 <dir_register+0x15e>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80061e4:	4638      	mov	r0, r7
 80061e6:	f7fe fd14 	bl	8004c12 <sum_sfn>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80061ea:	f64f 79ff 	movw	r9, #65535	; 0xffff
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80061ee:	4680      	mov	r8, r0
				res = move_window(fs, dp->sect);
 80061f0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80061f2:	4630      	mov	r0, r6
 80061f4:	f7fe fdd7 	bl	8004da6 <move_window>
 80061f8:	4682      	mov	sl, r0
				if (res != FR_OK) break;
 80061fa:	2800      	cmp	r0, #0
 80061fc:	f47f af5b 	bne.w	80060b6 <dir_register+0x15e>
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006200:	220f      	movs	r2, #15
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006202:	f04f 0c0d 	mov.w	ip, #13
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006206:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006208:	b2e9      	uxtb	r1, r5
 800620a:	f8d6 e00c 	ldr.w	lr, [r6, #12]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800620e:	72da      	strb	r2, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006210:	1e4a      	subs	r2, r1, #1
 8006212:	fb0c f202 	mul.w	r2, ip, r2
	s = wc = 0;
 8006216:	4684      	mov	ip, r0
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006218:	f883 800d 	strb.w	r8, [r3, #13]
	dir[LDIR_Type] = 0;
 800621c:	7318      	strb	r0, [r3, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 800621e:	7698      	strb	r0, [r3, #26]
	*ptr++ = (BYTE)val;
 8006220:	76d8      	strb	r0, [r3, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006222:	9201      	str	r2, [sp, #4]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006224:	4548      	cmp	r0, r9
 8006226:	bf1f      	itttt	ne
 8006228:	9a01      	ldrne	r2, [sp, #4]
 800622a:	f83e 0012 	ldrhne.w	r0, [lr, r2, lsl #1]
 800622e:	3201      	addne	r2, #1
 8006230:	9201      	strne	r2, [sp, #4]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006232:	4a21      	ldr	r2, [pc, #132]	; (80062b8 <dir_register+0x360>)
 8006234:	f81c a002 	ldrb.w	sl, [ip, r2]
	} while (++s < 13);
 8006238:	f10c 0c01 	add.w	ip, ip, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800623c:	f803 000a 	strb.w	r0, [r3, sl]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006240:	eb03 0b0a 	add.w	fp, r3, sl
	*ptr++ = (BYTE)val; val >>= 8;
 8006244:	ea4f 2a10 	mov.w	sl, r0, lsr #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
 8006248:	2800      	cmp	r0, #0
 800624a:	bf08      	it	eq
 800624c:	4648      	moveq	r0, r9
	} while (++s < 13);
 800624e:	f1bc 0f0d 	cmp.w	ip, #13
	*ptr++ = (BYTE)val;
 8006252:	f88b a001 	strb.w	sl, [fp, #1]
	} while (++s < 13);
 8006256:	d1e5      	bne.n	8006224 <dir_register+0x2cc>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006258:	4548      	cmp	r0, r9
 800625a:	d003      	beq.n	8006264 <dir_register+0x30c>
 800625c:	9a01      	ldr	r2, [sp, #4]
 800625e:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 8006262:	b90a      	cbnz	r2, 8006268 <dir_register+0x310>
 8006264:	f041 0140 	orr.w	r1, r1, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006268:	7019      	strb	r1, [r3, #0]
				fs->wflag = 1;
 800626a:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
 800626c:	2100      	movs	r1, #0
				fs->wflag = 1;
 800626e:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006270:	4620      	mov	r0, r4
 8006272:	f7ff fbb6 	bl	80059e2 <dir_next>
			} while (res == FR_OK && --nent);
 8006276:	4682      	mov	sl, r0
 8006278:	2800      	cmp	r0, #0
 800627a:	f47f af1c 	bne.w	80060b6 <dir_register+0x15e>
 800627e:	3d01      	subs	r5, #1
 8006280:	d1b6      	bne.n	80061f0 <dir_register+0x298>
		res = move_window(fs, dp->sect);
 8006282:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006284:	4630      	mov	r0, r6
 8006286:	f7fe fd8e 	bl	8004da6 <move_window>
		if (res == FR_OK) {
 800628a:	4682      	mov	sl, r0
 800628c:	2800      	cmp	r0, #0
 800628e:	f47f af12 	bne.w	80060b6 <dir_register+0x15e>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006292:	4601      	mov	r1, r0
 8006294:	2220      	movs	r2, #32
 8006296:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006298:	f7fe fc4c 	bl	8004b34 <mem_set>
 800629c:	220b      	movs	r2, #11
 800629e:	4639      	mov	r1, r7
 80062a0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80062a2:	f7fe fd28 	bl	8004cf6 <mem_cpy.part.0>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80062a6:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 80062aa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80062ac:	f003 0318 	and.w	r3, r3, #24
 80062b0:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 80062b2:	2301      	movs	r3, #1
 80062b4:	70f3      	strb	r3, [r6, #3]
 80062b6:	e6fe      	b.n	80060b6 <dir_register+0x15e>
 80062b8:	0800baad 	.word	0x0800baad
 80062bc:	00011021 	.word	0x00011021

080062c0 <follow_path>:
{
 80062c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c4:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 80062c6:	f8d0 a000 	ldr.w	sl, [r0]
{
 80062ca:	b087      	sub	sp, #28
 80062cc:	9101      	str	r1, [sp, #4]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80062ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062d2:	2b2f      	cmp	r3, #47	; 0x2f
 80062d4:	d0fa      	beq.n	80062cc <follow_path+0xc>
 80062d6:	2b5c      	cmp	r3, #92	; 0x5c
 80062d8:	d0f8      	beq.n	80062cc <follow_path+0xc>
		dp->obj.sclust = 0;					/* Start from root directory */
 80062da:	2100      	movs	r1, #0
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80062dc:	9b01      	ldr	r3, [sp, #4]
		dp->obj.sclust = 0;					/* Start from root directory */
 80062de:	60a9      	str	r1, [r5, #8]
	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
 80062e0:	61e9      	str	r1, [r5, #28]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	2b1f      	cmp	r3, #31
 80062e6:	f200 8105 	bhi.w	80064f4 <follow_path+0x234>
		dp->fn[NSFLAG] = NS_NONAME;
 80062ea:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 80062ec:	4628      	mov	r0, r5
		dp->fn[NSFLAG] = NS_NONAME;
 80062ee:	f885 304b 	strb.w	r3, [r5, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 80062f2:	f7fe fe4e 	bl	8004f92 <dir_sdi>
}
 80062f6:	b007      	add	sp, #28
 80062f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80062fc:	2efe      	cmp	r6, #254	; 0xfe
 80062fe:	f200 8122 	bhi.w	8006546 <follow_path+0x286>
		lfn[di++] = wc;					/* Store the Unicode character */
 8006302:	f82b 3016 	strh.w	r3, [fp, r6, lsl #1]
 8006306:	3601      	adds	r6, #1
 8006308:	e0fa      	b.n	8006500 <follow_path+0x240>
		while (*p == '/' || *p == '\\') p++;	/* Skip duplicated separators if exist */
 800630a:	3301      	adds	r3, #1
 800630c:	9305      	str	r3, [sp, #20]
 800630e:	9b05      	ldr	r3, [sp, #20]
 8006310:	781a      	ldrb	r2, [r3, #0]
 8006312:	2a2f      	cmp	r2, #47	; 0x2f
 8006314:	d0f9      	beq.n	800630a <follow_path+0x4a>
 8006316:	2a5c      	cmp	r2, #92	; 0x5c
 8006318:	d0f7      	beq.n	800630a <follow_path+0x4a>
		cf = 0;					/* Next segment follows */
 800631a:	2400      	movs	r4, #0
	*path = p;					/* Return pointer to the next segment */
 800631c:	9b05      	ldr	r3, [sp, #20]
 800631e:	9301      	str	r3, [sp, #4]
 8006320:	eb0b 0346 	add.w	r3, fp, r6, lsl #1
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006324:	bba6      	cbnz	r6, 8006390 <follow_path+0xd0>
	lfn[di] = 0;							/* LFN is created into the working buffer */
 8006326:	2300      	movs	r3, #0
 8006328:	eb0b 0246 	add.w	r2, fp, r6, lsl #1
 800632c:	f82b 3016 	strh.w	r3, [fp, r6, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
 8006330:	2e00      	cmp	r6, #0
 8006332:	f000 8108 	beq.w	8006546 <follow_path+0x286>
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
 8006336:	f83b 1013 	ldrh.w	r1, [fp, r3, lsl #1]
 800633a:	1c58      	adds	r0, r3, #1
 800633c:	2920      	cmp	r1, #32
 800633e:	d02f      	beq.n	80063a0 <follow_path+0xe0>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 8006340:	b90b      	cbnz	r3, 8006346 <follow_path+0x86>
 8006342:	292e      	cmp	r1, #46	; 0x2e
 8006344:	d102      	bne.n	800634c <follow_path+0x8c>
 8006346:	f044 0403 	orr.w	r4, r4, #3
 800634a:	b2e4      	uxtb	r4, r4
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
 800634c:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
 8006350:	292e      	cmp	r1, #46	; 0x2e
 8006352:	d001      	beq.n	8006358 <follow_path+0x98>
 8006354:	3e01      	subs	r6, #1
 8006356:	d1f9      	bne.n	800634c <follow_path+0x8c>
	i = b = 0; ni = 8;
 8006358:	f04f 0800 	mov.w	r8, #0
	mem_set(dp->fn, ' ', 11);
 800635c:	220b      	movs	r2, #11
 800635e:	2120      	movs	r1, #32
 8006360:	f105 0040 	add.w	r0, r5, #64	; 0x40
 8006364:	f7fe fbe6 	bl	8004b34 <mem_set>
	i = b = 0; ni = 8;
 8006368:	f04f 0908 	mov.w	r9, #8
 800636c:	4647      	mov	r7, r8
		wc = lfn[si++];					/* Get an LFN character */
 800636e:	f83b 0013 	ldrh.w	r0, [fp, r3, lsl #1]
 8006372:	1c5a      	adds	r2, r3, #1
		if (wc == 0) break;				/* Break on end of the LFN */
 8006374:	b330      	cbz	r0, 80063c4 <follow_path+0x104>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
 8006376:	2820      	cmp	r0, #32
 8006378:	d003      	beq.n	8006382 <follow_path+0xc2>
 800637a:	282e      	cmp	r0, #46	; 0x2e
 800637c:	d112      	bne.n	80063a4 <follow_path+0xe4>
 800637e:	4296      	cmp	r6, r2
 8006380:	d014      	beq.n	80063ac <follow_path+0xec>
			cf |= NS_LOSS | NS_LFN;
 8006382:	f044 0403 	orr.w	r4, r4, #3
 8006386:	b2e4      	uxtb	r4, r4
		dp->fn[i++] = (BYTE)wc;
 8006388:	4613      	mov	r3, r2
 800638a:	e7f0      	b.n	800636e <follow_path+0xae>
		cf = NS_LAST;			/* Set last segment flag */
 800638c:	2404      	movs	r4, #4
 800638e:	e7c5      	b.n	800631c <follow_path+0x5c>
		wc = lfn[di - 1];
 8006390:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
		if (wc != ' ' && wc != '.') break;
 8006394:	2a20      	cmp	r2, #32
 8006396:	d001      	beq.n	800639c <follow_path+0xdc>
 8006398:	2a2e      	cmp	r2, #46	; 0x2e
 800639a:	d1c4      	bne.n	8006326 <follow_path+0x66>
		di--;
 800639c:	3e01      	subs	r6, #1
 800639e:	e7c1      	b.n	8006324 <follow_path+0x64>
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
 80063a0:	4603      	mov	r3, r0
 80063a2:	e7c8      	b.n	8006336 <follow_path+0x76>
		if (i >= ni || si == di) {		/* End of field? */
 80063a4:	45c8      	cmp	r8, r9
 80063a6:	d205      	bcs.n	80063b4 <follow_path+0xf4>
 80063a8:	4296      	cmp	r6, r2
 80063aa:	d14d      	bne.n	8006448 <follow_path+0x188>
			if (ni == 11) {				/* Name extension overflow? */
 80063ac:	f1b9 0f0b 	cmp.w	r9, #11
 80063b0:	d142      	bne.n	8006438 <follow_path+0x178>
 80063b2:	e002      	b.n	80063ba <follow_path+0xfa>
 80063b4:	f1b9 0f0b 	cmp.w	r9, #11
 80063b8:	d138      	bne.n	800642c <follow_path+0x16c>
				cf |= NS_LOSS | NS_LFN;
 80063ba:	f04f 090b 	mov.w	r9, #11
 80063be:	f044 0403 	orr.w	r4, r4, #3
 80063c2:	b2e4      	uxtb	r4, r4
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80063c4:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 80063c8:	2be5      	cmp	r3, #229	; 0xe5
 80063ca:	bf04      	itt	eq
 80063cc:	2305      	moveq	r3, #5
 80063ce:	f885 3040 	strbeq.w	r3, [r5, #64]	; 0x40
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 80063d2:	f1b9 0f08 	cmp.w	r9, #8
 80063d6:	bf04      	itt	eq
 80063d8:	00bf      	lsleq	r7, r7, #2
 80063da:	b2ff      	uxtbeq	r7, r7
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 80063dc:	f007 030c 	and.w	r3, r7, #12
 80063e0:	2b0c      	cmp	r3, #12
 80063e2:	d003      	beq.n	80063ec <follow_path+0x12c>
 80063e4:	f007 0303 	and.w	r3, r7, #3
 80063e8:	2b03      	cmp	r3, #3
 80063ea:	d102      	bne.n	80063f2 <follow_path+0x132>
 80063ec:	f044 0402 	orr.w	r4, r4, #2
 80063f0:	b2e4      	uxtb	r4, r4
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
 80063f2:	07a6      	lsls	r6, r4, #30
 80063f4:	d409      	bmi.n	800640a <follow_path+0x14a>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
 80063f6:	07f8      	lsls	r0, r7, #31
 80063f8:	bf44      	itt	mi
 80063fa:	f044 0410 	orrmi.w	r4, r4, #16
 80063fe:	b2e4      	uxtbmi	r4, r4
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
 8006400:	0779      	lsls	r1, r7, #29
 8006402:	bf44      	itt	mi
 8006404:	f044 0408 	orrmi.w	r4, r4, #8
 8006408:	b2e4      	uxtbmi	r4, r4
	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
 800640a:	f885 404b 	strb.w	r4, [r5, #75]	; 0x4b
			res = dir_find(dp);				/* Find an object with the segment name */
 800640e:	4628      	mov	r0, r5
 8006410:	f7ff fcba 	bl	8005d88 <dir_find>
			ns = dp->fn[NSFLAG];
 8006414:	f895 304b 	ldrb.w	r3, [r5, #75]	; 0x4b
			if (res != FR_OK) {				/* Failed to find the object */
 8006418:	2800      	cmp	r0, #0
 800641a:	d052      	beq.n	80064c2 <follow_path+0x202>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800641c:	2804      	cmp	r0, #4
 800641e:	f47f af6a 	bne.w	80062f6 <follow_path+0x36>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006422:	f013 0f04 	tst.w	r3, #4
 8006426:	bf08      	it	eq
 8006428:	2005      	moveq	r0, #5
 800642a:	e764      	b.n	80062f6 <follow_path+0x36>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
 800642c:	4296      	cmp	r6, r2
 800642e:	d003      	beq.n	8006438 <follow_path+0x178>
 8006430:	f044 0403 	orr.w	r4, r4, #3
 8006434:	b2e4      	uxtb	r4, r4
			if (si > di) break;						/* No name extension? */
 8006436:	d3c5      	bcc.n	80063c4 <follow_path+0x104>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 8006438:	00bf      	lsls	r7, r7, #2
 800643a:	b2ff      	uxtb	r7, r7
 800643c:	4632      	mov	r2, r6
 800643e:	f04f 090b 	mov.w	r9, #11
 8006442:	f04f 0808 	mov.w	r8, #8
 8006446:	e79f      	b.n	8006388 <follow_path+0xc8>
		if (wc >= 0x80) {	/* Is this a non-ASCII character? */
 8006448:	287f      	cmp	r0, #127	; 0x7f
 800644a:	d938      	bls.n	80064be <follow_path+0x1fe>
			cf |= NS_LFN;	/* LFN entry needs to be created */
 800644c:	f044 0302 	orr.w	r3, r4, #2
 8006450:	b2db      	uxtb	r3, r3
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
 8006452:	f240 3162 	movw	r1, #866	; 0x362
 8006456:	9203      	str	r2, [sp, #12]
			cf |= NS_LFN;	/* LFN entry needs to be created */
 8006458:	9302      	str	r3, [sp, #8]
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
 800645a:	f000 fd7d 	bl	8006f58 <ff_uni2oem>
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
 800645e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006462:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006466:	d010      	beq.n	800648a <follow_path+0x1ca>
 8006468:	4946      	ldr	r1, [pc, #280]	; (8006584 <follow_path+0x2c4>)
 800646a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800646e:	5c08      	ldrb	r0, [r1, r0]
			if (wc == 0 || chk_chr("+,;=[]", wc)) {	/* Replace illegal characters for SFN if needed */
 8006470:	b130      	cbz	r0, 8006480 <follow_path+0x1c0>
 8006472:	4c45      	ldr	r4, [pc, #276]	; (8006588 <follow_path+0x2c8>)
	while (*str && *str != chr) str++;
 8006474:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8006478:	2900      	cmp	r1, #0
 800647a:	d072      	beq.n	8006562 <follow_path+0x2a2>
 800647c:	4281      	cmp	r1, r0
 800647e:	d1f9      	bne.n	8006474 <follow_path+0x1b4>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006480:	f043 0303 	orr.w	r3, r3, #3
 8006484:	b2db      	uxtb	r3, r3
 8006486:	205f      	movs	r0, #95	; 0x5f
 8006488:	e011      	b.n	80064ae <follow_path+0x1ee>
		if (wc >= 0x100) {				/* Is this a DBC? */
 800648a:	28ff      	cmp	r0, #255	; 0xff
 800648c:	d9f0      	bls.n	8006470 <follow_path+0x1b0>
			if (i >= ni - 1) {			/* Field overflow? */
 800648e:	f109 31ff 	add.w	r1, r9, #4294967295
 8006492:	4588      	cmp	r8, r1
 8006494:	d304      	bcc.n	80064a0 <follow_path+0x1e0>
				cf |= NS_LOSS | NS_LFN;
 8006496:	f044 0403 	orr.w	r4, r4, #3
 800649a:	b2e4      	uxtb	r4, r4
 800649c:	46c8      	mov	r8, r9
 800649e:	e773      	b.n	8006388 <follow_path+0xc8>
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
 80064a0:	eb05 0108 	add.w	r1, r5, r8
 80064a4:	0a04      	lsrs	r4, r0, #8
 80064a6:	f881 4040 	strb.w	r4, [r1, #64]	; 0x40
 80064aa:	f108 0801 	add.w	r8, r8, #1
		dp->fn[i++] = (BYTE)wc;
 80064ae:	eb05 0108 	add.w	r1, r5, r8
 80064b2:	f881 0040 	strb.w	r0, [r1, #64]	; 0x40
 80064b6:	f108 0801 	add.w	r8, r8, #1
 80064ba:	461c      	mov	r4, r3
 80064bc:	e764      	b.n	8006388 <follow_path+0xc8>
		if (wc >= 0x80) {	/* Is this a non-ASCII character? */
 80064be:	4623      	mov	r3, r4
 80064c0:	e7d7      	b.n	8006472 <follow_path+0x1b2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80064c2:	075a      	lsls	r2, r3, #29
 80064c4:	f53f af17 	bmi.w	80062f6 <follow_path+0x36>
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80064c8:	79ab      	ldrb	r3, [r5, #6]
 80064ca:	06db      	lsls	r3, r3, #27
 80064cc:	d547      	bpl.n	800655e <follow_path+0x29e>
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 80064ce:	f89a 0000 	ldrb.w	r0, [sl]
 80064d2:	2804      	cmp	r0, #4
 80064d4:	d139      	bne.n	800654a <follow_path+0x28a>
				dp->obj.c_scl = dp->obj.sclust;
 80064d6:	68ab      	ldr	r3, [r5, #8]
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 80064d8:	79ea      	ldrb	r2, [r5, #7]
				dp->obj.c_scl = dp->obj.sclust;
 80064da:	622b      	str	r3, [r5, #32]
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 80064dc:	692b      	ldr	r3, [r5, #16]
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
 80064de:	4629      	mov	r1, r5
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 80064e0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80064e4:	4313      	orrs	r3, r2
 80064e6:	626b      	str	r3, [r5, #36]	; 0x24
				dp->obj.c_ofs = dp->blk_ofs;
 80064e8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
 80064ea:	f8da 0010 	ldr.w	r0, [sl, #16]
				dp->obj.c_ofs = dp->blk_ofs;
 80064ee:	62ab      	str	r3, [r5, #40]	; 0x28
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
 80064f0:	f7fe fc24 	bl	8004d3c <init_alloc_info.isra.6>
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
 80064f4:	2600      	movs	r6, #0
 80064f6:	9b01      	ldr	r3, [sp, #4]
 80064f8:	9305      	str	r3, [sp, #20]
 80064fa:	682b      	ldr	r3, [r5, #0]
 80064fc:	f8d3 b00c 	ldr.w	fp, [r3, #12]
		uc = tchar2uni(&p);			/* Get a character */
 8006500:	a805      	add	r0, sp, #20
 8006502:	f7fe fb2b 	bl	8004b5c <tchar2uni>
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
 8006506:	1c47      	adds	r7, r0, #1
 8006508:	d01d      	beq.n	8006546 <follow_path+0x286>
		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
 800650a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800650e:	bf24      	itt	cs
 8006510:	0c03      	lsrcs	r3, r0, #16
 8006512:	f82b 3016 	strhcs.w	r3, [fp, r6, lsl #1]
		wc = (WCHAR)uc;
 8006516:	b283      	uxth	r3, r0
		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
 8006518:	bf28      	it	cs
 800651a:	3601      	addcs	r6, #1
		if (wc < ' ' || wc == '/' || wc == '\\') break;	/* Break if end of the path or a separator is found */
 800651c:	2b1f      	cmp	r3, #31
 800651e:	f67f af35 	bls.w	800638c <follow_path+0xcc>
 8006522:	2b2f      	cmp	r3, #47	; 0x2f
 8006524:	f43f aef3 	beq.w	800630e <follow_path+0x4e>
 8006528:	2b5c      	cmp	r3, #92	; 0x5c
 800652a:	f43f aef0 	beq.w	800630e <follow_path+0x4e>
		if (wc < 0x80 && chk_chr("\"*:<>\?|\x7F", wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800652e:	2b7f      	cmp	r3, #127	; 0x7f
 8006530:	f63f aee4 	bhi.w	80062fc <follow_path+0x3c>
 8006534:	4618      	mov	r0, r3
 8006536:	4915      	ldr	r1, [pc, #84]	; (800658c <follow_path+0x2cc>)
	while (*str && *str != chr) str++;
 8006538:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800653c:	2a00      	cmp	r2, #0
 800653e:	f43f aedd 	beq.w	80062fc <follow_path+0x3c>
 8006542:	4290      	cmp	r0, r2
 8006544:	d1f8      	bne.n	8006538 <follow_path+0x278>
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
 8006546:	2006      	movs	r0, #6
 8006548:	e6d5      	b.n	80062f6 <follow_path+0x36>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800654a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800654c:	f10a 013c 	add.w	r1, sl, #60	; 0x3c
 8006550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006554:	4419      	add	r1, r3
 8006556:	f7fe fbd7 	bl	8004d08 <ld_clust.isra.4>
 800655a:	60a8      	str	r0, [r5, #8]
 800655c:	e7ca      	b.n	80064f4 <follow_path+0x234>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800655e:	2005      	movs	r0, #5
	return res;
 8006560:	e6c9      	b.n	80062f6 <follow_path+0x36>
				if (IsUpper(wc)) {		/* ASCII upper case? */
 8006562:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 8006566:	b289      	uxth	r1, r1
 8006568:	2919      	cmp	r1, #25
 800656a:	d801      	bhi.n	8006570 <follow_path+0x2b0>
					b |= 2;
 800656c:	f047 0702 	orr.w	r7, r7, #2
				if (IsLower(wc)) {		/* ASCII lower case? */
 8006570:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 8006574:	b289      	uxth	r1, r1
 8006576:	2919      	cmp	r1, #25
					b |= 1; wc -= 0x20;
 8006578:	bf9e      	ittt	ls
 800657a:	3820      	subls	r0, #32
 800657c:	f047 0701 	orrls.w	r7, r7, #1
 8006580:	b280      	uxthls	r0, r0
 8006582:	e794      	b.n	80064ae <follow_path+0x1ee>
 8006584:	0800ba2d 	.word	0x0800ba2d
 8006588:	0800bad8 	.word	0x0800bad8
 800658c:	0800bacf 	.word	0x0800bacf

08006590 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006590:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006592:	e9cd 1000 	strd	r1, r0, [sp]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006596:	a804      	add	r0, sp, #16
 8006598:	f840 1d04 	str.w	r1, [r0, #-4]!
{
 800659c:	4614      	mov	r4, r2


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800659e:	f7fe fb5e 	bl	8004c5e <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80065a2:	2800      	cmp	r0, #0
 80065a4:	db13      	blt.n	80065ce <f_mount+0x3e>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80065a6:	4b0c      	ldr	r3, [pc, #48]	; (80065d8 <f_mount+0x48>)
 80065a8:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]

	if (cfs) {
 80065ac:	b10a      	cbz	r2, 80065b2 <f_mount+0x22>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80065ae:	2100      	movs	r1, #0
 80065b0:	7011      	strb	r1, [r2, #0]
	}

	if (fs) {
 80065b2:	9a01      	ldr	r2, [sp, #4]
 80065b4:	b10a      	cbz	r2, 80065ba <f_mount+0x2a>
		fs->fs_type = 0;				/* Clear new fs object */
 80065b6:	2100      	movs	r1, #0
 80065b8:	7011      	strb	r1, [r2, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80065ba:	f843 2020 	str.w	r2, [r3, r0, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 80065be:	b144      	cbz	r4, 80065d2 <f_mount+0x42>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 80065c0:	2200      	movs	r2, #0
 80065c2:	a901      	add	r1, sp, #4
 80065c4:	4668      	mov	r0, sp
 80065c6:	f7fe fea1 	bl	800530c <mount_volume>
	LEAVE_FF(fs, res);
}
 80065ca:	b004      	add	sp, #16
 80065cc:	bd10      	pop	{r4, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 80065ce:	200b      	movs	r0, #11
 80065d0:	e7fb      	b.n	80065ca <f_mount+0x3a>
	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 80065d2:	4620      	mov	r0, r4
 80065d4:	e7f9      	b.n	80065ca <f_mount+0x3a>
 80065d6:	bf00      	nop
 80065d8:	200008a4 	.word	0x200008a4

080065dc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80065dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065e0:	f5ad 6d98 	sub.w	sp, sp, #1216	; 0x4c0
 80065e4:	9101      	str	r1, [sp, #4]
 80065e6:	4617      	mov	r7, r2
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80065e8:	4604      	mov	r4, r0
 80065ea:	2800      	cmp	r0, #0
 80065ec:	f000 814c 	beq.w	8006888 <f_open+0x2ac>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 80065f0:	f002 063f 	and.w	r6, r2, #63	; 0x3f
	res = mount_volume(&path, &fs, mode);
 80065f4:	4632      	mov	r2, r6
 80065f6:	a903      	add	r1, sp, #12
 80065f8:	a801      	add	r0, sp, #4
 80065fa:	f7fe fe87 	bl	800530c <mount_volume>
	if (res == FR_OK) {
 80065fe:	4605      	mov	r5, r0
 8006600:	2800      	cmp	r0, #0
 8006602:	f040 80ca 	bne.w	800679a <f_open+0x1be>
		dj.obj.fs = fs;
 8006606:	9b03      	ldr	r3, [sp, #12]
		INIT_NAMBUF(fs);
 8006608:	aa18      	add	r2, sp, #96	; 0x60
 800660a:	60da      	str	r2, [r3, #12]
 800660c:	aa98      	add	r2, sp, #608	; 0x260
 800660e:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8006610:	9901      	ldr	r1, [sp, #4]
 8006612:	a804      	add	r0, sp, #16
		dj.obj.fs = fs;
 8006614:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8006616:	f7ff fe53 	bl	80062c0 <follow_path>
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 800661a:	b920      	cbnz	r0, 8006626 <f_open+0x4a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800661c:	f99d 305b 	ldrsb.w	r3, [sp, #91]	; 0x5b
				res = FR_INVALID_NAME;
 8006620:	2b00      	cmp	r3, #0
 8006622:	bfb8      	it	lt
 8006624:	2006      	movlt	r0, #6
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006626:	f017 0f1c 	tst.w	r7, #28
 800662a:	f000 80fe 	beq.w	800682a <f_open+0x24e>
			if (res != FR_OK) {					/* No file, create new */
 800662e:	2800      	cmp	r0, #0
 8006630:	f000 80bb 	beq.w	80067aa <f_open+0x1ce>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006634:	2804      	cmp	r0, #4
 8006636:	f040 80b0 	bne.w	800679a <f_open+0x1be>
#if FF_FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 800663a:	a804      	add	r0, sp, #16
 800663c:	f7ff fc8c 	bl	8005f58 <dir_register>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8006640:	2800      	cmp	r0, #0
 8006642:	f040 80aa 	bne.w	800679a <f_open+0x1be>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006646:	f046 0608 	orr.w	r6, r6, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 800664a:	0731      	lsls	r1, r6, #28
 800664c:	d53c      	bpl.n	80066c8 <f_open+0xec>
 800664e:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8006652:	f89a 0000 	ldrb.w	r0, [sl]
#if FF_FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 8006656:	2804      	cmp	r0, #4
 8006658:	f040 80b1 	bne.w	80067be <f_open+0x1e2>
					/* Get current allocation info */
					fp->obj.fs = fs;
					init_alloc_info(fs, &fp->obj);
 800665c:	4621      	mov	r1, r4
 800665e:	f8da 0010 	ldr.w	r0, [sl, #16]
					fp->obj.fs = fs;
 8006662:	f8c4 a000 	str.w	sl, [r4]
					init_alloc_info(fs, &fp->obj);
 8006666:	f7fe fb69 	bl	8004d3c <init_alloc_info.isra.6>
					/* Set directory entry block initial state */
					mem_set(fs->dirbuf + 2, 0, 30);		/* Clear 85 entry except for NumSec */
 800666a:	9b03      	ldr	r3, [sp, #12]
 800666c:	221e      	movs	r2, #30
 800666e:	6918      	ldr	r0, [r3, #16]
 8006670:	2100      	movs	r1, #0
 8006672:	3002      	adds	r0, #2
 8006674:	f7fe fa5e 	bl	8004b34 <mem_set>
					mem_set(fs->dirbuf + 38, 0, 26);	/* Clear C0 entry except for NumName and NameHash */
 8006678:	9b03      	ldr	r3, [sp, #12]
 800667a:	221a      	movs	r2, #26
 800667c:	6918      	ldr	r0, [r3, #16]
 800667e:	2100      	movs	r1, #0
 8006680:	3026      	adds	r0, #38	; 0x26
 8006682:	f7fe fa57 	bl	8004b34 <mem_set>
					fs->dirbuf[XDIR_Attr] = AM_ARC;
 8006686:	2120      	movs	r1, #32
 8006688:	9a03      	ldr	r2, [sp, #12]
					st_dword(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());
					fs->dirbuf[XDIR_GenFlags] = 1;
					res = store_xdir(&dj);
 800668a:	a804      	add	r0, sp, #16
					fs->dirbuf[XDIR_Attr] = AM_ARC;
 800668c:	6913      	ldr	r3, [r2, #16]
 800668e:	7119      	strb	r1, [r3, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8006690:	2100      	movs	r1, #0
					st_dword(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());
 8006692:	6913      	ldr	r3, [r2, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8006694:	7219      	strb	r1, [r3, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 8006696:	7259      	strb	r1, [r3, #9]
	*ptr++ = (BYTE)val; val >>= 8;
 8006698:	2121      	movs	r1, #33	; 0x21
 800669a:	7299      	strb	r1, [r3, #10]
	*ptr++ = (BYTE)val;
 800669c:	214e      	movs	r1, #78	; 0x4e
 800669e:	72d9      	strb	r1, [r3, #11]
					fs->dirbuf[XDIR_GenFlags] = 1;
 80066a0:	6913      	ldr	r3, [r2, #16]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					res = store_xdir(&dj);
 80066a8:	f7ff fa94 	bl	8005bd4 <store_xdir>
					if (res == FR_OK && fp->obj.sclust != 0) {	/* Remove the cluster chain if exist */
 80066ac:	2800      	cmp	r0, #0
 80066ae:	d174      	bne.n	800679a <f_open+0x1be>
 80066b0:	68a1      	ldr	r1, [r4, #8]
 80066b2:	b149      	cbz	r1, 80066c8 <f_open+0xec>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 80066b4:	4602      	mov	r2, r0
 80066b6:	4620      	mov	r0, r4
 80066b8:	f7fe fd93 	bl	80051e2 <remove_chain>
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 80066bc:	68a3      	ldr	r3, [r4, #8]
 80066be:	9a03      	ldr	r2, [sp, #12]
 80066c0:	3b01      	subs	r3, #1
					if (cl != 0) {						/* Remove the cluster chain if exist */
						sc = fs->winsect;
						res = remove_chain(&dj.obj, cl, 0);
						if (res == FR_OK) {
							res = move_window(fs, sc);
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80066c2:	6153      	str	r3, [r2, #20]
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
 80066c4:	2800      	cmp	r0, #0
 80066c6:	d168      	bne.n	800679a <f_open+0x1be>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80066c8:	9a03      	ldr	r2, [sp, #12]
			fp->dir_ptr = dj.dir;
 80066ca:	9f13      	ldr	r7, [sp, #76]	; 0x4c
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80066cc:	6b93      	ldr	r3, [r2, #56]	; 0x38
			fp->dir_ptr = dj.dir;
 80066ce:	64e7      	str	r7, [r4, #76]	; 0x4c
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80066d0:	64a3      	str	r3, [r4, #72]	; 0x48
		}
#endif

		if (res == FR_OK) {
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80066d2:	7810      	ldrb	r0, [r2, #0]
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 80066d4:	0731      	lsls	r1, r6, #28
 80066d6:	bf48      	it	mi
 80066d8:	f046 0640 	orrmi.w	r6, r6, #64	; 0x40
			if (fs->fs_type == FS_EXFAT) {
 80066dc:	2804      	cmp	r0, #4
 80066de:	f040 80b2 	bne.w	8006846 <f_open+0x26a>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 80066e2:	9b06      	ldr	r3, [sp, #24]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 80066e4:	f89d 1017 	ldrb.w	r1, [sp, #23]
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 80066e8:	6223      	str	r3, [r4, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 80066ea:	9b08      	ldr	r3, [sp, #32]
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
 80066ec:	6910      	ldr	r0, [r2, #16]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 80066ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80066f2:	430b      	orrs	r3, r1
 80066f4:	6263      	str	r3, [r4, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 80066f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
				init_alloc_info(fs, &fp->obj);
 80066f8:	4621      	mov	r1, r4
				fp->obj.c_ofs = dj.blk_ofs;
 80066fa:	62a3      	str	r3, [r4, #40]	; 0x28
				init_alloc_info(fs, &fp->obj);
 80066fc:	f7fe fb1e 	bl	8004d3c <init_alloc_info.isra.6>
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006700:	9b03      	ldr	r3, [sp, #12]
			fp->obj.id = fs->id;
			fp->flag = mode;		/* Set file access mode */
			fp->err = 0;			/* Clear error flag */
 8006702:	2100      	movs	r1, #0
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006704:	6023      	str	r3, [r4, #0]
			fp->obj.id = fs->id;
 8006706:	88db      	ldrh	r3, [r3, #6]
			fp->sect = 0;			/* Invalidate current data sector */
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006708:	2200      	movs	r2, #0
			fp->obj.id = fs->id;
 800670a:	80a3      	strh	r3, [r4, #4]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800670c:	2300      	movs	r3, #0
#if !FF_FS_READONLY
#if !FF_FS_TINY
			mem_set(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 800670e:	f104 0a50 	add.w	sl, r4, #80	; 0x50
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006712:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
			fp->flag = mode;		/* Set file access mode */
 8006716:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
			mem_set(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 800671a:	f44f 7200 	mov.w	r2, #512	; 0x200
			fp->err = 0;			/* Clear error flag */
 800671e:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 8006722:	6461      	str	r1, [r4, #68]	; 0x44
			mem_set(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 8006724:	4650      	mov	r0, sl
 8006726:	f7fe fa05 	bl	8004b34 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800672a:	06b2      	lsls	r2, r6, #26
 800672c:	d538      	bpl.n	80067a0 <f_open+0x1c4>
 800672e:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
 8006732:	ea56 0307 	orrs.w	r3, r6, r7
 8006736:	d033      	beq.n	80067a0 <f_open+0x1c4>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006738:	f04f 0900 	mov.w	r9, #0
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800673c:	9b03      	ldr	r3, [sp, #12]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800673e:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006742:	f8b3 800a 	ldrh.w	r8, [r3, #10]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006746:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006748:	ea4f 2848 	mov.w	r8, r8, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800674c:	45b9      	cmp	r9, r7
 800674e:	bf08      	it	eq
 8006750:	45b0      	cmpeq	r8, r6
 8006752:	f0c0 8084 	bcc.w	800685e <f_open+0x282>
 8006756:	2000      	movs	r0, #0
					clst = get_fat(&fp->obj, clst);
					if (clst <= 1) res = FR_INT_ERR;
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
 8006758:	6421      	str	r1, [r4, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800675a:	b9f0      	cbnz	r0, 800679a <f_open+0x1be>
 800675c:	2300      	movs	r3, #0
 800675e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006762:	ea03 0907 	and.w	r9, r3, r7
 8006766:	ea02 0806 	and.w	r8, r2, r6
 800676a:	ea58 0309 	orrs.w	r3, r8, r9
 800676e:	d017      	beq.n	80067a0 <f_open+0x1c4>
					sc = clst2sect(fs, clst);
 8006770:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006774:	4640      	mov	r0, r8
 8006776:	f7fe fa41 	bl	8004bfc <clst2sect>
					if (sc == 0) {
 800677a:	2800      	cmp	r0, #0
 800677c:	f000 8082 	beq.w	8006884 <f_open+0x2a8>
						res = FR_INT_ERR;
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006780:	0a72      	lsrs	r2, r6, #9
 8006782:	ea42 52c7 	orr.w	r2, r2, r7, lsl #23
 8006786:	4402      	add	r2, r0
 8006788:	6462      	str	r2, [r4, #68]	; 0x44
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800678a:	2301      	movs	r3, #1
 800678c:	4651      	mov	r1, sl
 800678e:	f898 0001 	ldrb.w	r0, [r8, #1]
 8006792:	f7fe f905 	bl	80049a0 <disk_read>
 8006796:	b118      	cbz	r0, 80067a0 <f_open+0x1c4>
 8006798:	2001      	movs	r0, #1
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800679a:	2300      	movs	r3, #0
 800679c:	4605      	mov	r5, r0
 800679e:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 80067a0:	4628      	mov	r0, r5
 80067a2:	f50d 6d98 	add.w	sp, sp, #1216	; 0x4c0
 80067a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80067aa:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80067ae:	f013 0f11 	tst.w	r3, #17
 80067b2:	d146      	bne.n	8006842 <f_open+0x266>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80067b4:	0778      	lsls	r0, r7, #29
 80067b6:	f57f af48 	bpl.w	800664a <f_open+0x6e>
 80067ba:	2008      	movs	r0, #8
 80067bc:	e7ed      	b.n	800679a <f_open+0x1be>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 80067be:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
	*ptr++ = (BYTE)val; val >>= 8;
 80067c2:	2700      	movs	r7, #0
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 80067c4:	4649      	mov	r1, r9
 80067c6:	f7fe fa9f 	bl	8004d08 <ld_clust.isra.4>
	*ptr++ = (BYTE)val; val >>= 8;
 80067ca:	2321      	movs	r3, #33	; 0x21
 80067cc:	f889 3010 	strb.w	r3, [r9, #16]
	*ptr++ = (BYTE)val;
 80067d0:	234e      	movs	r3, #78	; 0x4e
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80067d2:	2220      	movs	r2, #32
	*ptr++ = (BYTE)val; val >>= 8;
 80067d4:	f889 700e 	strb.w	r7, [r9, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 80067d8:	f889 700f 	strb.w	r7, [r9, #15]
	*ptr++ = (BYTE)val;
 80067dc:	f889 3011 	strb.w	r3, [r9, #17]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80067e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 80067e2:	4680      	mov	r8, r0
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80067e4:	72da      	strb	r2, [r3, #11]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80067e6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80067e8:	463a      	mov	r2, r7
 80067ea:	4650      	mov	r0, sl
 80067ec:	f7fe fa9a 	bl	8004d24 <st_clust.isra.5>
					fs->wflag = 1;
 80067f0:	2201      	movs	r2, #1
					st_dword(dj.dir + DIR_FileSize, 0);
 80067f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	*ptr++ = (BYTE)val; val >>= 8;
 80067f4:	771f      	strb	r7, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 80067f6:	775f      	strb	r7, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 80067f8:	779f      	strb	r7, [r3, #30]
	*ptr++ = (BYTE)val;
 80067fa:	77df      	strb	r7, [r3, #31]
					fs->wflag = 1;
 80067fc:	9b03      	ldr	r3, [sp, #12]
 80067fe:	70da      	strb	r2, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8006800:	f1b8 0f00 	cmp.w	r8, #0
 8006804:	f43f af60 	beq.w	80066c8 <f_open+0xec>
						res = remove_chain(&dj.obj, cl, 0);
 8006808:	463a      	mov	r2, r7
 800680a:	4641      	mov	r1, r8
 800680c:	a804      	add	r0, sp, #16
						sc = fs->winsect;
 800680e:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
						res = remove_chain(&dj.obj, cl, 0);
 8006812:	f7fe fce6 	bl	80051e2 <remove_chain>
						if (res == FR_OK) {
 8006816:	2800      	cmp	r0, #0
 8006818:	d1bf      	bne.n	800679a <f_open+0x1be>
							res = move_window(fs, sc);
 800681a:	4649      	mov	r1, r9
 800681c:	9803      	ldr	r0, [sp, #12]
 800681e:	f7fe fac2 	bl	8004da6 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006822:	9a03      	ldr	r2, [sp, #12]
 8006824:	f108 33ff 	add.w	r3, r8, #4294967295
 8006828:	e74b      	b.n	80066c2 <f_open+0xe6>
			if (res == FR_OK) {					/* Is the object exsiting? */
 800682a:	2800      	cmp	r0, #0
 800682c:	d1b5      	bne.n	800679a <f_open+0x1be>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 800682e:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8006832:	06da      	lsls	r2, r3, #27
 8006834:	d424      	bmi.n	8006880 <f_open+0x2a4>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 8006836:	07bf      	lsls	r7, r7, #30
 8006838:	f57f af46 	bpl.w	80066c8 <f_open+0xec>
 800683c:	07d8      	lsls	r0, r3, #31
 800683e:	f57f af43 	bpl.w	80066c8 <f_open+0xec>
					res = FR_DENIED;
 8006842:	2007      	movs	r0, #7
 8006844:	e7a9      	b.n	800679a <f_open+0x1be>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006846:	4639      	mov	r1, r7
 8006848:	f7fe fa5e 	bl	8004d08 <ld_clust.isra.4>
 800684c:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800684e:	f107 001c 	add.w	r0, r7, #28
 8006852:	f7fe f91f 	bl	8004a94 <ld_dword>
 8006856:	2300      	movs	r3, #0
 8006858:	6120      	str	r0, [r4, #16]
 800685a:	6163      	str	r3, [r4, #20]
 800685c:	e750      	b.n	8006700 <f_open+0x124>
					clst = get_fat(&fp->obj, clst);
 800685e:	4620      	mov	r0, r4
 8006860:	f7fe fafd 	bl	8004e5e <get_fat>
 8006864:	ebb6 0608 	subs.w	r6, r6, r8
 8006868:	eb67 0709 	sbc.w	r7, r7, r9
					if (clst <= 1) res = FR_INT_ERR;
 800686c:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 800686e:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 8006870:	d904      	bls.n	800687c <f_open+0x2a0>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006872:	1c43      	adds	r3, r0, #1
 8006874:	f47f af6a 	bne.w	800674c <f_open+0x170>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006878:	2001      	movs	r0, #1
 800687a:	e76d      	b.n	8006758 <f_open+0x17c>
					if (clst <= 1) res = FR_INT_ERR;
 800687c:	2002      	movs	r0, #2
 800687e:	e76b      	b.n	8006758 <f_open+0x17c>
					res = FR_NO_FILE;
 8006880:	2004      	movs	r0, #4
 8006882:	e78a      	b.n	800679a <f_open+0x1be>
						res = FR_INT_ERR;
 8006884:	2002      	movs	r0, #2
 8006886:	e788      	b.n	800679a <f_open+0x1be>
	if (!fp) return FR_INVALID_OBJECT;
 8006888:	2509      	movs	r5, #9
 800688a:	e789      	b.n	80067a0 <f_open+0x1c4>

0800688c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800688c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006890:	b085      	sub	sp, #20
 8006892:	9301      	str	r3, [sp, #4]
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8006894:	2300      	movs	r3, #0
{
 8006896:	4616      	mov	r6, r2
	*bw = 0;	/* Clear write byte counter */
 8006898:	9a01      	ldr	r2, [sp, #4]
{
 800689a:	4689      	mov	r9, r1
	*bw = 0;	/* Clear write byte counter */
 800689c:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800689e:	a903      	add	r1, sp, #12
{
 80068a0:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80068a2:	f7fe f9f6 	bl	8004c92 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80068a6:	4605      	mov	r5, r0
 80068a8:	2800      	cmp	r0, #0
 80068aa:	f040 80ab 	bne.w	8006a04 <f_write+0x178>
 80068ae:	f894 5031 	ldrb.w	r5, [r4, #49]	; 0x31
 80068b2:	2d00      	cmp	r5, #0
 80068b4:	f040 80a6 	bne.w	8006a04 <f_write+0x178>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80068b8:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80068bc:	079a      	lsls	r2, r3, #30
 80068be:	f140 80d0 	bpl.w	8006a62 <f_write+0x1d6>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80068c2:	9b03      	ldr	r3, [sp, #12]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	2b04      	cmp	r3, #4
 80068c8:	d003      	beq.n	80068d2 <f_write+0x46>
 80068ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80068cc:	42f3      	cmn	r3, r6
 80068ce:	d300      	bcc.n	80068d2 <f_write+0x46>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80068d0:	43de      	mvns	r6, r3
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80068d2:	f104 0350 	add.w	r3, r4, #80	; 0x50
 80068d6:	9300      	str	r3, [sp, #0]
 80068d8:	e06b      	b.n	80069b2 <f_write+0x126>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80068da:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80068dc:	e086      	b.n	80069ec <f_write+0x160>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80068de:	2801      	cmp	r0, #1
 80068e0:	d103      	bne.n	80068ea <f_write+0x5e>
 80068e2:	2502      	movs	r5, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80068e4:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 80068e8:	e08c      	b.n	8006a04 <f_write+0x178>
 80068ea:	1c43      	adds	r3, r0, #1
 80068ec:	d101      	bne.n	80068f2 <f_write+0x66>
 80068ee:	2501      	movs	r5, #1
 80068f0:	e7f8      	b.n	80068e4 <f_write+0x58>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80068f2:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 80068f4:	6420      	str	r0, [r4, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80068f6:	b903      	cbnz	r3, 80068fa <f_write+0x6e>
 80068f8:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80068fa:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 80068fe:	2b00      	cmp	r3, #0
 8006900:	da0e      	bge.n	8006920 <f_write+0x94>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006902:	9803      	ldr	r0, [sp, #12]
 8006904:	2301      	movs	r3, #1
 8006906:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006908:	9900      	ldr	r1, [sp, #0]
 800690a:	7840      	ldrb	r0, [r0, #1]
 800690c:	f7fe f874 	bl	80049f8 <disk_write>
 8006910:	2800      	cmp	r0, #0
 8006912:	d1ec      	bne.n	80068ee <f_write+0x62>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006914:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8006918:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800691c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8006920:	9f03      	ldr	r7, [sp, #12]
 8006922:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006924:	4638      	mov	r0, r7
 8006926:	f7fe f969 	bl	8004bfc <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800692a:	2800      	cmp	r0, #0
 800692c:	d0d9      	beq.n	80068e2 <f_write+0x56>
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 800692e:	ea5f 2a56 	movs.w	sl, r6, lsr #9
			sect += csect;
 8006932:	eb0b 0800 	add.w	r8, fp, r0
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 8006936:	d069      	beq.n	8006a0c <f_write+0x180>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006938:	897b      	ldrh	r3, [r7, #10]
 800693a:	eb0b 020a 	add.w	r2, fp, sl
 800693e:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 8006940:	bf88      	it	hi
 8006942:	eba3 0a0b 	subhi.w	sl, r3, fp
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006946:	4653      	mov	r3, sl
 8006948:	4642      	mov	r2, r8
 800694a:	4649      	mov	r1, r9
 800694c:	7878      	ldrb	r0, [r7, #1]
 800694e:	f7fe f853 	bl	80049f8 <disk_write>
 8006952:	2800      	cmp	r0, #0
 8006954:	d1cb      	bne.n	80068ee <f_write+0x62>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006956:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006958:	eba1 0108 	sub.w	r1, r1, r8
 800695c:	4551      	cmp	r1, sl
 800695e:	d20c      	bcs.n	800697a <f_write+0xee>
 8006960:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006964:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 8006968:	9800      	ldr	r0, [sp, #0]
 800696a:	f7fe f9c4 	bl	8004cf6 <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
 800696e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8006972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006976:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800697a:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
 800697e:	9b01      	ldr	r3, [sp, #4]
 8006980:	9a01      	ldr	r2, [sp, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8006988:	4453      	add	r3, sl
 800698a:	6013      	str	r3, [r2, #0]
 800698c:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8006990:	eb12 070a 	adds.w	r7, r2, sl
 8006994:	f143 0800 	adc.w	r8, r3, #0
 8006998:	4541      	cmp	r1, r8
 800699a:	bf08      	it	eq
 800699c:	42b8      	cmpeq	r0, r7
 800699e:	bf3c      	itt	cc
 80069a0:	4638      	movcc	r0, r7
 80069a2:	4641      	movcc	r1, r8
 80069a4:	e9c4 780e 	strd	r7, r8, [r4, #56]	; 0x38
 80069a8:	e9c4 0104 	strd	r0, r1, [r4, #16]
 80069ac:	eba6 060a 	sub.w	r6, r6, sl
 80069b0:	44d1      	add	r9, sl
	for ( ;  btw;							/* Repeat until all data written */
 80069b2:	b30e      	cbz	r6, 80069f8 <f_write+0x16c>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80069b4:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 80069b8:	f240 10ff 	movw	r0, #511	; 0x1ff
 80069bc:	2100      	movs	r1, #0
 80069be:	4010      	ands	r0, r2
 80069c0:	4019      	ands	r1, r3
 80069c2:	4301      	orrs	r1, r0
 80069c4:	d138      	bne.n	8006a38 <f_write+0x1ac>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80069c6:	9903      	ldr	r1, [sp, #12]
 80069c8:	f8b1 b00a 	ldrh.w	fp, [r1, #10]
 80069cc:	0a51      	lsrs	r1, r2, #9
 80069ce:	f10b 3bff 	add.w	fp, fp, #4294967295
 80069d2:	ea41 51c3 	orr.w	r1, r1, r3, lsl #23
			if (csect == 0) {				/* On the cluster boundary? */
 80069d6:	ea1b 0b01 	ands.w	fp, fp, r1
 80069da:	d18e      	bne.n	80068fa <f_write+0x6e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80069dc:	4313      	orrs	r3, r2
 80069de:	f47f af7c 	bne.w	80068da <f_write+0x4e>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80069e2:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 80069e4:	2800      	cmp	r0, #0
 80069e6:	f47f af7a 	bne.w	80068de <f_write+0x52>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80069ea:	4601      	mov	r1, r0
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80069ec:	4620      	mov	r0, r4
 80069ee:	f7fe fe87 	bl	8005700 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80069f2:	2800      	cmp	r0, #0
 80069f4:	f47f af73 	bne.w	80068de <f_write+0x52>
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80069f8:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80069fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a00:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
}
 8006a04:	4628      	mov	r0, r5
 8006a06:	b005      	add	sp, #20
 8006a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006a0c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006a0e:	4543      	cmp	r3, r8
 8006a10:	d010      	beq.n	8006a34 <f_write+0x1a8>
 8006a12:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8006a16:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
 8006a1a:	4299      	cmp	r1, r3
 8006a1c:	bf08      	it	eq
 8006a1e:	4290      	cmpeq	r0, r2
 8006a20:	d208      	bcs.n	8006a34 <f_write+0x1a8>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 8006a22:	2301      	movs	r3, #1
 8006a24:	4642      	mov	r2, r8
 8006a26:	9900      	ldr	r1, [sp, #0]
 8006a28:	7878      	ldrb	r0, [r7, #1]
 8006a2a:	f7fd ffb9 	bl	80049a0 <disk_read>
				fp->fptr < fp->obj.objsize &&
 8006a2e:	2800      	cmp	r0, #0
 8006a30:	f47f af5d 	bne.w	80068ee <f_write+0x62>
			fp->sect = sect;
 8006a34:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 8006a38:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006a3a:	9b00      	ldr	r3, [sp, #0]
 8006a3c:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8006a40:	f5c0 7a00 	rsb	sl, r0, #512	; 0x200
 8006a44:	45b2      	cmp	sl, r6
 8006a46:	bf28      	it	cs
 8006a48:	46b2      	movcs	sl, r6
 8006a4a:	4418      	add	r0, r3
 8006a4c:	4652      	mov	r2, sl
 8006a4e:	4649      	mov	r1, r9
 8006a50:	f7fe f951 	bl	8004cf6 <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
 8006a54:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8006a58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006a5c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8006a60:	e78d      	b.n	800697e <f_write+0xf2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006a62:	2507      	movs	r5, #7
 8006a64:	e7ce      	b.n	8006a04 <f_write+0x178>

08006a66 <putc_bfd>:
	DWORD dc;
	TCHAR *tp;
#endif
#endif

	if (FF_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8006a66:	290a      	cmp	r1, #10
{
 8006a68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a6a:	4604      	mov	r4, r0
 8006a6c:	460d      	mov	r5, r1
	if (FF_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8006a6e:	d102      	bne.n	8006a76 <putc_bfd+0x10>
		putc_bfd(pb, '\r');
 8006a70:	210d      	movs	r1, #13
 8006a72:	f7ff fff8 	bl	8006a66 <putc_bfd>
	}

	i = pb->idx;			/* Write index of pb->buf[] */
 8006a76:	6867      	ldr	r7, [r4, #4]
	if (i < 0) return;
 8006a78:	2f00      	cmp	r7, #0
 8006a7a:	db12      	blt.n	8006aa2 <putc_bfd+0x3c>
			if (((BYTE)c & 0xF0) == 0xE0) pb->ct = 2;	/* 3-byte sequence? */
			if (((BYTE)c & 0xF1) == 0xF0) pb->ct = 3;	/* 4-byte sequence? */
			return;
		} else {				/* In the multi-byte sequence */
			if (((BYTE)c & 0xC0) != 0x80) {	/* Broken sequence? */
				pb->ct = 0; continue;
 8006a7c:	2200      	movs	r2, #0
	nc = pb->nchr;			/* Write unit counter */
 8006a7e:	68a6      	ldr	r6, [r4, #8]
			if (((BYTE)c & 0xC0) != 0x80) {	/* Broken sequence? */
 8006a80:	f005 01c0 	and.w	r1, r5, #192	; 0xc0
		if (pb->ct == 0) {	/* Out of multi-byte sequence? */
 8006a84:	6963      	ldr	r3, [r4, #20]
 8006a86:	bb13      	cbnz	r3, 8006ace <putc_bfd+0x68>
			if ((BYTE)c < 0x80) break;					/* Single byte? */
 8006a88:	062a      	lsls	r2, r5, #24
			pb->bs[pb->wi = 0] = (BYTE)c;	/* Save 1st byte */
 8006a8a:	6123      	str	r3, [r4, #16]
 8006a8c:	7325      	strb	r5, [r4, #12]
			if ((BYTE)c < 0x80) break;					/* Single byte? */
 8006a8e:	d40a      	bmi.n	8006aa6 <putc_bfd+0x40>
			pb->bs[++pb->wi] = (BYTE)c;	/* Save the trailing byte */
			if (--pb->ct == 0) break;	/* End of multi-byte sequence? */
			return;
		}
	}
	tp = (TCHAR*)pb->bs;
 8006a90:	f104 030c 	add.w	r3, r4, #12
 8006a94:	a802      	add	r0, sp, #8
 8006a96:	f840 3d04 	str.w	r3, [r0, #-4]!
	dc = tchar2uni(&tp);	/* UTF-8 ==> UTF-16 */
 8006a9a:	f7fe f85f 	bl	8004b5c <tchar2uni>
	if (dc == 0xFFFFFFFF) return;	/* Wrong code? */
 8006a9e:	1c43      	adds	r3, r0, #1
 8006aa0:	d123      	bne.n	8006aea <putc_bfd+0x84>
		f_write(pb->fp, pb->buf, (UINT)i, &n);
		i = (n == (UINT)i) ? 0 : -1;
	}
	pb->idx = i;
	pb->nchr = nc + 1;
}
 8006aa2:	b003      	add	sp, #12
 8006aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (((BYTE)c & 0xE0) == 0xC0) pb->ct = 1;	/* 2-byte sequence? */
 8006aa6:	f005 03e0 	and.w	r3, r5, #224	; 0xe0
 8006aaa:	2bc0      	cmp	r3, #192	; 0xc0
 8006aac:	bf04      	itt	eq
 8006aae:	2301      	moveq	r3, #1
 8006ab0:	6163      	streq	r3, [r4, #20]
			if (((BYTE)c & 0xF0) == 0xE0) pb->ct = 2;	/* 3-byte sequence? */
 8006ab2:	f005 03f0 	and.w	r3, r5, #240	; 0xf0
 8006ab6:	2be0      	cmp	r3, #224	; 0xe0
 8006ab8:	bf08      	it	eq
 8006aba:	2302      	moveq	r3, #2
			if (((BYTE)c & 0xF1) == 0xF0) pb->ct = 3;	/* 4-byte sequence? */
 8006abc:	f005 05f1 	and.w	r5, r5, #241	; 0xf1
			if (((BYTE)c & 0xF0) == 0xE0) pb->ct = 2;	/* 3-byte sequence? */
 8006ac0:	bf08      	it	eq
 8006ac2:	6163      	streq	r3, [r4, #20]
			if (((BYTE)c & 0xF1) == 0xF0) pb->ct = 3;	/* 4-byte sequence? */
 8006ac4:	2df0      	cmp	r5, #240	; 0xf0
 8006ac6:	d1ec      	bne.n	8006aa2 <putc_bfd+0x3c>
 8006ac8:	2303      	movs	r3, #3
 8006aca:	6163      	str	r3, [r4, #20]
 8006acc:	e7e9      	b.n	8006aa2 <putc_bfd+0x3c>
			if (((BYTE)c & 0xC0) != 0x80) {	/* Broken sequence? */
 8006ace:	2980      	cmp	r1, #128	; 0x80
 8006ad0:	d001      	beq.n	8006ad6 <putc_bfd+0x70>
				pb->ct = 0; continue;
 8006ad2:	6162      	str	r2, [r4, #20]
		if (pb->ct == 0) {	/* Out of multi-byte sequence? */
 8006ad4:	e7d6      	b.n	8006a84 <putc_bfd+0x1e>
			pb->bs[++pb->wi] = (BYTE)c;	/* Save the trailing byte */
 8006ad6:	6922      	ldr	r2, [r4, #16]
			if (--pb->ct == 0) break;	/* End of multi-byte sequence? */
 8006ad8:	3b01      	subs	r3, #1
			pb->bs[++pb->wi] = (BYTE)c;	/* Save the trailing byte */
 8006ada:	3201      	adds	r2, #1
 8006adc:	6122      	str	r2, [r4, #16]
 8006ade:	4422      	add	r2, r4
 8006ae0:	7315      	strb	r5, [r2, #12]
			if (--pb->ct == 0) break;	/* End of multi-byte sequence? */
 8006ae2:	6163      	str	r3, [r4, #20]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d0d3      	beq.n	8006a90 <putc_bfd+0x2a>
 8006ae8:	e7db      	b.n	8006aa2 <putc_bfd+0x3c>
	if (hs != 0) {	/* 4-byte sequence? */
 8006aea:	0c02      	lsrs	r2, r0, #16
	wc = (WCHAR)dc;
 8006aec:	b283      	uxth	r3, r0
 8006aee:	f107 0501 	add.w	r5, r7, #1
 8006af2:	eb04 0107 	add.w	r1, r4, r7
	if (hs != 0) {	/* 4-byte sequence? */
 8006af6:	d031      	beq.n	8006b5c <putc_bfd+0xf6>
		hs = (hs & 0x3FF) + 0x40;
 8006af8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006afc:	3240      	adds	r2, #64	; 0x40
		pb->buf[i++] = (BYTE)(0xF0 | hs >> 8);
 8006afe:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8006b02:	f06c 0c0f 	orn	ip, ip, #15
 8006b06:	f881 c018 	strb.w	ip, [r1, #24]
		pb->buf[i++] = (BYTE)(0x80 | (hs & 3) << 4 | (wc >> 6 & 0x0F));
 8006b0a:	f3c3 1383 	ubfx	r3, r3, #6, #4
		pb->buf[i++] = (BYTE)(0x80 | (hs >> 2 & 0x3F));
 8006b0e:	f3c2 0c85 	ubfx	ip, r2, #2, #6
		pb->buf[i++] = (BYTE)(0x80 | (hs & 3) << 4 | (wc >> 6 & 0x0F));
 8006b12:	0112      	lsls	r2, r2, #4
 8006b14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006b18:	f002 0230 	and.w	r2, r2, #48	; 0x30
		pb->buf[i++] = (BYTE)(0x80 | (wc & 0x3F));
 8006b1c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		pb->buf[i++] = (BYTE)(0x80 | (hs >> 2 & 0x3F));
 8006b20:	4425      	add	r5, r4
 8006b22:	f06c 0c7f 	orn	ip, ip, #127	; 0x7f
		pb->buf[i++] = (BYTE)(0x80 | (hs & 3) << 4 | (wc >> 6 & 0x0F));
 8006b26:	431a      	orrs	r2, r3
		pb->buf[i++] = (BYTE)(0x80 | (wc & 0x3F));
 8006b28:	f060 007f 	orn	r0, r0, #127	; 0x7f
		pb->buf[i++] = (BYTE)(0x80 | (hs >> 2 & 0x3F));
 8006b2c:	f885 c018 	strb.w	ip, [r5, #24]
		nc += 3;
 8006b30:	3603      	adds	r6, #3
		pb->buf[i++] = (BYTE)(0x80 | (hs & 3) << 4 | (wc >> 6 & 0x0F));
 8006b32:	768a      	strb	r2, [r1, #26]
		pb->buf[i++] = (BYTE)(0x80 | (wc & 0x3F));
 8006b34:	1d3d      	adds	r5, r7, #4
 8006b36:	76c8      	strb	r0, [r1, #27]
	if (i >= (int)(sizeof pb->buf) - 4) {	/* Write buffered characters to the file */
 8006b38:	2d3b      	cmp	r5, #59	; 0x3b
 8006b3a:	dd0b      	ble.n	8006b54 <putc_bfd+0xee>
		f_write(pb->fp, pb->buf, (UINT)i, &n);
 8006b3c:	466b      	mov	r3, sp
 8006b3e:	462a      	mov	r2, r5
 8006b40:	f104 0118 	add.w	r1, r4, #24
 8006b44:	6820      	ldr	r0, [r4, #0]
 8006b46:	f7ff fea1 	bl	800688c <f_write>
		i = (n == (UINT)i) ? 0 : -1;
 8006b4a:	9b00      	ldr	r3, [sp, #0]
 8006b4c:	1b5d      	subs	r5, r3, r5
 8006b4e:	bf18      	it	ne
 8006b50:	f04f 35ff 	movne.w	r5, #4294967295
	pb->nchr = nc + 1;
 8006b54:	3601      	adds	r6, #1
	pb->idx = i;
 8006b56:	6065      	str	r5, [r4, #4]
	pb->nchr = nc + 1;
 8006b58:	60a6      	str	r6, [r4, #8]
 8006b5a:	e7a2      	b.n	8006aa2 <putc_bfd+0x3c>
		if (wc < 0x80) {	/* Single byte? */
 8006b5c:	2b7f      	cmp	r3, #127	; 0x7f
 8006b5e:	d801      	bhi.n	8006b64 <putc_bfd+0xfe>
			pb->buf[i++] = (BYTE)wc;
 8006b60:	7608      	strb	r0, [r1, #24]
 8006b62:	e7e9      	b.n	8006b38 <putc_bfd+0xd2>
			if (wc < 0x800) {	/* 2-byte sequence? */
 8006b64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b68:	ea4f 1293 	mov.w	r2, r3, lsr #6
 8006b6c:	d20b      	bcs.n	8006b86 <putc_bfd+0x120>
				pb->buf[i++] = (BYTE)(0xC0 | wc >> 6);
 8006b6e:	f062 023f 	orn	r2, r2, #63	; 0x3f
				nc += 1;
 8006b72:	3601      	adds	r6, #1
				pb->buf[i++] = (BYTE)(0xC0 | wc >> 6);
 8006b74:	760a      	strb	r2, [r1, #24]
			pb->buf[i++] = (BYTE)(0x80 | (wc & 0x3F));
 8006b76:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8006b7a:	1963      	adds	r3, r4, r5
 8006b7c:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8006b80:	7618      	strb	r0, [r3, #24]
 8006b82:	3501      	adds	r5, #1
 8006b84:	e7d8      	b.n	8006b38 <putc_bfd+0xd2>
				pb->buf[i++] = (BYTE)(0xE0 | wc >> 12);
 8006b86:	0b1b      	lsrs	r3, r3, #12
				pb->buf[i++] = (BYTE)(0x80 | (wc >> 6 & 0x3F));
 8006b88:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8006b8c:	4425      	add	r5, r4
				pb->buf[i++] = (BYTE)(0xE0 | wc >> 12);
 8006b8e:	f063 031f 	orn	r3, r3, #31
				pb->buf[i++] = (BYTE)(0x80 | (wc >> 6 & 0x3F));
 8006b92:	f062 027f 	orn	r2, r2, #127	; 0x7f
				pb->buf[i++] = (BYTE)(0xE0 | wc >> 12);
 8006b96:	760b      	strb	r3, [r1, #24]
				nc += 2;
 8006b98:	3602      	adds	r6, #2
				pb->buf[i++] = (BYTE)(0x80 | (wc >> 6 & 0x3F));
 8006b9a:	762a      	strb	r2, [r5, #24]
 8006b9c:	1cbd      	adds	r5, r7, #2
 8006b9e:	e7ea      	b.n	8006b76 <putc_bfd+0x110>

08006ba0 <putc_flush>:

static int putc_flush (putbuff* pb)
{
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8006ba0:	6842      	ldr	r2, [r0, #4]
{
 8006ba2:	b513      	push	{r0, r1, r4, lr}
	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8006ba4:	2a00      	cmp	r2, #0
{
 8006ba6:	4604      	mov	r4, r0
	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8006ba8:	da03      	bge.n	8006bb2 <putc_flush+0x12>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
		&& (UINT)pb->idx == nw) return pb->nchr;
	return EOF;
 8006baa:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006bae:	b002      	add	sp, #8
 8006bb0:	bd10      	pop	{r4, pc}
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8006bb2:	f100 0118 	add.w	r1, r0, #24
 8006bb6:	ab01      	add	r3, sp, #4
 8006bb8:	6800      	ldr	r0, [r0, #0]
 8006bba:	f7ff fe67 	bl	800688c <f_write>
 8006bbe:	2800      	cmp	r0, #0
 8006bc0:	d1f3      	bne.n	8006baa <putc_flush+0xa>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8006bc2:	6862      	ldr	r2, [r4, #4]
 8006bc4:	9b01      	ldr	r3, [sp, #4]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d1ef      	bne.n	8006baa <putc_flush+0xa>
 8006bca:	68a0      	ldr	r0, [r4, #8]
 8006bcc:	e7ef      	b.n	8006bae <putc_flush+0xe>

08006bce <f_sync>:
{
 8006bce:	b570      	push	{r4, r5, r6, lr}
 8006bd0:	f5ad 6d97 	sub.w	sp, sp, #1208	; 0x4b8
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006bd4:	a901      	add	r1, sp, #4
{
 8006bd6:	4605      	mov	r5, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006bd8:	f7fe f85b 	bl	8004c92 <validate>
	if (res == FR_OK) {
 8006bdc:	4604      	mov	r4, r0
 8006bde:	2800      	cmp	r0, #0
 8006be0:	f040 8087 	bne.w	8006cf2 <f_sync+0x124>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006be4:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8006be8:	065a      	lsls	r2, r3, #25
 8006bea:	f140 8082 	bpl.w	8006cf2 <f_sync+0x124>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006bee:	061b      	lsls	r3, r3, #24
 8006bf0:	d510      	bpl.n	8006c14 <f_sync+0x46>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006bf2:	9801      	ldr	r0, [sp, #4]
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8006bf8:	f105 0150 	add.w	r1, r5, #80	; 0x50
 8006bfc:	7840      	ldrb	r0, [r0, #1]
 8006bfe:	f7fd fefb 	bl	80049f8 <disk_write>
 8006c02:	2800      	cmp	r0, #0
 8006c04:	f040 809a 	bne.w	8006d3c <f_sync+0x16e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006c08:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8006c0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c10:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
			if (fs->fs_type == FS_EXFAT) {
 8006c14:	9801      	ldr	r0, [sp, #4]
 8006c16:	7803      	ldrb	r3, [r0, #0]
 8006c18:	2b04      	cmp	r3, #4
 8006c1a:	d16e      	bne.n	8006cfa <f_sync+0x12c>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	f7fe fb5d 	bl	80052dc <fill_first_frag>
				if (res == FR_OK) {
 8006c22:	4604      	mov	r4, r0
 8006c24:	2800      	cmp	r0, #0
 8006c26:	d164      	bne.n	8006cf2 <f_sync+0x124>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8006c28:	f04f 32ff 	mov.w	r2, #4294967295
 8006c2c:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8006c2e:	4628      	mov	r0, r5
 8006c30:	f7fe fabf 	bl	80051b2 <fill_last_frag>
				if (res == FR_OK) {
 8006c34:	4604      	mov	r4, r0
 8006c36:	2800      	cmp	r0, #0
 8006c38:	d15b      	bne.n	8006cf2 <f_sync+0x124>
					INIT_NAMBUF(fs);
 8006c3a:	9b01      	ldr	r3, [sp, #4]
 8006c3c:	aa16      	add	r2, sp, #88	; 0x58
 8006c3e:	60da      	str	r2, [r3, #12]
 8006c40:	aa96      	add	r2, sp, #600	; 0x258
 8006c42:	611a      	str	r2, [r3, #16]
	dp->obj.fs = obj->fs;
 8006c44:	682b      	ldr	r3, [r5, #0]
	dp->blk_ofs = obj->c_ofs;
 8006c46:	6aa9      	ldr	r1, [r5, #40]	; 0x28
	dp->obj.fs = obj->fs;
 8006c48:	9302      	str	r3, [sp, #8]
	dp->obj.sclust = obj->c_scl;
 8006c4a:	6a2b      	ldr	r3, [r5, #32]
	dp->obj.n_frag = 0;
 8006c4c:	9009      	str	r0, [sp, #36]	; 0x24
	dp->obj.sclust = obj->c_scl;
 8006c4e:	9304      	str	r3, [sp, #16]
	dp->obj.stat = (BYTE)obj->c_size;
 8006c50:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	dp->blk_ofs = obj->c_ofs;
 8006c52:	9115      	str	r1, [sp, #84]	; 0x54
	dp->obj.stat = (BYTE)obj->c_size;
 8006c54:	f88d 300f 	strb.w	r3, [sp, #15]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8006c58:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006c5c:	e9cd 3006 	strd	r3, r0, [sp, #24]
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8006c60:	a802      	add	r0, sp, #8
 8006c62:	f7fe f996 	bl	8004f92 <dir_sdi>
	if (res == FR_OK) {
 8006c66:	4604      	mov	r4, r0
 8006c68:	2800      	cmp	r0, #0
 8006c6a:	d142      	bne.n	8006cf2 <f_sync+0x124>
		res = load_xdir(dp);		/* Load the object's entry block */
 8006c6c:	a802      	add	r0, sp, #8
 8006c6e:	f7fe ff16 	bl	8005a9e <load_xdir>
					if (res == FR_OK) {
 8006c72:	4604      	mov	r4, r0
 8006c74:	2800      	cmp	r0, #0
 8006c76:	d13c      	bne.n	8006cf2 <f_sync+0x124>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive attribute to indicate that the file has been changed */
 8006c78:	9b01      	ldr	r3, [sp, #4]
 8006c7a:	6919      	ldr	r1, [r3, #16]
 8006c7c:	790a      	ldrb	r2, [r1, #4]
 8006c7e:	f042 0220 	orr.w	r2, r2, #32
 8006c82:	710a      	strb	r2, [r1, #4]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation information */
 8006c84:	79ea      	ldrb	r2, [r5, #7]
 8006c86:	6919      	ldr	r1, [r3, #16]
 8006c88:	f042 0201 	orr.w	r2, r2, #1
 8006c8c:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);		/* Update start cluster */
 8006c90:	6918      	ldr	r0, [r3, #16]
 8006c92:	68a9      	ldr	r1, [r5, #8]
 8006c94:	3034      	adds	r0, #52	; 0x34
 8006c96:	f7fd ff36 	bl	8004b06 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);		/* Update file size */
 8006c9a:	9b01      	ldr	r3, [sp, #4]
 8006c9c:	6918      	ldr	r0, [r3, #16]
 8006c9e:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8006ca2:	3038      	adds	r0, #56	; 0x38
 8006ca4:	f7fd ff37 	bl	8004b16 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);	/* (FatFs does not support Valid File Size feature) */
 8006ca8:	9b01      	ldr	r3, [sp, #4]
 8006caa:	6918      	ldr	r0, [r3, #16]
 8006cac:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8006cb0:	3028      	adds	r0, #40	; 0x28
 8006cb2:	f7fd ff30 	bl	8004b16 <st_qword>
	*ptr++ = (BYTE)val; val >>= 8;
 8006cb6:	2121      	movs	r1, #33	; 0x21
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 8006cb8:	9a01      	ldr	r2, [sp, #4]
						res = store_xdir(&dj);	/* Restore it to the directory */
 8006cba:	a802      	add	r0, sp, #8
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 8006cbc:	6913      	ldr	r3, [r2, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8006cbe:	7399      	strb	r1, [r3, #14]
	*ptr++ = (BYTE)val;
 8006cc0:	214e      	movs	r1, #78	; 0x4e
	*ptr++ = (BYTE)val; val >>= 8;
 8006cc2:	731c      	strb	r4, [r3, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8006cc4:	735c      	strb	r4, [r3, #13]
	*ptr++ = (BYTE)val;
 8006cc6:	73d9      	strb	r1, [r3, #15]
						fs->dirbuf[XDIR_ModTime10] = 0;
 8006cc8:	6913      	ldr	r3, [r2, #16]
 8006cca:	755c      	strb	r4, [r3, #21]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 8006ccc:	6913      	ldr	r3, [r2, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8006cce:	741c      	strb	r4, [r3, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8006cd0:	745c      	strb	r4, [r3, #17]
	*ptr++ = (BYTE)val; val >>= 8;
 8006cd2:	749c      	strb	r4, [r3, #18]
	*ptr++ = (BYTE)val;
 8006cd4:	74dc      	strb	r4, [r3, #19]
						res = store_xdir(&dj);	/* Restore it to the directory */
 8006cd6:	f7fe ff7d 	bl	8005bd4 <store_xdir>
						if (res == FR_OK) {
 8006cda:	4604      	mov	r4, r0
 8006cdc:	b948      	cbnz	r0, 8006cf2 <f_sync+0x124>
							res = sync_fs(fs);
 8006cde:	9801      	ldr	r0, [sp, #4]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006ce0:	f7fe fe04 	bl	80058ec <sync_fs>
 8006ce4:	4604      	mov	r4, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006ce6:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8006cea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cee:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
}
 8006cf2:	4620      	mov	r0, r4
 8006cf4:	f50d 6d97 	add.w	sp, sp, #1208	; 0x4b8
 8006cf8:	bd70      	pop	{r4, r5, r6, pc}
				res = move_window(fs, fp->dir_sect);
 8006cfa:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8006cfc:	f7fe f853 	bl	8004da6 <move_window>
				if (res == FR_OK) {
 8006d00:	4604      	mov	r4, r0
 8006d02:	2800      	cmp	r0, #0
 8006d04:	d1f5      	bne.n	8006cf2 <f_sync+0x124>
					dir = fp->dir_ptr;
 8006d06:	6cee      	ldr	r6, [r5, #76]	; 0x4c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 8006d08:	7af3      	ldrb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 8006d0a:	4631      	mov	r1, r6
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 8006d0c:	f043 0320 	orr.w	r3, r3, #32
 8006d10:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 8006d12:	68aa      	ldr	r2, [r5, #8]
 8006d14:	6828      	ldr	r0, [r5, #0]
 8006d16:	f7fe f805 	bl	8004d24 <st_clust.isra.5>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006d1a:	f106 001c 	add.w	r0, r6, #28
 8006d1e:	6929      	ldr	r1, [r5, #16]
 8006d20:	f7fd fef1 	bl	8004b06 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 8006d24:	2321      	movs	r3, #33	; 0x21
 8006d26:	7633      	strb	r3, [r6, #24]
	*ptr++ = (BYTE)val;
 8006d28:	234e      	movs	r3, #78	; 0x4e
 8006d2a:	7673      	strb	r3, [r6, #25]
					fs->wflag = 1;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8006d30:	75b4      	strb	r4, [r6, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 8006d32:	75f4      	strb	r4, [r6, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 8006d34:	74b4      	strb	r4, [r6, #18]
	*ptr++ = (BYTE)val;
 8006d36:	74f4      	strb	r4, [r6, #19]
					fs->wflag = 1;
 8006d38:	70c3      	strb	r3, [r0, #3]
 8006d3a:	e7d1      	b.n	8006ce0 <f_sync+0x112>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006d3c:	2401      	movs	r4, #1
 8006d3e:	e7d8      	b.n	8006cf2 <f_sync+0x124>

08006d40 <f_close>:
{
 8006d40:	b513      	push	{r0, r1, r4, lr}
 8006d42:	4604      	mov	r4, r0
	res = f_sync(fp);					/* Flush cached data */
 8006d44:	f7ff ff43 	bl	8006bce <f_sync>
	if (res == FR_OK)
 8006d48:	b928      	cbnz	r0, 8006d56 <f_close+0x16>
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006d4a:	a901      	add	r1, sp, #4
 8006d4c:	4620      	mov	r0, r4
 8006d4e:	f7fd ffa0 	bl	8004c92 <validate>
		if (res == FR_OK) {
 8006d52:	b900      	cbnz	r0, 8006d56 <f_close+0x16>
			fp->obj.fs = 0;	/* Invalidate file object */
 8006d54:	6020      	str	r0, [r4, #0]
}
 8006d56:	b002      	add	sp, #8
 8006d58:	bd10      	pop	{r4, pc}

08006d5a <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8006d5a:	b40e      	push	{r1, r2, r3}
 8006d5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d60:	4605      	mov	r5, r0
 8006d62:	b0a0      	sub	sp, #128	; 0x80
 8006d64:	ac27      	add	r4, sp, #156	; 0x9c
 8006d66:	f854 3b04 	ldr.w	r3, [r4], #4
	mem_set(pb, 0, sizeof (putbuff));
 8006d6a:	2258      	movs	r2, #88	; 0x58
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	a80a      	add	r0, sp, #40	; 0x28
 8006d70:	f7fd fee0 	bl	8004b34 <mem_set>
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			str[i++] = d + '0';
 8006d74:	ae02      	add	r6, sp, #8
	pb->fp = fp;
 8006d76:	950a      	str	r5, [sp, #40]	; 0x28
	va_start(arp, fmt);
 8006d78:	9401      	str	r4, [sp, #4]
		c = *fmt++;
 8006d7a:	7819      	ldrb	r1, [r3, #0]
		if (c == 0) break;			/* End of string */
 8006d7c:	2900      	cmp	r1, #0
 8006d7e:	f000 80e3 	beq.w	8006f48 <f_printf+0x1ee>
		if (c != '%') {				/* Non escape character */
 8006d82:	2925      	cmp	r1, #37	; 0x25
 8006d84:	d004      	beq.n	8006d90 <f_printf+0x36>
		c = *fmt++;
 8006d86:	1c5c      	adds	r4, r3, #1
			putc_bfd(&pb, c); continue;
 8006d88:	a80a      	add	r0, sp, #40	; 0x28
 8006d8a:	f7ff fe6c 	bl	8006a66 <putc_bfd>
 8006d8e:	e0ba      	b.n	8006f06 <f_printf+0x1ac>
		c = *fmt++;
 8006d90:	7859      	ldrb	r1, [r3, #1]
		if (c == '0') {				/* Flag: '0' padding */
 8006d92:	2930      	cmp	r1, #48	; 0x30
 8006d94:	d12c      	bne.n	8006df0 <f_printf+0x96>
			f = 1; c = *fmt++;
 8006d96:	2201      	movs	r2, #1
 8006d98:	7899      	ldrb	r1, [r3, #2]
 8006d9a:	1cdc      	adds	r4, r3, #3
		if (c == '*') {				/* Minimum width by argument */
 8006d9c:	292a      	cmp	r1, #42	; 0x2a
 8006d9e:	d13a      	bne.n	8006e16 <f_printf+0xbc>
			w = va_arg(arp, int);
 8006da0:	9b01      	ldr	r3, [sp, #4]
			c = *fmt++;
 8006da2:	3401      	adds	r4, #1
			w = va_arg(arp, int);
 8006da4:	1d19      	adds	r1, r3, #4
 8006da6:	681f      	ldr	r7, [r3, #0]
 8006da8:	9101      	str	r1, [sp, #4]
			c = *fmt++;
 8006daa:	f814 1c01 	ldrb.w	r1, [r4, #-1]
		if (c == 'l' || c == 'L') {	/* Type prefix: Size is long int */
 8006dae:	f001 03df 	and.w	r3, r1, #223	; 0xdf
 8006db2:	2b4c      	cmp	r3, #76	; 0x4c
			f |= 4; c = *fmt++;
 8006db4:	bf02      	ittt	eq
 8006db6:	7821      	ldrbeq	r1, [r4, #0]
 8006db8:	f042 0204 	orreq.w	r2, r2, #4
 8006dbc:	3401      	addeq	r4, #1
		if (c == 0) break;
 8006dbe:	2900      	cmp	r1, #0
 8006dc0:	f000 80c2 	beq.w	8006f48 <f_printf+0x1ee>
		if (IsLower(d)) d -= 0x20;
 8006dc4:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 8006dc8:	2b19      	cmp	r3, #25
 8006dca:	bf8e      	itee	hi
 8006dcc:	460b      	movhi	r3, r1
 8006dce:	f1a1 0320 	subls.w	r3, r1, #32
 8006dd2:	b2db      	uxtbls	r3, r3
		switch (d) {				/* Atgument type is... */
 8006dd4:	2b4f      	cmp	r3, #79	; 0x4f
 8006dd6:	f000 80a6 	beq.w	8006f26 <f_printf+0x1cc>
 8006dda:	d81f      	bhi.n	8006e1c <f_printf+0xc2>
 8006ddc:	2b43      	cmp	r3, #67	; 0x43
 8006dde:	f000 809a 	beq.w	8006f16 <f_printf+0x1bc>
 8006de2:	2b44      	cmp	r3, #68	; 0x44
 8006de4:	d036      	beq.n	8006e54 <f_printf+0xfa>
 8006de6:	2b42      	cmp	r3, #66	; 0x42
 8006de8:	d1ce      	bne.n	8006d88 <f_printf+0x2e>
			r = 2; break;
 8006dea:	f04f 0c02 	mov.w	ip, #2
 8006dee:	e033      	b.n	8006e58 <f_printf+0xfe>
			if (c == '-') {			/* Flag: left justified */
 8006df0:	292d      	cmp	r1, #45	; 0x2d
		c = *fmt++;
 8006df2:	bf19      	ittee	ne
 8006df4:	1c9c      	addne	r4, r3, #2
		w = f = 0;
 8006df6:	2200      	movne	r2, #0
				f = 2; c = *fmt++;
 8006df8:	1cdc      	addeq	r4, r3, #3
 8006dfa:	7899      	ldrbeq	r1, [r3, #2]
 8006dfc:	bf08      	it	eq
 8006dfe:	2202      	moveq	r2, #2
 8006e00:	e7cc      	b.n	8006d9c <f_printf+0x42>
				w = w * 10 + c - '0';
 8006e02:	fb00 1707 	mla	r7, r0, r7, r1
				c = *fmt++;
 8006e06:	f814 1b01 	ldrb.w	r1, [r4], #1
				w = w * 10 + c - '0';
 8006e0a:	3f30      	subs	r7, #48	; 0x30
			while (IsDigit(c)) {	/* Minimum width */
 8006e0c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8006e10:	2b09      	cmp	r3, #9
 8006e12:	d9f6      	bls.n	8006e02 <f_printf+0xa8>
 8006e14:	e7cb      	b.n	8006dae <f_printf+0x54>
		w = f = 0;
 8006e16:	2700      	movs	r7, #0
				w = w * 10 + c - '0';
 8006e18:	200a      	movs	r0, #10
 8006e1a:	e7f7      	b.n	8006e0c <f_printf+0xb2>
		switch (d) {				/* Atgument type is... */
 8006e1c:	2b55      	cmp	r3, #85	; 0x55
 8006e1e:	d019      	beq.n	8006e54 <f_printf+0xfa>
 8006e20:	2b58      	cmp	r3, #88	; 0x58
 8006e22:	d07d      	beq.n	8006f20 <f_printf+0x1c6>
 8006e24:	2b53      	cmp	r3, #83	; 0x53
 8006e26:	d1af      	bne.n	8006d88 <f_printf+0x2e>
			p = va_arg(arp, TCHAR*);
 8006e28:	9b01      	ldr	r3, [sp, #4]
 8006e2a:	f8d3 8000 	ldr.w	r8, [r3]
 8006e2e:	1d19      	adds	r1, r3, #4
			for (j = 0; p[j]; j++) ;
 8006e30:	4643      	mov	r3, r8
			p = va_arg(arp, TCHAR*);
 8006e32:	9101      	str	r1, [sp, #4]
 8006e34:	eba3 0508 	sub.w	r5, r3, r8
			for (j = 0; p[j]; j++) ;
 8006e38:	f813 1b01 	ldrb.w	r1, [r3], #1
 8006e3c:	2900      	cmp	r1, #0
 8006e3e:	d1f9      	bne.n	8006e34 <f_printf+0xda>
			if (!(f & 2)) {						/* Right padded */
 8006e40:	0793      	lsls	r3, r2, #30
 8006e42:	d404      	bmi.n	8006e4e <f_printf+0xf4>
				while (j++ < w) putc_bfd(&pb, ' ') ;
 8006e44:	42bd      	cmp	r5, r7
 8006e46:	f105 0901 	add.w	r9, r5, #1
 8006e4a:	d34d      	bcc.n	8006ee8 <f_printf+0x18e>
 8006e4c:	464d      	mov	r5, r9
 8006e4e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e52:	e052      	b.n	8006efa <f_printf+0x1a0>
			r = 10; break;
 8006e54:	f04f 0c0a 	mov.w	ip, #10
 8006e58:	9801      	ldr	r0, [sp, #4]
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8006e5a:	2b44      	cmp	r3, #68	; 0x44
 8006e5c:	f100 0504 	add.w	r5, r0, #4
 8006e60:	9501      	str	r5, [sp, #4]
 8006e62:	6800      	ldr	r0, [r0, #0]
 8006e64:	d104      	bne.n	8006e70 <f_printf+0x116>
		if (d == 'D' && (v & 0x80000000)) {
 8006e66:	2800      	cmp	r0, #0
			v = 0 - v;
 8006e68:	bfbc      	itt	lt
 8006e6a:	4240      	neglt	r0, r0
			f |= 8;
 8006e6c:	f042 0208 	orrlt.w	r2, r2, #8
 8006e70:	2978      	cmp	r1, #120	; 0x78
 8006e72:	bf0c      	ite	eq
 8006e74:	f04f 0827 	moveq.w	r8, #39	; 0x27
 8006e78:	f04f 0807 	movne.w	r8, #7
		i = 0;
 8006e7c:	2100      	movs	r1, #0
			d = (TCHAR)(v % r); v /= r;
 8006e7e:	fbb0 fefc 	udiv	lr, r0, ip
 8006e82:	fb0c 051e 	mls	r5, ip, lr, r0
 8006e86:	b2eb      	uxtb	r3, r5
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8006e88:	2d09      	cmp	r5, #9
 8006e8a:	bf84      	itt	hi
 8006e8c:	4443      	addhi	r3, r8
 8006e8e:	b2db      	uxtbhi	r3, r3
			str[i++] = d + '0';
 8006e90:	3330      	adds	r3, #48	; 0x30
			d = (TCHAR)(v % r); v /= r;
 8006e92:	4670      	mov	r0, lr
			str[i++] = d + '0';
 8006e94:	1c4d      	adds	r5, r1, #1
 8006e96:	5473      	strb	r3, [r6, r1]
		} while (v && i < sizeof str / sizeof *str);
 8006e98:	f1be 0f00 	cmp.w	lr, #0
 8006e9c:	d002      	beq.n	8006ea4 <f_printf+0x14a>
 8006e9e:	2d20      	cmp	r5, #32
 8006ea0:	d144      	bne.n	8006f2c <f_printf+0x1d2>
 8006ea2:	211f      	movs	r1, #31
		if (f & 8) str[i++] = '-';
 8006ea4:	0710      	lsls	r0, r2, #28
 8006ea6:	d505      	bpl.n	8006eb4 <f_printf+0x15a>
 8006ea8:	ab20      	add	r3, sp, #128	; 0x80
 8006eaa:	441d      	add	r5, r3
 8006eac:	232d      	movs	r3, #45	; 0x2d
 8006eae:	f805 3c78 	strb.w	r3, [r5, #-120]
 8006eb2:	1c8d      	adds	r5, r1, #2
		j = i; d = (f & 1) ? '0' : ' ';
 8006eb4:	f012 0f01 	tst.w	r2, #1
 8006eb8:	bf0c      	ite	eq
 8006eba:	f04f 0920 	moveq.w	r9, #32
 8006ebe:	f04f 0930 	movne.w	r9, #48	; 0x30
		if (!(f & 2)) {
 8006ec2:	0793      	lsls	r3, r2, #30
 8006ec4:	d53e      	bpl.n	8006f44 <f_printf+0x1ea>
		j = i; d = (f & 1) ? '0' : ' ';
 8006ec6:	46a8      	mov	r8, r5
			while (j++ < w) putc_bfd(&pb, d);	/* Right pad */
		}
		do {
			putc_bfd(&pb, str[--i]);			/* Number body */
 8006ec8:	3d01      	subs	r5, #1
 8006eca:	5d71      	ldrb	r1, [r6, r5]
 8006ecc:	a80a      	add	r0, sp, #40	; 0x28
 8006ece:	f7ff fdca 	bl	8006a66 <putc_bfd>
		} while (i);
 8006ed2:	2d00      	cmp	r5, #0
 8006ed4:	d1f8      	bne.n	8006ec8 <f_printf+0x16e>
		while (j++ < w) putc_bfd(&pb, d);		/* Left pad */
 8006ed6:	4547      	cmp	r7, r8
 8006ed8:	d915      	bls.n	8006f06 <f_printf+0x1ac>
 8006eda:	4649      	mov	r1, r9
 8006edc:	a80a      	add	r0, sp, #40	; 0x28
 8006ede:	f7ff fdc2 	bl	8006a66 <putc_bfd>
 8006ee2:	f108 0801 	add.w	r8, r8, #1
 8006ee6:	e7f6      	b.n	8006ed6 <f_printf+0x17c>
				while (j++ < w) putc_bfd(&pb, ' ') ;
 8006ee8:	2120      	movs	r1, #32
 8006eea:	a80a      	add	r0, sp, #40	; 0x28
 8006eec:	f7ff fdbb 	bl	8006a66 <putc_bfd>
 8006ef0:	464d      	mov	r5, r9
 8006ef2:	e7a7      	b.n	8006e44 <f_printf+0xea>
			while (*p) putc_bfd(&pb, *p++) ;		/* String body */
 8006ef4:	a80a      	add	r0, sp, #40	; 0x28
 8006ef6:	f7ff fdb6 	bl	8006a66 <putc_bfd>
 8006efa:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 8006efe:	2900      	cmp	r1, #0
 8006f00:	d1f8      	bne.n	8006ef4 <f_printf+0x19a>
			while (j++ < w) putc_bfd(&pb, ' ') ;	/* Left padded */
 8006f02:	42af      	cmp	r7, r5
 8006f04:	d801      	bhi.n	8006f0a <f_printf+0x1b0>
{
 8006f06:	4623      	mov	r3, r4
 8006f08:	e737      	b.n	8006d7a <f_printf+0x20>
			while (j++ < w) putc_bfd(&pb, ' ') ;	/* Left padded */
 8006f0a:	2120      	movs	r1, #32
 8006f0c:	a80a      	add	r0, sp, #40	; 0x28
 8006f0e:	f7ff fdaa 	bl	8006a66 <putc_bfd>
 8006f12:	3501      	adds	r5, #1
 8006f14:	e7f5      	b.n	8006f02 <f_printf+0x1a8>
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8006f16:	9b01      	ldr	r3, [sp, #4]
 8006f18:	1d1a      	adds	r2, r3, #4
 8006f1a:	9201      	str	r2, [sp, #4]
 8006f1c:	7819      	ldrb	r1, [r3, #0]
 8006f1e:	e733      	b.n	8006d88 <f_printf+0x2e>
			r = 16; break;
 8006f20:	f04f 0c10 	mov.w	ip, #16
 8006f24:	e798      	b.n	8006e58 <f_printf+0xfe>
			r = 8; break;
 8006f26:	f04f 0c08 	mov.w	ip, #8
 8006f2a:	e795      	b.n	8006e58 <f_printf+0xfe>
 8006f2c:	4629      	mov	r1, r5
 8006f2e:	e7a6      	b.n	8006e7e <f_printf+0x124>
			while (j++ < w) putc_bfd(&pb, d);	/* Right pad */
 8006f30:	4649      	mov	r1, r9
 8006f32:	a80a      	add	r0, sp, #40	; 0x28
 8006f34:	f7ff fd97 	bl	8006a66 <putc_bfd>
 8006f38:	4643      	mov	r3, r8
 8006f3a:	42bb      	cmp	r3, r7
 8006f3c:	f103 0801 	add.w	r8, r3, #1
 8006f40:	d3f6      	bcc.n	8006f30 <f_printf+0x1d6>
 8006f42:	e7c1      	b.n	8006ec8 <f_printf+0x16e>
		j = i; d = (f & 1) ? '0' : ' ';
 8006f44:	462b      	mov	r3, r5
 8006f46:	e7f8      	b.n	8006f3a <f_printf+0x1e0>
	}

	va_end(arp);

	return putc_flush(&pb);
 8006f48:	a80a      	add	r0, sp, #40	; 0x28
 8006f4a:	f7ff fe29 	bl	8006ba0 <putc_flush>
}
 8006f4e:	b020      	add	sp, #128	; 0x80
 8006f50:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f54:	b003      	add	sp, #12
 8006f56:	4770      	bx	lr

08006f58 <ff_uni2oem>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
 8006f58:	287f      	cmp	r0, #127	; 0x7f
{
 8006f5a:	b510      	push	{r4, lr}
	if (uni < 0x80) {	/* ASCII? */
 8006f5c:	d801      	bhi.n	8006f62 <ff_uni2oem+0xa>
		c = (WCHAR)uni;
 8006f5e:	b280      	uxth	r0, r0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
 8006f60:	bd10      	pop	{r4, pc}
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
 8006f62:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8006f66:	d203      	bcs.n	8006f70 <ff_uni2oem+0x18>
 8006f68:	f240 3362 	movw	r3, #866	; 0x362
 8006f6c:	4299      	cmp	r1, r3
 8006f6e:	d006      	beq.n	8006f7e <ff_uni2oem+0x26>
	WCHAR c = 0;
 8006f70:	2000      	movs	r0, #0
 8006f72:	e7f5      	b.n	8006f60 <ff_uni2oem+0x8>
 8006f74:	3201      	adds	r2, #1
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
 8006f76:	2a80      	cmp	r2, #128	; 0x80
 8006f78:	d103      	bne.n	8006f82 <ff_uni2oem+0x2a>
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	e006      	b.n	8006f8c <ff_uni2oem+0x34>
 8006f7e:	2200      	movs	r2, #0
 8006f80:	4c04      	ldr	r4, [pc, #16]	; (8006f94 <ff_uni2oem+0x3c>)
 8006f82:	f834 1012 	ldrh.w	r1, [r4, r2, lsl #1]
 8006f86:	b293      	uxth	r3, r2
 8006f88:	4281      	cmp	r1, r0
 8006f8a:	d1f3      	bne.n	8006f74 <ff_uni2oem+0x1c>
			c = (c + 0x80) & 0xFF;
 8006f8c:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8006f90:	b2c0      	uxtb	r0, r0
 8006f92:	e7e5      	b.n	8006f60 <ff_uni2oem+0x8>
 8006f94:	0800bd8e 	.word	0x0800bd8e

08006f98 <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
 8006f98:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
{
 8006f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (uni < 0x10000) {	/* Is it in BMP? */
 8006f9e:	d221      	bcs.n	8006fe4 <ff_wtoupper+0x4c>
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
 8006fa0:	4a1e      	ldr	r2, [pc, #120]	; (800701c <ff_wtoupper+0x84>)
 8006fa2:	491f      	ldr	r1, [pc, #124]	; (8007020 <ff_wtoupper+0x88>)
		uc = (WORD)uni;
 8006fa4:	b283      	uxth	r3, r0
		p = uc < 0x1000 ? cvt1 : cvt2;
 8006fa6:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8006faa:	bf28      	it	cs
 8006fac:	460a      	movcs	r2, r1
 8006fae:	1d14      	adds	r4, r2, #4
		for (;;) {
			bc = *p++;								/* Get the block base */
 8006fb0:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 8006fb4:	4621      	mov	r1, r4
			if (bc == 0 || uc < bc) break;			/* Not matched? */
 8006fb6:	b1a2      	cbz	r2, 8006fe2 <ff_wtoupper+0x4a>
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d312      	bcc.n	8006fe2 <ff_wtoupper+0x4a>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8006fbc:	f834 5c02 	ldrh.w	r5, [r4, #-2]
 8006fc0:	0a2e      	lsrs	r6, r5, #8
 8006fc2:	b2ed      	uxtb	r5, r5
			if (uc < bc + nc) {	/* In the block? */
 8006fc4:	18af      	adds	r7, r5, r2
 8006fc6:	42b8      	cmp	r0, r7
 8006fc8:	da22      	bge.n	8007010 <ff_wtoupper+0x78>
				switch (cmd) {
 8006fca:	2e08      	cmp	r6, #8
 8006fcc:	d809      	bhi.n	8006fe2 <ff_wtoupper+0x4a>
 8006fce:	e8df f006 	tbb	[pc, r6]
 8006fd2:	0a05      	.short	0x0a05
 8006fd4:	16141210 	.word	0x16141210
 8006fd8:	1a18      	.short	0x1a18
 8006fda:	1c          	.byte	0x1c
 8006fdb:	00          	.byte	0x00
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
 8006fdc:	1a80      	subs	r0, r0, r2
 8006fde:	f834 3010 	ldrh.w	r3, [r4, r0, lsl #1]
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
		}
		uni = uc;
 8006fe2:	4618      	mov	r0, r3
	}

	return uni;
}
 8006fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
 8006fe6:	1a98      	subs	r0, r3, r2
 8006fe8:	f000 0001 	and.w	r0, r0, #1
 8006fec:	1a1b      	subs	r3, r3, r0
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	e7f7      	b.n	8006fe2 <ff_wtoupper+0x4a>
				case 2: uc -= 16; break;			/* Shift -16 */
 8006ff2:	3b10      	subs	r3, #16
 8006ff4:	e7fb      	b.n	8006fee <ff_wtoupper+0x56>
				case 3:	uc -= 32; break;			/* Shift -32 */
 8006ff6:	3b20      	subs	r3, #32
 8006ff8:	e7f9      	b.n	8006fee <ff_wtoupper+0x56>
				case 4:	uc -= 48; break;			/* Shift -48 */
 8006ffa:	3b30      	subs	r3, #48	; 0x30
 8006ffc:	e7f7      	b.n	8006fee <ff_wtoupper+0x56>
				case 5:	uc -= 26; break;			/* Shift -26 */
 8006ffe:	3b1a      	subs	r3, #26
 8007000:	e7f5      	b.n	8006fee <ff_wtoupper+0x56>
				case 6:	uc += 8; break;				/* Shift +8 */
 8007002:	3308      	adds	r3, #8
 8007004:	e7f3      	b.n	8006fee <ff_wtoupper+0x56>
				case 7: uc -= 80; break;			/* Shift -80 */
 8007006:	3b50      	subs	r3, #80	; 0x50
 8007008:	e7f1      	b.n	8006fee <ff_wtoupper+0x56>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
 800700a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800700e:	e7ee      	b.n	8006fee <ff_wtoupper+0x56>
 8007010:	3404      	adds	r4, #4
			if (cmd == 0) p += nc;	/* Skip table if needed */
 8007012:	2e00      	cmp	r6, #0
 8007014:	d1cc      	bne.n	8006fb0 <ff_wtoupper+0x18>
 8007016:	eb01 0245 	add.w	r2, r1, r5, lsl #1
 800701a:	e7c8      	b.n	8006fae <ff_wtoupper+0x16>
 800701c:	0800bae0 	.word	0x0800bae0
 8007020:	0800bcd2 	.word	0x0800bcd2

08007024 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007024:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8007028:	b113      	cbz	r3, 8007030 <osKernelInitialize+0xc>
    stat = osErrorISR;
 800702a:	f06f 0005 	mvn.w	r0, #5
 800702e:	4770      	bx	lr
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007030:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1f8      	bne.n	800702a <osKernelInitialize+0x6>
 8007038:	4b07      	ldr	r3, [pc, #28]	; (8007058 <osKernelInitialize+0x34>)
 800703a:	6818      	ldr	r0, [r3, #0]
 800703c:	2802      	cmp	r0, #2
 800703e:	d106      	bne.n	800704e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007040:	f3ef 8311 	mrs	r3, BASEPRI
 8007044:	2b00      	cmp	r3, #0
 8007046:	d1f0      	bne.n	800702a <osKernelInitialize+0x6>
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
      stat = osOK;
    } else {
      stat = osError;
 8007048:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800704c:	4770      	bx	lr
    if (KernelState == osKernelInactive) {
 800704e:	2800      	cmp	r0, #0
 8007050:	d1fa      	bne.n	8007048 <osKernelInitialize+0x24>
      KernelState = osKernelReady;
 8007052:	2201      	movs	r2, #1
 8007054:	601a      	str	r2, [r3, #0]
 8007056:	4770      	bx	lr
 8007058:	200008ac 	.word	0x200008ac

0800705c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800705c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800705e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8007062:	b113      	cbz	r3, 800706a <osKernelStart+0xe>
    stat = osErrorISR;
 8007064:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 8007068:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800706a:	f3ef 8410 	mrs	r4, PRIMASK
  if (IS_IRQ()) {
 800706e:	2c00      	cmp	r4, #0
 8007070:	d1f8      	bne.n	8007064 <osKernelStart+0x8>
 8007072:	4b09      	ldr	r3, [pc, #36]	; (8007098 <osKernelStart+0x3c>)
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	2a02      	cmp	r2, #2
 8007078:	d106      	bne.n	8007088 <osKernelStart+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800707a:	f3ef 8311 	mrs	r3, BASEPRI
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1f0      	bne.n	8007064 <osKernelStart+0x8>
      stat = osError;
 8007082:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8007086:	e7ef      	b.n	8007068 <osKernelStart+0xc>
    if (KernelState == osKernelReady) {
 8007088:	2a01      	cmp	r2, #1
 800708a:	d1fa      	bne.n	8007082 <osKernelStart+0x26>
      KernelState = osKernelRunning;
 800708c:	2202      	movs	r2, #2
 800708e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8007090:	f001 f812 	bl	80080b8 <vTaskStartScheduler>
      stat = osOK;
 8007094:	4620      	mov	r0, r4
 8007096:	e7e7      	b.n	8007068 <osKernelStart+0xc>
 8007098:	200008ac 	.word	0x200008ac

0800709c <osKernelGetTickCount>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800709c:	f3ef 8305 	mrs	r3, IPSR
}

uint32_t osKernelGetTickCount (void) {
  TickType_t ticks;

  if (IS_IRQ()) {
 80070a0:	b10b      	cbz	r3, 80070a6 <osKernelGetTickCount+0xa>
    ticks = xTaskGetTickCountFromISR();
 80070a2:	f001 b859 	b.w	8008158 <xTaskGetTickCountFromISR>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070a6:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d1f9      	bne.n	80070a2 <osKernelGetTickCount+0x6>
 80070ae:	4b05      	ldr	r3, [pc, #20]	; (80070c4 <osKernelGetTickCount+0x28>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d103      	bne.n	80070be <osKernelGetTickCount+0x22>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80070b6:	f3ef 8311 	mrs	r3, BASEPRI
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d1f1      	bne.n	80070a2 <osKernelGetTickCount+0x6>
  } else {
    ticks = xTaskGetTickCount();
 80070be:	f001 b845 	b.w	800814c <xTaskGetTickCount>
 80070c2:	bf00      	nop
 80070c4:	200008ac 	.word	0x200008ac

080070c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80070c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80070ca:	460b      	mov	r3, r1
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80070cc:	2100      	movs	r1, #0
 80070ce:	9103      	str	r1, [sp, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070d0:	f3ef 8105 	mrs	r1, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80070d4:	bb29      	cbnz	r1, 8007122 <osThreadNew+0x5a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070d6:	f3ef 8110 	mrs	r1, PRIMASK
 80070da:	bb11      	cbnz	r1, 8007122 <osThreadNew+0x5a>
 80070dc:	491c      	ldr	r1, [pc, #112]	; (8007150 <osThreadNew+0x88>)
 80070de:	6809      	ldr	r1, [r1, #0]
 80070e0:	2902      	cmp	r1, #2
 80070e2:	d102      	bne.n	80070ea <osThreadNew+0x22>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80070e4:	f3ef 8111 	mrs	r1, BASEPRI
 80070e8:	b9d9      	cbnz	r1, 8007122 <osThreadNew+0x5a>
 80070ea:	b1d0      	cbz	r0, 8007122 <osThreadNew+0x5a>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 80070ec:	2100      	movs	r1, #0
 80070ee:	f88d 100b 	strb.w	r1, [sp, #11]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 80070f2:	b1da      	cbz	r2, 800712c <osThreadNew+0x64>
      if (attr->name != NULL) {
 80070f4:	6811      	ldr	r1, [r2, #0]
 80070f6:	b909      	cbnz	r1, 80070fc <osThreadNew+0x34>
    name  = &empty;
 80070f8:	f10d 010b 	add.w	r1, sp, #11
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80070fc:	6995      	ldr	r5, [r2, #24]
 80070fe:	2d00      	cmp	r5, #0
 8007100:	bf08      	it	eq
 8007102:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007104:	1e6c      	subs	r4, r5, #1
 8007106:	2c37      	cmp	r4, #55	; 0x37
 8007108:	d81f      	bhi.n	800714a <osThreadNew+0x82>
 800710a:	6854      	ldr	r4, [r2, #4]
 800710c:	07e4      	lsls	r4, r4, #31
 800710e:	d41c      	bmi.n	800714a <osThreadNew+0x82>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8007110:	6954      	ldr	r4, [r2, #20]
 8007112:	b14c      	cbz	r4, 8007128 <osThreadNew+0x60>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007114:	08a4      	lsrs	r4, r4, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007116:	6896      	ldr	r6, [r2, #8]
 8007118:	b91e      	cbnz	r6, 8007122 <osThreadNew+0x5a>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800711a:	68d6      	ldr	r6, [r2, #12]
 800711c:	b90e      	cbnz	r6, 8007122 <osThreadNew+0x5a>
    if (mem == 1) {
     // hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
    //                                                                                (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
 800711e:	6912      	ldr	r2, [r2, #16]
 8007120:	b142      	cbz	r2, 8007134 <osThreadNew+0x6c>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007122:	9803      	ldr	r0, [sp, #12]
}
 8007124:	b004      	add	sp, #16
 8007126:	bd70      	pop	{r4, r5, r6, pc}
    stack = configMINIMAL_STACK_SIZE;
 8007128:	2440      	movs	r4, #64	; 0x40
 800712a:	e7f4      	b.n	8007116 <osThreadNew+0x4e>
    prio  = (UBaseType_t)osPriorityNormal;
 800712c:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 800712e:	2440      	movs	r4, #64	; 0x40
    name  = &empty;
 8007130:	f10d 010b 	add.w	r1, sp, #11
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007134:	aa03      	add	r2, sp, #12
 8007136:	e9cd 5200 	strd	r5, r2, [sp]
 800713a:	b2a2      	uxth	r2, r4
 800713c:	f000 fee2 	bl	8007f04 <xTaskCreate>
 8007140:	2801      	cmp	r0, #1
          hTask = NULL;
 8007142:	bf1c      	itt	ne
 8007144:	2300      	movne	r3, #0
 8007146:	9303      	strne	r3, [sp, #12]
 8007148:	e7eb      	b.n	8007122 <osThreadNew+0x5a>
        return (NULL);
 800714a:	2000      	movs	r0, #0
 800714c:	e7ea      	b.n	8007124 <osThreadNew+0x5c>
 800714e:	bf00      	nop
 8007150:	200008ac 	.word	0x200008ac

08007154 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007154:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007156:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800715a:	b113      	cbz	r3, 8007162 <osDelay+0xe>
    stat = osErrorISR;
 800715c:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8007160:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007162:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1f8      	bne.n	800715c <osDelay+0x8>
 800716a:	4b07      	ldr	r3, [pc, #28]	; (8007188 <osDelay+0x34>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2b02      	cmp	r3, #2
 8007170:	d103      	bne.n	800717a <osDelay+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007172:	f3ef 8311 	mrs	r3, BASEPRI
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1f0      	bne.n	800715c <osDelay+0x8>
    if (ticks != 0U) {
 800717a:	2800      	cmp	r0, #0
 800717c:	d0f0      	beq.n	8007160 <osDelay+0xc>
      vTaskDelay(ticks);
 800717e:	f001 f8f7 	bl	8008370 <vTaskDelay>
    stat = osOK;
 8007182:	2000      	movs	r0, #0
 8007184:	e7ec      	b.n	8007160 <osDelay+0xc>
 8007186:	bf00      	nop
 8007188:	200008ac 	.word	0x200008ac

0800718c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800718c:	b570      	push	{r4, r5, r6, lr}
 800718e:	460e      	mov	r6, r1
 8007190:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007192:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007196:	b113      	cbz	r3, 800719e <osSemaphoreNew+0x12>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 8007198:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800719a:	4628      	mov	r0, r5
 800719c:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800719e:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d1f8      	bne.n	8007198 <osSemaphoreNew+0xc>
 80071a6:	4b1b      	ldr	r3, [pc, #108]	; (8007214 <osSemaphoreNew+0x88>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2b02      	cmp	r3, #2
 80071ac:	d103      	bne.n	80071b6 <osSemaphoreNew+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80071ae:	f3ef 8311 	mrs	r3, BASEPRI
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1f0      	bne.n	8007198 <osSemaphoreNew+0xc>
 80071b6:	2800      	cmp	r0, #0
 80071b8:	d0ee      	beq.n	8007198 <osSemaphoreNew+0xc>
 80071ba:	42b0      	cmp	r0, r6
 80071bc:	d3ec      	bcc.n	8007198 <osSemaphoreNew+0xc>
    if (attr != NULL) {
 80071be:	b12c      	cbz	r4, 80071cc <osSemaphoreNew+0x40>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80071c0:	68a3      	ldr	r3, [r4, #8]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d1e8      	bne.n	8007198 <osSemaphoreNew+0xc>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80071c6:	68e3      	ldr	r3, [r4, #12]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d1e5      	bne.n	8007198 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 80071cc:	2801      	cmp	r0, #1
 80071ce:	d112      	bne.n	80071f6 <osSemaphoreNew+0x6a>
          hSemaphore = xSemaphoreCreateBinary();
 80071d0:	2203      	movs	r2, #3
 80071d2:	2100      	movs	r1, #0
 80071d4:	f000 fa5c 	bl	8007690 <xQueueGenericCreate>
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80071d8:	4605      	mov	r5, r0
 80071da:	2800      	cmp	r0, #0
 80071dc:	d0dc      	beq.n	8007198 <osSemaphoreNew+0xc>
 80071de:	b186      	cbz	r6, 8007202 <osSemaphoreNew+0x76>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80071e0:	2300      	movs	r3, #0
 80071e2:	461a      	mov	r2, r3
 80071e4:	4619      	mov	r1, r3
 80071e6:	f000 fa95 	bl	8007714 <xQueueGenericSend>
 80071ea:	2801      	cmp	r0, #1
 80071ec:	d009      	beq.n	8007202 <osSemaphoreNew+0x76>
            vSemaphoreDelete (hSemaphore);
 80071ee:	4628      	mov	r0, r5
 80071f0:	f000 fdd0 	bl	8007d94 <vQueueDelete>
 80071f4:	e7d0      	b.n	8007198 <osSemaphoreNew+0xc>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80071f6:	4631      	mov	r1, r6
 80071f8:	f000 fa6e 	bl	80076d8 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 80071fc:	4605      	mov	r5, r0
 80071fe:	2800      	cmp	r0, #0
 8007200:	d0ca      	beq.n	8007198 <osSemaphoreNew+0xc>
        if (attr != NULL) {
 8007202:	b124      	cbz	r4, 800720e <osSemaphoreNew+0x82>
          name = attr->name;
 8007204:	6821      	ldr	r1, [r4, #0]
        vQueueAddToRegistry (hSemaphore, name);
 8007206:	4628      	mov	r0, r5
 8007208:	f000 fd9e 	bl	8007d48 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800720c:	e7c5      	b.n	800719a <osSemaphoreNew+0xe>
          name = NULL;
 800720e:	4621      	mov	r1, r4
 8007210:	e7f9      	b.n	8007206 <osSemaphoreNew+0x7a>
 8007212:	bf00      	nop
 8007214:	200008ac 	.word	0x200008ac

08007218 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007218:	b513      	push	{r0, r1, r4, lr}
 800721a:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800721c:	b918      	cbnz	r0, 8007226 <osSemaphoreAcquire+0xe>
    stat = osErrorParameter;
 800721e:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8007222:	b002      	add	sp, #8
 8007224:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007226:	f3ef 8305 	mrs	r3, IPSR
  else if (IS_IRQ()) {
 800722a:	b16b      	cbz	r3, 8007248 <osSemaphoreAcquire+0x30>
    if (timeout != 0U) {
 800722c:	2c00      	cmp	r4, #0
 800722e:	d1f6      	bne.n	800721e <osSemaphoreAcquire+0x6>
      yield = pdFALSE;
 8007230:	aa02      	add	r2, sp, #8
 8007232:	f842 4d04 	str.w	r4, [r2, #-4]!
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007236:	4621      	mov	r1, r4
 8007238:	f000 fd36 	bl	8007ca8 <xQueueReceiveFromISR>
 800723c:	2801      	cmp	r0, #1
 800723e:	d115      	bne.n	800726c <osSemaphoreAcquire+0x54>
        portYIELD_FROM_ISR (yield);
 8007240:	9b01      	ldr	r3, [sp, #4]
 8007242:	b9b3      	cbnz	r3, 8007272 <osSemaphoreAcquire+0x5a>
  stat = osOK;
 8007244:	2000      	movs	r0, #0
 8007246:	e7ec      	b.n	8007222 <osSemaphoreAcquire+0xa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007248:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1ed      	bne.n	800722c <osSemaphoreAcquire+0x14>
 8007250:	4b0e      	ldr	r3, [pc, #56]	; (800728c <osSemaphoreAcquire+0x74>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2b02      	cmp	r3, #2
 8007256:	d103      	bne.n	8007260 <osSemaphoreAcquire+0x48>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007258:	f3ef 8311 	mrs	r3, BASEPRI
 800725c:	2b00      	cmp	r3, #0
 800725e:	d1e5      	bne.n	800722c <osSemaphoreAcquire+0x14>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8007260:	4621      	mov	r1, r4
 8007262:	f000 fc5f 	bl	8007b24 <xQueueSemaphoreTake>
 8007266:	2801      	cmp	r0, #1
 8007268:	d0ec      	beq.n	8007244 <osSemaphoreAcquire+0x2c>
      if (timeout != 0U) {
 800726a:	b95c      	cbnz	r4, 8007284 <osSemaphoreAcquire+0x6c>
        stat = osErrorResource;
 800726c:	f06f 0002 	mvn.w	r0, #2
 8007270:	e7d7      	b.n	8007222 <osSemaphoreAcquire+0xa>
        portYIELD_FROM_ISR (yield);
 8007272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007276:	4b06      	ldr	r3, [pc, #24]	; (8007290 <osSemaphoreAcquire+0x78>)
 8007278:	601a      	str	r2, [r3, #0]
 800727a:	f3bf 8f4f 	dsb	sy
 800727e:	f3bf 8f6f 	isb	sy
 8007282:	e7df      	b.n	8007244 <osSemaphoreAcquire+0x2c>
        stat = osErrorTimeout;
 8007284:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8007288:	e7cb      	b.n	8007222 <osSemaphoreAcquire+0xa>
 800728a:	bf00      	nop
 800728c:	200008ac 	.word	0x200008ac
 8007290:	e000ed04 	.word	0xe000ed04

08007294 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007294:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8007296:	b378      	cbz	r0, 80072f8 <osSemaphoreRelease+0x64>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007298:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800729c:	b153      	cbz	r3, 80072b4 <osSemaphoreRelease+0x20>
    yield = pdFALSE;
 800729e:	2400      	movs	r4, #0
 80072a0:	a902      	add	r1, sp, #8
 80072a2:	f841 4d04 	str.w	r4, [r1, #-4]!

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80072a6:	f000 fb48 	bl	800793a <xQueueGiveFromISR>
 80072aa:	2801      	cmp	r0, #1
 80072ac:	d016      	beq.n	80072dc <osSemaphoreRelease+0x48>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 80072ae:	f06f 0002 	mvn.w	r0, #2
 80072b2:	e016      	b.n	80072e2 <osSemaphoreRelease+0x4e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072b4:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d1f0      	bne.n	800729e <osSemaphoreRelease+0xa>
 80072bc:	4b10      	ldr	r3, [pc, #64]	; (8007300 <osSemaphoreRelease+0x6c>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2b02      	cmp	r3, #2
 80072c2:	d103      	bne.n	80072cc <osSemaphoreRelease+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80072c4:	f3ef 8311 	mrs	r3, BASEPRI
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d1e8      	bne.n	800729e <osSemaphoreRelease+0xa>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80072cc:	2300      	movs	r3, #0
 80072ce:	461a      	mov	r2, r3
 80072d0:	4619      	mov	r1, r3
 80072d2:	f000 fa1f 	bl	8007714 <xQueueGenericSend>
 80072d6:	2801      	cmp	r0, #1
 80072d8:	d002      	beq.n	80072e0 <osSemaphoreRelease+0x4c>
 80072da:	e7e8      	b.n	80072ae <osSemaphoreRelease+0x1a>
      portYIELD_FROM_ISR (yield);
 80072dc:	9b01      	ldr	r3, [sp, #4]
 80072de:	b913      	cbnz	r3, 80072e6 <osSemaphoreRelease+0x52>
  stat = osOK;
 80072e0:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 80072e2:	b002      	add	sp, #8
 80072e4:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 80072e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072ea:	4b06      	ldr	r3, [pc, #24]	; (8007304 <osSemaphoreRelease+0x70>)
 80072ec:	601a      	str	r2, [r3, #0]
 80072ee:	f3bf 8f4f 	dsb	sy
 80072f2:	f3bf 8f6f 	isb	sy
 80072f6:	e7f3      	b.n	80072e0 <osSemaphoreRelease+0x4c>
    stat = osErrorParameter;
 80072f8:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80072fc:	e7f1      	b.n	80072e2 <osSemaphoreRelease+0x4e>
 80072fe:	bf00      	nop
 8007300:	200008ac 	.word	0x200008ac
 8007304:	e000ed04 	.word	0xe000ed04

08007308 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007308:	b538      	push	{r3, r4, r5, lr}
 800730a:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800730c:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007310:	b973      	cbnz	r3, 8007330 <osMessageQueueNew+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007312:	f3ef 8310 	mrs	r3, PRIMASK
 8007316:	b95b      	cbnz	r3, 8007330 <osMessageQueueNew+0x28>
 8007318:	4b12      	ldr	r3, [pc, #72]	; (8007364 <osMessageQueueNew+0x5c>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	2b02      	cmp	r3, #2
 800731e:	d102      	bne.n	8007326 <osMessageQueueNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007320:	f3ef 8311 	mrs	r3, BASEPRI
 8007324:	b923      	cbnz	r3, 8007330 <osMessageQueueNew+0x28>
 8007326:	b118      	cbz	r0, 8007330 <osMessageQueueNew+0x28>
 8007328:	b111      	cbz	r1, 8007330 <osMessageQueueNew+0x28>
    mem = -1;

    if (attr != NULL) {
 800732a:	b16c      	cbz	r4, 8007348 <osMessageQueueNew+0x40>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800732c:	68a3      	ldr	r3, [r4, #8]
 800732e:	b113      	cbz	r3, 8007336 <osMessageQueueNew+0x2e>
  hQueue = NULL;
 8007330:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8007332:	4628      	mov	r0, r5
 8007334:	bd38      	pop	{r3, r4, r5, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007336:	68e3      	ldr	r3, [r4, #12]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1f9      	bne.n	8007330 <osMessageQueueNew+0x28>
 800733c:	6923      	ldr	r3, [r4, #16]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1f6      	bne.n	8007330 <osMessageQueueNew+0x28>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007342:	6963      	ldr	r3, [r4, #20]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1f3      	bne.n	8007330 <osMessageQueueNew+0x28>
        hQueue = xQueueCreate (msg_count, msg_size);
 8007348:	2200      	movs	r2, #0
 800734a:	f000 f9a1 	bl	8007690 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800734e:	4605      	mov	r5, r0
 8007350:	2800      	cmp	r0, #0
 8007352:	d0ed      	beq.n	8007330 <osMessageQueueNew+0x28>
      if (attr != NULL) {
 8007354:	b124      	cbz	r4, 8007360 <osMessageQueueNew+0x58>
        name = attr->name;
 8007356:	6821      	ldr	r1, [r4, #0]
      vQueueAddToRegistry (hQueue, name);
 8007358:	4628      	mov	r0, r5
 800735a:	f000 fcf5 	bl	8007d48 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800735e:	e7e8      	b.n	8007332 <osMessageQueueNew+0x2a>
        name = NULL;
 8007360:	4621      	mov	r1, r4
 8007362:	e7f9      	b.n	8007358 <osMessageQueueNew+0x50>
 8007364:	200008ac 	.word	0x200008ac

08007368 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007368:	b513      	push	{r0, r1, r4, lr}
 800736a:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800736c:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8007370:	b123      	cbz	r3, 800737c <osMessageQueuePut+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007372:	b9e8      	cbnz	r0, 80073b0 <osMessageQueuePut+0x48>
      stat = osErrorParameter;
 8007374:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8007378:	b002      	add	sp, #8
 800737a:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800737c:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1f6      	bne.n	8007372 <osMessageQueuePut+0xa>
 8007384:	4b18      	ldr	r3, [pc, #96]	; (80073e8 <osMessageQueuePut+0x80>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2b02      	cmp	r3, #2
 800738a:	d103      	bne.n	8007394 <osMessageQueuePut+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800738c:	f3ef 8311 	mrs	r3, BASEPRI
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1ee      	bne.n	8007372 <osMessageQueuePut+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007394:	2800      	cmp	r0, #0
 8007396:	d0ed      	beq.n	8007374 <osMessageQueuePut+0xc>
 8007398:	2900      	cmp	r1, #0
 800739a:	d0eb      	beq.n	8007374 <osMessageQueuePut+0xc>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800739c:	2300      	movs	r3, #0
 800739e:	4622      	mov	r2, r4
 80073a0:	f000 f9b8 	bl	8007714 <xQueueGenericSend>
 80073a4:	2801      	cmp	r0, #1
 80073a6:	d011      	beq.n	80073cc <osMessageQueuePut+0x64>
        if (timeout != 0U) {
 80073a8:	b9dc      	cbnz	r4, 80073e2 <osMessageQueuePut+0x7a>
          stat = osErrorResource;
 80073aa:	f06f 0002 	mvn.w	r0, #2
 80073ae:	e7e3      	b.n	8007378 <osMessageQueuePut+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80073b0:	2900      	cmp	r1, #0
 80073b2:	d0df      	beq.n	8007374 <osMessageQueuePut+0xc>
 80073b4:	2c00      	cmp	r4, #0
 80073b6:	d1dd      	bne.n	8007374 <osMessageQueuePut+0xc>
      yield = pdFALSE;
 80073b8:	aa02      	add	r2, sp, #8
 80073ba:	f842 4d04 	str.w	r4, [r2, #-4]!
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80073be:	4623      	mov	r3, r4
 80073c0:	f000 fa5a 	bl	8007878 <xQueueGenericSendFromISR>
 80073c4:	2801      	cmp	r0, #1
 80073c6:	d1f0      	bne.n	80073aa <osMessageQueuePut+0x42>
        portYIELD_FROM_ISR (yield);
 80073c8:	9b01      	ldr	r3, [sp, #4]
 80073ca:	b90b      	cbnz	r3, 80073d0 <osMessageQueuePut+0x68>
  stat = osOK;
 80073cc:	2000      	movs	r0, #0
 80073ce:	e7d3      	b.n	8007378 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 80073d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073d4:	4b05      	ldr	r3, [pc, #20]	; (80073ec <osMessageQueuePut+0x84>)
 80073d6:	601a      	str	r2, [r3, #0]
 80073d8:	f3bf 8f4f 	dsb	sy
 80073dc:	f3bf 8f6f 	isb	sy
 80073e0:	e7f4      	b.n	80073cc <osMessageQueuePut+0x64>
          stat = osErrorTimeout;
 80073e2:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 80073e6:	e7c7      	b.n	8007378 <osMessageQueuePut+0x10>
 80073e8:	200008ac 	.word	0x200008ac
 80073ec:	e000ed04 	.word	0xe000ed04

080073f0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80073f0:	b513      	push	{r0, r1, r4, lr}
 80073f2:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073f4:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80073f8:	b123      	cbz	r3, 8007404 <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80073fa:	b9e0      	cbnz	r0, 8007436 <osMessageQueueGet+0x46>
      stat = osErrorParameter;
 80073fc:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8007400:	b002      	add	sp, #8
 8007402:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007404:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8007408:	2b00      	cmp	r3, #0
 800740a:	d1f6      	bne.n	80073fa <osMessageQueueGet+0xa>
 800740c:	4b17      	ldr	r3, [pc, #92]	; (800746c <osMessageQueueGet+0x7c>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2b02      	cmp	r3, #2
 8007412:	d103      	bne.n	800741c <osMessageQueueGet+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007414:	f3ef 8311 	mrs	r3, BASEPRI
 8007418:	2b00      	cmp	r3, #0
 800741a:	d1ee      	bne.n	80073fa <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800741c:	2800      	cmp	r0, #0
 800741e:	d0ed      	beq.n	80073fc <osMessageQueueGet+0xc>
 8007420:	2900      	cmp	r1, #0
 8007422:	d0eb      	beq.n	80073fc <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007424:	4622      	mov	r2, r4
 8007426:	f000 fadd 	bl	80079e4 <xQueueReceive>
 800742a:	2801      	cmp	r0, #1
 800742c:	d010      	beq.n	8007450 <osMessageQueueGet+0x60>
        if (timeout != 0U) {
 800742e:	b9d4      	cbnz	r4, 8007466 <osMessageQueueGet+0x76>
          stat = osErrorResource;
 8007430:	f06f 0002 	mvn.w	r0, #2
 8007434:	e7e4      	b.n	8007400 <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007436:	2900      	cmp	r1, #0
 8007438:	d0e0      	beq.n	80073fc <osMessageQueueGet+0xc>
 800743a:	2c00      	cmp	r4, #0
 800743c:	d1de      	bne.n	80073fc <osMessageQueueGet+0xc>
      yield = pdFALSE;
 800743e:	aa02      	add	r2, sp, #8
 8007440:	f842 4d04 	str.w	r4, [r2, #-4]!
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007444:	f000 fc30 	bl	8007ca8 <xQueueReceiveFromISR>
 8007448:	2801      	cmp	r0, #1
 800744a:	d1f1      	bne.n	8007430 <osMessageQueueGet+0x40>
        portYIELD_FROM_ISR (yield);
 800744c:	9b01      	ldr	r3, [sp, #4]
 800744e:	b90b      	cbnz	r3, 8007454 <osMessageQueueGet+0x64>
  stat = osOK;
 8007450:	2000      	movs	r0, #0
 8007452:	e7d5      	b.n	8007400 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 8007454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007458:	4b05      	ldr	r3, [pc, #20]	; (8007470 <osMessageQueueGet+0x80>)
 800745a:	601a      	str	r2, [r3, #0]
 800745c:	f3bf 8f4f 	dsb	sy
 8007460:	f3bf 8f6f 	isb	sy
 8007464:	e7f4      	b.n	8007450 <osMessageQueueGet+0x60>
          stat = osErrorTimeout;
 8007466:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800746a:	e7c9      	b.n	8007400 <osMessageQueueGet+0x10>
 800746c:	200008ac 	.word	0x200008ac
 8007470:	e000ed04 	.word	0xe000ed04

08007474 <vApplicationStackOverflowHook>:
*/
#if (configCHECK_FOR_STACK_OVERFLOW > 0)
__WEAK void vApplicationStackOverflowHook (TaskHandle_t xTask, signed char *pcTaskName) {
  (void)xTask;
  (void)pcTaskName;
}
 8007474:	4770      	bx	lr

08007476 <vListInitialise>:
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007476:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800747a:	f100 0308 	add.w	r3, r0, #8
 800747e:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007480:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007484:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007486:	2300      	movs	r3, #0
 8007488:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800748a:	4770      	bx	lr

0800748c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800748c:	2300      	movs	r3, #0
 800748e:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007490:	4770      	bx	lr

08007492 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8007492:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007494:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8007496:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007498:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800749a:	689a      	ldr	r2, [r3, #8]
 800749c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800749e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80074a0:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80074a2:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80074a4:	3301      	adds	r3, #1
 80074a6:	6003      	str	r3, [r0, #0]
}
 80074a8:	4770      	bx	lr

080074aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80074aa:	680a      	ldr	r2, [r1, #0]
{
 80074ac:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80074ae:	1c53      	adds	r3, r2, #1
 80074b0:	d10a      	bne.n	80074c8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80074b2:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80074b4:	685a      	ldr	r2, [r3, #4]
 80074b6:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80074b8:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80074ba:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80074bc:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80074be:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80074c0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80074c2:	3301      	adds	r3, #1
 80074c4:	6003      	str	r3, [r0, #0]
}
 80074c6:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074c8:	f100 0308 	add.w	r3, r0, #8
 80074cc:	685c      	ldr	r4, [r3, #4]
 80074ce:	6825      	ldr	r5, [r4, #0]
 80074d0:	4295      	cmp	r5, r2
 80074d2:	d8ef      	bhi.n	80074b4 <vListInsert+0xa>
 80074d4:	4623      	mov	r3, r4
 80074d6:	e7f9      	b.n	80074cc <vListInsert+0x22>

080074d8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80074d8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80074da:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 80074de:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80074e0:	6882      	ldr	r2, [r0, #8]
 80074e2:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80074e4:	6859      	ldr	r1, [r3, #4]
 80074e6:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80074e8:	bf08      	it	eq
 80074ea:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80074ec:	2200      	movs	r2, #0
 80074ee:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	3a01      	subs	r2, #1
 80074f4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80074f6:	6818      	ldr	r0, [r3, #0]
}
 80074f8:	4770      	bx	lr

080074fa <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80074fa:	b510      	push	{r4, lr}
 80074fc:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80074fe:	f001 fb79 	bl	8008bf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007502:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007504:	f001 fb98 	bl	8008c38 <vPortExitCritical>

	return xReturn;
}
 8007508:	fab4 f084 	clz	r0, r4
 800750c:	0940      	lsrs	r0, r0, #5
 800750e:	bd10      	pop	{r4, pc}

08007510 <prvCopyDataToQueue>:
{
 8007510:	b570      	push	{r4, r5, r6, lr}
 8007512:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007514:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8007516:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007518:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800751a:	b942      	cbnz	r2, 800752e <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800751c:	6805      	ldr	r5, [r0, #0]
 800751e:	b99d      	cbnz	r5, 8007548 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007520:	6840      	ldr	r0, [r0, #4]
 8007522:	f001 f8b9 	bl	8008698 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8007526:	6065      	str	r5, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007528:	3601      	adds	r6, #1
 800752a:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800752c:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800752e:	b96d      	cbnz	r5, 800754c <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007530:	6880      	ldr	r0, [r0, #8]
 8007532:	f001 fd95 	bl	8009060 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007536:	68a3      	ldr	r3, [r4, #8]
 8007538:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800753a:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800753c:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800753e:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007540:	4293      	cmp	r3, r2
 8007542:	d301      	bcc.n	8007548 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007544:	6823      	ldr	r3, [r4, #0]
 8007546:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8007548:	2000      	movs	r0, #0
 800754a:	e7ed      	b.n	8007528 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800754c:	68c0      	ldr	r0, [r0, #12]
 800754e:	f001 fd87 	bl	8009060 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007552:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007554:	68e2      	ldr	r2, [r4, #12]
 8007556:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007558:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800755a:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800755c:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800755e:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007560:	bf3e      	ittt	cc
 8007562:	6862      	ldrcc	r2, [r4, #4]
 8007564:	189b      	addcc	r3, r3, r2
 8007566:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8007568:	2d02      	cmp	r5, #2
 800756a:	d1ed      	bne.n	8007548 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800756c:	b10e      	cbz	r6, 8007572 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800756e:	3e01      	subs	r6, #1
 8007570:	e7ea      	b.n	8007548 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8007572:	4630      	mov	r0, r6
 8007574:	e7d8      	b.n	8007528 <prvCopyDataToQueue+0x18>

08007576 <prvCopyDataFromQueue>:
{
 8007576:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007578:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800757a:	b410      	push	{r4}
 800757c:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800757e:	b162      	cbz	r2, 800759a <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007580:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007582:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007584:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007586:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007588:	60d9      	str	r1, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800758a:	bf28      	it	cs
 800758c:	6819      	ldrcs	r1, [r3, #0]
}
 800758e:	bc10      	pop	{r4}
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007590:	bf28      	it	cs
 8007592:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007594:	68d9      	ldr	r1, [r3, #12]
 8007596:	f001 bd63 	b.w	8009060 <memcpy>
}
 800759a:	bc10      	pop	{r4}
 800759c:	4770      	bx	lr

0800759e <prvUnlockQueue>:
{
 800759e:	b570      	push	{r4, r5, r6, lr}
 80075a0:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80075a2:	f001 fb27 	bl	8008bf4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80075a6:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075aa:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80075ae:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80075b0:	2d00      	cmp	r5, #0
 80075b2:	dc14      	bgt.n	80075de <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 80075b4:	23ff      	movs	r3, #255	; 0xff
 80075b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80075ba:	f001 fb3d 	bl	8008c38 <vPortExitCritical>
	taskENTER_CRITICAL();
 80075be:	f001 fb19 	bl	8008bf4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80075c2:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075c6:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 80075ca:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80075cc:	2d00      	cmp	r5, #0
 80075ce:	dc12      	bgt.n	80075f6 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 80075d0:	23ff      	movs	r3, #255	; 0xff
 80075d2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 80075d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80075da:	f001 bb2d 	b.w	8008c38 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d0e7      	beq.n	80075b4 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075e4:	4630      	mov	r0, r6
 80075e6:	f000 ff77 	bl	80084d8 <xTaskRemoveFromEventList>
 80075ea:	b108      	cbz	r0, 80075f0 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80075ec:	f000 fffc 	bl	80085e8 <vTaskMissedYield>
 80075f0:	3d01      	subs	r5, #1
 80075f2:	b26d      	sxtb	r5, r5
 80075f4:	e7dc      	b.n	80075b0 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075f6:	6923      	ldr	r3, [r4, #16]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d0e9      	beq.n	80075d0 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075fc:	4630      	mov	r0, r6
 80075fe:	f000 ff6b 	bl	80084d8 <xTaskRemoveFromEventList>
 8007602:	b108      	cbz	r0, 8007608 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8007604:	f000 fff0 	bl	80085e8 <vTaskMissedYield>
 8007608:	3d01      	subs	r5, #1
 800760a:	b26d      	sxtb	r5, r5
 800760c:	e7de      	b.n	80075cc <prvUnlockQueue+0x2e>
	...

08007610 <xQueueGenericReset>:
{
 8007610:	b538      	push	{r3, r4, r5, lr}
 8007612:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8007614:	4604      	mov	r4, r0
 8007616:	b940      	cbnz	r0, 800762a <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800761c:	f383 8811 	msr	BASEPRI, r3
 8007620:	f3bf 8f6f 	isb	sy
 8007624:	f3bf 8f4f 	dsb	sy
 8007628:	e7fe      	b.n	8007628 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800762a:	f001 fae3 	bl	8008bf4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800762e:	e9d4 300f 	ldrd	r3, r0, [r4, #60]	; 0x3c
 8007632:	4343      	muls	r3, r0
 8007634:	6822      	ldr	r2, [r4, #0]
 8007636:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007638:	1a1b      	subs	r3, r3, r0
 800763a:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800763c:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800763e:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007640:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8007642:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007644:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007646:	60a2      	str	r2, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 8007648:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800764c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8007650:	b995      	cbnz	r5, 8007678 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007652:	6923      	ldr	r3, [r4, #16]
 8007654:	b163      	cbz	r3, 8007670 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007656:	f104 0010 	add.w	r0, r4, #16
 800765a:	f000 ff3d 	bl	80084d8 <xTaskRemoveFromEventList>
 800765e:	b138      	cbz	r0, 8007670 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8007660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007664:	4b09      	ldr	r3, [pc, #36]	; (800768c <xQueueGenericReset+0x7c>)
 8007666:	601a      	str	r2, [r3, #0]
 8007668:	f3bf 8f4f 	dsb	sy
 800766c:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8007670:	f001 fae2 	bl	8008c38 <vPortExitCritical>
}
 8007674:	2001      	movs	r0, #1
 8007676:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007678:	f104 0010 	add.w	r0, r4, #16
 800767c:	f7ff fefb 	bl	8007476 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007680:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007684:	f7ff fef7 	bl	8007476 <vListInitialise>
 8007688:	e7f2      	b.n	8007670 <xQueueGenericReset+0x60>
 800768a:	bf00      	nop
 800768c:	e000ed04 	.word	0xe000ed04

08007690 <xQueueGenericCreate>:
	{
 8007690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007692:	460d      	mov	r5, r1
 8007694:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007696:	4606      	mov	r6, r0
 8007698:	b940      	cbnz	r0, 80076ac <xQueueGenericCreate+0x1c>
 800769a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769e:	f383 8811 	msr	BASEPRI, r3
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	f3bf 8f4f 	dsb	sy
 80076aa:	e7fe      	b.n	80076aa <xQueueGenericCreate+0x1a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076ac:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80076ae:	3050      	adds	r0, #80	; 0x50
 80076b0:	f001 fbd4 	bl	8008e5c <pvPortMalloc>
		if( pxNewQueue != NULL )
 80076b4:	4604      	mov	r4, r0
 80076b6:	b148      	cbz	r0, 80076cc <xQueueGenericCreate+0x3c>
	if( uxItemSize == ( UBaseType_t ) 0 )
 80076b8:	b955      	cbnz	r5, 80076d0 <xQueueGenericCreate+0x40>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80076ba:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 80076bc:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80076c0:	2101      	movs	r1, #1
 80076c2:	4620      	mov	r0, r4
 80076c4:	f7ff ffa4 	bl	8007610 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80076c8:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 80076cc:	4620      	mov	r0, r4
 80076ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80076d0:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80076d4:	6003      	str	r3, [r0, #0]
 80076d6:	e7f1      	b.n	80076bc <xQueueGenericCreate+0x2c>

080076d8 <xQueueCreateCountingSemaphore>:
	{
 80076d8:	b510      	push	{r4, lr}
 80076da:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 80076dc:	b940      	cbnz	r0, 80076f0 <xQueueCreateCountingSemaphore+0x18>
 80076de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e2:	f383 8811 	msr	BASEPRI, r3
 80076e6:	f3bf 8f6f 	isb	sy
 80076ea:	f3bf 8f4f 	dsb	sy
 80076ee:	e7fe      	b.n	80076ee <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 80076f0:	4288      	cmp	r0, r1
 80076f2:	d208      	bcs.n	8007706 <xQueueCreateCountingSemaphore+0x2e>
 80076f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f8:	f383 8811 	msr	BASEPRI, r3
 80076fc:	f3bf 8f6f 	isb	sy
 8007700:	f3bf 8f4f 	dsb	sy
 8007704:	e7fe      	b.n	8007704 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007706:	2202      	movs	r2, #2
 8007708:	2100      	movs	r1, #0
 800770a:	f7ff ffc1 	bl	8007690 <xQueueGenericCreate>
		if( xHandle != NULL )
 800770e:	b100      	cbz	r0, 8007712 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007710:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8007712:	bd10      	pop	{r4, pc}

08007714 <xQueueGenericSend>:
{
 8007714:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007718:	4688      	mov	r8, r1
 800771a:	9201      	str	r2, [sp, #4]
 800771c:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800771e:	4604      	mov	r4, r0
 8007720:	b940      	cbnz	r0, 8007734 <xQueueGenericSend+0x20>
 8007722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007726:	f383 8811 	msr	BASEPRI, r3
 800772a:	f3bf 8f6f 	isb	sy
 800772e:	f3bf 8f4f 	dsb	sy
 8007732:	e7fe      	b.n	8007732 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007734:	b951      	cbnz	r1, 800774c <xQueueGenericSend+0x38>
 8007736:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007738:	b143      	cbz	r3, 800774c <xQueueGenericSend+0x38>
 800773a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773e:	f383 8811 	msr	BASEPRI, r3
 8007742:	f3bf 8f6f 	isb	sy
 8007746:	f3bf 8f4f 	dsb	sy
 800774a:	e7fe      	b.n	800774a <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800774c:	2f02      	cmp	r7, #2
 800774e:	d10b      	bne.n	8007768 <xQueueGenericSend+0x54>
 8007750:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007752:	2b01      	cmp	r3, #1
 8007754:	d008      	beq.n	8007768 <xQueueGenericSend+0x54>
 8007756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775a:	f383 8811 	msr	BASEPRI, r3
 800775e:	f3bf 8f6f 	isb	sy
 8007762:	f3bf 8f4f 	dsb	sy
 8007766:	e7fe      	b.n	8007766 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007768:	f000 ff44 	bl	80085f4 <xTaskGetSchedulerState>
 800776c:	b950      	cbnz	r0, 8007784 <xQueueGenericSend+0x70>
 800776e:	9e01      	ldr	r6, [sp, #4]
 8007770:	b14e      	cbz	r6, 8007786 <xQueueGenericSend+0x72>
 8007772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007776:	f383 8811 	msr	BASEPRI, r3
 800777a:	f3bf 8f6f 	isb	sy
 800777e:	f3bf 8f4f 	dsb	sy
 8007782:	e7fe      	b.n	8007782 <xQueueGenericSend+0x6e>
 8007784:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8007786:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 800778a:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8007874 <xQueueGenericSend+0x160>
 800778e:	e037      	b.n	8007800 <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007790:	9d01      	ldr	r5, [sp, #4]
 8007792:	b91d      	cbnz	r5, 800779c <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 8007794:	f001 fa50 	bl	8008c38 <vPortExitCritical>
			return errQUEUE_FULL;
 8007798:	2000      	movs	r0, #0
 800779a:	e050      	b.n	800783e <xQueueGenericSend+0x12a>
				else if( xEntryTimeSet == pdFALSE )
 800779c:	b916      	cbnz	r6, 80077a4 <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800779e:	a802      	add	r0, sp, #8
 80077a0:	f000 feda 	bl	8008558 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80077a4:	f001 fa48 	bl	8008c38 <vPortExitCritical>
		vTaskSuspendAll();
 80077a8:	f000 fcc8 	bl	800813c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80077ac:	f001 fa22 	bl	8008bf4 <vPortEnterCritical>
 80077b0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80077b4:	2bff      	cmp	r3, #255	; 0xff
 80077b6:	bf08      	it	eq
 80077b8:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 80077bc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80077c0:	2bff      	cmp	r3, #255	; 0xff
 80077c2:	bf08      	it	eq
 80077c4:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 80077c8:	f001 fa36 	bl	8008c38 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80077cc:	a901      	add	r1, sp, #4
 80077ce:	a802      	add	r0, sp, #8
 80077d0:	f000 fece 	bl	8008570 <xTaskCheckForTimeOut>
 80077d4:	2800      	cmp	r0, #0
 80077d6:	d146      	bne.n	8007866 <xQueueGenericSend+0x152>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80077d8:	f001 fa0c 	bl	8008bf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80077dc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80077de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d12f      	bne.n	8007844 <xQueueGenericSend+0x130>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80077e4:	f001 fa28 	bl	8008c38 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80077e8:	9901      	ldr	r1, [sp, #4]
 80077ea:	f104 0010 	add.w	r0, r4, #16
 80077ee:	f000 fe39 	bl	8008464 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80077f2:	4620      	mov	r0, r4
 80077f4:	f7ff fed3 	bl	800759e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80077f8:	f000 fd46 	bl	8008288 <xTaskResumeAll>
 80077fc:	b350      	cbz	r0, 8007854 <xQueueGenericSend+0x140>
 80077fe:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8007800:	f001 f9f8 	bl	8008bf4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007804:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007806:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007808:	429a      	cmp	r2, r3
 800780a:	d301      	bcc.n	8007810 <xQueueGenericSend+0xfc>
 800780c:	2f02      	cmp	r7, #2
 800780e:	d1bf      	bne.n	8007790 <xQueueGenericSend+0x7c>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007810:	463a      	mov	r2, r7
 8007812:	4641      	mov	r1, r8
 8007814:	4620      	mov	r0, r4
 8007816:	f7ff fe7b 	bl	8007510 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800781a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800781c:	b11b      	cbz	r3, 8007826 <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800781e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007822:	f000 fe59 	bl	80084d8 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8007826:	b138      	cbz	r0, 8007838 <xQueueGenericSend+0x124>
						queueYIELD_IF_USING_PREEMPTION();
 8007828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800782c:	4b11      	ldr	r3, [pc, #68]	; (8007874 <xQueueGenericSend+0x160>)
 800782e:	601a      	str	r2, [r3, #0]
 8007830:	f3bf 8f4f 	dsb	sy
 8007834:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007838:	f001 f9fe 	bl	8008c38 <vPortExitCritical>
				return pdPASS;
 800783c:	2001      	movs	r0, #1
}
 800783e:	b004      	add	sp, #16
 8007840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 8007844:	f001 f9f8 	bl	8008c38 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8007848:	4620      	mov	r0, r4
 800784a:	f7ff fea8 	bl	800759e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800784e:	f000 fd1b 	bl	8008288 <xTaskResumeAll>
 8007852:	e7d4      	b.n	80077fe <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8007854:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007858:	f8ca 3000 	str.w	r3, [sl]
 800785c:	f3bf 8f4f 	dsb	sy
 8007860:	f3bf 8f6f 	isb	sy
 8007864:	e7cb      	b.n	80077fe <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 8007866:	4620      	mov	r0, r4
 8007868:	f7ff fe99 	bl	800759e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800786c:	f000 fd0c 	bl	8008288 <xTaskResumeAll>
 8007870:	e792      	b.n	8007798 <xQueueGenericSend+0x84>
 8007872:	bf00      	nop
 8007874:	e000ed04 	.word	0xe000ed04

08007878 <xQueueGenericSendFromISR>:
{
 8007878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800787c:	4689      	mov	r9, r1
 800787e:	4690      	mov	r8, r2
 8007880:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8007882:	4604      	mov	r4, r0
 8007884:	b940      	cbnz	r0, 8007898 <xQueueGenericSendFromISR+0x20>
 8007886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788a:	f383 8811 	msr	BASEPRI, r3
 800788e:	f3bf 8f6f 	isb	sy
 8007892:	f3bf 8f4f 	dsb	sy
 8007896:	e7fe      	b.n	8007896 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007898:	b951      	cbnz	r1, 80078b0 <xQueueGenericSendFromISR+0x38>
 800789a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800789c:	b143      	cbz	r3, 80078b0 <xQueueGenericSendFromISR+0x38>
 800789e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a2:	f383 8811 	msr	BASEPRI, r3
 80078a6:	f3bf 8f6f 	isb	sy
 80078aa:	f3bf 8f4f 	dsb	sy
 80078ae:	e7fe      	b.n	80078ae <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80078b0:	2f02      	cmp	r7, #2
 80078b2:	d10b      	bne.n	80078cc <xQueueGenericSendFromISR+0x54>
 80078b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d008      	beq.n	80078cc <xQueueGenericSendFromISR+0x54>
 80078ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078be:	f383 8811 	msr	BASEPRI, r3
 80078c2:	f3bf 8f6f 	isb	sy
 80078c6:	f3bf 8f4f 	dsb	sy
 80078ca:	e7fe      	b.n	80078ca <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80078cc:	f001 fa74 	bl	8008db8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80078d0:	f3ef 8611 	mrs	r6, BASEPRI
 80078d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d8:	f383 8811 	msr	BASEPRI, r3
 80078dc:	f3bf 8f6f 	isb	sy
 80078e0:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80078e4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80078e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d301      	bcc.n	80078f0 <xQueueGenericSendFromISR+0x78>
 80078ec:	2f02      	cmp	r7, #2
 80078ee:	d122      	bne.n	8007936 <xQueueGenericSendFromISR+0xbe>
			const int8_t cTxLock = pxQueue->cTxLock;
 80078f0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078f4:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 80078f6:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078f8:	4649      	mov	r1, r9
 80078fa:	4620      	mov	r0, r4
 80078fc:	f7ff fe08 	bl	8007510 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8007900:	1c6b      	adds	r3, r5, #1
 8007902:	d113      	bne.n	800792c <xQueueGenericSendFromISR+0xb4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007904:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007906:	b90b      	cbnz	r3, 800790c <xQueueGenericSendFromISR+0x94>
			xReturn = pdPASS;
 8007908:	2001      	movs	r0, #1
 800790a:	e00b      	b.n	8007924 <xQueueGenericSendFromISR+0xac>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800790c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007910:	f000 fde2 	bl	80084d8 <xTaskRemoveFromEventList>
 8007914:	2800      	cmp	r0, #0
 8007916:	d0f7      	beq.n	8007908 <xQueueGenericSendFromISR+0x90>
							if( pxHigherPriorityTaskWoken != NULL )
 8007918:	f1b8 0f00 	cmp.w	r8, #0
 800791c:	d0f4      	beq.n	8007908 <xQueueGenericSendFromISR+0x90>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800791e:	2001      	movs	r0, #1
 8007920:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007924:	f386 8811 	msr	BASEPRI, r6
}
 8007928:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800792c:	3501      	adds	r5, #1
 800792e:	b26d      	sxtb	r5, r5
 8007930:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8007934:	e7e8      	b.n	8007908 <xQueueGenericSendFromISR+0x90>
			xReturn = errQUEUE_FULL;
 8007936:	2000      	movs	r0, #0
 8007938:	e7f4      	b.n	8007924 <xQueueGenericSendFromISR+0xac>

0800793a <xQueueGiveFromISR>:
{
 800793a:	b570      	push	{r4, r5, r6, lr}
 800793c:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800793e:	4604      	mov	r4, r0
 8007940:	b940      	cbnz	r0, 8007954 <xQueueGiveFromISR+0x1a>
	__asm volatile
 8007942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007946:	f383 8811 	msr	BASEPRI, r3
 800794a:	f3bf 8f6f 	isb	sy
 800794e:	f3bf 8f4f 	dsb	sy
 8007952:	e7fe      	b.n	8007952 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 8007954:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007956:	b143      	cbz	r3, 800796a <xQueueGiveFromISR+0x30>
 8007958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795c:	f383 8811 	msr	BASEPRI, r3
 8007960:	f3bf 8f6f 	isb	sy
 8007964:	f3bf 8f4f 	dsb	sy
 8007968:	e7fe      	b.n	8007968 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800796a:	6803      	ldr	r3, [r0, #0]
 800796c:	b953      	cbnz	r3, 8007984 <xQueueGiveFromISR+0x4a>
 800796e:	6843      	ldr	r3, [r0, #4]
 8007970:	b143      	cbz	r3, 8007984 <xQueueGiveFromISR+0x4a>
 8007972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007976:	f383 8811 	msr	BASEPRI, r3
 800797a:	f3bf 8f6f 	isb	sy
 800797e:	f3bf 8f4f 	dsb	sy
 8007982:	e7fe      	b.n	8007982 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007984:	f001 fa18 	bl	8008db8 <vPortValidateInterruptPriority>
	__asm volatile
 8007988:	f3ef 8611 	mrs	r6, BASEPRI
 800798c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007990:	f383 8811 	msr	BASEPRI, r3
 8007994:	f3bf 8f6f 	isb	sy
 8007998:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800799c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800799e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d91c      	bls.n	80079de <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 80079a4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80079a8:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 80079aa:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80079ac:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 80079ae:	1c5a      	adds	r2, r3, #1
 80079b0:	d110      	bne.n	80079d4 <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079b4:	b90b      	cbnz	r3, 80079ba <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 80079b6:	2001      	movs	r0, #1
 80079b8:	e009      	b.n	80079ce <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079ba:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80079be:	f000 fd8b 	bl	80084d8 <xTaskRemoveFromEventList>
 80079c2:	2800      	cmp	r0, #0
 80079c4:	d0f7      	beq.n	80079b6 <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 80079c6:	2d00      	cmp	r5, #0
 80079c8:	d0f5      	beq.n	80079b6 <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80079ca:	2001      	movs	r0, #1
 80079cc:	6028      	str	r0, [r5, #0]
	__asm volatile
 80079ce:	f386 8811 	msr	BASEPRI, r6
}
 80079d2:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80079d4:	3301      	adds	r3, #1
 80079d6:	b25b      	sxtb	r3, r3
 80079d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80079dc:	e7eb      	b.n	80079b6 <xQueueGiveFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 80079de:	2000      	movs	r0, #0
 80079e0:	e7f5      	b.n	80079ce <xQueueGiveFromISR+0x94>
	...

080079e4 <xQueueReceive>:
{
 80079e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80079e8:	b085      	sub	sp, #20
 80079ea:	460f      	mov	r7, r1
 80079ec:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80079ee:	4604      	mov	r4, r0
 80079f0:	b940      	cbnz	r0, 8007a04 <xQueueReceive+0x20>
	__asm volatile
 80079f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f6:	f383 8811 	msr	BASEPRI, r3
 80079fa:	f3bf 8f6f 	isb	sy
 80079fe:	f3bf 8f4f 	dsb	sy
 8007a02:	e7fe      	b.n	8007a02 <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a04:	b951      	cbnz	r1, 8007a1c <xQueueReceive+0x38>
 8007a06:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007a08:	b143      	cbz	r3, 8007a1c <xQueueReceive+0x38>
 8007a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0e:	f383 8811 	msr	BASEPRI, r3
 8007a12:	f3bf 8f6f 	isb	sy
 8007a16:	f3bf 8f4f 	dsb	sy
 8007a1a:	e7fe      	b.n	8007a1a <xQueueReceive+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a1c:	f000 fdea 	bl	80085f4 <xTaskGetSchedulerState>
 8007a20:	b950      	cbnz	r0, 8007a38 <xQueueReceive+0x54>
 8007a22:	9e01      	ldr	r6, [sp, #4]
 8007a24:	b14e      	cbz	r6, 8007a3a <xQueueReceive+0x56>
 8007a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2a:	f383 8811 	msr	BASEPRI, r3
 8007a2e:	f3bf 8f6f 	isb	sy
 8007a32:	f3bf 8f4f 	dsb	sy
 8007a36:	e7fe      	b.n	8007a36 <xQueueReceive+0x52>
 8007a38:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8007a3a:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8007a3e:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8007b20 <xQueueReceive+0x13c>
 8007a42:	e03b      	b.n	8007abc <xQueueReceive+0xd8>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a44:	9d01      	ldr	r5, [sp, #4]
 8007a46:	b91d      	cbnz	r5, 8007a50 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 8007a48:	f001 f8f6 	bl	8008c38 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8007a4c:	2000      	movs	r0, #0
 8007a4e:	e052      	b.n	8007af6 <xQueueReceive+0x112>
				else if( xEntryTimeSet == pdFALSE )
 8007a50:	b916      	cbnz	r6, 8007a58 <xQueueReceive+0x74>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a52:	a802      	add	r0, sp, #8
 8007a54:	f000 fd80 	bl	8008558 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007a58:	f001 f8ee 	bl	8008c38 <vPortExitCritical>
		vTaskSuspendAll();
 8007a5c:	f000 fb6e 	bl	800813c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a60:	f001 f8c8 	bl	8008bf4 <vPortEnterCritical>
 8007a64:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007a68:	2bff      	cmp	r3, #255	; 0xff
 8007a6a:	bf08      	it	eq
 8007a6c:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8007a70:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007a74:	2bff      	cmp	r3, #255	; 0xff
 8007a76:	bf08      	it	eq
 8007a78:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8007a7c:	f001 f8dc 	bl	8008c38 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a80:	a901      	add	r1, sp, #4
 8007a82:	a802      	add	r0, sp, #8
 8007a84:	f000 fd74 	bl	8008570 <xTaskCheckForTimeOut>
 8007a88:	2800      	cmp	r0, #0
 8007a8a:	d13d      	bne.n	8007b08 <xQueueReceive+0x124>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a8c:	4620      	mov	r0, r4
 8007a8e:	f7ff fd34 	bl	80074fa <prvIsQueueEmpty>
 8007a92:	b398      	cbz	r0, 8007afc <xQueueReceive+0x118>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007a94:	9901      	ldr	r1, [sp, #4]
 8007a96:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007a9a:	f000 fce3 	bl	8008464 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007a9e:	4620      	mov	r0, r4
 8007aa0:	f7ff fd7d 	bl	800759e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007aa4:	f000 fbf0 	bl	8008288 <xTaskResumeAll>
 8007aa8:	b938      	cbnz	r0, 8007aba <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 8007aaa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007aae:	f8c9 3000 	str.w	r3, [r9]
 8007ab2:	f3bf 8f4f 	dsb	sy
 8007ab6:	f3bf 8f6f 	isb	sy
 8007aba:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8007abc:	f001 f89a 	bl	8008bf4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ac0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ac2:	2d00      	cmp	r5, #0
 8007ac4:	d0be      	beq.n	8007a44 <xQueueReceive+0x60>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007ac6:	4639      	mov	r1, r7
 8007ac8:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007aca:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007acc:	f7ff fd53 	bl	8007576 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007ad0:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ad2:	6923      	ldr	r3, [r4, #16]
 8007ad4:	b163      	cbz	r3, 8007af0 <xQueueReceive+0x10c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ad6:	f104 0010 	add.w	r0, r4, #16
 8007ada:	f000 fcfd 	bl	80084d8 <xTaskRemoveFromEventList>
 8007ade:	b138      	cbz	r0, 8007af0 <xQueueReceive+0x10c>
						queueYIELD_IF_USING_PREEMPTION();
 8007ae0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ae4:	4b0e      	ldr	r3, [pc, #56]	; (8007b20 <xQueueReceive+0x13c>)
 8007ae6:	601a      	str	r2, [r3, #0]
 8007ae8:	f3bf 8f4f 	dsb	sy
 8007aec:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007af0:	f001 f8a2 	bl	8008c38 <vPortExitCritical>
				return pdPASS;
 8007af4:	2001      	movs	r0, #1
}
 8007af6:	b005      	add	sp, #20
 8007af8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 8007afc:	4620      	mov	r0, r4
 8007afe:	f7ff fd4e 	bl	800759e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b02:	f000 fbc1 	bl	8008288 <xTaskResumeAll>
 8007b06:	e7d8      	b.n	8007aba <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 8007b08:	4620      	mov	r0, r4
 8007b0a:	f7ff fd48 	bl	800759e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b0e:	f000 fbbb 	bl	8008288 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b12:	4620      	mov	r0, r4
 8007b14:	f7ff fcf1 	bl	80074fa <prvIsQueueEmpty>
 8007b18:	2800      	cmp	r0, #0
 8007b1a:	d0ce      	beq.n	8007aba <xQueueReceive+0xd6>
 8007b1c:	e796      	b.n	8007a4c <xQueueReceive+0x68>
 8007b1e:	bf00      	nop
 8007b20:	e000ed04 	.word	0xe000ed04

08007b24 <xQueueSemaphoreTake>:
{
 8007b24:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 8007b28:	4604      	mov	r4, r0
{
 8007b2a:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8007b2c:	b940      	cbnz	r0, 8007b40 <xQueueSemaphoreTake+0x1c>
 8007b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b32:	f383 8811 	msr	BASEPRI, r3
 8007b36:	f3bf 8f6f 	isb	sy
 8007b3a:	f3bf 8f4f 	dsb	sy
 8007b3e:	e7fe      	b.n	8007b3e <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8007b40:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8007b42:	b145      	cbz	r5, 8007b56 <xQueueSemaphoreTake+0x32>
 8007b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b48:	f383 8811 	msr	BASEPRI, r3
 8007b4c:	f3bf 8f6f 	isb	sy
 8007b50:	f3bf 8f4f 	dsb	sy
 8007b54:	e7fe      	b.n	8007b54 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b56:	f000 fd4d 	bl	80085f4 <xTaskGetSchedulerState>
 8007b5a:	b950      	cbnz	r0, 8007b72 <xQueueSemaphoreTake+0x4e>
 8007b5c:	9d01      	ldr	r5, [sp, #4]
 8007b5e:	b145      	cbz	r5, 8007b72 <xQueueSemaphoreTake+0x4e>
 8007b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b64:	f383 8811 	msr	BASEPRI, r3
 8007b68:	f3bf 8f6f 	isb	sy
 8007b6c:	f3bf 8f4f 	dsb	sy
 8007b70:	e7fe      	b.n	8007b70 <xQueueSemaphoreTake+0x4c>
 8007b72:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8007b74:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8007b76:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8007ca4 <xQueueSemaphoreTake+0x180>
 8007b7a:	e04f      	b.n	8007c1c <xQueueSemaphoreTake+0xf8>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b7c:	9b01      	ldr	r3, [sp, #4]
 8007b7e:	b963      	cbnz	r3, 8007b9a <xQueueSemaphoreTake+0x76>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007b80:	b145      	cbz	r5, 8007b94 <xQueueSemaphoreTake+0x70>
 8007b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b86:	f383 8811 	msr	BASEPRI, r3
 8007b8a:	f3bf 8f6f 	isb	sy
 8007b8e:	f3bf 8f4f 	dsb	sy
 8007b92:	e7fe      	b.n	8007b92 <xQueueSemaphoreTake+0x6e>
					taskEXIT_CRITICAL();
 8007b94:	f001 f850 	bl	8008c38 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8007b98:	e05e      	b.n	8007c58 <xQueueSemaphoreTake+0x134>
				else if( xEntryTimeSet == pdFALSE )
 8007b9a:	b916      	cbnz	r6, 8007ba2 <xQueueSemaphoreTake+0x7e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b9c:	a802      	add	r0, sp, #8
 8007b9e:	f000 fcdb 	bl	8008558 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007ba2:	f001 f849 	bl	8008c38 <vPortExitCritical>
		vTaskSuspendAll();
 8007ba6:	f000 fac9 	bl	800813c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007baa:	f001 f823 	bl	8008bf4 <vPortEnterCritical>
 8007bae:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007bb2:	2bff      	cmp	r3, #255	; 0xff
 8007bb4:	bf08      	it	eq
 8007bb6:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8007bba:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007bbe:	2bff      	cmp	r3, #255	; 0xff
 8007bc0:	bf08      	it	eq
 8007bc2:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8007bc6:	f001 f837 	bl	8008c38 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007bca:	a901      	add	r1, sp, #4
 8007bcc:	a802      	add	r0, sp, #8
 8007bce:	f000 fccf 	bl	8008570 <xTaskCheckForTimeOut>
 8007bd2:	2800      	cmp	r0, #0
 8007bd4:	d14a      	bne.n	8007c6c <xQueueSemaphoreTake+0x148>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	f7ff fc8f 	bl	80074fa <prvIsQueueEmpty>
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	d03f      	beq.n	8007c60 <xQueueSemaphoreTake+0x13c>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007be0:	6823      	ldr	r3, [r4, #0]
 8007be2:	b93b      	cbnz	r3, 8007bf4 <xQueueSemaphoreTake+0xd0>
						taskENTER_CRITICAL();
 8007be4:	f001 f806 	bl	8008bf4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8007be8:	6860      	ldr	r0, [r4, #4]
 8007bea:	f000 fd13 	bl	8008614 <xTaskPriorityInherit>
 8007bee:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8007bf0:	f001 f822 	bl	8008c38 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007bf4:	9901      	ldr	r1, [sp, #4]
 8007bf6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007bfa:	f000 fc33 	bl	8008464 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007bfe:	4620      	mov	r0, r4
 8007c00:	f7ff fccd 	bl	800759e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007c04:	f000 fb40 	bl	8008288 <xTaskResumeAll>
 8007c08:	b938      	cbnz	r0, 8007c1a <xQueueSemaphoreTake+0xf6>
					portYIELD_WITHIN_API();
 8007c0a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007c0e:	f8c8 3000 	str.w	r3, [r8]
 8007c12:	f3bf 8f4f 	dsb	sy
 8007c16:	f3bf 8f6f 	isb	sy
 8007c1a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8007c1c:	f000 ffea 	bl	8008bf4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007c20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d0aa      	beq.n	8007b7c <xQueueSemaphoreTake+0x58>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007c26:	3b01      	subs	r3, #1
 8007c28:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c2a:	6823      	ldr	r3, [r4, #0]
 8007c2c:	b913      	cbnz	r3, 8007c34 <xQueueSemaphoreTake+0x110>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8007c2e:	f000 fdc3 	bl	80087b8 <pvTaskIncrementMutexHeldCount>
 8007c32:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c34:	6923      	ldr	r3, [r4, #16]
 8007c36:	b163      	cbz	r3, 8007c52 <xQueueSemaphoreTake+0x12e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c38:	f104 0010 	add.w	r0, r4, #16
 8007c3c:	f000 fc4c 	bl	80084d8 <xTaskRemoveFromEventList>
 8007c40:	b138      	cbz	r0, 8007c52 <xQueueSemaphoreTake+0x12e>
						queueYIELD_IF_USING_PREEMPTION();
 8007c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c46:	4b17      	ldr	r3, [pc, #92]	; (8007ca4 <xQueueSemaphoreTake+0x180>)
 8007c48:	601a      	str	r2, [r3, #0]
 8007c4a:	f3bf 8f4f 	dsb	sy
 8007c4e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007c52:	f000 fff1 	bl	8008c38 <vPortExitCritical>
				return pdPASS;
 8007c56:	2501      	movs	r5, #1
}
 8007c58:	4628      	mov	r0, r5
 8007c5a:	b004      	add	sp, #16
 8007c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 8007c60:	4620      	mov	r0, r4
 8007c62:	f7ff fc9c 	bl	800759e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c66:	f000 fb0f 	bl	8008288 <xTaskResumeAll>
 8007c6a:	e7d6      	b.n	8007c1a <xQueueSemaphoreTake+0xf6>
			prvUnlockQueue( pxQueue );
 8007c6c:	4620      	mov	r0, r4
 8007c6e:	f7ff fc96 	bl	800759e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c72:	f000 fb09 	bl	8008288 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c76:	4620      	mov	r0, r4
 8007c78:	f7ff fc3f 	bl	80074fa <prvIsQueueEmpty>
 8007c7c:	2800      	cmp	r0, #0
 8007c7e:	d0cc      	beq.n	8007c1a <xQueueSemaphoreTake+0xf6>
					if( xInheritanceOccurred != pdFALSE )
 8007c80:	2d00      	cmp	r5, #0
 8007c82:	d0e9      	beq.n	8007c58 <xQueueSemaphoreTake+0x134>
						taskENTER_CRITICAL();
 8007c84:	f000 ffb6 	bl	8008bf4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8007c88:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007c8a:	b119      	cbz	r1, 8007c94 <xQueueSemaphoreTake+0x170>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007c8c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007c8e:	6819      	ldr	r1, [r3, #0]
 8007c90:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8007c94:	6860      	ldr	r0, [r4, #4]
 8007c96:	f000 fd41 	bl	800871c <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 8007c9a:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 8007c9c:	f000 ffcc 	bl	8008c38 <vPortExitCritical>
 8007ca0:	e7da      	b.n	8007c58 <xQueueSemaphoreTake+0x134>
 8007ca2:	bf00      	nop
 8007ca4:	e000ed04 	.word	0xe000ed04

08007ca8 <xQueueReceiveFromISR>:
{
 8007ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cac:	4689      	mov	r9, r1
 8007cae:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8007cb0:	4605      	mov	r5, r0
 8007cb2:	b940      	cbnz	r0, 8007cc6 <xQueueReceiveFromISR+0x1e>
 8007cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb8:	f383 8811 	msr	BASEPRI, r3
 8007cbc:	f3bf 8f6f 	isb	sy
 8007cc0:	f3bf 8f4f 	dsb	sy
 8007cc4:	e7fe      	b.n	8007cc4 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007cc6:	b951      	cbnz	r1, 8007cde <xQueueReceiveFromISR+0x36>
 8007cc8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007cca:	b143      	cbz	r3, 8007cde <xQueueReceiveFromISR+0x36>
 8007ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd0:	f383 8811 	msr	BASEPRI, r3
 8007cd4:	f3bf 8f6f 	isb	sy
 8007cd8:	f3bf 8f4f 	dsb	sy
 8007cdc:	e7fe      	b.n	8007cdc <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007cde:	f001 f86b 	bl	8008db8 <vPortValidateInterruptPriority>
	__asm volatile
 8007ce2:	f3ef 8711 	mrs	r7, BASEPRI
 8007ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cea:	f383 8811 	msr	BASEPRI, r3
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cf6:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007cf8:	b31c      	cbz	r4, 8007d42 <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 8007cfa:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007cfe:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 8007d00:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007d02:	4628      	mov	r0, r5
 8007d04:	f7ff fc37 	bl	8007576 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007d08:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 8007d0a:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007d0c:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8007d0e:	d113      	bne.n	8007d38 <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d10:	692b      	ldr	r3, [r5, #16]
 8007d12:	b90b      	cbnz	r3, 8007d18 <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 8007d14:	2001      	movs	r0, #1
 8007d16:	e00b      	b.n	8007d30 <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d18:	f105 0010 	add.w	r0, r5, #16
 8007d1c:	f000 fbdc 	bl	80084d8 <xTaskRemoveFromEventList>
 8007d20:	2800      	cmp	r0, #0
 8007d22:	d0f7      	beq.n	8007d14 <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 8007d24:	f1b8 0f00 	cmp.w	r8, #0
 8007d28:	d0f4      	beq.n	8007d14 <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007d2a:	2001      	movs	r0, #1
 8007d2c:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8007d30:	f387 8811 	msr	BASEPRI, r7
}
 8007d34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007d38:	3601      	adds	r6, #1
 8007d3a:	b276      	sxtb	r6, r6
 8007d3c:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8007d40:	e7e8      	b.n	8007d14 <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 8007d42:	4620      	mov	r0, r4
 8007d44:	e7f4      	b.n	8007d30 <xQueueReceiveFromISR+0x88>
	...

08007d48 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d48:	2300      	movs	r3, #0
	{
 8007d4a:	b530      	push	{r4, r5, lr}
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007d4c:	4a06      	ldr	r2, [pc, #24]	; (8007d68 <vQueueAddToRegistry+0x20>)
 8007d4e:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8007d52:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8007d56:	b91d      	cbnz	r5, 8007d60 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007d58:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007d5c:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007d5e:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d60:	3301      	adds	r3, #1
 8007d62:	2b08      	cmp	r3, #8
 8007d64:	d1f3      	bne.n	8007d4e <vQueueAddToRegistry+0x6>
 8007d66:	e7fa      	b.n	8007d5e <vQueueAddToRegistry+0x16>
 8007d68:	20003e1c 	.word	0x20003e1c

08007d6c <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d6c:	2300      	movs	r3, #0
	{
 8007d6e:	b510      	push	{r4, lr}
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007d70:	4a07      	ldr	r2, [pc, #28]	; (8007d90 <vQueueUnregisterQueue+0x24>)
 8007d72:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8007d76:	684c      	ldr	r4, [r1, #4]
 8007d78:	4284      	cmp	r4, r0
 8007d7a:	d104      	bne.n	8007d86 <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007d7c:	2000      	movs	r0, #0
 8007d7e:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007d82:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007d84:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d86:	3301      	adds	r3, #1
 8007d88:	2b08      	cmp	r3, #8
 8007d8a:	d1f2      	bne.n	8007d72 <vQueueUnregisterQueue+0x6>
 8007d8c:	e7fa      	b.n	8007d84 <vQueueUnregisterQueue+0x18>
 8007d8e:	bf00      	nop
 8007d90:	20003e1c 	.word	0x20003e1c

08007d94 <vQueueDelete>:
{
 8007d94:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8007d96:	4604      	mov	r4, r0
 8007d98:	b940      	cbnz	r0, 8007dac <vQueueDelete+0x18>
	__asm volatile
 8007d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9e:	f383 8811 	msr	BASEPRI, r3
 8007da2:	f3bf 8f6f 	isb	sy
 8007da6:	f3bf 8f4f 	dsb	sy
 8007daa:	e7fe      	b.n	8007daa <vQueueDelete+0x16>
		vQueueUnregisterQueue( pxQueue );
 8007dac:	f7ff ffde 	bl	8007d6c <vQueueUnregisterQueue>
		vPortFree( pxQueue );
 8007db0:	4620      	mov	r0, r4
}
 8007db2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		vPortFree( pxQueue );
 8007db6:	f001 b8dd 	b.w	8008f74 <vPortFree>

08007dba <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007dba:	b570      	push	{r4, r5, r6, lr}
 8007dbc:	4604      	mov	r4, r0
 8007dbe:	460d      	mov	r5, r1
 8007dc0:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007dc2:	f000 ff17 	bl	8008bf4 <vPortEnterCritical>
 8007dc6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007dca:	2bff      	cmp	r3, #255	; 0xff
 8007dcc:	bf04      	itt	eq
 8007dce:	2300      	moveq	r3, #0
 8007dd0:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8007dd4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007dd8:	2bff      	cmp	r3, #255	; 0xff
 8007dda:	bf04      	itt	eq
 8007ddc:	2300      	moveq	r3, #0
 8007dde:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8007de2:	f000 ff29 	bl	8008c38 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007de6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007de8:	b92b      	cbnz	r3, 8007df6 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007dea:	4632      	mov	r2, r6
 8007dec:	4629      	mov	r1, r5
 8007dee:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007df2:	f000 fb51 	bl	8008498 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007df6:	4620      	mov	r0, r4
	}
 8007df8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8007dfc:	f7ff bbcf 	b.w	800759e <prvUnlockQueue>

08007e00 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e00:	4a06      	ldr	r2, [pc, #24]	; (8007e1c <prvResetNextTaskUnblockTime+0x1c>)
 8007e02:	6813      	ldr	r3, [r2, #0]
 8007e04:	6819      	ldr	r1, [r3, #0]
 8007e06:	4b06      	ldr	r3, [pc, #24]	; (8007e20 <prvResetNextTaskUnblockTime+0x20>)
 8007e08:	b919      	cbnz	r1, 8007e12 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007e0a:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007e0e:	601a      	str	r2, [r3, #0]
	}
}
 8007e10:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007e12:	6812      	ldr	r2, [r2, #0]
 8007e14:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007e16:	68d2      	ldr	r2, [r2, #12]
 8007e18:	6852      	ldr	r2, [r2, #4]
 8007e1a:	e7f8      	b.n	8007e0e <prvResetNextTaskUnblockTime+0xe>
 8007e1c:	200008b4 	.word	0x200008b4
 8007e20:	20000d64 	.word	0x20000d64

08007e24 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e26:	4605      	mov	r5, r0
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007e28:	4b15      	ldr	r3, [pc, #84]	; (8007e80 <prvAddCurrentTaskToDelayedList+0x5c>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e2a:	4e16      	ldr	r6, [pc, #88]	; (8007e84 <prvAddCurrentTaskToDelayedList+0x60>)
const TickType_t xConstTickCount = xTickCount;
 8007e2c:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e2e:	6830      	ldr	r0, [r6, #0]
{
 8007e30:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e32:	3004      	adds	r0, #4
 8007e34:	f7ff fb50 	bl	80074d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007e38:	1c6b      	adds	r3, r5, #1
 8007e3a:	4633      	mov	r3, r6
 8007e3c:	d107      	bne.n	8007e4e <prvAddCurrentTaskToDelayedList+0x2a>
 8007e3e:	b137      	cbz	r7, 8007e4e <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e40:	6831      	ldr	r1, [r6, #0]
 8007e42:	4811      	ldr	r0, [pc, #68]	; (8007e88 <prvAddCurrentTaskToDelayedList+0x64>)
 8007e44:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007e46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e4a:	f7ff bb22 	b.w	8007492 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	1964      	adds	r4, r4, r5
 8007e52:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8007e54:	d307      	bcc.n	8007e66 <prvAddCurrentTaskToDelayedList+0x42>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e56:	4a0d      	ldr	r2, [pc, #52]	; (8007e8c <prvAddCurrentTaskToDelayedList+0x68>)
 8007e58:	6810      	ldr	r0, [r2, #0]
 8007e5a:	6819      	ldr	r1, [r3, #0]
}
 8007e5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e60:	3104      	adds	r1, #4
 8007e62:	f7ff bb22 	b.w	80074aa <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e66:	4a0a      	ldr	r2, [pc, #40]	; (8007e90 <prvAddCurrentTaskToDelayedList+0x6c>)
 8007e68:	6810      	ldr	r0, [r2, #0]
 8007e6a:	6819      	ldr	r1, [r3, #0]
 8007e6c:	3104      	adds	r1, #4
 8007e6e:	f7ff fb1c 	bl	80074aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007e72:	4b08      	ldr	r3, [pc, #32]	; (8007e94 <prvAddCurrentTaskToDelayedList+0x70>)
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8007e78:	bf88      	it	hi
 8007e7a:	601c      	strhi	r4, [r3, #0]
}
 8007e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	20000dac 	.word	0x20000dac
 8007e84:	200008b0 	.word	0x200008b0
 8007e88:	20000d84 	.word	0x20000d84
 8007e8c:	200008b8 	.word	0x200008b8
 8007e90:	200008b4 	.word	0x200008b4
 8007e94:	20000d64 	.word	0x20000d64

08007e98 <prvIdleTask>:
{
 8007e98:	b580      	push	{r7, lr}
				taskYIELD();
 8007e9a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8007f00 <prvIdleTask+0x68>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007e9e:	4f14      	ldr	r7, [pc, #80]	; (8007ef0 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ea0:	4c14      	ldr	r4, [pc, #80]	; (8007ef4 <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 8007ea2:	4e15      	ldr	r6, [pc, #84]	; (8007ef8 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ea4:	6823      	ldr	r3, [r4, #0]
 8007ea6:	b963      	cbnz	r3, 8007ec2 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007ea8:	4b14      	ldr	r3, [pc, #80]	; (8007efc <prvIdleTask+0x64>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d9f8      	bls.n	8007ea2 <prvIdleTask+0xa>
				taskYIELD();
 8007eb0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007eb4:	f8c8 3000 	str.w	r3, [r8]
 8007eb8:	f3bf 8f4f 	dsb	sy
 8007ebc:	f3bf 8f6f 	isb	sy
 8007ec0:	e7ee      	b.n	8007ea0 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8007ec2:	f000 fe97 	bl	8008bf4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007eca:	1d28      	adds	r0, r5, #4
 8007ecc:	f7ff fb04 	bl	80074d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007ed0:	6833      	ldr	r3, [r6, #0]
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007ed6:	6823      	ldr	r3, [r4, #0]
 8007ed8:	3b01      	subs	r3, #1
 8007eda:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8007edc:	f000 feac 	bl	8008c38 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8007ee0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8007ee2:	f001 f847 	bl	8008f74 <vPortFree>
			vPortFree( pxTCB );
 8007ee6:	4628      	mov	r0, r5
 8007ee8:	f001 f844 	bl	8008f74 <vPortFree>
 8007eec:	e7da      	b.n	8007ea4 <prvIdleTask+0xc>
 8007eee:	bf00      	nop
 8007ef0:	20000d98 	.word	0x20000d98
 8007ef4:	20000d24 	.word	0x20000d24
 8007ef8:	20000d20 	.word	0x20000d20
 8007efc:	200008bc 	.word	0x200008bc
 8007f00:	e000ed04 	.word	0xe000ed04

08007f04 <xTaskCreate>:
	{
 8007f04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f08:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8007f0c:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f0e:	4650      	mov	r0, sl
	{
 8007f10:	460d      	mov	r5, r1
 8007f12:	4699      	mov	r9, r3
 8007f14:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f16:	f000 ffa1 	bl	8008e5c <pvPortMalloc>
			if( pxStack != NULL )
 8007f1a:	4607      	mov	r7, r0
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	f000 809f 	beq.w	8008060 <xTaskCreate+0x15c>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007f22:	2064      	movs	r0, #100	; 0x64
 8007f24:	f000 ff9a 	bl	8008e5c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8007f28:	4604      	mov	r4, r0
 8007f2a:	2800      	cmp	r0, #0
 8007f2c:	f000 8095 	beq.w	800805a <xTaskCreate+0x156>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007f30:	4652      	mov	r2, sl
					pxNewTCB->pxStack = pxStack;
 8007f32:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007f34:	21a5      	movs	r1, #165	; 0xa5
 8007f36:	4638      	mov	r0, r7
 8007f38:	f001 f89d 	bl	8009076 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007f3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007f3e:	f1aa 0a04 	sub.w	sl, sl, #4
 8007f42:	449a      	add	sl, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007f44:	f02a 0a07 	bic.w	sl, sl, #7
 8007f48:	1e6b      	subs	r3, r5, #1
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8007f4a:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
 8007f4e:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8007f52:	350f      	adds	r5, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007f54:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8007f58:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8007f5c:	7819      	ldrb	r1, [r3, #0]
 8007f5e:	b109      	cbz	r1, 8007f64 <xTaskCreate+0x60>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f60:	42ab      	cmp	r3, r5
 8007f62:	d1f7      	bne.n	8007f54 <xTaskCreate+0x50>
 8007f64:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007f66:	f04f 0b00 	mov.w	fp, #0
 8007f6a:	2d37      	cmp	r5, #55	; 0x37
 8007f6c:	bf28      	it	cs
 8007f6e:	2537      	movcs	r5, #55	; 0x37
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007f70:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8007f72:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 8007f74:	e9c4 5b14 	strd	r5, fp, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007f78:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007f7a:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007f7e:	f7ff fa85 	bl	800748c <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f82:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007f86:	f104 0018 	add.w	r0, r4, #24
 8007f8a:	f7ff fa7f 	bl	800748c <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8007f8e:	f8c4 b05c 	str.w	fp, [r4, #92]	; 0x5c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007f92:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f94:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007f96:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulRunTimeCounter = 0UL;
 8007f98:	f8c4 b058 	str.w	fp, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007f9c:	f884 b060 	strb.w	fp, [r4, #96]	; 0x60
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007fa0:	464a      	mov	r2, r9
 8007fa2:	4641      	mov	r1, r8
 8007fa4:	4650      	mov	r0, sl
 8007fa6:	f000 fe01 	bl	8008bac <pxPortInitialiseStack>
 8007faa:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8007fac:	b106      	cbz	r6, 8007fb0 <xTaskCreate+0xac>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007fae:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8007fb0:	f000 fe20 	bl	8008bf4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8007fb4:	4b32      	ldr	r3, [pc, #200]	; (8008080 <xTaskCreate+0x17c>)
		if( pxCurrentTCB == NULL )
 8007fb6:	4d33      	ldr	r5, [pc, #204]	; (8008084 <xTaskCreate+0x180>)
		uxCurrentNumberOfTasks++;
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 80080b0 <xTaskCreate+0x1ac>
 8007fbe:	3201      	adds	r2, #1
 8007fc0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8007fc2:	682e      	ldr	r6, [r5, #0]
 8007fc4:	2e00      	cmp	r6, #0
 8007fc6:	d14f      	bne.n	8008068 <xTaskCreate+0x164>
			pxCurrentTCB = pxNewTCB;
 8007fc8:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d11f      	bne.n	8008010 <xTaskCreate+0x10c>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007fd0:	f04f 0914 	mov.w	r9, #20
 8007fd4:	fb09 8006 	mla	r0, r9, r6, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007fd8:	3601      	adds	r6, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007fda:	f7ff fa4c 	bl	8007476 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007fde:	2e38      	cmp	r6, #56	; 0x38
 8007fe0:	d1f8      	bne.n	8007fd4 <xTaskCreate+0xd0>
	vListInitialise( &xDelayedTaskList1 );
 8007fe2:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80080b4 <xTaskCreate+0x1b0>
	vListInitialise( &xDelayedTaskList2 );
 8007fe6:	4e28      	ldr	r6, [pc, #160]	; (8008088 <xTaskCreate+0x184>)
	vListInitialise( &xDelayedTaskList1 );
 8007fe8:	4648      	mov	r0, r9
 8007fea:	f7ff fa44 	bl	8007476 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007fee:	4630      	mov	r0, r6
 8007ff0:	f7ff fa41 	bl	8007476 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ff4:	4825      	ldr	r0, [pc, #148]	; (800808c <xTaskCreate+0x188>)
 8007ff6:	f7ff fa3e 	bl	8007476 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8007ffa:	4825      	ldr	r0, [pc, #148]	; (8008090 <xTaskCreate+0x18c>)
 8007ffc:	f7ff fa3b 	bl	8007476 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8008000:	4824      	ldr	r0, [pc, #144]	; (8008094 <xTaskCreate+0x190>)
 8008002:	f7ff fa38 	bl	8007476 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8008006:	4b24      	ldr	r3, [pc, #144]	; (8008098 <xTaskCreate+0x194>)
 8008008:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800800c:	4b23      	ldr	r3, [pc, #140]	; (800809c <xTaskCreate+0x198>)
 800800e:	601e      	str	r6, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8008010:	2014      	movs	r0, #20
		uxTaskNumber++;
 8008012:	4a23      	ldr	r2, [pc, #140]	; (80080a0 <xTaskCreate+0x19c>)
 8008014:	6813      	ldr	r3, [r2, #0]
 8008016:	3301      	adds	r3, #1
 8008018:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800801a:	4a22      	ldr	r2, [pc, #136]	; (80080a4 <xTaskCreate+0x1a0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800801c:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
 800801e:	6811      	ldr	r1, [r2, #0]
 8008020:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008022:	428b      	cmp	r3, r1
 8008024:	fb00 8003 	mla	r0, r0, r3, r8
 8008028:	4639      	mov	r1, r7
 800802a:	bf88      	it	hi
 800802c:	6013      	strhi	r3, [r2, #0]
 800802e:	f7ff fa30 	bl	8007492 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8008032:	f000 fe01 	bl	8008c38 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8008036:	4b1c      	ldr	r3, [pc, #112]	; (80080a8 <xTaskCreate+0x1a4>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	b163      	cbz	r3, 8008056 <xTaskCreate+0x152>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800803c:	682b      	ldr	r3, [r5, #0]
 800803e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008040:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008042:	429a      	cmp	r2, r3
 8008044:	d207      	bcs.n	8008056 <xTaskCreate+0x152>
			taskYIELD_IF_USING_PREEMPTION();
 8008046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800804a:	4b18      	ldr	r3, [pc, #96]	; (80080ac <xTaskCreate+0x1a8>)
 800804c:	601a      	str	r2, [r3, #0]
 800804e:	f3bf 8f4f 	dsb	sy
 8008052:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
 8008056:	2001      	movs	r0, #1
		return xReturn;
 8008058:	e004      	b.n	8008064 <xTaskCreate+0x160>
					vPortFree( pxStack );
 800805a:	4638      	mov	r0, r7
 800805c:	f000 ff8a 	bl	8008f74 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008060:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8008064:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if( xSchedulerRunning == pdFALSE )
 8008068:	4b0f      	ldr	r3, [pc, #60]	; (80080a8 <xTaskCreate+0x1a4>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d1cf      	bne.n	8008010 <xTaskCreate+0x10c>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008070:	682b      	ldr	r3, [r5, #0]
 8008072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008074:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008076:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8008078:	bf98      	it	ls
 800807a:	602c      	strls	r4, [r5, #0]
 800807c:	e7c8      	b.n	8008010 <xTaskCreate+0x10c>
 800807e:	bf00      	nop
 8008080:	20000d20 	.word	0x20000d20
 8008084:	200008b0 	.word	0x200008b0
 8008088:	20000d4c 	.word	0x20000d4c
 800808c:	20000d6c 	.word	0x20000d6c
 8008090:	20000d98 	.word	0x20000d98
 8008094:	20000d84 	.word	0x20000d84
 8008098:	200008b4 	.word	0x200008b4
 800809c:	200008b8 	.word	0x200008b8
 80080a0:	20000d30 	.word	0x20000d30
 80080a4:	20000d34 	.word	0x20000d34
 80080a8:	20000d80 	.word	0x20000d80
 80080ac:	e000ed04 	.word	0xe000ed04
 80080b0:	200008bc 	.word	0x200008bc
 80080b4:	20000d38 	.word	0x20000d38

080080b8 <vTaskStartScheduler>:
{
 80080b8:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 80080ba:	2400      	movs	r4, #0
 80080bc:	4b19      	ldr	r3, [pc, #100]	; (8008124 <vTaskStartScheduler+0x6c>)
 80080be:	9400      	str	r4, [sp, #0]
 80080c0:	9301      	str	r3, [sp, #4]
 80080c2:	2240      	movs	r2, #64	; 0x40
 80080c4:	4623      	mov	r3, r4
 80080c6:	4918      	ldr	r1, [pc, #96]	; (8008128 <vTaskStartScheduler+0x70>)
 80080c8:	4818      	ldr	r0, [pc, #96]	; (800812c <vTaskStartScheduler+0x74>)
 80080ca:	f7ff ff1b 	bl	8007f04 <xTaskCreate>
		if( xReturn == pdPASS )
 80080ce:	2801      	cmp	r0, #1
 80080d0:	d11a      	bne.n	8008108 <vTaskStartScheduler+0x50>
			xReturn = xTimerCreateTimerTask();
 80080d2:	f000 fbc7 	bl	8008864 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80080d6:	2801      	cmp	r0, #1
 80080d8:	d116      	bne.n	8008108 <vTaskStartScheduler+0x50>
 80080da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080de:	f383 8811 	msr	BASEPRI, r3
 80080e2:	f3bf 8f6f 	isb	sy
 80080e6:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80080ea:	f04f 32ff 	mov.w	r2, #4294967295
 80080ee:	4b10      	ldr	r3, [pc, #64]	; (8008130 <vTaskStartScheduler+0x78>)
 80080f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80080f2:	4b10      	ldr	r3, [pc, #64]	; (8008134 <vTaskStartScheduler+0x7c>)
 80080f4:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80080f6:	4b10      	ldr	r3, [pc, #64]	; (8008138 <vTaskStartScheduler+0x80>)
 80080f8:	601c      	str	r4, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80080fa:	f7f9 f941 	bl	8001380 <configureTimerForRunTimeStats>
}
 80080fe:	b002      	add	sp, #8
 8008100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8008104:	f000 bdfe 	b.w	8008d04 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008108:	3001      	adds	r0, #1
 800810a:	d108      	bne.n	800811e <vTaskStartScheduler+0x66>
 800810c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008110:	f383 8811 	msr	BASEPRI, r3
 8008114:	f3bf 8f6f 	isb	sy
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	e7fe      	b.n	800811c <vTaskStartScheduler+0x64>
}
 800811e:	b002      	add	sp, #8
 8008120:	bd10      	pop	{r4, pc}
 8008122:	bf00      	nop
 8008124:	20000d60 	.word	0x20000d60
 8008128:	0800be8e 	.word	0x0800be8e
 800812c:	08007e99 	.word	0x08007e99
 8008130:	20000d64 	.word	0x20000d64
 8008134:	20000d80 	.word	0x20000d80
 8008138:	20000dac 	.word	0x20000dac

0800813c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800813c:	4a02      	ldr	r2, [pc, #8]	; (8008148 <vTaskSuspendAll+0xc>)
 800813e:	6813      	ldr	r3, [r2, #0]
 8008140:	3301      	adds	r3, #1
 8008142:	6013      	str	r3, [r2, #0]
}
 8008144:	4770      	bx	lr
 8008146:	bf00      	nop
 8008148:	20000d2c 	.word	0x20000d2c

0800814c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800814c:	4b01      	ldr	r3, [pc, #4]	; (8008154 <xTaskGetTickCount+0x8>)
 800814e:	6818      	ldr	r0, [r3, #0]
}
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop
 8008154:	20000dac 	.word	0x20000dac

08008158 <xTaskGetTickCountFromISR>:
{
 8008158:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800815a:	f000 fe2d 	bl	8008db8 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 800815e:	4b01      	ldr	r3, [pc, #4]	; (8008164 <xTaskGetTickCountFromISR+0xc>)
 8008160:	6818      	ldr	r0, [r3, #0]
}
 8008162:	bd08      	pop	{r3, pc}
 8008164:	20000dac 	.word	0x20000dac

08008168 <xTaskIncrementTick>:
{
 8008168:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800816c:	4b3b      	ldr	r3, [pc, #236]	; (800825c <xTaskIncrementTick+0xf4>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d16b      	bne.n	800824c <xTaskIncrementTick+0xe4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008174:	4b3a      	ldr	r3, [pc, #232]	; (8008260 <xTaskIncrementTick+0xf8>)
 8008176:	681c      	ldr	r4, [r3, #0]
 8008178:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800817a:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800817c:	b9bc      	cbnz	r4, 80081ae <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800817e:	4b39      	ldr	r3, [pc, #228]	; (8008264 <xTaskIncrementTick+0xfc>)
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	6812      	ldr	r2, [r2, #0]
 8008184:	b142      	cbz	r2, 8008198 <xTaskIncrementTick+0x30>
 8008186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818a:	f383 8811 	msr	BASEPRI, r3
 800818e:	f3bf 8f6f 	isb	sy
 8008192:	f3bf 8f4f 	dsb	sy
 8008196:	e7fe      	b.n	8008196 <xTaskIncrementTick+0x2e>
 8008198:	4a33      	ldr	r2, [pc, #204]	; (8008268 <xTaskIncrementTick+0x100>)
 800819a:	6819      	ldr	r1, [r3, #0]
 800819c:	6810      	ldr	r0, [r2, #0]
 800819e:	6018      	str	r0, [r3, #0]
 80081a0:	6011      	str	r1, [r2, #0]
 80081a2:	4a32      	ldr	r2, [pc, #200]	; (800826c <xTaskIncrementTick+0x104>)
 80081a4:	6813      	ldr	r3, [r2, #0]
 80081a6:	3301      	adds	r3, #1
 80081a8:	6013      	str	r3, [r2, #0]
 80081aa:	f7ff fe29 	bl	8007e00 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80081ae:	4d30      	ldr	r5, [pc, #192]	; (8008270 <xTaskIncrementTick+0x108>)
BaseType_t xSwitchRequired = pdFALSE;
 80081b0:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 80081b4:	682b      	ldr	r3, [r5, #0]
 80081b6:	4f2f      	ldr	r7, [pc, #188]	; (8008274 <xTaskIncrementTick+0x10c>)
 80081b8:	42a3      	cmp	r3, r4
 80081ba:	d911      	bls.n	80081e0 <xTaskIncrementTick+0x78>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80081bc:	683a      	ldr	r2, [r7, #0]
 80081be:	4b2e      	ldr	r3, [pc, #184]	; (8008278 <xTaskIncrementTick+0x110>)
 80081c0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80081c2:	2214      	movs	r2, #20
 80081c4:	434a      	muls	r2, r1
 80081c6:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 80081c8:	2a02      	cmp	r2, #2
 80081ca:	bf28      	it	cs
 80081cc:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80081d0:	4a2a      	ldr	r2, [pc, #168]	; (800827c <xTaskIncrementTick+0x114>)
 80081d2:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80081d4:	2a00      	cmp	r2, #0
}
 80081d6:	bf0c      	ite	eq
 80081d8:	4658      	moveq	r0, fp
 80081da:	2001      	movne	r0, #1
 80081dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081e0:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8008264 <xTaskIncrementTick+0xfc>
					prvAddTaskToReadyList( pxTCB );
 80081e4:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8008284 <xTaskIncrementTick+0x11c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081e8:	f8d9 2000 	ldr.w	r2, [r9]
 80081ec:	6812      	ldr	r2, [r2, #0]
 80081ee:	b91a      	cbnz	r2, 80081f8 <xTaskIncrementTick+0x90>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081f0:	f04f 32ff 	mov.w	r2, #4294967295
 80081f4:	602a      	str	r2, [r5, #0]
					break;
 80081f6:	e7e1      	b.n	80081bc <xTaskIncrementTick+0x54>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80081f8:	f8d9 2000 	ldr.w	r2, [r9]
 80081fc:	68d2      	ldr	r2, [r2, #12]
 80081fe:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008200:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8008202:	428c      	cmp	r4, r1
 8008204:	d201      	bcs.n	800820a <xTaskIncrementTick+0xa2>
						xNextTaskUnblockTime = xItemValue;
 8008206:	6029      	str	r1, [r5, #0]
						break;
 8008208:	e7d8      	b.n	80081bc <xTaskIncrementTick+0x54>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800820a:	f106 0804 	add.w	r8, r6, #4
 800820e:	4640      	mov	r0, r8
 8008210:	f7ff f962 	bl	80074d8 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008214:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8008216:	b119      	cbz	r1, 8008220 <xTaskIncrementTick+0xb8>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008218:	f106 0018 	add.w	r0, r6, #24
 800821c:	f7ff f95c 	bl	80074d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008220:	2214      	movs	r2, #20
 8008222:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8008224:	f8da 1000 	ldr.w	r1, [sl]
 8008228:	4b13      	ldr	r3, [pc, #76]	; (8008278 <xTaskIncrementTick+0x110>)
 800822a:	4288      	cmp	r0, r1
 800822c:	bf88      	it	hi
 800822e:	f8ca 0000 	strhi.w	r0, [sl]
 8008232:	4641      	mov	r1, r8
 8008234:	fb02 3000 	mla	r0, r2, r0, r3
 8008238:	f7ff f92b 	bl	8007492 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800823c:	6838      	ldr	r0, [r7, #0]
 800823e:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8008240:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8008242:	4291      	cmp	r1, r2
 8008244:	bf28      	it	cs
 8008246:	f04f 0b01 	movcs.w	fp, #1
 800824a:	e7cd      	b.n	80081e8 <xTaskIncrementTick+0x80>
		++uxPendedTicks;
 800824c:	4a0c      	ldr	r2, [pc, #48]	; (8008280 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 800824e:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 8008252:	6813      	ldr	r3, [r2, #0]
 8008254:	3301      	adds	r3, #1
 8008256:	6013      	str	r3, [r2, #0]
 8008258:	e7ba      	b.n	80081d0 <xTaskIncrementTick+0x68>
 800825a:	bf00      	nop
 800825c:	20000d2c 	.word	0x20000d2c
 8008260:	20000dac 	.word	0x20000dac
 8008264:	200008b4 	.word	0x200008b4
 8008268:	200008b8 	.word	0x200008b8
 800826c:	20000d68 	.word	0x20000d68
 8008270:	20000d64 	.word	0x20000d64
 8008274:	200008b0 	.word	0x200008b0
 8008278:	200008bc 	.word	0x200008bc
 800827c:	20000db0 	.word	0x20000db0
 8008280:	20000d28 	.word	0x20000d28
 8008284:	20000d34 	.word	0x20000d34

08008288 <xTaskResumeAll>:
{
 8008288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 800828c:	4c2f      	ldr	r4, [pc, #188]	; (800834c <xTaskResumeAll+0xc4>)
 800828e:	6823      	ldr	r3, [r4, #0]
 8008290:	b943      	cbnz	r3, 80082a4 <xTaskResumeAll+0x1c>
 8008292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008296:	f383 8811 	msr	BASEPRI, r3
 800829a:	f3bf 8f6f 	isb	sy
 800829e:	f3bf 8f4f 	dsb	sy
 80082a2:	e7fe      	b.n	80082a2 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80082a4:	f000 fca6 	bl	8008bf4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80082a8:	6823      	ldr	r3, [r4, #0]
 80082aa:	3b01      	subs	r3, #1
 80082ac:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082ae:	6824      	ldr	r4, [r4, #0]
 80082b0:	b12c      	cbz	r4, 80082be <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80082b2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80082b4:	f000 fcc0 	bl	8008c38 <vPortExitCritical>
}
 80082b8:	4620      	mov	r0, r4
 80082ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80082be:	4b24      	ldr	r3, [pc, #144]	; (8008350 <xTaskResumeAll+0xc8>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d0f5      	beq.n	80082b2 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082c6:	4d23      	ldr	r5, [pc, #140]	; (8008354 <xTaskResumeAll+0xcc>)
					prvAddTaskToReadyList( pxTCB );
 80082c8:	4e23      	ldr	r6, [pc, #140]	; (8008358 <xTaskResumeAll+0xd0>)
 80082ca:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800836c <xTaskResumeAll+0xe4>
 80082ce:	e01d      	b.n	800830c <xTaskResumeAll+0x84>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80082d0:	68eb      	ldr	r3, [r5, #12]
 80082d2:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082d4:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082d6:	f104 0018 	add.w	r0, r4, #24
 80082da:	f7ff f8fd 	bl	80074d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082de:	4638      	mov	r0, r7
 80082e0:	f7ff f8fa 	bl	80074d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80082e4:	2014      	movs	r0, #20
 80082e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80082e8:	6832      	ldr	r2, [r6, #0]
 80082ea:	fb00 8003 	mla	r0, r0, r3, r8
 80082ee:	4293      	cmp	r3, r2
 80082f0:	4639      	mov	r1, r7
 80082f2:	bf88      	it	hi
 80082f4:	6033      	strhi	r3, [r6, #0]
 80082f6:	f7ff f8cc 	bl	8007492 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80082fa:	4b18      	ldr	r3, [pc, #96]	; (800835c <xTaskResumeAll+0xd4>)
 80082fc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008302:	429a      	cmp	r2, r3
 8008304:	d302      	bcc.n	800830c <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 8008306:	2201      	movs	r2, #1
 8008308:	4b15      	ldr	r3, [pc, #84]	; (8008360 <xTaskResumeAll+0xd8>)
 800830a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800830c:	682b      	ldr	r3, [r5, #0]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1de      	bne.n	80082d0 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8008312:	b10c      	cbz	r4, 8008318 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 8008314:	f7ff fd74 	bl	8007e00 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008318:	4d12      	ldr	r5, [pc, #72]	; (8008364 <xTaskResumeAll+0xdc>)
 800831a:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800831c:	b144      	cbz	r4, 8008330 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 800831e:	2701      	movs	r7, #1
 8008320:	4e0f      	ldr	r6, [pc, #60]	; (8008360 <xTaskResumeAll+0xd8>)
							if( xTaskIncrementTick() != pdFALSE )
 8008322:	f7ff ff21 	bl	8008168 <xTaskIncrementTick>
 8008326:	b100      	cbz	r0, 800832a <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 8008328:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800832a:	3c01      	subs	r4, #1
 800832c:	d1f9      	bne.n	8008322 <xTaskResumeAll+0x9a>
						uxPendedTicks = 0;
 800832e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8008330:	4b0b      	ldr	r3, [pc, #44]	; (8008360 <xTaskResumeAll+0xd8>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d0bc      	beq.n	80082b2 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8008338:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800833c:	4b0a      	ldr	r3, [pc, #40]	; (8008368 <xTaskResumeAll+0xe0>)
 800833e:	601a      	str	r2, [r3, #0]
 8008340:	f3bf 8f4f 	dsb	sy
 8008344:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8008348:	2401      	movs	r4, #1
 800834a:	e7b3      	b.n	80082b4 <xTaskResumeAll+0x2c>
 800834c:	20000d2c 	.word	0x20000d2c
 8008350:	20000d20 	.word	0x20000d20
 8008354:	20000d6c 	.word	0x20000d6c
 8008358:	20000d34 	.word	0x20000d34
 800835c:	200008b0 	.word	0x200008b0
 8008360:	20000db0 	.word	0x20000db0
 8008364:	20000d28 	.word	0x20000d28
 8008368:	e000ed04 	.word	0xe000ed04
 800836c:	200008bc 	.word	0x200008bc

08008370 <vTaskDelay>:
	{
 8008370:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008372:	b940      	cbnz	r0, 8008386 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8008374:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008378:	4b0d      	ldr	r3, [pc, #52]	; (80083b0 <vTaskDelay+0x40>)
 800837a:	601a      	str	r2, [r3, #0]
 800837c:	f3bf 8f4f 	dsb	sy
 8008380:	f3bf 8f6f 	isb	sy
	}
 8008384:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8008386:	4b0b      	ldr	r3, [pc, #44]	; (80083b4 <vTaskDelay+0x44>)
 8008388:	6819      	ldr	r1, [r3, #0]
 800838a:	b141      	cbz	r1, 800839e <vTaskDelay+0x2e>
 800838c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008390:	f383 8811 	msr	BASEPRI, r3
 8008394:	f3bf 8f6f 	isb	sy
 8008398:	f3bf 8f4f 	dsb	sy
 800839c:	e7fe      	b.n	800839c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800839e:	f7ff fecd 	bl	800813c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80083a2:	f7ff fd3f 	bl	8007e24 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80083a6:	f7ff ff6f 	bl	8008288 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80083aa:	2800      	cmp	r0, #0
 80083ac:	d0e2      	beq.n	8008374 <vTaskDelay+0x4>
 80083ae:	e7e9      	b.n	8008384 <vTaskDelay+0x14>
 80083b0:	e000ed04 	.word	0xe000ed04
 80083b4:	20000d2c 	.word	0x20000d2c

080083b8 <vTaskSwitchContext>:
{
 80083b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80083ba:	4b24      	ldr	r3, [pc, #144]	; (800844c <vTaskSwitchContext+0x94>)
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	4b24      	ldr	r3, [pc, #144]	; (8008450 <vTaskSwitchContext+0x98>)
 80083c0:	b112      	cbz	r2, 80083c8 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80083c2:	2201      	movs	r2, #1
 80083c4:	601a      	str	r2, [r3, #0]
}
 80083c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		xYieldPending = pdFALSE;
 80083c8:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80083ca:	f7f8 ffda 	bl	8001382 <getRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 80083ce:	4a21      	ldr	r2, [pc, #132]	; (8008454 <vTaskSwitchContext+0x9c>)
 80083d0:	4c21      	ldr	r4, [pc, #132]	; (8008458 <vTaskSwitchContext+0xa0>)
 80083d2:	6815      	ldr	r5, [r2, #0]
 80083d4:	42a8      	cmp	r0, r5
 80083d6:	d904      	bls.n	80083e2 <vTaskSwitchContext+0x2a>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80083d8:	6821      	ldr	r1, [r4, #0]
 80083da:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 80083dc:	1b5b      	subs	r3, r3, r5
 80083de:	4403      	add	r3, r0
 80083e0:	658b      	str	r3, [r1, #88]	; 0x58
				ulTaskSwitchedInTime = ulTotalRunTime;
 80083e2:	6010      	str	r0, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80083e4:	6822      	ldr	r2, [r4, #0]
 80083e6:	6823      	ldr	r3, [r4, #0]
 80083e8:	6812      	ldr	r2, [r2, #0]
 80083ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d804      	bhi.n	80083fa <vTaskSwitchContext+0x42>
 80083f0:	6820      	ldr	r0, [r4, #0]
 80083f2:	6821      	ldr	r1, [r4, #0]
 80083f4:	3134      	adds	r1, #52	; 0x34
 80083f6:	f7ff f83d 	bl	8007474 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80083fa:	4a18      	ldr	r2, [pc, #96]	; (800845c <vTaskSwitchContext+0xa4>)
 80083fc:	f04f 0c14 	mov.w	ip, #20
 8008400:	4617      	mov	r7, r2
 8008402:	4e17      	ldr	r6, [pc, #92]	; (8008460 <vTaskSwitchContext+0xa8>)
 8008404:	6833      	ldr	r3, [r6, #0]
 8008406:	fb0c f103 	mul.w	r1, ip, r3
 800840a:	5855      	ldr	r5, [r2, r1]
 800840c:	1850      	adds	r0, r2, r1
 800840e:	b18d      	cbz	r5, 8008434 <vTaskSwitchContext+0x7c>
 8008410:	6845      	ldr	r5, [r0, #4]
 8008412:	3108      	adds	r1, #8
 8008414:	686d      	ldr	r5, [r5, #4]
 8008416:	440a      	add	r2, r1
 8008418:	4295      	cmp	r5, r2
 800841a:	bf08      	it	eq
 800841c:	686a      	ldreq	r2, [r5, #4]
 800841e:	6045      	str	r5, [r0, #4]
 8008420:	bf08      	it	eq
 8008422:	6042      	streq	r2, [r0, #4]
 8008424:	2214      	movs	r2, #20
 8008426:	fb02 7203 	mla	r2, r2, r3, r7
 800842a:	6852      	ldr	r2, [r2, #4]
 800842c:	68d2      	ldr	r2, [r2, #12]
 800842e:	6022      	str	r2, [r4, #0]
 8008430:	6033      	str	r3, [r6, #0]
}
 8008432:	e7c8      	b.n	80083c6 <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008434:	b943      	cbnz	r3, 8008448 <vTaskSwitchContext+0x90>
 8008436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800843a:	f383 8811 	msr	BASEPRI, r3
 800843e:	f3bf 8f6f 	isb	sy
 8008442:	f3bf 8f4f 	dsb	sy
 8008446:	e7fe      	b.n	8008446 <vTaskSwitchContext+0x8e>
 8008448:	3b01      	subs	r3, #1
 800844a:	e7dc      	b.n	8008406 <vTaskSwitchContext+0x4e>
 800844c:	20000d2c 	.word	0x20000d2c
 8008450:	20000db0 	.word	0x20000db0
 8008454:	20000d1c 	.word	0x20000d1c
 8008458:	200008b0 	.word	0x200008b0
 800845c:	200008bc 	.word	0x200008bc
 8008460:	20000d34 	.word	0x20000d34

08008464 <vTaskPlaceOnEventList>:
{
 8008464:	b510      	push	{r4, lr}
 8008466:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8008468:	b940      	cbnz	r0, 800847c <vTaskPlaceOnEventList+0x18>
 800846a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846e:	f383 8811 	msr	BASEPRI, r3
 8008472:	f3bf 8f6f 	isb	sy
 8008476:	f3bf 8f4f 	dsb	sy
 800847a:	e7fe      	b.n	800847a <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800847c:	4b05      	ldr	r3, [pc, #20]	; (8008494 <vTaskPlaceOnEventList+0x30>)
 800847e:	6819      	ldr	r1, [r3, #0]
 8008480:	3118      	adds	r1, #24
 8008482:	f7ff f812 	bl	80074aa <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008486:	4620      	mov	r0, r4
}
 8008488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800848c:	2101      	movs	r1, #1
 800848e:	f7ff bcc9 	b.w	8007e24 <prvAddCurrentTaskToDelayedList>
 8008492:	bf00      	nop
 8008494:	200008b0 	.word	0x200008b0

08008498 <vTaskPlaceOnEventListRestricted>:
	{
 8008498:	b538      	push	{r3, r4, r5, lr}
 800849a:	460d      	mov	r5, r1
 800849c:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800849e:	b940      	cbnz	r0, 80084b2 <vTaskPlaceOnEventListRestricted+0x1a>
 80084a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a4:	f383 8811 	msr	BASEPRI, r3
 80084a8:	f3bf 8f6f 	isb	sy
 80084ac:	f3bf 8f4f 	dsb	sy
 80084b0:	e7fe      	b.n	80084b0 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80084b2:	4b08      	ldr	r3, [pc, #32]	; (80084d4 <vTaskPlaceOnEventListRestricted+0x3c>)
 80084b4:	6819      	ldr	r1, [r3, #0]
 80084b6:	3118      	adds	r1, #24
 80084b8:	f7fe ffeb 	bl	8007492 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 80084bc:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80084be:	4621      	mov	r1, r4
 80084c0:	bf08      	it	eq
 80084c2:	4628      	moveq	r0, r5
	}
 80084c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80084c8:	bf18      	it	ne
 80084ca:	f04f 30ff 	movne.w	r0, #4294967295
 80084ce:	f7ff bca9 	b.w	8007e24 <prvAddCurrentTaskToDelayedList>
 80084d2:	bf00      	nop
 80084d4:	200008b0 	.word	0x200008b0

080084d8 <xTaskRemoveFromEventList>:
{
 80084d8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80084da:	68c3      	ldr	r3, [r0, #12]
 80084dc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80084de:	b944      	cbnz	r4, 80084f2 <xTaskRemoveFromEventList+0x1a>
 80084e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e4:	f383 8811 	msr	BASEPRI, r3
 80084e8:	f3bf 8f6f 	isb	sy
 80084ec:	f3bf 8f4f 	dsb	sy
 80084f0:	e7fe      	b.n	80084f0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80084f2:	f104 0518 	add.w	r5, r4, #24
 80084f6:	4628      	mov	r0, r5
 80084f8:	f7fe ffee 	bl	80074d8 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084fc:	4b10      	ldr	r3, [pc, #64]	; (8008540 <xTaskRemoveFromEventList+0x68>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	b9db      	cbnz	r3, 800853a <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008502:	1d25      	adds	r5, r4, #4
 8008504:	4628      	mov	r0, r5
 8008506:	f7fe ffe7 	bl	80074d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800850a:	4a0e      	ldr	r2, [pc, #56]	; (8008544 <xTaskRemoveFromEventList+0x6c>)
 800850c:	2014      	movs	r0, #20
 800850e:	6811      	ldr	r1, [r2, #0]
 8008510:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008512:	428b      	cmp	r3, r1
 8008514:	4629      	mov	r1, r5
 8008516:	bf88      	it	hi
 8008518:	6013      	strhi	r3, [r2, #0]
 800851a:	4a0b      	ldr	r2, [pc, #44]	; (8008548 <xTaskRemoveFromEventList+0x70>)
 800851c:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008520:	f7fe ffb7 	bl	8007492 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008524:	4b09      	ldr	r3, [pc, #36]	; (800854c <xTaskRemoveFromEventList+0x74>)
 8008526:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800852c:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 800852e:	bf85      	ittet	hi
 8008530:	2001      	movhi	r0, #1
 8008532:	4b07      	ldrhi	r3, [pc, #28]	; (8008550 <xTaskRemoveFromEventList+0x78>)
		xReturn = pdFALSE;
 8008534:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 8008536:	6018      	strhi	r0, [r3, #0]
}
 8008538:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800853a:	4629      	mov	r1, r5
 800853c:	4805      	ldr	r0, [pc, #20]	; (8008554 <xTaskRemoveFromEventList+0x7c>)
 800853e:	e7ef      	b.n	8008520 <xTaskRemoveFromEventList+0x48>
 8008540:	20000d2c 	.word	0x20000d2c
 8008544:	20000d34 	.word	0x20000d34
 8008548:	200008bc 	.word	0x200008bc
 800854c:	200008b0 	.word	0x200008b0
 8008550:	20000db0 	.word	0x20000db0
 8008554:	20000d6c 	.word	0x20000d6c

08008558 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008558:	4b03      	ldr	r3, [pc, #12]	; (8008568 <vTaskInternalSetTimeOutState+0x10>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800855e:	4b03      	ldr	r3, [pc, #12]	; (800856c <vTaskInternalSetTimeOutState+0x14>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	6043      	str	r3, [r0, #4]
}
 8008564:	4770      	bx	lr
 8008566:	bf00      	nop
 8008568:	20000d68 	.word	0x20000d68
 800856c:	20000dac 	.word	0x20000dac

08008570 <xTaskCheckForTimeOut>:
{
 8008570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008572:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8008574:	4605      	mov	r5, r0
 8008576:	b940      	cbnz	r0, 800858a <xTaskCheckForTimeOut+0x1a>
 8008578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857c:	f383 8811 	msr	BASEPRI, r3
 8008580:	f3bf 8f6f 	isb	sy
 8008584:	f3bf 8f4f 	dsb	sy
 8008588:	e7fe      	b.n	8008588 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800858a:	b941      	cbnz	r1, 800859e <xTaskCheckForTimeOut+0x2e>
 800858c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008590:	f383 8811 	msr	BASEPRI, r3
 8008594:	f3bf 8f6f 	isb	sy
 8008598:	f3bf 8f4f 	dsb	sy
 800859c:	e7fe      	b.n	800859c <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800859e:	f000 fb29 	bl	8008bf4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80085a2:	4b0f      	ldr	r3, [pc, #60]	; (80085e0 <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80085a4:	6868      	ldr	r0, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 80085a6:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80085a8:	6823      	ldr	r3, [r4, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80085aa:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 80085ac:	1c5e      	adds	r6, r3, #1
 80085ae:	d00d      	beq.n	80085cc <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80085b0:	4e0c      	ldr	r6, [pc, #48]	; (80085e4 <xTaskCheckForTimeOut+0x74>)
 80085b2:	682f      	ldr	r7, [r5, #0]
 80085b4:	6836      	ldr	r6, [r6, #0]
 80085b6:	42b7      	cmp	r7, r6
 80085b8:	d001      	beq.n	80085be <xTaskCheckForTimeOut+0x4e>
 80085ba:	4288      	cmp	r0, r1
 80085bc:	d90d      	bls.n	80085da <xTaskCheckForTimeOut+0x6a>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80085be:	4293      	cmp	r3, r2
 80085c0:	d909      	bls.n	80085d6 <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 80085c2:	1a9b      	subs	r3, r3, r2
 80085c4:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80085c6:	4628      	mov	r0, r5
 80085c8:	f7ff ffc6 	bl	8008558 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 80085cc:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80085ce:	f000 fb33 	bl	8008c38 <vPortExitCritical>
}
 80085d2:	4620      	mov	r0, r4
 80085d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*pxTicksToWait = 0;
 80085d6:	2300      	movs	r3, #0
 80085d8:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80085da:	2401      	movs	r4, #1
 80085dc:	e7f7      	b.n	80085ce <xTaskCheckForTimeOut+0x5e>
 80085de:	bf00      	nop
 80085e0:	20000dac 	.word	0x20000dac
 80085e4:	20000d68 	.word	0x20000d68

080085e8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80085e8:	2201      	movs	r2, #1
 80085ea:	4b01      	ldr	r3, [pc, #4]	; (80085f0 <vTaskMissedYield+0x8>)
 80085ec:	601a      	str	r2, [r3, #0]
}
 80085ee:	4770      	bx	lr
 80085f0:	20000db0 	.word	0x20000db0

080085f4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80085f4:	4b05      	ldr	r3, [pc, #20]	; (800860c <xTaskGetSchedulerState+0x18>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	b133      	cbz	r3, 8008608 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085fa:	4b05      	ldr	r3, [pc, #20]	; (8008610 <xTaskGetSchedulerState+0x1c>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8008600:	bf0c      	ite	eq
 8008602:	2002      	moveq	r0, #2
 8008604:	2000      	movne	r0, #0
 8008606:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008608:	2001      	movs	r0, #1
	}
 800860a:	4770      	bx	lr
 800860c:	20000d80 	.word	0x20000d80
 8008610:	20000d2c 	.word	0x20000d2c

08008614 <xTaskPriorityInherit>:
	{
 8008614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8008616:	4604      	mov	r4, r0
 8008618:	2800      	cmp	r0, #0
 800861a:	d02b      	beq.n	8008674 <xTaskPriorityInherit+0x60>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800861c:	4a1b      	ldr	r2, [pc, #108]	; (800868c <xTaskPriorityInherit+0x78>)
 800861e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008620:	6811      	ldr	r1, [r2, #0]
 8008622:	4616      	mov	r6, r2
 8008624:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8008626:	428b      	cmp	r3, r1
 8008628:	d227      	bcs.n	800867a <xTaskPriorityInherit+0x66>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800862a:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800862c:	4d18      	ldr	r5, [pc, #96]	; (8008690 <xTaskPriorityInherit+0x7c>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800862e:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008630:	bfa1      	itttt	ge
 8008632:	6832      	ldrge	r2, [r6, #0]
 8008634:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8008636:	f1c2 0238 	rsbge	r2, r2, #56	; 0x38
 800863a:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800863c:	2214      	movs	r2, #20
 800863e:	fb02 5303 	mla	r3, r2, r3, r5
 8008642:	6942      	ldr	r2, [r0, #20]
 8008644:	429a      	cmp	r2, r3
 8008646:	d111      	bne.n	800866c <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008648:	1d07      	adds	r7, r0, #4
 800864a:	4638      	mov	r0, r7
 800864c:	f7fe ff44 	bl	80074d8 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008650:	6833      	ldr	r3, [r6, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008652:	4a10      	ldr	r2, [pc, #64]	; (8008694 <xTaskPriorityInherit+0x80>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008656:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008658:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800865a:	428b      	cmp	r3, r1
 800865c:	d80b      	bhi.n	8008676 <xTaskPriorityInherit+0x62>
 800865e:	2014      	movs	r0, #20
 8008660:	4639      	mov	r1, r7
 8008662:	fb00 5003 	mla	r0, r0, r3, r5
 8008666:	f7fe ff14 	bl	8007492 <vListInsertEnd>
 800866a:	e002      	b.n	8008672 <xTaskPriorityInherit+0x5e>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800866c:	6833      	ldr	r3, [r6, #0]
 800866e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008670:	62c3      	str	r3, [r0, #44]	; 0x2c
				xReturn = pdTRUE;
 8008672:	2001      	movs	r0, #1
	}
 8008674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008676:	6013      	str	r3, [r2, #0]
 8008678:	e7f1      	b.n	800865e <xTaskPriorityInherit+0x4a>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800867a:	6813      	ldr	r3, [r2, #0]
 800867c:	6d00      	ldr	r0, [r0, #80]	; 0x50
 800867e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8008680:	42a0      	cmp	r0, r4
 8008682:	bf2c      	ite	cs
 8008684:	2000      	movcs	r0, #0
 8008686:	2001      	movcc	r0, #1
 8008688:	e7f4      	b.n	8008674 <xTaskPriorityInherit+0x60>
 800868a:	bf00      	nop
 800868c:	200008b0 	.word	0x200008b0
 8008690:	200008bc 	.word	0x200008bc
 8008694:	20000d34 	.word	0x20000d34

08008698 <xTaskPriorityDisinherit>:
	{
 8008698:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800869a:	b908      	cbnz	r0, 80086a0 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 800869c:	2000      	movs	r0, #0
	}
 800869e:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80086a0:	4b1b      	ldr	r3, [pc, #108]	; (8008710 <xTaskPriorityDisinherit+0x78>)
 80086a2:	681c      	ldr	r4, [r3, #0]
 80086a4:	4284      	cmp	r4, r0
 80086a6:	d008      	beq.n	80086ba <xTaskPriorityDisinherit+0x22>
 80086a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ac:	f383 8811 	msr	BASEPRI, r3
 80086b0:	f3bf 8f6f 	isb	sy
 80086b4:	f3bf 8f4f 	dsb	sy
 80086b8:	e7fe      	b.n	80086b8 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 80086ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80086bc:	b943      	cbnz	r3, 80086d0 <xTaskPriorityDisinherit+0x38>
 80086be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c2:	f383 8811 	msr	BASEPRI, r3
 80086c6:	f3bf 8f6f 	isb	sy
 80086ca:	f3bf 8f4f 	dsb	sy
 80086ce:	e7fe      	b.n	80086ce <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80086d0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80086d2:	6d22      	ldr	r2, [r4, #80]	; 0x50
			( pxTCB->uxMutexesHeld )--;
 80086d4:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80086d6:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 80086d8:	6563      	str	r3, [r4, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80086da:	d0df      	beq.n	800869c <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d1dd      	bne.n	800869c <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086e0:	1d25      	adds	r5, r4, #4
 80086e2:	4628      	mov	r0, r5
 80086e4:	f7fe fef8 	bl	80074d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80086e8:	2014      	movs	r0, #20
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80086ea:	6d23      	ldr	r3, [r4, #80]	; 0x50
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80086f0:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80086f2:	4a08      	ldr	r2, [pc, #32]	; (8008714 <xTaskPriorityDisinherit+0x7c>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80086f4:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80086f6:	6811      	ldr	r1, [r2, #0]
 80086f8:	428b      	cmp	r3, r1
 80086fa:	bf88      	it	hi
 80086fc:	6013      	strhi	r3, [r2, #0]
 80086fe:	4a06      	ldr	r2, [pc, #24]	; (8008718 <xTaskPriorityDisinherit+0x80>)
 8008700:	4629      	mov	r1, r5
 8008702:	fb00 2003 	mla	r0, r0, r3, r2
 8008706:	f7fe fec4 	bl	8007492 <vListInsertEnd>
					xReturn = pdTRUE;
 800870a:	2001      	movs	r0, #1
		return xReturn;
 800870c:	e7c7      	b.n	800869e <xTaskPriorityDisinherit+0x6>
 800870e:	bf00      	nop
 8008710:	200008b0 	.word	0x200008b0
 8008714:	20000d34 	.word	0x20000d34
 8008718:	200008bc 	.word	0x200008bc

0800871c <vTaskPriorityDisinheritAfterTimeout>:
	{
 800871c:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800871e:	4604      	mov	r4, r0
 8008720:	2800      	cmp	r0, #0
 8008722:	d041      	beq.n	80087a8 <vTaskPriorityDisinheritAfterTimeout+0x8c>
			configASSERT( pxTCB->uxMutexesHeld );
 8008724:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8008726:	b942      	cbnz	r2, 800873a <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8008728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872c:	f383 8811 	msr	BASEPRI, r3
 8008730:	f3bf 8f6f 	isb	sy
 8008734:	f3bf 8f4f 	dsb	sy
 8008738:	e7fe      	b.n	8008738 <vTaskPriorityDisinheritAfterTimeout+0x1c>
 800873a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800873c:	4299      	cmp	r1, r3
 800873e:	bf38      	it	cc
 8008740:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008742:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008744:	428b      	cmp	r3, r1
 8008746:	d02f      	beq.n	80087a8 <vTaskPriorityDisinheritAfterTimeout+0x8c>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008748:	2a01      	cmp	r2, #1
 800874a:	d12d      	bne.n	80087a8 <vTaskPriorityDisinheritAfterTimeout+0x8c>
					configASSERT( pxTCB != pxCurrentTCB );
 800874c:	4a17      	ldr	r2, [pc, #92]	; (80087ac <vTaskPriorityDisinheritAfterTimeout+0x90>)
 800874e:	6812      	ldr	r2, [r2, #0]
 8008750:	4282      	cmp	r2, r0
 8008752:	d108      	bne.n	8008766 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8008754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008758:	f383 8811 	msr	BASEPRI, r3
 800875c:	f3bf 8f6f 	isb	sy
 8008760:	f3bf 8f4f 	dsb	sy
 8008764:	e7fe      	b.n	8008764 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008766:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008768:	4d11      	ldr	r5, [pc, #68]	; (80087b0 <vTaskPriorityDisinheritAfterTimeout+0x94>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800876a:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800876c:	f04f 0214 	mov.w	r2, #20
 8008770:	fb02 5303 	mla	r3, r2, r3, r5
 8008774:	6942      	ldr	r2, [r0, #20]
					pxTCB->uxPriority = uxPriorityToUse;
 8008776:	62c1      	str	r1, [r0, #44]	; 0x2c
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008778:	bfa4      	itt	ge
 800877a:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
 800877e:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008780:	429a      	cmp	r2, r3
 8008782:	d111      	bne.n	80087a8 <vTaskPriorityDisinheritAfterTimeout+0x8c>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008784:	1d06      	adds	r6, r0, #4
 8008786:	4630      	mov	r0, r6
 8008788:	f7fe fea6 	bl	80074d8 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800878c:	2014      	movs	r0, #20
 800878e:	4a09      	ldr	r2, [pc, #36]	; (80087b4 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8008790:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008792:	6811      	ldr	r1, [r2, #0]
 8008794:	fb00 5003 	mla	r0, r0, r3, r5
 8008798:	428b      	cmp	r3, r1
 800879a:	4631      	mov	r1, r6
	}
 800879c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 80087a0:	bf88      	it	hi
 80087a2:	6013      	strhi	r3, [r2, #0]
 80087a4:	f7fe be75 	b.w	8007492 <vListInsertEnd>
	}
 80087a8:	bd70      	pop	{r4, r5, r6, pc}
 80087aa:	bf00      	nop
 80087ac:	200008b0 	.word	0x200008b0
 80087b0:	200008bc 	.word	0x200008bc
 80087b4:	20000d34 	.word	0x20000d34

080087b8 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80087b8:	4b04      	ldr	r3, [pc, #16]	; (80087cc <pvTaskIncrementMutexHeldCount+0x14>)
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	b11a      	cbz	r2, 80087c6 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80087be:	6819      	ldr	r1, [r3, #0]
 80087c0:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80087c2:	3201      	adds	r2, #1
 80087c4:	654a      	str	r2, [r1, #84]	; 0x54
		return pxCurrentTCB;
 80087c6:	6818      	ldr	r0, [r3, #0]
	}
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop
 80087cc:	200008b0 	.word	0x200008b0

080087d0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80087d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80087d2:	4c0f      	ldr	r4, [pc, #60]	; (8008810 <prvCheckForValidListAndQueue+0x40>)
	taskENTER_CRITICAL();
 80087d4:	f000 fa0e 	bl	8008bf4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80087d8:	6825      	ldr	r5, [r4, #0]
 80087da:	b9ad      	cbnz	r5, 8008808 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 80087dc:	4f0d      	ldr	r7, [pc, #52]	; (8008814 <prvCheckForValidListAndQueue+0x44>)
			vListInitialise( &xActiveTimerList2 );
 80087de:	4e0e      	ldr	r6, [pc, #56]	; (8008818 <prvCheckForValidListAndQueue+0x48>)
			vListInitialise( &xActiveTimerList1 );
 80087e0:	4638      	mov	r0, r7
 80087e2:	f7fe fe48 	bl	8007476 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80087e6:	4630      	mov	r0, r6
 80087e8:	f7fe fe45 	bl	8007476 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80087ec:	4b0b      	ldr	r3, [pc, #44]	; (800881c <prvCheckForValidListAndQueue+0x4c>)

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80087ee:	462a      	mov	r2, r5
			pxCurrentTimerList = &xActiveTimerList1;
 80087f0:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80087f2:	4b0b      	ldr	r3, [pc, #44]	; (8008820 <prvCheckForValidListAndQueue+0x50>)
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80087f4:	2110      	movs	r1, #16
 80087f6:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 80087f8:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80087fa:	f7fe ff49 	bl	8007690 <xQueueGenericCreate>
 80087fe:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008800:	b110      	cbz	r0, 8008808 <prvCheckForValidListAndQueue+0x38>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008802:	4908      	ldr	r1, [pc, #32]	; (8008824 <prvCheckForValidListAndQueue+0x54>)
 8008804:	f7ff faa0 	bl	8007d48 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8008808:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800880c:	f000 ba14 	b.w	8008c38 <vPortExitCritical>
 8008810:	20000de8 	.word	0x20000de8
 8008814:	20000dbc 	.word	0x20000dbc
 8008818:	20000dd0 	.word	0x20000dd0
 800881c:	20000db4 	.word	0x20000db4
 8008820:	20000db8 	.word	0x20000db8
 8008824:	0800be93 	.word	0x0800be93

08008828 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8008828:	4291      	cmp	r1, r2
{
 800882a:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800882c:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800882e:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8008830:	d80a      	bhi.n	8008848 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008832:	1ad2      	subs	r2, r2, r3
 8008834:	6983      	ldr	r3, [r0, #24]
 8008836:	429a      	cmp	r2, r3
 8008838:	d20d      	bcs.n	8008856 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800883a:	4b08      	ldr	r3, [pc, #32]	; (800885c <prvInsertTimerInActiveList+0x34>)
 800883c:	1d01      	adds	r1, r0, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800883e:	6818      	ldr	r0, [r3, #0]
 8008840:	f7fe fe33 	bl	80074aa <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8008844:	2000      	movs	r0, #0
}
 8008846:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008848:	429a      	cmp	r2, r3
 800884a:	d201      	bcs.n	8008850 <prvInsertTimerInActiveList+0x28>
 800884c:	4299      	cmp	r1, r3
 800884e:	d202      	bcs.n	8008856 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008850:	1d01      	adds	r1, r0, #4
 8008852:	4b03      	ldr	r3, [pc, #12]	; (8008860 <prvInsertTimerInActiveList+0x38>)
 8008854:	e7f3      	b.n	800883e <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8008856:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8008858:	e7f5      	b.n	8008846 <prvInsertTimerInActiveList+0x1e>
 800885a:	bf00      	nop
 800885c:	20000db8 	.word	0x20000db8
 8008860:	20000db4 	.word	0x20000db4

08008864 <xTimerCreateTimerTask>:
{
 8008864:	b507      	push	{r0, r1, r2, lr}
	prvCheckForValidListAndQueue();
 8008866:	f7ff ffb3 	bl	80087d0 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800886a:	4b0d      	ldr	r3, [pc, #52]	; (80088a0 <xTimerCreateTimerTask+0x3c>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	b943      	cbnz	r3, 8008882 <xTimerCreateTimerTask+0x1e>
 8008870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008874:	f383 8811 	msr	BASEPRI, r3
 8008878:	f3bf 8f6f 	isb	sy
 800887c:	f3bf 8f4f 	dsb	sy
 8008880:	e7fe      	b.n	8008880 <xTimerCreateTimerTask+0x1c>
			xReturn = xTaskCreate(	prvTimerTask,
 8008882:	4b08      	ldr	r3, [pc, #32]	; (80088a4 <xTimerCreateTimerTask+0x40>)
 8008884:	2280      	movs	r2, #128	; 0x80
 8008886:	9301      	str	r3, [sp, #4]
 8008888:	2302      	movs	r3, #2
 800888a:	4907      	ldr	r1, [pc, #28]	; (80088a8 <xTimerCreateTimerTask+0x44>)
 800888c:	9300      	str	r3, [sp, #0]
 800888e:	4807      	ldr	r0, [pc, #28]	; (80088ac <xTimerCreateTimerTask+0x48>)
 8008890:	2300      	movs	r3, #0
 8008892:	f7ff fb37 	bl	8007f04 <xTaskCreate>
	configASSERT( xReturn );
 8008896:	2800      	cmp	r0, #0
 8008898:	d0ea      	beq.n	8008870 <xTimerCreateTimerTask+0xc>
}
 800889a:	b003      	add	sp, #12
 800889c:	f85d fb04 	ldr.w	pc, [sp], #4
 80088a0:	20000de8 	.word	0x20000de8
 80088a4:	20000dec 	.word	0x20000dec
 80088a8:	0800be98 	.word	0x0800be98
 80088ac:	08008985 	.word	0x08008985

080088b0 <xTimerGenericCommand>:
{
 80088b0:	b530      	push	{r4, r5, lr}
 80088b2:	4615      	mov	r5, r2
 80088b4:	b085      	sub	sp, #20
 80088b6:	461a      	mov	r2, r3
	configASSERT( xTimer );
 80088b8:	4603      	mov	r3, r0
 80088ba:	b940      	cbnz	r0, 80088ce <xTimerGenericCommand+0x1e>
 80088bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c0:	f383 8811 	msr	BASEPRI, r3
 80088c4:	f3bf 8f6f 	isb	sy
 80088c8:	f3bf 8f4f 	dsb	sy
 80088cc:	e7fe      	b.n	80088cc <xTimerGenericCommand+0x1c>
	if( xTimerQueue != NULL )
 80088ce:	4c0d      	ldr	r4, [pc, #52]	; (8008904 <xTimerGenericCommand+0x54>)
 80088d0:	6820      	ldr	r0, [r4, #0]
 80088d2:	b178      	cbz	r0, 80088f4 <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80088d4:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80088d6:	e9cd 1500 	strd	r1, r5, [sp]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80088da:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80088dc:	dc0c      	bgt.n	80088f8 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80088de:	f7ff fe89 	bl	80085f4 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80088e2:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80088e4:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80088e6:	bf0c      	ite	eq
 80088e8:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80088ea:	461a      	movne	r2, r3
 80088ec:	4669      	mov	r1, sp
 80088ee:	6820      	ldr	r0, [r4, #0]
 80088f0:	f7fe ff10 	bl	8007714 <xQueueGenericSend>
}
 80088f4:	b005      	add	sp, #20
 80088f6:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80088f8:	2300      	movs	r3, #0
 80088fa:	4669      	mov	r1, sp
 80088fc:	f7fe ffbc 	bl	8007878 <xQueueGenericSendFromISR>
 8008900:	e7f8      	b.n	80088f4 <xTimerGenericCommand+0x44>
 8008902:	bf00      	nop
 8008904:	20000de8 	.word	0x20000de8

08008908 <prvSwitchTimerLists>:
{
 8008908:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800890c:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008910:	4d1a      	ldr	r5, [pc, #104]	; (800897c <prvSwitchTimerLists+0x74>)
 8008912:	682b      	ldr	r3, [r5, #0]
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	b932      	cbnz	r2, 8008926 <prvSwitchTimerLists+0x1e>
	pxCurrentTimerList = pxOverflowTimerList;
 8008918:	4a19      	ldr	r2, [pc, #100]	; (8008980 <prvSwitchTimerLists+0x78>)
 800891a:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800891c:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 800891e:	6029      	str	r1, [r5, #0]
}
 8008920:	b002      	add	sp, #8
 8008922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008926:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008928:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800892a:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800892c:	1d27      	adds	r7, r4, #4
 800892e:	4638      	mov	r0, r7
 8008930:	f7fe fdd2 	bl	80074d8 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008934:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008936:	4620      	mov	r0, r4
 8008938:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800893a:	69e3      	ldr	r3, [r4, #28]
 800893c:	2b01      	cmp	r3, #1
 800893e:	d1e8      	bne.n	8008912 <prvSwitchTimerLists+0xa>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008940:	69a3      	ldr	r3, [r4, #24]
 8008942:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8008944:	429e      	cmp	r6, r3
 8008946:	d206      	bcs.n	8008956 <prvSwitchTimerLists+0x4e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008948:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800894a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800894c:	4639      	mov	r1, r7
 800894e:	6828      	ldr	r0, [r5, #0]
 8008950:	f7fe fdab 	bl	80074aa <vListInsert>
 8008954:	e7dd      	b.n	8008912 <prvSwitchTimerLists+0xa>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008956:	2300      	movs	r3, #0
 8008958:	f8cd 8000 	str.w	r8, [sp]
 800895c:	4632      	mov	r2, r6
 800895e:	4619      	mov	r1, r3
 8008960:	4620      	mov	r0, r4
 8008962:	f7ff ffa5 	bl	80088b0 <xTimerGenericCommand>
				configASSERT( xResult );
 8008966:	2800      	cmp	r0, #0
 8008968:	d1d3      	bne.n	8008912 <prvSwitchTimerLists+0xa>
 800896a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800896e:	f383 8811 	msr	BASEPRI, r3
 8008972:	f3bf 8f6f 	isb	sy
 8008976:	f3bf 8f4f 	dsb	sy
 800897a:	e7fe      	b.n	800897a <prvSwitchTimerLists+0x72>
 800897c:	20000db4 	.word	0x20000db4
 8008980:	20000db8 	.word	0x20000db8

08008984 <prvTimerTask>:
{
 8008984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008988:	4d6b      	ldr	r5, [pc, #428]	; (8008b38 <prvTimerTask+0x1b4>)
					portYIELD_WITHIN_API();
 800898a:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008b48 <prvTimerTask+0x1c4>
 800898e:	462f      	mov	r7, r5
{
 8008990:	b087      	sub	sp, #28
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008992:	682b      	ldr	r3, [r5, #0]
 8008994:	f8d3 b000 	ldr.w	fp, [r3]
	if( *pxListWasEmpty == pdFALSE )
 8008998:	f1bb 0f00 	cmp.w	fp, #0
 800899c:	d047      	beq.n	8008a2e <prvTimerTask+0xaa>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	f8d3 a000 	ldr.w	sl, [r3]
	vTaskSuspendAll();
 80089a4:	f7ff fbca 	bl	800813c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 80089a8:	f7ff fbd0 	bl	800814c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80089ac:	4c63      	ldr	r4, [pc, #396]	; (8008b3c <prvTimerTask+0x1b8>)
	xTimeNow = xTaskGetTickCount();
 80089ae:	4681      	mov	r9, r0
	if( xTimeNow < xLastTime )
 80089b0:	6823      	ldr	r3, [r4, #0]
 80089b2:	4626      	mov	r6, r4
 80089b4:	4298      	cmp	r0, r3
 80089b6:	d23c      	bcs.n	8008a32 <prvTimerTask+0xae>
		prvSwitchTimerLists();
 80089b8:	f7ff ffa6 	bl	8008908 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 80089bc:	f8c4 9000 	str.w	r9, [r4]
			( void ) xTaskResumeAll();
 80089c0:	f7ff fc62 	bl	8008288 <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80089c4:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008b44 <prvTimerTask+0x1c0>
 80089c8:	2200      	movs	r2, #0
 80089ca:	a902      	add	r1, sp, #8
 80089cc:	f8d9 0000 	ldr.w	r0, [r9]
 80089d0:	f7ff f808 	bl	80079e4 <xQueueReceive>
 80089d4:	2800      	cmp	r0, #0
 80089d6:	d0dc      	beq.n	8008992 <prvTimerTask+0xe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80089d8:	9b02      	ldr	r3, [sp, #8]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	da03      	bge.n	80089e6 <prvTimerTask+0x62>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80089de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089e2:	9b03      	ldr	r3, [sp, #12]
 80089e4:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80089e6:	9b02      	ldr	r3, [sp, #8]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	dbed      	blt.n	80089c8 <prvTimerTask+0x44>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80089ec:	9c04      	ldr	r4, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80089ee:	6963      	ldr	r3, [r4, #20]
 80089f0:	b113      	cbz	r3, 80089f8 <prvTimerTask+0x74>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80089f2:	1d20      	adds	r0, r4, #4
 80089f4:	f7fe fd70 	bl	80074d8 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 80089f8:	f7ff fba8 	bl	800814c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80089fc:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 80089fe:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 8008a00:	4298      	cmp	r0, r3
 8008a02:	d201      	bcs.n	8008a08 <prvTimerTask+0x84>
		prvSwitchTimerLists();
 8008a04:	f7ff ff80 	bl	8008908 <prvSwitchTimerLists>
 8008a08:	9a02      	ldr	r2, [sp, #8]
	xLastTime = xTimeNow;
 8008a0a:	f8c6 b000 	str.w	fp, [r6]
 8008a0e:	2a09      	cmp	r2, #9
 8008a10:	d8da      	bhi.n	80089c8 <prvTimerTask+0x44>
 8008a12:	2301      	movs	r3, #1
 8008a14:	4093      	lsls	r3, r2
 8008a16:	f413 7a04 	ands.w	sl, r3, #528	; 0x210
 8008a1a:	d17a      	bne.n	8008b12 <prvTimerTask+0x18e>
 8008a1c:	f013 0fc7 	tst.w	r3, #199	; 0xc7
 8008a20:	d150      	bne.n	8008ac4 <prvTimerTask+0x140>
 8008a22:	069b      	lsls	r3, r3, #26
 8008a24:	d5d0      	bpl.n	80089c8 <prvTimerTask+0x44>
						vPortFree( pxTimer );
 8008a26:	4620      	mov	r0, r4
 8008a28:	f000 faa4 	bl	8008f74 <vPortFree>
 8008a2c:	e7cc      	b.n	80089c8 <prvTimerTask+0x44>
		xNextExpireTime = ( TickType_t ) 0U;
 8008a2e:	46da      	mov	sl, fp
 8008a30:	e7b8      	b.n	80089a4 <prvTimerTask+0x20>
	xLastTime = xTimeNow;
 8008a32:	6020      	str	r0, [r4, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008a34:	f1bb 0f00 	cmp.w	fp, #0
 8008a38:	d029      	beq.n	8008a8e <prvTimerTask+0x10a>
 8008a3a:	4582      	cmp	sl, r0
 8008a3c:	d840      	bhi.n	8008ac0 <prvTimerTask+0x13c>
				( void ) xTaskResumeAll();
 8008a3e:	f7ff fc23 	bl	8008288 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a48:	1d20      	adds	r0, r4, #4
 8008a4a:	f7fe fd45 	bl	80074d8 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008a4e:	69e3      	ldr	r3, [r4, #28]
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d118      	bne.n	8008a86 <prvTimerTask+0x102>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008a54:	69a1      	ldr	r1, [r4, #24]
 8008a56:	4653      	mov	r3, sl
 8008a58:	464a      	mov	r2, r9
 8008a5a:	4451      	add	r1, sl
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	f7ff fee3 	bl	8008828 <prvInsertTimerInActiveList>
 8008a62:	b180      	cbz	r0, 8008a86 <prvTimerTask+0x102>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a64:	2300      	movs	r3, #0
 8008a66:	4652      	mov	r2, sl
 8008a68:	9300      	str	r3, [sp, #0]
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	f7ff ff1f 	bl	80088b0 <xTimerGenericCommand>
			configASSERT( xResult );
 8008a72:	b940      	cbnz	r0, 8008a86 <prvTimerTask+0x102>
 8008a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a78:	f383 8811 	msr	BASEPRI, r3
 8008a7c:	f3bf 8f6f 	isb	sy
 8008a80:	f3bf 8f4f 	dsb	sy
 8008a84:	e7fe      	b.n	8008a84 <prvTimerTask+0x100>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a88:	4620      	mov	r0, r4
 8008a8a:	4798      	blx	r3
 8008a8c:	e79a      	b.n	80089c4 <prvTimerTask+0x40>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008a8e:	4b2c      	ldr	r3, [pc, #176]	; (8008b40 <prvTimerTask+0x1bc>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	fab2 f282 	clz	r2, r2
 8008a98:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008a9a:	4b2a      	ldr	r3, [pc, #168]	; (8008b44 <prvTimerTask+0x1c0>)
 8008a9c:	ebaa 0109 	sub.w	r1, sl, r9
 8008aa0:	6818      	ldr	r0, [r3, #0]
 8008aa2:	f7ff f98a 	bl	8007dba <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008aa6:	f7ff fbef 	bl	8008288 <xTaskResumeAll>
 8008aaa:	2800      	cmp	r0, #0
 8008aac:	d18a      	bne.n	80089c4 <prvTimerTask+0x40>
					portYIELD_WITHIN_API();
 8008aae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008ab2:	f8c8 3000 	str.w	r3, [r8]
 8008ab6:	f3bf 8f4f 	dsb	sy
 8008aba:	f3bf 8f6f 	isb	sy
 8008abe:	e781      	b.n	80089c4 <prvTimerTask+0x40>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	e7ea      	b.n	8008a9a <prvTimerTask+0x116>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008ac4:	69a1      	ldr	r1, [r4, #24]
 8008ac6:	9b03      	ldr	r3, [sp, #12]
 8008ac8:	465a      	mov	r2, fp
 8008aca:	4419      	add	r1, r3
 8008acc:	4620      	mov	r0, r4
 8008ace:	f7ff feab 	bl	8008828 <prvInsertTimerInActiveList>
 8008ad2:	2800      	cmp	r0, #0
 8008ad4:	f43f af78 	beq.w	80089c8 <prvTimerTask+0x44>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ad8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ada:	4620      	mov	r0, r4
 8008adc:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008ade:	69e3      	ldr	r3, [r4, #28]
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	f47f af71 	bne.w	80089c8 <prvTimerTask+0x44>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008ae6:	69a2      	ldr	r2, [r4, #24]
 8008ae8:	9903      	ldr	r1, [sp, #12]
 8008aea:	f8cd a000 	str.w	sl, [sp]
 8008aee:	440a      	add	r2, r1
 8008af0:	4653      	mov	r3, sl
 8008af2:	4651      	mov	r1, sl
 8008af4:	4620      	mov	r0, r4
 8008af6:	f7ff fedb 	bl	80088b0 <xTimerGenericCommand>
							configASSERT( xResult );
 8008afa:	2800      	cmp	r0, #0
 8008afc:	f47f af64 	bne.w	80089c8 <prvTimerTask+0x44>
 8008b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b04:	f383 8811 	msr	BASEPRI, r3
 8008b08:	f3bf 8f6f 	isb	sy
 8008b0c:	f3bf 8f4f 	dsb	sy
 8008b10:	e7fe      	b.n	8008b10 <prvTimerTask+0x18c>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008b12:	9903      	ldr	r1, [sp, #12]
 8008b14:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008b16:	b941      	cbnz	r1, 8008b2a <prvTimerTask+0x1a6>
 8008b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b1c:	f383 8811 	msr	BASEPRI, r3
 8008b20:	f3bf 8f6f 	isb	sy
 8008b24:	f3bf 8f4f 	dsb	sy
 8008b28:	e7fe      	b.n	8008b28 <prvTimerTask+0x1a4>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008b2a:	465b      	mov	r3, fp
 8008b2c:	465a      	mov	r2, fp
 8008b2e:	4459      	add	r1, fp
 8008b30:	4620      	mov	r0, r4
 8008b32:	f7ff fe79 	bl	8008828 <prvInsertTimerInActiveList>
 8008b36:	e747      	b.n	80089c8 <prvTimerTask+0x44>
 8008b38:	20000db4 	.word	0x20000db4
 8008b3c:	20000de4 	.word	0x20000de4
 8008b40:	20000db8 	.word	0x20000db8
 8008b44:	20000de8 	.word	0x20000de8
 8008b48:	e000ed04 	.word	0xe000ed04

08008b4c <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 8008b4c:	2300      	movs	r3, #0
{
 8008b4e:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8008b50:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008b52:	4b0d      	ldr	r3, [pc, #52]	; (8008b88 <prvTaskExitError+0x3c>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	3301      	adds	r3, #1
 8008b58:	d008      	beq.n	8008b6c <prvTaskExitError+0x20>
 8008b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5e:	f383 8811 	msr	BASEPRI, r3
 8008b62:	f3bf 8f6f 	isb	sy
 8008b66:	f3bf 8f4f 	dsb	sy
 8008b6a:	e7fe      	b.n	8008b6a <prvTaskExitError+0x1e>
 8008b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b70:	f383 8811 	msr	BASEPRI, r3
 8008b74:	f3bf 8f6f 	isb	sy
 8008b78:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008b7c:	9b01      	ldr	r3, [sp, #4]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d0fc      	beq.n	8008b7c <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008b82:	b002      	add	sp, #8
 8008b84:	4770      	bx	lr
 8008b86:	bf00      	nop
 8008b88:	20000020 	.word	0x20000020

08008b8c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008b8c:	4806      	ldr	r0, [pc, #24]	; (8008ba8 <prvPortStartFirstTask+0x1c>)
 8008b8e:	6800      	ldr	r0, [r0, #0]
 8008b90:	6800      	ldr	r0, [r0, #0]
 8008b92:	f380 8808 	msr	MSP, r0
 8008b96:	b662      	cpsie	i
 8008b98:	b661      	cpsie	f
 8008b9a:	f3bf 8f4f 	dsb	sy
 8008b9e:	f3bf 8f6f 	isb	sy
 8008ba2:	df00      	svc	0
 8008ba4:	bf00      	nop
 8008ba6:	0000      	.short	0x0000
 8008ba8:	e000ed08 	.word	0xe000ed08

08008bac <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008bac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008bb0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008bb4:	4b05      	ldr	r3, [pc, #20]	; (8008bcc <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008bb6:	f021 0101 	bic.w	r1, r1, #1
 8008bba:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008bbe:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008bc2:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8008bc6:	3840      	subs	r0, #64	; 0x40
 8008bc8:	4770      	bx	lr
 8008bca:	bf00      	nop
 8008bcc:	08008b4d 	.word	0x08008b4d

08008bd0 <SVC_Handler>:
	__asm volatile (
 8008bd0:	4b07      	ldr	r3, [pc, #28]	; (8008bf0 <pxCurrentTCBConst2>)
 8008bd2:	6819      	ldr	r1, [r3, #0]
 8008bd4:	6808      	ldr	r0, [r1, #0]
 8008bd6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008bda:	f380 8809 	msr	PSP, r0
 8008bde:	f3bf 8f6f 	isb	sy
 8008be2:	f04f 0000 	mov.w	r0, #0
 8008be6:	f380 8811 	msr	BASEPRI, r0
 8008bea:	f04e 0e0d 	orr.w	lr, lr, #13
 8008bee:	4770      	bx	lr

08008bf0 <pxCurrentTCBConst2>:
 8008bf0:	200008b0 	.word	0x200008b0

08008bf4 <vPortEnterCritical>:
 8008bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf8:	f383 8811 	msr	BASEPRI, r3
 8008bfc:	f3bf 8f6f 	isb	sy
 8008c00:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008c04:	4a0a      	ldr	r2, [pc, #40]	; (8008c30 <vPortEnterCritical+0x3c>)
 8008c06:	6813      	ldr	r3, [r2, #0]
 8008c08:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008c0a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8008c0c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8008c0e:	d10d      	bne.n	8008c2c <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008c10:	4b08      	ldr	r3, [pc, #32]	; (8008c34 <vPortEnterCritical+0x40>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008c18:	d008      	beq.n	8008c2c <vPortEnterCritical+0x38>
 8008c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1e:	f383 8811 	msr	BASEPRI, r3
 8008c22:	f3bf 8f6f 	isb	sy
 8008c26:	f3bf 8f4f 	dsb	sy
 8008c2a:	e7fe      	b.n	8008c2a <vPortEnterCritical+0x36>
	}
}
 8008c2c:	4770      	bx	lr
 8008c2e:	bf00      	nop
 8008c30:	20000020 	.word	0x20000020
 8008c34:	e000ed04 	.word	0xe000ed04

08008c38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8008c38:	4a08      	ldr	r2, [pc, #32]	; (8008c5c <vPortExitCritical+0x24>)
 8008c3a:	6813      	ldr	r3, [r2, #0]
 8008c3c:	b943      	cbnz	r3, 8008c50 <vPortExitCritical+0x18>
 8008c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c42:	f383 8811 	msr	BASEPRI, r3
 8008c46:	f3bf 8f6f 	isb	sy
 8008c4a:	f3bf 8f4f 	dsb	sy
 8008c4e:	e7fe      	b.n	8008c4e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8008c50:	3b01      	subs	r3, #1
 8008c52:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c54:	b90b      	cbnz	r3, 8008c5a <vPortExitCritical+0x22>
	__asm volatile
 8008c56:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c5a:	4770      	bx	lr
 8008c5c:	20000020 	.word	0x20000020

08008c60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c60:	f3ef 8009 	mrs	r0, PSP
 8008c64:	f3bf 8f6f 	isb	sy
 8008c68:	4b0d      	ldr	r3, [pc, #52]	; (8008ca0 <pxCurrentTCBConst>)
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008c70:	6010      	str	r0, [r2, #0]
 8008c72:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008c76:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008c7a:	f380 8811 	msr	BASEPRI, r0
 8008c7e:	f7ff fb9b 	bl	80083b8 <vTaskSwitchContext>
 8008c82:	f04f 0000 	mov.w	r0, #0
 8008c86:	f380 8811 	msr	BASEPRI, r0
 8008c8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008c8e:	6819      	ldr	r1, [r3, #0]
 8008c90:	6808      	ldr	r0, [r1, #0]
 8008c92:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008c96:	f380 8809 	msr	PSP, r0
 8008c9a:	f3bf 8f6f 	isb	sy
 8008c9e:	4770      	bx	lr

08008ca0 <pxCurrentTCBConst>:
 8008ca0:	200008b0 	.word	0x200008b0

08008ca4 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008ca4:	b508      	push	{r3, lr}
	__asm volatile
 8008ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008caa:	f383 8811 	msr	BASEPRI, r3
 8008cae:	f3bf 8f6f 	isb	sy
 8008cb2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008cb6:	f7ff fa57 	bl	8008168 <xTaskIncrementTick>
 8008cba:	b118      	cbz	r0, 8008cc4 <xPortSysTickHandler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008cbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cc0:	4b02      	ldr	r3, [pc, #8]	; (8008ccc <xPortSysTickHandler+0x28>)
 8008cc2:	601a      	str	r2, [r3, #0]
	__asm volatile
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008cca:	bd08      	pop	{r3, pc}
 8008ccc:	e000ed04 	.word	0xe000ed04

08008cd0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	4a08      	ldr	r2, [pc, #32]	; (8008cf4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008cd4:	4908      	ldr	r1, [pc, #32]	; (8008cf8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008cd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008cd8:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008cda:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008cde:	4b07      	ldr	r3, [pc, #28]	; (8008cfc <vPortSetupTimerInterrupt+0x2c>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ce6:	4906      	ldr	r1, [pc, #24]	; (8008d00 <vPortSetupTimerInterrupt+0x30>)
 8008ce8:	3b01      	subs	r3, #1
 8008cea:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008cec:	2307      	movs	r3, #7
 8008cee:	6013      	str	r3, [r2, #0]
}
 8008cf0:	4770      	bx	lr
 8008cf2:	bf00      	nop
 8008cf4:	e000e010 	.word	0xe000e010
 8008cf8:	e000e018 	.word	0xe000e018
 8008cfc:	20000010 	.word	0x20000010
 8008d00:	e000e014 	.word	0xe000e014

08008d04 <xPortStartScheduler>:
{
 8008d04:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008d06:	4b27      	ldr	r3, [pc, #156]	; (8008da4 <xPortStartScheduler+0xa0>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d08:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008d0a:	781a      	ldrb	r2, [r3, #0]
 8008d0c:	b2d2      	uxtb	r2, r2
 8008d0e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008d10:	22ff      	movs	r2, #255	; 0xff
 8008d12:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008d14:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008d16:	4a24      	ldr	r2, [pc, #144]	; (8008da8 <xPortStartScheduler+0xa4>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008d1e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008d22:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008d26:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008d28:	2207      	movs	r2, #7
 8008d2a:	4b20      	ldr	r3, [pc, #128]	; (8008dac <xPortStartScheduler+0xa8>)
 8008d2c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d2e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8008d32:	1e54      	subs	r4, r2, #1
 8008d34:	0600      	lsls	r0, r0, #24
 8008d36:	d40d      	bmi.n	8008d54 <xPortStartScheduler+0x50>
 8008d38:	b101      	cbz	r1, 8008d3c <xPortStartScheduler+0x38>
 8008d3a:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	2a03      	cmp	r2, #3
 8008d40:	d011      	beq.n	8008d66 <xPortStartScheduler+0x62>
	__asm volatile
 8008d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d46:	f383 8811 	msr	BASEPRI, r3
 8008d4a:	f3bf 8f6f 	isb	sy
 8008d4e:	f3bf 8f4f 	dsb	sy
 8008d52:	e7fe      	b.n	8008d52 <xPortStartScheduler+0x4e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008d54:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8008d58:	2101      	movs	r1, #1
 8008d5a:	0052      	lsls	r2, r2, #1
 8008d5c:	b2d2      	uxtb	r2, r2
 8008d5e:	f88d 2003 	strb.w	r2, [sp, #3]
 8008d62:	4622      	mov	r2, r4
 8008d64:	e7e3      	b.n	8008d2e <xPortStartScheduler+0x2a>
	uxCriticalNesting = 0;
 8008d66:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008d68:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008d6a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8008d6e:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008d70:	9b01      	ldr	r3, [sp, #4]
 8008d72:	4a0c      	ldr	r2, [pc, #48]	; (8008da4 <xPortStartScheduler+0xa0>)
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008d78:	4b0d      	ldr	r3, [pc, #52]	; (8008db0 <xPortStartScheduler+0xac>)
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8008d80:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8008d88:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8008d8a:	f7ff ffa1 	bl	8008cd0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8008d8e:	4b09      	ldr	r3, [pc, #36]	; (8008db4 <xPortStartScheduler+0xb0>)
 8008d90:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8008d92:	f7ff fefb 	bl	8008b8c <prvPortStartFirstTask>
	vTaskSwitchContext();
 8008d96:	f7ff fb0f 	bl	80083b8 <vTaskSwitchContext>
	prvTaskExitError();
 8008d9a:	f7ff fed7 	bl	8008b4c <prvTaskExitError>
}
 8008d9e:	4620      	mov	r0, r4
 8008da0:	b002      	add	sp, #8
 8008da2:	bd10      	pop	{r4, pc}
 8008da4:	e000e400 	.word	0xe000e400
 8008da8:	20000df0 	.word	0x20000df0
 8008dac:	20000df4 	.word	0x20000df4
 8008db0:	e000ed20 	.word	0xe000ed20
 8008db4:	20000020 	.word	0x20000020

08008db8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008db8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008dbc:	2b0f      	cmp	r3, #15
 8008dbe:	d90e      	bls.n	8008dde <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008dc0:	4a10      	ldr	r2, [pc, #64]	; (8008e04 <vPortValidateInterruptPriority+0x4c>)
 8008dc2:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008dc4:	4a10      	ldr	r2, [pc, #64]	; (8008e08 <vPortValidateInterruptPriority+0x50>)
 8008dc6:	7812      	ldrb	r2, [r2, #0]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d908      	bls.n	8008dde <vPortValidateInterruptPriority+0x26>
 8008dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd0:	f383 8811 	msr	BASEPRI, r3
 8008dd4:	f3bf 8f6f 	isb	sy
 8008dd8:	f3bf 8f4f 	dsb	sy
 8008ddc:	e7fe      	b.n	8008ddc <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008dde:	4b0b      	ldr	r3, [pc, #44]	; (8008e0c <vPortValidateInterruptPriority+0x54>)
 8008de0:	4a0b      	ldr	r2, [pc, #44]	; (8008e10 <vPortValidateInterruptPriority+0x58>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	6812      	ldr	r2, [r2, #0]
 8008de6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d908      	bls.n	8008e00 <vPortValidateInterruptPriority+0x48>
 8008dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df2:	f383 8811 	msr	BASEPRI, r3
 8008df6:	f3bf 8f6f 	isb	sy
 8008dfa:	f3bf 8f4f 	dsb	sy
 8008dfe:	e7fe      	b.n	8008dfe <vPortValidateInterruptPriority+0x46>
	}
 8008e00:	4770      	bx	lr
 8008e02:	bf00      	nop
 8008e04:	e000e3f0 	.word	0xe000e3f0
 8008e08:	20000df0 	.word	0x20000df0
 8008e0c:	e000ed0c 	.word	0xe000ed0c
 8008e10:	20000df4 	.word	0x20000df4

08008e14 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008e14:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e16:	4b0f      	ldr	r3, [pc, #60]	; (8008e54 <prvInsertBlockIntoFreeList+0x40>)
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	4282      	cmp	r2, r0
 8008e1c:	d318      	bcc.n	8008e50 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008e1e:	685c      	ldr	r4, [r3, #4]
 8008e20:	1919      	adds	r1, r3, r4
 8008e22:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008e24:	bf01      	itttt	eq
 8008e26:	6841      	ldreq	r1, [r0, #4]
 8008e28:	4618      	moveq	r0, r3
 8008e2a:	1909      	addeq	r1, r1, r4
 8008e2c:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008e2e:	6844      	ldr	r4, [r0, #4]
 8008e30:	1901      	adds	r1, r0, r4
 8008e32:	428a      	cmp	r2, r1
 8008e34:	d107      	bne.n	8008e46 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008e36:	4908      	ldr	r1, [pc, #32]	; (8008e58 <prvInsertBlockIntoFreeList+0x44>)
 8008e38:	6809      	ldr	r1, [r1, #0]
 8008e3a:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008e3c:	bf1f      	itttt	ne
 8008e3e:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008e40:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008e42:	1909      	addne	r1, r1, r4
 8008e44:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008e46:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008e48:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008e4a:	bf18      	it	ne
 8008e4c:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e4e:	bd10      	pop	{r4, pc}
 8008e50:	4613      	mov	r3, r2
 8008e52:	e7e1      	b.n	8008e18 <prvInsertBlockIntoFreeList+0x4>
 8008e54:	20003e08 	.word	0x20003e08
 8008e58:	20000df8 	.word	0x20000df8

08008e5c <pvPortMalloc>:
{
 8008e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e60:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8008e62:	f7ff f96b 	bl	800813c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8008e66:	493d      	ldr	r1, [pc, #244]	; (8008f5c <pvPortMalloc+0x100>)
 8008e68:	4d3d      	ldr	r5, [pc, #244]	; (8008f60 <pvPortMalloc+0x104>)
 8008e6a:	680b      	ldr	r3, [r1, #0]
 8008e6c:	b9fb      	cbnz	r3, 8008eae <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 8008e6e:	4a3d      	ldr	r2, [pc, #244]	; (8008f64 <pvPortMalloc+0x108>)
	xStart.xBlockSize = ( size_t ) 0;
 8008e70:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008e72:	0756      	lsls	r6, r2, #29
 8008e74:	f502 5340 	add.w	r3, r2, #12288	; 0x3000
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008e78:	bf0f      	iteee	eq
 8008e7a:	f44f 5340 	moveq.w	r3, #12288	; 0x3000
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008e7e:	3207      	addne	r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e80:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008e84:	1a9b      	subne	r3, r3, r2
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008e86:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008e88:	4e37      	ldr	r6, [pc, #220]	; (8008f68 <pvPortMalloc+0x10c>)
	uxAddress -= xHeapStructSize;
 8008e8a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e8c:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8008e90:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008e92:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8008e94:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008e98:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 8008e9a:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008e9c:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ea0:	4b32      	ldr	r3, [pc, #200]	; (8008f6c <pvPortMalloc+0x110>)
 8008ea2:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ea4:	4b32      	ldr	r3, [pc, #200]	; (8008f70 <pvPortMalloc+0x114>)
 8008ea6:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008ea8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008eac:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008eae:	682f      	ldr	r7, [r5, #0]
 8008eb0:	4227      	tst	r7, r4
 8008eb2:	d14d      	bne.n	8008f50 <pvPortMalloc+0xf4>
			if( xWantedSize > 0 )
 8008eb4:	2c00      	cmp	r4, #0
 8008eb6:	d03e      	beq.n	8008f36 <pvPortMalloc+0xda>
				xWantedSize += xHeapStructSize;
 8008eb8:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008ebc:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008ebe:	bf1c      	itt	ne
 8008ec0:	f023 0307 	bicne.w	r3, r3, #7
 8008ec4:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d042      	beq.n	8008f50 <pvPortMalloc+0xf4>
 8008eca:	4a29      	ldr	r2, [pc, #164]	; (8008f70 <pvPortMalloc+0x114>)
 8008ecc:	6816      	ldr	r6, [r2, #0]
 8008ece:	4690      	mov	r8, r2
 8008ed0:	429e      	cmp	r6, r3
 8008ed2:	d33d      	bcc.n	8008f50 <pvPortMalloc+0xf4>
				pxBlock = xStart.pxNextFreeBlock;
 8008ed4:	4a24      	ldr	r2, [pc, #144]	; (8008f68 <pvPortMalloc+0x10c>)
 8008ed6:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ed8:	6868      	ldr	r0, [r5, #4]
 8008eda:	4298      	cmp	r0, r3
 8008edc:	d201      	bcs.n	8008ee2 <pvPortMalloc+0x86>
 8008ede:	682c      	ldr	r4, [r5, #0]
 8008ee0:	b9a4      	cbnz	r4, 8008f0c <pvPortMalloc+0xb0>
				if( pxBlock != pxEnd )
 8008ee2:	6809      	ldr	r1, [r1, #0]
 8008ee4:	42a9      	cmp	r1, r5
 8008ee6:	d033      	beq.n	8008f50 <pvPortMalloc+0xf4>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ee8:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008eea:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008eec:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008eee:	1ac2      	subs	r2, r0, r3
 8008ef0:	2a10      	cmp	r2, #16
 8008ef2:	d912      	bls.n	8008f1a <pvPortMalloc+0xbe>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008ef4:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ef6:	0741      	lsls	r1, r0, #29
 8008ef8:	d00b      	beq.n	8008f12 <pvPortMalloc+0xb6>
 8008efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008efe:	f383 8811 	msr	BASEPRI, r3
 8008f02:	f3bf 8f6f 	isb	sy
 8008f06:	f3bf 8f4f 	dsb	sy
 8008f0a:	e7fe      	b.n	8008f0a <pvPortMalloc+0xae>
 8008f0c:	462a      	mov	r2, r5
 8008f0e:	4625      	mov	r5, r4
 8008f10:	e7e2      	b.n	8008ed8 <pvPortMalloc+0x7c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f12:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f14:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f16:	f7ff ff7d 	bl	8008e14 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f1a:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f1c:	4913      	ldr	r1, [pc, #76]	; (8008f6c <pvPortMalloc+0x110>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f1e:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f20:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 8008f22:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f24:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f26:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f2a:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f2c:	bf38      	it	cc
 8008f2e:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008f30:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f32:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f34:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8008f36:	f7ff f9a7 	bl	8008288 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f3a:	0763      	lsls	r3, r4, #29
 8008f3c:	d00a      	beq.n	8008f54 <pvPortMalloc+0xf8>
 8008f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f42:	f383 8811 	msr	BASEPRI, r3
 8008f46:	f3bf 8f6f 	isb	sy
 8008f4a:	f3bf 8f4f 	dsb	sy
 8008f4e:	e7fe      	b.n	8008f4e <pvPortMalloc+0xf2>
void *pvReturn = NULL;
 8008f50:	2400      	movs	r4, #0
 8008f52:	e7f0      	b.n	8008f36 <pvPortMalloc+0xda>
}
 8008f54:	4620      	mov	r0, r4
 8008f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f5a:	bf00      	nop
 8008f5c:	20000df8 	.word	0x20000df8
 8008f60:	20003dfc 	.word	0x20003dfc
 8008f64:	20000dfc 	.word	0x20000dfc
 8008f68:	20003e08 	.word	0x20003e08
 8008f6c:	20003e04 	.word	0x20003e04
 8008f70:	20003e00 	.word	0x20003e00

08008f74 <vPortFree>:
{
 8008f74:	b510      	push	{r4, lr}
	if( pv != NULL )
 8008f76:	4604      	mov	r4, r0
 8008f78:	b370      	cbz	r0, 8008fd8 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008f7a:	4a18      	ldr	r2, [pc, #96]	; (8008fdc <vPortFree+0x68>)
 8008f7c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8008f80:	6812      	ldr	r2, [r2, #0]
 8008f82:	4213      	tst	r3, r2
 8008f84:	d108      	bne.n	8008f98 <vPortFree+0x24>
 8008f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f8a:	f383 8811 	msr	BASEPRI, r3
 8008f8e:	f3bf 8f6f 	isb	sy
 8008f92:	f3bf 8f4f 	dsb	sy
 8008f96:	e7fe      	b.n	8008f96 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008f98:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8008f9c:	b141      	cbz	r1, 8008fb0 <vPortFree+0x3c>
 8008f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa2:	f383 8811 	msr	BASEPRI, r3
 8008fa6:	f3bf 8f6f 	isb	sy
 8008faa:	f3bf 8f4f 	dsb	sy
 8008fae:	e7fe      	b.n	8008fae <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008fb0:	ea23 0302 	bic.w	r3, r3, r2
 8008fb4:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8008fb8:	f7ff f8c0 	bl	800813c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008fbc:	4a08      	ldr	r2, [pc, #32]	; (8008fe0 <vPortFree+0x6c>)
 8008fbe:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008fc2:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008fc4:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008fc8:	440b      	add	r3, r1
 8008fca:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008fcc:	f7ff ff22 	bl	8008e14 <prvInsertBlockIntoFreeList>
}
 8008fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8008fd4:	f7ff b958 	b.w	8008288 <xTaskResumeAll>
}
 8008fd8:	bd10      	pop	{r4, pc}
 8008fda:	bf00      	nop
 8008fdc:	20003dfc 	.word	0x20003dfc
 8008fe0:	20003e00 	.word	0x20003e00

08008fe4 <_ZdlPvj>:
 8008fe4:	f000 b800 	b.w	8008fe8 <_ZdlPv>

08008fe8 <_ZdlPv>:
 8008fe8:	f000 b832 	b.w	8009050 <free>

08008fec <__errno>:
 8008fec:	4b01      	ldr	r3, [pc, #4]	; (8008ff4 <__errno+0x8>)
 8008fee:	6818      	ldr	r0, [r3, #0]
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop
 8008ff4:	20000024 	.word	0x20000024

08008ff8 <__libc_init_array>:
 8008ff8:	b570      	push	{r4, r5, r6, lr}
 8008ffa:	2500      	movs	r5, #0
 8008ffc:	4e0c      	ldr	r6, [pc, #48]	; (8009030 <__libc_init_array+0x38>)
 8008ffe:	4c0d      	ldr	r4, [pc, #52]	; (8009034 <__libc_init_array+0x3c>)
 8009000:	1ba4      	subs	r4, r4, r6
 8009002:	10a4      	asrs	r4, r4, #2
 8009004:	42a5      	cmp	r5, r4
 8009006:	d109      	bne.n	800901c <__libc_init_array+0x24>
 8009008:	f002 f866 	bl	800b0d8 <_init>
 800900c:	2500      	movs	r5, #0
 800900e:	4e0a      	ldr	r6, [pc, #40]	; (8009038 <__libc_init_array+0x40>)
 8009010:	4c0a      	ldr	r4, [pc, #40]	; (800903c <__libc_init_array+0x44>)
 8009012:	1ba4      	subs	r4, r4, r6
 8009014:	10a4      	asrs	r4, r4, #2
 8009016:	42a5      	cmp	r5, r4
 8009018:	d105      	bne.n	8009026 <__libc_init_array+0x2e>
 800901a:	bd70      	pop	{r4, r5, r6, pc}
 800901c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009020:	4798      	blx	r3
 8009022:	3501      	adds	r5, #1
 8009024:	e7ee      	b.n	8009004 <__libc_init_array+0xc>
 8009026:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800902a:	4798      	blx	r3
 800902c:	3501      	adds	r5, #1
 800902e:	e7f2      	b.n	8009016 <__libc_init_array+0x1e>
 8009030:	0800c100 	.word	0x0800c100
 8009034:	0800c100 	.word	0x0800c100
 8009038:	0800c100 	.word	0x0800c100
 800903c:	0800c108 	.word	0x0800c108

08009040 <malloc>:
 8009040:	4b02      	ldr	r3, [pc, #8]	; (800904c <malloc+0xc>)
 8009042:	4601      	mov	r1, r0
 8009044:	6818      	ldr	r0, [r3, #0]
 8009046:	f000 b86b 	b.w	8009120 <_malloc_r>
 800904a:	bf00      	nop
 800904c:	20000024 	.word	0x20000024

08009050 <free>:
 8009050:	4b02      	ldr	r3, [pc, #8]	; (800905c <free+0xc>)
 8009052:	4601      	mov	r1, r0
 8009054:	6818      	ldr	r0, [r3, #0]
 8009056:	f000 b817 	b.w	8009088 <_free_r>
 800905a:	bf00      	nop
 800905c:	20000024 	.word	0x20000024

08009060 <memcpy>:
 8009060:	b510      	push	{r4, lr}
 8009062:	1e43      	subs	r3, r0, #1
 8009064:	440a      	add	r2, r1
 8009066:	4291      	cmp	r1, r2
 8009068:	d100      	bne.n	800906c <memcpy+0xc>
 800906a:	bd10      	pop	{r4, pc}
 800906c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009070:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009074:	e7f7      	b.n	8009066 <memcpy+0x6>

08009076 <memset>:
 8009076:	4603      	mov	r3, r0
 8009078:	4402      	add	r2, r0
 800907a:	4293      	cmp	r3, r2
 800907c:	d100      	bne.n	8009080 <memset+0xa>
 800907e:	4770      	bx	lr
 8009080:	f803 1b01 	strb.w	r1, [r3], #1
 8009084:	e7f9      	b.n	800907a <memset+0x4>
	...

08009088 <_free_r>:
 8009088:	b538      	push	{r3, r4, r5, lr}
 800908a:	4605      	mov	r5, r0
 800908c:	2900      	cmp	r1, #0
 800908e:	d043      	beq.n	8009118 <_free_r+0x90>
 8009090:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009094:	1f0c      	subs	r4, r1, #4
 8009096:	2b00      	cmp	r3, #0
 8009098:	bfb8      	it	lt
 800909a:	18e4      	addlt	r4, r4, r3
 800909c:	f001 fb78 	bl	800a790 <__malloc_lock>
 80090a0:	4a1e      	ldr	r2, [pc, #120]	; (800911c <_free_r+0x94>)
 80090a2:	6813      	ldr	r3, [r2, #0]
 80090a4:	4610      	mov	r0, r2
 80090a6:	b933      	cbnz	r3, 80090b6 <_free_r+0x2e>
 80090a8:	6063      	str	r3, [r4, #4]
 80090aa:	6014      	str	r4, [r2, #0]
 80090ac:	4628      	mov	r0, r5
 80090ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090b2:	f001 bb6e 	b.w	800a792 <__malloc_unlock>
 80090b6:	42a3      	cmp	r3, r4
 80090b8:	d90b      	bls.n	80090d2 <_free_r+0x4a>
 80090ba:	6821      	ldr	r1, [r4, #0]
 80090bc:	1862      	adds	r2, r4, r1
 80090be:	4293      	cmp	r3, r2
 80090c0:	bf01      	itttt	eq
 80090c2:	681a      	ldreq	r2, [r3, #0]
 80090c4:	685b      	ldreq	r3, [r3, #4]
 80090c6:	1852      	addeq	r2, r2, r1
 80090c8:	6022      	streq	r2, [r4, #0]
 80090ca:	6063      	str	r3, [r4, #4]
 80090cc:	6004      	str	r4, [r0, #0]
 80090ce:	e7ed      	b.n	80090ac <_free_r+0x24>
 80090d0:	4613      	mov	r3, r2
 80090d2:	685a      	ldr	r2, [r3, #4]
 80090d4:	b10a      	cbz	r2, 80090da <_free_r+0x52>
 80090d6:	42a2      	cmp	r2, r4
 80090d8:	d9fa      	bls.n	80090d0 <_free_r+0x48>
 80090da:	6819      	ldr	r1, [r3, #0]
 80090dc:	1858      	adds	r0, r3, r1
 80090de:	42a0      	cmp	r0, r4
 80090e0:	d10b      	bne.n	80090fa <_free_r+0x72>
 80090e2:	6820      	ldr	r0, [r4, #0]
 80090e4:	4401      	add	r1, r0
 80090e6:	1858      	adds	r0, r3, r1
 80090e8:	4282      	cmp	r2, r0
 80090ea:	6019      	str	r1, [r3, #0]
 80090ec:	d1de      	bne.n	80090ac <_free_r+0x24>
 80090ee:	6810      	ldr	r0, [r2, #0]
 80090f0:	6852      	ldr	r2, [r2, #4]
 80090f2:	4401      	add	r1, r0
 80090f4:	6019      	str	r1, [r3, #0]
 80090f6:	605a      	str	r2, [r3, #4]
 80090f8:	e7d8      	b.n	80090ac <_free_r+0x24>
 80090fa:	d902      	bls.n	8009102 <_free_r+0x7a>
 80090fc:	230c      	movs	r3, #12
 80090fe:	602b      	str	r3, [r5, #0]
 8009100:	e7d4      	b.n	80090ac <_free_r+0x24>
 8009102:	6820      	ldr	r0, [r4, #0]
 8009104:	1821      	adds	r1, r4, r0
 8009106:	428a      	cmp	r2, r1
 8009108:	bf01      	itttt	eq
 800910a:	6811      	ldreq	r1, [r2, #0]
 800910c:	6852      	ldreq	r2, [r2, #4]
 800910e:	1809      	addeq	r1, r1, r0
 8009110:	6021      	streq	r1, [r4, #0]
 8009112:	6062      	str	r2, [r4, #4]
 8009114:	605c      	str	r4, [r3, #4]
 8009116:	e7c9      	b.n	80090ac <_free_r+0x24>
 8009118:	bd38      	pop	{r3, r4, r5, pc}
 800911a:	bf00      	nop
 800911c:	20003e10 	.word	0x20003e10

08009120 <_malloc_r>:
 8009120:	b570      	push	{r4, r5, r6, lr}
 8009122:	1ccd      	adds	r5, r1, #3
 8009124:	f025 0503 	bic.w	r5, r5, #3
 8009128:	3508      	adds	r5, #8
 800912a:	2d0c      	cmp	r5, #12
 800912c:	bf38      	it	cc
 800912e:	250c      	movcc	r5, #12
 8009130:	2d00      	cmp	r5, #0
 8009132:	4606      	mov	r6, r0
 8009134:	db01      	blt.n	800913a <_malloc_r+0x1a>
 8009136:	42a9      	cmp	r1, r5
 8009138:	d903      	bls.n	8009142 <_malloc_r+0x22>
 800913a:	230c      	movs	r3, #12
 800913c:	6033      	str	r3, [r6, #0]
 800913e:	2000      	movs	r0, #0
 8009140:	bd70      	pop	{r4, r5, r6, pc}
 8009142:	f001 fb25 	bl	800a790 <__malloc_lock>
 8009146:	4a21      	ldr	r2, [pc, #132]	; (80091cc <_malloc_r+0xac>)
 8009148:	6814      	ldr	r4, [r2, #0]
 800914a:	4621      	mov	r1, r4
 800914c:	b991      	cbnz	r1, 8009174 <_malloc_r+0x54>
 800914e:	4c20      	ldr	r4, [pc, #128]	; (80091d0 <_malloc_r+0xb0>)
 8009150:	6823      	ldr	r3, [r4, #0]
 8009152:	b91b      	cbnz	r3, 800915c <_malloc_r+0x3c>
 8009154:	4630      	mov	r0, r6
 8009156:	f000 fc8d 	bl	8009a74 <_sbrk_r>
 800915a:	6020      	str	r0, [r4, #0]
 800915c:	4629      	mov	r1, r5
 800915e:	4630      	mov	r0, r6
 8009160:	f000 fc88 	bl	8009a74 <_sbrk_r>
 8009164:	1c43      	adds	r3, r0, #1
 8009166:	d124      	bne.n	80091b2 <_malloc_r+0x92>
 8009168:	230c      	movs	r3, #12
 800916a:	4630      	mov	r0, r6
 800916c:	6033      	str	r3, [r6, #0]
 800916e:	f001 fb10 	bl	800a792 <__malloc_unlock>
 8009172:	e7e4      	b.n	800913e <_malloc_r+0x1e>
 8009174:	680b      	ldr	r3, [r1, #0]
 8009176:	1b5b      	subs	r3, r3, r5
 8009178:	d418      	bmi.n	80091ac <_malloc_r+0x8c>
 800917a:	2b0b      	cmp	r3, #11
 800917c:	d90f      	bls.n	800919e <_malloc_r+0x7e>
 800917e:	600b      	str	r3, [r1, #0]
 8009180:	18cc      	adds	r4, r1, r3
 8009182:	50cd      	str	r5, [r1, r3]
 8009184:	4630      	mov	r0, r6
 8009186:	f001 fb04 	bl	800a792 <__malloc_unlock>
 800918a:	f104 000b 	add.w	r0, r4, #11
 800918e:	1d23      	adds	r3, r4, #4
 8009190:	f020 0007 	bic.w	r0, r0, #7
 8009194:	1ac3      	subs	r3, r0, r3
 8009196:	d0d3      	beq.n	8009140 <_malloc_r+0x20>
 8009198:	425a      	negs	r2, r3
 800919a:	50e2      	str	r2, [r4, r3]
 800919c:	e7d0      	b.n	8009140 <_malloc_r+0x20>
 800919e:	684b      	ldr	r3, [r1, #4]
 80091a0:	428c      	cmp	r4, r1
 80091a2:	bf16      	itet	ne
 80091a4:	6063      	strne	r3, [r4, #4]
 80091a6:	6013      	streq	r3, [r2, #0]
 80091a8:	460c      	movne	r4, r1
 80091aa:	e7eb      	b.n	8009184 <_malloc_r+0x64>
 80091ac:	460c      	mov	r4, r1
 80091ae:	6849      	ldr	r1, [r1, #4]
 80091b0:	e7cc      	b.n	800914c <_malloc_r+0x2c>
 80091b2:	1cc4      	adds	r4, r0, #3
 80091b4:	f024 0403 	bic.w	r4, r4, #3
 80091b8:	42a0      	cmp	r0, r4
 80091ba:	d005      	beq.n	80091c8 <_malloc_r+0xa8>
 80091bc:	1a21      	subs	r1, r4, r0
 80091be:	4630      	mov	r0, r6
 80091c0:	f000 fc58 	bl	8009a74 <_sbrk_r>
 80091c4:	3001      	adds	r0, #1
 80091c6:	d0cf      	beq.n	8009168 <_malloc_r+0x48>
 80091c8:	6025      	str	r5, [r4, #0]
 80091ca:	e7db      	b.n	8009184 <_malloc_r+0x64>
 80091cc:	20003e10 	.word	0x20003e10
 80091d0:	20003e14 	.word	0x20003e14

080091d4 <__cvt>:
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091da:	461e      	mov	r6, r3
 80091dc:	bfbb      	ittet	lt
 80091de:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80091e2:	461e      	movlt	r6, r3
 80091e4:	2300      	movge	r3, #0
 80091e6:	232d      	movlt	r3, #45	; 0x2d
 80091e8:	b088      	sub	sp, #32
 80091ea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80091ec:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80091f0:	f027 0720 	bic.w	r7, r7, #32
 80091f4:	2f46      	cmp	r7, #70	; 0x46
 80091f6:	4614      	mov	r4, r2
 80091f8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80091fa:	700b      	strb	r3, [r1, #0]
 80091fc:	d004      	beq.n	8009208 <__cvt+0x34>
 80091fe:	2f45      	cmp	r7, #69	; 0x45
 8009200:	d100      	bne.n	8009204 <__cvt+0x30>
 8009202:	3501      	adds	r5, #1
 8009204:	2302      	movs	r3, #2
 8009206:	e000      	b.n	800920a <__cvt+0x36>
 8009208:	2303      	movs	r3, #3
 800920a:	aa07      	add	r2, sp, #28
 800920c:	9204      	str	r2, [sp, #16]
 800920e:	aa06      	add	r2, sp, #24
 8009210:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009214:	e9cd 3500 	strd	r3, r5, [sp]
 8009218:	4622      	mov	r2, r4
 800921a:	4633      	mov	r3, r6
 800921c:	f000 fce8 	bl	8009bf0 <_dtoa_r>
 8009220:	2f47      	cmp	r7, #71	; 0x47
 8009222:	4680      	mov	r8, r0
 8009224:	d102      	bne.n	800922c <__cvt+0x58>
 8009226:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009228:	07db      	lsls	r3, r3, #31
 800922a:	d526      	bpl.n	800927a <__cvt+0xa6>
 800922c:	2f46      	cmp	r7, #70	; 0x46
 800922e:	eb08 0905 	add.w	r9, r8, r5
 8009232:	d111      	bne.n	8009258 <__cvt+0x84>
 8009234:	f898 3000 	ldrb.w	r3, [r8]
 8009238:	2b30      	cmp	r3, #48	; 0x30
 800923a:	d10a      	bne.n	8009252 <__cvt+0x7e>
 800923c:	2200      	movs	r2, #0
 800923e:	2300      	movs	r3, #0
 8009240:	4620      	mov	r0, r4
 8009242:	4631      	mov	r1, r6
 8009244:	f7f7 fbb0 	bl	80009a8 <__aeabi_dcmpeq>
 8009248:	b918      	cbnz	r0, 8009252 <__cvt+0x7e>
 800924a:	f1c5 0501 	rsb	r5, r5, #1
 800924e:	f8ca 5000 	str.w	r5, [sl]
 8009252:	f8da 3000 	ldr.w	r3, [sl]
 8009256:	4499      	add	r9, r3
 8009258:	2200      	movs	r2, #0
 800925a:	2300      	movs	r3, #0
 800925c:	4620      	mov	r0, r4
 800925e:	4631      	mov	r1, r6
 8009260:	f7f7 fba2 	bl	80009a8 <__aeabi_dcmpeq>
 8009264:	b938      	cbnz	r0, 8009276 <__cvt+0xa2>
 8009266:	2230      	movs	r2, #48	; 0x30
 8009268:	9b07      	ldr	r3, [sp, #28]
 800926a:	454b      	cmp	r3, r9
 800926c:	d205      	bcs.n	800927a <__cvt+0xa6>
 800926e:	1c59      	adds	r1, r3, #1
 8009270:	9107      	str	r1, [sp, #28]
 8009272:	701a      	strb	r2, [r3, #0]
 8009274:	e7f8      	b.n	8009268 <__cvt+0x94>
 8009276:	f8cd 901c 	str.w	r9, [sp, #28]
 800927a:	4640      	mov	r0, r8
 800927c:	9b07      	ldr	r3, [sp, #28]
 800927e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009280:	eba3 0308 	sub.w	r3, r3, r8
 8009284:	6013      	str	r3, [r2, #0]
 8009286:	b008      	add	sp, #32
 8009288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800928c <__exponent>:
 800928c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800928e:	2900      	cmp	r1, #0
 8009290:	bfb4      	ite	lt
 8009292:	232d      	movlt	r3, #45	; 0x2d
 8009294:	232b      	movge	r3, #43	; 0x2b
 8009296:	4604      	mov	r4, r0
 8009298:	bfb8      	it	lt
 800929a:	4249      	neglt	r1, r1
 800929c:	2909      	cmp	r1, #9
 800929e:	f804 2b02 	strb.w	r2, [r4], #2
 80092a2:	7043      	strb	r3, [r0, #1]
 80092a4:	dd21      	ble.n	80092ea <__exponent+0x5e>
 80092a6:	f10d 0307 	add.w	r3, sp, #7
 80092aa:	461f      	mov	r7, r3
 80092ac:	260a      	movs	r6, #10
 80092ae:	fb91 f5f6 	sdiv	r5, r1, r6
 80092b2:	fb06 1115 	mls	r1, r6, r5, r1
 80092b6:	2d09      	cmp	r5, #9
 80092b8:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80092bc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80092c0:	f103 32ff 	add.w	r2, r3, #4294967295
 80092c4:	4629      	mov	r1, r5
 80092c6:	dc09      	bgt.n	80092dc <__exponent+0x50>
 80092c8:	3130      	adds	r1, #48	; 0x30
 80092ca:	3b02      	subs	r3, #2
 80092cc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80092d0:	42bb      	cmp	r3, r7
 80092d2:	4622      	mov	r2, r4
 80092d4:	d304      	bcc.n	80092e0 <__exponent+0x54>
 80092d6:	1a10      	subs	r0, r2, r0
 80092d8:	b003      	add	sp, #12
 80092da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092dc:	4613      	mov	r3, r2
 80092de:	e7e6      	b.n	80092ae <__exponent+0x22>
 80092e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092e4:	f804 2b01 	strb.w	r2, [r4], #1
 80092e8:	e7f2      	b.n	80092d0 <__exponent+0x44>
 80092ea:	2330      	movs	r3, #48	; 0x30
 80092ec:	4419      	add	r1, r3
 80092ee:	7083      	strb	r3, [r0, #2]
 80092f0:	1d02      	adds	r2, r0, #4
 80092f2:	70c1      	strb	r1, [r0, #3]
 80092f4:	e7ef      	b.n	80092d6 <__exponent+0x4a>
	...

080092f8 <_printf_float>:
 80092f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092fc:	b091      	sub	sp, #68	; 0x44
 80092fe:	460c      	mov	r4, r1
 8009300:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8009302:	4693      	mov	fp, r2
 8009304:	461e      	mov	r6, r3
 8009306:	4605      	mov	r5, r0
 8009308:	f001 fa26 	bl	800a758 <_localeconv_r>
 800930c:	6803      	ldr	r3, [r0, #0]
 800930e:	4618      	mov	r0, r3
 8009310:	9309      	str	r3, [sp, #36]	; 0x24
 8009312:	f7f6 ff1d 	bl	8000150 <strlen>
 8009316:	2300      	movs	r3, #0
 8009318:	930e      	str	r3, [sp, #56]	; 0x38
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	900a      	str	r0, [sp, #40]	; 0x28
 800931e:	3307      	adds	r3, #7
 8009320:	f023 0307 	bic.w	r3, r3, #7
 8009324:	f103 0208 	add.w	r2, r3, #8
 8009328:	f894 8018 	ldrb.w	r8, [r4, #24]
 800932c:	f8d4 a000 	ldr.w	sl, [r4]
 8009330:	603a      	str	r2, [r7, #0]
 8009332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009336:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800933a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800933e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009342:	930b      	str	r3, [sp, #44]	; 0x2c
 8009344:	f04f 32ff 	mov.w	r2, #4294967295
 8009348:	4ba6      	ldr	r3, [pc, #664]	; (80095e4 <_printf_float+0x2ec>)
 800934a:	4638      	mov	r0, r7
 800934c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800934e:	f7f7 fb5d 	bl	8000a0c <__aeabi_dcmpun>
 8009352:	bb68      	cbnz	r0, 80093b0 <_printf_float+0xb8>
 8009354:	f04f 32ff 	mov.w	r2, #4294967295
 8009358:	4ba2      	ldr	r3, [pc, #648]	; (80095e4 <_printf_float+0x2ec>)
 800935a:	4638      	mov	r0, r7
 800935c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800935e:	f7f7 fb37 	bl	80009d0 <__aeabi_dcmple>
 8009362:	bb28      	cbnz	r0, 80093b0 <_printf_float+0xb8>
 8009364:	2200      	movs	r2, #0
 8009366:	2300      	movs	r3, #0
 8009368:	4638      	mov	r0, r7
 800936a:	4649      	mov	r1, r9
 800936c:	f7f7 fb26 	bl	80009bc <__aeabi_dcmplt>
 8009370:	b110      	cbz	r0, 8009378 <_printf_float+0x80>
 8009372:	232d      	movs	r3, #45	; 0x2d
 8009374:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009378:	4f9b      	ldr	r7, [pc, #620]	; (80095e8 <_printf_float+0x2f0>)
 800937a:	4b9c      	ldr	r3, [pc, #624]	; (80095ec <_printf_float+0x2f4>)
 800937c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009380:	bf98      	it	ls
 8009382:	461f      	movls	r7, r3
 8009384:	2303      	movs	r3, #3
 8009386:	f04f 0900 	mov.w	r9, #0
 800938a:	6123      	str	r3, [r4, #16]
 800938c:	f02a 0304 	bic.w	r3, sl, #4
 8009390:	6023      	str	r3, [r4, #0]
 8009392:	9600      	str	r6, [sp, #0]
 8009394:	465b      	mov	r3, fp
 8009396:	aa0f      	add	r2, sp, #60	; 0x3c
 8009398:	4621      	mov	r1, r4
 800939a:	4628      	mov	r0, r5
 800939c:	f000 f9e2 	bl	8009764 <_printf_common>
 80093a0:	3001      	adds	r0, #1
 80093a2:	f040 8090 	bne.w	80094c6 <_printf_float+0x1ce>
 80093a6:	f04f 30ff 	mov.w	r0, #4294967295
 80093aa:	b011      	add	sp, #68	; 0x44
 80093ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093b0:	463a      	mov	r2, r7
 80093b2:	464b      	mov	r3, r9
 80093b4:	4638      	mov	r0, r7
 80093b6:	4649      	mov	r1, r9
 80093b8:	f7f7 fb28 	bl	8000a0c <__aeabi_dcmpun>
 80093bc:	b110      	cbz	r0, 80093c4 <_printf_float+0xcc>
 80093be:	4f8c      	ldr	r7, [pc, #560]	; (80095f0 <_printf_float+0x2f8>)
 80093c0:	4b8c      	ldr	r3, [pc, #560]	; (80095f4 <_printf_float+0x2fc>)
 80093c2:	e7db      	b.n	800937c <_printf_float+0x84>
 80093c4:	6863      	ldr	r3, [r4, #4]
 80093c6:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80093ca:	1c59      	adds	r1, r3, #1
 80093cc:	a80d      	add	r0, sp, #52	; 0x34
 80093ce:	a90e      	add	r1, sp, #56	; 0x38
 80093d0:	d140      	bne.n	8009454 <_printf_float+0x15c>
 80093d2:	2306      	movs	r3, #6
 80093d4:	6063      	str	r3, [r4, #4]
 80093d6:	f04f 0c00 	mov.w	ip, #0
 80093da:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80093de:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80093e2:	6863      	ldr	r3, [r4, #4]
 80093e4:	6022      	str	r2, [r4, #0]
 80093e6:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80093ea:	9300      	str	r3, [sp, #0]
 80093ec:	463a      	mov	r2, r7
 80093ee:	464b      	mov	r3, r9
 80093f0:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80093f4:	4628      	mov	r0, r5
 80093f6:	f7ff feed 	bl	80091d4 <__cvt>
 80093fa:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80093fe:	2b47      	cmp	r3, #71	; 0x47
 8009400:	4607      	mov	r7, r0
 8009402:	d109      	bne.n	8009418 <_printf_float+0x120>
 8009404:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009406:	1cd8      	adds	r0, r3, #3
 8009408:	db02      	blt.n	8009410 <_printf_float+0x118>
 800940a:	6862      	ldr	r2, [r4, #4]
 800940c:	4293      	cmp	r3, r2
 800940e:	dd47      	ble.n	80094a0 <_printf_float+0x1a8>
 8009410:	f1a8 0802 	sub.w	r8, r8, #2
 8009414:	fa5f f888 	uxtb.w	r8, r8
 8009418:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800941c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800941e:	d824      	bhi.n	800946a <_printf_float+0x172>
 8009420:	3901      	subs	r1, #1
 8009422:	4642      	mov	r2, r8
 8009424:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009428:	910d      	str	r1, [sp, #52]	; 0x34
 800942a:	f7ff ff2f 	bl	800928c <__exponent>
 800942e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009430:	4681      	mov	r9, r0
 8009432:	1813      	adds	r3, r2, r0
 8009434:	2a01      	cmp	r2, #1
 8009436:	6123      	str	r3, [r4, #16]
 8009438:	dc02      	bgt.n	8009440 <_printf_float+0x148>
 800943a:	6822      	ldr	r2, [r4, #0]
 800943c:	07d1      	lsls	r1, r2, #31
 800943e:	d501      	bpl.n	8009444 <_printf_float+0x14c>
 8009440:	3301      	adds	r3, #1
 8009442:	6123      	str	r3, [r4, #16]
 8009444:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009448:	2b00      	cmp	r3, #0
 800944a:	d0a2      	beq.n	8009392 <_printf_float+0x9a>
 800944c:	232d      	movs	r3, #45	; 0x2d
 800944e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009452:	e79e      	b.n	8009392 <_printf_float+0x9a>
 8009454:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8009458:	f000 816e 	beq.w	8009738 <_printf_float+0x440>
 800945c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009460:	d1b9      	bne.n	80093d6 <_printf_float+0xde>
 8009462:	2b00      	cmp	r3, #0
 8009464:	d1b7      	bne.n	80093d6 <_printf_float+0xde>
 8009466:	2301      	movs	r3, #1
 8009468:	e7b4      	b.n	80093d4 <_printf_float+0xdc>
 800946a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800946e:	d119      	bne.n	80094a4 <_printf_float+0x1ac>
 8009470:	2900      	cmp	r1, #0
 8009472:	6863      	ldr	r3, [r4, #4]
 8009474:	dd0c      	ble.n	8009490 <_printf_float+0x198>
 8009476:	6121      	str	r1, [r4, #16]
 8009478:	b913      	cbnz	r3, 8009480 <_printf_float+0x188>
 800947a:	6822      	ldr	r2, [r4, #0]
 800947c:	07d2      	lsls	r2, r2, #31
 800947e:	d502      	bpl.n	8009486 <_printf_float+0x18e>
 8009480:	3301      	adds	r3, #1
 8009482:	440b      	add	r3, r1
 8009484:	6123      	str	r3, [r4, #16]
 8009486:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009488:	f04f 0900 	mov.w	r9, #0
 800948c:	65a3      	str	r3, [r4, #88]	; 0x58
 800948e:	e7d9      	b.n	8009444 <_printf_float+0x14c>
 8009490:	b913      	cbnz	r3, 8009498 <_printf_float+0x1a0>
 8009492:	6822      	ldr	r2, [r4, #0]
 8009494:	07d0      	lsls	r0, r2, #31
 8009496:	d501      	bpl.n	800949c <_printf_float+0x1a4>
 8009498:	3302      	adds	r3, #2
 800949a:	e7f3      	b.n	8009484 <_printf_float+0x18c>
 800949c:	2301      	movs	r3, #1
 800949e:	e7f1      	b.n	8009484 <_printf_float+0x18c>
 80094a0:	f04f 0867 	mov.w	r8, #103	; 0x67
 80094a4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80094a8:	4293      	cmp	r3, r2
 80094aa:	db05      	blt.n	80094b8 <_printf_float+0x1c0>
 80094ac:	6822      	ldr	r2, [r4, #0]
 80094ae:	6123      	str	r3, [r4, #16]
 80094b0:	07d1      	lsls	r1, r2, #31
 80094b2:	d5e8      	bpl.n	8009486 <_printf_float+0x18e>
 80094b4:	3301      	adds	r3, #1
 80094b6:	e7e5      	b.n	8009484 <_printf_float+0x18c>
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	bfcc      	ite	gt
 80094bc:	2301      	movgt	r3, #1
 80094be:	f1c3 0302 	rsble	r3, r3, #2
 80094c2:	4413      	add	r3, r2
 80094c4:	e7de      	b.n	8009484 <_printf_float+0x18c>
 80094c6:	6823      	ldr	r3, [r4, #0]
 80094c8:	055a      	lsls	r2, r3, #21
 80094ca:	d407      	bmi.n	80094dc <_printf_float+0x1e4>
 80094cc:	6923      	ldr	r3, [r4, #16]
 80094ce:	463a      	mov	r2, r7
 80094d0:	4659      	mov	r1, fp
 80094d2:	4628      	mov	r0, r5
 80094d4:	47b0      	blx	r6
 80094d6:	3001      	adds	r0, #1
 80094d8:	d129      	bne.n	800952e <_printf_float+0x236>
 80094da:	e764      	b.n	80093a6 <_printf_float+0xae>
 80094dc:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80094e0:	f240 80d7 	bls.w	8009692 <_printf_float+0x39a>
 80094e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80094e8:	2200      	movs	r2, #0
 80094ea:	2300      	movs	r3, #0
 80094ec:	f7f7 fa5c 	bl	80009a8 <__aeabi_dcmpeq>
 80094f0:	b388      	cbz	r0, 8009556 <_printf_float+0x25e>
 80094f2:	2301      	movs	r3, #1
 80094f4:	4a40      	ldr	r2, [pc, #256]	; (80095f8 <_printf_float+0x300>)
 80094f6:	4659      	mov	r1, fp
 80094f8:	4628      	mov	r0, r5
 80094fa:	47b0      	blx	r6
 80094fc:	3001      	adds	r0, #1
 80094fe:	f43f af52 	beq.w	80093a6 <_printf_float+0xae>
 8009502:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009506:	429a      	cmp	r2, r3
 8009508:	db02      	blt.n	8009510 <_printf_float+0x218>
 800950a:	6823      	ldr	r3, [r4, #0]
 800950c:	07d8      	lsls	r0, r3, #31
 800950e:	d50e      	bpl.n	800952e <_printf_float+0x236>
 8009510:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009514:	4659      	mov	r1, fp
 8009516:	4628      	mov	r0, r5
 8009518:	47b0      	blx	r6
 800951a:	3001      	adds	r0, #1
 800951c:	f43f af43 	beq.w	80093a6 <_printf_float+0xae>
 8009520:	2700      	movs	r7, #0
 8009522:	f104 081a 	add.w	r8, r4, #26
 8009526:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009528:	3b01      	subs	r3, #1
 800952a:	42bb      	cmp	r3, r7
 800952c:	dc09      	bgt.n	8009542 <_printf_float+0x24a>
 800952e:	6823      	ldr	r3, [r4, #0]
 8009530:	079f      	lsls	r7, r3, #30
 8009532:	f100 80fd 	bmi.w	8009730 <_printf_float+0x438>
 8009536:	68e0      	ldr	r0, [r4, #12]
 8009538:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800953a:	4298      	cmp	r0, r3
 800953c:	bfb8      	it	lt
 800953e:	4618      	movlt	r0, r3
 8009540:	e733      	b.n	80093aa <_printf_float+0xb2>
 8009542:	2301      	movs	r3, #1
 8009544:	4642      	mov	r2, r8
 8009546:	4659      	mov	r1, fp
 8009548:	4628      	mov	r0, r5
 800954a:	47b0      	blx	r6
 800954c:	3001      	adds	r0, #1
 800954e:	f43f af2a 	beq.w	80093a6 <_printf_float+0xae>
 8009552:	3701      	adds	r7, #1
 8009554:	e7e7      	b.n	8009526 <_printf_float+0x22e>
 8009556:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009558:	2b00      	cmp	r3, #0
 800955a:	dc2b      	bgt.n	80095b4 <_printf_float+0x2bc>
 800955c:	2301      	movs	r3, #1
 800955e:	4a26      	ldr	r2, [pc, #152]	; (80095f8 <_printf_float+0x300>)
 8009560:	4659      	mov	r1, fp
 8009562:	4628      	mov	r0, r5
 8009564:	47b0      	blx	r6
 8009566:	3001      	adds	r0, #1
 8009568:	f43f af1d 	beq.w	80093a6 <_printf_float+0xae>
 800956c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800956e:	b923      	cbnz	r3, 800957a <_printf_float+0x282>
 8009570:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009572:	b913      	cbnz	r3, 800957a <_printf_float+0x282>
 8009574:	6823      	ldr	r3, [r4, #0]
 8009576:	07d9      	lsls	r1, r3, #31
 8009578:	d5d9      	bpl.n	800952e <_printf_float+0x236>
 800957a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800957e:	4659      	mov	r1, fp
 8009580:	4628      	mov	r0, r5
 8009582:	47b0      	blx	r6
 8009584:	3001      	adds	r0, #1
 8009586:	f43f af0e 	beq.w	80093a6 <_printf_float+0xae>
 800958a:	f04f 0800 	mov.w	r8, #0
 800958e:	f104 091a 	add.w	r9, r4, #26
 8009592:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009594:	425b      	negs	r3, r3
 8009596:	4543      	cmp	r3, r8
 8009598:	dc01      	bgt.n	800959e <_printf_float+0x2a6>
 800959a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800959c:	e797      	b.n	80094ce <_printf_float+0x1d6>
 800959e:	2301      	movs	r3, #1
 80095a0:	464a      	mov	r2, r9
 80095a2:	4659      	mov	r1, fp
 80095a4:	4628      	mov	r0, r5
 80095a6:	47b0      	blx	r6
 80095a8:	3001      	adds	r0, #1
 80095aa:	f43f aefc 	beq.w	80093a6 <_printf_float+0xae>
 80095ae:	f108 0801 	add.w	r8, r8, #1
 80095b2:	e7ee      	b.n	8009592 <_printf_float+0x29a>
 80095b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80095b8:	429a      	cmp	r2, r3
 80095ba:	bfa8      	it	ge
 80095bc:	461a      	movge	r2, r3
 80095be:	2a00      	cmp	r2, #0
 80095c0:	4690      	mov	r8, r2
 80095c2:	dd07      	ble.n	80095d4 <_printf_float+0x2dc>
 80095c4:	4613      	mov	r3, r2
 80095c6:	4659      	mov	r1, fp
 80095c8:	463a      	mov	r2, r7
 80095ca:	4628      	mov	r0, r5
 80095cc:	47b0      	blx	r6
 80095ce:	3001      	adds	r0, #1
 80095d0:	f43f aee9 	beq.w	80093a6 <_printf_float+0xae>
 80095d4:	f104 031a 	add.w	r3, r4, #26
 80095d8:	f04f 0a00 	mov.w	sl, #0
 80095dc:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80095e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80095e2:	e015      	b.n	8009610 <_printf_float+0x318>
 80095e4:	7fefffff 	.word	0x7fefffff
 80095e8:	0800bea4 	.word	0x0800bea4
 80095ec:	0800bea0 	.word	0x0800bea0
 80095f0:	0800beac 	.word	0x0800beac
 80095f4:	0800bea8 	.word	0x0800bea8
 80095f8:	0800beb0 	.word	0x0800beb0
 80095fc:	2301      	movs	r3, #1
 80095fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009600:	4659      	mov	r1, fp
 8009602:	4628      	mov	r0, r5
 8009604:	47b0      	blx	r6
 8009606:	3001      	adds	r0, #1
 8009608:	f43f aecd 	beq.w	80093a6 <_printf_float+0xae>
 800960c:	f10a 0a01 	add.w	sl, sl, #1
 8009610:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8009614:	eba9 0308 	sub.w	r3, r9, r8
 8009618:	4553      	cmp	r3, sl
 800961a:	dcef      	bgt.n	80095fc <_printf_float+0x304>
 800961c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009620:	429a      	cmp	r2, r3
 8009622:	444f      	add	r7, r9
 8009624:	db14      	blt.n	8009650 <_printf_float+0x358>
 8009626:	6823      	ldr	r3, [r4, #0]
 8009628:	07da      	lsls	r2, r3, #31
 800962a:	d411      	bmi.n	8009650 <_printf_float+0x358>
 800962c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800962e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009630:	eba3 0209 	sub.w	r2, r3, r9
 8009634:	eba3 0901 	sub.w	r9, r3, r1
 8009638:	4591      	cmp	r9, r2
 800963a:	bfa8      	it	ge
 800963c:	4691      	movge	r9, r2
 800963e:	f1b9 0f00 	cmp.w	r9, #0
 8009642:	dc0d      	bgt.n	8009660 <_printf_float+0x368>
 8009644:	2700      	movs	r7, #0
 8009646:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800964a:	f104 081a 	add.w	r8, r4, #26
 800964e:	e018      	b.n	8009682 <_printf_float+0x38a>
 8009650:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009654:	4659      	mov	r1, fp
 8009656:	4628      	mov	r0, r5
 8009658:	47b0      	blx	r6
 800965a:	3001      	adds	r0, #1
 800965c:	d1e6      	bne.n	800962c <_printf_float+0x334>
 800965e:	e6a2      	b.n	80093a6 <_printf_float+0xae>
 8009660:	464b      	mov	r3, r9
 8009662:	463a      	mov	r2, r7
 8009664:	4659      	mov	r1, fp
 8009666:	4628      	mov	r0, r5
 8009668:	47b0      	blx	r6
 800966a:	3001      	adds	r0, #1
 800966c:	d1ea      	bne.n	8009644 <_printf_float+0x34c>
 800966e:	e69a      	b.n	80093a6 <_printf_float+0xae>
 8009670:	2301      	movs	r3, #1
 8009672:	4642      	mov	r2, r8
 8009674:	4659      	mov	r1, fp
 8009676:	4628      	mov	r0, r5
 8009678:	47b0      	blx	r6
 800967a:	3001      	adds	r0, #1
 800967c:	f43f ae93 	beq.w	80093a6 <_printf_float+0xae>
 8009680:	3701      	adds	r7, #1
 8009682:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009686:	1a9b      	subs	r3, r3, r2
 8009688:	eba3 0309 	sub.w	r3, r3, r9
 800968c:	42bb      	cmp	r3, r7
 800968e:	dcef      	bgt.n	8009670 <_printf_float+0x378>
 8009690:	e74d      	b.n	800952e <_printf_float+0x236>
 8009692:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009694:	2a01      	cmp	r2, #1
 8009696:	dc01      	bgt.n	800969c <_printf_float+0x3a4>
 8009698:	07db      	lsls	r3, r3, #31
 800969a:	d538      	bpl.n	800970e <_printf_float+0x416>
 800969c:	2301      	movs	r3, #1
 800969e:	463a      	mov	r2, r7
 80096a0:	4659      	mov	r1, fp
 80096a2:	4628      	mov	r0, r5
 80096a4:	47b0      	blx	r6
 80096a6:	3001      	adds	r0, #1
 80096a8:	f43f ae7d 	beq.w	80093a6 <_printf_float+0xae>
 80096ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096b0:	4659      	mov	r1, fp
 80096b2:	4628      	mov	r0, r5
 80096b4:	47b0      	blx	r6
 80096b6:	3001      	adds	r0, #1
 80096b8:	f107 0701 	add.w	r7, r7, #1
 80096bc:	f43f ae73 	beq.w	80093a6 <_printf_float+0xae>
 80096c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80096c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096c6:	2200      	movs	r2, #0
 80096c8:	f103 38ff 	add.w	r8, r3, #4294967295
 80096cc:	2300      	movs	r3, #0
 80096ce:	f7f7 f96b 	bl	80009a8 <__aeabi_dcmpeq>
 80096d2:	b9c0      	cbnz	r0, 8009706 <_printf_float+0x40e>
 80096d4:	4643      	mov	r3, r8
 80096d6:	463a      	mov	r2, r7
 80096d8:	4659      	mov	r1, fp
 80096da:	4628      	mov	r0, r5
 80096dc:	47b0      	blx	r6
 80096de:	3001      	adds	r0, #1
 80096e0:	d10d      	bne.n	80096fe <_printf_float+0x406>
 80096e2:	e660      	b.n	80093a6 <_printf_float+0xae>
 80096e4:	2301      	movs	r3, #1
 80096e6:	4642      	mov	r2, r8
 80096e8:	4659      	mov	r1, fp
 80096ea:	4628      	mov	r0, r5
 80096ec:	47b0      	blx	r6
 80096ee:	3001      	adds	r0, #1
 80096f0:	f43f ae59 	beq.w	80093a6 <_printf_float+0xae>
 80096f4:	3701      	adds	r7, #1
 80096f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096f8:	3b01      	subs	r3, #1
 80096fa:	42bb      	cmp	r3, r7
 80096fc:	dcf2      	bgt.n	80096e4 <_printf_float+0x3ec>
 80096fe:	464b      	mov	r3, r9
 8009700:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009704:	e6e4      	b.n	80094d0 <_printf_float+0x1d8>
 8009706:	2700      	movs	r7, #0
 8009708:	f104 081a 	add.w	r8, r4, #26
 800970c:	e7f3      	b.n	80096f6 <_printf_float+0x3fe>
 800970e:	2301      	movs	r3, #1
 8009710:	e7e1      	b.n	80096d6 <_printf_float+0x3de>
 8009712:	2301      	movs	r3, #1
 8009714:	4642      	mov	r2, r8
 8009716:	4659      	mov	r1, fp
 8009718:	4628      	mov	r0, r5
 800971a:	47b0      	blx	r6
 800971c:	3001      	adds	r0, #1
 800971e:	f43f ae42 	beq.w	80093a6 <_printf_float+0xae>
 8009722:	3701      	adds	r7, #1
 8009724:	68e3      	ldr	r3, [r4, #12]
 8009726:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009728:	1a9b      	subs	r3, r3, r2
 800972a:	42bb      	cmp	r3, r7
 800972c:	dcf1      	bgt.n	8009712 <_printf_float+0x41a>
 800972e:	e702      	b.n	8009536 <_printf_float+0x23e>
 8009730:	2700      	movs	r7, #0
 8009732:	f104 0819 	add.w	r8, r4, #25
 8009736:	e7f5      	b.n	8009724 <_printf_float+0x42c>
 8009738:	2b00      	cmp	r3, #0
 800973a:	f43f ae94 	beq.w	8009466 <_printf_float+0x16e>
 800973e:	f04f 0c00 	mov.w	ip, #0
 8009742:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8009746:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800974a:	6022      	str	r2, [r4, #0]
 800974c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8009750:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8009754:	9300      	str	r3, [sp, #0]
 8009756:	463a      	mov	r2, r7
 8009758:	464b      	mov	r3, r9
 800975a:	4628      	mov	r0, r5
 800975c:	f7ff fd3a 	bl	80091d4 <__cvt>
 8009760:	4607      	mov	r7, r0
 8009762:	e64f      	b.n	8009404 <_printf_float+0x10c>

08009764 <_printf_common>:
 8009764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009768:	4691      	mov	r9, r2
 800976a:	461f      	mov	r7, r3
 800976c:	688a      	ldr	r2, [r1, #8]
 800976e:	690b      	ldr	r3, [r1, #16]
 8009770:	4606      	mov	r6, r0
 8009772:	4293      	cmp	r3, r2
 8009774:	bfb8      	it	lt
 8009776:	4613      	movlt	r3, r2
 8009778:	f8c9 3000 	str.w	r3, [r9]
 800977c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009780:	460c      	mov	r4, r1
 8009782:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009786:	b112      	cbz	r2, 800978e <_printf_common+0x2a>
 8009788:	3301      	adds	r3, #1
 800978a:	f8c9 3000 	str.w	r3, [r9]
 800978e:	6823      	ldr	r3, [r4, #0]
 8009790:	0699      	lsls	r1, r3, #26
 8009792:	bf42      	ittt	mi
 8009794:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009798:	3302      	addmi	r3, #2
 800979a:	f8c9 3000 	strmi.w	r3, [r9]
 800979e:	6825      	ldr	r5, [r4, #0]
 80097a0:	f015 0506 	ands.w	r5, r5, #6
 80097a4:	d107      	bne.n	80097b6 <_printf_common+0x52>
 80097a6:	f104 0a19 	add.w	sl, r4, #25
 80097aa:	68e3      	ldr	r3, [r4, #12]
 80097ac:	f8d9 2000 	ldr.w	r2, [r9]
 80097b0:	1a9b      	subs	r3, r3, r2
 80097b2:	42ab      	cmp	r3, r5
 80097b4:	dc29      	bgt.n	800980a <_printf_common+0xa6>
 80097b6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80097ba:	6822      	ldr	r2, [r4, #0]
 80097bc:	3300      	adds	r3, #0
 80097be:	bf18      	it	ne
 80097c0:	2301      	movne	r3, #1
 80097c2:	0692      	lsls	r2, r2, #26
 80097c4:	d42e      	bmi.n	8009824 <_printf_common+0xc0>
 80097c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80097ca:	4639      	mov	r1, r7
 80097cc:	4630      	mov	r0, r6
 80097ce:	47c0      	blx	r8
 80097d0:	3001      	adds	r0, #1
 80097d2:	d021      	beq.n	8009818 <_printf_common+0xb4>
 80097d4:	6823      	ldr	r3, [r4, #0]
 80097d6:	68e5      	ldr	r5, [r4, #12]
 80097d8:	f003 0306 	and.w	r3, r3, #6
 80097dc:	2b04      	cmp	r3, #4
 80097de:	bf18      	it	ne
 80097e0:	2500      	movne	r5, #0
 80097e2:	f8d9 2000 	ldr.w	r2, [r9]
 80097e6:	f04f 0900 	mov.w	r9, #0
 80097ea:	bf08      	it	eq
 80097ec:	1aad      	subeq	r5, r5, r2
 80097ee:	68a3      	ldr	r3, [r4, #8]
 80097f0:	6922      	ldr	r2, [r4, #16]
 80097f2:	bf08      	it	eq
 80097f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80097f8:	4293      	cmp	r3, r2
 80097fa:	bfc4      	itt	gt
 80097fc:	1a9b      	subgt	r3, r3, r2
 80097fe:	18ed      	addgt	r5, r5, r3
 8009800:	341a      	adds	r4, #26
 8009802:	454d      	cmp	r5, r9
 8009804:	d11a      	bne.n	800983c <_printf_common+0xd8>
 8009806:	2000      	movs	r0, #0
 8009808:	e008      	b.n	800981c <_printf_common+0xb8>
 800980a:	2301      	movs	r3, #1
 800980c:	4652      	mov	r2, sl
 800980e:	4639      	mov	r1, r7
 8009810:	4630      	mov	r0, r6
 8009812:	47c0      	blx	r8
 8009814:	3001      	adds	r0, #1
 8009816:	d103      	bne.n	8009820 <_printf_common+0xbc>
 8009818:	f04f 30ff 	mov.w	r0, #4294967295
 800981c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009820:	3501      	adds	r5, #1
 8009822:	e7c2      	b.n	80097aa <_printf_common+0x46>
 8009824:	2030      	movs	r0, #48	; 0x30
 8009826:	18e1      	adds	r1, r4, r3
 8009828:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800982c:	1c5a      	adds	r2, r3, #1
 800982e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009832:	4422      	add	r2, r4
 8009834:	3302      	adds	r3, #2
 8009836:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800983a:	e7c4      	b.n	80097c6 <_printf_common+0x62>
 800983c:	2301      	movs	r3, #1
 800983e:	4622      	mov	r2, r4
 8009840:	4639      	mov	r1, r7
 8009842:	4630      	mov	r0, r6
 8009844:	47c0      	blx	r8
 8009846:	3001      	adds	r0, #1
 8009848:	d0e6      	beq.n	8009818 <_printf_common+0xb4>
 800984a:	f109 0901 	add.w	r9, r9, #1
 800984e:	e7d8      	b.n	8009802 <_printf_common+0x9e>

08009850 <_printf_i>:
 8009850:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009854:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009858:	460c      	mov	r4, r1
 800985a:	7e09      	ldrb	r1, [r1, #24]
 800985c:	b085      	sub	sp, #20
 800985e:	296e      	cmp	r1, #110	; 0x6e
 8009860:	4617      	mov	r7, r2
 8009862:	4606      	mov	r6, r0
 8009864:	4698      	mov	r8, r3
 8009866:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009868:	f000 80b3 	beq.w	80099d2 <_printf_i+0x182>
 800986c:	d822      	bhi.n	80098b4 <_printf_i+0x64>
 800986e:	2963      	cmp	r1, #99	; 0x63
 8009870:	d036      	beq.n	80098e0 <_printf_i+0x90>
 8009872:	d80a      	bhi.n	800988a <_printf_i+0x3a>
 8009874:	2900      	cmp	r1, #0
 8009876:	f000 80b9 	beq.w	80099ec <_printf_i+0x19c>
 800987a:	2958      	cmp	r1, #88	; 0x58
 800987c:	f000 8083 	beq.w	8009986 <_printf_i+0x136>
 8009880:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009884:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009888:	e032      	b.n	80098f0 <_printf_i+0xa0>
 800988a:	2964      	cmp	r1, #100	; 0x64
 800988c:	d001      	beq.n	8009892 <_printf_i+0x42>
 800988e:	2969      	cmp	r1, #105	; 0x69
 8009890:	d1f6      	bne.n	8009880 <_printf_i+0x30>
 8009892:	6820      	ldr	r0, [r4, #0]
 8009894:	6813      	ldr	r3, [r2, #0]
 8009896:	0605      	lsls	r5, r0, #24
 8009898:	f103 0104 	add.w	r1, r3, #4
 800989c:	d52a      	bpl.n	80098f4 <_printf_i+0xa4>
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	6011      	str	r1, [r2, #0]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	da03      	bge.n	80098ae <_printf_i+0x5e>
 80098a6:	222d      	movs	r2, #45	; 0x2d
 80098a8:	425b      	negs	r3, r3
 80098aa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80098ae:	486f      	ldr	r0, [pc, #444]	; (8009a6c <_printf_i+0x21c>)
 80098b0:	220a      	movs	r2, #10
 80098b2:	e039      	b.n	8009928 <_printf_i+0xd8>
 80098b4:	2973      	cmp	r1, #115	; 0x73
 80098b6:	f000 809d 	beq.w	80099f4 <_printf_i+0x1a4>
 80098ba:	d808      	bhi.n	80098ce <_printf_i+0x7e>
 80098bc:	296f      	cmp	r1, #111	; 0x6f
 80098be:	d020      	beq.n	8009902 <_printf_i+0xb2>
 80098c0:	2970      	cmp	r1, #112	; 0x70
 80098c2:	d1dd      	bne.n	8009880 <_printf_i+0x30>
 80098c4:	6823      	ldr	r3, [r4, #0]
 80098c6:	f043 0320 	orr.w	r3, r3, #32
 80098ca:	6023      	str	r3, [r4, #0]
 80098cc:	e003      	b.n	80098d6 <_printf_i+0x86>
 80098ce:	2975      	cmp	r1, #117	; 0x75
 80098d0:	d017      	beq.n	8009902 <_printf_i+0xb2>
 80098d2:	2978      	cmp	r1, #120	; 0x78
 80098d4:	d1d4      	bne.n	8009880 <_printf_i+0x30>
 80098d6:	2378      	movs	r3, #120	; 0x78
 80098d8:	4865      	ldr	r0, [pc, #404]	; (8009a70 <_printf_i+0x220>)
 80098da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80098de:	e055      	b.n	800998c <_printf_i+0x13c>
 80098e0:	6813      	ldr	r3, [r2, #0]
 80098e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098e6:	1d19      	adds	r1, r3, #4
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	6011      	str	r1, [r2, #0]
 80098ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80098f0:	2301      	movs	r3, #1
 80098f2:	e08c      	b.n	8009a0e <_printf_i+0x1be>
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80098fa:	6011      	str	r1, [r2, #0]
 80098fc:	bf18      	it	ne
 80098fe:	b21b      	sxthne	r3, r3
 8009900:	e7cf      	b.n	80098a2 <_printf_i+0x52>
 8009902:	6813      	ldr	r3, [r2, #0]
 8009904:	6825      	ldr	r5, [r4, #0]
 8009906:	1d18      	adds	r0, r3, #4
 8009908:	6010      	str	r0, [r2, #0]
 800990a:	0628      	lsls	r0, r5, #24
 800990c:	d501      	bpl.n	8009912 <_printf_i+0xc2>
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	e002      	b.n	8009918 <_printf_i+0xc8>
 8009912:	0668      	lsls	r0, r5, #25
 8009914:	d5fb      	bpl.n	800990e <_printf_i+0xbe>
 8009916:	881b      	ldrh	r3, [r3, #0]
 8009918:	296f      	cmp	r1, #111	; 0x6f
 800991a:	bf14      	ite	ne
 800991c:	220a      	movne	r2, #10
 800991e:	2208      	moveq	r2, #8
 8009920:	4852      	ldr	r0, [pc, #328]	; (8009a6c <_printf_i+0x21c>)
 8009922:	2100      	movs	r1, #0
 8009924:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009928:	6865      	ldr	r5, [r4, #4]
 800992a:	2d00      	cmp	r5, #0
 800992c:	60a5      	str	r5, [r4, #8]
 800992e:	f2c0 8095 	blt.w	8009a5c <_printf_i+0x20c>
 8009932:	6821      	ldr	r1, [r4, #0]
 8009934:	f021 0104 	bic.w	r1, r1, #4
 8009938:	6021      	str	r1, [r4, #0]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d13d      	bne.n	80099ba <_printf_i+0x16a>
 800993e:	2d00      	cmp	r5, #0
 8009940:	f040 808e 	bne.w	8009a60 <_printf_i+0x210>
 8009944:	4665      	mov	r5, ip
 8009946:	2a08      	cmp	r2, #8
 8009948:	d10b      	bne.n	8009962 <_printf_i+0x112>
 800994a:	6823      	ldr	r3, [r4, #0]
 800994c:	07db      	lsls	r3, r3, #31
 800994e:	d508      	bpl.n	8009962 <_printf_i+0x112>
 8009950:	6923      	ldr	r3, [r4, #16]
 8009952:	6862      	ldr	r2, [r4, #4]
 8009954:	429a      	cmp	r2, r3
 8009956:	bfde      	ittt	le
 8009958:	2330      	movle	r3, #48	; 0x30
 800995a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800995e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009962:	ebac 0305 	sub.w	r3, ip, r5
 8009966:	6123      	str	r3, [r4, #16]
 8009968:	f8cd 8000 	str.w	r8, [sp]
 800996c:	463b      	mov	r3, r7
 800996e:	aa03      	add	r2, sp, #12
 8009970:	4621      	mov	r1, r4
 8009972:	4630      	mov	r0, r6
 8009974:	f7ff fef6 	bl	8009764 <_printf_common>
 8009978:	3001      	adds	r0, #1
 800997a:	d14d      	bne.n	8009a18 <_printf_i+0x1c8>
 800997c:	f04f 30ff 	mov.w	r0, #4294967295
 8009980:	b005      	add	sp, #20
 8009982:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009986:	4839      	ldr	r0, [pc, #228]	; (8009a6c <_printf_i+0x21c>)
 8009988:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800998c:	6813      	ldr	r3, [r2, #0]
 800998e:	6821      	ldr	r1, [r4, #0]
 8009990:	1d1d      	adds	r5, r3, #4
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	6015      	str	r5, [r2, #0]
 8009996:	060a      	lsls	r2, r1, #24
 8009998:	d50b      	bpl.n	80099b2 <_printf_i+0x162>
 800999a:	07ca      	lsls	r2, r1, #31
 800999c:	bf44      	itt	mi
 800999e:	f041 0120 	orrmi.w	r1, r1, #32
 80099a2:	6021      	strmi	r1, [r4, #0]
 80099a4:	b91b      	cbnz	r3, 80099ae <_printf_i+0x15e>
 80099a6:	6822      	ldr	r2, [r4, #0]
 80099a8:	f022 0220 	bic.w	r2, r2, #32
 80099ac:	6022      	str	r2, [r4, #0]
 80099ae:	2210      	movs	r2, #16
 80099b0:	e7b7      	b.n	8009922 <_printf_i+0xd2>
 80099b2:	064d      	lsls	r5, r1, #25
 80099b4:	bf48      	it	mi
 80099b6:	b29b      	uxthmi	r3, r3
 80099b8:	e7ef      	b.n	800999a <_printf_i+0x14a>
 80099ba:	4665      	mov	r5, ip
 80099bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80099c0:	fb02 3311 	mls	r3, r2, r1, r3
 80099c4:	5cc3      	ldrb	r3, [r0, r3]
 80099c6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80099ca:	460b      	mov	r3, r1
 80099cc:	2900      	cmp	r1, #0
 80099ce:	d1f5      	bne.n	80099bc <_printf_i+0x16c>
 80099d0:	e7b9      	b.n	8009946 <_printf_i+0xf6>
 80099d2:	6813      	ldr	r3, [r2, #0]
 80099d4:	6825      	ldr	r5, [r4, #0]
 80099d6:	1d18      	adds	r0, r3, #4
 80099d8:	6961      	ldr	r1, [r4, #20]
 80099da:	6010      	str	r0, [r2, #0]
 80099dc:	0628      	lsls	r0, r5, #24
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	d501      	bpl.n	80099e6 <_printf_i+0x196>
 80099e2:	6019      	str	r1, [r3, #0]
 80099e4:	e002      	b.n	80099ec <_printf_i+0x19c>
 80099e6:	066a      	lsls	r2, r5, #25
 80099e8:	d5fb      	bpl.n	80099e2 <_printf_i+0x192>
 80099ea:	8019      	strh	r1, [r3, #0]
 80099ec:	2300      	movs	r3, #0
 80099ee:	4665      	mov	r5, ip
 80099f0:	6123      	str	r3, [r4, #16]
 80099f2:	e7b9      	b.n	8009968 <_printf_i+0x118>
 80099f4:	6813      	ldr	r3, [r2, #0]
 80099f6:	1d19      	adds	r1, r3, #4
 80099f8:	6011      	str	r1, [r2, #0]
 80099fa:	681d      	ldr	r5, [r3, #0]
 80099fc:	6862      	ldr	r2, [r4, #4]
 80099fe:	2100      	movs	r1, #0
 8009a00:	4628      	mov	r0, r5
 8009a02:	f000 feb7 	bl	800a774 <memchr>
 8009a06:	b108      	cbz	r0, 8009a0c <_printf_i+0x1bc>
 8009a08:	1b40      	subs	r0, r0, r5
 8009a0a:	6060      	str	r0, [r4, #4]
 8009a0c:	6863      	ldr	r3, [r4, #4]
 8009a0e:	6123      	str	r3, [r4, #16]
 8009a10:	2300      	movs	r3, #0
 8009a12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a16:	e7a7      	b.n	8009968 <_printf_i+0x118>
 8009a18:	6923      	ldr	r3, [r4, #16]
 8009a1a:	462a      	mov	r2, r5
 8009a1c:	4639      	mov	r1, r7
 8009a1e:	4630      	mov	r0, r6
 8009a20:	47c0      	blx	r8
 8009a22:	3001      	adds	r0, #1
 8009a24:	d0aa      	beq.n	800997c <_printf_i+0x12c>
 8009a26:	6823      	ldr	r3, [r4, #0]
 8009a28:	079b      	lsls	r3, r3, #30
 8009a2a:	d413      	bmi.n	8009a54 <_printf_i+0x204>
 8009a2c:	68e0      	ldr	r0, [r4, #12]
 8009a2e:	9b03      	ldr	r3, [sp, #12]
 8009a30:	4298      	cmp	r0, r3
 8009a32:	bfb8      	it	lt
 8009a34:	4618      	movlt	r0, r3
 8009a36:	e7a3      	b.n	8009980 <_printf_i+0x130>
 8009a38:	2301      	movs	r3, #1
 8009a3a:	464a      	mov	r2, r9
 8009a3c:	4639      	mov	r1, r7
 8009a3e:	4630      	mov	r0, r6
 8009a40:	47c0      	blx	r8
 8009a42:	3001      	adds	r0, #1
 8009a44:	d09a      	beq.n	800997c <_printf_i+0x12c>
 8009a46:	3501      	adds	r5, #1
 8009a48:	68e3      	ldr	r3, [r4, #12]
 8009a4a:	9a03      	ldr	r2, [sp, #12]
 8009a4c:	1a9b      	subs	r3, r3, r2
 8009a4e:	42ab      	cmp	r3, r5
 8009a50:	dcf2      	bgt.n	8009a38 <_printf_i+0x1e8>
 8009a52:	e7eb      	b.n	8009a2c <_printf_i+0x1dc>
 8009a54:	2500      	movs	r5, #0
 8009a56:	f104 0919 	add.w	r9, r4, #25
 8009a5a:	e7f5      	b.n	8009a48 <_printf_i+0x1f8>
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d1ac      	bne.n	80099ba <_printf_i+0x16a>
 8009a60:	7803      	ldrb	r3, [r0, #0]
 8009a62:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a66:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a6a:	e76c      	b.n	8009946 <_printf_i+0xf6>
 8009a6c:	0800beb2 	.word	0x0800beb2
 8009a70:	0800bec3 	.word	0x0800bec3

08009a74 <_sbrk_r>:
 8009a74:	b538      	push	{r3, r4, r5, lr}
 8009a76:	2300      	movs	r3, #0
 8009a78:	4c05      	ldr	r4, [pc, #20]	; (8009a90 <_sbrk_r+0x1c>)
 8009a7a:	4605      	mov	r5, r0
 8009a7c:	4608      	mov	r0, r1
 8009a7e:	6023      	str	r3, [r4, #0]
 8009a80:	f7f8 ff90 	bl	80029a4 <_sbrk>
 8009a84:	1c43      	adds	r3, r0, #1
 8009a86:	d102      	bne.n	8009a8e <_sbrk_r+0x1a>
 8009a88:	6823      	ldr	r3, [r4, #0]
 8009a8a:	b103      	cbz	r3, 8009a8e <_sbrk_r+0x1a>
 8009a8c:	602b      	str	r3, [r5, #0]
 8009a8e:	bd38      	pop	{r3, r4, r5, pc}
 8009a90:	20003e5c 	.word	0x20003e5c

08009a94 <siprintf>:
 8009a94:	b40e      	push	{r1, r2, r3}
 8009a96:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009a9a:	b500      	push	{lr}
 8009a9c:	b09c      	sub	sp, #112	; 0x70
 8009a9e:	ab1d      	add	r3, sp, #116	; 0x74
 8009aa0:	9002      	str	r0, [sp, #8]
 8009aa2:	9006      	str	r0, [sp, #24]
 8009aa4:	9107      	str	r1, [sp, #28]
 8009aa6:	9104      	str	r1, [sp, #16]
 8009aa8:	4808      	ldr	r0, [pc, #32]	; (8009acc <siprintf+0x38>)
 8009aaa:	4909      	ldr	r1, [pc, #36]	; (8009ad0 <siprintf+0x3c>)
 8009aac:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ab0:	9105      	str	r1, [sp, #20]
 8009ab2:	6800      	ldr	r0, [r0, #0]
 8009ab4:	a902      	add	r1, sp, #8
 8009ab6:	9301      	str	r3, [sp, #4]
 8009ab8:	f001 f9b0 	bl	800ae1c <_svfiprintf_r>
 8009abc:	2200      	movs	r2, #0
 8009abe:	9b02      	ldr	r3, [sp, #8]
 8009ac0:	701a      	strb	r2, [r3, #0]
 8009ac2:	b01c      	add	sp, #112	; 0x70
 8009ac4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ac8:	b003      	add	sp, #12
 8009aca:	4770      	bx	lr
 8009acc:	20000024 	.word	0x20000024
 8009ad0:	ffff0208 	.word	0xffff0208

08009ad4 <quorem>:
 8009ad4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ad8:	6903      	ldr	r3, [r0, #16]
 8009ada:	690c      	ldr	r4, [r1, #16]
 8009adc:	4680      	mov	r8, r0
 8009ade:	42a3      	cmp	r3, r4
 8009ae0:	f2c0 8084 	blt.w	8009bec <quorem+0x118>
 8009ae4:	3c01      	subs	r4, #1
 8009ae6:	f101 0714 	add.w	r7, r1, #20
 8009aea:	f100 0614 	add.w	r6, r0, #20
 8009aee:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009af2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009af6:	3501      	adds	r5, #1
 8009af8:	fbb0 f5f5 	udiv	r5, r0, r5
 8009afc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009b00:	eb06 030c 	add.w	r3, r6, ip
 8009b04:	eb07 090c 	add.w	r9, r7, ip
 8009b08:	9301      	str	r3, [sp, #4]
 8009b0a:	b39d      	cbz	r5, 8009b74 <quorem+0xa0>
 8009b0c:	f04f 0a00 	mov.w	sl, #0
 8009b10:	4638      	mov	r0, r7
 8009b12:	46b6      	mov	lr, r6
 8009b14:	46d3      	mov	fp, sl
 8009b16:	f850 2b04 	ldr.w	r2, [r0], #4
 8009b1a:	b293      	uxth	r3, r2
 8009b1c:	fb05 a303 	mla	r3, r5, r3, sl
 8009b20:	0c12      	lsrs	r2, r2, #16
 8009b22:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009b26:	fb05 a202 	mla	r2, r5, r2, sl
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	ebab 0303 	sub.w	r3, fp, r3
 8009b30:	f8de b000 	ldr.w	fp, [lr]
 8009b34:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009b38:	fa1f fb8b 	uxth.w	fp, fp
 8009b3c:	445b      	add	r3, fp
 8009b3e:	fa1f fb82 	uxth.w	fp, r2
 8009b42:	f8de 2000 	ldr.w	r2, [lr]
 8009b46:	4581      	cmp	r9, r0
 8009b48:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009b4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009b50:	b29b      	uxth	r3, r3
 8009b52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b56:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009b5a:	f84e 3b04 	str.w	r3, [lr], #4
 8009b5e:	d2da      	bcs.n	8009b16 <quorem+0x42>
 8009b60:	f856 300c 	ldr.w	r3, [r6, ip]
 8009b64:	b933      	cbnz	r3, 8009b74 <quorem+0xa0>
 8009b66:	9b01      	ldr	r3, [sp, #4]
 8009b68:	3b04      	subs	r3, #4
 8009b6a:	429e      	cmp	r6, r3
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	d331      	bcc.n	8009bd4 <quorem+0x100>
 8009b70:	f8c8 4010 	str.w	r4, [r8, #16]
 8009b74:	4640      	mov	r0, r8
 8009b76:	f001 f821 	bl	800abbc <__mcmp>
 8009b7a:	2800      	cmp	r0, #0
 8009b7c:	db26      	blt.n	8009bcc <quorem+0xf8>
 8009b7e:	4630      	mov	r0, r6
 8009b80:	f04f 0c00 	mov.w	ip, #0
 8009b84:	3501      	adds	r5, #1
 8009b86:	f857 1b04 	ldr.w	r1, [r7], #4
 8009b8a:	f8d0 e000 	ldr.w	lr, [r0]
 8009b8e:	b28b      	uxth	r3, r1
 8009b90:	ebac 0303 	sub.w	r3, ip, r3
 8009b94:	fa1f f28e 	uxth.w	r2, lr
 8009b98:	4413      	add	r3, r2
 8009b9a:	0c0a      	lsrs	r2, r1, #16
 8009b9c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009ba0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009baa:	45b9      	cmp	r9, r7
 8009bac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009bb0:	f840 3b04 	str.w	r3, [r0], #4
 8009bb4:	d2e7      	bcs.n	8009b86 <quorem+0xb2>
 8009bb6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009bba:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009bbe:	b92a      	cbnz	r2, 8009bcc <quorem+0xf8>
 8009bc0:	3b04      	subs	r3, #4
 8009bc2:	429e      	cmp	r6, r3
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	d30b      	bcc.n	8009be0 <quorem+0x10c>
 8009bc8:	f8c8 4010 	str.w	r4, [r8, #16]
 8009bcc:	4628      	mov	r0, r5
 8009bce:	b003      	add	sp, #12
 8009bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bd4:	6812      	ldr	r2, [r2, #0]
 8009bd6:	3b04      	subs	r3, #4
 8009bd8:	2a00      	cmp	r2, #0
 8009bda:	d1c9      	bne.n	8009b70 <quorem+0x9c>
 8009bdc:	3c01      	subs	r4, #1
 8009bde:	e7c4      	b.n	8009b6a <quorem+0x96>
 8009be0:	6812      	ldr	r2, [r2, #0]
 8009be2:	3b04      	subs	r3, #4
 8009be4:	2a00      	cmp	r2, #0
 8009be6:	d1ef      	bne.n	8009bc8 <quorem+0xf4>
 8009be8:	3c01      	subs	r4, #1
 8009bea:	e7ea      	b.n	8009bc2 <quorem+0xee>
 8009bec:	2000      	movs	r0, #0
 8009bee:	e7ee      	b.n	8009bce <quorem+0xfa>

08009bf0 <_dtoa_r>:
 8009bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bf4:	4616      	mov	r6, r2
 8009bf6:	461f      	mov	r7, r3
 8009bf8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009bfa:	b095      	sub	sp, #84	; 0x54
 8009bfc:	4604      	mov	r4, r0
 8009bfe:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8009c02:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009c06:	b93d      	cbnz	r5, 8009c18 <_dtoa_r+0x28>
 8009c08:	2010      	movs	r0, #16
 8009c0a:	f7ff fa19 	bl	8009040 <malloc>
 8009c0e:	6260      	str	r0, [r4, #36]	; 0x24
 8009c10:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009c14:	6005      	str	r5, [r0, #0]
 8009c16:	60c5      	str	r5, [r0, #12]
 8009c18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c1a:	6819      	ldr	r1, [r3, #0]
 8009c1c:	b151      	cbz	r1, 8009c34 <_dtoa_r+0x44>
 8009c1e:	685a      	ldr	r2, [r3, #4]
 8009c20:	2301      	movs	r3, #1
 8009c22:	4093      	lsls	r3, r2
 8009c24:	604a      	str	r2, [r1, #4]
 8009c26:	608b      	str	r3, [r1, #8]
 8009c28:	4620      	mov	r0, r4
 8009c2a:	f000 fde7 	bl	800a7fc <_Bfree>
 8009c2e:	2200      	movs	r2, #0
 8009c30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c32:	601a      	str	r2, [r3, #0]
 8009c34:	1e3b      	subs	r3, r7, #0
 8009c36:	bfaf      	iteee	ge
 8009c38:	2300      	movge	r3, #0
 8009c3a:	2201      	movlt	r2, #1
 8009c3c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009c40:	9303      	strlt	r3, [sp, #12]
 8009c42:	bfac      	ite	ge
 8009c44:	f8c8 3000 	strge.w	r3, [r8]
 8009c48:	f8c8 2000 	strlt.w	r2, [r8]
 8009c4c:	4bae      	ldr	r3, [pc, #696]	; (8009f08 <_dtoa_r+0x318>)
 8009c4e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009c52:	ea33 0308 	bics.w	r3, r3, r8
 8009c56:	d11b      	bne.n	8009c90 <_dtoa_r+0xa0>
 8009c58:	f242 730f 	movw	r3, #9999	; 0x270f
 8009c5c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009c5e:	6013      	str	r3, [r2, #0]
 8009c60:	9b02      	ldr	r3, [sp, #8]
 8009c62:	b923      	cbnz	r3, 8009c6e <_dtoa_r+0x7e>
 8009c64:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	f000 8545 	beq.w	800a6f8 <_dtoa_r+0xb08>
 8009c6e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009c70:	b953      	cbnz	r3, 8009c88 <_dtoa_r+0x98>
 8009c72:	4ba6      	ldr	r3, [pc, #664]	; (8009f0c <_dtoa_r+0x31c>)
 8009c74:	e021      	b.n	8009cba <_dtoa_r+0xca>
 8009c76:	4ba6      	ldr	r3, [pc, #664]	; (8009f10 <_dtoa_r+0x320>)
 8009c78:	9306      	str	r3, [sp, #24]
 8009c7a:	3308      	adds	r3, #8
 8009c7c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009c7e:	6013      	str	r3, [r2, #0]
 8009c80:	9806      	ldr	r0, [sp, #24]
 8009c82:	b015      	add	sp, #84	; 0x54
 8009c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c88:	4ba0      	ldr	r3, [pc, #640]	; (8009f0c <_dtoa_r+0x31c>)
 8009c8a:	9306      	str	r3, [sp, #24]
 8009c8c:	3303      	adds	r3, #3
 8009c8e:	e7f5      	b.n	8009c7c <_dtoa_r+0x8c>
 8009c90:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009c94:	2200      	movs	r2, #0
 8009c96:	2300      	movs	r3, #0
 8009c98:	4630      	mov	r0, r6
 8009c9a:	4639      	mov	r1, r7
 8009c9c:	f7f6 fe84 	bl	80009a8 <__aeabi_dcmpeq>
 8009ca0:	4682      	mov	sl, r0
 8009ca2:	b160      	cbz	r0, 8009cbe <_dtoa_r+0xce>
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009ca8:	6013      	str	r3, [r2, #0]
 8009caa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	f000 8520 	beq.w	800a6f2 <_dtoa_r+0xb02>
 8009cb2:	4b98      	ldr	r3, [pc, #608]	; (8009f14 <_dtoa_r+0x324>)
 8009cb4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009cb6:	6013      	str	r3, [r2, #0]
 8009cb8:	3b01      	subs	r3, #1
 8009cba:	9306      	str	r3, [sp, #24]
 8009cbc:	e7e0      	b.n	8009c80 <_dtoa_r+0x90>
 8009cbe:	ab12      	add	r3, sp, #72	; 0x48
 8009cc0:	9301      	str	r3, [sp, #4]
 8009cc2:	ab13      	add	r3, sp, #76	; 0x4c
 8009cc4:	9300      	str	r3, [sp, #0]
 8009cc6:	4632      	mov	r2, r6
 8009cc8:	463b      	mov	r3, r7
 8009cca:	4620      	mov	r0, r4
 8009ccc:	f000 ffee 	bl	800acac <__d2b>
 8009cd0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009cd4:	4683      	mov	fp, r0
 8009cd6:	2d00      	cmp	r5, #0
 8009cd8:	d07d      	beq.n	8009dd6 <_dtoa_r+0x1e6>
 8009cda:	46b0      	mov	r8, r6
 8009cdc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009ce0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8009ce4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8009ce8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009cec:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	4b89      	ldr	r3, [pc, #548]	; (8009f18 <_dtoa_r+0x328>)
 8009cf4:	4640      	mov	r0, r8
 8009cf6:	4649      	mov	r1, r9
 8009cf8:	f7f6 fa36 	bl	8000168 <__aeabi_dsub>
 8009cfc:	a37c      	add	r3, pc, #496	; (adr r3, 8009ef0 <_dtoa_r+0x300>)
 8009cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d02:	f7f6 fbe9 	bl	80004d8 <__aeabi_dmul>
 8009d06:	a37c      	add	r3, pc, #496	; (adr r3, 8009ef8 <_dtoa_r+0x308>)
 8009d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0c:	f7f6 fa2e 	bl	800016c <__adddf3>
 8009d10:	4606      	mov	r6, r0
 8009d12:	4628      	mov	r0, r5
 8009d14:	460f      	mov	r7, r1
 8009d16:	f7f6 fb75 	bl	8000404 <__aeabi_i2d>
 8009d1a:	a379      	add	r3, pc, #484	; (adr r3, 8009f00 <_dtoa_r+0x310>)
 8009d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d20:	f7f6 fbda 	bl	80004d8 <__aeabi_dmul>
 8009d24:	4602      	mov	r2, r0
 8009d26:	460b      	mov	r3, r1
 8009d28:	4630      	mov	r0, r6
 8009d2a:	4639      	mov	r1, r7
 8009d2c:	f7f6 fa1e 	bl	800016c <__adddf3>
 8009d30:	4606      	mov	r6, r0
 8009d32:	460f      	mov	r7, r1
 8009d34:	f7f6 fe80 	bl	8000a38 <__aeabi_d2iz>
 8009d38:	2200      	movs	r2, #0
 8009d3a:	4682      	mov	sl, r0
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	4630      	mov	r0, r6
 8009d40:	4639      	mov	r1, r7
 8009d42:	f7f6 fe3b 	bl	80009bc <__aeabi_dcmplt>
 8009d46:	b148      	cbz	r0, 8009d5c <_dtoa_r+0x16c>
 8009d48:	4650      	mov	r0, sl
 8009d4a:	f7f6 fb5b 	bl	8000404 <__aeabi_i2d>
 8009d4e:	4632      	mov	r2, r6
 8009d50:	463b      	mov	r3, r7
 8009d52:	f7f6 fe29 	bl	80009a8 <__aeabi_dcmpeq>
 8009d56:	b908      	cbnz	r0, 8009d5c <_dtoa_r+0x16c>
 8009d58:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d5c:	f1ba 0f16 	cmp.w	sl, #22
 8009d60:	d85a      	bhi.n	8009e18 <_dtoa_r+0x228>
 8009d62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d66:	496d      	ldr	r1, [pc, #436]	; (8009f1c <_dtoa_r+0x32c>)
 8009d68:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009d6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d70:	f7f6 fe42 	bl	80009f8 <__aeabi_dcmpgt>
 8009d74:	2800      	cmp	r0, #0
 8009d76:	d051      	beq.n	8009e1c <_dtoa_r+0x22c>
 8009d78:	2300      	movs	r3, #0
 8009d7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d7e:	930d      	str	r3, [sp, #52]	; 0x34
 8009d80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d82:	1b5d      	subs	r5, r3, r5
 8009d84:	1e6b      	subs	r3, r5, #1
 8009d86:	9307      	str	r3, [sp, #28]
 8009d88:	bf43      	ittte	mi
 8009d8a:	2300      	movmi	r3, #0
 8009d8c:	f1c5 0901 	rsbmi	r9, r5, #1
 8009d90:	9307      	strmi	r3, [sp, #28]
 8009d92:	f04f 0900 	movpl.w	r9, #0
 8009d96:	f1ba 0f00 	cmp.w	sl, #0
 8009d9a:	db41      	blt.n	8009e20 <_dtoa_r+0x230>
 8009d9c:	9b07      	ldr	r3, [sp, #28]
 8009d9e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8009da2:	4453      	add	r3, sl
 8009da4:	9307      	str	r3, [sp, #28]
 8009da6:	2300      	movs	r3, #0
 8009da8:	9308      	str	r3, [sp, #32]
 8009daa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009dac:	2b09      	cmp	r3, #9
 8009dae:	f200 808f 	bhi.w	8009ed0 <_dtoa_r+0x2e0>
 8009db2:	2b05      	cmp	r3, #5
 8009db4:	bfc4      	itt	gt
 8009db6:	3b04      	subgt	r3, #4
 8009db8:	931e      	strgt	r3, [sp, #120]	; 0x78
 8009dba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009dbc:	bfc8      	it	gt
 8009dbe:	2500      	movgt	r5, #0
 8009dc0:	f1a3 0302 	sub.w	r3, r3, #2
 8009dc4:	bfd8      	it	le
 8009dc6:	2501      	movle	r5, #1
 8009dc8:	2b03      	cmp	r3, #3
 8009dca:	f200 808d 	bhi.w	8009ee8 <_dtoa_r+0x2f8>
 8009dce:	e8df f003 	tbb	[pc, r3]
 8009dd2:	7d7b      	.short	0x7d7b
 8009dd4:	6f2f      	.short	0x6f2f
 8009dd6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009dda:	441d      	add	r5, r3
 8009ddc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009de0:	2820      	cmp	r0, #32
 8009de2:	dd13      	ble.n	8009e0c <_dtoa_r+0x21c>
 8009de4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009de8:	9b02      	ldr	r3, [sp, #8]
 8009dea:	fa08 f800 	lsl.w	r8, r8, r0
 8009dee:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009df2:	fa23 f000 	lsr.w	r0, r3, r0
 8009df6:	ea48 0000 	orr.w	r0, r8, r0
 8009dfa:	f7f6 faf3 	bl	80003e4 <__aeabi_ui2d>
 8009dfe:	2301      	movs	r3, #1
 8009e00:	4680      	mov	r8, r0
 8009e02:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8009e06:	3d01      	subs	r5, #1
 8009e08:	9310      	str	r3, [sp, #64]	; 0x40
 8009e0a:	e771      	b.n	8009cf0 <_dtoa_r+0x100>
 8009e0c:	9b02      	ldr	r3, [sp, #8]
 8009e0e:	f1c0 0020 	rsb	r0, r0, #32
 8009e12:	fa03 f000 	lsl.w	r0, r3, r0
 8009e16:	e7f0      	b.n	8009dfa <_dtoa_r+0x20a>
 8009e18:	2301      	movs	r3, #1
 8009e1a:	e7b0      	b.n	8009d7e <_dtoa_r+0x18e>
 8009e1c:	900d      	str	r0, [sp, #52]	; 0x34
 8009e1e:	e7af      	b.n	8009d80 <_dtoa_r+0x190>
 8009e20:	f1ca 0300 	rsb	r3, sl, #0
 8009e24:	9308      	str	r3, [sp, #32]
 8009e26:	2300      	movs	r3, #0
 8009e28:	eba9 090a 	sub.w	r9, r9, sl
 8009e2c:	930c      	str	r3, [sp, #48]	; 0x30
 8009e2e:	e7bc      	b.n	8009daa <_dtoa_r+0x1ba>
 8009e30:	2301      	movs	r3, #1
 8009e32:	9309      	str	r3, [sp, #36]	; 0x24
 8009e34:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	dd74      	ble.n	8009f24 <_dtoa_r+0x334>
 8009e3a:	4698      	mov	r8, r3
 8009e3c:	9304      	str	r3, [sp, #16]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009e42:	6072      	str	r2, [r6, #4]
 8009e44:	2204      	movs	r2, #4
 8009e46:	f102 0014 	add.w	r0, r2, #20
 8009e4a:	4298      	cmp	r0, r3
 8009e4c:	6871      	ldr	r1, [r6, #4]
 8009e4e:	d96e      	bls.n	8009f2e <_dtoa_r+0x33e>
 8009e50:	4620      	mov	r0, r4
 8009e52:	f000 fc9f 	bl	800a794 <_Balloc>
 8009e56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e58:	6030      	str	r0, [r6, #0]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f1b8 0f0e 	cmp.w	r8, #14
 8009e60:	9306      	str	r3, [sp, #24]
 8009e62:	f200 80ed 	bhi.w	800a040 <_dtoa_r+0x450>
 8009e66:	2d00      	cmp	r5, #0
 8009e68:	f000 80ea 	beq.w	800a040 <_dtoa_r+0x450>
 8009e6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e70:	f1ba 0f00 	cmp.w	sl, #0
 8009e74:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009e78:	dd77      	ble.n	8009f6a <_dtoa_r+0x37a>
 8009e7a:	4a28      	ldr	r2, [pc, #160]	; (8009f1c <_dtoa_r+0x32c>)
 8009e7c:	f00a 030f 	and.w	r3, sl, #15
 8009e80:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009e84:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009e88:	06f0      	lsls	r0, r6, #27
 8009e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009e92:	d568      	bpl.n	8009f66 <_dtoa_r+0x376>
 8009e94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009e98:	4b21      	ldr	r3, [pc, #132]	; (8009f20 <_dtoa_r+0x330>)
 8009e9a:	2503      	movs	r5, #3
 8009e9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009ea0:	f7f6 fc44 	bl	800072c <__aeabi_ddiv>
 8009ea4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ea8:	f006 060f 	and.w	r6, r6, #15
 8009eac:	4f1c      	ldr	r7, [pc, #112]	; (8009f20 <_dtoa_r+0x330>)
 8009eae:	e04f      	b.n	8009f50 <_dtoa_r+0x360>
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	9309      	str	r3, [sp, #36]	; 0x24
 8009eb4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009eb6:	4453      	add	r3, sl
 8009eb8:	f103 0801 	add.w	r8, r3, #1
 8009ebc:	9304      	str	r3, [sp, #16]
 8009ebe:	4643      	mov	r3, r8
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	bfb8      	it	lt
 8009ec4:	2301      	movlt	r3, #1
 8009ec6:	e7ba      	b.n	8009e3e <_dtoa_r+0x24e>
 8009ec8:	2300      	movs	r3, #0
 8009eca:	e7b2      	b.n	8009e32 <_dtoa_r+0x242>
 8009ecc:	2300      	movs	r3, #0
 8009ece:	e7f0      	b.n	8009eb2 <_dtoa_r+0x2c2>
 8009ed0:	2501      	movs	r5, #1
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	9509      	str	r5, [sp, #36]	; 0x24
 8009ed6:	931e      	str	r3, [sp, #120]	; 0x78
 8009ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8009edc:	2200      	movs	r2, #0
 8009ede:	9304      	str	r3, [sp, #16]
 8009ee0:	4698      	mov	r8, r3
 8009ee2:	2312      	movs	r3, #18
 8009ee4:	921f      	str	r2, [sp, #124]	; 0x7c
 8009ee6:	e7aa      	b.n	8009e3e <_dtoa_r+0x24e>
 8009ee8:	2301      	movs	r3, #1
 8009eea:	9309      	str	r3, [sp, #36]	; 0x24
 8009eec:	e7f4      	b.n	8009ed8 <_dtoa_r+0x2e8>
 8009eee:	bf00      	nop
 8009ef0:	636f4361 	.word	0x636f4361
 8009ef4:	3fd287a7 	.word	0x3fd287a7
 8009ef8:	8b60c8b3 	.word	0x8b60c8b3
 8009efc:	3fc68a28 	.word	0x3fc68a28
 8009f00:	509f79fb 	.word	0x509f79fb
 8009f04:	3fd34413 	.word	0x3fd34413
 8009f08:	7ff00000 	.word	0x7ff00000
 8009f0c:	0800bedd 	.word	0x0800bedd
 8009f10:	0800bed4 	.word	0x0800bed4
 8009f14:	0800beb1 	.word	0x0800beb1
 8009f18:	3ff80000 	.word	0x3ff80000
 8009f1c:	0800bf10 	.word	0x0800bf10
 8009f20:	0800bee8 	.word	0x0800bee8
 8009f24:	2301      	movs	r3, #1
 8009f26:	9304      	str	r3, [sp, #16]
 8009f28:	4698      	mov	r8, r3
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	e7da      	b.n	8009ee4 <_dtoa_r+0x2f4>
 8009f2e:	3101      	adds	r1, #1
 8009f30:	6071      	str	r1, [r6, #4]
 8009f32:	0052      	lsls	r2, r2, #1
 8009f34:	e787      	b.n	8009e46 <_dtoa_r+0x256>
 8009f36:	07f1      	lsls	r1, r6, #31
 8009f38:	d508      	bpl.n	8009f4c <_dtoa_r+0x35c>
 8009f3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009f3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f42:	f7f6 fac9 	bl	80004d8 <__aeabi_dmul>
 8009f46:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009f4a:	3501      	adds	r5, #1
 8009f4c:	1076      	asrs	r6, r6, #1
 8009f4e:	3708      	adds	r7, #8
 8009f50:	2e00      	cmp	r6, #0
 8009f52:	d1f0      	bne.n	8009f36 <_dtoa_r+0x346>
 8009f54:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009f58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f5c:	f7f6 fbe6 	bl	800072c <__aeabi_ddiv>
 8009f60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f64:	e01b      	b.n	8009f9e <_dtoa_r+0x3ae>
 8009f66:	2502      	movs	r5, #2
 8009f68:	e7a0      	b.n	8009eac <_dtoa_r+0x2bc>
 8009f6a:	f000 80a4 	beq.w	800a0b6 <_dtoa_r+0x4c6>
 8009f6e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009f72:	f1ca 0600 	rsb	r6, sl, #0
 8009f76:	4ba0      	ldr	r3, [pc, #640]	; (800a1f8 <_dtoa_r+0x608>)
 8009f78:	f006 020f 	and.w	r2, r6, #15
 8009f7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f84:	f7f6 faa8 	bl	80004d8 <__aeabi_dmul>
 8009f88:	2502      	movs	r5, #2
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f90:	4f9a      	ldr	r7, [pc, #616]	; (800a1fc <_dtoa_r+0x60c>)
 8009f92:	1136      	asrs	r6, r6, #4
 8009f94:	2e00      	cmp	r6, #0
 8009f96:	f040 8083 	bne.w	800a0a0 <_dtoa_r+0x4b0>
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d1e0      	bne.n	8009f60 <_dtoa_r+0x370>
 8009f9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	f000 808a 	beq.w	800a0ba <_dtoa_r+0x4ca>
 8009fa6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009faa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009fae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	4b92      	ldr	r3, [pc, #584]	; (800a200 <_dtoa_r+0x610>)
 8009fb6:	f7f6 fd01 	bl	80009bc <__aeabi_dcmplt>
 8009fba:	2800      	cmp	r0, #0
 8009fbc:	d07d      	beq.n	800a0ba <_dtoa_r+0x4ca>
 8009fbe:	f1b8 0f00 	cmp.w	r8, #0
 8009fc2:	d07a      	beq.n	800a0ba <_dtoa_r+0x4ca>
 8009fc4:	9b04      	ldr	r3, [sp, #16]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	dd36      	ble.n	800a038 <_dtoa_r+0x448>
 8009fca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009fce:	2200      	movs	r2, #0
 8009fd0:	4b8c      	ldr	r3, [pc, #560]	; (800a204 <_dtoa_r+0x614>)
 8009fd2:	f7f6 fa81 	bl	80004d8 <__aeabi_dmul>
 8009fd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fda:	9e04      	ldr	r6, [sp, #16]
 8009fdc:	f10a 37ff 	add.w	r7, sl, #4294967295
 8009fe0:	3501      	adds	r5, #1
 8009fe2:	4628      	mov	r0, r5
 8009fe4:	f7f6 fa0e 	bl	8000404 <__aeabi_i2d>
 8009fe8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009fec:	f7f6 fa74 	bl	80004d8 <__aeabi_dmul>
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	4b85      	ldr	r3, [pc, #532]	; (800a208 <_dtoa_r+0x618>)
 8009ff4:	f7f6 f8ba 	bl	800016c <__adddf3>
 8009ff8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8009ffc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a000:	950b      	str	r5, [sp, #44]	; 0x2c
 800a002:	2e00      	cmp	r6, #0
 800a004:	d15c      	bne.n	800a0c0 <_dtoa_r+0x4d0>
 800a006:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a00a:	2200      	movs	r2, #0
 800a00c:	4b7f      	ldr	r3, [pc, #508]	; (800a20c <_dtoa_r+0x61c>)
 800a00e:	f7f6 f8ab 	bl	8000168 <__aeabi_dsub>
 800a012:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a014:	462b      	mov	r3, r5
 800a016:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a01a:	f7f6 fced 	bl	80009f8 <__aeabi_dcmpgt>
 800a01e:	2800      	cmp	r0, #0
 800a020:	f040 8281 	bne.w	800a526 <_dtoa_r+0x936>
 800a024:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a028:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a02a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a02e:	f7f6 fcc5 	bl	80009bc <__aeabi_dcmplt>
 800a032:	2800      	cmp	r0, #0
 800a034:	f040 8275 	bne.w	800a522 <_dtoa_r+0x932>
 800a038:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a03c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a040:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a042:	2b00      	cmp	r3, #0
 800a044:	f2c0 814b 	blt.w	800a2de <_dtoa_r+0x6ee>
 800a048:	f1ba 0f0e 	cmp.w	sl, #14
 800a04c:	f300 8147 	bgt.w	800a2de <_dtoa_r+0x6ee>
 800a050:	4b69      	ldr	r3, [pc, #420]	; (800a1f8 <_dtoa_r+0x608>)
 800a052:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a05a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a05e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a060:	2b00      	cmp	r3, #0
 800a062:	f280 80d7 	bge.w	800a214 <_dtoa_r+0x624>
 800a066:	f1b8 0f00 	cmp.w	r8, #0
 800a06a:	f300 80d3 	bgt.w	800a214 <_dtoa_r+0x624>
 800a06e:	f040 8257 	bne.w	800a520 <_dtoa_r+0x930>
 800a072:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a076:	2200      	movs	r2, #0
 800a078:	4b64      	ldr	r3, [pc, #400]	; (800a20c <_dtoa_r+0x61c>)
 800a07a:	f7f6 fa2d 	bl	80004d8 <__aeabi_dmul>
 800a07e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a082:	f7f6 fcaf 	bl	80009e4 <__aeabi_dcmpge>
 800a086:	4646      	mov	r6, r8
 800a088:	4647      	mov	r7, r8
 800a08a:	2800      	cmp	r0, #0
 800a08c:	f040 822d 	bne.w	800a4ea <_dtoa_r+0x8fa>
 800a090:	9b06      	ldr	r3, [sp, #24]
 800a092:	9a06      	ldr	r2, [sp, #24]
 800a094:	1c5d      	adds	r5, r3, #1
 800a096:	2331      	movs	r3, #49	; 0x31
 800a098:	f10a 0a01 	add.w	sl, sl, #1
 800a09c:	7013      	strb	r3, [r2, #0]
 800a09e:	e228      	b.n	800a4f2 <_dtoa_r+0x902>
 800a0a0:	07f2      	lsls	r2, r6, #31
 800a0a2:	d505      	bpl.n	800a0b0 <_dtoa_r+0x4c0>
 800a0a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0a8:	f7f6 fa16 	bl	80004d8 <__aeabi_dmul>
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	3501      	adds	r5, #1
 800a0b0:	1076      	asrs	r6, r6, #1
 800a0b2:	3708      	adds	r7, #8
 800a0b4:	e76e      	b.n	8009f94 <_dtoa_r+0x3a4>
 800a0b6:	2502      	movs	r5, #2
 800a0b8:	e771      	b.n	8009f9e <_dtoa_r+0x3ae>
 800a0ba:	4657      	mov	r7, sl
 800a0bc:	4646      	mov	r6, r8
 800a0be:	e790      	b.n	8009fe2 <_dtoa_r+0x3f2>
 800a0c0:	4b4d      	ldr	r3, [pc, #308]	; (800a1f8 <_dtoa_r+0x608>)
 800a0c2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a0c6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a0ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d048      	beq.n	800a162 <_dtoa_r+0x572>
 800a0d0:	4602      	mov	r2, r0
 800a0d2:	460b      	mov	r3, r1
 800a0d4:	2000      	movs	r0, #0
 800a0d6:	494e      	ldr	r1, [pc, #312]	; (800a210 <_dtoa_r+0x620>)
 800a0d8:	f7f6 fb28 	bl	800072c <__aeabi_ddiv>
 800a0dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a0e0:	f7f6 f842 	bl	8000168 <__aeabi_dsub>
 800a0e4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a0e8:	9d06      	ldr	r5, [sp, #24]
 800a0ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0ee:	f7f6 fca3 	bl	8000a38 <__aeabi_d2iz>
 800a0f2:	9011      	str	r0, [sp, #68]	; 0x44
 800a0f4:	f7f6 f986 	bl	8000404 <__aeabi_i2d>
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	460b      	mov	r3, r1
 800a0fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a100:	f7f6 f832 	bl	8000168 <__aeabi_dsub>
 800a104:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a106:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a10a:	3330      	adds	r3, #48	; 0x30
 800a10c:	f805 3b01 	strb.w	r3, [r5], #1
 800a110:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a114:	f7f6 fc52 	bl	80009bc <__aeabi_dcmplt>
 800a118:	2800      	cmp	r0, #0
 800a11a:	d163      	bne.n	800a1e4 <_dtoa_r+0x5f4>
 800a11c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a120:	2000      	movs	r0, #0
 800a122:	4937      	ldr	r1, [pc, #220]	; (800a200 <_dtoa_r+0x610>)
 800a124:	f7f6 f820 	bl	8000168 <__aeabi_dsub>
 800a128:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a12c:	f7f6 fc46 	bl	80009bc <__aeabi_dcmplt>
 800a130:	2800      	cmp	r0, #0
 800a132:	f040 80b5 	bne.w	800a2a0 <_dtoa_r+0x6b0>
 800a136:	9b06      	ldr	r3, [sp, #24]
 800a138:	1aeb      	subs	r3, r5, r3
 800a13a:	429e      	cmp	r6, r3
 800a13c:	f77f af7c 	ble.w	800a038 <_dtoa_r+0x448>
 800a140:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a144:	2200      	movs	r2, #0
 800a146:	4b2f      	ldr	r3, [pc, #188]	; (800a204 <_dtoa_r+0x614>)
 800a148:	f7f6 f9c6 	bl	80004d8 <__aeabi_dmul>
 800a14c:	2200      	movs	r2, #0
 800a14e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a152:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a156:	4b2b      	ldr	r3, [pc, #172]	; (800a204 <_dtoa_r+0x614>)
 800a158:	f7f6 f9be 	bl	80004d8 <__aeabi_dmul>
 800a15c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a160:	e7c3      	b.n	800a0ea <_dtoa_r+0x4fa>
 800a162:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a166:	f7f6 f9b7 	bl	80004d8 <__aeabi_dmul>
 800a16a:	9b06      	ldr	r3, [sp, #24]
 800a16c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a170:	199d      	adds	r5, r3, r6
 800a172:	461e      	mov	r6, r3
 800a174:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a178:	f7f6 fc5e 	bl	8000a38 <__aeabi_d2iz>
 800a17c:	9011      	str	r0, [sp, #68]	; 0x44
 800a17e:	f7f6 f941 	bl	8000404 <__aeabi_i2d>
 800a182:	4602      	mov	r2, r0
 800a184:	460b      	mov	r3, r1
 800a186:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a18a:	f7f5 ffed 	bl	8000168 <__aeabi_dsub>
 800a18e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a190:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a194:	3330      	adds	r3, #48	; 0x30
 800a196:	f806 3b01 	strb.w	r3, [r6], #1
 800a19a:	42ae      	cmp	r6, r5
 800a19c:	f04f 0200 	mov.w	r2, #0
 800a1a0:	d124      	bne.n	800a1ec <_dtoa_r+0x5fc>
 800a1a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a1a6:	4b1a      	ldr	r3, [pc, #104]	; (800a210 <_dtoa_r+0x620>)
 800a1a8:	f7f5 ffe0 	bl	800016c <__adddf3>
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1b4:	f7f6 fc20 	bl	80009f8 <__aeabi_dcmpgt>
 800a1b8:	2800      	cmp	r0, #0
 800a1ba:	d171      	bne.n	800a2a0 <_dtoa_r+0x6b0>
 800a1bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a1c0:	2000      	movs	r0, #0
 800a1c2:	4913      	ldr	r1, [pc, #76]	; (800a210 <_dtoa_r+0x620>)
 800a1c4:	f7f5 ffd0 	bl	8000168 <__aeabi_dsub>
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	460b      	mov	r3, r1
 800a1cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1d0:	f7f6 fbf4 	bl	80009bc <__aeabi_dcmplt>
 800a1d4:	2800      	cmp	r0, #0
 800a1d6:	f43f af2f 	beq.w	800a038 <_dtoa_r+0x448>
 800a1da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a1de:	1e6a      	subs	r2, r5, #1
 800a1e0:	2b30      	cmp	r3, #48	; 0x30
 800a1e2:	d001      	beq.n	800a1e8 <_dtoa_r+0x5f8>
 800a1e4:	46ba      	mov	sl, r7
 800a1e6:	e04a      	b.n	800a27e <_dtoa_r+0x68e>
 800a1e8:	4615      	mov	r5, r2
 800a1ea:	e7f6      	b.n	800a1da <_dtoa_r+0x5ea>
 800a1ec:	4b05      	ldr	r3, [pc, #20]	; (800a204 <_dtoa_r+0x614>)
 800a1ee:	f7f6 f973 	bl	80004d8 <__aeabi_dmul>
 800a1f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1f6:	e7bd      	b.n	800a174 <_dtoa_r+0x584>
 800a1f8:	0800bf10 	.word	0x0800bf10
 800a1fc:	0800bee8 	.word	0x0800bee8
 800a200:	3ff00000 	.word	0x3ff00000
 800a204:	40240000 	.word	0x40240000
 800a208:	401c0000 	.word	0x401c0000
 800a20c:	40140000 	.word	0x40140000
 800a210:	3fe00000 	.word	0x3fe00000
 800a214:	9d06      	ldr	r5, [sp, #24]
 800a216:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a21a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a21e:	4630      	mov	r0, r6
 800a220:	4639      	mov	r1, r7
 800a222:	f7f6 fa83 	bl	800072c <__aeabi_ddiv>
 800a226:	f7f6 fc07 	bl	8000a38 <__aeabi_d2iz>
 800a22a:	4681      	mov	r9, r0
 800a22c:	f7f6 f8ea 	bl	8000404 <__aeabi_i2d>
 800a230:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a234:	f7f6 f950 	bl	80004d8 <__aeabi_dmul>
 800a238:	4602      	mov	r2, r0
 800a23a:	460b      	mov	r3, r1
 800a23c:	4630      	mov	r0, r6
 800a23e:	4639      	mov	r1, r7
 800a240:	f7f5 ff92 	bl	8000168 <__aeabi_dsub>
 800a244:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800a248:	f805 6b01 	strb.w	r6, [r5], #1
 800a24c:	9e06      	ldr	r6, [sp, #24]
 800a24e:	4602      	mov	r2, r0
 800a250:	1bae      	subs	r6, r5, r6
 800a252:	45b0      	cmp	r8, r6
 800a254:	460b      	mov	r3, r1
 800a256:	d135      	bne.n	800a2c4 <_dtoa_r+0x6d4>
 800a258:	f7f5 ff88 	bl	800016c <__adddf3>
 800a25c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a260:	4606      	mov	r6, r0
 800a262:	460f      	mov	r7, r1
 800a264:	f7f6 fbc8 	bl	80009f8 <__aeabi_dcmpgt>
 800a268:	b9c8      	cbnz	r0, 800a29e <_dtoa_r+0x6ae>
 800a26a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a26e:	4630      	mov	r0, r6
 800a270:	4639      	mov	r1, r7
 800a272:	f7f6 fb99 	bl	80009a8 <__aeabi_dcmpeq>
 800a276:	b110      	cbz	r0, 800a27e <_dtoa_r+0x68e>
 800a278:	f019 0f01 	tst.w	r9, #1
 800a27c:	d10f      	bne.n	800a29e <_dtoa_r+0x6ae>
 800a27e:	4659      	mov	r1, fp
 800a280:	4620      	mov	r0, r4
 800a282:	f000 fabb 	bl	800a7fc <_Bfree>
 800a286:	2300      	movs	r3, #0
 800a288:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a28a:	702b      	strb	r3, [r5, #0]
 800a28c:	f10a 0301 	add.w	r3, sl, #1
 800a290:	6013      	str	r3, [r2, #0]
 800a292:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a294:	2b00      	cmp	r3, #0
 800a296:	f43f acf3 	beq.w	8009c80 <_dtoa_r+0x90>
 800a29a:	601d      	str	r5, [r3, #0]
 800a29c:	e4f0      	b.n	8009c80 <_dtoa_r+0x90>
 800a29e:	4657      	mov	r7, sl
 800a2a0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a2a4:	1e6b      	subs	r3, r5, #1
 800a2a6:	2a39      	cmp	r2, #57	; 0x39
 800a2a8:	d106      	bne.n	800a2b8 <_dtoa_r+0x6c8>
 800a2aa:	9a06      	ldr	r2, [sp, #24]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d107      	bne.n	800a2c0 <_dtoa_r+0x6d0>
 800a2b0:	2330      	movs	r3, #48	; 0x30
 800a2b2:	7013      	strb	r3, [r2, #0]
 800a2b4:	4613      	mov	r3, r2
 800a2b6:	3701      	adds	r7, #1
 800a2b8:	781a      	ldrb	r2, [r3, #0]
 800a2ba:	3201      	adds	r2, #1
 800a2bc:	701a      	strb	r2, [r3, #0]
 800a2be:	e791      	b.n	800a1e4 <_dtoa_r+0x5f4>
 800a2c0:	461d      	mov	r5, r3
 800a2c2:	e7ed      	b.n	800a2a0 <_dtoa_r+0x6b0>
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	4b99      	ldr	r3, [pc, #612]	; (800a52c <_dtoa_r+0x93c>)
 800a2c8:	f7f6 f906 	bl	80004d8 <__aeabi_dmul>
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	4606      	mov	r6, r0
 800a2d2:	460f      	mov	r7, r1
 800a2d4:	f7f6 fb68 	bl	80009a8 <__aeabi_dcmpeq>
 800a2d8:	2800      	cmp	r0, #0
 800a2da:	d09e      	beq.n	800a21a <_dtoa_r+0x62a>
 800a2dc:	e7cf      	b.n	800a27e <_dtoa_r+0x68e>
 800a2de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2e0:	2a00      	cmp	r2, #0
 800a2e2:	f000 8088 	beq.w	800a3f6 <_dtoa_r+0x806>
 800a2e6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a2e8:	2a01      	cmp	r2, #1
 800a2ea:	dc6d      	bgt.n	800a3c8 <_dtoa_r+0x7d8>
 800a2ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a2ee:	2a00      	cmp	r2, #0
 800a2f0:	d066      	beq.n	800a3c0 <_dtoa_r+0x7d0>
 800a2f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a2f6:	464d      	mov	r5, r9
 800a2f8:	9e08      	ldr	r6, [sp, #32]
 800a2fa:	9a07      	ldr	r2, [sp, #28]
 800a2fc:	2101      	movs	r1, #1
 800a2fe:	441a      	add	r2, r3
 800a300:	4620      	mov	r0, r4
 800a302:	4499      	add	r9, r3
 800a304:	9207      	str	r2, [sp, #28]
 800a306:	f000 fb19 	bl	800a93c <__i2b>
 800a30a:	4607      	mov	r7, r0
 800a30c:	2d00      	cmp	r5, #0
 800a30e:	dd0b      	ble.n	800a328 <_dtoa_r+0x738>
 800a310:	9b07      	ldr	r3, [sp, #28]
 800a312:	2b00      	cmp	r3, #0
 800a314:	dd08      	ble.n	800a328 <_dtoa_r+0x738>
 800a316:	42ab      	cmp	r3, r5
 800a318:	bfa8      	it	ge
 800a31a:	462b      	movge	r3, r5
 800a31c:	9a07      	ldr	r2, [sp, #28]
 800a31e:	eba9 0903 	sub.w	r9, r9, r3
 800a322:	1aed      	subs	r5, r5, r3
 800a324:	1ad3      	subs	r3, r2, r3
 800a326:	9307      	str	r3, [sp, #28]
 800a328:	9b08      	ldr	r3, [sp, #32]
 800a32a:	b1eb      	cbz	r3, 800a368 <_dtoa_r+0x778>
 800a32c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d065      	beq.n	800a3fe <_dtoa_r+0x80e>
 800a332:	b18e      	cbz	r6, 800a358 <_dtoa_r+0x768>
 800a334:	4639      	mov	r1, r7
 800a336:	4632      	mov	r2, r6
 800a338:	4620      	mov	r0, r4
 800a33a:	f000 fb9d 	bl	800aa78 <__pow5mult>
 800a33e:	465a      	mov	r2, fp
 800a340:	4601      	mov	r1, r0
 800a342:	4607      	mov	r7, r0
 800a344:	4620      	mov	r0, r4
 800a346:	f000 fb02 	bl	800a94e <__multiply>
 800a34a:	4659      	mov	r1, fp
 800a34c:	900a      	str	r0, [sp, #40]	; 0x28
 800a34e:	4620      	mov	r0, r4
 800a350:	f000 fa54 	bl	800a7fc <_Bfree>
 800a354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a356:	469b      	mov	fp, r3
 800a358:	9b08      	ldr	r3, [sp, #32]
 800a35a:	1b9a      	subs	r2, r3, r6
 800a35c:	d004      	beq.n	800a368 <_dtoa_r+0x778>
 800a35e:	4659      	mov	r1, fp
 800a360:	4620      	mov	r0, r4
 800a362:	f000 fb89 	bl	800aa78 <__pow5mult>
 800a366:	4683      	mov	fp, r0
 800a368:	2101      	movs	r1, #1
 800a36a:	4620      	mov	r0, r4
 800a36c:	f000 fae6 	bl	800a93c <__i2b>
 800a370:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a372:	4606      	mov	r6, r0
 800a374:	2b00      	cmp	r3, #0
 800a376:	f000 81c6 	beq.w	800a706 <_dtoa_r+0xb16>
 800a37a:	461a      	mov	r2, r3
 800a37c:	4601      	mov	r1, r0
 800a37e:	4620      	mov	r0, r4
 800a380:	f000 fb7a 	bl	800aa78 <__pow5mult>
 800a384:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a386:	4606      	mov	r6, r0
 800a388:	2b01      	cmp	r3, #1
 800a38a:	dc3e      	bgt.n	800a40a <_dtoa_r+0x81a>
 800a38c:	9b02      	ldr	r3, [sp, #8]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d137      	bne.n	800a402 <_dtoa_r+0x812>
 800a392:	9b03      	ldr	r3, [sp, #12]
 800a394:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d134      	bne.n	800a406 <_dtoa_r+0x816>
 800a39c:	9b03      	ldr	r3, [sp, #12]
 800a39e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a3a2:	0d1b      	lsrs	r3, r3, #20
 800a3a4:	051b      	lsls	r3, r3, #20
 800a3a6:	b12b      	cbz	r3, 800a3b4 <_dtoa_r+0x7c4>
 800a3a8:	9b07      	ldr	r3, [sp, #28]
 800a3aa:	f109 0901 	add.w	r9, r9, #1
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	9307      	str	r3, [sp, #28]
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	9308      	str	r3, [sp, #32]
 800a3b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d128      	bne.n	800a40e <_dtoa_r+0x81e>
 800a3bc:	2001      	movs	r0, #1
 800a3be:	e02e      	b.n	800a41e <_dtoa_r+0x82e>
 800a3c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a3c2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a3c6:	e796      	b.n	800a2f6 <_dtoa_r+0x706>
 800a3c8:	9b08      	ldr	r3, [sp, #32]
 800a3ca:	f108 36ff 	add.w	r6, r8, #4294967295
 800a3ce:	42b3      	cmp	r3, r6
 800a3d0:	bfb7      	itett	lt
 800a3d2:	9b08      	ldrlt	r3, [sp, #32]
 800a3d4:	1b9e      	subge	r6, r3, r6
 800a3d6:	1af2      	sublt	r2, r6, r3
 800a3d8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800a3da:	bfbf      	itttt	lt
 800a3dc:	9608      	strlt	r6, [sp, #32]
 800a3de:	189b      	addlt	r3, r3, r2
 800a3e0:	930c      	strlt	r3, [sp, #48]	; 0x30
 800a3e2:	2600      	movlt	r6, #0
 800a3e4:	f1b8 0f00 	cmp.w	r8, #0
 800a3e8:	bfb9      	ittee	lt
 800a3ea:	eba9 0508 	sublt.w	r5, r9, r8
 800a3ee:	2300      	movlt	r3, #0
 800a3f0:	464d      	movge	r5, r9
 800a3f2:	4643      	movge	r3, r8
 800a3f4:	e781      	b.n	800a2fa <_dtoa_r+0x70a>
 800a3f6:	9e08      	ldr	r6, [sp, #32]
 800a3f8:	464d      	mov	r5, r9
 800a3fa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a3fc:	e786      	b.n	800a30c <_dtoa_r+0x71c>
 800a3fe:	9a08      	ldr	r2, [sp, #32]
 800a400:	e7ad      	b.n	800a35e <_dtoa_r+0x76e>
 800a402:	2300      	movs	r3, #0
 800a404:	e7d6      	b.n	800a3b4 <_dtoa_r+0x7c4>
 800a406:	9b02      	ldr	r3, [sp, #8]
 800a408:	e7d4      	b.n	800a3b4 <_dtoa_r+0x7c4>
 800a40a:	2300      	movs	r3, #0
 800a40c:	9308      	str	r3, [sp, #32]
 800a40e:	6933      	ldr	r3, [r6, #16]
 800a410:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a414:	6918      	ldr	r0, [r3, #16]
 800a416:	f000 fa43 	bl	800a8a0 <__hi0bits>
 800a41a:	f1c0 0020 	rsb	r0, r0, #32
 800a41e:	9b07      	ldr	r3, [sp, #28]
 800a420:	4418      	add	r0, r3
 800a422:	f010 001f 	ands.w	r0, r0, #31
 800a426:	d047      	beq.n	800a4b8 <_dtoa_r+0x8c8>
 800a428:	f1c0 0320 	rsb	r3, r0, #32
 800a42c:	2b04      	cmp	r3, #4
 800a42e:	dd3b      	ble.n	800a4a8 <_dtoa_r+0x8b8>
 800a430:	9b07      	ldr	r3, [sp, #28]
 800a432:	f1c0 001c 	rsb	r0, r0, #28
 800a436:	4481      	add	r9, r0
 800a438:	4405      	add	r5, r0
 800a43a:	4403      	add	r3, r0
 800a43c:	9307      	str	r3, [sp, #28]
 800a43e:	f1b9 0f00 	cmp.w	r9, #0
 800a442:	dd05      	ble.n	800a450 <_dtoa_r+0x860>
 800a444:	4659      	mov	r1, fp
 800a446:	464a      	mov	r2, r9
 800a448:	4620      	mov	r0, r4
 800a44a:	f000 fb63 	bl	800ab14 <__lshift>
 800a44e:	4683      	mov	fp, r0
 800a450:	9b07      	ldr	r3, [sp, #28]
 800a452:	2b00      	cmp	r3, #0
 800a454:	dd05      	ble.n	800a462 <_dtoa_r+0x872>
 800a456:	4631      	mov	r1, r6
 800a458:	461a      	mov	r2, r3
 800a45a:	4620      	mov	r0, r4
 800a45c:	f000 fb5a 	bl	800ab14 <__lshift>
 800a460:	4606      	mov	r6, r0
 800a462:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a464:	b353      	cbz	r3, 800a4bc <_dtoa_r+0x8cc>
 800a466:	4631      	mov	r1, r6
 800a468:	4658      	mov	r0, fp
 800a46a:	f000 fba7 	bl	800abbc <__mcmp>
 800a46e:	2800      	cmp	r0, #0
 800a470:	da24      	bge.n	800a4bc <_dtoa_r+0x8cc>
 800a472:	2300      	movs	r3, #0
 800a474:	4659      	mov	r1, fp
 800a476:	220a      	movs	r2, #10
 800a478:	4620      	mov	r0, r4
 800a47a:	f000 f9d6 	bl	800a82a <__multadd>
 800a47e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a480:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a484:	4683      	mov	fp, r0
 800a486:	2b00      	cmp	r3, #0
 800a488:	f000 8144 	beq.w	800a714 <_dtoa_r+0xb24>
 800a48c:	2300      	movs	r3, #0
 800a48e:	4639      	mov	r1, r7
 800a490:	220a      	movs	r2, #10
 800a492:	4620      	mov	r0, r4
 800a494:	f000 f9c9 	bl	800a82a <__multadd>
 800a498:	9b04      	ldr	r3, [sp, #16]
 800a49a:	4607      	mov	r7, r0
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	dc4d      	bgt.n	800a53c <_dtoa_r+0x94c>
 800a4a0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a4a2:	2b02      	cmp	r3, #2
 800a4a4:	dd4a      	ble.n	800a53c <_dtoa_r+0x94c>
 800a4a6:	e011      	b.n	800a4cc <_dtoa_r+0x8dc>
 800a4a8:	d0c9      	beq.n	800a43e <_dtoa_r+0x84e>
 800a4aa:	9a07      	ldr	r2, [sp, #28]
 800a4ac:	331c      	adds	r3, #28
 800a4ae:	441a      	add	r2, r3
 800a4b0:	4499      	add	r9, r3
 800a4b2:	441d      	add	r5, r3
 800a4b4:	4613      	mov	r3, r2
 800a4b6:	e7c1      	b.n	800a43c <_dtoa_r+0x84c>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	e7f6      	b.n	800a4aa <_dtoa_r+0x8ba>
 800a4bc:	f1b8 0f00 	cmp.w	r8, #0
 800a4c0:	dc36      	bgt.n	800a530 <_dtoa_r+0x940>
 800a4c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a4c4:	2b02      	cmp	r3, #2
 800a4c6:	dd33      	ble.n	800a530 <_dtoa_r+0x940>
 800a4c8:	f8cd 8010 	str.w	r8, [sp, #16]
 800a4cc:	9b04      	ldr	r3, [sp, #16]
 800a4ce:	b963      	cbnz	r3, 800a4ea <_dtoa_r+0x8fa>
 800a4d0:	4631      	mov	r1, r6
 800a4d2:	2205      	movs	r2, #5
 800a4d4:	4620      	mov	r0, r4
 800a4d6:	f000 f9a8 	bl	800a82a <__multadd>
 800a4da:	4601      	mov	r1, r0
 800a4dc:	4606      	mov	r6, r0
 800a4de:	4658      	mov	r0, fp
 800a4e0:	f000 fb6c 	bl	800abbc <__mcmp>
 800a4e4:	2800      	cmp	r0, #0
 800a4e6:	f73f add3 	bgt.w	800a090 <_dtoa_r+0x4a0>
 800a4ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a4ec:	9d06      	ldr	r5, [sp, #24]
 800a4ee:	ea6f 0a03 	mvn.w	sl, r3
 800a4f2:	f04f 0900 	mov.w	r9, #0
 800a4f6:	4631      	mov	r1, r6
 800a4f8:	4620      	mov	r0, r4
 800a4fa:	f000 f97f 	bl	800a7fc <_Bfree>
 800a4fe:	2f00      	cmp	r7, #0
 800a500:	f43f aebd 	beq.w	800a27e <_dtoa_r+0x68e>
 800a504:	f1b9 0f00 	cmp.w	r9, #0
 800a508:	d005      	beq.n	800a516 <_dtoa_r+0x926>
 800a50a:	45b9      	cmp	r9, r7
 800a50c:	d003      	beq.n	800a516 <_dtoa_r+0x926>
 800a50e:	4649      	mov	r1, r9
 800a510:	4620      	mov	r0, r4
 800a512:	f000 f973 	bl	800a7fc <_Bfree>
 800a516:	4639      	mov	r1, r7
 800a518:	4620      	mov	r0, r4
 800a51a:	f000 f96f 	bl	800a7fc <_Bfree>
 800a51e:	e6ae      	b.n	800a27e <_dtoa_r+0x68e>
 800a520:	2600      	movs	r6, #0
 800a522:	4637      	mov	r7, r6
 800a524:	e7e1      	b.n	800a4ea <_dtoa_r+0x8fa>
 800a526:	46ba      	mov	sl, r7
 800a528:	4637      	mov	r7, r6
 800a52a:	e5b1      	b.n	800a090 <_dtoa_r+0x4a0>
 800a52c:	40240000 	.word	0x40240000
 800a530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a532:	f8cd 8010 	str.w	r8, [sp, #16]
 800a536:	2b00      	cmp	r3, #0
 800a538:	f000 80f3 	beq.w	800a722 <_dtoa_r+0xb32>
 800a53c:	2d00      	cmp	r5, #0
 800a53e:	dd05      	ble.n	800a54c <_dtoa_r+0x95c>
 800a540:	4639      	mov	r1, r7
 800a542:	462a      	mov	r2, r5
 800a544:	4620      	mov	r0, r4
 800a546:	f000 fae5 	bl	800ab14 <__lshift>
 800a54a:	4607      	mov	r7, r0
 800a54c:	9b08      	ldr	r3, [sp, #32]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d04c      	beq.n	800a5ec <_dtoa_r+0x9fc>
 800a552:	6879      	ldr	r1, [r7, #4]
 800a554:	4620      	mov	r0, r4
 800a556:	f000 f91d 	bl	800a794 <_Balloc>
 800a55a:	4605      	mov	r5, r0
 800a55c:	693a      	ldr	r2, [r7, #16]
 800a55e:	f107 010c 	add.w	r1, r7, #12
 800a562:	3202      	adds	r2, #2
 800a564:	0092      	lsls	r2, r2, #2
 800a566:	300c      	adds	r0, #12
 800a568:	f7fe fd7a 	bl	8009060 <memcpy>
 800a56c:	2201      	movs	r2, #1
 800a56e:	4629      	mov	r1, r5
 800a570:	4620      	mov	r0, r4
 800a572:	f000 facf 	bl	800ab14 <__lshift>
 800a576:	46b9      	mov	r9, r7
 800a578:	4607      	mov	r7, r0
 800a57a:	9b06      	ldr	r3, [sp, #24]
 800a57c:	9307      	str	r3, [sp, #28]
 800a57e:	9b02      	ldr	r3, [sp, #8]
 800a580:	f003 0301 	and.w	r3, r3, #1
 800a584:	9308      	str	r3, [sp, #32]
 800a586:	4631      	mov	r1, r6
 800a588:	4658      	mov	r0, fp
 800a58a:	f7ff faa3 	bl	8009ad4 <quorem>
 800a58e:	4649      	mov	r1, r9
 800a590:	4605      	mov	r5, r0
 800a592:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a596:	4658      	mov	r0, fp
 800a598:	f000 fb10 	bl	800abbc <__mcmp>
 800a59c:	463a      	mov	r2, r7
 800a59e:	9002      	str	r0, [sp, #8]
 800a5a0:	4631      	mov	r1, r6
 800a5a2:	4620      	mov	r0, r4
 800a5a4:	f000 fb24 	bl	800abf0 <__mdiff>
 800a5a8:	68c3      	ldr	r3, [r0, #12]
 800a5aa:	4602      	mov	r2, r0
 800a5ac:	bb03      	cbnz	r3, 800a5f0 <_dtoa_r+0xa00>
 800a5ae:	4601      	mov	r1, r0
 800a5b0:	9009      	str	r0, [sp, #36]	; 0x24
 800a5b2:	4658      	mov	r0, fp
 800a5b4:	f000 fb02 	bl	800abbc <__mcmp>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5bc:	4611      	mov	r1, r2
 800a5be:	4620      	mov	r0, r4
 800a5c0:	9309      	str	r3, [sp, #36]	; 0x24
 800a5c2:	f000 f91b 	bl	800a7fc <_Bfree>
 800a5c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5c8:	b9a3      	cbnz	r3, 800a5f4 <_dtoa_r+0xa04>
 800a5ca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a5cc:	b992      	cbnz	r2, 800a5f4 <_dtoa_r+0xa04>
 800a5ce:	9a08      	ldr	r2, [sp, #32]
 800a5d0:	b982      	cbnz	r2, 800a5f4 <_dtoa_r+0xa04>
 800a5d2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a5d6:	d029      	beq.n	800a62c <_dtoa_r+0xa3c>
 800a5d8:	9b02      	ldr	r3, [sp, #8]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	dd01      	ble.n	800a5e2 <_dtoa_r+0x9f2>
 800a5de:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a5e2:	9b07      	ldr	r3, [sp, #28]
 800a5e4:	1c5d      	adds	r5, r3, #1
 800a5e6:	f883 8000 	strb.w	r8, [r3]
 800a5ea:	e784      	b.n	800a4f6 <_dtoa_r+0x906>
 800a5ec:	4638      	mov	r0, r7
 800a5ee:	e7c2      	b.n	800a576 <_dtoa_r+0x986>
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	e7e3      	b.n	800a5bc <_dtoa_r+0x9cc>
 800a5f4:	9a02      	ldr	r2, [sp, #8]
 800a5f6:	2a00      	cmp	r2, #0
 800a5f8:	db04      	blt.n	800a604 <_dtoa_r+0xa14>
 800a5fa:	d123      	bne.n	800a644 <_dtoa_r+0xa54>
 800a5fc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a5fe:	bb0a      	cbnz	r2, 800a644 <_dtoa_r+0xa54>
 800a600:	9a08      	ldr	r2, [sp, #32]
 800a602:	b9fa      	cbnz	r2, 800a644 <_dtoa_r+0xa54>
 800a604:	2b00      	cmp	r3, #0
 800a606:	ddec      	ble.n	800a5e2 <_dtoa_r+0x9f2>
 800a608:	4659      	mov	r1, fp
 800a60a:	2201      	movs	r2, #1
 800a60c:	4620      	mov	r0, r4
 800a60e:	f000 fa81 	bl	800ab14 <__lshift>
 800a612:	4631      	mov	r1, r6
 800a614:	4683      	mov	fp, r0
 800a616:	f000 fad1 	bl	800abbc <__mcmp>
 800a61a:	2800      	cmp	r0, #0
 800a61c:	dc03      	bgt.n	800a626 <_dtoa_r+0xa36>
 800a61e:	d1e0      	bne.n	800a5e2 <_dtoa_r+0x9f2>
 800a620:	f018 0f01 	tst.w	r8, #1
 800a624:	d0dd      	beq.n	800a5e2 <_dtoa_r+0x9f2>
 800a626:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a62a:	d1d8      	bne.n	800a5de <_dtoa_r+0x9ee>
 800a62c:	9b07      	ldr	r3, [sp, #28]
 800a62e:	9a07      	ldr	r2, [sp, #28]
 800a630:	1c5d      	adds	r5, r3, #1
 800a632:	2339      	movs	r3, #57	; 0x39
 800a634:	7013      	strb	r3, [r2, #0]
 800a636:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a63a:	1e6a      	subs	r2, r5, #1
 800a63c:	2b39      	cmp	r3, #57	; 0x39
 800a63e:	d04d      	beq.n	800a6dc <_dtoa_r+0xaec>
 800a640:	3301      	adds	r3, #1
 800a642:	e052      	b.n	800a6ea <_dtoa_r+0xafa>
 800a644:	9a07      	ldr	r2, [sp, #28]
 800a646:	2b00      	cmp	r3, #0
 800a648:	f102 0501 	add.w	r5, r2, #1
 800a64c:	dd06      	ble.n	800a65c <_dtoa_r+0xa6c>
 800a64e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a652:	d0eb      	beq.n	800a62c <_dtoa_r+0xa3c>
 800a654:	f108 0801 	add.w	r8, r8, #1
 800a658:	9b07      	ldr	r3, [sp, #28]
 800a65a:	e7c4      	b.n	800a5e6 <_dtoa_r+0x9f6>
 800a65c:	9b06      	ldr	r3, [sp, #24]
 800a65e:	9a04      	ldr	r2, [sp, #16]
 800a660:	1aeb      	subs	r3, r5, r3
 800a662:	4293      	cmp	r3, r2
 800a664:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a668:	d021      	beq.n	800a6ae <_dtoa_r+0xabe>
 800a66a:	4659      	mov	r1, fp
 800a66c:	2300      	movs	r3, #0
 800a66e:	220a      	movs	r2, #10
 800a670:	4620      	mov	r0, r4
 800a672:	f000 f8da 	bl	800a82a <__multadd>
 800a676:	45b9      	cmp	r9, r7
 800a678:	4683      	mov	fp, r0
 800a67a:	f04f 0300 	mov.w	r3, #0
 800a67e:	f04f 020a 	mov.w	r2, #10
 800a682:	4649      	mov	r1, r9
 800a684:	4620      	mov	r0, r4
 800a686:	d105      	bne.n	800a694 <_dtoa_r+0xaa4>
 800a688:	f000 f8cf 	bl	800a82a <__multadd>
 800a68c:	4681      	mov	r9, r0
 800a68e:	4607      	mov	r7, r0
 800a690:	9507      	str	r5, [sp, #28]
 800a692:	e778      	b.n	800a586 <_dtoa_r+0x996>
 800a694:	f000 f8c9 	bl	800a82a <__multadd>
 800a698:	4639      	mov	r1, r7
 800a69a:	4681      	mov	r9, r0
 800a69c:	2300      	movs	r3, #0
 800a69e:	220a      	movs	r2, #10
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	f000 f8c2 	bl	800a82a <__multadd>
 800a6a6:	4607      	mov	r7, r0
 800a6a8:	e7f2      	b.n	800a690 <_dtoa_r+0xaa0>
 800a6aa:	f04f 0900 	mov.w	r9, #0
 800a6ae:	4659      	mov	r1, fp
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	4620      	mov	r0, r4
 800a6b4:	f000 fa2e 	bl	800ab14 <__lshift>
 800a6b8:	4631      	mov	r1, r6
 800a6ba:	4683      	mov	fp, r0
 800a6bc:	f000 fa7e 	bl	800abbc <__mcmp>
 800a6c0:	2800      	cmp	r0, #0
 800a6c2:	dcb8      	bgt.n	800a636 <_dtoa_r+0xa46>
 800a6c4:	d102      	bne.n	800a6cc <_dtoa_r+0xadc>
 800a6c6:	f018 0f01 	tst.w	r8, #1
 800a6ca:	d1b4      	bne.n	800a636 <_dtoa_r+0xa46>
 800a6cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a6d0:	1e6a      	subs	r2, r5, #1
 800a6d2:	2b30      	cmp	r3, #48	; 0x30
 800a6d4:	f47f af0f 	bne.w	800a4f6 <_dtoa_r+0x906>
 800a6d8:	4615      	mov	r5, r2
 800a6da:	e7f7      	b.n	800a6cc <_dtoa_r+0xadc>
 800a6dc:	9b06      	ldr	r3, [sp, #24]
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d105      	bne.n	800a6ee <_dtoa_r+0xafe>
 800a6e2:	2331      	movs	r3, #49	; 0x31
 800a6e4:	9a06      	ldr	r2, [sp, #24]
 800a6e6:	f10a 0a01 	add.w	sl, sl, #1
 800a6ea:	7013      	strb	r3, [r2, #0]
 800a6ec:	e703      	b.n	800a4f6 <_dtoa_r+0x906>
 800a6ee:	4615      	mov	r5, r2
 800a6f0:	e7a1      	b.n	800a636 <_dtoa_r+0xa46>
 800a6f2:	4b17      	ldr	r3, [pc, #92]	; (800a750 <_dtoa_r+0xb60>)
 800a6f4:	f7ff bae1 	b.w	8009cba <_dtoa_r+0xca>
 800a6f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	f47f aabb 	bne.w	8009c76 <_dtoa_r+0x86>
 800a700:	4b14      	ldr	r3, [pc, #80]	; (800a754 <_dtoa_r+0xb64>)
 800a702:	f7ff bada 	b.w	8009cba <_dtoa_r+0xca>
 800a706:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a708:	2b01      	cmp	r3, #1
 800a70a:	f77f ae3f 	ble.w	800a38c <_dtoa_r+0x79c>
 800a70e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a710:	9308      	str	r3, [sp, #32]
 800a712:	e653      	b.n	800a3bc <_dtoa_r+0x7cc>
 800a714:	9b04      	ldr	r3, [sp, #16]
 800a716:	2b00      	cmp	r3, #0
 800a718:	dc03      	bgt.n	800a722 <_dtoa_r+0xb32>
 800a71a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a71c:	2b02      	cmp	r3, #2
 800a71e:	f73f aed5 	bgt.w	800a4cc <_dtoa_r+0x8dc>
 800a722:	9d06      	ldr	r5, [sp, #24]
 800a724:	4631      	mov	r1, r6
 800a726:	4658      	mov	r0, fp
 800a728:	f7ff f9d4 	bl	8009ad4 <quorem>
 800a72c:	9b06      	ldr	r3, [sp, #24]
 800a72e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a732:	f805 8b01 	strb.w	r8, [r5], #1
 800a736:	9a04      	ldr	r2, [sp, #16]
 800a738:	1aeb      	subs	r3, r5, r3
 800a73a:	429a      	cmp	r2, r3
 800a73c:	ddb5      	ble.n	800a6aa <_dtoa_r+0xaba>
 800a73e:	4659      	mov	r1, fp
 800a740:	2300      	movs	r3, #0
 800a742:	220a      	movs	r2, #10
 800a744:	4620      	mov	r0, r4
 800a746:	f000 f870 	bl	800a82a <__multadd>
 800a74a:	4683      	mov	fp, r0
 800a74c:	e7ea      	b.n	800a724 <_dtoa_r+0xb34>
 800a74e:	bf00      	nop
 800a750:	0800beb0 	.word	0x0800beb0
 800a754:	0800bed4 	.word	0x0800bed4

0800a758 <_localeconv_r>:
 800a758:	4b04      	ldr	r3, [pc, #16]	; (800a76c <_localeconv_r+0x14>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	6a18      	ldr	r0, [r3, #32]
 800a75e:	4b04      	ldr	r3, [pc, #16]	; (800a770 <_localeconv_r+0x18>)
 800a760:	2800      	cmp	r0, #0
 800a762:	bf08      	it	eq
 800a764:	4618      	moveq	r0, r3
 800a766:	30f0      	adds	r0, #240	; 0xf0
 800a768:	4770      	bx	lr
 800a76a:	bf00      	nop
 800a76c:	20000024 	.word	0x20000024
 800a770:	20000088 	.word	0x20000088

0800a774 <memchr>:
 800a774:	b510      	push	{r4, lr}
 800a776:	b2c9      	uxtb	r1, r1
 800a778:	4402      	add	r2, r0
 800a77a:	4290      	cmp	r0, r2
 800a77c:	4603      	mov	r3, r0
 800a77e:	d101      	bne.n	800a784 <memchr+0x10>
 800a780:	2300      	movs	r3, #0
 800a782:	e003      	b.n	800a78c <memchr+0x18>
 800a784:	781c      	ldrb	r4, [r3, #0]
 800a786:	3001      	adds	r0, #1
 800a788:	428c      	cmp	r4, r1
 800a78a:	d1f6      	bne.n	800a77a <memchr+0x6>
 800a78c:	4618      	mov	r0, r3
 800a78e:	bd10      	pop	{r4, pc}

0800a790 <__malloc_lock>:
 800a790:	4770      	bx	lr

0800a792 <__malloc_unlock>:
 800a792:	4770      	bx	lr

0800a794 <_Balloc>:
 800a794:	b570      	push	{r4, r5, r6, lr}
 800a796:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a798:	4604      	mov	r4, r0
 800a79a:	460e      	mov	r6, r1
 800a79c:	b93d      	cbnz	r5, 800a7ae <_Balloc+0x1a>
 800a79e:	2010      	movs	r0, #16
 800a7a0:	f7fe fc4e 	bl	8009040 <malloc>
 800a7a4:	6260      	str	r0, [r4, #36]	; 0x24
 800a7a6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a7aa:	6005      	str	r5, [r0, #0]
 800a7ac:	60c5      	str	r5, [r0, #12]
 800a7ae:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a7b0:	68eb      	ldr	r3, [r5, #12]
 800a7b2:	b183      	cbz	r3, 800a7d6 <_Balloc+0x42>
 800a7b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7b6:	68db      	ldr	r3, [r3, #12]
 800a7b8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a7bc:	b9b8      	cbnz	r0, 800a7ee <_Balloc+0x5a>
 800a7be:	2101      	movs	r1, #1
 800a7c0:	fa01 f506 	lsl.w	r5, r1, r6
 800a7c4:	1d6a      	adds	r2, r5, #5
 800a7c6:	0092      	lsls	r2, r2, #2
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	f000 fabe 	bl	800ad4a <_calloc_r>
 800a7ce:	b160      	cbz	r0, 800a7ea <_Balloc+0x56>
 800a7d0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a7d4:	e00e      	b.n	800a7f4 <_Balloc+0x60>
 800a7d6:	2221      	movs	r2, #33	; 0x21
 800a7d8:	2104      	movs	r1, #4
 800a7da:	4620      	mov	r0, r4
 800a7dc:	f000 fab5 	bl	800ad4a <_calloc_r>
 800a7e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7e2:	60e8      	str	r0, [r5, #12]
 800a7e4:	68db      	ldr	r3, [r3, #12]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d1e4      	bne.n	800a7b4 <_Balloc+0x20>
 800a7ea:	2000      	movs	r0, #0
 800a7ec:	bd70      	pop	{r4, r5, r6, pc}
 800a7ee:	6802      	ldr	r2, [r0, #0]
 800a7f0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a7fa:	e7f7      	b.n	800a7ec <_Balloc+0x58>

0800a7fc <_Bfree>:
 800a7fc:	b570      	push	{r4, r5, r6, lr}
 800a7fe:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a800:	4606      	mov	r6, r0
 800a802:	460d      	mov	r5, r1
 800a804:	b93c      	cbnz	r4, 800a816 <_Bfree+0x1a>
 800a806:	2010      	movs	r0, #16
 800a808:	f7fe fc1a 	bl	8009040 <malloc>
 800a80c:	6270      	str	r0, [r6, #36]	; 0x24
 800a80e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a812:	6004      	str	r4, [r0, #0]
 800a814:	60c4      	str	r4, [r0, #12]
 800a816:	b13d      	cbz	r5, 800a828 <_Bfree+0x2c>
 800a818:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a81a:	686a      	ldr	r2, [r5, #4]
 800a81c:	68db      	ldr	r3, [r3, #12]
 800a81e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a822:	6029      	str	r1, [r5, #0]
 800a824:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a828:	bd70      	pop	{r4, r5, r6, pc}

0800a82a <__multadd>:
 800a82a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a82e:	461f      	mov	r7, r3
 800a830:	4606      	mov	r6, r0
 800a832:	460c      	mov	r4, r1
 800a834:	2300      	movs	r3, #0
 800a836:	690d      	ldr	r5, [r1, #16]
 800a838:	f101 0c14 	add.w	ip, r1, #20
 800a83c:	f8dc 0000 	ldr.w	r0, [ip]
 800a840:	3301      	adds	r3, #1
 800a842:	b281      	uxth	r1, r0
 800a844:	fb02 7101 	mla	r1, r2, r1, r7
 800a848:	0c00      	lsrs	r0, r0, #16
 800a84a:	0c0f      	lsrs	r7, r1, #16
 800a84c:	fb02 7000 	mla	r0, r2, r0, r7
 800a850:	b289      	uxth	r1, r1
 800a852:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a856:	429d      	cmp	r5, r3
 800a858:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a85c:	f84c 1b04 	str.w	r1, [ip], #4
 800a860:	dcec      	bgt.n	800a83c <__multadd+0x12>
 800a862:	b1d7      	cbz	r7, 800a89a <__multadd+0x70>
 800a864:	68a3      	ldr	r3, [r4, #8]
 800a866:	42ab      	cmp	r3, r5
 800a868:	dc12      	bgt.n	800a890 <__multadd+0x66>
 800a86a:	6861      	ldr	r1, [r4, #4]
 800a86c:	4630      	mov	r0, r6
 800a86e:	3101      	adds	r1, #1
 800a870:	f7ff ff90 	bl	800a794 <_Balloc>
 800a874:	4680      	mov	r8, r0
 800a876:	6922      	ldr	r2, [r4, #16]
 800a878:	f104 010c 	add.w	r1, r4, #12
 800a87c:	3202      	adds	r2, #2
 800a87e:	0092      	lsls	r2, r2, #2
 800a880:	300c      	adds	r0, #12
 800a882:	f7fe fbed 	bl	8009060 <memcpy>
 800a886:	4621      	mov	r1, r4
 800a888:	4630      	mov	r0, r6
 800a88a:	f7ff ffb7 	bl	800a7fc <_Bfree>
 800a88e:	4644      	mov	r4, r8
 800a890:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a894:	3501      	adds	r5, #1
 800a896:	615f      	str	r7, [r3, #20]
 800a898:	6125      	str	r5, [r4, #16]
 800a89a:	4620      	mov	r0, r4
 800a89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a8a0 <__hi0bits>:
 800a8a0:	0c02      	lsrs	r2, r0, #16
 800a8a2:	0412      	lsls	r2, r2, #16
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	b9b2      	cbnz	r2, 800a8d6 <__hi0bits+0x36>
 800a8a8:	0403      	lsls	r3, r0, #16
 800a8aa:	2010      	movs	r0, #16
 800a8ac:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a8b0:	bf04      	itt	eq
 800a8b2:	021b      	lsleq	r3, r3, #8
 800a8b4:	3008      	addeq	r0, #8
 800a8b6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a8ba:	bf04      	itt	eq
 800a8bc:	011b      	lsleq	r3, r3, #4
 800a8be:	3004      	addeq	r0, #4
 800a8c0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a8c4:	bf04      	itt	eq
 800a8c6:	009b      	lsleq	r3, r3, #2
 800a8c8:	3002      	addeq	r0, #2
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	db06      	blt.n	800a8dc <__hi0bits+0x3c>
 800a8ce:	005b      	lsls	r3, r3, #1
 800a8d0:	d503      	bpl.n	800a8da <__hi0bits+0x3a>
 800a8d2:	3001      	adds	r0, #1
 800a8d4:	4770      	bx	lr
 800a8d6:	2000      	movs	r0, #0
 800a8d8:	e7e8      	b.n	800a8ac <__hi0bits+0xc>
 800a8da:	2020      	movs	r0, #32
 800a8dc:	4770      	bx	lr

0800a8de <__lo0bits>:
 800a8de:	6803      	ldr	r3, [r0, #0]
 800a8e0:	4601      	mov	r1, r0
 800a8e2:	f013 0207 	ands.w	r2, r3, #7
 800a8e6:	d00b      	beq.n	800a900 <__lo0bits+0x22>
 800a8e8:	07da      	lsls	r2, r3, #31
 800a8ea:	d423      	bmi.n	800a934 <__lo0bits+0x56>
 800a8ec:	0798      	lsls	r0, r3, #30
 800a8ee:	bf49      	itett	mi
 800a8f0:	085b      	lsrmi	r3, r3, #1
 800a8f2:	089b      	lsrpl	r3, r3, #2
 800a8f4:	2001      	movmi	r0, #1
 800a8f6:	600b      	strmi	r3, [r1, #0]
 800a8f8:	bf5c      	itt	pl
 800a8fa:	600b      	strpl	r3, [r1, #0]
 800a8fc:	2002      	movpl	r0, #2
 800a8fe:	4770      	bx	lr
 800a900:	b298      	uxth	r0, r3
 800a902:	b9a8      	cbnz	r0, 800a930 <__lo0bits+0x52>
 800a904:	2010      	movs	r0, #16
 800a906:	0c1b      	lsrs	r3, r3, #16
 800a908:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a90c:	bf04      	itt	eq
 800a90e:	0a1b      	lsreq	r3, r3, #8
 800a910:	3008      	addeq	r0, #8
 800a912:	071a      	lsls	r2, r3, #28
 800a914:	bf04      	itt	eq
 800a916:	091b      	lsreq	r3, r3, #4
 800a918:	3004      	addeq	r0, #4
 800a91a:	079a      	lsls	r2, r3, #30
 800a91c:	bf04      	itt	eq
 800a91e:	089b      	lsreq	r3, r3, #2
 800a920:	3002      	addeq	r0, #2
 800a922:	07da      	lsls	r2, r3, #31
 800a924:	d402      	bmi.n	800a92c <__lo0bits+0x4e>
 800a926:	085b      	lsrs	r3, r3, #1
 800a928:	d006      	beq.n	800a938 <__lo0bits+0x5a>
 800a92a:	3001      	adds	r0, #1
 800a92c:	600b      	str	r3, [r1, #0]
 800a92e:	4770      	bx	lr
 800a930:	4610      	mov	r0, r2
 800a932:	e7e9      	b.n	800a908 <__lo0bits+0x2a>
 800a934:	2000      	movs	r0, #0
 800a936:	4770      	bx	lr
 800a938:	2020      	movs	r0, #32
 800a93a:	4770      	bx	lr

0800a93c <__i2b>:
 800a93c:	b510      	push	{r4, lr}
 800a93e:	460c      	mov	r4, r1
 800a940:	2101      	movs	r1, #1
 800a942:	f7ff ff27 	bl	800a794 <_Balloc>
 800a946:	2201      	movs	r2, #1
 800a948:	6144      	str	r4, [r0, #20]
 800a94a:	6102      	str	r2, [r0, #16]
 800a94c:	bd10      	pop	{r4, pc}

0800a94e <__multiply>:
 800a94e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a952:	4614      	mov	r4, r2
 800a954:	690a      	ldr	r2, [r1, #16]
 800a956:	6923      	ldr	r3, [r4, #16]
 800a958:	4688      	mov	r8, r1
 800a95a:	429a      	cmp	r2, r3
 800a95c:	bfbe      	ittt	lt
 800a95e:	460b      	movlt	r3, r1
 800a960:	46a0      	movlt	r8, r4
 800a962:	461c      	movlt	r4, r3
 800a964:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a968:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a96c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a970:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a974:	eb07 0609 	add.w	r6, r7, r9
 800a978:	42b3      	cmp	r3, r6
 800a97a:	bfb8      	it	lt
 800a97c:	3101      	addlt	r1, #1
 800a97e:	f7ff ff09 	bl	800a794 <_Balloc>
 800a982:	f100 0514 	add.w	r5, r0, #20
 800a986:	462b      	mov	r3, r5
 800a988:	2200      	movs	r2, #0
 800a98a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a98e:	4573      	cmp	r3, lr
 800a990:	d316      	bcc.n	800a9c0 <__multiply+0x72>
 800a992:	f104 0214 	add.w	r2, r4, #20
 800a996:	f108 0114 	add.w	r1, r8, #20
 800a99a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a99e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a9a2:	9300      	str	r3, [sp, #0]
 800a9a4:	9b00      	ldr	r3, [sp, #0]
 800a9a6:	9201      	str	r2, [sp, #4]
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d80c      	bhi.n	800a9c6 <__multiply+0x78>
 800a9ac:	2e00      	cmp	r6, #0
 800a9ae:	dd03      	ble.n	800a9b8 <__multiply+0x6a>
 800a9b0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d05d      	beq.n	800aa74 <__multiply+0x126>
 800a9b8:	6106      	str	r6, [r0, #16]
 800a9ba:	b003      	add	sp, #12
 800a9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9c0:	f843 2b04 	str.w	r2, [r3], #4
 800a9c4:	e7e3      	b.n	800a98e <__multiply+0x40>
 800a9c6:	f8b2 b000 	ldrh.w	fp, [r2]
 800a9ca:	f1bb 0f00 	cmp.w	fp, #0
 800a9ce:	d023      	beq.n	800aa18 <__multiply+0xca>
 800a9d0:	4689      	mov	r9, r1
 800a9d2:	46ac      	mov	ip, r5
 800a9d4:	f04f 0800 	mov.w	r8, #0
 800a9d8:	f859 4b04 	ldr.w	r4, [r9], #4
 800a9dc:	f8dc a000 	ldr.w	sl, [ip]
 800a9e0:	b2a3      	uxth	r3, r4
 800a9e2:	fa1f fa8a 	uxth.w	sl, sl
 800a9e6:	fb0b a303 	mla	r3, fp, r3, sl
 800a9ea:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a9ee:	f8dc 4000 	ldr.w	r4, [ip]
 800a9f2:	4443      	add	r3, r8
 800a9f4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a9f8:	fb0b 840a 	mla	r4, fp, sl, r8
 800a9fc:	46e2      	mov	sl, ip
 800a9fe:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800aa02:	b29b      	uxth	r3, r3
 800aa04:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800aa08:	454f      	cmp	r7, r9
 800aa0a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800aa0e:	f84a 3b04 	str.w	r3, [sl], #4
 800aa12:	d82b      	bhi.n	800aa6c <__multiply+0x11e>
 800aa14:	f8cc 8004 	str.w	r8, [ip, #4]
 800aa18:	9b01      	ldr	r3, [sp, #4]
 800aa1a:	3204      	adds	r2, #4
 800aa1c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800aa20:	f1ba 0f00 	cmp.w	sl, #0
 800aa24:	d020      	beq.n	800aa68 <__multiply+0x11a>
 800aa26:	4689      	mov	r9, r1
 800aa28:	46a8      	mov	r8, r5
 800aa2a:	f04f 0b00 	mov.w	fp, #0
 800aa2e:	682b      	ldr	r3, [r5, #0]
 800aa30:	f8b9 c000 	ldrh.w	ip, [r9]
 800aa34:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800aa38:	b29b      	uxth	r3, r3
 800aa3a:	fb0a 440c 	mla	r4, sl, ip, r4
 800aa3e:	46c4      	mov	ip, r8
 800aa40:	445c      	add	r4, fp
 800aa42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800aa46:	f84c 3b04 	str.w	r3, [ip], #4
 800aa4a:	f859 3b04 	ldr.w	r3, [r9], #4
 800aa4e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800aa52:	0c1b      	lsrs	r3, r3, #16
 800aa54:	fb0a b303 	mla	r3, sl, r3, fp
 800aa58:	454f      	cmp	r7, r9
 800aa5a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800aa5e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800aa62:	d805      	bhi.n	800aa70 <__multiply+0x122>
 800aa64:	f8c8 3004 	str.w	r3, [r8, #4]
 800aa68:	3504      	adds	r5, #4
 800aa6a:	e79b      	b.n	800a9a4 <__multiply+0x56>
 800aa6c:	46d4      	mov	ip, sl
 800aa6e:	e7b3      	b.n	800a9d8 <__multiply+0x8a>
 800aa70:	46e0      	mov	r8, ip
 800aa72:	e7dd      	b.n	800aa30 <__multiply+0xe2>
 800aa74:	3e01      	subs	r6, #1
 800aa76:	e799      	b.n	800a9ac <__multiply+0x5e>

0800aa78 <__pow5mult>:
 800aa78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa7c:	4615      	mov	r5, r2
 800aa7e:	f012 0203 	ands.w	r2, r2, #3
 800aa82:	4606      	mov	r6, r0
 800aa84:	460f      	mov	r7, r1
 800aa86:	d007      	beq.n	800aa98 <__pow5mult+0x20>
 800aa88:	4c21      	ldr	r4, [pc, #132]	; (800ab10 <__pow5mult+0x98>)
 800aa8a:	3a01      	subs	r2, #1
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aa92:	f7ff feca 	bl	800a82a <__multadd>
 800aa96:	4607      	mov	r7, r0
 800aa98:	10ad      	asrs	r5, r5, #2
 800aa9a:	d035      	beq.n	800ab08 <__pow5mult+0x90>
 800aa9c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800aa9e:	b93c      	cbnz	r4, 800aab0 <__pow5mult+0x38>
 800aaa0:	2010      	movs	r0, #16
 800aaa2:	f7fe facd 	bl	8009040 <malloc>
 800aaa6:	6270      	str	r0, [r6, #36]	; 0x24
 800aaa8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aaac:	6004      	str	r4, [r0, #0]
 800aaae:	60c4      	str	r4, [r0, #12]
 800aab0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aab4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aab8:	b94c      	cbnz	r4, 800aace <__pow5mult+0x56>
 800aaba:	f240 2171 	movw	r1, #625	; 0x271
 800aabe:	4630      	mov	r0, r6
 800aac0:	f7ff ff3c 	bl	800a93c <__i2b>
 800aac4:	2300      	movs	r3, #0
 800aac6:	4604      	mov	r4, r0
 800aac8:	f8c8 0008 	str.w	r0, [r8, #8]
 800aacc:	6003      	str	r3, [r0, #0]
 800aace:	f04f 0800 	mov.w	r8, #0
 800aad2:	07eb      	lsls	r3, r5, #31
 800aad4:	d50a      	bpl.n	800aaec <__pow5mult+0x74>
 800aad6:	4639      	mov	r1, r7
 800aad8:	4622      	mov	r2, r4
 800aada:	4630      	mov	r0, r6
 800aadc:	f7ff ff37 	bl	800a94e <__multiply>
 800aae0:	4681      	mov	r9, r0
 800aae2:	4639      	mov	r1, r7
 800aae4:	4630      	mov	r0, r6
 800aae6:	f7ff fe89 	bl	800a7fc <_Bfree>
 800aaea:	464f      	mov	r7, r9
 800aaec:	106d      	asrs	r5, r5, #1
 800aaee:	d00b      	beq.n	800ab08 <__pow5mult+0x90>
 800aaf0:	6820      	ldr	r0, [r4, #0]
 800aaf2:	b938      	cbnz	r0, 800ab04 <__pow5mult+0x8c>
 800aaf4:	4622      	mov	r2, r4
 800aaf6:	4621      	mov	r1, r4
 800aaf8:	4630      	mov	r0, r6
 800aafa:	f7ff ff28 	bl	800a94e <__multiply>
 800aafe:	6020      	str	r0, [r4, #0]
 800ab00:	f8c0 8000 	str.w	r8, [r0]
 800ab04:	4604      	mov	r4, r0
 800ab06:	e7e4      	b.n	800aad2 <__pow5mult+0x5a>
 800ab08:	4638      	mov	r0, r7
 800ab0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab0e:	bf00      	nop
 800ab10:	0800bfd8 	.word	0x0800bfd8

0800ab14 <__lshift>:
 800ab14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab18:	460c      	mov	r4, r1
 800ab1a:	4607      	mov	r7, r0
 800ab1c:	4616      	mov	r6, r2
 800ab1e:	6923      	ldr	r3, [r4, #16]
 800ab20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ab24:	eb0a 0903 	add.w	r9, sl, r3
 800ab28:	6849      	ldr	r1, [r1, #4]
 800ab2a:	68a3      	ldr	r3, [r4, #8]
 800ab2c:	f109 0501 	add.w	r5, r9, #1
 800ab30:	42ab      	cmp	r3, r5
 800ab32:	db32      	blt.n	800ab9a <__lshift+0x86>
 800ab34:	4638      	mov	r0, r7
 800ab36:	f7ff fe2d 	bl	800a794 <_Balloc>
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	4680      	mov	r8, r0
 800ab3e:	461a      	mov	r2, r3
 800ab40:	f100 0114 	add.w	r1, r0, #20
 800ab44:	4553      	cmp	r3, sl
 800ab46:	db2b      	blt.n	800aba0 <__lshift+0x8c>
 800ab48:	6920      	ldr	r0, [r4, #16]
 800ab4a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ab4e:	f104 0314 	add.w	r3, r4, #20
 800ab52:	f016 021f 	ands.w	r2, r6, #31
 800ab56:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ab5a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ab5e:	d025      	beq.n	800abac <__lshift+0x98>
 800ab60:	2000      	movs	r0, #0
 800ab62:	f1c2 0e20 	rsb	lr, r2, #32
 800ab66:	468a      	mov	sl, r1
 800ab68:	681e      	ldr	r6, [r3, #0]
 800ab6a:	4096      	lsls	r6, r2
 800ab6c:	4330      	orrs	r0, r6
 800ab6e:	f84a 0b04 	str.w	r0, [sl], #4
 800ab72:	f853 0b04 	ldr.w	r0, [r3], #4
 800ab76:	459c      	cmp	ip, r3
 800ab78:	fa20 f00e 	lsr.w	r0, r0, lr
 800ab7c:	d814      	bhi.n	800aba8 <__lshift+0x94>
 800ab7e:	6048      	str	r0, [r1, #4]
 800ab80:	b108      	cbz	r0, 800ab86 <__lshift+0x72>
 800ab82:	f109 0502 	add.w	r5, r9, #2
 800ab86:	3d01      	subs	r5, #1
 800ab88:	4638      	mov	r0, r7
 800ab8a:	f8c8 5010 	str.w	r5, [r8, #16]
 800ab8e:	4621      	mov	r1, r4
 800ab90:	f7ff fe34 	bl	800a7fc <_Bfree>
 800ab94:	4640      	mov	r0, r8
 800ab96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab9a:	3101      	adds	r1, #1
 800ab9c:	005b      	lsls	r3, r3, #1
 800ab9e:	e7c7      	b.n	800ab30 <__lshift+0x1c>
 800aba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800aba4:	3301      	adds	r3, #1
 800aba6:	e7cd      	b.n	800ab44 <__lshift+0x30>
 800aba8:	4651      	mov	r1, sl
 800abaa:	e7dc      	b.n	800ab66 <__lshift+0x52>
 800abac:	3904      	subs	r1, #4
 800abae:	f853 2b04 	ldr.w	r2, [r3], #4
 800abb2:	459c      	cmp	ip, r3
 800abb4:	f841 2f04 	str.w	r2, [r1, #4]!
 800abb8:	d8f9      	bhi.n	800abae <__lshift+0x9a>
 800abba:	e7e4      	b.n	800ab86 <__lshift+0x72>

0800abbc <__mcmp>:
 800abbc:	6903      	ldr	r3, [r0, #16]
 800abbe:	690a      	ldr	r2, [r1, #16]
 800abc0:	b530      	push	{r4, r5, lr}
 800abc2:	1a9b      	subs	r3, r3, r2
 800abc4:	d10c      	bne.n	800abe0 <__mcmp+0x24>
 800abc6:	0092      	lsls	r2, r2, #2
 800abc8:	3014      	adds	r0, #20
 800abca:	3114      	adds	r1, #20
 800abcc:	1884      	adds	r4, r0, r2
 800abce:	4411      	add	r1, r2
 800abd0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800abd4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800abd8:	4295      	cmp	r5, r2
 800abda:	d003      	beq.n	800abe4 <__mcmp+0x28>
 800abdc:	d305      	bcc.n	800abea <__mcmp+0x2e>
 800abde:	2301      	movs	r3, #1
 800abe0:	4618      	mov	r0, r3
 800abe2:	bd30      	pop	{r4, r5, pc}
 800abe4:	42a0      	cmp	r0, r4
 800abe6:	d3f3      	bcc.n	800abd0 <__mcmp+0x14>
 800abe8:	e7fa      	b.n	800abe0 <__mcmp+0x24>
 800abea:	f04f 33ff 	mov.w	r3, #4294967295
 800abee:	e7f7      	b.n	800abe0 <__mcmp+0x24>

0800abf0 <__mdiff>:
 800abf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abf4:	460d      	mov	r5, r1
 800abf6:	4607      	mov	r7, r0
 800abf8:	4611      	mov	r1, r2
 800abfa:	4628      	mov	r0, r5
 800abfc:	4614      	mov	r4, r2
 800abfe:	f7ff ffdd 	bl	800abbc <__mcmp>
 800ac02:	1e06      	subs	r6, r0, #0
 800ac04:	d108      	bne.n	800ac18 <__mdiff+0x28>
 800ac06:	4631      	mov	r1, r6
 800ac08:	4638      	mov	r0, r7
 800ac0a:	f7ff fdc3 	bl	800a794 <_Balloc>
 800ac0e:	2301      	movs	r3, #1
 800ac10:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ac14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac18:	bfa4      	itt	ge
 800ac1a:	4623      	movge	r3, r4
 800ac1c:	462c      	movge	r4, r5
 800ac1e:	4638      	mov	r0, r7
 800ac20:	6861      	ldr	r1, [r4, #4]
 800ac22:	bfa6      	itte	ge
 800ac24:	461d      	movge	r5, r3
 800ac26:	2600      	movge	r6, #0
 800ac28:	2601      	movlt	r6, #1
 800ac2a:	f7ff fdb3 	bl	800a794 <_Balloc>
 800ac2e:	f04f 0e00 	mov.w	lr, #0
 800ac32:	60c6      	str	r6, [r0, #12]
 800ac34:	692b      	ldr	r3, [r5, #16]
 800ac36:	6926      	ldr	r6, [r4, #16]
 800ac38:	f104 0214 	add.w	r2, r4, #20
 800ac3c:	f105 0914 	add.w	r9, r5, #20
 800ac40:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ac44:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ac48:	f100 0114 	add.w	r1, r0, #20
 800ac4c:	f852 ab04 	ldr.w	sl, [r2], #4
 800ac50:	f859 5b04 	ldr.w	r5, [r9], #4
 800ac54:	fa1f f38a 	uxth.w	r3, sl
 800ac58:	4473      	add	r3, lr
 800ac5a:	b2ac      	uxth	r4, r5
 800ac5c:	1b1b      	subs	r3, r3, r4
 800ac5e:	0c2c      	lsrs	r4, r5, #16
 800ac60:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800ac64:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800ac68:	b29b      	uxth	r3, r3
 800ac6a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800ac6e:	45c8      	cmp	r8, r9
 800ac70:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800ac74:	4694      	mov	ip, r2
 800ac76:	f841 4b04 	str.w	r4, [r1], #4
 800ac7a:	d8e7      	bhi.n	800ac4c <__mdiff+0x5c>
 800ac7c:	45bc      	cmp	ip, r7
 800ac7e:	d304      	bcc.n	800ac8a <__mdiff+0x9a>
 800ac80:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800ac84:	b183      	cbz	r3, 800aca8 <__mdiff+0xb8>
 800ac86:	6106      	str	r6, [r0, #16]
 800ac88:	e7c4      	b.n	800ac14 <__mdiff+0x24>
 800ac8a:	f85c 4b04 	ldr.w	r4, [ip], #4
 800ac8e:	b2a2      	uxth	r2, r4
 800ac90:	4472      	add	r2, lr
 800ac92:	1413      	asrs	r3, r2, #16
 800ac94:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ac98:	b292      	uxth	r2, r2
 800ac9a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ac9e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800aca2:	f841 2b04 	str.w	r2, [r1], #4
 800aca6:	e7e9      	b.n	800ac7c <__mdiff+0x8c>
 800aca8:	3e01      	subs	r6, #1
 800acaa:	e7e9      	b.n	800ac80 <__mdiff+0x90>

0800acac <__d2b>:
 800acac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800acb0:	461c      	mov	r4, r3
 800acb2:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800acb6:	2101      	movs	r1, #1
 800acb8:	4690      	mov	r8, r2
 800acba:	f7ff fd6b 	bl	800a794 <_Balloc>
 800acbe:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800acc2:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800acc6:	4607      	mov	r7, r0
 800acc8:	bb34      	cbnz	r4, 800ad18 <__d2b+0x6c>
 800acca:	9201      	str	r2, [sp, #4]
 800accc:	f1b8 0200 	subs.w	r2, r8, #0
 800acd0:	d027      	beq.n	800ad22 <__d2b+0x76>
 800acd2:	a802      	add	r0, sp, #8
 800acd4:	f840 2d08 	str.w	r2, [r0, #-8]!
 800acd8:	f7ff fe01 	bl	800a8de <__lo0bits>
 800acdc:	9900      	ldr	r1, [sp, #0]
 800acde:	b1f0      	cbz	r0, 800ad1e <__d2b+0x72>
 800ace0:	9a01      	ldr	r2, [sp, #4]
 800ace2:	f1c0 0320 	rsb	r3, r0, #32
 800ace6:	fa02 f303 	lsl.w	r3, r2, r3
 800acea:	430b      	orrs	r3, r1
 800acec:	40c2      	lsrs	r2, r0
 800acee:	617b      	str	r3, [r7, #20]
 800acf0:	9201      	str	r2, [sp, #4]
 800acf2:	9b01      	ldr	r3, [sp, #4]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	bf14      	ite	ne
 800acf8:	2102      	movne	r1, #2
 800acfa:	2101      	moveq	r1, #1
 800acfc:	61bb      	str	r3, [r7, #24]
 800acfe:	6139      	str	r1, [r7, #16]
 800ad00:	b1c4      	cbz	r4, 800ad34 <__d2b+0x88>
 800ad02:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ad06:	4404      	add	r4, r0
 800ad08:	6034      	str	r4, [r6, #0]
 800ad0a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ad0e:	6028      	str	r0, [r5, #0]
 800ad10:	4638      	mov	r0, r7
 800ad12:	b002      	add	sp, #8
 800ad14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad18:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800ad1c:	e7d5      	b.n	800acca <__d2b+0x1e>
 800ad1e:	6179      	str	r1, [r7, #20]
 800ad20:	e7e7      	b.n	800acf2 <__d2b+0x46>
 800ad22:	a801      	add	r0, sp, #4
 800ad24:	f7ff fddb 	bl	800a8de <__lo0bits>
 800ad28:	2101      	movs	r1, #1
 800ad2a:	9b01      	ldr	r3, [sp, #4]
 800ad2c:	6139      	str	r1, [r7, #16]
 800ad2e:	617b      	str	r3, [r7, #20]
 800ad30:	3020      	adds	r0, #32
 800ad32:	e7e5      	b.n	800ad00 <__d2b+0x54>
 800ad34:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ad38:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ad3c:	6030      	str	r0, [r6, #0]
 800ad3e:	6918      	ldr	r0, [r3, #16]
 800ad40:	f7ff fdae 	bl	800a8a0 <__hi0bits>
 800ad44:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ad48:	e7e1      	b.n	800ad0e <__d2b+0x62>

0800ad4a <_calloc_r>:
 800ad4a:	b538      	push	{r3, r4, r5, lr}
 800ad4c:	fb02 f401 	mul.w	r4, r2, r1
 800ad50:	4621      	mov	r1, r4
 800ad52:	f7fe f9e5 	bl	8009120 <_malloc_r>
 800ad56:	4605      	mov	r5, r0
 800ad58:	b118      	cbz	r0, 800ad62 <_calloc_r+0x18>
 800ad5a:	4622      	mov	r2, r4
 800ad5c:	2100      	movs	r1, #0
 800ad5e:	f7fe f98a 	bl	8009076 <memset>
 800ad62:	4628      	mov	r0, r5
 800ad64:	bd38      	pop	{r3, r4, r5, pc}

0800ad66 <__ssputs_r>:
 800ad66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad6a:	688e      	ldr	r6, [r1, #8]
 800ad6c:	4682      	mov	sl, r0
 800ad6e:	429e      	cmp	r6, r3
 800ad70:	460c      	mov	r4, r1
 800ad72:	4690      	mov	r8, r2
 800ad74:	4699      	mov	r9, r3
 800ad76:	d837      	bhi.n	800ade8 <__ssputs_r+0x82>
 800ad78:	898a      	ldrh	r2, [r1, #12]
 800ad7a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ad7e:	d031      	beq.n	800ade4 <__ssputs_r+0x7e>
 800ad80:	2302      	movs	r3, #2
 800ad82:	6825      	ldr	r5, [r4, #0]
 800ad84:	6909      	ldr	r1, [r1, #16]
 800ad86:	1a6f      	subs	r7, r5, r1
 800ad88:	6965      	ldr	r5, [r4, #20]
 800ad8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad8e:	fb95 f5f3 	sdiv	r5, r5, r3
 800ad92:	f109 0301 	add.w	r3, r9, #1
 800ad96:	443b      	add	r3, r7
 800ad98:	429d      	cmp	r5, r3
 800ad9a:	bf38      	it	cc
 800ad9c:	461d      	movcc	r5, r3
 800ad9e:	0553      	lsls	r3, r2, #21
 800ada0:	d530      	bpl.n	800ae04 <__ssputs_r+0x9e>
 800ada2:	4629      	mov	r1, r5
 800ada4:	f7fe f9bc 	bl	8009120 <_malloc_r>
 800ada8:	4606      	mov	r6, r0
 800adaa:	b950      	cbnz	r0, 800adc2 <__ssputs_r+0x5c>
 800adac:	230c      	movs	r3, #12
 800adae:	f04f 30ff 	mov.w	r0, #4294967295
 800adb2:	f8ca 3000 	str.w	r3, [sl]
 800adb6:	89a3      	ldrh	r3, [r4, #12]
 800adb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adbc:	81a3      	strh	r3, [r4, #12]
 800adbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adc2:	463a      	mov	r2, r7
 800adc4:	6921      	ldr	r1, [r4, #16]
 800adc6:	f7fe f94b 	bl	8009060 <memcpy>
 800adca:	89a3      	ldrh	r3, [r4, #12]
 800adcc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800add0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800add4:	81a3      	strh	r3, [r4, #12]
 800add6:	6126      	str	r6, [r4, #16]
 800add8:	443e      	add	r6, r7
 800adda:	6026      	str	r6, [r4, #0]
 800addc:	464e      	mov	r6, r9
 800adde:	6165      	str	r5, [r4, #20]
 800ade0:	1bed      	subs	r5, r5, r7
 800ade2:	60a5      	str	r5, [r4, #8]
 800ade4:	454e      	cmp	r6, r9
 800ade6:	d900      	bls.n	800adea <__ssputs_r+0x84>
 800ade8:	464e      	mov	r6, r9
 800adea:	4632      	mov	r2, r6
 800adec:	4641      	mov	r1, r8
 800adee:	6820      	ldr	r0, [r4, #0]
 800adf0:	f000 f91e 	bl	800b030 <memmove>
 800adf4:	68a3      	ldr	r3, [r4, #8]
 800adf6:	2000      	movs	r0, #0
 800adf8:	1b9b      	subs	r3, r3, r6
 800adfa:	60a3      	str	r3, [r4, #8]
 800adfc:	6823      	ldr	r3, [r4, #0]
 800adfe:	441e      	add	r6, r3
 800ae00:	6026      	str	r6, [r4, #0]
 800ae02:	e7dc      	b.n	800adbe <__ssputs_r+0x58>
 800ae04:	462a      	mov	r2, r5
 800ae06:	f000 f92c 	bl	800b062 <_realloc_r>
 800ae0a:	4606      	mov	r6, r0
 800ae0c:	2800      	cmp	r0, #0
 800ae0e:	d1e2      	bne.n	800add6 <__ssputs_r+0x70>
 800ae10:	6921      	ldr	r1, [r4, #16]
 800ae12:	4650      	mov	r0, sl
 800ae14:	f7fe f938 	bl	8009088 <_free_r>
 800ae18:	e7c8      	b.n	800adac <__ssputs_r+0x46>
	...

0800ae1c <_svfiprintf_r>:
 800ae1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae20:	461d      	mov	r5, r3
 800ae22:	898b      	ldrh	r3, [r1, #12]
 800ae24:	b09d      	sub	sp, #116	; 0x74
 800ae26:	061f      	lsls	r7, r3, #24
 800ae28:	4680      	mov	r8, r0
 800ae2a:	460c      	mov	r4, r1
 800ae2c:	4616      	mov	r6, r2
 800ae2e:	d50f      	bpl.n	800ae50 <_svfiprintf_r+0x34>
 800ae30:	690b      	ldr	r3, [r1, #16]
 800ae32:	b96b      	cbnz	r3, 800ae50 <_svfiprintf_r+0x34>
 800ae34:	2140      	movs	r1, #64	; 0x40
 800ae36:	f7fe f973 	bl	8009120 <_malloc_r>
 800ae3a:	6020      	str	r0, [r4, #0]
 800ae3c:	6120      	str	r0, [r4, #16]
 800ae3e:	b928      	cbnz	r0, 800ae4c <_svfiprintf_r+0x30>
 800ae40:	230c      	movs	r3, #12
 800ae42:	f8c8 3000 	str.w	r3, [r8]
 800ae46:	f04f 30ff 	mov.w	r0, #4294967295
 800ae4a:	e0c8      	b.n	800afde <_svfiprintf_r+0x1c2>
 800ae4c:	2340      	movs	r3, #64	; 0x40
 800ae4e:	6163      	str	r3, [r4, #20]
 800ae50:	2300      	movs	r3, #0
 800ae52:	9309      	str	r3, [sp, #36]	; 0x24
 800ae54:	2320      	movs	r3, #32
 800ae56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae5a:	2330      	movs	r3, #48	; 0x30
 800ae5c:	f04f 0b01 	mov.w	fp, #1
 800ae60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae64:	9503      	str	r5, [sp, #12]
 800ae66:	4637      	mov	r7, r6
 800ae68:	463d      	mov	r5, r7
 800ae6a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ae6e:	b10b      	cbz	r3, 800ae74 <_svfiprintf_r+0x58>
 800ae70:	2b25      	cmp	r3, #37	; 0x25
 800ae72:	d13e      	bne.n	800aef2 <_svfiprintf_r+0xd6>
 800ae74:	ebb7 0a06 	subs.w	sl, r7, r6
 800ae78:	d00b      	beq.n	800ae92 <_svfiprintf_r+0x76>
 800ae7a:	4653      	mov	r3, sl
 800ae7c:	4632      	mov	r2, r6
 800ae7e:	4621      	mov	r1, r4
 800ae80:	4640      	mov	r0, r8
 800ae82:	f7ff ff70 	bl	800ad66 <__ssputs_r>
 800ae86:	3001      	adds	r0, #1
 800ae88:	f000 80a4 	beq.w	800afd4 <_svfiprintf_r+0x1b8>
 800ae8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae8e:	4453      	add	r3, sl
 800ae90:	9309      	str	r3, [sp, #36]	; 0x24
 800ae92:	783b      	ldrb	r3, [r7, #0]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	f000 809d 	beq.w	800afd4 <_svfiprintf_r+0x1b8>
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	f04f 32ff 	mov.w	r2, #4294967295
 800aea0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aea4:	9304      	str	r3, [sp, #16]
 800aea6:	9307      	str	r3, [sp, #28]
 800aea8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aeac:	931a      	str	r3, [sp, #104]	; 0x68
 800aeae:	462f      	mov	r7, r5
 800aeb0:	2205      	movs	r2, #5
 800aeb2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800aeb6:	4850      	ldr	r0, [pc, #320]	; (800aff8 <_svfiprintf_r+0x1dc>)
 800aeb8:	f7ff fc5c 	bl	800a774 <memchr>
 800aebc:	9b04      	ldr	r3, [sp, #16]
 800aebe:	b9d0      	cbnz	r0, 800aef6 <_svfiprintf_r+0xda>
 800aec0:	06d9      	lsls	r1, r3, #27
 800aec2:	bf44      	itt	mi
 800aec4:	2220      	movmi	r2, #32
 800aec6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800aeca:	071a      	lsls	r2, r3, #28
 800aecc:	bf44      	itt	mi
 800aece:	222b      	movmi	r2, #43	; 0x2b
 800aed0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800aed4:	782a      	ldrb	r2, [r5, #0]
 800aed6:	2a2a      	cmp	r2, #42	; 0x2a
 800aed8:	d015      	beq.n	800af06 <_svfiprintf_r+0xea>
 800aeda:	462f      	mov	r7, r5
 800aedc:	2000      	movs	r0, #0
 800aede:	250a      	movs	r5, #10
 800aee0:	9a07      	ldr	r2, [sp, #28]
 800aee2:	4639      	mov	r1, r7
 800aee4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aee8:	3b30      	subs	r3, #48	; 0x30
 800aeea:	2b09      	cmp	r3, #9
 800aeec:	d94d      	bls.n	800af8a <_svfiprintf_r+0x16e>
 800aeee:	b1b8      	cbz	r0, 800af20 <_svfiprintf_r+0x104>
 800aef0:	e00f      	b.n	800af12 <_svfiprintf_r+0xf6>
 800aef2:	462f      	mov	r7, r5
 800aef4:	e7b8      	b.n	800ae68 <_svfiprintf_r+0x4c>
 800aef6:	4a40      	ldr	r2, [pc, #256]	; (800aff8 <_svfiprintf_r+0x1dc>)
 800aef8:	463d      	mov	r5, r7
 800aefa:	1a80      	subs	r0, r0, r2
 800aefc:	fa0b f000 	lsl.w	r0, fp, r0
 800af00:	4318      	orrs	r0, r3
 800af02:	9004      	str	r0, [sp, #16]
 800af04:	e7d3      	b.n	800aeae <_svfiprintf_r+0x92>
 800af06:	9a03      	ldr	r2, [sp, #12]
 800af08:	1d11      	adds	r1, r2, #4
 800af0a:	6812      	ldr	r2, [r2, #0]
 800af0c:	9103      	str	r1, [sp, #12]
 800af0e:	2a00      	cmp	r2, #0
 800af10:	db01      	blt.n	800af16 <_svfiprintf_r+0xfa>
 800af12:	9207      	str	r2, [sp, #28]
 800af14:	e004      	b.n	800af20 <_svfiprintf_r+0x104>
 800af16:	4252      	negs	r2, r2
 800af18:	f043 0302 	orr.w	r3, r3, #2
 800af1c:	9207      	str	r2, [sp, #28]
 800af1e:	9304      	str	r3, [sp, #16]
 800af20:	783b      	ldrb	r3, [r7, #0]
 800af22:	2b2e      	cmp	r3, #46	; 0x2e
 800af24:	d10c      	bne.n	800af40 <_svfiprintf_r+0x124>
 800af26:	787b      	ldrb	r3, [r7, #1]
 800af28:	2b2a      	cmp	r3, #42	; 0x2a
 800af2a:	d133      	bne.n	800af94 <_svfiprintf_r+0x178>
 800af2c:	9b03      	ldr	r3, [sp, #12]
 800af2e:	3702      	adds	r7, #2
 800af30:	1d1a      	adds	r2, r3, #4
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	9203      	str	r2, [sp, #12]
 800af36:	2b00      	cmp	r3, #0
 800af38:	bfb8      	it	lt
 800af3a:	f04f 33ff 	movlt.w	r3, #4294967295
 800af3e:	9305      	str	r3, [sp, #20]
 800af40:	4d2e      	ldr	r5, [pc, #184]	; (800affc <_svfiprintf_r+0x1e0>)
 800af42:	2203      	movs	r2, #3
 800af44:	7839      	ldrb	r1, [r7, #0]
 800af46:	4628      	mov	r0, r5
 800af48:	f7ff fc14 	bl	800a774 <memchr>
 800af4c:	b138      	cbz	r0, 800af5e <_svfiprintf_r+0x142>
 800af4e:	2340      	movs	r3, #64	; 0x40
 800af50:	1b40      	subs	r0, r0, r5
 800af52:	fa03 f000 	lsl.w	r0, r3, r0
 800af56:	9b04      	ldr	r3, [sp, #16]
 800af58:	3701      	adds	r7, #1
 800af5a:	4303      	orrs	r3, r0
 800af5c:	9304      	str	r3, [sp, #16]
 800af5e:	7839      	ldrb	r1, [r7, #0]
 800af60:	2206      	movs	r2, #6
 800af62:	4827      	ldr	r0, [pc, #156]	; (800b000 <_svfiprintf_r+0x1e4>)
 800af64:	1c7e      	adds	r6, r7, #1
 800af66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af6a:	f7ff fc03 	bl	800a774 <memchr>
 800af6e:	2800      	cmp	r0, #0
 800af70:	d038      	beq.n	800afe4 <_svfiprintf_r+0x1c8>
 800af72:	4b24      	ldr	r3, [pc, #144]	; (800b004 <_svfiprintf_r+0x1e8>)
 800af74:	bb13      	cbnz	r3, 800afbc <_svfiprintf_r+0x1a0>
 800af76:	9b03      	ldr	r3, [sp, #12]
 800af78:	3307      	adds	r3, #7
 800af7a:	f023 0307 	bic.w	r3, r3, #7
 800af7e:	3308      	adds	r3, #8
 800af80:	9303      	str	r3, [sp, #12]
 800af82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af84:	444b      	add	r3, r9
 800af86:	9309      	str	r3, [sp, #36]	; 0x24
 800af88:	e76d      	b.n	800ae66 <_svfiprintf_r+0x4a>
 800af8a:	fb05 3202 	mla	r2, r5, r2, r3
 800af8e:	2001      	movs	r0, #1
 800af90:	460f      	mov	r7, r1
 800af92:	e7a6      	b.n	800aee2 <_svfiprintf_r+0xc6>
 800af94:	2300      	movs	r3, #0
 800af96:	250a      	movs	r5, #10
 800af98:	4619      	mov	r1, r3
 800af9a:	3701      	adds	r7, #1
 800af9c:	9305      	str	r3, [sp, #20]
 800af9e:	4638      	mov	r0, r7
 800afa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afa4:	3a30      	subs	r2, #48	; 0x30
 800afa6:	2a09      	cmp	r2, #9
 800afa8:	d903      	bls.n	800afb2 <_svfiprintf_r+0x196>
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d0c8      	beq.n	800af40 <_svfiprintf_r+0x124>
 800afae:	9105      	str	r1, [sp, #20]
 800afb0:	e7c6      	b.n	800af40 <_svfiprintf_r+0x124>
 800afb2:	fb05 2101 	mla	r1, r5, r1, r2
 800afb6:	2301      	movs	r3, #1
 800afb8:	4607      	mov	r7, r0
 800afba:	e7f0      	b.n	800af9e <_svfiprintf_r+0x182>
 800afbc:	ab03      	add	r3, sp, #12
 800afbe:	9300      	str	r3, [sp, #0]
 800afc0:	4622      	mov	r2, r4
 800afc2:	4b11      	ldr	r3, [pc, #68]	; (800b008 <_svfiprintf_r+0x1ec>)
 800afc4:	a904      	add	r1, sp, #16
 800afc6:	4640      	mov	r0, r8
 800afc8:	f7fe f996 	bl	80092f8 <_printf_float>
 800afcc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800afd0:	4681      	mov	r9, r0
 800afd2:	d1d6      	bne.n	800af82 <_svfiprintf_r+0x166>
 800afd4:	89a3      	ldrh	r3, [r4, #12]
 800afd6:	065b      	lsls	r3, r3, #25
 800afd8:	f53f af35 	bmi.w	800ae46 <_svfiprintf_r+0x2a>
 800afdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800afde:	b01d      	add	sp, #116	; 0x74
 800afe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afe4:	ab03      	add	r3, sp, #12
 800afe6:	9300      	str	r3, [sp, #0]
 800afe8:	4622      	mov	r2, r4
 800afea:	4b07      	ldr	r3, [pc, #28]	; (800b008 <_svfiprintf_r+0x1ec>)
 800afec:	a904      	add	r1, sp, #16
 800afee:	4640      	mov	r0, r8
 800aff0:	f7fe fc2e 	bl	8009850 <_printf_i>
 800aff4:	e7ea      	b.n	800afcc <_svfiprintf_r+0x1b0>
 800aff6:	bf00      	nop
 800aff8:	0800bfe4 	.word	0x0800bfe4
 800affc:	0800bfea 	.word	0x0800bfea
 800b000:	0800bfee 	.word	0x0800bfee
 800b004:	080092f9 	.word	0x080092f9
 800b008:	0800ad67 	.word	0x0800ad67

0800b00c <__ascii_mbtowc>:
 800b00c:	b082      	sub	sp, #8
 800b00e:	b901      	cbnz	r1, 800b012 <__ascii_mbtowc+0x6>
 800b010:	a901      	add	r1, sp, #4
 800b012:	b142      	cbz	r2, 800b026 <__ascii_mbtowc+0x1a>
 800b014:	b14b      	cbz	r3, 800b02a <__ascii_mbtowc+0x1e>
 800b016:	7813      	ldrb	r3, [r2, #0]
 800b018:	600b      	str	r3, [r1, #0]
 800b01a:	7812      	ldrb	r2, [r2, #0]
 800b01c:	1c10      	adds	r0, r2, #0
 800b01e:	bf18      	it	ne
 800b020:	2001      	movne	r0, #1
 800b022:	b002      	add	sp, #8
 800b024:	4770      	bx	lr
 800b026:	4610      	mov	r0, r2
 800b028:	e7fb      	b.n	800b022 <__ascii_mbtowc+0x16>
 800b02a:	f06f 0001 	mvn.w	r0, #1
 800b02e:	e7f8      	b.n	800b022 <__ascii_mbtowc+0x16>

0800b030 <memmove>:
 800b030:	4288      	cmp	r0, r1
 800b032:	b510      	push	{r4, lr}
 800b034:	eb01 0302 	add.w	r3, r1, r2
 800b038:	d807      	bhi.n	800b04a <memmove+0x1a>
 800b03a:	1e42      	subs	r2, r0, #1
 800b03c:	4299      	cmp	r1, r3
 800b03e:	d00a      	beq.n	800b056 <memmove+0x26>
 800b040:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b044:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b048:	e7f8      	b.n	800b03c <memmove+0xc>
 800b04a:	4283      	cmp	r3, r0
 800b04c:	d9f5      	bls.n	800b03a <memmove+0xa>
 800b04e:	1881      	adds	r1, r0, r2
 800b050:	1ad2      	subs	r2, r2, r3
 800b052:	42d3      	cmn	r3, r2
 800b054:	d100      	bne.n	800b058 <memmove+0x28>
 800b056:	bd10      	pop	{r4, pc}
 800b058:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b05c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b060:	e7f7      	b.n	800b052 <memmove+0x22>

0800b062 <_realloc_r>:
 800b062:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b064:	4607      	mov	r7, r0
 800b066:	4614      	mov	r4, r2
 800b068:	460e      	mov	r6, r1
 800b06a:	b921      	cbnz	r1, 800b076 <_realloc_r+0x14>
 800b06c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b070:	4611      	mov	r1, r2
 800b072:	f7fe b855 	b.w	8009120 <_malloc_r>
 800b076:	b922      	cbnz	r2, 800b082 <_realloc_r+0x20>
 800b078:	f7fe f806 	bl	8009088 <_free_r>
 800b07c:	4625      	mov	r5, r4
 800b07e:	4628      	mov	r0, r5
 800b080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b082:	f000 f821 	bl	800b0c8 <_malloc_usable_size_r>
 800b086:	42a0      	cmp	r0, r4
 800b088:	d20f      	bcs.n	800b0aa <_realloc_r+0x48>
 800b08a:	4621      	mov	r1, r4
 800b08c:	4638      	mov	r0, r7
 800b08e:	f7fe f847 	bl	8009120 <_malloc_r>
 800b092:	4605      	mov	r5, r0
 800b094:	2800      	cmp	r0, #0
 800b096:	d0f2      	beq.n	800b07e <_realloc_r+0x1c>
 800b098:	4631      	mov	r1, r6
 800b09a:	4622      	mov	r2, r4
 800b09c:	f7fd ffe0 	bl	8009060 <memcpy>
 800b0a0:	4631      	mov	r1, r6
 800b0a2:	4638      	mov	r0, r7
 800b0a4:	f7fd fff0 	bl	8009088 <_free_r>
 800b0a8:	e7e9      	b.n	800b07e <_realloc_r+0x1c>
 800b0aa:	4635      	mov	r5, r6
 800b0ac:	e7e7      	b.n	800b07e <_realloc_r+0x1c>

0800b0ae <__ascii_wctomb>:
 800b0ae:	b149      	cbz	r1, 800b0c4 <__ascii_wctomb+0x16>
 800b0b0:	2aff      	cmp	r2, #255	; 0xff
 800b0b2:	bf8b      	itete	hi
 800b0b4:	238a      	movhi	r3, #138	; 0x8a
 800b0b6:	700a      	strbls	r2, [r1, #0]
 800b0b8:	6003      	strhi	r3, [r0, #0]
 800b0ba:	2001      	movls	r0, #1
 800b0bc:	bf88      	it	hi
 800b0be:	f04f 30ff 	movhi.w	r0, #4294967295
 800b0c2:	4770      	bx	lr
 800b0c4:	4608      	mov	r0, r1
 800b0c6:	4770      	bx	lr

0800b0c8 <_malloc_usable_size_r>:
 800b0c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0cc:	1f18      	subs	r0, r3, #4
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	bfbc      	itt	lt
 800b0d2:	580b      	ldrlt	r3, [r1, r0]
 800b0d4:	18c0      	addlt	r0, r0, r3
 800b0d6:	4770      	bx	lr

0800b0d8 <_init>:
 800b0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0da:	bf00      	nop
 800b0dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0de:	bc08      	pop	{r3}
 800b0e0:	469e      	mov	lr, r3
 800b0e2:	4770      	bx	lr

0800b0e4 <_fini>:
 800b0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0e6:	bf00      	nop
 800b0e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0ea:	bc08      	pop	{r3}
 800b0ec:	469e      	mov	lr, r3
 800b0ee:	4770      	bx	lr
