
SpeedGPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008780  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018a8  08008890  08008890  00018890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a138  0800a138  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800a138  0800a138  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a138  0800a138  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a138  0800a138  0001a138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a140  0800a140  0001a140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800a144  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d60  200001f8  0800a33c  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002f58  0800a33c  00022f58  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000280a7  00000000  00000000  00020221  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005078  00000000  00000000  000482c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00012d4c  00000000  00000000  0004d340  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001578  00000000  00000000  00060090  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001f68  00000000  00000000  00061608  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001a0a3  00000000  00000000  00063570  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000148db  00000000  00000000  0007d613  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0008547a  00000000  00000000  00091eee  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00117368  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ca8  00000000  00000000  001173e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	08008878 	.word	0x08008878

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	08008878 	.word	0x08008878

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b44:	f1a2 0201 	sub.w	r2, r2, #1
 8000b48:	d1ed      	bne.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <_Z13BuzzerSetFreqt>:


void BuzzerSetFreq(uint16_t freq)
{

	TIM2->PSC = (48000000  / ((BUZZER_VOLUME_MAX*2)*freq)) - 1; //prescaller
 8000f44:	23fa      	movs	r3, #250	; 0xfa
 8000f46:	4343      	muls	r3, r0
 8000f48:	4803      	ldr	r0, [pc, #12]	; (8000f58 <_Z13BuzzerSetFreqt+0x14>)
 8000f4a:	fb90 f0f3 	sdiv	r0, r0, r3
 8000f4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f52:	3801      	subs	r0, #1
 8000f54:	6298      	str	r0, [r3, #40]	; 0x28
}
 8000f56:	4770      	bx	lr
 8000f58:	02dc6c00 	.word	0x02dc6c00

08000f5c <_Z15BuzzerSetVolumet>:
void BuzzerSetVolume(uint16_t volume)
{
	if(volume > BUZZER_VOLUME_MAX)
		volume = BUZZER_VOLUME_MAX;

	TIM2->CCR1 = volume;
 8000f5c:	287d      	cmp	r0, #125	; 0x7d
 8000f5e:	bf28      	it	cs
 8000f60:	207d      	movcs	r0, #125	; 0x7d
 8000f62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f66:	6358      	str	r0, [r3, #52]	; 0x34
}
 8000f68:	4770      	bx	lr
	...

08000f6c <I2C_Write>:
#define YA_OFFSET_H         0x7A
#define YA_OFFSET_L         0x7B
#define ZA_OFFSET_H         0x7D
#define ZA_OFFSET_L         0x7E
I2C_HandleTypeDef* ihandle;
IIC_Result I2C_Write(uint8_t device_address, uint8_t register_address, uint8_t data) {
 8000f6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Format array to send */
	d[0] = register_address;
	d[1] = data;

	/* Try to transmit via I2C */
	if (HAL_I2C_Master_Transmit(ihandle, (uint16_t)device_address, (uint8_t *)d, 2, 1000) != HAL_OK) {
 8000f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f72:	4c09      	ldr	r4, [pc, #36]	; (8000f98 <I2C_Write+0x2c>)
	d[0] = register_address;
 8000f74:	f88d 100c 	strb.w	r1, [sp, #12]
	d[1] = data;
 8000f78:	f88d 200d 	strb.w	r2, [sp, #13]
	if (HAL_I2C_Master_Transmit(ihandle, (uint16_t)device_address, (uint8_t *)d, 2, 1000) != HAL_OK) {
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	4601      	mov	r1, r0
 8000f80:	2302      	movs	r3, #2
 8000f82:	aa03      	add	r2, sp, #12
 8000f84:	6820      	ldr	r0, [r4, #0]
 8000f86:	f002 f879 	bl	800307c <HAL_I2C_Master_Transmit>
 8000f8a:	b118      	cbz	r0, 8000f94 <I2C_Write+0x28>
		/* Check error */
		if (HAL_I2C_GetError(ihandle) != HAL_I2C_ERROR_AF) {
 8000f8c:	6820      	ldr	r0, [r4, #0]
 8000f8e:	f002 fbf7 	bl	8003780 <HAL_I2C_GetError>
 8000f92:	2001      	movs	r0, #1
	}

	/* Return OK */

	return IIC_Result_Ok;
}
 8000f94:	b004      	add	sp, #16
 8000f96:	bd10      	pop	{r4, pc}
 8000f98:	20000214 	.word	0x20000214

08000f9c <I2C_ReadMulti>:

IIC_Result I2C_ReadMulti(uint8_t device_address, uint8_t register_address, uint8_t* data, uint16_t count) {
 8000f9c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}

	/* Send register address */
	if (HAL_I2C_Master_Transmit(ihandle, (uint16_t)device_address, &register_address, 1, 1000) != HAL_OK) {
 8000fa0:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8000fa4:	4c0f      	ldr	r4, [pc, #60]	; (8000fe4 <I2C_ReadMulti+0x48>)
IIC_Result I2C_ReadMulti(uint8_t device_address, uint8_t register_address, uint8_t* data, uint16_t count) {
 8000fa6:	4617      	mov	r7, r2
 8000fa8:	aa04      	add	r2, sp, #16
 8000faa:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8000fae:	4698      	mov	r8, r3
	if (HAL_I2C_Master_Transmit(ihandle, (uint16_t)device_address, &register_address, 1, 1000) != HAL_OK) {
 8000fb0:	4605      	mov	r5, r0
 8000fb2:	4601      	mov	r1, r0
 8000fb4:	9600      	str	r6, [sp, #0]
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	6820      	ldr	r0, [r4, #0]
 8000fba:	f002 f85f 	bl	800307c <HAL_I2C_Master_Transmit>
 8000fbe:	b120      	cbz	r0, 8000fca <I2C_ReadMulti+0x2e>
		return IIC_Result_Error;
	}
	/* Receive multiple byte */
	if (HAL_I2C_Master_Receive(ihandle, device_address, data, count, 1000) != HAL_OK) {
		/* Check error */
		if (HAL_I2C_GetError(ihandle) != HAL_I2C_ERROR_AF) {
 8000fc0:	6820      	ldr	r0, [r4, #0]
 8000fc2:	f002 fbdd 	bl	8003780 <HAL_I2C_GetError>
 8000fc6:	2001      	movs	r0, #1
 8000fc8:	e008      	b.n	8000fdc <I2C_ReadMulti+0x40>
	if (HAL_I2C_Master_Receive(ihandle, device_address, data, count, 1000) != HAL_OK) {
 8000fca:	9600      	str	r6, [sp, #0]
 8000fcc:	4643      	mov	r3, r8
 8000fce:	463a      	mov	r2, r7
 8000fd0:	4629      	mov	r1, r5
 8000fd2:	6820      	ldr	r0, [r4, #0]
 8000fd4:	f002 f920 	bl	8003218 <HAL_I2C_Master_Receive>
 8000fd8:	2800      	cmp	r0, #0
 8000fda:	d1f1      	bne.n	8000fc0 <I2C_ReadMulti+0x24>
	}

	/* Return OK */

	return IIC_Result_Ok;
}
 8000fdc:	b004      	add	sp, #16
 8000fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000214 	.word	0x20000214

08000fe8 <I2C_Read>:
IIC_Result I2C_Read(uint8_t device_address, uint8_t register_address, uint8_t* data) {
 8000fe8:	b5f0      	push	{r4, r5, r6, r7, lr}

	/* Send address */

	if (HAL_I2C_Master_Transmit(ihandle, (uint16_t)device_address, &register_address, 1, 1000) != HAL_OK) {
 8000fea:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
IIC_Result I2C_Read(uint8_t device_address, uint8_t register_address, uint8_t* data) {
 8000fee:	b085      	sub	sp, #20
	if (HAL_I2C_Master_Transmit(ihandle, (uint16_t)device_address, &register_address, 1, 1000) != HAL_OK) {
 8000ff0:	4c0e      	ldr	r4, [pc, #56]	; (800102c <I2C_Read+0x44>)
IIC_Result I2C_Read(uint8_t device_address, uint8_t register_address, uint8_t* data) {
 8000ff2:	4617      	mov	r7, r2
 8000ff4:	aa04      	add	r2, sp, #16
 8000ff6:	f802 1d01 	strb.w	r1, [r2, #-1]!
	if (HAL_I2C_Master_Transmit(ihandle, (uint16_t)device_address, &register_address, 1, 1000) != HAL_OK) {
 8000ffa:	4605      	mov	r5, r0
 8000ffc:	4601      	mov	r1, r0
 8000ffe:	9600      	str	r6, [sp, #0]
 8001000:	2301      	movs	r3, #1
 8001002:	6820      	ldr	r0, [r4, #0]
 8001004:	f002 f83a 	bl	800307c <HAL_I2C_Master_Transmit>
 8001008:	b120      	cbz	r0, 8001014 <I2C_Read+0x2c>
		if (HAL_I2C_GetError(ihandle) != HAL_I2C_ERROR_AF) {
 800100a:	6820      	ldr	r0, [r4, #0]
 800100c:	f002 fbb8 	bl	8003780 <HAL_I2C_GetError>
 8001010:	2001      	movs	r0, #1
 8001012:	e008      	b.n	8001026 <I2C_Read+0x3e>

		return IIC_Result_Error;
	}

	/* Receive multiple byte */
	if (HAL_I2C_Master_Receive(ihandle, device_address, data, 1, 1000) != HAL_OK) {
 8001014:	9600      	str	r6, [sp, #0]
 8001016:	2301      	movs	r3, #1
 8001018:	463a      	mov	r2, r7
 800101a:	4629      	mov	r1, r5
 800101c:	6820      	ldr	r0, [r4, #0]
 800101e:	f002 f8fb 	bl	8003218 <HAL_I2C_Master_Receive>
 8001022:	2800      	cmp	r0, #0
 8001024:	d1f1      	bne.n	800100a <I2C_Read+0x22>
	}

	/* Return OK */

	return IIC_Result_Ok;
}
 8001026:	b005      	add	sp, #20
 8001028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102a:	bf00      	nop
 800102c:	20000214 	.word	0x20000214

08001030 <I2C_IsDeviceConnected>:

IIC_Result I2C_IsDeviceConnected(uint8_t device_address) {

	/* Check if device is ready for communication */
	if (HAL_I2C_IsDeviceReady(ihandle, device_address, 2, 5) != HAL_OK) {
 8001030:	4601      	mov	r1, r0
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <I2C_IsDeviceConnected+0x18>)
IIC_Result I2C_IsDeviceConnected(uint8_t device_address) {
 8001034:	b508      	push	{r3, lr}
	if (HAL_I2C_IsDeviceReady(ihandle, device_address, 2, 5) != HAL_OK) {
 8001036:	2202      	movs	r2, #2
 8001038:	2305      	movs	r3, #5
 800103a:	6800      	ldr	r0, [r0, #0]
 800103c:	f002 faf6 	bl	800362c <HAL_I2C_IsDeviceReady>
	}

	/* Return OK */

	return IIC_Result_Ok;
}
 8001040:	3000      	adds	r0, #0
 8001042:	bf18      	it	ne
 8001044:	2001      	movne	r0, #1
 8001046:	bd08      	pop	{r3, pc}
 8001048:	20000214 	.word	0x20000214

0800104c <MPU9250_Init>:

TM_MPU9250_Result_t MPU9250_Init(I2C_HandleTypeDef* handle,TM_MPU9250_t* MPU9250, TM_MPU9250_Device_t dev) {
	ihandle = handle;
 800104c:	4b59      	ldr	r3, [pc, #356]	; (80011b4 <MPU9250_Init+0x168>)
TM_MPU9250_Result_t MPU9250_Init(I2C_HandleTypeDef* handle,TM_MPU9250_t* MPU9250, TM_MPU9250_Device_t dev) {
 800104e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ihandle = handle;
 8001050:	6018      	str	r0, [r3, #0]
	 uint8_t data;

	    /* Set values */
	    MPU9250->I2C_Addr = MPU9250_I2C_ADDR | (uint8_t)dev;
	    MPU9250->I2C_Addr_Mag = MPU9250_I2C_ADDR_MAG;
 8001052:	2318      	movs	r3, #24
	    MPU9250->I2C_Addr = MPU9250_I2C_ADDR | (uint8_t)dev;
 8001054:	f042 00d0 	orr.w	r0, r2, #208	; 0xd0
 8001058:	f881 0044 	strb.w	r0, [r1, #68]	; 0x44
	    MPU9250->I2C_Addr_Mag = MPU9250_I2C_ADDR_MAG;
 800105c:	f881 3045 	strb.w	r3, [r1, #69]	; 0x45
TM_MPU9250_Result_t MPU9250_Init(I2C_HandleTypeDef* handle,TM_MPU9250_t* MPU9250, TM_MPU9250_Device_t dev) {
 8001060:	460c      	mov	r4, r1




	    /* Check if device connected */
	    if (I2C_IsDeviceConnected(MPU9250->I2C_Addr) != IIC_Result_Ok) {
 8001062:	f7ff ffe5 	bl	8001030 <I2C_IsDeviceConnected>
 8001066:	4605      	mov	r5, r0
 8001068:	b110      	cbz	r0, 8001070 <MPU9250_Init+0x24>
	        return TM_MPU9250_Result_DeviceNotConnected;
 800106a:	2002      	movs	r0, #2
	    MPU9250->AMult = 2.0f / 32768.0f;
	    MPU9250->GMult = 250.0f / 32768.0f;
	    MPU9250->MMult = 10.0f * 4912.0f / 32768.0f;

	    return TM_MPU9250_Result_Ok;
}
 800106c:	b003      	add	sp, #12
 800106e:	bd30      	pop	{r4, r5, pc}
	    I2C_Read( MPU9250->I2C_Addr, WHO_AM_I_MPU9250, &data);
 8001070:	f10d 0207 	add.w	r2, sp, #7
 8001074:	2175      	movs	r1, #117	; 0x75
 8001076:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800107a:	f7ff ffb5 	bl	8000fe8 <I2C_Read>
	    if (data != 0x71) {
 800107e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001082:	2b71      	cmp	r3, #113	; 0x71
 8001084:	d1f1      	bne.n	800106a <MPU9250_Init+0x1e>
	    I2C_Write( MPU9250->I2C_Addr, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 8001086:	462a      	mov	r2, r5
 8001088:	216b      	movs	r1, #107	; 0x6b
 800108a:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800108e:	f7ff ff6d 	bl	8000f6c <I2C_Write>
	    HAL_Delay(100); // Wait for all registers to reset
 8001092:	2064      	movs	r0, #100	; 0x64
 8001094:	f001 fc52 	bl	800293c <HAL_Delay>
	    I2C_Write( MPU9250->I2C_Addr, PWR_MGMT_1, 0x01);  // Auto select clock source to be PLL gyroscope reference if ready else
 8001098:	2201      	movs	r2, #1
 800109a:	216b      	movs	r1, #107	; 0x6b
 800109c:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 80010a0:	f7ff ff64 	bl	8000f6c <I2C_Write>
	    HAL_Delay(200);
 80010a4:	20c8      	movs	r0, #200	; 0xc8
 80010a6:	f001 fc49 	bl	800293c <HAL_Delay>
	    I2C_Write( MPU9250->I2C_Addr, CONFIG, 0x03);
 80010aa:	2203      	movs	r2, #3
 80010ac:	211a      	movs	r1, #26
 80010ae:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 80010b2:	f7ff ff5b 	bl	8000f6c <I2C_Write>
	    I2C_Write( MPU9250->I2C_Addr, SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; a rate consistent with the filter update rate
 80010b6:	2204      	movs	r2, #4
 80010b8:	2119      	movs	r1, #25
 80010ba:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 80010be:	f7ff ff55 	bl	8000f6c <I2C_Write>
	    I2C_Read( MPU9250->I2C_Addr, GYRO_CONFIG, &data); // get current GYRO_CONFIG register value
 80010c2:	f10d 0207 	add.w	r2, sp, #7
 80010c6:	211b      	movs	r1, #27
 80010c8:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 80010cc:	f7ff ff8c 	bl	8000fe8 <I2C_Read>
	    data &= ~0x18; // Clear AFS bits [4:3]
 80010d0:	f89d 2007 	ldrb.w	r2, [sp, #7]
	    I2C_Write( MPU9250->I2C_Addr, GYRO_CONFIG, data); // Write new GYRO_CONFIG value to register
 80010d4:	211b      	movs	r1, #27
	    data &= ~0x18; // Clear AFS bits [4:3]
 80010d6:	f002 02e5 	and.w	r2, r2, #229	; 0xe5
	    I2C_Write( MPU9250->I2C_Addr, GYRO_CONFIG, data); // Write new GYRO_CONFIG value to register
 80010da:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
	    data &= ~0x18; // Clear AFS bits [4:3]
 80010de:	f88d 2007 	strb.w	r2, [sp, #7]
	    I2C_Write( MPU9250->I2C_Addr, GYRO_CONFIG, data); // Write new GYRO_CONFIG value to register
 80010e2:	f7ff ff43 	bl	8000f6c <I2C_Write>
	    I2C_Read( MPU9250->I2C_Addr, ACCEL_CONFIG, &data); // get current ACCEL_CONFIG register value
 80010e6:	f10d 0207 	add.w	r2, sp, #7
 80010ea:	211c      	movs	r1, #28
 80010ec:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 80010f0:	f7ff ff7a 	bl	8000fe8 <I2C_Read>
	    data &= ~0x18;  // Clear AFS bits [4:3]
 80010f4:	f89d 2007 	ldrb.w	r2, [sp, #7]
	    I2C_Write( MPU9250->I2C_Addr, ACCEL_CONFIG, data); // Write new ACCEL_CONFIG register value
 80010f8:	211c      	movs	r1, #28
	    data &= ~0x18;  // Clear AFS bits [4:3]
 80010fa:	f002 02e7 	and.w	r2, r2, #231	; 0xe7
	    I2C_Write( MPU9250->I2C_Addr, ACCEL_CONFIG, data); // Write new ACCEL_CONFIG register value
 80010fe:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
	    data &= ~0x18;  // Clear AFS bits [4:3]
 8001102:	f88d 2007 	strb.w	r2, [sp, #7]
	    I2C_Write( MPU9250->I2C_Addr, ACCEL_CONFIG, data); // Write new ACCEL_CONFIG register value
 8001106:	f7ff ff31 	bl	8000f6c <I2C_Write>
	    I2C_Read( MPU9250->I2C_Addr, ACCEL_CONFIG2, &data); // get current ACCEL_CONFIG2 register value
 800110a:	f10d 0207 	add.w	r2, sp, #7
 800110e:	211d      	movs	r1, #29
 8001110:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8001114:	f7ff ff68 	bl	8000fe8 <I2C_Read>
	    data &= ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8001118:	f89d 2007 	ldrb.w	r2, [sp, #7]
	    I2C_Write( MPU9250->I2C_Addr, ACCEL_CONFIG2, data); // Write new ACCEL_CONFIG2 register value
 800111c:	211d      	movs	r1, #29
	    data &= ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 800111e:	f022 020f 	bic.w	r2, r2, #15
	    data |= 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8001122:	f042 0203 	orr.w	r2, r2, #3
	    I2C_Write( MPU9250->I2C_Addr, ACCEL_CONFIG2, data); // Write new ACCEL_CONFIG2 register value
 8001126:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
	    data |= 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 800112a:	f88d 2007 	strb.w	r2, [sp, #7]
	    I2C_Write( MPU9250->I2C_Addr, ACCEL_CONFIG2, data); // Write new ACCEL_CONFIG2 register value
 800112e:	f7ff ff1d 	bl	8000f6c <I2C_Write>
	    I2C_Write( MPU9250->I2C_Addr, INT_PIN_CFG, 0x22);
 8001132:	2222      	movs	r2, #34	; 0x22
 8001134:	2137      	movs	r1, #55	; 0x37
 8001136:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800113a:	f7ff ff17 	bl	8000f6c <I2C_Write>
	    I2C_Write( MPU9250->I2C_Addr, INT_ENABLE, 0x01);
 800113e:	2201      	movs	r2, #1
 8001140:	2138      	movs	r1, #56	; 0x38
 8001142:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8001146:	f7ff ff11 	bl	8000f6c <I2C_Write>
	    if (I2C_IsDeviceConnected( MPU9250->I2C_Addr_Mag) !=  IIC_Result_Ok) {
 800114a:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
 800114e:	f7ff ff6f 	bl	8001030 <I2C_IsDeviceConnected>
 8001152:	4605      	mov	r5, r0
 8001154:	2800      	cmp	r0, #0
 8001156:	d188      	bne.n	800106a <MPU9250_Init+0x1e>
	    I2C_Write( MPU9250->I2C_Addr_Mag, AK8963_CNTL, 0x00); // Power down magnetometer
 8001158:	4602      	mov	r2, r0
 800115a:	210a      	movs	r1, #10
 800115c:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
 8001160:	f7ff ff04 	bl	8000f6c <I2C_Write>
	    HAL_Delay(10);
 8001164:	200a      	movs	r0, #10
 8001166:	f001 fbe9 	bl	800293c <HAL_Delay>
	    I2C_Write( MPU9250->I2C_Addr_Mag, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 800116a:	220f      	movs	r2, #15
 800116c:	210a      	movs	r1, #10
 800116e:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
 8001172:	f7ff fefb 	bl	8000f6c <I2C_Write>
	    HAL_Delay(10);
 8001176:	200a      	movs	r0, #10
 8001178:	f001 fbe0 	bl	800293c <HAL_Delay>
	    I2C_Write( MPU9250->I2C_Addr_Mag, AK8963_CNTL, 0x00); // Power down magnetometer
 800117c:	462a      	mov	r2, r5
 800117e:	210a      	movs	r1, #10
 8001180:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
 8001184:	f7ff fef2 	bl	8000f6c <I2C_Write>
	    HAL_Delay(10);
 8001188:	200a      	movs	r0, #10
 800118a:	f001 fbd7 	bl	800293c <HAL_Delay>
	    I2C_Write( MPU9250->I2C_Addr_Mag, AK8963_CNTL, 1 << 4 | 2); // Set magnetometer data resolution and sample ODR
 800118e:	2212      	movs	r2, #18
 8001190:	210a      	movs	r1, #10
 8001192:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
 8001196:	f7ff fee9 	bl	8000f6c <I2C_Write>
	    HAL_Delay(10);
 800119a:	200a      	movs	r0, #10
 800119c:	f001 fbce 	bl	800293c <HAL_Delay>
	    MPU9250->AMult = 2.0f / 32768.0f;
 80011a0:	f04f 5362 	mov.w	r3, #947912704	; 0x38800000
 80011a4:	63a3      	str	r3, [r4, #56]	; 0x38
	    MPU9250->GMult = 250.0f / 32768.0f;
 80011a6:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <MPU9250_Init+0x16c>)
	    return TM_MPU9250_Result_Ok;
 80011a8:	4628      	mov	r0, r5
	    MPU9250->GMult = 250.0f / 32768.0f;
 80011aa:	63e3      	str	r3, [r4, #60]	; 0x3c
	    MPU9250->MMult = 10.0f * 4912.0f / 32768.0f;
 80011ac:	4b03      	ldr	r3, [pc, #12]	; (80011bc <MPU9250_Init+0x170>)
 80011ae:	6423      	str	r3, [r4, #64]	; 0x40
	    return TM_MPU9250_Result_Ok;
 80011b0:	e75c      	b.n	800106c <MPU9250_Init+0x20>
 80011b2:	bf00      	nop
 80011b4:	20000214 	.word	0x20000214
 80011b8:	3bfa0000 	.word	0x3bfa0000
 80011bc:	3fbfe000 	.word	0x3fbfe000

080011c0 <TM_MPU9250_ReadAcce>:


TM_MPU9250_Result_t TM_MPU9250_ReadAcce(TM_MPU9250_t* MPU9250) {
 80011c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80011c2:	4604      	mov	r4, r0
	uint8_t data[6];

	/* Read accelerometer data */
	I2C_ReadMulti( MPU9250->I2C_Addr, ACCEL_XOUT_H, data, 6);
 80011c4:	466a      	mov	r2, sp
 80011c6:	213b      	movs	r1, #59	; 0x3b
 80011c8:	2306      	movs	r3, #6
 80011ca:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
 80011ce:	f7ff fee5 	bl	8000f9c <I2C_ReadMulti>

	MPU9250->Ax_Raw = ((int16_t)data[0] << 8) | data[1];
 80011d2:	f89d 3000 	ldrb.w	r3, [sp]
 80011d6:	f89d 0001 	ldrb.w	r0, [sp, #1]
	MPU9250->Ay_Raw = ((int16_t)data[2] << 8) | data[3];
 80011da:	f89d 6003 	ldrb.w	r6, [sp, #3]
	MPU9250->Ax_Raw = ((int16_t)data[0] << 8) | data[1];
 80011de:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	MPU9250->Ay_Raw = ((int16_t)data[2] << 8) | data[3];
 80011e2:	f89d 3002 	ldrb.w	r3, [sp, #2]
	MPU9250->Az_Raw = ((int16_t)data[4] << 8) | data[5];
 80011e6:	f89d 5005 	ldrb.w	r5, [sp, #5]
	MPU9250->Ay_Raw = ((int16_t)data[2] << 8) | data[3];
 80011ea:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
	MPU9250->Az_Raw = ((int16_t)data[4] << 8) | data[5];
 80011ee:	f89d 3004 	ldrb.w	r3, [sp, #4]

	MPU9250->Ax = (float)MPU9250->Ax_Raw * MPU9250->AMult;
 80011f2:	6ba7      	ldr	r7, [r4, #56]	; 0x38
	MPU9250->Az_Raw = ((int16_t)data[4] << 8) | data[5];
 80011f4:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	MPU9250->Ay_Raw = ((int16_t)data[2] << 8) | data[3];
 80011f8:	b236      	sxth	r6, r6
	MPU9250->Az_Raw = ((int16_t)data[4] << 8) | data[5];
 80011fa:	b22d      	sxth	r5, r5
	MPU9250->Ax_Raw = ((int16_t)data[0] << 8) | data[1];
 80011fc:	b200      	sxth	r0, r0
 80011fe:	84a0      	strh	r0, [r4, #36]	; 0x24
	MPU9250->Ay_Raw = ((int16_t)data[2] << 8) | data[3];
 8001200:	84e6      	strh	r6, [r4, #38]	; 0x26
	MPU9250->Az_Raw = ((int16_t)data[4] << 8) | data[5];
 8001202:	8525      	strh	r5, [r4, #40]	; 0x28
	MPU9250->Ax = (float)MPU9250->Ax_Raw * MPU9250->AMult;
 8001204:	f7ff fcfa 	bl	8000bfc <__aeabi_i2f>
 8001208:	4639      	mov	r1, r7
 800120a:	f7ff fd4b 	bl	8000ca4 <__aeabi_fmul>
 800120e:	6020      	str	r0, [r4, #0]
	MPU9250->Ay = (float)MPU9250->Ay_Raw * MPU9250->AMult;
 8001210:	4630      	mov	r0, r6
 8001212:	f7ff fcf3 	bl	8000bfc <__aeabi_i2f>
 8001216:	4639      	mov	r1, r7
 8001218:	f7ff fd44 	bl	8000ca4 <__aeabi_fmul>
 800121c:	6060      	str	r0, [r4, #4]
	MPU9250->Az = (float)MPU9250->Az_Raw * MPU9250->AMult;
 800121e:	4628      	mov	r0, r5
 8001220:	f7ff fcec 	bl	8000bfc <__aeabi_i2f>
 8001224:	4639      	mov	r1, r7
 8001226:	f7ff fd3d 	bl	8000ca4 <__aeabi_fmul>
 800122a:	60a0      	str	r0, [r4, #8]
	  return TM_MPU9250_Result_Ok;
}
 800122c:	2000      	movs	r0, #0
 800122e:	b003      	add	sp, #12
 8001230:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001232 <TM_MPU9250_ReadGyro>:

TM_MPU9250_Result_t TM_MPU9250_ReadGyro(TM_MPU9250_t* MPU9250) {
 8001232:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001234:	4604      	mov	r4, r0
	uint8_t data[6];
	I2C_ReadMulti( MPU9250->I2C_Addr, GYRO_XOUT_H, data, 6);
 8001236:	466a      	mov	r2, sp
 8001238:	2143      	movs	r1, #67	; 0x43
 800123a:	2306      	movs	r3, #6
 800123c:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
 8001240:	f7ff feac 	bl	8000f9c <I2C_ReadMulti>

	MPU9250->Gx_Raw = ((int16_t)data[0] << 8) | data[1];
 8001244:	f89d 3000 	ldrb.w	r3, [sp]
 8001248:	f89d 0001 	ldrb.w	r0, [sp, #1]
	MPU9250->Gy_Raw = ((int16_t)data[2] << 8) | data[3];
 800124c:	f89d 6003 	ldrb.w	r6, [sp, #3]
	MPU9250->Gx_Raw = ((int16_t)data[0] << 8) | data[1];
 8001250:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	MPU9250->Gy_Raw = ((int16_t)data[2] << 8) | data[3];
 8001254:	f89d 3002 	ldrb.w	r3, [sp, #2]
	MPU9250->Gz_Raw = ((int16_t)data[4] << 8) | data[5];
 8001258:	f89d 5005 	ldrb.w	r5, [sp, #5]
	MPU9250->Gy_Raw = ((int16_t)data[2] << 8) | data[3];
 800125c:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
	MPU9250->Gz_Raw = ((int16_t)data[4] << 8) | data[5];
 8001260:	f89d 3004 	ldrb.w	r3, [sp, #4]

	MPU9250->Gx = (float)MPU9250->Gx_Raw * MPU9250->GMult;
 8001264:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	MPU9250->Gz_Raw = ((int16_t)data[4] << 8) | data[5];
 8001266:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	MPU9250->Gy_Raw = ((int16_t)data[2] << 8) | data[3];
 800126a:	b236      	sxth	r6, r6
	MPU9250->Gz_Raw = ((int16_t)data[4] << 8) | data[5];
 800126c:	b22d      	sxth	r5, r5
	MPU9250->Gx_Raw = ((int16_t)data[0] << 8) | data[1];
 800126e:	b200      	sxth	r0, r0
 8001270:	8560      	strh	r0, [r4, #42]	; 0x2a
	MPU9250->Gy_Raw = ((int16_t)data[2] << 8) | data[3];
 8001272:	85a6      	strh	r6, [r4, #44]	; 0x2c
	MPU9250->Gz_Raw = ((int16_t)data[4] << 8) | data[5];
 8001274:	85e5      	strh	r5, [r4, #46]	; 0x2e
	MPU9250->Gx = (float)MPU9250->Gx_Raw * MPU9250->GMult;
 8001276:	f7ff fcc1 	bl	8000bfc <__aeabi_i2f>
 800127a:	4639      	mov	r1, r7
 800127c:	f7ff fd12 	bl	8000ca4 <__aeabi_fmul>
 8001280:	60e0      	str	r0, [r4, #12]
	MPU9250->Gy = (float)MPU9250->Gy_Raw * MPU9250->GMult;
 8001282:	4630      	mov	r0, r6
 8001284:	f7ff fcba 	bl	8000bfc <__aeabi_i2f>
 8001288:	4639      	mov	r1, r7
 800128a:	f7ff fd0b 	bl	8000ca4 <__aeabi_fmul>
 800128e:	6120      	str	r0, [r4, #16]
	MPU9250->Gz = (float)MPU9250->Gz_Raw * MPU9250->GMult;
 8001290:	4628      	mov	r0, r5
 8001292:	f7ff fcb3 	bl	8000bfc <__aeabi_i2f>
 8001296:	4639      	mov	r1, r7
 8001298:	f7ff fd04 	bl	8000ca4 <__aeabi_fmul>
 800129c:	6160      	str	r0, [r4, #20]
	  return TM_MPU9250_Result_Ok;
}
 800129e:	2000      	movs	r0, #0
 80012a0:	b003      	add	sp, #12
 80012a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012a4 <TM_MPU9250_ReadMag>:

TM_MPU9250_Result_t TM_MPU9250_ReadMag(TM_MPU9250_t* MPU9250) {
 80012a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80012a6:	4604      	mov	r4, r0
	uint8_t data[7];
	uint8_t check;

	/* Check status */
	I2C_Read( MPU9250->I2C_Addr_Mag, AK8963_ST1, &check);
 80012a8:	f10d 0207 	add.w	r2, sp, #7
 80012ac:	2102      	movs	r1, #2
 80012ae:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
 80012b2:	f7ff fe99 	bl	8000fe8 <I2C_Read>

	if (check & 0x01) {
 80012b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80012ba:	07da      	lsls	r2, r3, #31
 80012bc:	d51f      	bpl.n	80012fe <TM_MPU9250_ReadMag+0x5a>
		I2C_ReadMulti( MPU9250->I2C_Addr_Mag, AK8963_XOUT_L, data, 7);
 80012be:	2307      	movs	r3, #7
 80012c0:	aa02      	add	r2, sp, #8
 80012c2:	2103      	movs	r1, #3
 80012c4:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
 80012c8:	f7ff fe68 	bl	8000f9c <I2C_ReadMulti>
		if (!(data[6] & 0x08)) {
 80012cc:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80012d0:	071b      	lsls	r3, r3, #28
 80012d2:	d414      	bmi.n	80012fe <TM_MPU9250_ReadMag+0x5a>
			MPU9250->Mx_Raw = ((int16_t)data[1] << 8) | data[0];
 80012d4:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80012d8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80012dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80012e0:	8623      	strh	r3, [r4, #48]	; 0x30
			MPU9250->My_Raw = ((int16_t)data[3] << 8) | data[2];
 80012e2:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80012e6:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80012ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80012ee:	8663      	strh	r3, [r4, #50]	; 0x32
			MPU9250->Mz_Raw = ((int16_t)data[5] << 8) | data[4];
 80012f0:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80012f4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80012f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80012fc:	86a3      	strh	r3, [r4, #52]	; 0x34
		}
	}
	  return TM_MPU9250_Result_Ok;
}
 80012fe:	2000      	movs	r0, #0
 8001300:	b004      	add	sp, #16
 8001302:	bd10      	pop	{r4, pc}

08001304 <configureTimerForRunTimeStats>:
/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{

}
 8001304:	4770      	bx	lr

08001306 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
return 0;
}
 8001306:	2000      	movs	r0, #0
 8001308:	4770      	bx	lr

0800130a <_Z15StartSDcardTaskPv>:
	osSemaphoreRelease(debugUARTBinarySemHandle);

}

void StartSDcardTask(void *argument)
{
 800130a:	b508      	push	{r3, lr}



	for(;;)
	{
		osDelay(20);
 800130c:	2014      	movs	r0, #20
 800130e:	f003 f9b9 	bl	8004684 <osDelay>
 8001312:	e7fb      	b.n	800130c <_Z15StartSDcardTaskPv+0x2>

08001314 <_Z16StartDysplayTaskPv>:
	/* USER CODE END StartKeyboardTask */
}

/* USER CODE END Header_StartDysplayTask */
void StartDysplayTask(void *argument)
{
 8001314:	b580      	push	{r7, lr}
		osSemaphoreAcquire(accelStructBinarySemHandle,osWaitForever);
		char str[32];
		//std::string ssa;
		ssd1306_Fill(Black);
		ssd1306_SetCursor(2,2);
		sprintf(str, "%d", accelStruct.Ax_Raw);
 8001316:	4d73      	ldr	r5, [pc, #460]	; (80014e4 <_Z16StartDysplayTaskPv+0x1d0>)
{
 8001318:	b088      	sub	sp, #32
		osSemaphoreAcquire(accelStructBinarySemHandle,osWaitForever);
 800131a:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 8001514 <_Z16StartDysplayTaskPv+0x200>
 800131e:	f04f 31ff 	mov.w	r1, #4294967295
 8001322:	f8d8 0000 	ldr.w	r0, [r8]
 8001326:	f003 fa21 	bl	800476c <osSemaphoreAcquire>
		ssd1306_Fill(Black);
 800132a:	2000      	movs	r0, #0
 800132c:	f000 ffb4 	bl	8002298 <_Z12ssd1306_Fill13SSD1306_COLOR>
		ssd1306_SetCursor(2,2);
 8001330:	2102      	movs	r1, #2

		ssd1306_SetCursor(2,43);
		//ssd1306_WriteString(gpsParser->HDOP,Font_7x10,White);

		ssd1306_SetCursor(2,33);
		sprintf(str, "%d", accelStruct.Mx_Raw*50);
 8001332:	2732      	movs	r7, #50	; 0x32
		sprintf(str, "%d", accelStruct.Ax_Raw);
 8001334:	4e6c      	ldr	r6, [pc, #432]	; (80014e8 <_Z16StartDysplayTaskPv+0x1d4>)
		ssd1306_WriteString("Ax:",Font_7x10,White);
 8001336:	4c6d      	ldr	r4, [pc, #436]	; (80014ec <_Z16StartDysplayTaskPv+0x1d8>)
		ssd1306_SetCursor(2,2);
 8001338:	4608      	mov	r0, r1
 800133a:	f001 f8cb 	bl	80024d4 <_Z17ssd1306_SetCursorhh>
		sprintf(str, "%d", accelStruct.Ax_Raw);
 800133e:	f9b6 2024 	ldrsh.w	r2, [r6, #36]	; 0x24
 8001342:	4629      	mov	r1, r5
 8001344:	4668      	mov	r0, sp
 8001346:	f005 ff75 	bl	8007234 <siprintf>
		ssd1306_WriteString("Ax:",Font_7x10,White);
 800134a:	e894 0006 	ldmia.w	r4, {r1, r2}
 800134e:	2301      	movs	r3, #1
 8001350:	4867      	ldr	r0, [pc, #412]	; (80014f0 <_Z16StartDysplayTaskPv+0x1dc>)
 8001352:	f001 f8a9 	bl	80024a8 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
		ssd1306_WriteString(str,Font_7x10,White);
 8001356:	e894 0006 	ldmia.w	r4, {r1, r2}
 800135a:	2301      	movs	r3, #1
 800135c:	4668      	mov	r0, sp
 800135e:	f001 f8a3 	bl	80024a8 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
		ssd1306_SetCursor(2,12);
 8001362:	210c      	movs	r1, #12
 8001364:	2002      	movs	r0, #2
 8001366:	f001 f8b5 	bl	80024d4 <_Z17ssd1306_SetCursorhh>
		sprintf(str, "%d", accelStruct.Ay_Raw);
 800136a:	f9b6 2026 	ldrsh.w	r2, [r6, #38]	; 0x26
 800136e:	4629      	mov	r1, r5
 8001370:	4668      	mov	r0, sp
 8001372:	f005 ff5f 	bl	8007234 <siprintf>
		ssd1306_WriteString("Ay:",Font_7x10,White);
 8001376:	e894 0006 	ldmia.w	r4, {r1, r2}
 800137a:	2301      	movs	r3, #1
 800137c:	485d      	ldr	r0, [pc, #372]	; (80014f4 <_Z16StartDysplayTaskPv+0x1e0>)
 800137e:	f001 f893 	bl	80024a8 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
		ssd1306_WriteString(str,Font_7x10,White);
 8001382:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001386:	2301      	movs	r3, #1
 8001388:	4668      	mov	r0, sp
 800138a:	f001 f88d 	bl	80024a8 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
		ssd1306_SetCursor(2,22);
 800138e:	2116      	movs	r1, #22
 8001390:	2002      	movs	r0, #2
 8001392:	f001 f89f 	bl	80024d4 <_Z17ssd1306_SetCursorhh>
		sprintf(str, "%d", accelStruct.Az_Raw);
 8001396:	f9b6 2028 	ldrsh.w	r2, [r6, #40]	; 0x28
 800139a:	4629      	mov	r1, r5
 800139c:	4668      	mov	r0, sp
 800139e:	f005 ff49 	bl	8007234 <siprintf>
		ssd1306_WriteString("Az:",Font_7x10,White);
 80013a2:	e894 0006 	ldmia.w	r4, {r1, r2}
 80013a6:	2301      	movs	r3, #1
 80013a8:	4853      	ldr	r0, [pc, #332]	; (80014f8 <_Z16StartDysplayTaskPv+0x1e4>)
 80013aa:	f001 f87d 	bl	80024a8 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
		ssd1306_WriteString(str,Font_7x10,White);
 80013ae:	e894 0006 	ldmia.w	r4, {r1, r2}
 80013b2:	2301      	movs	r3, #1
 80013b4:	4668      	mov	r0, sp
 80013b6:	f001 f877 	bl	80024a8 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
		ssd1306_SetCursor(60,2);
 80013ba:	2102      	movs	r1, #2
 80013bc:	203c      	movs	r0, #60	; 0x3c
 80013be:	f001 f889 	bl	80024d4 <_Z17ssd1306_SetCursorhh>
		sprintf(str, "%d", accelStruct.Gx_Raw);
 80013c2:	f9b6 202a 	ldrsh.w	r2, [r6, #42]	; 0x2a
 80013c6:	4629      	mov	r1, r5
 80013c8:	4668      	mov	r0, sp
 80013ca:	f005 ff33 	bl	8007234 <siprintf>
		ssd1306_WriteString("Gx:",Font_7x10,White);
 80013ce:	e894 0006 	ldmia.w	r4, {r1, r2}
 80013d2:	2301      	movs	r3, #1
 80013d4:	4849      	ldr	r0, [pc, #292]	; (80014fc <_Z16StartDysplayTaskPv+0x1e8>)
 80013d6:	f001 f867 	bl	80024a8 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
		ssd1306_WriteString(str,Font_7x10,White);
 80013da:	e894 0006 	ldmia.w	r4, {r1, r2}
 80013de:	2301      	movs	r3, #1
 80013e0:	4668      	mov	r0, sp
 80013e2:	f001 f861 	bl	80024a8 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
		ssd1306_SetCursor(60,12);
 80013e6:	210c      	movs	r1, #12
 80013e8:	203c      	movs	r0, #60	; 0x3c
 80013ea:	f001 f873 	bl	80024d4 <_Z17ssd1306_SetCursorhh>
		sprintf(str, "%d", accelStruct.Gy_Raw);
 80013ee:	f9b6 202c 	ldrsh.w	r2, [r6, #44]	; 0x2c
 80013f2:	4629      	mov	r1, r5
 80013f4:	4668      	mov	r0, sp
 80013f6:	f005 ff1d 	bl	8007234 <siprintf>
		ssd1306_WriteString("Gy:",Font_7x10,White);
 80013fa:	e894 0006 	ldmia.w	r4, {r1, r2}
 80013fe:	2301      	movs	r3, #1
 8001400:	483f      	ldr	r0, [pc, #252]	; (8001500 <_Z16StartDysplayTaskPv+0x1ec>)
 8001402:	f001 f851 	bl	80024a8 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
		ssd1306_WriteString(str,Font_7x10,White);
 8001406:	e894 0006 	ldmia.w	r4, {r1, r2}
 800140a:	2301      	movs	r3, #1
 800140c:	4668      	mov	r0, sp
 800140e:	f001 f84b 	bl	80024a8 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
		ssd1306_SetCursor(60,22);
 8001412:	2116      	movs	r1, #22
 8001414:	203c      	movs	r0, #60	; 0x3c
 8001416:	f001 f85d 	bl	80024d4 <_Z17ssd1306_SetCursorhh>
		sprintf(str, "%d", accelStruct.Gz_Raw);
 800141a:	f9b6 202e 	ldrsh.w	r2, [r6, #46]	; 0x2e
 800141e:	4629      	mov	r1, r5
 8001420:	4668      	mov	r0, sp
 8001422:	f005 ff07 	bl	8007234 <siprintf>
		ssd1306_WriteString("Gz:",Font_7x10,White);
 8001426:	e894 0006 	ldmia.w	r4, {r1, r2}
 800142a:	2301      	movs	r3, #1
 800142c:	4835      	ldr	r0, [pc, #212]	; (8001504 <_Z16StartDysplayTaskPv+0x1f0>)
 800142e:	f001 f83b 	bl	80024a8 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
		ssd1306_WriteString(str,Font_7x10,White);
 8001432:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001436:	2301      	movs	r3, #1
 8001438:	4668      	mov	r0, sp
 800143a:	f001 f835 	bl	80024a8 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
		ssd1306_SetCursor(2,43);
 800143e:	212b      	movs	r1, #43	; 0x2b
 8001440:	2002      	movs	r0, #2
 8001442:	f001 f847 	bl	80024d4 <_Z17ssd1306_SetCursorhh>
		ssd1306_SetCursor(2,33);
 8001446:	2121      	movs	r1, #33	; 0x21
 8001448:	2002      	movs	r0, #2
 800144a:	f001 f843 	bl	80024d4 <_Z17ssd1306_SetCursorhh>
		sprintf(str, "%d", accelStruct.Mx_Raw*50);
 800144e:	f9b6 2030 	ldrsh.w	r2, [r6, #48]	; 0x30
 8001452:	4629      	mov	r1, r5
 8001454:	437a      	muls	r2, r7
 8001456:	4668      	mov	r0, sp
 8001458:	f005 feec 	bl	8007234 <siprintf>
		ssd1306_WriteString("Mx:",Font_7x10,White);
 800145c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001460:	2301      	movs	r3, #1
 8001462:	4829      	ldr	r0, [pc, #164]	; (8001508 <_Z16StartDysplayTaskPv+0x1f4>)
 8001464:	f001 f820 	bl	80024a8 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
		ssd1306_WriteString(str,Font_7x10,White);
 8001468:	e894 0006 	ldmia.w	r4, {r1, r2}
 800146c:	2301      	movs	r3, #1
 800146e:	4668      	mov	r0, sp
 8001470:	f001 f81a 	bl	80024a8 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
		//	debugMsg(" Mx:",0,0);
		//				debugMsg(str,0,0);
		ssd1306_SetCursor(2,43);
 8001474:	212b      	movs	r1, #43	; 0x2b
 8001476:	2002      	movs	r0, #2
 8001478:	f001 f82c 	bl	80024d4 <_Z17ssd1306_SetCursorhh>
		sprintf(str, "%d", accelStruct.My_Raw*50);
 800147c:	f9b6 2032 	ldrsh.w	r2, [r6, #50]	; 0x32
 8001480:	4629      	mov	r1, r5
 8001482:	437a      	muls	r2, r7
 8001484:	4668      	mov	r0, sp
 8001486:	f005 fed5 	bl	8007234 <siprintf>
		ssd1306_WriteString("My:",Font_7x10,White);
 800148a:	e894 0006 	ldmia.w	r4, {r1, r2}
 800148e:	2301      	movs	r3, #1
 8001490:	481e      	ldr	r0, [pc, #120]	; (800150c <_Z16StartDysplayTaskPv+0x1f8>)
 8001492:	f001 f809 	bl	80024a8 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
		ssd1306_WriteString(str,Font_7x10,White);
 8001496:	e894 0006 	ldmia.w	r4, {r1, r2}
 800149a:	2301      	movs	r3, #1
 800149c:	4668      	mov	r0, sp
 800149e:	f001 f803 	bl	80024a8 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
		//	debugMsg(" My:",0,0);
		//	debugMsg(str,0,0);

		ssd1306_SetCursor(2,53);
 80014a2:	2135      	movs	r1, #53	; 0x35
 80014a4:	2002      	movs	r0, #2
 80014a6:	f001 f815 	bl	80024d4 <_Z17ssd1306_SetCursorhh>
		sprintf(str, "%d", accelStruct.Mz_Raw*50);
 80014aa:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	; 0x34
 80014ae:	4629      	mov	r1, r5
 80014b0:	437a      	muls	r2, r7
 80014b2:	4668      	mov	r0, sp
 80014b4:	f005 febe 	bl	8007234 <siprintf>
		ssd1306_WriteString("Mz:",Font_7x10,White);
 80014b8:	e894 0006 	ldmia.w	r4, {r1, r2}
 80014bc:	2301      	movs	r3, #1
 80014be:	4814      	ldr	r0, [pc, #80]	; (8001510 <_Z16StartDysplayTaskPv+0x1fc>)
 80014c0:	f000 fff2 	bl	80024a8 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
		ssd1306_WriteString(str,Font_7x10,White);
 80014c4:	e894 0006 	ldmia.w	r4, {r1, r2}
 80014c8:	2301      	movs	r3, #1
 80014ca:	4668      	mov	r0, sp
 80014cc:	f000 ffec 	bl	80024a8 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
					}else{

					ssa = gpsParser->UTCtime;
					ssd1306_WriteString(ssa.c_str(),Font_7x10,White);
					}*/
		osSemaphoreRelease(accelStructBinarySemHandle);
 80014d0:	f8d8 0000 	ldr.w	r0, [r8]
 80014d4:	f003 f988 	bl	80047e8 <osSemaphoreRelease>



		ssd1306_UpdateScreen();
 80014d8:	f000 feec 	bl	80022b4 <_Z20ssd1306_UpdateScreenv>
		osDelay(10);
 80014dc:	200a      	movs	r0, #10
 80014de:	f003 f8d1 	bl	8004684 <osDelay>
 80014e2:	e71a      	b.n	800131a <_Z16StartDysplayTaskPv+0x6>
 80014e4:	08009e14 	.word	0x08009e14
 80014e8:	200002b4 	.word	0x200002b4
 80014ec:	20000008 	.word	0x20000008
 80014f0:	08009e17 	.word	0x08009e17
 80014f4:	08009e1b 	.word	0x08009e1b
 80014f8:	08009e1f 	.word	0x08009e1f
 80014fc:	08009e23 	.word	0x08009e23
 8001500:	08009e27 	.word	0x08009e27
 8001504:	08009e2b 	.word	0x08009e2b
 8001508:	08009e2f 	.word	0x08009e2f
 800150c:	08009e33 	.word	0x08009e33
 8001510:	08009e37 	.word	0x08009e37
 8001514:	200002fc 	.word	0x200002fc

08001518 <_Z14StartAccelTaskPv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartAccelTask */
void StartAccelTask(void *argument)
{
 8001518:	b508      	push	{r3, lr}
	/* USER CODE BEGIN StartAccelTask */
	/* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(accelStructBinarySemHandle, osWaitForever);
 800151a:	4d10      	ldr	r5, [pc, #64]	; (800155c <_Z14StartAccelTaskPv+0x44>)
		TM_MPU9250_ReadAcce(&accelStruct);
 800151c:	4c10      	ldr	r4, [pc, #64]	; (8001560 <_Z14StartAccelTaskPv+0x48>)
		osSemaphoreAcquire(accelStructBinarySemHandle, osWaitForever);
 800151e:	f04f 31ff 	mov.w	r1, #4294967295
 8001522:	6828      	ldr	r0, [r5, #0]
 8001524:	f003 f922 	bl	800476c <osSemaphoreAcquire>
		TM_MPU9250_ReadAcce(&accelStruct);
 8001528:	4620      	mov	r0, r4
 800152a:	f7ff fe49 	bl	80011c0 <TM_MPU9250_ReadAcce>
		osDelay(1);
 800152e:	2001      	movs	r0, #1
 8001530:	f003 f8a8 	bl	8004684 <osDelay>
		TM_MPU9250_ReadGyro(&accelStruct);
 8001534:	4620      	mov	r0, r4
 8001536:	f7ff fe7c 	bl	8001232 <TM_MPU9250_ReadGyro>
		osDelay(1);
 800153a:	2001      	movs	r0, #1
 800153c:	f003 f8a2 	bl	8004684 <osDelay>
		TM_MPU9250_ReadMag(&accelStruct);
 8001540:	4620      	mov	r0, r4
 8001542:	f7ff feaf 	bl	80012a4 <TM_MPU9250_ReadMag>
		osDelay(1);
 8001546:	2001      	movs	r0, #1
 8001548:	f003 f89c 	bl	8004684 <osDelay>
		osSemaphoreRelease(accelStructBinarySemHandle);
 800154c:	6828      	ldr	r0, [r5, #0]
 800154e:	f003 f94b 	bl	80047e8 <osSemaphoreRelease>
		osDelay(2);
 8001552:	2002      	movs	r0, #2
 8001554:	f003 f896 	bl	8004684 <osDelay>
 8001558:	e7e1      	b.n	800151e <_Z14StartAccelTaskPv+0x6>
 800155a:	bf00      	nop
 800155c:	200002fc 	.word	0x200002fc
 8001560:	200002b4 	.word	0x200002b4

08001564 <_Z23StartgpsNMEA_ParserTaskPv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartgpsNMEA_ParserTask */
void StartgpsNMEA_ParserTask(void *argument)
{
 8001564:	b510      	push	{r4, lr}
 8001566:	b0fe      	sub	sp, #504	; 0x1f8
	/* USER CODE BEGIN StartgpsNMEA_ParserTask */
	/* Infinite loop */
	osStatus_t status;

	NMEA_UART::GPS_MESSEGE_TYPE messageType;
	NMEA_UART::Parser gpsParser;
 8001568:	a801      	add	r0, sp, #4
 800156a:	f000 fc71 	bl	8001e50 <_ZN9NMEA_UART6ParserC1Ev>
	for(;;)
	{
		using namespace NMEA_UART;
		uint8_t sym=0;
 800156e:	f04f 0400 	mov.w	r4, #0
		};
		xHandle=osMessageQueueNew (size, sizeof(T), &attributes);
	}
	osStatus_t receive(T * val, TickType_t xTicksToWait = osWaitForever)
	{
		return osMessageQueueGet(xHandle, val, NULL, xTicksToWait);
 8001572:	4809      	ldr	r0, [pc, #36]	; (8001598 <_Z23StartgpsNMEA_ParserTaskPv+0x34>)
 8001574:	f04f 33ff 	mov.w	r3, #4294967295
 8001578:	2200      	movs	r2, #0
 800157a:	f10d 0103 	add.w	r1, sp, #3
 800157e:	6800      	ldr	r0, [r0, #0]
 8001580:	f88d 4003 	strb.w	r4, [sp, #3]
 8001584:	f003 f9f6 	bl	8004974 <osMessageQueueGet>
		status =GPS_UARTQueueHandle.receive(&sym);  //osMessageQueueGet(GPS_UARTQueueHandle, &sym, NULL, osWaitForever);   // wait for message
		if (status == osOK) {
 8001588:	2800      	cmp	r0, #0
 800158a:	d1f2      	bne.n	8001572 <_Z23StartgpsNMEA_ParserTaskPv+0xe>

			messageType  = gpsParser.charParser(sym);
 800158c:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8001590:	a801      	add	r0, sp, #4
 8001592:	f000 fd3b 	bl	800200c <_ZN9NMEA_UART6Parser10charParserEh>
				break;
			}

		}

	}
 8001596:	e7ec      	b.n	8001572 <_Z23StartgpsNMEA_ParserTaskPv+0xe>
 8001598:	20000218 	.word	0x20000218

0800159c <_ZN7osQueueI12buzzerStructLj2EE4sendERKS0_m.isra.2.constprop.7>:
	}

	osStatus_t send(const T & val, TickType_t xTicksToWait = 0U)
	{
		return osMessageQueuePut(xHandle, &val, NULL, xTicksToWait);
 800159c:	2300      	movs	r3, #0
 800159e:	461a      	mov	r2, r3
 80015a0:	f003 b9a4 	b.w	80048ec <osMessageQueuePut>

080015a4 <_ZN7osQueueI12buttonStructLj1EE4sendERKS0_m.isra.3.constprop.8>:
 80015a4:	2300      	movs	r3, #0
 80015a6:	461a      	mov	r2, r3
 80015a8:	f003 b9a0 	b.w	80048ec <osMessageQueuePut>

080015ac <_Z17StartKeyboardTaskPv>:
{
 80015ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t button_three_flag=1;
 80015b0:	2501      	movs	r5, #1
	buzzerPress.freq=3000;
 80015b2:	4b58      	ldr	r3, [pc, #352]	; (8001714 <_Z17StartKeyboardTaskPv+0x168>)
{
 80015b4:	b086      	sub	sp, #24
	buzzerPress.freq=3000;
 80015b6:	9302      	str	r3, [sp, #8]
	buzzerPress.duration=5;
 80015b8:	237d      	movs	r3, #125	; 0x7d
	uint8_t button_two_flag=1;
 80015ba:	462f      	mov	r7, r5
	uint8_t button_one_flag=1;
 80015bc:	462e      	mov	r6, r5
	buzzerRELESE.freq=3500;
 80015be:	4a56      	ldr	r2, [pc, #344]	; (8001718 <_Z17StartKeyboardTaskPv+0x16c>)
		if(HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin) == GPIO_PIN_RESET && button_one_flag)
 80015c0:	4c56      	ldr	r4, [pc, #344]	; (800171c <_Z17StartKeyboardTaskPv+0x170>)
	buzzerPress.duration=5;
 80015c2:	f8ad 300c 	strh.w	r3, [sp, #12]
	buzzerRELESE.freq=3500;
 80015c6:	9204      	str	r2, [sp, #16]
	buzzerRELESE.duration=5;
 80015c8:	f8ad 3014 	strh.w	r3, [sp, #20]
		if(HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin) == GPIO_PIN_RESET && button_one_flag)
 80015cc:	2120      	movs	r1, #32
 80015ce:	4620      	mov	r0, r4
 80015d0:	f001 fb58 	bl	8002c84 <HAL_GPIO_ReadPin>
 80015d4:	4680      	mov	r8, r0
 80015d6:	b980      	cbnz	r0, 80015fa <_Z17StartKeyboardTaskPv+0x4e>
 80015d8:	b17e      	cbz	r6, 80015fa <_Z17StartKeyboardTaskPv+0x4e>
			buzzerQueueHandle.send(buzzerPress);
 80015da:	4b51      	ldr	r3, [pc, #324]	; (8001720 <_Z17StartKeyboardTaskPv+0x174>)
 80015dc:	a902      	add	r1, sp, #8
 80015de:	6818      	ldr	r0, [r3, #0]
 80015e0:	f7ff ffdc 	bl	800159c <_ZN7osQueueI12buzzerStructLj2EE4sendERKS0_m.isra.2.constprop.7>
			buttonEvent.buttonNumber=1;
 80015e4:	2301      	movs	r3, #1
 80015e6:	f88d 3004 	strb.w	r3, [sp, #4]
			buttonEvent.state = BUTTON_SHORT_PRESSED;
 80015ea:	f88d 3005 	strb.w	r3, [sp, #5]
			keyboardQueueHandle.send(buttonEvent);//osMessageQueuePut(keyboardQueueHandle, &buttonEvent, 0U, 0U);
 80015ee:	4b4d      	ldr	r3, [pc, #308]	; (8001724 <_Z17StartKeyboardTaskPv+0x178>)
 80015f0:	a901      	add	r1, sp, #4
 80015f2:	6818      	ldr	r0, [r3, #0]
 80015f4:	f7ff ffd6 	bl	80015a4 <_ZN7osQueueI12buttonStructLj1EE4sendERKS0_m.isra.3.constprop.8>
			button_one_flag=0;
 80015f8:	4646      	mov	r6, r8
		if(HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin) == GPIO_PIN_SET && (!button_one_flag))
 80015fa:	2120      	movs	r1, #32
 80015fc:	4620      	mov	r0, r4
 80015fe:	f001 fb41 	bl	8002c84 <HAL_GPIO_ReadPin>
 8001602:	2801      	cmp	r0, #1
 8001604:	4680      	mov	r8, r0
 8001606:	d10e      	bne.n	8001626 <_Z17StartKeyboardTaskPv+0x7a>
 8001608:	b96e      	cbnz	r6, 8001626 <_Z17StartKeyboardTaskPv+0x7a>
			buzzerQueueHandle.send(buzzerRELESE);
 800160a:	4b45      	ldr	r3, [pc, #276]	; (8001720 <_Z17StartKeyboardTaskPv+0x174>)
 800160c:	a904      	add	r1, sp, #16
 800160e:	6818      	ldr	r0, [r3, #0]
 8001610:	f7ff ffc4 	bl	800159c <_ZN7osQueueI12buzzerStructLj2EE4sendERKS0_m.isra.2.constprop.7>
			keyboardQueueHandle.send(buttonEvent);
 8001614:	4b43      	ldr	r3, [pc, #268]	; (8001724 <_Z17StartKeyboardTaskPv+0x178>)
 8001616:	a901      	add	r1, sp, #4
 8001618:	6818      	ldr	r0, [r3, #0]
			buttonEvent.buttonNumber=1;
 800161a:	f88d 8004 	strb.w	r8, [sp, #4]
			buttonEvent.state = BUTTON_RELEASED;
 800161e:	f88d 6005 	strb.w	r6, [sp, #5]
			keyboardQueueHandle.send(buttonEvent);
 8001622:	f7ff ffbf 	bl	80015a4 <_ZN7osQueueI12buttonStructLj1EE4sendERKS0_m.isra.3.constprop.8>
		if(HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin) == GPIO_PIN_SET)
 8001626:	2120      	movs	r1, #32
 8001628:	4620      	mov	r0, r4
 800162a:	f001 fb2b 	bl	8002c84 <HAL_GPIO_ReadPin>
		if(HAL_GPIO_ReadPin(BTN_2_GPIO_Port, BTN_2_Pin) == GPIO_PIN_RESET && button_two_flag)
 800162e:	2110      	movs	r1, #16
			button_one_flag=1;
 8001630:	2801      	cmp	r0, #1
		if(HAL_GPIO_ReadPin(BTN_2_GPIO_Port, BTN_2_Pin) == GPIO_PIN_RESET && button_two_flag)
 8001632:	4620      	mov	r0, r4
			button_one_flag=1;
 8001634:	bf08      	it	eq
 8001636:	2601      	moveq	r6, #1
		if(HAL_GPIO_ReadPin(BTN_2_GPIO_Port, BTN_2_Pin) == GPIO_PIN_RESET && button_two_flag)
 8001638:	f001 fb24 	bl	8002c84 <HAL_GPIO_ReadPin>
 800163c:	4680      	mov	r8, r0
 800163e:	b988      	cbnz	r0, 8001664 <_Z17StartKeyboardTaskPv+0xb8>
 8001640:	b187      	cbz	r7, 8001664 <_Z17StartKeyboardTaskPv+0xb8>
			buzzerQueueHandle.send(buzzerPress);
 8001642:	4b37      	ldr	r3, [pc, #220]	; (8001720 <_Z17StartKeyboardTaskPv+0x174>)
 8001644:	a902      	add	r1, sp, #8
 8001646:	6818      	ldr	r0, [r3, #0]
 8001648:	f7ff ffa8 	bl	800159c <_ZN7osQueueI12buzzerStructLj2EE4sendERKS0_m.isra.2.constprop.7>
			buttonEvent.buttonNumber=2;
 800164c:	2302      	movs	r3, #2
 800164e:	f88d 3004 	strb.w	r3, [sp, #4]
			buttonEvent.state = BUTTON_SHORT_PRESSED;
 8001652:	2301      	movs	r3, #1
 8001654:	f88d 3005 	strb.w	r3, [sp, #5]
			keyboardQueueHandle.send(buttonEvent);
 8001658:	4b32      	ldr	r3, [pc, #200]	; (8001724 <_Z17StartKeyboardTaskPv+0x178>)
 800165a:	a901      	add	r1, sp, #4
 800165c:	6818      	ldr	r0, [r3, #0]
 800165e:	f7ff ffa1 	bl	80015a4 <_ZN7osQueueI12buttonStructLj1EE4sendERKS0_m.isra.3.constprop.8>
			button_two_flag=0;
 8001662:	4647      	mov	r7, r8
		if(HAL_GPIO_ReadPin(BTN_2_GPIO_Port, BTN_2_Pin) == GPIO_PIN_SET && (!button_two_flag))
 8001664:	2110      	movs	r1, #16
 8001666:	4620      	mov	r0, r4
 8001668:	f001 fb0c 	bl	8002c84 <HAL_GPIO_ReadPin>
 800166c:	2801      	cmp	r0, #1
 800166e:	d10f      	bne.n	8001690 <_Z17StartKeyboardTaskPv+0xe4>
 8001670:	b977      	cbnz	r7, 8001690 <_Z17StartKeyboardTaskPv+0xe4>
			buzzerQueueHandle.send(buzzerRELESE);
 8001672:	4b2b      	ldr	r3, [pc, #172]	; (8001720 <_Z17StartKeyboardTaskPv+0x174>)
 8001674:	a904      	add	r1, sp, #16
 8001676:	6818      	ldr	r0, [r3, #0]
 8001678:	f7ff ff90 	bl	800159c <_ZN7osQueueI12buzzerStructLj2EE4sendERKS0_m.isra.2.constprop.7>
			buttonEvent.buttonNumber=2;
 800167c:	2302      	movs	r3, #2
 800167e:	f88d 3004 	strb.w	r3, [sp, #4]
			keyboardQueueHandle.send(buttonEvent);
 8001682:	4b28      	ldr	r3, [pc, #160]	; (8001724 <_Z17StartKeyboardTaskPv+0x178>)
 8001684:	a901      	add	r1, sp, #4
 8001686:	6818      	ldr	r0, [r3, #0]
			buttonEvent.state = BUTTON_RELEASED;
 8001688:	f88d 7005 	strb.w	r7, [sp, #5]
			keyboardQueueHandle.send(buttonEvent);
 800168c:	f7ff ff8a 	bl	80015a4 <_ZN7osQueueI12buttonStructLj1EE4sendERKS0_m.isra.3.constprop.8>
		if(HAL_GPIO_ReadPin(BTN_2_GPIO_Port, BTN_2_Pin) == GPIO_PIN_SET)
 8001690:	2110      	movs	r1, #16
 8001692:	4620      	mov	r0, r4
 8001694:	f001 faf6 	bl	8002c84 <HAL_GPIO_ReadPin>
		if(HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin) == GPIO_PIN_RESET && button_three_flag)
 8001698:	2108      	movs	r1, #8
			button_two_flag=1;
 800169a:	2801      	cmp	r0, #1
		if(HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin) == GPIO_PIN_RESET && button_three_flag)
 800169c:	4620      	mov	r0, r4
			button_two_flag=1;
 800169e:	bf08      	it	eq
 80016a0:	2701      	moveq	r7, #1
		if(HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin) == GPIO_PIN_RESET && button_three_flag)
 80016a2:	f001 faef 	bl	8002c84 <HAL_GPIO_ReadPin>
 80016a6:	4680      	mov	r8, r0
 80016a8:	b988      	cbnz	r0, 80016ce <_Z17StartKeyboardTaskPv+0x122>
 80016aa:	b185      	cbz	r5, 80016ce <_Z17StartKeyboardTaskPv+0x122>
			buzzerQueueHandle.send(buzzerPress);
 80016ac:	4b1c      	ldr	r3, [pc, #112]	; (8001720 <_Z17StartKeyboardTaskPv+0x174>)
 80016ae:	a902      	add	r1, sp, #8
 80016b0:	6818      	ldr	r0, [r3, #0]
 80016b2:	f7ff ff73 	bl	800159c <_ZN7osQueueI12buzzerStructLj2EE4sendERKS0_m.isra.2.constprop.7>
			buttonEvent.buttonNumber=3;
 80016b6:	2303      	movs	r3, #3
 80016b8:	f88d 3004 	strb.w	r3, [sp, #4]
			buttonEvent.state = BUTTON_SHORT_PRESSED;
 80016bc:	2301      	movs	r3, #1
 80016be:	f88d 3005 	strb.w	r3, [sp, #5]
			keyboardQueueHandle.send(buttonEvent);
 80016c2:	4b18      	ldr	r3, [pc, #96]	; (8001724 <_Z17StartKeyboardTaskPv+0x178>)
 80016c4:	a901      	add	r1, sp, #4
 80016c6:	6818      	ldr	r0, [r3, #0]
 80016c8:	f7ff ff6c 	bl	80015a4 <_ZN7osQueueI12buttonStructLj1EE4sendERKS0_m.isra.3.constprop.8>
			button_three_flag=0;
 80016cc:	4645      	mov	r5, r8
		if(HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin) == GPIO_PIN_SET && (!button_three_flag))
 80016ce:	2108      	movs	r1, #8
 80016d0:	4620      	mov	r0, r4
 80016d2:	f001 fad7 	bl	8002c84 <HAL_GPIO_ReadPin>
 80016d6:	2801      	cmp	r0, #1
 80016d8:	d10f      	bne.n	80016fa <_Z17StartKeyboardTaskPv+0x14e>
 80016da:	b975      	cbnz	r5, 80016fa <_Z17StartKeyboardTaskPv+0x14e>
			buzzerQueueHandle.send(buzzerRELESE);
 80016dc:	4b10      	ldr	r3, [pc, #64]	; (8001720 <_Z17StartKeyboardTaskPv+0x174>)
 80016de:	a904      	add	r1, sp, #16
 80016e0:	6818      	ldr	r0, [r3, #0]
 80016e2:	f7ff ff5b 	bl	800159c <_ZN7osQueueI12buzzerStructLj2EE4sendERKS0_m.isra.2.constprop.7>
			buttonEvent.buttonNumber=3;
 80016e6:	2303      	movs	r3, #3
 80016e8:	f88d 3004 	strb.w	r3, [sp, #4]
			keyboardQueueHandle.send(buttonEvent);
 80016ec:	4b0d      	ldr	r3, [pc, #52]	; (8001724 <_Z17StartKeyboardTaskPv+0x178>)
 80016ee:	a901      	add	r1, sp, #4
 80016f0:	6818      	ldr	r0, [r3, #0]
			buttonEvent.state = BUTTON_RELEASED;
 80016f2:	f88d 5005 	strb.w	r5, [sp, #5]
			keyboardQueueHandle.send(buttonEvent);
 80016f6:	f7ff ff55 	bl	80015a4 <_ZN7osQueueI12buttonStructLj1EE4sendERKS0_m.isra.3.constprop.8>
		if(HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin) == GPIO_PIN_SET)
 80016fa:	2108      	movs	r1, #8
 80016fc:	4620      	mov	r0, r4
 80016fe:	f001 fac1 	bl	8002c84 <HAL_GPIO_ReadPin>
			button_three_flag=1;
 8001702:	2801      	cmp	r0, #1
		osDelay(5);
 8001704:	f04f 0005 	mov.w	r0, #5
			button_three_flag=1;
 8001708:	bf08      	it	eq
 800170a:	2501      	moveq	r5, #1
		osDelay(5);
 800170c:	f002 ffba 	bl	8004684 <osDelay>
		if(HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin) == GPIO_PIN_RESET && button_one_flag)
 8001710:	e75c      	b.n	80015cc <_Z17StartKeyboardTaskPv+0x20>
 8001712:	bf00      	nop
 8001714:	00050bb8 	.word	0x00050bb8
 8001718:	00050dac 	.word	0x00050dac
 800171c:	40010c00 	.word	0x40010c00
 8001720:	20000470 	.word	0x20000470
 8001724:	2000118c 	.word	0x2000118c

08001728 <_Z15StartBuzzerTaskPv>:
{
 8001728:	b537      	push	{r0, r1, r2, r4, r5, lr}
		status = buzzerQueueHandle.receive(&buzzerParameters); // osMessageQueueGet(buzzerQueueHandle, &buzzerParameters, NULL, osWaitForever);   // wait for message
 800172a:	4d0d      	ldr	r5, [pc, #52]	; (8001760 <_Z15StartBuzzerTaskPv+0x38>)
		return osMessageQueueGet(xHandle, val, NULL, xTicksToWait);
 800172c:	f04f 33ff 	mov.w	r3, #4294967295
 8001730:	2200      	movs	r2, #0
 8001732:	4669      	mov	r1, sp
 8001734:	6828      	ldr	r0, [r5, #0]
 8001736:	f003 f91d 	bl	8004974 <osMessageQueueGet>
		if (status == osOK) {
 800173a:	4604      	mov	r4, r0
 800173c:	2800      	cmp	r0, #0
 800173e:	d1f5      	bne.n	800172c <_Z15StartBuzzerTaskPv+0x4>
			BuzzerSetFreq(buzzerParameters.freq);
 8001740:	f8bd 0000 	ldrh.w	r0, [sp]
 8001744:	f7ff fbfe 	bl	8000f44 <_Z13BuzzerSetFreqt>
			BuzzerSetVolume(buzzerParameters.volume);
 8001748:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 800174c:	f7ff fc06 	bl	8000f5c <_Z15BuzzerSetVolumet>
			osDelay(buzzerParameters.duration);
 8001750:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8001754:	f002 ff96 	bl	8004684 <osDelay>
			BuzzerSetVolume(0);
 8001758:	4620      	mov	r0, r4
 800175a:	f7ff fbff 	bl	8000f5c <_Z15BuzzerSetVolumet>
 800175e:	e7e5      	b.n	800172c <_Z15StartBuzzerTaskPv+0x4>
 8001760:	20000470 	.word	0x20000470

08001764 <_Z16StartDefaultTaskPv>:
{
 8001764:	b573      	push	{r0, r1, r4, r5, r6, lr}
		keyStatus =keyboardQueueHandle.receive(&buttonEvent);// osMessageQueueGet(keyboardQueueHandle, &buttonEvent, NULL, 1U);   // wait for message
 8001766:	4d1f      	ldr	r5, [pc, #124]	; (80017e4 <_Z16StartDefaultTaskPv+0x80>)
 8001768:	4c1f      	ldr	r4, [pc, #124]	; (80017e8 <_Z16StartDefaultTaskPv+0x84>)
			ssd1306_WriteString(" ",Font_11x18,White);
 800176a:	4e20      	ldr	r6, [pc, #128]	; (80017ec <_Z16StartDefaultTaskPv+0x88>)
 800176c:	f04f 33ff 	mov.w	r3, #4294967295
 8001770:	2200      	movs	r2, #0
 8001772:	a901      	add	r1, sp, #4
 8001774:	6828      	ldr	r0, [r5, #0]
 8001776:	f003 f8fd 	bl	8004974 <osMessageQueueGet>
		if (keyStatus == osOK) {
 800177a:	bb00      	cbnz	r0, 80017be <_Z16StartDefaultTaskPv+0x5a>
			ssd1306_SetCursor(2,23);
 800177c:	2117      	movs	r1, #23
 800177e:	2002      	movs	r0, #2
 8001780:	f000 fea8 	bl	80024d4 <_Z17ssd1306_SetCursorhh>
			switch (buttonEvent.buttonNumber) {
 8001784:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001788:	2b02      	cmp	r3, #2
 800178a:	d01c      	beq.n	80017c6 <_Z16StartDefaultTaskPv+0x62>
 800178c:	2b03      	cmp	r3, #3
 800178e:	d01f      	beq.n	80017d0 <_Z16StartDefaultTaskPv+0x6c>
 8001790:	2b01      	cmp	r3, #1
 8001792:	d104      	bne.n	800179e <_Z16StartDefaultTaskPv+0x3a>
				ssd1306_WriteString("1",Font_11x18,White);
 8001794:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001798:	4815      	ldr	r0, [pc, #84]	; (80017f0 <_Z16StartDefaultTaskPv+0x8c>)
				ssd1306_WriteString("3",Font_11x18,White);
 800179a:	f000 fe85 	bl	80024a8 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
			ssd1306_WriteString(" ",Font_11x18,White);
 800179e:	e894 0006 	ldmia.w	r4, {r1, r2}
 80017a2:	2301      	movs	r3, #1
 80017a4:	4630      	mov	r0, r6
 80017a6:	f000 fe7f 	bl	80024a8 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
			switch (buttonEvent.state) {
 80017aa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80017ae:	b1a3      	cbz	r3, 80017da <_Z16StartDefaultTaskPv+0x76>
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d104      	bne.n	80017be <_Z16StartDefaultTaskPv+0x5a>
				ssd1306_WriteString("PRESS",Font_11x18,White);
 80017b4:	e894 0006 	ldmia.w	r4, {r1, r2}
 80017b8:	480e      	ldr	r0, [pc, #56]	; (80017f4 <_Z16StartDefaultTaskPv+0x90>)
				ssd1306_WriteString("RELEAS",Font_11x18,White);
 80017ba:	f000 fe75 	bl	80024a8 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
		osDelay(20);
 80017be:	2014      	movs	r0, #20
 80017c0:	f002 ff60 	bl	8004684 <osDelay>
		keyStatus =keyboardQueueHandle.receive(&buttonEvent);// osMessageQueueGet(keyboardQueueHandle, &buttonEvent, NULL, 1U);   // wait for message
 80017c4:	e7d2      	b.n	800176c <_Z16StartDefaultTaskPv+0x8>
				ssd1306_WriteString("2",Font_11x18,White);
 80017c6:	2301      	movs	r3, #1
 80017c8:	e894 0006 	ldmia.w	r4, {r1, r2}
 80017cc:	480a      	ldr	r0, [pc, #40]	; (80017f8 <_Z16StartDefaultTaskPv+0x94>)
 80017ce:	e7e4      	b.n	800179a <_Z16StartDefaultTaskPv+0x36>
				ssd1306_WriteString("3",Font_11x18,White);
 80017d0:	2301      	movs	r3, #1
 80017d2:	e894 0006 	ldmia.w	r4, {r1, r2}
 80017d6:	4809      	ldr	r0, [pc, #36]	; (80017fc <_Z16StartDefaultTaskPv+0x98>)
 80017d8:	e7df      	b.n	800179a <_Z16StartDefaultTaskPv+0x36>
				ssd1306_WriteString("RELEAS",Font_11x18,White);
 80017da:	2301      	movs	r3, #1
 80017dc:	e894 0006 	ldmia.w	r4, {r1, r2}
 80017e0:	4807      	ldr	r0, [pc, #28]	; (8001800 <_Z16StartDefaultTaskPv+0x9c>)
 80017e2:	e7ea      	b.n	80017ba <_Z16StartDefaultTaskPv+0x56>
 80017e4:	2000118c 	.word	0x2000118c
 80017e8:	20000000 	.word	0x20000000
 80017ec:	0800a020 	.word	0x0800a020
 80017f0:	08009e01 	.word	0x08009e01
 80017f4:	08009e07 	.word	0x08009e07
 80017f8:	08009e03 	.word	0x08009e03
 80017fc:	08009e05 	.word	0x08009e05
 8001800:	08009e0d 	.word	0x08009e0d

08001804 <Error_Handler>:
 */
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	  HAL_UART_Transmit(&huart3, (uint8_t *) "ERROR ERROR!!!", 14, 10);
 8001804:	230a      	movs	r3, #10
 8001806:	220e      	movs	r2, #14
 8001808:	4901      	ldr	r1, [pc, #4]	; (8001810 <Error_Handler+0xc>)
 800180a:	4802      	ldr	r0, [pc, #8]	; (8001814 <Error_Handler+0x10>)
 800180c:	f002 bd3c 	b.w	8004288 <HAL_UART_Transmit>
 8001810:	08009d68 	.word	0x08009d68
 8001814:	2000114c 	.word	0x2000114c

08001818 <_Z18SystemClock_Configv>:
	/* USER CODE END Error_Handler_Debug */
}
void SystemClock_Config(void)
{
 8001818:	b510      	push	{r4, lr}
 800181a:	b094      	sub	sp, #80	; 0x50
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800181c:	2214      	movs	r2, #20
 800181e:	2100      	movs	r1, #0
 8001820:	a80c      	add	r0, sp, #48	; 0x30
 8001822:	f004 fff8 	bl	8006816 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001826:	2214      	movs	r2, #20
 8001828:	2100      	movs	r1, #0
 800182a:	eb0d 0002 	add.w	r0, sp, r2
 800182e:	f004 fff2 	bl	8006816 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001832:	2210      	movs	r2, #16
 8001834:	2100      	movs	r1, #0
 8001836:	a801      	add	r0, sp, #4
 8001838:	f004 ffed 	bl	8006816 <memset>
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800183c:	2402      	movs	r4, #2
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800183e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001842:	2201      	movs	r2, #1
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001844:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001848:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800184c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001850:	a80a      	add	r0, sp, #40	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001852:	920e      	str	r2, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001854:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001856:	f001 ff95 	bl	8003784 <HAL_RCC_OscConfig>
 800185a:	b108      	cbz	r0, 8001860 <_Z18SystemClock_Configv+0x48>
	{
		Error_Handler();
 800185c:	f7ff ffd2 	bl	8001804 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001860:	230f      	movs	r3, #15
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001862:	e9cd 3405 	strd	r3, r4, [sp, #20]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001866:	2400      	movs	r4, #0
 8001868:	f44f 6380 	mov.w	r3, #1024	; 0x400
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800186c:	2102      	movs	r1, #2
 800186e:	a805      	add	r0, sp, #20
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001870:	e9cd 4307 	strd	r4, r3, [sp, #28]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001874:	9409      	str	r4, [sp, #36]	; 0x24
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001876:	f002 f95d 	bl	8003b34 <HAL_RCC_ClockConfig>
 800187a:	b108      	cbz	r0, 8001880 <_Z18SystemClock_Configv+0x68>
	{
		Error_Handler();
 800187c:	f7ff ffc2 	bl	8001804 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001880:	2310      	movs	r3, #16
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001882:	a801      	add	r0, sp, #4
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001884:	9301      	str	r3, [sp, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001886:	9404      	str	r4, [sp, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001888:	f002 fa10 	bl	8003cac <HAL_RCCEx_PeriphCLKConfig>
 800188c:	b108      	cbz	r0, 8001892 <_Z18SystemClock_Configv+0x7a>
	{
		Error_Handler();
 800188e:	f7ff ffb9 	bl	8001804 <Error_Handler>
	}
}
 8001892:	b014      	add	sp, #80	; 0x50
 8001894:	bd10      	pop	{r4, pc}

08001896 <_ZN6osTaskILj64EE5startEPFvPvE>:
{
		priority=osPriority;
}


	void start(osThreadFunc_t func)
 8001896:	b530      	push	{r4, r5, lr}
 8001898:	b08b      	sub	sp, #44	; 0x2c
 800189a:	4604      	mov	r4, r0
 800189c:	460d      	mov	r5, r1
	{
		const osThreadAttr_t Task_attributes = {
 800189e:	2220      	movs	r2, #32
 80018a0:	2100      	movs	r1, #0
 80018a2:	a802      	add	r0, sp, #8
 80018a4:	f004 ffb7 	bl	8006816 <memset>
 80018a8:	2364      	movs	r3, #100	; 0x64
 80018aa:	9304      	str	r3, [sp, #16]
 80018ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018b0:	9306      	str	r3, [sp, #24]
 80018b2:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
				priority : (osPriority_t) priority,
				tz_module : NULL,
				reserved:NULL
		};

		TaskHandle = osThreadNew(func, NULL, &Task_attributes);
 80018b6:	aa01      	add	r2, sp, #4
		const osThreadAttr_t Task_attributes = {
 80018b8:	9301      	str	r3, [sp, #4]
 80018ba:	f504 7382 	add.w	r3, r4, #260	; 0x104
 80018be:	9303      	str	r3, [sp, #12]
 80018c0:	1d23      	adds	r3, r4, #4
 80018c2:	9305      	str	r3, [sp, #20]
 80018c4:	f8d4 3168 	ldr.w	r3, [r4, #360]	; 0x168
		TaskHandle = osThreadNew(func, NULL, &Task_attributes);
 80018c8:	2100      	movs	r1, #0
 80018ca:	4628      	mov	r0, r5
		const osThreadAttr_t Task_attributes = {
 80018cc:	9307      	str	r3, [sp, #28]
		TaskHandle = osThreadNew(func, NULL, &Task_attributes);
 80018ce:	f002 fe7d 	bl	80045cc <osThreadNew>
 80018d2:	6020      	str	r0, [r4, #0]
	}
 80018d4:	b00b      	add	sp, #44	; 0x2c
 80018d6:	bd30      	pop	{r4, r5, pc}

080018d8 <_ZN6osTaskILj256EE5startEPFvPvE>:
	void start(osThreadFunc_t func)
 80018d8:	b530      	push	{r4, r5, lr}
 80018da:	b08b      	sub	sp, #44	; 0x2c
 80018dc:	4604      	mov	r4, r0
 80018de:	460d      	mov	r5, r1
		const osThreadAttr_t Task_attributes = {
 80018e0:	2220      	movs	r2, #32
 80018e2:	2100      	movs	r1, #0
 80018e4:	a802      	add	r0, sp, #8
 80018e6:	f004 ff96 	bl	8006816 <memset>
 80018ea:	2364      	movs	r3, #100	; 0x64
 80018ec:	9304      	str	r3, [sp, #16]
 80018ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018f2:	9306      	str	r3, [sp, #24]
 80018f4:	f8d4 346c 	ldr.w	r3, [r4, #1132]	; 0x46c
		TaskHandle = osThreadNew(func, NULL, &Task_attributes);
 80018f8:	aa01      	add	r2, sp, #4
		const osThreadAttr_t Task_attributes = {
 80018fa:	9301      	str	r3, [sp, #4]
 80018fc:	f204 4304 	addw	r3, r4, #1028	; 0x404
 8001900:	9303      	str	r3, [sp, #12]
 8001902:	1d23      	adds	r3, r4, #4
 8001904:	9305      	str	r3, [sp, #20]
 8001906:	f8d4 3468 	ldr.w	r3, [r4, #1128]	; 0x468
		TaskHandle = osThreadNew(func, NULL, &Task_attributes);
 800190a:	2100      	movs	r1, #0
 800190c:	4628      	mov	r0, r5
		const osThreadAttr_t Task_attributes = {
 800190e:	9307      	str	r3, [sp, #28]
		TaskHandle = osThreadNew(func, NULL, &Task_attributes);
 8001910:	f002 fe5c 	bl	80045cc <osThreadNew>
 8001914:	6020      	str	r0, [r4, #0]
	}
 8001916:	b00b      	add	sp, #44	; 0x2c
 8001918:	bd30      	pop	{r4, r5, pc}
	...

0800191c <main>:
{
 800191c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001920:	b090      	sub	sp, #64	; 0x40
	HAL_Init();
 8001922:	f000 ffe7 	bl	80028f4 <HAL_Init>
	SystemClock_Config();
 8001926:	f7ff ff77 	bl	8001818 <_Z18SystemClock_Configv>
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192a:	2210      	movs	r2, #16
 800192c:	2100      	movs	r1, #0
 800192e:	a807      	add	r0, sp, #28
 8001930:	f004 ff71 	bl	8006816 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001934:	4bb8      	ldr	r3, [pc, #736]	; (8001c18 <main+0x2fc>)

	/*Configure GPIO pin : SD_SPI_CS_Pin */
	GPIO_InitStruct.Pin = SD_SPI_CS_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001936:	2400      	movs	r4, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001938:	699a      	ldr	r2, [r3, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800193a:	2501      	movs	r5, #1
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800193c:	f042 0210 	orr.w	r2, r2, #16
 8001940:	619a      	str	r2, [r3, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001942:	2740      	movs	r7, #64	; 0x40
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001944:	2603      	movs	r6, #3
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001946:	699a      	ldr	r2, [r3, #24]

	/*Configure GPIO pin : GPS_EN_Pin */
	GPIO_InitStruct.Pin = GPS_EN_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001948:	f04f 0802 	mov.w	r8, #2
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800194c:	f002 0210 	and.w	r2, r2, #16
 8001950:	9201      	str	r2, [sp, #4]
 8001952:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001954:	699a      	ldr	r2, [r3, #24]
	HAL_GPIO_WritePin(SD_SPI_CS_GPIO_Port, SD_SPI_CS_Pin, GPIO_PIN_SET);
 8001956:	2140      	movs	r1, #64	; 0x40
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001958:	f042 0220 	orr.w	r2, r2, #32
 800195c:	619a      	str	r2, [r3, #24]
 800195e:	699a      	ldr	r2, [r3, #24]
	HAL_GPIO_WritePin(SD_SPI_CS_GPIO_Port, SD_SPI_CS_Pin, GPIO_PIN_SET);
 8001960:	48ae      	ldr	r0, [pc, #696]	; (8001c1c <main+0x300>)
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001962:	f002 0220 	and.w	r2, r2, #32
 8001966:	9202      	str	r2, [sp, #8]
 8001968:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800196a:	699a      	ldr	r2, [r3, #24]
 800196c:	f042 0204 	orr.w	r2, r2, #4
 8001970:	619a      	str	r2, [r3, #24]
 8001972:	699a      	ldr	r2, [r3, #24]
 8001974:	f002 0204 	and.w	r2, r2, #4
 8001978:	9203      	str	r2, [sp, #12]
 800197a:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800197c:	699a      	ldr	r2, [r3, #24]
 800197e:	f042 0208 	orr.w	r2, r2, #8
 8001982:	619a      	str	r2, [r3, #24]
 8001984:	699b      	ldr	r3, [r3, #24]
	HAL_GPIO_WritePin(SD_SPI_CS_GPIO_Port, SD_SPI_CS_Pin, GPIO_PIN_SET);
 8001986:	2201      	movs	r2, #1
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001988:	f003 0308 	and.w	r3, r3, #8
 800198c:	9304      	str	r3, [sp, #16]
 800198e:	9b04      	ldr	r3, [sp, #16]
	HAL_GPIO_WritePin(SD_SPI_CS_GPIO_Port, SD_SPI_CS_Pin, GPIO_PIN_SET);
 8001990:	f001 f97e 	bl	8002c90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPS_EN_GPIO_Port, GPS_EN_Pin, GPIO_PIN_RESET);
 8001994:	2200      	movs	r2, #0
 8001996:	2101      	movs	r1, #1
 8001998:	48a1      	ldr	r0, [pc, #644]	; (8001c20 <main+0x304>)
 800199a:	f001 f979 	bl	8002c90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_LE_GPIO_Port, LED_LE_Pin, GPIO_PIN_SET);
 800199e:	2201      	movs	r2, #1
 80019a0:	2140      	movs	r1, #64	; 0x40
 80019a2:	489f      	ldr	r0, [pc, #636]	; (8001c20 <main+0x304>)
 80019a4:	f001 f974 	bl	8002c90 <HAL_GPIO_WritePin>
	HAL_GPIO_Init(SD_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80019a8:	a907      	add	r1, sp, #28
 80019aa:	489c      	ldr	r0, [pc, #624]	; (8001c1c <main+0x300>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ac:	e9cd 7507 	strd	r7, r5, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019b0:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
	HAL_GPIO_Init(SD_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80019b4:	f001 f886 	bl	8002ac4 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPS_EN_GPIO_Port, &GPIO_InitStruct);
 80019b8:	a907      	add	r1, sp, #28
 80019ba:	4899      	ldr	r0, [pc, #612]	; (8001c20 <main+0x304>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019bc:	e9cd 5507 	strd	r5, r5, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	9409      	str	r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
	HAL_GPIO_Init(GPS_EN_GPIO_Port, &GPIO_InitStruct);
 80019c6:	f001 f87d 	bl	8002ac4 <HAL_GPIO_Init>

	/*Configure GPIO pin : GPS_PPS_Pin */
	GPIO_InitStruct.Pin = GPS_PPS_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPS_PPS_GPIO_Port, &GPIO_InitStruct);
 80019ca:	a907      	add	r1, sp, #28
 80019cc:	4894      	ldr	r0, [pc, #592]	; (8001c20 <main+0x304>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ce:	e9cd 8407 	strd	r8, r4, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	9409      	str	r4, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPS_PPS_GPIO_Port, &GPIO_InitStruct);
 80019d4:	f001 f876 	bl	8002ac4 <HAL_GPIO_Init>

	/*Configure GPIO pin : MPU_INT_Pin */
	GPIO_InitStruct.Pin = MPU_INT_Pin;
 80019d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(MPU_INT_GPIO_Port, &GPIO_InitStruct);
 80019dc:	a907      	add	r1, sp, #28
 80019de:	488f      	ldr	r0, [pc, #572]	; (8001c1c <main+0x300>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e0:	e9cd 3407 	strd	r3, r4, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	9409      	str	r4, [sp, #36]	; 0x24
	HAL_GPIO_Init(MPU_INT_GPIO_Port, &GPIO_InitStruct);
 80019e6:	f001 f86d 	bl	8002ac4 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN_3_Pin BTN_2_Pin BTN_1_Pin */
	GPIO_InitStruct.Pin = BTN_3_Pin|BTN_2_Pin|BTN_1_Pin;
 80019ea:	2338      	movs	r3, #56	; 0x38
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ec:	a907      	add	r1, sp, #28
 80019ee:	488c      	ldr	r0, [pc, #560]	; (8001c20 <main+0x304>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f0:	e9cd 3407 	strd	r3, r4, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019f4:	9509      	str	r5, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f6:	f001 f865 	bl	8002ac4 <HAL_GPIO_Init>
	/*Configure GPIO pin : LED_LE_Pin */
	GPIO_InitStruct.Pin = LED_LE_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(LED_LE_GPIO_Port, &GPIO_InitStruct);
 80019fa:	4889      	ldr	r0, [pc, #548]	; (8001c20 <main+0x304>)
 80019fc:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fe:	e9cd 7507 	strd	r7, r5, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a02:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
	HAL_GPIO_Init(LED_LE_GPIO_Port, &GPIO_InitStruct);
 8001a06:	f001 f85d 	bl	8002ac4 <HAL_GPIO_Init>
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a0a:	f44f 7382 	mov.w	r3, #260	; 0x104
	hspi2.Instance = SPI2;
 8001a0e:	4885      	ldr	r0, [pc, #532]	; (8001c24 <main+0x308>)
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a10:	4f85      	ldr	r7, [pc, #532]	; (8001c28 <main+0x30c>)
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a12:	e9c0 4402 	strd	r4, r4, [r0, #8]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a16:	e9c0 7300 	strd	r7, r3, [r0]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a1a:	f44f 7300 	mov.w	r3, #512	; 0x200
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a1e:	e9c0 3406 	strd	r3, r4, [r0, #24]
	hspi2.Init.CRCPolynomial = 10;
 8001a22:	230a      	movs	r3, #10
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a24:	e9c0 4404 	strd	r4, r4, [r0, #16]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a28:	e9c0 4408 	strd	r4, r4, [r0, #32]
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a2c:	6284      	str	r4, [r0, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8001a2e:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a30:	f002 f9b4 	bl	8003d9c <HAL_SPI_Init>
 8001a34:	b108      	cbz	r0, 8001a3a <main+0x11e>
		Error_Handler();
 8001a36:	f7ff fee5 	bl	8001804 <Error_Handler>
	huart1.Init.BaudRate = 115200;
 8001a3a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
	huart1.Instance = USART1;
 8001a3e:	487b      	ldr	r0, [pc, #492]	; (8001c2c <main+0x310>)
	huart1.Init.BaudRate = 115200;
 8001a40:	4e7b      	ldr	r6, [pc, #492]	; (8001c30 <main+0x314>)
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001a42:	220c      	movs	r2, #12
	huart1.Init.BaudRate = 115200;
 8001a44:	e9c0 6300 	strd	r6, r3, [r0]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a48:	2300      	movs	r3, #0
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001a4a:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001a4e:	6103      	str	r3, [r0, #16]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a50:	e9c0 2305 	strd	r2, r3, [r0, #20]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a54:	61c3      	str	r3, [r0, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a56:	f002 fbe9 	bl	800422c <HAL_UART_Init>
 8001a5a:	b108      	cbz	r0, 8001a60 <main+0x144>
		Error_Handler();
 8001a5c:	f7ff fed2 	bl	8001804 <Error_Handler>
	HAL_UART_Receive_IT (&huart1, receiveBuffer, (uint8_t) 1);
 8001a60:	2201      	movs	r2, #1
 8001a62:	4974      	ldr	r1, [pc, #464]	; (8001c34 <main+0x318>)
 8001a64:	4871      	ldr	r0, [pc, #452]	; (8001c2c <main+0x310>)
 8001a66:	f002 fc68 	bl	800433a <HAL_UART_Receive_IT>
	huart3.Init.BaudRate = 115200;
 8001a6a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
	huart3.Instance = USART3;
 8001a6e:	4872      	ldr	r0, [pc, #456]	; (8001c38 <main+0x31c>)
	huart3.Init.BaudRate = 115200;
 8001a70:	4d72      	ldr	r5, [pc, #456]	; (8001c3c <main+0x320>)
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001a72:	220c      	movs	r2, #12
	huart3.Init.BaudRate = 115200;
 8001a74:	e9c0 5300 	strd	r5, r3, [r0]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a78:	2300      	movs	r3, #0
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001a7a:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001a7e:	6103      	str	r3, [r0, #16]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a80:	e9c0 2305 	strd	r2, r3, [r0, #20]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a84:	61c3      	str	r3, [r0, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a86:	f002 fbd1 	bl	800422c <HAL_UART_Init>
 8001a8a:	b108      	cbz	r0, 8001a90 <main+0x174>
		Error_Handler();
 8001a8c:	f7ff feba 	bl	8001804 <Error_Handler>
	hi2c1.Instance = I2C1;
 8001a90:	486b      	ldr	r0, [pc, #428]	; (8001c40 <main+0x324>)
	hi2c1.Init.ClockSpeed = 400000;
 8001a92:	4c6c      	ldr	r4, [pc, #432]	; (8001c44 <main+0x328>)
 8001a94:	4b6c      	ldr	r3, [pc, #432]	; (8001c48 <main+0x32c>)
 8001a96:	e9c0 4300 	strd	r4, r3, [r0]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a9a:	2400      	movs	r4, #0
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	hi2c1.Init.OwnAddress1 = 0;
 8001aa0:	e9c0 4402 	strd	r4, r4, [r0, #8]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001aa4:	e9c0 3404 	strd	r3, r4, [r0, #16]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001aa8:	e9c0 4406 	strd	r4, r4, [r0, #24]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001aac:	6204      	str	r4, [r0, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001aae:	f001 fa41 	bl	8002f34 <HAL_I2C_Init>
 8001ab2:	b108      	cbz	r0, 8001ab8 <main+0x19c>
		Error_Handler();
 8001ab4:	f7ff fea6 	bl	8001804 <Error_Handler>
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001ab8:	221c      	movs	r2, #28
 8001aba:	2100      	movs	r1, #0
 8001abc:	eb0d 0002 	add.w	r0, sp, r2
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac0:	e9cd 4405 	strd	r4, r4, [sp, #20]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001ac4:	f004 fea7 	bl	8006816 <memset>
	htim2.Init.Prescaler = 479;
 8001ac8:	f240 13df 	movw	r3, #479	; 0x1df
 8001acc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	htim2.Instance = TIM2;
 8001ad0:	485e      	ldr	r0, [pc, #376]	; (8001c4c <main+0x330>)
	htim2.Init.Prescaler = 479;
 8001ad2:	e9c0 1300 	strd	r1, r3, [r0]
	htim2.Init.Period = 254;
 8001ad6:	23fe      	movs	r3, #254	; 0xfe
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad8:	6084      	str	r4, [r0, #8]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ada:	e9c0 3403 	strd	r3, r4, [r0, #12]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ade:	6184      	str	r4, [r0, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ae0:	f002 fa44 	bl	8003f6c <HAL_TIM_PWM_Init>
 8001ae4:	b108      	cbz	r0, 8001aea <main+0x1ce>
		Error_Handler();
 8001ae6:	f7ff fe8d 	bl	8001804 <Error_Handler>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aea:	2300      	movs	r3, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001aec:	a905      	add	r1, sp, #20
 8001aee:	4857      	ldr	r0, [pc, #348]	; (8001c4c <main+0x330>)
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001af0:	e9cd 3305 	strd	r3, r3, [sp, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001af4:	f002 fb0c 	bl	8004110 <HAL_TIMEx_MasterConfigSynchronization>
 8001af8:	b108      	cbz	r0, 8001afe <main+0x1e2>
		Error_Handler();
 8001afa:	f7ff fe83 	bl	8001804 <Error_Handler>
	sConfigOC.Pulse = 124;
 8001afe:	2260      	movs	r2, #96	; 0x60
 8001b00:	237c      	movs	r3, #124	; 0x7c
 8001b02:	e9cd 2307 	strd	r2, r3, [sp, #28]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b06:	2200      	movs	r2, #0
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b08:	a907      	add	r1, sp, #28
 8001b0a:	4850      	ldr	r0, [pc, #320]	; (8001c4c <main+0x330>)
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b0c:	9209      	str	r2, [sp, #36]	; 0x24
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b0e:	920b      	str	r2, [sp, #44]	; 0x2c
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b10:	f002 fa72 	bl	8003ff8 <HAL_TIM_PWM_ConfigChannel>
 8001b14:	b108      	cbz	r0, 8001b1a <main+0x1fe>
		Error_Handler();
 8001b16:	f7ff fe75 	bl	8001804 <Error_Handler>
	HAL_TIM_MspPostInit(&htim2);
 8001b1a:	484c      	ldr	r0, [pc, #304]	; (8001c4c <main+0x330>)
 8001b1c:	f000 fd92 	bl	8002644 <HAL_TIM_MspPostInit>
	BuzzerSetVolume(0);
 8001b20:	2000      	movs	r0, #0
 8001b22:	f7ff fa1b 	bl	8000f5c <_Z15BuzzerSetVolumet>
	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 8001b26:	2100      	movs	r1, #0
 8001b28:	4848      	ldr	r0, [pc, #288]	; (8001c4c <main+0x330>)
 8001b2a:	f002 fad5 	bl	80040d8 <HAL_TIM_OC_Start>
	HAL_Delay(50);
 8001b2e:	2032      	movs	r0, #50	; 0x32
 8001b30:	f000 ff04 	bl	800293c <HAL_Delay>
	ssd1306_Init();
 8001b34:	f000 fbe4 	bl	8002300 <_Z12ssd1306_Initv>
	HAL_Delay(50);
 8001b38:	2032      	movs	r0, #50	; 0x32
 8001b3a:	f000 feff 	bl	800293c <HAL_Delay>
	ssd1306_Fill(Black);
 8001b3e:	2000      	movs	r0, #0
 8001b40:	f000 fbaa 	bl	8002298 <_Z12ssd1306_Fill13SSD1306_COLOR>
	HAL_Delay(50);
 8001b44:	2032      	movs	r0, #50	; 0x32
 8001b46:	f000 fef9 	bl	800293c <HAL_Delay>
	ssd1306_UpdateScreen();
 8001b4a:	f000 fbb3 	bl	80022b4 <_Z20ssd1306_UpdateScreenv>
	HAL_Delay(50);
 8001b4e:	2032      	movs	r0, #50	; 0x32
 8001b50:	f000 fef4 	bl	800293c <HAL_Delay>
	TM_MPU9250_Result_t res =  MPU9250_Init(&hi2c1,&accelStruct,TM_MPU9250_Device_0);
 8001b54:	2200      	movs	r2, #0
 8001b56:	493e      	ldr	r1, [pc, #248]	; (8001c50 <main+0x334>)
 8001b58:	4839      	ldr	r0, [pc, #228]	; (8001c40 <main+0x324>)
 8001b5a:	f7ff fa77 	bl	800104c <MPU9250_Init>
	USART1->CR1 |= USART_CR1_RXNEIE; /*//прерывание по приему данных*/
 8001b5e:	4a34      	ldr	r2, [pc, #208]	; (8001c30 <main+0x314>)
	HAL_UART_Receive_IT (&huart1, receiveBuffer, (uint8_t) 1);
 8001b60:	4934      	ldr	r1, [pc, #208]	; (8001c34 <main+0x318>)
	USART1->CR1 |= USART_CR1_RXNEIE; /*//прерывание по приему данных*/
 8001b62:	68d3      	ldr	r3, [r2, #12]
	HAL_UART_Receive_IT (&huart1, receiveBuffer, (uint8_t) 1);
 8001b64:	4831      	ldr	r0, [pc, #196]	; (8001c2c <main+0x310>)
	USART1->CR1 |= USART_CR1_RXNEIE; /*//прерывание по приему данных*/
 8001b66:	f043 0320 	orr.w	r3, r3, #32
 8001b6a:	60d3      	str	r3, [r2, #12]
	HAL_UART_Receive_IT (&huart1, receiveBuffer, (uint8_t) 1);
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f002 fbe4 	bl	800433a <HAL_UART_Receive_IT>
	osKernelInitialize();
 8001b72:	f002 fcef 	bl	8004554 <osKernelInitialize>
	I2C_BinarySemHandle = osSemaphoreNew(1, 1, &I2C_BinarySem_attributes);
 8001b76:	2101      	movs	r1, #1
 8001b78:	4a36      	ldr	r2, [pc, #216]	; (8001c54 <main+0x338>)
 8001b7a:	4608      	mov	r0, r1
 8001b7c:	f002 fd9e 	bl	80046bc <osSemaphoreNew>
	accelStructBinarySemHandle = osSemaphoreNew(1,1, &accelStructBinarySem_attributes);
 8001b80:	2101      	movs	r1, #1
	I2C_BinarySemHandle = osSemaphoreNew(1, 1, &I2C_BinarySem_attributes);
 8001b82:	4b35      	ldr	r3, [pc, #212]	; (8001c58 <main+0x33c>)
	accelStructBinarySemHandle = osSemaphoreNew(1,1, &accelStructBinarySem_attributes);
 8001b84:	4a35      	ldr	r2, [pc, #212]	; (8001c5c <main+0x340>)
	I2C_BinarySemHandle = osSemaphoreNew(1, 1, &I2C_BinarySem_attributes);
 8001b86:	6018      	str	r0, [r3, #0]
	accelStructBinarySemHandle = osSemaphoreNew(1,1, &accelStructBinarySem_attributes);
 8001b88:	4608      	mov	r0, r1
 8001b8a:	f002 fd97 	bl	80046bc <osSemaphoreNew>
	debugUARTBinarySemHandle = osSemaphoreNew(1,1, &debugUARTBinarySem_attributes);
 8001b8e:	2101      	movs	r1, #1
	accelStructBinarySemHandle = osSemaphoreNew(1,1, &accelStructBinarySem_attributes);
 8001b90:	4b33      	ldr	r3, [pc, #204]	; (8001c60 <main+0x344>)
	debugUARTBinarySemHandle = osSemaphoreNew(1,1, &debugUARTBinarySem_attributes);
 8001b92:	4a34      	ldr	r2, [pc, #208]	; (8001c64 <main+0x348>)
	accelStructBinarySemHandle = osSemaphoreNew(1,1, &accelStructBinarySem_attributes);
 8001b94:	6018      	str	r0, [r3, #0]
	debugUARTBinarySemHandle = osSemaphoreNew(1,1, &debugUARTBinarySem_attributes);
 8001b96:	4608      	mov	r0, r1
 8001b98:	f002 fd90 	bl	80046bc <osSemaphoreNew>
 8001b9c:	4b32      	ldr	r3, [pc, #200]	; (8001c68 <main+0x34c>)
		const osMessageQueueAttr_t attributes = {
 8001b9e:	2400      	movs	r4, #0
 8001ba0:	6018      	str	r0, [r3, #0]
 8001ba2:	230c      	movs	r3, #12
 8001ba4:	2550      	movs	r5, #80	; 0x50
				name : NameQ,
 8001ba6:	4e31      	ldr	r6, [pc, #196]	; (8001c6c <main+0x350>)
		const osMessageQueueAttr_t attributes = {
 8001ba8:	930c      	str	r3, [sp, #48]	; 0x30
 8001baa:	6e33      	ldr	r3, [r6, #96]	; 0x60
		xHandle=osMessageQueueNew (size, sizeof(T), &attributes);
 8001bac:	aa07      	add	r2, sp, #28
		const osMessageQueueAttr_t attributes = {
 8001bae:	9307      	str	r3, [sp, #28]
 8001bb0:	f106 0310 	add.w	r3, r6, #16
 8001bb4:	9309      	str	r3, [sp, #36]	; 0x24
		xHandle=osMessageQueueNew (size, sizeof(T), &attributes);
 8001bb6:	2106      	movs	r1, #6
		const osMessageQueueAttr_t attributes = {
 8001bb8:	1d33      	adds	r3, r6, #4
		xHandle=osMessageQueueNew (size, sizeof(T), &attributes);
 8001bba:	2002      	movs	r0, #2
		const osMessageQueueAttr_t attributes = {
 8001bbc:	950a      	str	r5, [sp, #40]	; 0x28
 8001bbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8001bc0:	9408      	str	r4, [sp, #32]
		xHandle=osMessageQueueNew (size, sizeof(T), &attributes);
 8001bc2:	f002 fe4b 	bl	800485c <osMessageQueueNew>
		const osMessageQueueAttr_t attributes = {
 8001bc6:	2720      	movs	r7, #32
		xHandle=osMessageQueueNew (size, sizeof(T), &attributes);
 8001bc8:	6030      	str	r0, [r6, #0]
				name : NameQ,
 8001bca:	4e29      	ldr	r6, [pc, #164]	; (8001c70 <main+0x354>)
		xHandle=osMessageQueueNew (size, sizeof(T), &attributes);
 8001bcc:	aa07      	add	r2, sp, #28
		const osMessageQueueAttr_t attributes = {
 8001bce:	6f73      	ldr	r3, [r6, #116]	; 0x74
		xHandle=osMessageQueueNew (size, sizeof(T), &attributes);
 8001bd0:	2102      	movs	r1, #2
		const osMessageQueueAttr_t attributes = {
 8001bd2:	9307      	str	r3, [sp, #28]
 8001bd4:	f106 0324 	add.w	r3, r6, #36	; 0x24
 8001bd8:	9309      	str	r3, [sp, #36]	; 0x24
		xHandle=osMessageQueueNew (size, sizeof(T), &attributes);
 8001bda:	2010      	movs	r0, #16
		const osMessageQueueAttr_t attributes = {
 8001bdc:	1d33      	adds	r3, r6, #4
 8001bde:	950a      	str	r5, [sp, #40]	; 0x28
 8001be0:	930b      	str	r3, [sp, #44]	; 0x2c
 8001be2:	9408      	str	r4, [sp, #32]
 8001be4:	970c      	str	r7, [sp, #48]	; 0x30
		xHandle=osMessageQueueNew (size, sizeof(T), &attributes);
 8001be6:	f002 fe39 	bl	800485c <osMessageQueueNew>
		const osMessageQueueAttr_t attributes = {
 8001bea:	2102      	movs	r1, #2
		xHandle=osMessageQueueNew (size, sizeof(T), &attributes);
 8001bec:	6030      	str	r0, [r6, #0]
				name : NameQ,
 8001bee:	4e21      	ldr	r6, [pc, #132]	; (8001c74 <main+0x358>)
		xHandle=osMessageQueueNew (size, sizeof(T), &attributes);
 8001bf0:	aa07      	add	r2, sp, #28
		const osMessageQueueAttr_t attributes = {
 8001bf2:	6db3      	ldr	r3, [r6, #88]	; 0x58
		xHandle=osMessageQueueNew (size, sizeof(T), &attributes);
 8001bf4:	2001      	movs	r0, #1
		const osMessageQueueAttr_t attributes = {
 8001bf6:	9307      	str	r3, [sp, #28]
 8001bf8:	f106 0308 	add.w	r3, r6, #8
 8001bfc:	9309      	str	r3, [sp, #36]	; 0x24
 8001bfe:	1d33      	adds	r3, r6, #4
 8001c00:	950a      	str	r5, [sp, #40]	; 0x28
 8001c02:	910c      	str	r1, [sp, #48]	; 0x30
 8001c04:	930b      	str	r3, [sp, #44]	; 0x2c
 8001c06:	9408      	str	r4, [sp, #32]
		xHandle=osMessageQueueNew (size, sizeof(T), &attributes);
 8001c08:	f002 fe28 	bl	800485c <osMessageQueueNew>
 8001c0c:	6030      	str	r0, [r6, #0]
		const osMessageQueueAttr_t attributes = {
 8001c0e:	2040      	movs	r0, #64	; 0x40
 8001c10:	950a      	str	r5, [sp, #40]	; 0x28
				name : NameQ,
 8001c12:	4d19      	ldr	r5, [pc, #100]	; (8001c78 <main+0x35c>)
		xHandle=osMessageQueueNew (size, sizeof(T), &attributes);
 8001c14:	aa07      	add	r2, sp, #28
 8001c16:	e031      	b.n	8001c7c <main+0x360>
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40010800 	.word	0x40010800
 8001c20:	40010c00 	.word	0x40010c00
 8001c24:	20001074 	.word	0x20001074
 8001c28:	40003800 	.word	0x40003800
 8001c2c:	2000110c 	.word	0x2000110c
 8001c30:	40013800 	.word	0x40013800
 8001c34:	20001458 	.word	0x20001458
 8001c38:	2000114c 	.word	0x2000114c
 8001c3c:	40004800 	.word	0x40004800
 8001c40:	20001020 	.word	0x20001020
 8001c44:	40005400 	.word	0x40005400
 8001c48:	00061a80 	.word	0x00061a80
 8001c4c:	200010cc 	.word	0x200010cc
 8001c50:	200002b4 	.word	0x200002b4
 8001c54:	08009e3c 	.word	0x08009e3c
 8001c58:	200002b0 	.word	0x200002b0
 8001c5c:	08009e5c 	.word	0x08009e5c
 8001c60:	200002fc 	.word	0x200002fc
 8001c64:	08009e4c 	.word	0x08009e4c
 8001c68:	20000644 	.word	0x20000644
 8001c6c:	20000470 	.word	0x20000470
 8001c70:	200007b8 	.word	0x200007b8
 8001c74:	2000118c 	.word	0x2000118c
 8001c78:	20000218 	.word	0x20000218
		const osMessageQueueAttr_t attributes = {
 8001c7c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
		xHandle=osMessageQueueNew (size, sizeof(T), &attributes);
 8001c80:	2101      	movs	r1, #1
		const osMessageQueueAttr_t attributes = {
 8001c82:	9307      	str	r3, [sp, #28]
 8001c84:	f105 0344 	add.w	r3, r5, #68	; 0x44
 8001c88:	9309      	str	r3, [sp, #36]	; 0x24
 8001c8a:	1d2b      	adds	r3, r5, #4
 8001c8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8001c8e:	9408      	str	r4, [sp, #32]
 8001c90:	900c      	str	r0, [sp, #48]	; 0x30
		xHandle=osMessageQueueNew (size, sizeof(T), &attributes);
 8001c92:	f002 fde3 	bl	800485c <osMessageQueueNew>
	defaultTask.start(StartDefaultTask);
 8001c96:	4928      	ldr	r1, [pc, #160]	; (8001d38 <main+0x41c>)
 8001c98:	6028      	str	r0, [r5, #0]
 8001c9a:	4828      	ldr	r0, [pc, #160]	; (8001d3c <main+0x420>)
 8001c9c:	f7ff fdfb 	bl	8001896 <_ZN6osTaskILj64EE5startEPFvPvE>
	buzzerTask.start(StartBuzzerTask);//Handle = osThreadNew(StartBuzzerTask, NULL, &buzzerTask_attributes);
 8001ca0:	4927      	ldr	r1, [pc, #156]	; (8001d40 <main+0x424>)
 8001ca2:	4828      	ldr	r0, [pc, #160]	; (8001d44 <main+0x428>)
 8001ca4:	f7ff fdf7 	bl	8001896 <_ZN6osTaskILj64EE5startEPFvPvE>
		const osThreadAttr_t Task_attributes = {
 8001ca8:	463a      	mov	r2, r7
 8001caa:	4621      	mov	r1, r4
 8001cac:	eb0d 0007 	add.w	r0, sp, r7
 8001cb0:	f004 fdb1 	bl	8006816 <memset>
 8001cb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cb8:	2664      	movs	r6, #100	; 0x64
				name:NameQ,
 8001cba:	4d23      	ldr	r5, [pc, #140]	; (8001d48 <main+0x42c>)
		const osThreadAttr_t Task_attributes = {
 8001cbc:	930c      	str	r3, [sp, #48]	; 0x30
 8001cbe:	f8d5 326c 	ldr.w	r3, [r5, #620]	; 0x26c
		TaskHandle = osThreadNew(func, NULL, &Task_attributes);
 8001cc2:	aa07      	add	r2, sp, #28
		const osThreadAttr_t Task_attributes = {
 8001cc4:	9307      	str	r3, [sp, #28]
 8001cc6:	f505 7301 	add.w	r3, r5, #516	; 0x204
 8001cca:	9309      	str	r3, [sp, #36]	; 0x24
 8001ccc:	1d2b      	adds	r3, r5, #4
 8001cce:	930b      	str	r3, [sp, #44]	; 0x2c
 8001cd0:	f8d5 3268 	ldr.w	r3, [r5, #616]	; 0x268
		TaskHandle = osThreadNew(func, NULL, &Task_attributes);
 8001cd4:	4621      	mov	r1, r4
 8001cd6:	481d      	ldr	r0, [pc, #116]	; (8001d4c <main+0x430>)
		const osThreadAttr_t Task_attributes = {
 8001cd8:	930d      	str	r3, [sp, #52]	; 0x34
 8001cda:	960a      	str	r6, [sp, #40]	; 0x28
		TaskHandle = osThreadNew(func, NULL, &Task_attributes);
 8001cdc:	f002 fc76 	bl	80045cc <osThreadNew>
		const osThreadAttr_t Task_attributes = {
 8001ce0:	463a      	mov	r2, r7
		TaskHandle = osThreadNew(func, NULL, &Task_attributes);
 8001ce2:	6028      	str	r0, [r5, #0]
		const osThreadAttr_t Task_attributes = {
 8001ce4:	4621      	mov	r1, r4
 8001ce6:	eb0d 0007 	add.w	r0, sp, r7
 8001cea:	f004 fd94 	bl	8006816 <memset>
 8001cee:	f44f 7344 	mov.w	r3, #784	; 0x310
				name:NameQ,
 8001cf2:	4d17      	ldr	r5, [pc, #92]	; (8001d50 <main+0x434>)
		const osThreadAttr_t Task_attributes = {
 8001cf4:	930c      	str	r3, [sp, #48]	; 0x30
 8001cf6:	f8d5 337c 	ldr.w	r3, [r5, #892]	; 0x37c
		TaskHandle = osThreadNew(func, NULL, &Task_attributes);
 8001cfa:	aa07      	add	r2, sp, #28
		const osThreadAttr_t Task_attributes = {
 8001cfc:	9307      	str	r3, [sp, #28]
 8001cfe:	f505 7345 	add.w	r3, r5, #788	; 0x314
 8001d02:	9309      	str	r3, [sp, #36]	; 0x24
 8001d04:	1d2b      	adds	r3, r5, #4
 8001d06:	930b      	str	r3, [sp, #44]	; 0x2c
 8001d08:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
		TaskHandle = osThreadNew(func, NULL, &Task_attributes);
 8001d0c:	4621      	mov	r1, r4
 8001d0e:	4811      	ldr	r0, [pc, #68]	; (8001d54 <main+0x438>)
		const osThreadAttr_t Task_attributes = {
 8001d10:	930d      	str	r3, [sp, #52]	; 0x34
 8001d12:	960a      	str	r6, [sp, #40]	; 0x28
		TaskHandle = osThreadNew(func, NULL, &Task_attributes);
 8001d14:	f002 fc5a 	bl	80045cc <osThreadNew>
	accelTask.start(StartAccelTask);//Handle = osThreadNew(StartAccelTask, NULL, &accelTask_attributes);
 8001d18:	490f      	ldr	r1, [pc, #60]	; (8001d58 <main+0x43c>)
 8001d1a:	6028      	str	r0, [r5, #0]
 8001d1c:	480f      	ldr	r0, [pc, #60]	; (8001d5c <main+0x440>)
 8001d1e:	f7ff fdba 	bl	8001896 <_ZN6osTaskILj64EE5startEPFvPvE>
	gpsNMEA_ParserT.start(StartgpsNMEA_ParserTask);//Handle.s = osThreadNew(StartgpsNMEA_ParserTask, NULL, &gpsNMEA_ParserT_attributes);
 8001d22:	490f      	ldr	r1, [pc, #60]	; (8001d60 <main+0x444>)
 8001d24:	480f      	ldr	r0, [pc, #60]	; (8001d64 <main+0x448>)
 8001d26:	f7ff fdd7 	bl	80018d8 <_ZN6osTaskILj256EE5startEPFvPvE>
	sdCardTask.start(StartSDcardTask);
 8001d2a:	490f      	ldr	r1, [pc, #60]	; (8001d68 <main+0x44c>)
 8001d2c:	480f      	ldr	r0, [pc, #60]	; (8001d6c <main+0x450>)
 8001d2e:	f7ff fdd3 	bl	80018d8 <_ZN6osTaskILj256EE5startEPFvPvE>
	osKernelStart();
 8001d32:	f002 fc2b 	bl	800458c <osKernelStart>
 8001d36:	e7fe      	b.n	8001d36 <main+0x41a>
 8001d38:	08001765 	.word	0x08001765
 8001d3c:	20000648 	.word	0x20000648
 8001d40:	08001729 	.word	0x08001729
 8001d44:	200004d4 	.word	0x200004d4
 8001d48:	200011e8 	.word	0x200011e8
 8001d4c:	080015ad 	.word	0x080015ad
 8001d50:	20000830 	.word	0x20000830
 8001d54:	08001315 	.word	0x08001315
 8001d58:	08001519 	.word	0x08001519
 8001d5c:	20000300 	.word	0x20000300
 8001d60:	08001565 	.word	0x08001565
 8001d64:	20000bb0 	.word	0x20000bb0
 8001d68:	0800130b 	.word	0x0800130b
 8001d6c:	20001478 	.word	0x20001478

08001d70 <_GLOBAL__sub_I_hi2c1>:
	osTask(const char *name,osPriority_t osPriority=osPriorityNormal ):NameQ(name)
 8001d70:	4a1c      	ldr	r2, [pc, #112]	; (8001de4 <_GLOBAL__sub_I_hi2c1+0x74>)
 8001d72:	4b1d      	ldr	r3, [pc, #116]	; (8001de8 <_GLOBAL__sub_I_hi2c1+0x78>)
 8001d74:	491d      	ldr	r1, [pc, #116]	; (8001dec <_GLOBAL__sub_I_hi2c1+0x7c>)
 8001d76:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
		priority=osPriority;
 8001d7a:	2318      	movs	r3, #24
 8001d7c:	f8c2 3168 	str.w	r3, [r2, #360]	; 0x168
	osTask(const char *name,osPriority_t osPriority=osPriorityNormal ):NameQ(name)
 8001d80:	4a1b      	ldr	r2, [pc, #108]	; (8001df0 <_GLOBAL__sub_I_hi2c1+0x80>)
 8001d82:	f8c2 116c 	str.w	r1, [r2, #364]	; 0x16c
		priority=osPriority;
 8001d86:	f8c2 3168 	str.w	r3, [r2, #360]	; 0x168
	osTask(const char *name,osPriority_t osPriority=osPriorityNormal ):NameQ(name)
 8001d8a:	491a      	ldr	r1, [pc, #104]	; (8001df4 <_GLOBAL__sub_I_hi2c1+0x84>)
 8001d8c:	4a1a      	ldr	r2, [pc, #104]	; (8001df8 <_GLOBAL__sub_I_hi2c1+0x88>)
 8001d8e:	f8c2 126c 	str.w	r1, [r2, #620]	; 0x26c
		priority=osPriority;
 8001d92:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
	osTask(const char *name,osPriority_t osPriority=osPriorityNormal ):NameQ(name)
 8001d96:	4919      	ldr	r1, [pc, #100]	; (8001dfc <_GLOBAL__sub_I_hi2c1+0x8c>)
 8001d98:	4a19      	ldr	r2, [pc, #100]	; (8001e00 <_GLOBAL__sub_I_hi2c1+0x90>)
 8001d9a:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
		priority=osPriority;
 8001d9e:	f8c2 3378 	str.w	r3, [r2, #888]	; 0x378
	osTask(const char *name,osPriority_t osPriority=osPriorityNormal ):NameQ(name)
 8001da2:	4918      	ldr	r1, [pc, #96]	; (8001e04 <_GLOBAL__sub_I_hi2c1+0x94>)
 8001da4:	4a18      	ldr	r2, [pc, #96]	; (8001e08 <_GLOBAL__sub_I_hi2c1+0x98>)
 8001da6:	f8c2 116c 	str.w	r1, [r2, #364]	; 0x16c
		priority=osPriority;
 8001daa:	f8c2 3168 	str.w	r3, [r2, #360]	; 0x168
	osTask(const char *name,osPriority_t osPriority=osPriorityNormal ):NameQ(name)
 8001dae:	4917      	ldr	r1, [pc, #92]	; (8001e0c <_GLOBAL__sub_I_hi2c1+0x9c>)
 8001db0:	4a17      	ldr	r2, [pc, #92]	; (8001e10 <_GLOBAL__sub_I_hi2c1+0xa0>)
		priority=osPriority;
 8001db2:	f8c2 3468 	str.w	r3, [r2, #1128]	; 0x468
	osTask(const char *name,osPriority_t osPriority=osPriorityNormal ):NameQ(name)
 8001db6:	f8c2 146c 	str.w	r1, [r2, #1132]	; 0x46c
 8001dba:	4b16      	ldr	r3, [pc, #88]	; (8001e14 <_GLOBAL__sub_I_hi2c1+0xa4>)
 8001dbc:	4a16      	ldr	r2, [pc, #88]	; (8001e18 <_GLOBAL__sub_I_hi2c1+0xa8>)
 8001dbe:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
		priority=osPriority;
 8001dc2:	2223      	movs	r2, #35	; 0x23
 8001dc4:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
	osQueue(const char *name):NameQ(name)
 8001dc8:	4b14      	ldr	r3, [pc, #80]	; (8001e1c <_GLOBAL__sub_I_hi2c1+0xac>)
 8001dca:	4a15      	ldr	r2, [pc, #84]	; (8001e20 <_GLOBAL__sub_I_hi2c1+0xb0>)
 8001dcc:	661a      	str	r2, [r3, #96]	; 0x60
 8001dce:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <_GLOBAL__sub_I_hi2c1+0xb4>)
 8001dd0:	4a15      	ldr	r2, [pc, #84]	; (8001e28 <_GLOBAL__sub_I_hi2c1+0xb8>)
 8001dd2:	675a      	str	r2, [r3, #116]	; 0x74
 8001dd4:	4b15      	ldr	r3, [pc, #84]	; (8001e2c <_GLOBAL__sub_I_hi2c1+0xbc>)
 8001dd6:	4a16      	ldr	r2, [pc, #88]	; (8001e30 <_GLOBAL__sub_I_hi2c1+0xc0>)
 8001dd8:	659a      	str	r2, [r3, #88]	; 0x58
 8001dda:	4b16      	ldr	r3, [pc, #88]	; (8001e34 <_GLOBAL__sub_I_hi2c1+0xc4>)
 8001ddc:	4a16      	ldr	r2, [pc, #88]	; (8001e38 <_GLOBAL__sub_I_hi2c1+0xc8>)
 8001dde:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

}
 8001de2:	4770      	bx	lr
 8001de4:	20000648 	.word	0x20000648
 8001de8:	08009d77 	.word	0x08009d77
 8001dec:	08009d83 	.word	0x08009d83
 8001df0:	200004d4 	.word	0x200004d4
 8001df4:	08009d8e 	.word	0x08009d8e
 8001df8:	200011e8 	.word	0x200011e8
 8001dfc:	08009d9b 	.word	0x08009d9b
 8001e00:	20000830 	.word	0x20000830
 8001e04:	08009da7 	.word	0x08009da7
 8001e08:	20000300 	.word	0x20000300
 8001e0c:	08009db1 	.word	0x08009db1
 8001e10:	20000bb0 	.word	0x20000bb0
 8001e14:	20001478 	.word	0x20001478
 8001e18:	08009dc1 	.word	0x08009dc1
 8001e1c:	20000470 	.word	0x20000470
 8001e20:	08009dcc 	.word	0x08009dcc
 8001e24:	200007b8 	.word	0x200007b8
 8001e28:	08009dd8 	.word	0x08009dd8
 8001e2c:	2000118c 	.word	0x2000118c
 8001e30:	08009de5 	.word	0x08009de5
 8001e34:	20000218 	.word	0x20000218
 8001e38:	08009df3 	.word	0x08009df3

08001e3c <_ZN9NMEA_UART6ParserD1Ev>:
    GPS_COUNT = 0;

}

Parser::~Parser() {
}
 8001e3c:	4770      	bx	lr

08001e3e <_ZN9NMEA_UART6ParserD0Ev>:
Parser::~Parser() {
 8001e3e:	b510      	push	{r4, lr}
 8001e40:	4604      	mov	r4, r0
}
 8001e42:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001e46:	f004 fc9d 	bl	8006784 <_ZdlPvj>
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	bd10      	pop	{r4, pc}
	...

08001e50 <_ZN9NMEA_UART6ParserC1Ev>:
    GSV { UNUSED, UNUSED, ViewSatellite, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED}
 8001e50:	4601      	mov	r1, r0
 8001e52:	4a65      	ldr	r2, [pc, #404]	; (8001fe8 <_ZN9NMEA_UART6ParserC1Ev+0x198>)
Parser::Parser() :
 8001e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    GSV { UNUSED, UNUSED, ViewSatellite, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED}
 8001e58:	f841 2b04 	str.w	r2, [r1], #4
 8001e5c:	f100 020e 	add.w	r2, r0, #14
 8001e60:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
 8001e64:	f100 0235 	add.w	r2, r0, #53	; 0x35
 8001e68:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
 8001e6c:	f8c0 20e0 	str.w	r2, [r0, #224]	; 0xe0
 8001e70:	f8c0 1120 	str.w	r1, [r0, #288]	; 0x120
 8001e74:	f100 023e 	add.w	r2, r0, #62	; 0x3e
 8001e78:	f100 0163 	add.w	r1, r0, #99	; 0x63
 8001e7c:	f100 042a 	add.w	r4, r0, #42	; 0x2a
 8001e80:	f100 0e2c 	add.w	lr, r0, #44	; 0x2c
 8001e84:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
 8001e88:	f100 0848 	add.w	r8, r0, #72	; 0x48
 8001e8c:	f100 02a0 	add.w	r2, r0, #160	; 0xa0
 8001e90:	f8c0 1134 	str.w	r1, [r0, #308]	; 0x134
 8001e94:	f100 0165 	add.w	r1, r0, #101	; 0x65
 8001e98:	e9c0 823e 	strd	r8, r2, [r0, #248]	; 0xf8
 8001e9c:	f100 0710 	add.w	r7, r0, #16
 8001ea0:	f100 061c 	add.w	r6, r0, #28
 8001ea4:	f100 051e 	add.w	r5, r0, #30
 8001ea8:	f8c0 40d8 	str.w	r4, [r0, #216]	; 0xd8
 8001eac:	f8c0 e0dc 	str.w	lr, [r0, #220]	; 0xdc
 8001eb0:	f100 0c46 	add.w	ip, r0, #70	; 0x46
 8001eb4:	f8c0 e108 	str.w	lr, [r0, #264]	; 0x108
 8001eb8:	f8c0 4130 	str.w	r4, [r0, #304]	; 0x130
 8001ebc:	f8c0 1138 	str.w	r1, [r0, #312]	; 0x138
 8001ec0:	f100 0468 	add.w	r4, r0, #104	; 0x68
 8001ec4:	f100 018c 	add.w	r1, r0, #140	; 0x8c
 8001ec8:	f100 0851 	add.w	r8, r0, #81	; 0x51
 8001ecc:	f100 0e5a 	add.w	lr, r0, #90	; 0x5a
 8001ed0:	e9c0 223a 	strd	r2, r2, [r0, #232]	; 0xe8
 8001ed4:	e9c0 c23c 	strd	ip, r2, [r0, #240]	; 0xf0
 8001ed8:	f8c0 2104 	str.w	r2, [r0, #260]	; 0x104
 8001edc:	f8c0 210c 	str.w	r2, [r0, #268]	; 0x10c
 8001ee0:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
 8001ee4:	f8c0 211c 	str.w	r2, [r0, #284]	; 0x11c
 8001ee8:	f8c0 70cc 	str.w	r7, [r0, #204]	; 0xcc
 8001eec:	f8c0 60d0 	str.w	r6, [r0, #208]	; 0xd0
 8001ef0:	f8c0 50d4 	str.w	r5, [r0, #212]	; 0xd4
 8001ef4:	f8c0 8100 	str.w	r8, [r0, #256]	; 0x100
 8001ef8:	f8c0 e110 	str.w	lr, [r0, #272]	; 0x110
 8001efc:	f8c0 c118 	str.w	ip, [r0, #280]	; 0x118
 8001f00:	f8c0 7124 	str.w	r7, [r0, #292]	; 0x124
 8001f04:	f8c0 6128 	str.w	r6, [r0, #296]	; 0x128
 8001f08:	f8c0 512c 	str.w	r5, [r0, #300]	; 0x12c
 8001f0c:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
 8001f10:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
 8001f14:	f100 0474 	add.w	r4, r0, #116	; 0x74
 8001f18:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
 8001f1c:	f100 0480 	add.w	r4, r0, #128	; 0x80
 8001f20:	f8c0 415c 	str.w	r4, [r0, #348]	; 0x15c
 8001f24:	f8c0 1198 	str.w	r1, [r0, #408]	; 0x198
 8001f28:	f100 0482 	add.w	r4, r0, #130	; 0x82
 8001f2c:	f100 0194 	add.w	r1, r0, #148	; 0x94
 8001f30:	f8c0 4160 	str.w	r4, [r0, #352]	; 0x160
 8001f34:	f8c0 119c 	str.w	r1, [r0, #412]	; 0x19c
 8001f38:	f100 0484 	add.w	r4, r0, #132	; 0x84
 8001f3c:	f100 019c 	add.w	r1, r0, #156	; 0x9c
 8001f40:	f8c0 2144 	str.w	r2, [r0, #324]	; 0x144
 8001f44:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
 8001f48:	f8c0 2150 	str.w	r2, [r0, #336]	; 0x150
 8001f4c:	f8c0 2154 	str.w	r2, [r0, #340]	; 0x154
 8001f50:	f8c0 2158 	str.w	r2, [r0, #344]	; 0x158
 8001f54:	f8c0 2164 	str.w	r2, [r0, #356]	; 0x164
 8001f58:	f8c0 2168 	str.w	r2, [r0, #360]	; 0x168
 8001f5c:	f8c0 216c 	str.w	r2, [r0, #364]	; 0x16c
 8001f60:	f8c0 2170 	str.w	r2, [r0, #368]	; 0x170
 8001f64:	f8c0 2174 	str.w	r2, [r0, #372]	; 0x174
 8001f68:	f8c0 2178 	str.w	r2, [r0, #376]	; 0x178
 8001f6c:	f8c0 217c 	str.w	r2, [r0, #380]	; 0x17c
 8001f70:	f8c0 2180 	str.w	r2, [r0, #384]	; 0x180
 8001f74:	f8c0 2184 	str.w	r2, [r0, #388]	; 0x184
 8001f78:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 8001f7c:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 8001f80:	f8c0 2190 	str.w	r2, [r0, #400]	; 0x190
 8001f84:	f8c0 21a0 	str.w	r2, [r0, #416]	; 0x1a0
 8001f88:	f8c0 21a4 	str.w	r2, [r0, #420]	; 0x1a4
 8001f8c:	f8c0 21a8 	str.w	r2, [r0, #424]	; 0x1a8
 8001f90:	f8c0 21b0 	str.w	r2, [r0, #432]	; 0x1b0
 8001f94:	f8c0 21b4 	str.w	r2, [r0, #436]	; 0x1b4
 8001f98:	f8c0 21b8 	str.w	r2, [r0, #440]	; 0x1b8
 8001f9c:	f8c0 21bc 	str.w	r2, [r0, #444]	; 0x1bc
 8001fa0:	f8c0 4194 	str.w	r4, [r0, #404]	; 0x194
 8001fa4:	f8c0 11ac 	str.w	r1, [r0, #428]	; 0x1ac
 8001fa8:	f8c0 21c0 	str.w	r2, [r0, #448]	; 0x1c0
 8001fac:	f8c0 21c4 	str.w	r2, [r0, #452]	; 0x1c4
 8001fb0:	f8c0 21c8 	str.w	r2, [r0, #456]	; 0x1c8
 8001fb4:	f8c0 21cc 	str.w	r2, [r0, #460]	; 0x1cc
 8001fb8:	f8c0 21d0 	str.w	r2, [r0, #464]	; 0x1d0
 8001fbc:	f8c0 21d4 	str.w	r2, [r0, #468]	; 0x1d4
 8001fc0:	f8c0 21d8 	str.w	r2, [r0, #472]	; 0x1d8
 8001fc4:	f8c0 21dc 	str.w	r2, [r0, #476]	; 0x1dc
 8001fc8:	f8c0 21e0 	str.w	r2, [r0, #480]	; 0x1e0
 8001fcc:	f8c0 21e4 	str.w	r2, [r0, #484]	; 0x1e4
 8001fd0:	f8c0 21e8 	str.w	r2, [r0, #488]	; 0x1e8
 8001fd4:	f8c0 21ec 	str.w	r2, [r0, #492]	; 0x1ec
 8001fd8:	f8c0 21f0 	str.w	r2, [r0, #496]	; 0x1f0
    GLONAS_COUNT = 0;
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f8a0 20c0 	strh.w	r2, [r0, #192]	; 0xc0
}
 8001fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fe6:	bf00      	nop
 8001fe8:	08009eac 	.word	0x08009eac

08001fec <_ZN9NMEA_UART10asciiToIntEPc>:
    resultDecCoor = dd + ((float) mm / 60) + ((float) ss / 60);
    return (resultDecCoor);
}

/*//Конвертация String в Int, строка без точки, "154" -> 154*/
int asciiToInt(char* s) {
 8001fec:	1e42      	subs	r2, r0, #1
    int n = 0;
    while (*s >= '0' && *s <= '9') {
        n *= 10;
 8001fee:	210a      	movs	r1, #10
    int n = 0;
 8001ff0:	2000      	movs	r0, #0
int asciiToInt(char* s) {
 8001ff2:	b510      	push	{r4, lr}
    while (*s >= '0' && *s <= '9') {
 8001ff4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8001ff8:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 8001ffc:	2c09      	cmp	r4, #9
 8001ffe:	d803      	bhi.n	8002008 <_ZN9NMEA_UART10asciiToIntEPc+0x1c>
        n += *s++;
 8002000:	fb01 3000 	mla	r0, r1, r0, r3
        n -= '0';
 8002004:	3830      	subs	r0, #48	; 0x30
    while (*s >= '0' && *s <= '9') {
 8002006:	e7f5      	b.n	8001ff4 <_ZN9NMEA_UART10asciiToIntEPc+0x8>
    }
    return (n);
}
 8002008:	bd10      	pop	{r4, pc}
	...

0800200c <_ZN9NMEA_UART6Parser10charParserEh>:
    if (data == '$') {
 800200c:	2924      	cmp	r1, #36	; 0x24
GPS_MESSEGE_TYPE Parser::charParser(unsigned char data) {
 800200e:	b570      	push	{r4, r5, r6, lr}
 8002010:	4604      	mov	r4, r0
 8002012:	4e8e      	ldr	r6, [pc, #568]	; (800224c <_ZN9NMEA_UART6Parser10charParserEh+0x240>)
    if (data == '$') {
 8002014:	d108      	bne.n	8002028 <_ZN9NMEA_UART6Parser10charParserEh+0x1c>
        ComaPoint = 0xff;
 8002016:	22ff      	movs	r2, #255	; 0xff
        ByteCount = 0;
 8002018:	2000      	movs	r0, #0
        ComaPoint = 0xff;
 800201a:	4b8d      	ldr	r3, [pc, #564]	; (8002250 <_ZN9NMEA_UART6Parser10charParserEh+0x244>)
        ByteCount = 0;
 800201c:	7030      	strb	r0, [r6, #0]
        ComaPoint = 0xff;
 800201e:	701a      	strb	r2, [r3, #0]
        MsgTxt = (char*) &MsgType;
 8002020:	4b8c      	ldr	r3, [pc, #560]	; (8002254 <_ZN9NMEA_UART6Parser10charParserEh+0x248>)
 8002022:	4a8d      	ldr	r2, [pc, #564]	; (8002258 <_ZN9NMEA_UART6Parser10charParserEh+0x24c>)
 8002024:	601a      	str	r2, [r3, #0]
}
 8002026:	bd70      	pop	{r4, r5, r6, pc}
    if (ByteCount == 0xff)
 8002028:	7833      	ldrb	r3, [r6, #0]
 800202a:	2bff      	cmp	r3, #255	; 0xff
 800202c:	d101      	bne.n	8002032 <_ZN9NMEA_UART6Parser10charParserEh+0x26>
        return (GPS_NULL);
 800202e:	2000      	movs	r0, #0
 8002030:	e7f9      	b.n	8002026 <_ZN9NMEA_UART6Parser10charParserEh+0x1a>
    ByteCount++;
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	b2d2      	uxtb	r2, r2
    if (ByteCount <= 1)
 8002036:	2a01      	cmp	r2, #1
    ByteCount++;
 8002038:	7032      	strb	r2, [r6, #0]
    if (ByteCount <= 1)
 800203a:	d0f8      	beq.n	800202e <_ZN9NMEA_UART6Parser10charParserEh+0x22>
    if (ByteCount < 6 && ByteCount > 1) /*//берем 4 символа заголовка*/
 800203c:	3b01      	subs	r3, #1
 800203e:	2b03      	cmp	r3, #3
 8002040:	d805      	bhi.n	800204e <_ZN9NMEA_UART6Parser10charParserEh+0x42>
        *MsgTxt = data; /*//и делаем из него число*/
 8002042:	4a84      	ldr	r2, [pc, #528]	; (8002254 <_ZN9NMEA_UART6Parser10charParserEh+0x248>)
 8002044:	6813      	ldr	r3, [r2, #0]
 8002046:	f803 1b01 	strb.w	r1, [r3], #1
        MsgTxt++;
 800204a:	6013      	str	r3, [r2, #0]
 800204c:	e7ef      	b.n	800202e <_ZN9NMEA_UART6Parser10charParserEh+0x22>
    switch (MsgType) {
 800204e:	4d82      	ldr	r5, [pc, #520]	; (8002258 <_ZN9NMEA_UART6Parser10charParserEh+0x24c>)
 8002050:	4a82      	ldr	r2, [pc, #520]	; (800225c <_ZN9NMEA_UART6Parser10charParserEh+0x250>)
 8002052:	682b      	ldr	r3, [r5, #0]
 8002054:	4293      	cmp	r3, r2
 8002056:	d055      	beq.n	8002104 <_ZN9NMEA_UART6Parser10charParserEh+0xf8>
 8002058:	d826      	bhi.n	80020a8 <_ZN9NMEA_UART6Parser10charParserEh+0x9c>
 800205a:	f1a2 7201 	sub.w	r2, r2, #33816576	; 0x2040000
 800205e:	f5a2 3202 	sub.w	r2, r2, #133120	; 0x20800
 8002062:	f2a2 22fe 	subw	r2, r2, #766	; 0x2fe
 8002066:	4293      	cmp	r3, r2
 8002068:	f000 8092 	beq.w	8002190 <_ZN9NMEA_UART6Parser10charParserEh+0x184>
 800206c:	d806      	bhi.n	800207c <_ZN9NMEA_UART6Parser10charParserEh+0x70>
 800206e:	3a02      	subs	r2, #2
 8002070:	4293      	cmp	r3, r2
 8002072:	f000 808d 	beq.w	8002190 <_ZN9NMEA_UART6Parser10charParserEh+0x184>
        ByteCount = 0xff;
 8002076:	23ff      	movs	r3, #255	; 0xff
 8002078:	7033      	strb	r3, [r6, #0]
 800207a:	e7d8      	b.n	800202e <_ZN9NMEA_UART6Parser10charParserEh+0x22>
    switch (MsgType) {
 800207c:	4a78      	ldr	r2, [pc, #480]	; (8002260 <_ZN9NMEA_UART6Parser10charParserEh+0x254>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d002      	beq.n	8002088 <_ZN9NMEA_UART6Parser10charParserEh+0x7c>
 8002082:	3202      	adds	r2, #2
 8002084:	4293      	cmp	r3, r2
 8002086:	d1f6      	bne.n	8002076 <_ZN9NMEA_UART6Parser10charParserEh+0x6a>
        if (data == ',') {
 8002088:	292c      	cmp	r1, #44	; 0x2c
 800208a:	f040 80ca 	bne.w	8002222 <_ZN9NMEA_UART6Parser10charParserEh+0x216>
            CharPoint = 0;
 800208e:	2000      	movs	r0, #0
            ComaPoint++;
 8002090:	4a6f      	ldr	r2, [pc, #444]	; (8002250 <_ZN9NMEA_UART6Parser10charParserEh+0x244>)
 8002092:	7813      	ldrb	r3, [r2, #0]
 8002094:	3301      	adds	r3, #1
 8002096:	b2db      	uxtb	r3, r3
 8002098:	7013      	strb	r3, [r2, #0]
            CharPoint = 0;
 800209a:	4a72      	ldr	r2, [pc, #456]	; (8002264 <_ZN9NMEA_UART6Parser10charParserEh+0x258>)
            GSA[ComaPoint][0] = 0;
 800209c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
            CharPoint = 0;
 80020a0:	7010      	strb	r0, [r2, #0]
            GSA[ComaPoint][0] = 0;
 80020a2:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
 80020a6:	e03b      	b.n	8002120 <_ZN9NMEA_UART6Parser10charParserEh+0x114>
    switch (MsgType) {
 80020a8:	4a6f      	ldr	r2, [pc, #444]	; (8002268 <_ZN9NMEA_UART6Parser10charParserEh+0x25c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d051      	beq.n	8002152 <_ZN9NMEA_UART6Parser10charParserEh+0x146>
 80020ae:	d813      	bhi.n	80020d8 <_ZN9NMEA_UART6Parser10charParserEh+0xcc>
 80020b0:	f1a2 2204 	sub.w	r2, r2, #67109888	; 0x4000400
 80020b4:	f5a2 22e0 	sub.w	r2, r2, #458752	; 0x70000
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d023      	beq.n	8002104 <_ZN9NMEA_UART6Parser10charParserEh+0xf8>
 80020bc:	f102 6280 	add.w	r2, r2, #67108864	; 0x4000000
 80020c0:	f502 22e0 	add.w	r2, r2, #458752	; 0x70000
 80020c4:	f202 32fe 	addw	r2, r2, #1022	; 0x3fe
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d1d4      	bne.n	8002076 <_ZN9NMEA_UART6Parser10charParserEh+0x6a>
        if (data == ',') {
 80020cc:	292c      	cmp	r1, #44	; 0x2c
 80020ce:	d042      	beq.n	8002156 <_ZN9NMEA_UART6Parser10charParserEh+0x14a>
        if (data == '*') {
 80020d0:	292a      	cmp	r1, #42	; 0x2a
 80020d2:	d14e      	bne.n	8002172 <_ZN9NMEA_UART6Parser10charParserEh+0x166>
            return (GPS_NVTG);
 80020d4:	2008      	movs	r0, #8
 80020d6:	e7a6      	b.n	8002026 <_ZN9NMEA_UART6Parser10charParserEh+0x1a>
    switch (MsgType) {
 80020d8:	4a64      	ldr	r2, [pc, #400]	; (800226c <_ZN9NMEA_UART6Parser10charParserEh+0x260>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	f000 8084 	beq.w	80021e8 <_ZN9NMEA_UART6Parser10charParserEh+0x1dc>
 80020e0:	3204      	adds	r2, #4
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d1c7      	bne.n	8002076 <_ZN9NMEA_UART6Parser10charParserEh+0x6a>
        if (data == ',') {
 80020e6:	292c      	cmp	r1, #44	; 0x2c
 80020e8:	d173      	bne.n	80021d2 <_ZN9NMEA_UART6Parser10charParserEh+0x1c6>
            CharPoint = 0;
 80020ea:	2000      	movs	r0, #0
            ComaPoint++;
 80020ec:	4a58      	ldr	r2, [pc, #352]	; (8002250 <_ZN9NMEA_UART6Parser10charParserEh+0x244>)
 80020ee:	7813      	ldrb	r3, [r2, #0]
 80020f0:	3301      	adds	r3, #1
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	7013      	strb	r3, [r2, #0]
            CharPoint = 0;
 80020f6:	4a5b      	ldr	r2, [pc, #364]	; (8002264 <_ZN9NMEA_UART6Parser10charParserEh+0x258>)
            GSV[ComaPoint][0] = 0;
 80020f8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
            CharPoint = 0;
 80020fc:	7010      	strb	r0, [r2, #0]
            GSV[ComaPoint][0] = 0;
 80020fe:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 8002102:	e00d      	b.n	8002120 <_ZN9NMEA_UART6Parser10charParserEh+0x114>
        if (data == ',') {
 8002104:	292c      	cmp	r1, #44	; 0x2c
 8002106:	d10d      	bne.n	8002124 <_ZN9NMEA_UART6Parser10charParserEh+0x118>
            CharPoint = 0;
 8002108:	2000      	movs	r0, #0
            ComaPoint++;
 800210a:	4a51      	ldr	r2, [pc, #324]	; (8002250 <_ZN9NMEA_UART6Parser10charParserEh+0x244>)
 800210c:	7813      	ldrb	r3, [r2, #0]
 800210e:	3301      	adds	r3, #1
 8002110:	b2db      	uxtb	r3, r3
 8002112:	7013      	strb	r3, [r2, #0]
            RMC[ComaPoint][0] = 0;
 8002114:	eb04 0483 	add.w	r4, r4, r3, lsl #2
            CharPoint = 0;
 8002118:	4a52      	ldr	r2, [pc, #328]	; (8002264 <_ZN9NMEA_UART6Parser10charParserEh+0x258>)
            RMC[ComaPoint][0] = 0;
 800211a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
            CharPoint = 0;
 800211e:	7010      	strb	r0, [r2, #0]
            GSA[ComaPoint][0] = 0;
 8002120:	7018      	strb	r0, [r3, #0]
            return (GPS_NULL);
 8002122:	e780      	b.n	8002026 <_ZN9NMEA_UART6Parser10charParserEh+0x1a>
        if ((data) == ('*')) {
 8002124:	292a      	cmp	r1, #42	; 0x2a
 8002126:	d103      	bne.n	8002130 <_ZN9NMEA_UART6Parser10charParserEh+0x124>
            MsgType = 0;
 8002128:	2300      	movs	r3, #0
            return (GPS_NRMC);
 800212a:	2002      	movs	r0, #2
            MsgType = 0;
 800212c:	602b      	str	r3, [r5, #0]
            return (GPS_NRMC);
 800212e:	e77a      	b.n	8002026 <_ZN9NMEA_UART6Parser10charParserEh+0x1a>
        RMC[ComaPoint][CharPoint++] = data;
 8002130:	4b47      	ldr	r3, [pc, #284]	; (8002250 <_ZN9NMEA_UART6Parser10charParserEh+0x244>)
 8002132:	484c      	ldr	r0, [pc, #304]	; (8002264 <_ZN9NMEA_UART6Parser10charParserEh+0x258>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	7802      	ldrb	r2, [r0, #0]
 8002138:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800213c:	f8d4 50c4 	ldr.w	r5, [r4, #196]	; 0xc4
 8002140:	1c53      	adds	r3, r2, #1
 8002142:	54a9      	strb	r1, [r5, r2]
 8002144:	b2db      	uxtb	r3, r3
        RMC[ComaPoint][CharPoint] = 0;
 8002146:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
        RMC[ComaPoint][CharPoint++] = data;
 800214a:	7003      	strb	r3, [r0, #0]
        GSA[ComaPoint][CharPoint] = 0;
 800214c:	2000      	movs	r0, #0
 800214e:	54d0      	strb	r0, [r2, r3]
        return (GPS_NULL);
 8002150:	e769      	b.n	8002026 <_ZN9NMEA_UART6Parser10charParserEh+0x1a>
        if (data == ',') {
 8002152:	292c      	cmp	r1, #44	; 0x2c
 8002154:	d10b      	bne.n	800216e <_ZN9NMEA_UART6Parser10charParserEh+0x162>
            CharPoint = 0;
 8002156:	2000      	movs	r0, #0
            ComaPoint++;
 8002158:	4a3d      	ldr	r2, [pc, #244]	; (8002250 <_ZN9NMEA_UART6Parser10charParserEh+0x244>)
 800215a:	7813      	ldrb	r3, [r2, #0]
 800215c:	3301      	adds	r3, #1
 800215e:	b2db      	uxtb	r3, r3
 8002160:	7013      	strb	r3, [r2, #0]
            CharPoint = 0;
 8002162:	4a40      	ldr	r2, [pc, #256]	; (8002264 <_ZN9NMEA_UART6Parser10charParserEh+0x258>)
            VTG[ComaPoint][0] = 0;
 8002164:	333e      	adds	r3, #62	; 0x3e
            CharPoint = 0;
 8002166:	7010      	strb	r0, [r2, #0]
            GGA[ComaPoint][0] = 0;
 8002168:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800216c:	e7d8      	b.n	8002120 <_ZN9NMEA_UART6Parser10charParserEh+0x114>
        if (data == '*') {
 800216e:	292a      	cmp	r1, #42	; 0x2a
 8002170:	d068      	beq.n	8002244 <_ZN9NMEA_UART6Parser10charParserEh+0x238>
        VTG[ComaPoint][CharPoint++] = data;
 8002172:	4b37      	ldr	r3, [pc, #220]	; (8002250 <_ZN9NMEA_UART6Parser10charParserEh+0x244>)
 8002174:	483b      	ldr	r0, [pc, #236]	; (8002264 <_ZN9NMEA_UART6Parser10charParserEh+0x258>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	7802      	ldrb	r2, [r0, #0]
 800217a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800217e:	f8d4 50f8 	ldr.w	r5, [r4, #248]	; 0xf8
 8002182:	1c53      	adds	r3, r2, #1
 8002184:	b2db      	uxtb	r3, r3
 8002186:	7003      	strb	r3, [r0, #0]
 8002188:	54a9      	strb	r1, [r5, r2]
        VTG[ComaPoint][CharPoint] = 0;
 800218a:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
 800218e:	e7dd      	b.n	800214c <_ZN9NMEA_UART6Parser10charParserEh+0x140>
        if (data == ',') {
 8002190:	292c      	cmp	r1, #44	; 0x2c
 8002192:	d109      	bne.n	80021a8 <_ZN9NMEA_UART6Parser10charParserEh+0x19c>
            CharPoint = 0;
 8002194:	2000      	movs	r0, #0
            ComaPoint++;
 8002196:	4a2e      	ldr	r2, [pc, #184]	; (8002250 <_ZN9NMEA_UART6Parser10charParserEh+0x244>)
 8002198:	7813      	ldrb	r3, [r2, #0]
 800219a:	3301      	adds	r3, #1
 800219c:	b2db      	uxtb	r3, r3
 800219e:	7013      	strb	r3, [r2, #0]
            CharPoint = 0;
 80021a0:	4a30      	ldr	r2, [pc, #192]	; (8002264 <_ZN9NMEA_UART6Parser10charParserEh+0x258>)
            GGA[ComaPoint][0] = 0;
 80021a2:	3348      	adds	r3, #72	; 0x48
            CharPoint = 0;
 80021a4:	7010      	strb	r0, [r2, #0]
 80021a6:	e7df      	b.n	8002168 <_ZN9NMEA_UART6Parser10charParserEh+0x15c>
        if (data == '*') {
 80021a8:	292a      	cmp	r1, #42	; 0x2a
 80021aa:	d103      	bne.n	80021b4 <_ZN9NMEA_UART6Parser10charParserEh+0x1a8>
            MsgType = 0;
 80021ac:	2300      	movs	r3, #0
            return (GPS_NGGA);
 80021ae:	2004      	movs	r0, #4
            MsgType = 0;
 80021b0:	602b      	str	r3, [r5, #0]
            return (GPS_NGGA);
 80021b2:	e738      	b.n	8002026 <_ZN9NMEA_UART6Parser10charParserEh+0x1a>
        GGA[ComaPoint][CharPoint++] = data;
 80021b4:	4b26      	ldr	r3, [pc, #152]	; (8002250 <_ZN9NMEA_UART6Parser10charParserEh+0x244>)
 80021b6:	482b      	ldr	r0, [pc, #172]	; (8002264 <_ZN9NMEA_UART6Parser10charParserEh+0x258>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	7802      	ldrb	r2, [r0, #0]
 80021bc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80021c0:	f8d4 5120 	ldr.w	r5, [r4, #288]	; 0x120
 80021c4:	1c53      	adds	r3, r2, #1
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	54a9      	strb	r1, [r5, r2]
 80021ca:	7003      	strb	r3, [r0, #0]
        GGA[ComaPoint][CharPoint] = 0;
 80021cc:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 80021d0:	e7bc      	b.n	800214c <_ZN9NMEA_UART6Parser10charParserEh+0x140>
        if (data == '*') {
 80021d2:	292a      	cmp	r1, #42	; 0x2a
 80021d4:	d116      	bne.n	8002204 <_ZN9NMEA_UART6Parser10charParserEh+0x1f8>
            GPS_COUNT = asciiToInt(ViewSatellite);
 80021d6:	309c      	adds	r0, #156	; 0x9c
 80021d8:	f7ff ff08 	bl	8001fec <_ZN9NMEA_UART10asciiToIntEPc>
            MsgType = 0;
 80021dc:	2300      	movs	r3, #0
            GPS_COUNT = asciiToInt(ViewSatellite);
 80021de:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
            MsgType = 0;
 80021e2:	602b      	str	r3, [r5, #0]
            return (GPS_PGSV);
 80021e4:	2005      	movs	r0, #5
 80021e6:	e71e      	b.n	8002026 <_ZN9NMEA_UART6Parser10charParserEh+0x1a>
        if (data == ',') {
 80021e8:	292c      	cmp	r1, #44	; 0x2c
 80021ea:	f43f af7e 	beq.w	80020ea <_ZN9NMEA_UART6Parser10charParserEh+0xde>
        if (data == '*') {
 80021ee:	292a      	cmp	r1, #42	; 0x2a
 80021f0:	d108      	bne.n	8002204 <_ZN9NMEA_UART6Parser10charParserEh+0x1f8>
            GLONAS_COUNT = asciiToInt(ViewSatellite);
 80021f2:	309c      	adds	r0, #156	; 0x9c
 80021f4:	f7ff fefa 	bl	8001fec <_ZN9NMEA_UART10asciiToIntEPc>
            MsgType = 0;
 80021f8:	2300      	movs	r3, #0
            GLONAS_COUNT = asciiToInt(ViewSatellite);
 80021fa:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
            MsgType = 0;
 80021fe:	602b      	str	r3, [r5, #0]
            return (GPS_LGSV);
 8002200:	2006      	movs	r0, #6
 8002202:	e710      	b.n	8002026 <_ZN9NMEA_UART6Parser10charParserEh+0x1a>
        GSV[ComaPoint][CharPoint++] = data;
 8002204:	4b12      	ldr	r3, [pc, #72]	; (8002250 <_ZN9NMEA_UART6Parser10charParserEh+0x244>)
 8002206:	4817      	ldr	r0, [pc, #92]	; (8002264 <_ZN9NMEA_UART6Parser10charParserEh+0x258>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	7802      	ldrb	r2, [r0, #0]
 800220c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8002210:	f8d4 51a4 	ldr.w	r5, [r4, #420]	; 0x1a4
 8002214:	1c53      	adds	r3, r2, #1
 8002216:	b2db      	uxtb	r3, r3
 8002218:	7003      	strb	r3, [r0, #0]
 800221a:	54a9      	strb	r1, [r5, r2]
        GSV[ComaPoint][CharPoint] = 0;
 800221c:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
 8002220:	e794      	b.n	800214c <_ZN9NMEA_UART6Parser10charParserEh+0x140>
        if (data == '*') {
 8002222:	292a      	cmp	r1, #42	; 0x2a
 8002224:	d010      	beq.n	8002248 <_ZN9NMEA_UART6Parser10charParserEh+0x23c>
        GSA[ComaPoint][CharPoint++] = data;
 8002226:	4b0a      	ldr	r3, [pc, #40]	; (8002250 <_ZN9NMEA_UART6Parser10charParserEh+0x244>)
 8002228:	480e      	ldr	r0, [pc, #56]	; (8002264 <_ZN9NMEA_UART6Parser10charParserEh+0x258>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	7802      	ldrb	r2, [r0, #0]
 800222e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8002232:	f8d4 515c 	ldr.w	r5, [r4, #348]	; 0x15c
 8002236:	1c53      	adds	r3, r2, #1
 8002238:	b2db      	uxtb	r3, r3
 800223a:	54a9      	strb	r1, [r5, r2]
 800223c:	7003      	strb	r3, [r0, #0]
        GSA[ComaPoint][CharPoint] = 0;
 800223e:	f8d4 215c 	ldr.w	r2, [r4, #348]	; 0x15c
 8002242:	e783      	b.n	800214c <_ZN9NMEA_UART6Parser10charParserEh+0x140>
            return (GPS_PVTG);
 8002244:	2007      	movs	r0, #7
 8002246:	e6ee      	b.n	8002026 <_ZN9NMEA_UART6Parser10charParserEh+0x1a>
            return (GPS_GNGSA);
 8002248:	200a      	movs	r0, #10
 800224a:	e6ec      	b.n	8002026 <_ZN9NMEA_UART6Parser10charParserEh+0x1a>
 800224c:	20000014 	.word	0x20000014
 8002250:	20000015 	.word	0x20000015
 8002254:	20000010 	.word	0x20000010
 8002258:	200018e8 	.word	0x200018e8
 800225c:	434d524e 	.word	0x434d524e
 8002260:	4153474e 	.word	0x4153474e
 8002264:	200018ec 	.word	0x200018ec
 8002268:	47545650 	.word	0x47545650
 800226c:	5653474c 	.word	0x5653474c

08002270 <_ZL20ssd1306_WriteCommandh>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8002270:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8002272:	2301      	movs	r3, #1
 8002274:	210a      	movs	r1, #10
{
 8002276:	aa06      	add	r2, sp, #24
 8002278:	f802 0d01 	strb.w	r0, [r2, #-1]!
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 800227c:	9200      	str	r2, [sp, #0]
 800227e:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	2178      	movs	r1, #120	; 0x78
 8002286:	4803      	ldr	r0, [pc, #12]	; (8002294 <_ZL20ssd1306_WriteCommandh+0x24>)
 8002288:	f001 f940 	bl	800350c <HAL_I2C_Mem_Write>

}
 800228c:	b007      	add	sp, #28
 800228e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002292:	bf00      	nop
 8002294:	20001020 	.word	0x20001020

08002298 <_Z12ssd1306_Fill13SSD1306_COLOR>:
void ssd1306_Fill(SSD1306_COLOR color)
{
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8002298:	2300      	movs	r3, #0
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800229a:	4905      	ldr	r1, [pc, #20]	; (80022b0 <_Z12ssd1306_Fill13SSD1306_COLOR+0x18>)
 800229c:	1c02      	adds	r2, r0, #0
 800229e:	bf18      	it	ne
 80022a0:	2201      	movne	r2, #1
 80022a2:	4252      	negs	r2, r2
 80022a4:	545a      	strb	r2, [r3, r1]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80022a6:	3301      	adds	r3, #1
 80022a8:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 80022ac:	d1f6      	bne.n	800229c <_Z12ssd1306_Fill13SSD1306_COLOR+0x4>
	}
}
 80022ae:	4770      	bx	lr
 80022b0:	200018ed 	.word	0x200018ed

080022b4 <_Z20ssd1306_UpdateScreenv>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 80022b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80022b6:	2400      	movs	r4, #0
	for (i = 0; i < 8; i++) {
		ssd1306_WriteCommand(0xB0 + i);
		ssd1306_WriteCommand(0x00);
		ssd1306_WriteCommand(0x10);

		HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100);
 80022b8:	4e0f      	ldr	r6, [pc, #60]	; (80022f8 <_Z20ssd1306_UpdateScreenv+0x44>)
 80022ba:	4d10      	ldr	r5, [pc, #64]	; (80022fc <_Z20ssd1306_UpdateScreenv+0x48>)
		ssd1306_WriteCommand(0xB0 + i);
 80022bc:	f1a4 0050 	sub.w	r0, r4, #80	; 0x50
 80022c0:	b2c0      	uxtb	r0, r0
 80022c2:	f7ff ffd5 	bl	8002270 <_ZL20ssd1306_WriteCommandh>
		ssd1306_WriteCommand(0x00);
 80022c6:	2000      	movs	r0, #0
 80022c8:	f7ff ffd2 	bl	8002270 <_ZL20ssd1306_WriteCommandh>
		ssd1306_WriteCommand(0x10);
 80022cc:	2010      	movs	r0, #16
 80022ce:	f7ff ffcf 	bl	8002270 <_ZL20ssd1306_WriteCommandh>
		HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100);
 80022d2:	2382      	movs	r3, #130	; 0x82
 80022d4:	2264      	movs	r2, #100	; 0x64
 80022d6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80022da:	fb03 6304 	mla	r3, r3, r4, r6
 80022de:	2240      	movs	r2, #64	; 0x40
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	2178      	movs	r1, #120	; 0x78
 80022e4:	2301      	movs	r3, #1
 80022e6:	4628      	mov	r0, r5
 80022e8:	3401      	adds	r4, #1
 80022ea:	f001 f90f 	bl	800350c <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 80022ee:	2c08      	cmp	r4, #8
 80022f0:	d1e4      	bne.n	80022bc <_Z20ssd1306_UpdateScreenv+0x8>

	}
}
 80022f2:	b004      	add	sp, #16
 80022f4:	bd70      	pop	{r4, r5, r6, pc}
 80022f6:	bf00      	nop
 80022f8:	200018ed 	.word	0x200018ed
 80022fc:	20001020 	.word	0x20001020

08002300 <_Z12ssd1306_Initv>:
{
 8002300:	b508      	push	{r3, lr}
	HAL_Delay(100);
 8002302:	2064      	movs	r0, #100	; 0x64
 8002304:	f000 fb1a 	bl	800293c <HAL_Delay>
	ssd1306_WriteCommand(0xAE); //display off
 8002308:	20ae      	movs	r0, #174	; 0xae
 800230a:	f7ff ffb1 	bl	8002270 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800230e:	2020      	movs	r0, #32
 8002310:	f7ff ffae 	bl	8002270 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002314:	2010      	movs	r0, #16
 8002316:	f7ff ffab 	bl	8002270 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800231a:	20b0      	movs	r0, #176	; 0xb0
 800231c:	f7ff ffa8 	bl	8002270 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002320:	20c8      	movs	r0, #200	; 0xc8
 8002322:	f7ff ffa5 	bl	8002270 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x00); //---set low column address
 8002326:	2000      	movs	r0, #0
 8002328:	f7ff ffa2 	bl	8002270 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x10); //---set high column address
 800232c:	2010      	movs	r0, #16
 800232e:	f7ff ff9f 	bl	8002270 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x40); //--set start line address
 8002332:	2040      	movs	r0, #64	; 0x40
 8002334:	f7ff ff9c 	bl	8002270 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 8002338:	2081      	movs	r0, #129	; 0x81
 800233a:	f7ff ff99 	bl	8002270 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xFF);
 800233e:	20ff      	movs	r0, #255	; 0xff
 8002340:	f7ff ff96 	bl	8002270 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 8002344:	20a1      	movs	r0, #161	; 0xa1
 8002346:	f7ff ff93 	bl	8002270 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xA6); //--set normal display
 800234a:	20a6      	movs	r0, #166	; 0xa6
 800234c:	f7ff ff90 	bl	8002270 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8002350:	20a8      	movs	r0, #168	; 0xa8
 8002352:	f7ff ff8d 	bl	8002270 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x3F); //
 8002356:	203f      	movs	r0, #63	; 0x3f
 8002358:	f7ff ff8a 	bl	8002270 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800235c:	20a4      	movs	r0, #164	; 0xa4
 800235e:	f7ff ff87 	bl	8002270 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8002362:	20d3      	movs	r0, #211	; 0xd3
 8002364:	f7ff ff84 	bl	8002270 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x00); //-not offset
 8002368:	2000      	movs	r0, #0
 800236a:	f7ff ff81 	bl	8002270 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800236e:	20d5      	movs	r0, #213	; 0xd5
 8002370:	f7ff ff7e 	bl	8002270 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002374:	20f0      	movs	r0, #240	; 0xf0
 8002376:	f7ff ff7b 	bl	8002270 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800237a:	20d9      	movs	r0, #217	; 0xd9
 800237c:	f7ff ff78 	bl	8002270 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x22); //
 8002380:	2022      	movs	r0, #34	; 0x22
 8002382:	f7ff ff75 	bl	8002270 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8002386:	20da      	movs	r0, #218	; 0xda
 8002388:	f7ff ff72 	bl	8002270 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x12);
 800238c:	2012      	movs	r0, #18
 800238e:	f7ff ff6f 	bl	8002270 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8002392:	20db      	movs	r0, #219	; 0xdb
 8002394:	f7ff ff6c 	bl	8002270 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002398:	2020      	movs	r0, #32
 800239a:	f7ff ff69 	bl	8002270 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800239e:	208d      	movs	r0, #141	; 0x8d
 80023a0:	f7ff ff66 	bl	8002270 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x14); //
 80023a4:	2014      	movs	r0, #20
 80023a6:	f7ff ff63 	bl	8002270 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 80023aa:	20af      	movs	r0, #175	; 0xaf
 80023ac:	f7ff ff60 	bl	8002270 <_ZL20ssd1306_WriteCommandh>
	ssd1306_Fill(Black);
 80023b0:	2000      	movs	r0, #0
 80023b2:	f7ff ff71 	bl	8002298 <_Z12ssd1306_Fill13SSD1306_COLOR>
	ssd1306_UpdateScreen();
 80023b6:	f7ff ff7d 	bl	80022b4 <_Z20ssd1306_UpdateScreenv>
	SSD1306.Initialized = 1;
 80023ba:	2001      	movs	r0, #1
	SSD1306.CurrentX = 0;
 80023bc:	2200      	movs	r2, #0
 80023be:	4b02      	ldr	r3, [pc, #8]	; (80023c8 <_Z12ssd1306_Initv+0xc8>)
	SSD1306.Initialized = 1;
 80023c0:	7158      	strb	r0, [r3, #5]
	SSD1306.CurrentX = 0;
 80023c2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80023c4:	805a      	strh	r2, [r3, #2]
}
 80023c6:	bd08      	pop	{r3, pc}
 80023c8:	20001cfe 	.word	0x20001cfe

080023cc <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR>:
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 80023cc:	2881      	cmp	r0, #129	; 0x81
{
 80023ce:	b530      	push	{r4, r5, lr}
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 80023d0:	d817      	bhi.n	8002402 <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0x36>
 80023d2:	293f      	cmp	r1, #63	; 0x3f
 80023d4:	d815      	bhi.n	8002402 <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0x36>
		// Don't write outside the buffer
		return;
	}

	// Check if pixel should be inverted
	if (SSD1306.Inverted)
 80023d6:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0x38>)
 80023d8:	791b      	ldrb	r3, [r3, #4]
 80023da:	b113      	cbz	r3, 80023e2 <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0x16>
	{
		color = (SSD1306_COLOR)!color;
 80023dc:	fab2 f282 	clz	r2, r2
 80023e0:	0952      	lsrs	r2, r2, #5
 80023e2:	2382      	movs	r3, #130	; 0x82
 80023e4:	08cc      	lsrs	r4, r1, #3
 80023e6:	fb03 0004 	mla	r0, r3, r4, r0
 80023ea:	f001 0407 	and.w	r4, r1, #7
 80023ee:	2101      	movs	r1, #1
 80023f0:	4d05      	ldr	r5, [pc, #20]	; (8002408 <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0x3c>)
 80023f2:	40a1      	lsls	r1, r4
 80023f4:	562b      	ldrsb	r3, [r5, r0]
 80023f6:	b249      	sxtb	r1, r1
	}

	// Draw in the right color
	if (color == White)
 80023f8:	2a01      	cmp	r2, #1
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80023fa:	bf0c      	ite	eq
 80023fc:	430b      	orreq	r3, r1
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80023fe:	438b      	bicne	r3, r1
 8002400:	542b      	strb	r3, [r5, r0]
	}
}
 8002402:	bd30      	pop	{r4, r5, pc}
 8002404:	20001cfe 	.word	0x20001cfe
 8002408:	200018ed 	.word	0x200018ed

0800240c <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 800240c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002410:	b087      	sub	sp, #28
 8002412:	4607      	mov	r7, r0
 8002414:	a806      	add	r0, sp, #24
 8002416:	e900 0006 	stmdb	r0, {r1, r2}
 800241a:	469b      	mov	fp, r3
	uint32_t i, b, j;

	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800241c:	4b21      	ldr	r3, [pc, #132]	; (80024a4 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0x98>)
 800241e:	f89d 9010 	ldrb.w	r9, [sp, #16]
 8002422:	881c      	ldrh	r4, [r3, #0]
 8002424:	9301      	str	r3, [sp, #4]
 8002426:	eb04 0209 	add.w	r2, r4, r9
 800242a:	2a81      	cmp	r2, #129	; 0x81
 800242c:	dc37      	bgt.n	800249e <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0x92>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 800242e:	885b      	ldrh	r3, [r3, #2]
 8002430:	f89d a011 	ldrb.w	sl, [sp, #17]
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	eb03 020a 	add.w	r2, r3, sl
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800243a:	2a3f      	cmp	r2, #63	; 0x3f
 800243c:	dc2f      	bgt.n	800249e <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0x92>
		// Not enough space on current line
		return 0;
	}

	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 800243e:	2500      	movs	r5, #0
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002440:	f1a7 0220 	sub.w	r2, r7, #32
 8002444:	fb0a f302 	mul.w	r3, sl, r2
 8002448:	9302      	str	r3, [sp, #8]
	for (i = 0; i < Font.FontHeight; i++)
 800244a:	45aa      	cmp	sl, r5
 800244c:	d920      	bls.n	8002490 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0x84>
		for (j = 0; j < Font.FontWidth; j++)
 800244e:	2600      	movs	r6, #0
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002450:	9b02      	ldr	r3, [sp, #8]
 8002452:	9905      	ldr	r1, [sp, #20]
 8002454:	195a      	adds	r2, r3, r5
 8002456:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 800245a:	9303      	str	r3, [sp, #12]
 800245c:	9b00      	ldr	r3, [sp, #0]
 800245e:	eb05 0803 	add.w	r8, r5, r3
 8002462:	fa5f f888 	uxtb.w	r8, r8
		for (j = 0; j < Font.FontWidth; j++)
 8002466:	45b1      	cmp	r9, r6
 8002468:	d910      	bls.n	800248c <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0x80>
		{
			if ((b << j) & 0x8000)
 800246a:	9b03      	ldr	r3, [sp, #12]
 800246c:	1930      	adds	r0, r6, r4
 800246e:	fa03 f206 	lsl.w	r2, r3, r6
 8002472:	0413      	lsls	r3, r2, #16
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
			}
			else
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002474:	bf58      	it	pl
 8002476:	fabb f28b 	clzpl	r2, fp
 800247a:	b2c0      	uxtb	r0, r0
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800247c:	bf4c      	ite	mi
 800247e:	465a      	movmi	r2, fp
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002480:	0952      	lsrpl	r2, r2, #5
 8002482:	4641      	mov	r1, r8
 8002484:	f7ff ffa2 	bl	80023cc <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR>
		for (j = 0; j < Font.FontWidth; j++)
 8002488:	3601      	adds	r6, #1
 800248a:	e7ec      	b.n	8002466 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0x5a>
	for (i = 0; i < Font.FontHeight; i++)
 800248c:	3501      	adds	r5, #1
 800248e:	e7dc      	b.n	800244a <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0x3e>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 8002490:	9b01      	ldr	r3, [sp, #4]
 8002492:	444c      	add	r4, r9
 8002494:	801c      	strh	r4, [r3, #0]

	// Return written char for validation
	return ch;
}
 8002496:	4638      	mov	r0, r7
 8002498:	b007      	add	sp, #28
 800249a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
 800249e:	2700      	movs	r7, #0
 80024a0:	e7f9      	b.n	8002496 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0x8a>
 80024a2:	bf00      	nop
 80024a4:	20001cfe 	.word	0x20001cfe

080024a8 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 80024a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80024aa:	466d      	mov	r5, sp
 80024ac:	461f      	mov	r7, r3
 80024ae:	e885 0006 	stmia.w	r5, {r1, r2}
 80024b2:	1e46      	subs	r6, r0, #1
	// Write until null-byte
	while (*str)
 80024b4:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 80024b8:	b144      	cbz	r4, 80024cc <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR+0x24>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 80024ba:	e895 0006 	ldmia.w	r5, {r1, r2}
 80024be:	4620      	mov	r0, r4
 80024c0:	463b      	mov	r3, r7
 80024c2:	f7ff ffa3 	bl	800240c <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR>
 80024c6:	7834      	ldrb	r4, [r6, #0]
 80024c8:	42a0      	cmp	r0, r4
 80024ca:	d0f3      	beq.n	80024b4 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR+0xc>
		str++;
	}

	// Everything ok
	return *str;
}
 80024cc:	4620      	mov	r0, r4
 80024ce:	b003      	add	sp, #12
 80024d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080024d4 <_Z17ssd1306_SetCursorhh>:
//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
	SSD1306.CurrentX = x;
 80024d4:	4b01      	ldr	r3, [pc, #4]	; (80024dc <_Z17ssd1306_SetCursorhh+0x8>)
 80024d6:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 80024d8:	8059      	strh	r1, [r3, #2]
}
 80024da:	4770      	bx	lr
 80024dc:	20001cfe 	.word	0x20001cfe

080024e0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80024e0:	4b11      	ldr	r3, [pc, #68]	; (8002528 <HAL_MspInit+0x48>)
{
 80024e2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 80024e4:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80024e6:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 80024e8:	f042 0201 	orr.w	r2, r2, #1
 80024ec:	619a      	str	r2, [r3, #24]
 80024ee:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80024f0:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 80024f4:	f002 0201 	and.w	r2, r2, #1
 80024f8:	9200      	str	r2, [sp, #0]
 80024fa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024fc:	69da      	ldr	r2, [r3, #28]
 80024fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002502:	61da      	str	r2, [r3, #28]
 8002504:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002506:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8002508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250c:	9301      	str	r3, [sp, #4]
 800250e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002510:	f000 fa38 	bl	8002984 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002514:	4a05      	ldr	r2, [pc, #20]	; (800252c <HAL_MspInit+0x4c>)
 8002516:	6853      	ldr	r3, [r2, #4]
 8002518:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800251c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002520:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002522:	b003      	add	sp, #12
 8002524:	f85d fb04 	ldr.w	pc, [sp], #4
 8002528:	40021000 	.word	0x40021000
 800252c:	40010000 	.word	0x40010000

08002530 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002530:	b510      	push	{r4, lr}
 8002532:	4604      	mov	r4, r0
 8002534:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002536:	2210      	movs	r2, #16
 8002538:	2100      	movs	r1, #0
 800253a:	a802      	add	r0, sp, #8
 800253c:	f004 f96b 	bl	8006816 <memset>
  if(hi2c->Instance==I2C1)
 8002540:	6822      	ldr	r2, [r4, #0]
 8002542:	4b15      	ldr	r3, [pc, #84]	; (8002598 <HAL_I2C_MspInit+0x68>)
 8002544:	429a      	cmp	r2, r3
 8002546:	d124      	bne.n	8002592 <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002548:	4c14      	ldr	r4, [pc, #80]	; (800259c <HAL_I2C_MspInit+0x6c>)
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800254a:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800254e:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002550:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002552:	f043 0308 	orr.w	r3, r3, #8
 8002556:	61a3      	str	r3, [r4, #24]
 8002558:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800255a:	4811      	ldr	r0, [pc, #68]	; (80025a0 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800255c:	f003 0308 	and.w	r3, r3, #8
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002564:	2312      	movs	r3, #18
 8002566:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800256a:	2303      	movs	r3, #3
 800256c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800256e:	f000 faa9 	bl	8002ac4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002572:	4a0c      	ldr	r2, [pc, #48]	; (80025a4 <HAL_I2C_MspInit+0x74>)
 8002574:	6853      	ldr	r3, [r2, #4]
 8002576:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800257a:	f043 0302 	orr.w	r3, r3, #2
 800257e:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002580:	69e3      	ldr	r3, [r4, #28]
 8002582:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002586:	61e3      	str	r3, [r4, #28]
 8002588:	69e3      	ldr	r3, [r4, #28]
 800258a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800258e:	9301      	str	r3, [sp, #4]
 8002590:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002592:	b006      	add	sp, #24
 8002594:	bd10      	pop	{r4, pc}
 8002596:	bf00      	nop
 8002598:	40005400 	.word	0x40005400
 800259c:	40021000 	.word	0x40021000
 80025a0:	40010c00 	.word	0x40010c00
 80025a4:	40010000 	.word	0x40010000

080025a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025a8:	b510      	push	{r4, lr}
 80025aa:	4604      	mov	r4, r0
 80025ac:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ae:	2210      	movs	r2, #16
 80025b0:	2100      	movs	r1, #0
 80025b2:	a802      	add	r0, sp, #8
 80025b4:	f004 f92f 	bl	8006816 <memset>
  if(hspi->Instance==SPI2)
 80025b8:	6822      	ldr	r2, [r4, #0]
 80025ba:	4b17      	ldr	r3, [pc, #92]	; (8002618 <HAL_SPI_MspInit+0x70>)
 80025bc:	429a      	cmp	r2, r3
 80025be:	d128      	bne.n	8002612 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80025c0:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 80025c4:	69da      	ldr	r2, [r3, #28]
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c6:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI2_CLK_ENABLE();
 80025c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025cc:	61da      	str	r2, [r3, #28]
 80025ce:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d0:	4812      	ldr	r0, [pc, #72]	; (800261c <HAL_SPI_MspInit+0x74>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80025d2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80025d6:	9200      	str	r2, [sp, #0]
 80025d8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025da:	699a      	ldr	r2, [r3, #24]
 80025dc:	f042 0208 	orr.w	r2, r2, #8
 80025e0:	619a      	str	r2, [r3, #24]
 80025e2:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e4:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e8:	f003 0308 	and.w	r3, r3, #8
 80025ec:	9301      	str	r3, [sp, #4]
 80025ee:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f0:	2302      	movs	r3, #2
 80025f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025f6:	2303      	movs	r3, #3
 80025f8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025fa:	f000 fa63 	bl	8002ac4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002602:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002604:	4805      	ldr	r0, [pc, #20]	; (800261c <HAL_SPI_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002606:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800260a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800260e:	f000 fa59 	bl	8002ac4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002612:	b006      	add	sp, #24
 8002614:	bd10      	pop	{r4, pc}
 8002616:	bf00      	nop
 8002618:	40003800 	.word	0x40003800
 800261c:	40010c00 	.word	0x40010c00

08002620 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM2)
 8002620:	6803      	ldr	r3, [r0, #0]
{
 8002622:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM2)
 8002624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002628:	d10a      	bne.n	8002640 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800262a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800262e:	69da      	ldr	r2, [r3, #28]
 8002630:	f042 0201 	orr.w	r2, r2, #1
 8002634:	61da      	str	r2, [r3, #28]
 8002636:	69db      	ldr	r3, [r3, #28]
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	9301      	str	r3, [sp, #4]
 800263e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002640:	b002      	add	sp, #8
 8002642:	4770      	bx	lr

08002644 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002644:	b510      	push	{r4, lr}
 8002646:	4604      	mov	r4, r0
 8002648:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264a:	2210      	movs	r2, #16
 800264c:	2100      	movs	r1, #0
 800264e:	a802      	add	r0, sp, #8
 8002650:	f004 f8e1 	bl	8006816 <memset>
  if(htim->Instance==TIM2)
 8002654:	6823      	ldr	r3, [r4, #0]
 8002656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800265a:	d113      	bne.n	8002684 <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800265c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002660:	699a      	ldr	r2, [r3, #24]
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8002662:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002664:	f042 0204 	orr.w	r2, r2, #4
 8002668:	619a      	str	r2, [r3, #24]
 800266a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266c:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800266e:	f003 0304 	and.w	r3, r3, #4
 8002672:	9301      	str	r3, [sp, #4]
 8002674:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002676:	2302      	movs	r3, #2
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8002678:	4803      	ldr	r0, [pc, #12]	; (8002688 <HAL_TIM_MspPostInit+0x44>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800267e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8002680:	f000 fa20 	bl	8002ac4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002684:	b006      	add	sp, #24
 8002686:	bd10      	pop	{r4, pc}
 8002688:	40010800 	.word	0x40010800

0800268c <HAL_UART_MspInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268c:	2210      	movs	r2, #16
{
 800268e:	b510      	push	{r4, lr}
 8002690:	4604      	mov	r4, r0
 8002692:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002694:	eb0d 0002 	add.w	r0, sp, r2
 8002698:	2100      	movs	r1, #0
 800269a:	f004 f8bc 	bl	8006816 <memset>
  if(huart->Instance==USART1)
 800269e:	6823      	ldr	r3, [r4, #0]
 80026a0:	4a30      	ldr	r2, [pc, #192]	; (8002764 <HAL_UART_MspInit+0xd8>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d131      	bne.n	800270a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026a6:	4b30      	ldr	r3, [pc, #192]	; (8002768 <HAL_UART_MspInit+0xdc>)
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a8:	f44f 7000 	mov.w	r0, #512	; 0x200
    __HAL_RCC_USART1_CLK_ENABLE();
 80026ac:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ae:	a904      	add	r1, sp, #16
    __HAL_RCC_USART1_CLK_ENABLE();
 80026b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026b4:	619a      	str	r2, [r3, #24]
 80026b6:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026b8:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 80026ba:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80026be:	9200      	str	r2, [sp, #0]
 80026c0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c2:	699a      	ldr	r2, [r3, #24]
 80026c4:	f042 0204 	orr.w	r2, r2, #4
 80026c8:	619a      	str	r2, [r3, #24]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	9301      	str	r3, [sp, #4]
 80026d2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d4:	2302      	movs	r3, #2
 80026d6:	e9cd 0304 	strd	r0, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026da:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026dc:	4823      	ldr	r0, [pc, #140]	; (800276c <HAL_UART_MspInit+0xe0>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026de:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e0:	f000 f9f0 	bl	8002ac4 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e8:	a904      	add	r1, sp, #16
 80026ea:	4820      	ldr	r0, [pc, #128]	; (800276c <HAL_UART_MspInit+0xe0>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026ec:	e9cd 3404 	strd	r3, r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f0:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f2:	f000 f9e7 	bl	8002ac4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80026f6:	2025      	movs	r0, #37	; 0x25
 80026f8:	4622      	mov	r2, r4
 80026fa:	2105      	movs	r1, #5
 80026fc:	f000 f942 	bl	8002984 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002700:	2025      	movs	r0, #37	; 0x25
 8002702:	f000 f973 	bl	80029ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002706:	b008      	add	sp, #32
 8002708:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 800270a:	4a19      	ldr	r2, [pc, #100]	; (8002770 <HAL_UART_MspInit+0xe4>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d1fa      	bne.n	8002706 <HAL_UART_MspInit+0x7a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002710:	4b15      	ldr	r3, [pc, #84]	; (8002768 <HAL_UART_MspInit+0xdc>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002712:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 8002714:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002716:	4817      	ldr	r0, [pc, #92]	; (8002774 <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8002718:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800271c:	61da      	str	r2, [r3, #28]
 800271e:	69da      	ldr	r2, [r3, #28]
 8002720:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8002724:	9202      	str	r2, [sp, #8]
 8002726:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002728:	699a      	ldr	r2, [r3, #24]
 800272a:	f042 0208 	orr.w	r2, r2, #8
 800272e:	619a      	str	r2, [r3, #24]
 8002730:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002732:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	9303      	str	r3, [sp, #12]
 800273c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273e:	2302      	movs	r3, #2
 8002740:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002744:	2303      	movs	r3, #3
 8002746:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002748:	f000 f9bc 	bl	8002ac4 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800274c:	2300      	movs	r3, #0
 800274e:	f44f 6100 	mov.w	r1, #2048	; 0x800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002752:	4808      	ldr	r0, [pc, #32]	; (8002774 <HAL_UART_MspInit+0xe8>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002754:	e9cd 1304 	strd	r1, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002758:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800275c:	f000 f9b2 	bl	8002ac4 <HAL_GPIO_Init>
}
 8002760:	e7d1      	b.n	8002706 <HAL_UART_MspInit+0x7a>
 8002762:	bf00      	nop
 8002764:	40013800 	.word	0x40013800
 8002768:	40021000 	.word	0x40021000
 800276c:	40010800 	.word	0x40010800
 8002770:	40004800 	.word	0x40004800
 8002774:	40010c00 	.word	0x40010c00

08002778 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002778:	4770      	bx	lr

0800277a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800277a:	e7fe      	b.n	800277a <HardFault_Handler>

0800277c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800277c:	e7fe      	b.n	800277c <MemManage_Handler>

0800277e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800277e:	e7fe      	b.n	800277e <BusFault_Handler>

08002780 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002780:	e7fe      	b.n	8002780 <UsageFault_Handler>

08002782 <DebugMon_Handler>:
 8002782:	4770      	bx	lr

08002784 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002784:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002786:	f000 f8c7 	bl	8002918 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800278a:	f003 fae7 	bl	8005d5c <xTaskGetSchedulerState>
 800278e:	2801      	cmp	r0, #1
 8002790:	d003      	beq.n	800279a <SysTick_Handler+0x16>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002792:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  xPortSysTickHandler();
 8002796:	f003 be55 	b.w	8006444 <xPortSysTickHandler>
}
 800279a:	bd08      	pop	{r3, pc}

0800279c <USART1_IRQHandler>:
{
  /* USER CODE BEGIN USART1_IRQn 0 */
	unsigned char tmp;


	if((USART1->SR & USART_SR_RXNE)!=0)
 800279c:	4b0d      	ldr	r3, [pc, #52]	; (80027d4 <USART1_IRQHandler+0x38>)
{
 800279e:	b507      	push	{r0, r1, r2, lr}
	if((USART1->SR & USART_SR_RXNE)!=0)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	0692      	lsls	r2, r2, #26
 80027a4:	d50f      	bpl.n	80027c6 <USART1_IRQHandler+0x2a>
	{
		tmp = USART1->DR;                   //прочитать принятый байт
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	a902      	add	r1, sp, #8
 80027aa:	f801 3d01 	strb.w	r3, [r1, #-1]!
		osMessageQueuePut(GPS_UARTQueueHandle, &tmp, 0U, 0U);
 80027ae:	2300      	movs	r3, #0
 80027b0:	4809      	ldr	r0, [pc, #36]	; (80027d8 <USART1_IRQHandler+0x3c>)
 80027b2:	461a      	mov	r2, r3
 80027b4:	6800      	ldr	r0, [r0, #0]
 80027b6:	f002 f899 	bl	80048ec <osMessageQueuePut>
		HAL_UART_Receive_IT(&huart1, tmp, (uint8_t)1);
 80027ba:	2201      	movs	r2, #1
 80027bc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80027c0:	4806      	ldr	r0, [pc, #24]	; (80027dc <USART1_IRQHandler+0x40>)
 80027c2:	f001 fdba 	bl	800433a <HAL_UART_Receive_IT>
	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80027c6:	4805      	ldr	r0, [pc, #20]	; (80027dc <USART1_IRQHandler+0x40>)
 80027c8:	f001 fe1c 	bl	8004404 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80027cc:	b003      	add	sp, #12
 80027ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80027d2:	bf00      	nop
 80027d4:	40013800 	.word	0x40013800
 80027d8:	20000218 	.word	0x20000218
 80027dc:	2000110c 	.word	0x2000110c

080027e0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80027e0:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80027e2:	4b0a      	ldr	r3, [pc, #40]	; (800280c <_sbrk+0x2c>)
{
 80027e4:	4602      	mov	r2, r0
	if (heap_end == 0)
 80027e6:	6819      	ldr	r1, [r3, #0]
 80027e8:	b909      	cbnz	r1, 80027ee <_sbrk+0xe>
		heap_end = &end;
 80027ea:	4909      	ldr	r1, [pc, #36]	; (8002810 <_sbrk+0x30>)
 80027ec:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80027ee:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 80027f0:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80027f2:	4402      	add	r2, r0
 80027f4:	428a      	cmp	r2, r1
 80027f6:	d906      	bls.n	8002806 <_sbrk+0x26>
	{
		errno = ENOMEM;
 80027f8:	f003 ffc8 	bl	800678c <__errno>
 80027fc:	230c      	movs	r3, #12
 80027fe:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002800:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8002804:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8002806:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8002808:	e7fc      	b.n	8002804 <_sbrk+0x24>
 800280a:	bf00      	nop
 800280c:	20001d04 	.word	0x20001d04
 8002810:	20002f58 	.word	0x20002f58

08002814 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002814:	4b0f      	ldr	r3, [pc, #60]	; (8002854 <SystemInit+0x40>)
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	f042 0201 	orr.w	r2, r2, #1
 800281c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800281e:	6859      	ldr	r1, [r3, #4]
 8002820:	4a0d      	ldr	r2, [pc, #52]	; (8002858 <SystemInit+0x44>)
 8002822:	400a      	ands	r2, r1
 8002824:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800282c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002830:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002838:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002840:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002842:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002846:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002848:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800284c:	4b03      	ldr	r3, [pc, #12]	; (800285c <SystemInit+0x48>)
 800284e:	609a      	str	r2, [r3, #8]
#endif 
}
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	40021000 	.word	0x40021000
 8002858:	f8ff0000 	.word	0xf8ff0000
 800285c:	e000ed00 	.word	0xe000ed00

08002860 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002860:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002862:	e003      	b.n	800286c <LoopCopyDataInit>

08002864 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002864:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002866:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002868:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800286a:	3104      	adds	r1, #4

0800286c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800286c:	480a      	ldr	r0, [pc, #40]	; (8002898 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800286e:	4b0b      	ldr	r3, [pc, #44]	; (800289c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002870:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002872:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002874:	d3f6      	bcc.n	8002864 <CopyDataInit>
  ldr r2, =_sbss
 8002876:	4a0a      	ldr	r2, [pc, #40]	; (80028a0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002878:	e002      	b.n	8002880 <LoopFillZerobss>

0800287a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800287a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800287c:	f842 3b04 	str.w	r3, [r2], #4

08002880 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002880:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002882:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002884:	d3f9      	bcc.n	800287a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002886:	f7ff ffc5 	bl	8002814 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800288a:	f003 ff85 	bl	8006798 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800288e:	f7ff f845 	bl	800191c <main>
  bx lr
 8002892:	4770      	bx	lr
  ldr r3, =_sidata
 8002894:	0800a144 	.word	0x0800a144
  ldr r0, =_sdata
 8002898:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800289c:	200001f8 	.word	0x200001f8
  ldr r2, =_sbss
 80028a0:	200001f8 	.word	0x200001f8
  ldr r3, = _ebss
 80028a4:	20002f58 	.word	0x20002f58

080028a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028a8:	e7fe      	b.n	80028a8 <ADC1_2_IRQHandler>
	...

080028ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028ac:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028ae:	4b0e      	ldr	r3, [pc, #56]	; (80028e8 <HAL_InitTick+0x3c>)
{
 80028b0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028b2:	7818      	ldrb	r0, [r3, #0]
 80028b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028b8:	fbb3 f3f0 	udiv	r3, r3, r0
 80028bc:	4a0b      	ldr	r2, [pc, #44]	; (80028ec <HAL_InitTick+0x40>)
 80028be:	6810      	ldr	r0, [r2, #0]
 80028c0:	fbb0 f0f3 	udiv	r0, r0, r3
 80028c4:	f000 f8a0 	bl	8002a08 <HAL_SYSTICK_Config>
 80028c8:	4604      	mov	r4, r0
 80028ca:	b958      	cbnz	r0, 80028e4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028cc:	2d0f      	cmp	r5, #15
 80028ce:	d809      	bhi.n	80028e4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028d0:	4602      	mov	r2, r0
 80028d2:	4629      	mov	r1, r5
 80028d4:	f04f 30ff 	mov.w	r0, #4294967295
 80028d8:	f000 f854 	bl	8002984 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028dc:	4620      	mov	r0, r4
 80028de:	4b04      	ldr	r3, [pc, #16]	; (80028f0 <HAL_InitTick+0x44>)
 80028e0:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80028e2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80028e4:	2001      	movs	r0, #1
 80028e6:	e7fc      	b.n	80028e2 <HAL_InitTick+0x36>
 80028e8:	2000001c 	.word	0x2000001c
 80028ec:	20000018 	.word	0x20000018
 80028f0:	20000020 	.word	0x20000020

080028f4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028f4:	4a07      	ldr	r2, [pc, #28]	; (8002914 <HAL_Init+0x20>)
{
 80028f6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028f8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028fa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028fc:	f043 0310 	orr.w	r3, r3, #16
 8002900:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002902:	f000 f82d 	bl	8002960 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002906:	200f      	movs	r0, #15
 8002908:	f7ff ffd0 	bl	80028ac <HAL_InitTick>
  HAL_MspInit();
 800290c:	f7ff fde8 	bl	80024e0 <HAL_MspInit>
}
 8002910:	2000      	movs	r0, #0
 8002912:	bd08      	pop	{r3, pc}
 8002914:	40022000 	.word	0x40022000

08002918 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002918:	4a03      	ldr	r2, [pc, #12]	; (8002928 <HAL_IncTick+0x10>)
 800291a:	4b04      	ldr	r3, [pc, #16]	; (800292c <HAL_IncTick+0x14>)
 800291c:	6811      	ldr	r1, [r2, #0]
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	440b      	add	r3, r1
 8002922:	6013      	str	r3, [r2, #0]
}
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	20002f10 	.word	0x20002f10
 800292c:	2000001c 	.word	0x2000001c

08002930 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002930:	4b01      	ldr	r3, [pc, #4]	; (8002938 <HAL_GetTick+0x8>)
 8002932:	6818      	ldr	r0, [r3, #0]
}
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	20002f10 	.word	0x20002f10

0800293c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800293c:	b538      	push	{r3, r4, r5, lr}
 800293e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002940:	f7ff fff6 	bl	8002930 <HAL_GetTick>
 8002944:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002946:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002948:	bf1e      	ittt	ne
 800294a:	4b04      	ldrne	r3, [pc, #16]	; (800295c <HAL_Delay+0x20>)
 800294c:	781b      	ldrbne	r3, [r3, #0]
 800294e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002950:	f7ff ffee 	bl	8002930 <HAL_GetTick>
 8002954:	1b40      	subs	r0, r0, r5
 8002956:	42a0      	cmp	r0, r4
 8002958:	d3fa      	bcc.n	8002950 <HAL_Delay+0x14>
  {
  }
}
 800295a:	bd38      	pop	{r3, r4, r5, pc}
 800295c:	2000001c 	.word	0x2000001c

08002960 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002960:	4a07      	ldr	r2, [pc, #28]	; (8002980 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002962:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002964:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002966:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800296a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800296e:	041b      	lsls	r3, r3, #16
 8002970:	0c1b      	lsrs	r3, r3, #16
 8002972:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800297a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800297c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800297e:	4770      	bx	lr
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002984:	4b17      	ldr	r3, [pc, #92]	; (80029e4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002986:	b570      	push	{r4, r5, r6, lr}
 8002988:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800298a:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800298e:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002992:	f1c4 0507 	rsb	r5, r4, #7
 8002996:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002998:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800299c:	bf28      	it	cs
 800299e:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029a0:	2b06      	cmp	r3, #6
 80029a2:	bf98      	it	ls
 80029a4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a6:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029aa:	bf88      	it	hi
 80029ac:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029ae:	ea21 0303 	bic.w	r3, r1, r3
 80029b2:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029b4:	fa06 f404 	lsl.w	r4, r6, r4
 80029b8:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 80029bc:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029be:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c2:	bfa8      	it	ge
 80029c4:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 80029c8:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029cc:	bfb8      	it	lt
 80029ce:	4a06      	ldrlt	r2, [pc, #24]	; (80029e8 <HAL_NVIC_SetPriority+0x64>)
 80029d0:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d2:	bfab      	itete	ge
 80029d4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029dc:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e0:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80029e2:	bd70      	pop	{r4, r5, r6, pc}
 80029e4:	e000ed00 	.word	0xe000ed00
 80029e8:	e000ed14 	.word	0xe000ed14

080029ec <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80029ec:	2800      	cmp	r0, #0
 80029ee:	db08      	blt.n	8002a02 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029f0:	2301      	movs	r3, #1
 80029f2:	0942      	lsrs	r2, r0, #5
 80029f4:	f000 001f 	and.w	r0, r0, #31
 80029f8:	fa03 f000 	lsl.w	r0, r3, r0
 80029fc:	4b01      	ldr	r3, [pc, #4]	; (8002a04 <HAL_NVIC_EnableIRQ+0x18>)
 80029fe:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002a02:	4770      	bx	lr
 8002a04:	e000e100 	.word	0xe000e100

08002a08 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a08:	3801      	subs	r0, #1
 8002a0a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002a0e:	d20a      	bcs.n	8002a26 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a10:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a12:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a14:	4a06      	ldr	r2, [pc, #24]	; (8002a30 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a16:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a18:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a1c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a1e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a20:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002a26:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	e000e010 	.word	0xe000e010
 8002a30:	e000ed00 	.word	0xe000ed00

08002a34 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a34:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8002a38:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d003      	beq.n	8002a46 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a3e:	2304      	movs	r3, #4
 8002a40:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8002a42:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8002a44:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a46:	6803      	ldr	r3, [r0, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	f022 020e 	bic.w	r2, r2, #14
 8002a4e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	f022 0201 	bic.w	r2, r2, #1
 8002a56:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a58:	4a18      	ldr	r2, [pc, #96]	; (8002abc <HAL_DMA_Abort_IT+0x88>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d01f      	beq.n	8002a9e <HAL_DMA_Abort_IT+0x6a>
 8002a5e:	3214      	adds	r2, #20
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d01e      	beq.n	8002aa2 <HAL_DMA_Abort_IT+0x6e>
 8002a64:	3214      	adds	r2, #20
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d01d      	beq.n	8002aa6 <HAL_DMA_Abort_IT+0x72>
 8002a6a:	3214      	adds	r2, #20
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d01d      	beq.n	8002aac <HAL_DMA_Abort_IT+0x78>
 8002a70:	3214      	adds	r2, #20
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d01d      	beq.n	8002ab2 <HAL_DMA_Abort_IT+0x7e>
 8002a76:	3214      	adds	r2, #20
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	bf0c      	ite	eq
 8002a7c:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8002a80:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8002a84:	4a0e      	ldr	r2, [pc, #56]	; (8002ac0 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 8002a86:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a88:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 8002a90:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8002a92:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002a96:	b17b      	cbz	r3, 8002ab8 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 8002a98:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002a9a:	4620      	mov	r0, r4
 8002a9c:	e7d2      	b.n	8002a44 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e7f0      	b.n	8002a84 <HAL_DMA_Abort_IT+0x50>
 8002aa2:	2310      	movs	r3, #16
 8002aa4:	e7ee      	b.n	8002a84 <HAL_DMA_Abort_IT+0x50>
 8002aa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aaa:	e7eb      	b.n	8002a84 <HAL_DMA_Abort_IT+0x50>
 8002aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ab0:	e7e8      	b.n	8002a84 <HAL_DMA_Abort_IT+0x50>
 8002ab2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ab6:	e7e5      	b.n	8002a84 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8002ab8:	4618      	mov	r0, r3
 8002aba:	e7c3      	b.n	8002a44 <HAL_DMA_Abort_IT+0x10>
 8002abc:	40020008 	.word	0x40020008
 8002ac0:	40020000 	.word	0x40020000

08002ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ac4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ac8:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8002aca:	4626      	mov	r6, r4
 8002acc:	4b65      	ldr	r3, [pc, #404]	; (8002c64 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ace:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8002c74 <HAL_GPIO_Init+0x1b0>
 8002ad2:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8002c78 <HAL_GPIO_Init+0x1b4>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ad6:	680a      	ldr	r2, [r1, #0]
 8002ad8:	fa32 f506 	lsrs.w	r5, r2, r6
 8002adc:	d102      	bne.n	8002ae4 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8002ade:	b003      	add	sp, #12
 8002ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8002ae4:	f04f 0801 	mov.w	r8, #1
 8002ae8:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aec:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8002af0:	4590      	cmp	r8, r2
 8002af2:	d17e      	bne.n	8002bf2 <HAL_GPIO_Init+0x12e>
      switch (GPIO_Init->Mode)
 8002af4:	684d      	ldr	r5, [r1, #4]
 8002af6:	2d12      	cmp	r5, #18
 8002af8:	f000 80a9 	beq.w	8002c4e <HAL_GPIO_Init+0x18a>
 8002afc:	f200 8082 	bhi.w	8002c04 <HAL_GPIO_Init+0x140>
 8002b00:	2d02      	cmp	r5, #2
 8002b02:	f000 80a1 	beq.w	8002c48 <HAL_GPIO_Init+0x184>
 8002b06:	d876      	bhi.n	8002bf6 <HAL_GPIO_Init+0x132>
 8002b08:	2d00      	cmp	r5, #0
 8002b0a:	f000 8088 	beq.w	8002c1e <HAL_GPIO_Init+0x15a>
 8002b0e:	2d01      	cmp	r5, #1
 8002b10:	f000 8098 	beq.w	8002c44 <HAL_GPIO_Init+0x180>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b14:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b18:	2aff      	cmp	r2, #255	; 0xff
 8002b1a:	bf93      	iteet	ls
 8002b1c:	4682      	movls	sl, r0
 8002b1e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8002b22:	3d08      	subhi	r5, #8
 8002b24:	f8d0 b000 	ldrls.w	fp, [r0]
 8002b28:	bf92      	itee	ls
 8002b2a:	00b5      	lslls	r5, r6, #2
 8002b2c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8002b30:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b32:	fa09 f805 	lsl.w	r8, r9, r5
 8002b36:	ea2b 0808 	bic.w	r8, fp, r8
 8002b3a:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b3e:	bf88      	it	hi
 8002b40:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b44:	ea48 0505 	orr.w	r5, r8, r5
 8002b48:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b4c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8002b50:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8002b54:	d04d      	beq.n	8002bf2 <HAL_GPIO_Init+0x12e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b56:	4f44      	ldr	r7, [pc, #272]	; (8002c68 <HAL_GPIO_Init+0x1a4>)
 8002b58:	f026 0803 	bic.w	r8, r6, #3
 8002b5c:	69bd      	ldr	r5, [r7, #24]
 8002b5e:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8002b62:	f045 0501 	orr.w	r5, r5, #1
 8002b66:	61bd      	str	r5, [r7, #24]
 8002b68:	69bd      	ldr	r5, [r7, #24]
 8002b6a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8002b6e:	f005 0501 	and.w	r5, r5, #1
 8002b72:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b74:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b78:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b7a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8002b7e:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b82:	fa09 f90b 	lsl.w	r9, r9, fp
 8002b86:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b8a:	4d38      	ldr	r5, [pc, #224]	; (8002c6c <HAL_GPIO_Init+0x1a8>)
 8002b8c:	42a8      	cmp	r0, r5
 8002b8e:	d063      	beq.n	8002c58 <HAL_GPIO_Init+0x194>
 8002b90:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002b94:	42a8      	cmp	r0, r5
 8002b96:	d061      	beq.n	8002c5c <HAL_GPIO_Init+0x198>
 8002b98:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002b9c:	42a8      	cmp	r0, r5
 8002b9e:	d05f      	beq.n	8002c60 <HAL_GPIO_Init+0x19c>
 8002ba0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002ba4:	42a8      	cmp	r0, r5
 8002ba6:	bf0c      	ite	eq
 8002ba8:	2503      	moveq	r5, #3
 8002baa:	2504      	movne	r5, #4
 8002bac:	fa05 f50b 	lsl.w	r5, r5, fp
 8002bb0:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8002bb4:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8002bb8:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bba:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002bbe:	bf14      	ite	ne
 8002bc0:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002bc2:	4395      	biceq	r5, r2
 8002bc4:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8002bc6:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bc8:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002bcc:	bf14      	ite	ne
 8002bce:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002bd0:	4395      	biceq	r5, r2
 8002bd2:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002bd4:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bd6:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002bda:	bf14      	ite	ne
 8002bdc:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002bde:	4395      	biceq	r5, r2
 8002be0:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8002be2:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002be4:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002be8:	bf14      	ite	ne
 8002bea:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002bec:	ea25 0202 	biceq.w	r2, r5, r2
 8002bf0:	60da      	str	r2, [r3, #12]
	position++;
 8002bf2:	3601      	adds	r6, #1
 8002bf4:	e76f      	b.n	8002ad6 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8002bf6:	2d03      	cmp	r5, #3
 8002bf8:	d022      	beq.n	8002c40 <HAL_GPIO_Init+0x17c>
 8002bfa:	2d11      	cmp	r5, #17
 8002bfc:	d18a      	bne.n	8002b14 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002bfe:	68cc      	ldr	r4, [r1, #12]
 8002c00:	3404      	adds	r4, #4
          break;
 8002c02:	e787      	b.n	8002b14 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8002c04:	4f1a      	ldr	r7, [pc, #104]	; (8002c70 <HAL_GPIO_Init+0x1ac>)
 8002c06:	42bd      	cmp	r5, r7
 8002c08:	d009      	beq.n	8002c1e <HAL_GPIO_Init+0x15a>
 8002c0a:	d812      	bhi.n	8002c32 <HAL_GPIO_Init+0x16e>
 8002c0c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8002c7c <HAL_GPIO_Init+0x1b8>
 8002c10:	454d      	cmp	r5, r9
 8002c12:	d004      	beq.n	8002c1e <HAL_GPIO_Init+0x15a>
 8002c14:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8002c18:	454d      	cmp	r5, r9
 8002c1a:	f47f af7b 	bne.w	8002b14 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c1e:	688c      	ldr	r4, [r1, #8]
 8002c20:	b1c4      	cbz	r4, 8002c54 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c22:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8002c24:	bf0c      	ite	eq
 8002c26:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8002c2a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c2e:	2408      	movs	r4, #8
 8002c30:	e770      	b.n	8002b14 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8002c32:	4565      	cmp	r5, ip
 8002c34:	d0f3      	beq.n	8002c1e <HAL_GPIO_Init+0x15a>
 8002c36:	4575      	cmp	r5, lr
 8002c38:	d0f1      	beq.n	8002c1e <HAL_GPIO_Init+0x15a>
 8002c3a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8002c80 <HAL_GPIO_Init+0x1bc>
 8002c3e:	e7eb      	b.n	8002c18 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c40:	2400      	movs	r4, #0
 8002c42:	e767      	b.n	8002b14 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c44:	68cc      	ldr	r4, [r1, #12]
          break;
 8002c46:	e765      	b.n	8002b14 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c48:	68cc      	ldr	r4, [r1, #12]
 8002c4a:	3408      	adds	r4, #8
          break;
 8002c4c:	e762      	b.n	8002b14 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c4e:	68cc      	ldr	r4, [r1, #12]
 8002c50:	340c      	adds	r4, #12
          break;
 8002c52:	e75f      	b.n	8002b14 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c54:	2404      	movs	r4, #4
 8002c56:	e75d      	b.n	8002b14 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c58:	2500      	movs	r5, #0
 8002c5a:	e7a7      	b.n	8002bac <HAL_GPIO_Init+0xe8>
 8002c5c:	2501      	movs	r5, #1
 8002c5e:	e7a5      	b.n	8002bac <HAL_GPIO_Init+0xe8>
 8002c60:	2502      	movs	r5, #2
 8002c62:	e7a3      	b.n	8002bac <HAL_GPIO_Init+0xe8>
 8002c64:	40010400 	.word	0x40010400
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	40010800 	.word	0x40010800
 8002c70:	10210000 	.word	0x10210000
 8002c74:	10310000 	.word	0x10310000
 8002c78:	10320000 	.word	0x10320000
 8002c7c:	10110000 	.word	0x10110000
 8002c80:	10220000 	.word	0x10220000

08002c84 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c84:	6883      	ldr	r3, [r0, #8]
 8002c86:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002c88:	bf14      	ite	ne
 8002c8a:	2001      	movne	r0, #1
 8002c8c:	2000      	moveq	r0, #0
 8002c8e:	4770      	bx	lr

08002c90 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c90:	b10a      	cbz	r2, 8002c96 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c92:	6101      	str	r1, [r0, #16]
  }
}
 8002c94:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c96:	0409      	lsls	r1, r1, #16
 8002c98:	e7fb      	b.n	8002c92 <HAL_GPIO_WritePin+0x2>

08002c9a <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c9a:	6801      	ldr	r1, [r0, #0]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	694b      	ldr	r3, [r1, #20]
 8002ca0:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8002ca4:	d010      	beq.n	8002cc8 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ca6:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8002caa:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8002cac:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002cae:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002cb0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cb4:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cb8:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cba:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cbe:	f043 0304 	orr.w	r3, r3, #4
 8002cc2:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8002cc4:	2001      	movs	r0, #1
 8002cc6:	4770      	bx	lr
  }
  return HAL_OK;
 8002cc8:	4618      	mov	r0, r3
}
 8002cca:	4770      	bx	lr

08002ccc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8002ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cd0:	4604      	mov	r4, r0
 8002cd2:	4616      	mov	r6, r2
 8002cd4:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cd6:	b28f      	uxth	r7, r1
 8002cd8:	6825      	ldr	r5, [r4, #0]
 8002cda:	6968      	ldr	r0, [r5, #20]
 8002cdc:	ea37 0000 	bics.w	r0, r7, r0
 8002ce0:	d017      	beq.n	8002d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ce2:	696b      	ldr	r3, [r5, #20]
 8002ce4:	055a      	lsls	r2, r3, #21
 8002ce6:	d516      	bpl.n	8002d16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce8:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cea:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cf0:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cf2:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8002cf6:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cfc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d00:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d04:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002d06:	f042 0204 	orr.w	r2, r2, #4
        return HAL_ERROR;
 8002d0a:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d0c:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002d0e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002d16:	1c73      	adds	r3, r6, #1
 8002d18:	d0df      	beq.n	8002cda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d1a:	f7ff fe09 	bl	8002930 <HAL_GetTick>
 8002d1e:	eba0 0008 	sub.w	r0, r0, r8
 8002d22:	42b0      	cmp	r0, r6
 8002d24:	d801      	bhi.n	8002d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>
 8002d26:	2e00      	cmp	r6, #0
 8002d28:	d1d6      	bne.n	8002cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d2a:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d2c:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d2e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d30:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d34:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d38:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002d3a:	f042 0220 	orr.w	r2, r2, #32
 8002d3e:	e7e4      	b.n	8002d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>

08002d40 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8002d40:	b570      	push	{r4, r5, r6, lr}
 8002d42:	4604      	mov	r4, r0
 8002d44:	460d      	mov	r5, r1
 8002d46:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d48:	6823      	ldr	r3, [r4, #0]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	075b      	lsls	r3, r3, #29
 8002d4e:	d501      	bpl.n	8002d54 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8002d50:	2000      	movs	r0, #0
}
 8002d52:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d54:	4620      	mov	r0, r4
 8002d56:	f7ff ffa0 	bl	8002c9a <I2C_IsAcknowledgeFailed>
 8002d5a:	b9a8      	cbnz	r0, 8002d88 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8002d5c:	1c6a      	adds	r2, r5, #1
 8002d5e:	d0f3      	beq.n	8002d48 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d60:	f7ff fde6 	bl	8002930 <HAL_GetTick>
 8002d64:	1b80      	subs	r0, r0, r6
 8002d66:	42a8      	cmp	r0, r5
 8002d68:	d801      	bhi.n	8002d6e <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8002d6a:	2d00      	cmp	r5, #0
 8002d6c:	d1ec      	bne.n	8002d48 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d6e:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d70:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d72:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d74:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d78:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d7c:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002d7e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d82:	f042 0220 	orr.w	r2, r2, #32
 8002d86:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002d88:	2001      	movs	r0, #1
 8002d8a:	e7e2      	b.n	8002d52 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

08002d8c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8002d8c:	b570      	push	{r4, r5, r6, lr}
 8002d8e:	4604      	mov	r4, r0
 8002d90:	460d      	mov	r5, r1
 8002d92:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d94:	6820      	ldr	r0, [r4, #0]
 8002d96:	6943      	ldr	r3, [r0, #20]
 8002d98:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8002d9c:	d001      	beq.n	8002da2 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8002d9e:	2000      	movs	r0, #0
 8002da0:	e010      	b.n	8002dc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002da2:	6942      	ldr	r2, [r0, #20]
 8002da4:	06d2      	lsls	r2, r2, #27
 8002da6:	d50e      	bpl.n	8002dc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002da8:	f06f 0210 	mvn.w	r2, #16
 8002dac:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dae:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002db0:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002db2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002db6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002dba:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002dbc:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002dbe:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002dc0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002dc4:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dc6:	f7ff fdb3 	bl	8002930 <HAL_GetTick>
 8002dca:	1b80      	subs	r0, r0, r6
 8002dcc:	42a8      	cmp	r0, r5
 8002dce:	d801      	bhi.n	8002dd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8002dd0:	2d00      	cmp	r5, #0
 8002dd2:	d1df      	bne.n	8002d94 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002dd4:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002dd6:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002dd8:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002dda:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002dde:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002de2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002de4:	f042 0220 	orr.w	r2, r2, #32
 8002de8:	e7e8      	b.n	8002dbc <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08002dea <I2C_WaitOnFlagUntilTimeout>:
{
 8002dea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002dee:	4604      	mov	r4, r0
 8002df0:	4690      	mov	r8, r2
 8002df2:	461f      	mov	r7, r3
 8002df4:	9e08      	ldr	r6, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002df6:	ea4f 4911 	mov.w	r9, r1, lsr #16
 8002dfa:	b28d      	uxth	r5, r1
 8002dfc:	6821      	ldr	r1, [r4, #0]
 8002dfe:	f1b9 0f01 	cmp.w	r9, #1
 8002e02:	bf0c      	ite	eq
 8002e04:	694b      	ldreq	r3, [r1, #20]
 8002e06:	698b      	ldrne	r3, [r1, #24]
 8002e08:	ea35 0303 	bics.w	r3, r5, r3
 8002e0c:	bf0c      	ite	eq
 8002e0e:	2301      	moveq	r3, #1
 8002e10:	2300      	movne	r3, #0
 8002e12:	4598      	cmp	r8, r3
 8002e14:	d001      	beq.n	8002e1a <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8002e16:	2000      	movs	r0, #0
 8002e18:	e016      	b.n	8002e48 <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 8002e1a:	1c7b      	adds	r3, r7, #1
 8002e1c:	d0ef      	beq.n	8002dfe <I2C_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e1e:	f7ff fd87 	bl	8002930 <HAL_GetTick>
 8002e22:	1b80      	subs	r0, r0, r6
 8002e24:	42b8      	cmp	r0, r7
 8002e26:	d801      	bhi.n	8002e2c <I2C_WaitOnFlagUntilTimeout+0x42>
 8002e28:	2f00      	cmp	r7, #0
 8002e2a:	d1e7      	bne.n	8002dfc <I2C_WaitOnFlagUntilTimeout+0x12>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e2c:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e2e:	2220      	movs	r2, #32
        __HAL_UNLOCK(hi2c);
 8002e30:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e32:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e34:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e38:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e3c:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002e3e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e42:	f042 0220 	orr.w	r2, r2, #32
 8002e46:	6422      	str	r2, [r4, #64]	; 0x40
}
 8002e48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002e4c <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8002e4c:	b570      	push	{r4, r5, r6, lr}
 8002e4e:	4604      	mov	r4, r0
 8002e50:	460d      	mov	r5, r1
 8002e52:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e54:	6823      	ldr	r3, [r4, #0]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	061b      	lsls	r3, r3, #24
 8002e5a:	d501      	bpl.n	8002e60 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8002e5c:	2000      	movs	r0, #0
}
 8002e5e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e60:	4620      	mov	r0, r4
 8002e62:	f7ff ff1a 	bl	8002c9a <I2C_IsAcknowledgeFailed>
 8002e66:	b9a8      	cbnz	r0, 8002e94 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8002e68:	1c6a      	adds	r2, r5, #1
 8002e6a:	d0f3      	beq.n	8002e54 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e6c:	f7ff fd60 	bl	8002930 <HAL_GetTick>
 8002e70:	1b80      	subs	r0, r0, r6
 8002e72:	42a8      	cmp	r0, r5
 8002e74:	d801      	bhi.n	8002e7a <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8002e76:	2d00      	cmp	r5, #0
 8002e78:	d1ec      	bne.n	8002e54 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e7a:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e7c:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e7e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e80:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e84:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e88:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002e8a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e8e:	f042 0220 	orr.w	r2, r2, #32
 8002e92:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002e94:	2001      	movs	r0, #1
 8002e96:	e7e2      	b.n	8002e5e <I2C_WaitOnTXEFlagUntilTimeout+0x12>

08002e98 <I2C_RequestMemoryWrite>:
{
 8002e98:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002e9c:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e9e:	6802      	ldr	r2, [r0, #0]
{
 8002ea0:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ea2:	6813      	ldr	r3, [r2, #0]
{
 8002ea4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eaa:	6013      	str	r3, [r2, #0]
{
 8002eac:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002eae:	9600      	str	r6, [sp, #0]
 8002eb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8002eb8:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002eba:	f7ff ff96 	bl	8002dea <I2C_WaitOnFlagUntilTimeout>
 8002ebe:	b118      	cbz	r0, 8002ec8 <I2C_RequestMemoryWrite+0x30>
      return HAL_ERROR;
 8002ec0:	2001      	movs	r0, #1
}
 8002ec2:	b004      	add	sp, #16
 8002ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ec8:	6823      	ldr	r3, [r4, #0]
 8002eca:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8002ece:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ed0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002ed2:	4633      	mov	r3, r6
 8002ed4:	4916      	ldr	r1, [pc, #88]	; (8002f30 <I2C_RequestMemoryWrite+0x98>)
 8002ed6:	4620      	mov	r0, r4
 8002ed8:	f7ff fef8 	bl	8002ccc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002edc:	2800      	cmp	r0, #0
 8002ede:	d1ef      	bne.n	8002ec0 <I2C_RequestMemoryWrite+0x28>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ee0:	6823      	ldr	r3, [r4, #0]
 8002ee2:	9003      	str	r0, [sp, #12]
 8002ee4:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ee6:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ee8:	9203      	str	r2, [sp, #12]
 8002eea:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eec:	4632      	mov	r2, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eee:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ef0:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ef2:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ef4:	f7ff ffaa 	bl	8002e4c <I2C_WaitOnTXEFlagUntilTimeout>
 8002ef8:	b140      	cbz	r0, 8002f0c <I2C_RequestMemoryWrite+0x74>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002efa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002efc:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002efe:	bf01      	itttt	eq
 8002f00:	6822      	ldreq	r2, [r4, #0]
 8002f02:	6813      	ldreq	r3, [r2, #0]
 8002f04:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8002f08:	6013      	streq	r3, [r2, #0]
 8002f0a:	e7d9      	b.n	8002ec0 <I2C_RequestMemoryWrite+0x28>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f0c:	f1b8 0f01 	cmp.w	r8, #1
 8002f10:	6823      	ldr	r3, [r4, #0]
 8002f12:	d102      	bne.n	8002f1a <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f14:	b2ed      	uxtb	r5, r5
 8002f16:	611d      	str	r5, [r3, #16]
 8002f18:	e7d3      	b.n	8002ec2 <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f1a:	0a2a      	lsrs	r2, r5, #8
 8002f1c:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f1e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002f20:	4632      	mov	r2, r6
 8002f22:	4620      	mov	r0, r4
 8002f24:	f7ff ff92 	bl	8002e4c <I2C_WaitOnTXEFlagUntilTimeout>
 8002f28:	2800      	cmp	r0, #0
 8002f2a:	d1e6      	bne.n	8002efa <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f2c:	6823      	ldr	r3, [r4, #0]
 8002f2e:	e7f1      	b.n	8002f14 <I2C_RequestMemoryWrite+0x7c>
 8002f30:	00010002 	.word	0x00010002

08002f34 <HAL_I2C_Init>:
{
 8002f34:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8002f36:	4604      	mov	r4, r0
 8002f38:	b908      	cbnz	r0, 8002f3e <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8002f3a:	2001      	movs	r0, #1
}
 8002f3c:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f3e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002f42:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002f46:	b91b      	cbnz	r3, 8002f50 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8002f48:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002f4c:	f7ff faf0 	bl	8002530 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f50:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8002f52:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f54:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002f58:	6813      	ldr	r3, [r2, #0]
 8002f5a:	f023 0301 	bic.w	r3, r3, #1
 8002f5e:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f60:	f000 fe84 	bl	8003c6c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f64:	6863      	ldr	r3, [r4, #4]
 8002f66:	4a41      	ldr	r2, [pc, #260]	; (800306c <HAL_I2C_Init+0x138>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d84d      	bhi.n	8003008 <HAL_I2C_Init+0xd4>
 8002f6c:	4a40      	ldr	r2, [pc, #256]	; (8003070 <HAL_I2C_Init+0x13c>)
 8002f6e:	4290      	cmp	r0, r2
 8002f70:	d9e3      	bls.n	8002f3a <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8002f72:	4940      	ldr	r1, [pc, #256]	; (8003074 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f74:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8002f76:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f7a:	6855      	ldr	r5, [r2, #4]
 8002f7c:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002f80:	430d      	orrs	r5, r1
 8002f82:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f84:	6a15      	ldr	r5, [r2, #32]
 8002f86:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002f8a:	3101      	adds	r1, #1
 8002f8c:	4329      	orrs	r1, r5
 8002f8e:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f90:	69d1      	ldr	r1, [r2, #28]
 8002f92:	4d36      	ldr	r5, [pc, #216]	; (800306c <HAL_I2C_Init+0x138>)
 8002f94:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8002f98:	42ab      	cmp	r3, r5
 8002f9a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002f9e:	f100 30ff 	add.w	r0, r0, #4294967295
 8002fa2:	d848      	bhi.n	8003036 <HAL_I2C_Init+0x102>
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	fbb0 f0f3 	udiv	r0, r0, r3
 8002faa:	1c43      	adds	r3, r0, #1
 8002fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb0:	2b04      	cmp	r3, #4
 8002fb2:	bf38      	it	cc
 8002fb4:	2304      	movcc	r3, #4
 8002fb6:	430b      	orrs	r3, r1
 8002fb8:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fba:	6811      	ldr	r1, [r2, #0]
 8002fbc:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8002fc0:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8002fc4:	4303      	orrs	r3, r0
 8002fc6:	430b      	orrs	r3, r1
 8002fc8:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fca:	6891      	ldr	r1, [r2, #8]
 8002fcc:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8002fd0:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8002fd4:	4303      	orrs	r3, r0
 8002fd6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002fda:	430b      	orrs	r3, r1
 8002fdc:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fde:	68d1      	ldr	r1, [r2, #12]
 8002fe0:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002fe4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002fe8:	4303      	orrs	r3, r0
 8002fea:	430b      	orrs	r3, r1
 8002fec:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002fee:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ff0:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8002ff2:	f043 0301 	orr.w	r3, r3, #1
 8002ff6:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8002ff8:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ffa:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ffc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003000:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003002:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8003006:	e799      	b.n	8002f3c <HAL_I2C_Init+0x8>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003008:	4a1b      	ldr	r2, [pc, #108]	; (8003078 <HAL_I2C_Init+0x144>)
 800300a:	4290      	cmp	r0, r2
 800300c:	d995      	bls.n	8002f3a <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 800300e:	4e19      	ldr	r6, [pc, #100]	; (8003074 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003010:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8003014:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003018:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800301a:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800301c:	6855      	ldr	r5, [r2, #4]
 800301e:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8003022:	4335      	orrs	r5, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003024:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003028:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800302a:	6a15      	ldr	r5, [r2, #32]
 800302c:	fbb1 f1f6 	udiv	r1, r1, r6
 8003030:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8003034:	e7a9      	b.n	8002f8a <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003036:	68a5      	ldr	r5, [r4, #8]
 8003038:	b955      	cbnz	r5, 8003050 <HAL_I2C_Init+0x11c>
 800303a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800303e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003042:	1c43      	adds	r3, r0, #1
 8003044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003048:	b16b      	cbz	r3, 8003066 <HAL_I2C_Init+0x132>
 800304a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800304e:	e7b2      	b.n	8002fb6 <HAL_I2C_Init+0x82>
 8003050:	2519      	movs	r5, #25
 8003052:	436b      	muls	r3, r5
 8003054:	fbb0 f0f3 	udiv	r0, r0, r3
 8003058:	1c43      	adds	r3, r0, #1
 800305a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800305e:	b113      	cbz	r3, 8003066 <HAL_I2C_Init+0x132>
 8003060:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003064:	e7a7      	b.n	8002fb6 <HAL_I2C_Init+0x82>
 8003066:	2301      	movs	r3, #1
 8003068:	e7a5      	b.n	8002fb6 <HAL_I2C_Init+0x82>
 800306a:	bf00      	nop
 800306c:	000186a0 	.word	0x000186a0
 8003070:	001e847f 	.word	0x001e847f
 8003074:	000f4240 	.word	0x000f4240
 8003078:	003d08ff 	.word	0x003d08ff

0800307c <HAL_I2C_Master_Transmit>:
{
 800307c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8003080:	4604      	mov	r4, r0
 8003082:	461f      	mov	r7, r3
 8003084:	460d      	mov	r5, r1
 8003086:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8003088:	f7ff fc52 	bl	8002930 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800308c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8003090:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003092:	2b20      	cmp	r3, #32
 8003094:	d004      	beq.n	80030a0 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8003096:	2502      	movs	r5, #2
}
 8003098:	4628      	mov	r0, r5
 800309a:	b004      	add	sp, #16
 800309c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030a0:	9000      	str	r0, [sp, #0]
 80030a2:	2319      	movs	r3, #25
 80030a4:	2201      	movs	r2, #1
 80030a6:	4958      	ldr	r1, [pc, #352]	; (8003208 <HAL_I2C_Master_Transmit+0x18c>)
 80030a8:	4620      	mov	r0, r4
 80030aa:	f7ff fe9e 	bl	8002dea <I2C_WaitOnFlagUntilTimeout>
 80030ae:	2800      	cmp	r0, #0
 80030b0:	d1f1      	bne.n	8003096 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 80030b2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d0ed      	beq.n	8003096 <HAL_I2C_Master_Transmit+0x1a>
 80030ba:	2301      	movs	r3, #1
 80030bc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030c0:	6823      	ldr	r3, [r4, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80030c6:	bf5e      	ittt	pl
 80030c8:	681a      	ldrpl	r2, [r3, #0]
 80030ca:	f042 0201 	orrpl.w	r2, r2, #1
 80030ce:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030d6:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80030d8:	2221      	movs	r2, #33	; 0x21
 80030da:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030de:	2210      	movs	r2, #16
 80030e0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030e4:	2200      	movs	r2, #0
 80030e6:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80030e8:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030ea:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80030ec:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80030f0:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030f2:	4a46      	ldr	r2, [pc, #280]	; (800320c <HAL_I2C_Master_Transmit+0x190>)
 80030f4:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80030f6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80030f8:	2a08      	cmp	r2, #8
 80030fa:	d004      	beq.n	8003106 <HAL_I2C_Master_Transmit+0x8a>
 80030fc:	2a01      	cmp	r2, #1
 80030fe:	d002      	beq.n	8003106 <HAL_I2C_Master_Transmit+0x8a>
 8003100:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8003104:	d104      	bne.n	8003110 <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	e002      	b.n	8003116 <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003110:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003112:	2a12      	cmp	r2, #18
 8003114:	d0f7      	beq.n	8003106 <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003116:	9600      	str	r6, [sp, #0]
 8003118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800311a:	2200      	movs	r2, #0
 800311c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003120:	4620      	mov	r0, r4
 8003122:	f7ff fe62 	bl	8002dea <I2C_WaitOnFlagUntilTimeout>
 8003126:	b108      	cbz	r0, 800312c <HAL_I2C_Master_Transmit+0xb0>
        return HAL_ERROR;
 8003128:	2501      	movs	r5, #1
 800312a:	e7b5      	b.n	8003098 <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800312c:	6923      	ldr	r3, [r4, #16]
 800312e:	6822      	ldr	r2, [r4, #0]
 8003130:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003134:	d121      	bne.n	800317a <HAL_I2C_Master_Transmit+0xfe>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003136:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 800313a:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800313c:	4633      	mov	r3, r6
 800313e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003140:	4933      	ldr	r1, [pc, #204]	; (8003210 <HAL_I2C_Master_Transmit+0x194>)
 8003142:	4620      	mov	r0, r4
 8003144:	f7ff fdc2 	bl	8002ccc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003148:	4605      	mov	r5, r0
 800314a:	2800      	cmp	r0, #0
 800314c:	d1ec      	bne.n	8003128 <HAL_I2C_Master_Transmit+0xac>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800314e:	6823      	ldr	r3, [r4, #0]
 8003150:	9003      	str	r0, [sp, #12]
 8003152:	695a      	ldr	r2, [r3, #20]
 8003154:	9203      	str	r2, [sp, #12]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	9303      	str	r3, [sp, #12]
 800315a:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 800315c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800315e:	b9f3      	cbnz	r3, 800319e <HAL_I2C_Master_Transmit+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003160:	6821      	ldr	r1, [r4, #0]
 8003162:	680a      	ldr	r2, [r1, #0]
 8003164:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003168:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800316a:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 800316c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8003170:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003174:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8003178:	e78e      	b.n	8003098 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800317a:	11eb      	asrs	r3, r5, #7
 800317c:	f003 0306 	and.w	r3, r3, #6
 8003180:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8003184:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003186:	4923      	ldr	r1, [pc, #140]	; (8003214 <HAL_I2C_Master_Transmit+0x198>)
 8003188:	4633      	mov	r3, r6
 800318a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800318c:	4620      	mov	r0, r4
 800318e:	f7ff fd9d 	bl	8002ccc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003192:	2800      	cmp	r0, #0
 8003194:	d1c8      	bne.n	8003128 <HAL_I2C_Master_Transmit+0xac>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003196:	6823      	ldr	r3, [r4, #0]
 8003198:	b2ed      	uxtb	r5, r5
 800319a:	611d      	str	r5, [r3, #16]
 800319c:	e7ce      	b.n	800313c <HAL_I2C_Master_Transmit+0xc0>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800319e:	4632      	mov	r2, r6
 80031a0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80031a2:	4620      	mov	r0, r4
 80031a4:	f7ff fe52 	bl	8002e4c <I2C_WaitOnTXEFlagUntilTimeout>
 80031a8:	b140      	cbz	r0, 80031bc <HAL_I2C_Master_Transmit+0x140>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031ac:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ae:	bf01      	itttt	eq
 80031b0:	6822      	ldreq	r2, [r4, #0]
 80031b2:	6813      	ldreq	r3, [r2, #0]
 80031b4:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80031b8:	6013      	streq	r3, [r2, #0]
 80031ba:	e7b5      	b.n	8003128 <HAL_I2C_Master_Transmit+0xac>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80031be:	6820      	ldr	r0, [r4, #0]
 80031c0:	461a      	mov	r2, r3
 80031c2:	f812 1b01 	ldrb.w	r1, [r2], #1
 80031c6:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 80031c8:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80031ca:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80031cc:	3a01      	subs	r2, #1
 80031ce:	b292      	uxth	r2, r2
 80031d0:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80031d2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031d4:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 80031d6:	1e51      	subs	r1, r2, #1
 80031d8:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031da:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 80031dc:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031de:	d50a      	bpl.n	80031f6 <HAL_I2C_Master_Transmit+0x17a>
 80031e0:	b149      	cbz	r1, 80031f6 <HAL_I2C_Master_Transmit+0x17a>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031e2:	7859      	ldrb	r1, [r3, #1]
        hi2c->pBuffPtr++;
 80031e4:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031e6:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 80031e8:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80031ea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80031ec:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 80031ee:	3b01      	subs	r3, #1
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80031f4:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031f6:	4632      	mov	r2, r6
 80031f8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80031fa:	4620      	mov	r0, r4
 80031fc:	f7ff fda0 	bl	8002d40 <I2C_WaitOnBTFFlagUntilTimeout>
 8003200:	2800      	cmp	r0, #0
 8003202:	d0ab      	beq.n	800315c <HAL_I2C_Master_Transmit+0xe0>
 8003204:	e7d1      	b.n	80031aa <HAL_I2C_Master_Transmit+0x12e>
 8003206:	bf00      	nop
 8003208:	00100002 	.word	0x00100002
 800320c:	ffff0000 	.word	0xffff0000
 8003210:	00010002 	.word	0x00010002
 8003214:	00010008 	.word	0x00010008

08003218 <HAL_I2C_Master_Receive>:
{
 8003218:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800321c:	4604      	mov	r4, r0
 800321e:	b089      	sub	sp, #36	; 0x24
 8003220:	4698      	mov	r8, r3
 8003222:	460f      	mov	r7, r1
 8003224:	4691      	mov	r9, r2
 8003226:	9e10      	ldr	r6, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8003228:	f7ff fb82 	bl	8002930 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800322c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8003230:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003232:	2b20      	cmp	r3, #32
 8003234:	d004      	beq.n	8003240 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 8003236:	2702      	movs	r7, #2
}
 8003238:	4638      	mov	r0, r7
 800323a:	b009      	add	sp, #36	; 0x24
 800323c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003240:	9000      	str	r0, [sp, #0]
 8003242:	2319      	movs	r3, #25
 8003244:	2201      	movs	r2, #1
 8003246:	499d      	ldr	r1, [pc, #628]	; (80034bc <HAL_I2C_Master_Receive+0x2a4>)
 8003248:	4620      	mov	r0, r4
 800324a:	f7ff fdce 	bl	8002dea <I2C_WaitOnFlagUntilTimeout>
 800324e:	2800      	cmp	r0, #0
 8003250:	d1f1      	bne.n	8003236 <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 8003252:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003256:	2b01      	cmp	r3, #1
 8003258:	d0ed      	beq.n	8003236 <HAL_I2C_Master_Receive+0x1e>
 800325a:	2301      	movs	r3, #1
 800325c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003260:	6823      	ldr	r3, [r4, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8003266:	bf5e      	ittt	pl
 8003268:	681a      	ldrpl	r2, [r3, #0]
 800326a:	f042 0201 	orrpl.w	r2, r2, #1
 800326e:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003276:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003278:	2222      	movs	r2, #34	; 0x22
 800327a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800327e:	2210      	movs	r2, #16
 8003280:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003284:	2200      	movs	r2, #0
 8003286:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8003288:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800328c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 800328e:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8003292:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003294:	4a8a      	ldr	r2, [pc, #552]	; (80034c0 <HAL_I2C_Master_Receive+0x2a8>)
 8003296:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003298:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800329a:	6819      	ldr	r1, [r3, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800329c:	2a08      	cmp	r2, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800329e:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80032a2:	6019      	str	r1, [r3, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032a4:	d004      	beq.n	80032b0 <HAL_I2C_Master_Receive+0x98>
 80032a6:	2a01      	cmp	r2, #1
 80032a8:	d002      	beq.n	80032b0 <HAL_I2C_Master_Receive+0x98>
 80032aa:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80032ae:	d104      	bne.n	80032ba <HAL_I2C_Master_Receive+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	e002      	b.n	80032c0 <HAL_I2C_Master_Receive+0xa8>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80032ba:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80032bc:	2a11      	cmp	r2, #17
 80032be:	d0f7      	beq.n	80032b0 <HAL_I2C_Master_Receive+0x98>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032c0:	9500      	str	r5, [sp, #0]
 80032c2:	4633      	mov	r3, r6
 80032c4:	2200      	movs	r2, #0
 80032c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032ca:	4620      	mov	r0, r4
 80032cc:	f7ff fd8d 	bl	8002dea <I2C_WaitOnFlagUntilTimeout>
 80032d0:	b108      	cbz	r0, 80032d6 <HAL_I2C_Master_Receive+0xbe>
      return HAL_ERROR;
 80032d2:	2701      	movs	r7, #1
 80032d4:	e7b0      	b.n	8003238 <HAL_I2C_Master_Receive+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032d6:	6922      	ldr	r2, [r4, #16]
 80032d8:	6823      	ldr	r3, [r4, #0]
 80032da:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80032de:	d123      	bne.n	8003328 <HAL_I2C_Master_Receive+0x110>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80032e0:	f047 0701 	orr.w	r7, r7, #1
 80032e4:	b2ff      	uxtb	r7, r7
 80032e6:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032e8:	462b      	mov	r3, r5
 80032ea:	4632      	mov	r2, r6
 80032ec:	4975      	ldr	r1, [pc, #468]	; (80034c4 <HAL_I2C_Master_Receive+0x2ac>)
 80032ee:	4620      	mov	r0, r4
 80032f0:	f7ff fcec 	bl	8002ccc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032f4:	4607      	mov	r7, r0
 80032f6:	2800      	cmp	r0, #0
 80032f8:	d1eb      	bne.n	80032d2 <HAL_I2C_Master_Receive+0xba>
    if (hi2c->XferSize == 0U)
 80032fa:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80032fc:	6823      	ldr	r3, [r4, #0]
 80032fe:	2a00      	cmp	r2, #0
 8003300:	d146      	bne.n	8003390 <HAL_I2C_Master_Receive+0x178>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003302:	9003      	str	r0, [sp, #12]
 8003304:	695a      	ldr	r2, [r3, #20]
 8003306:	9203      	str	r2, [sp, #12]
 8003308:	699a      	ldr	r2, [r3, #24]
 800330a:	9203      	str	r2, [sp, #12]
 800330c:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003314:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003316:	2320      	movs	r3, #32
 8003318:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800331c:	2300      	movs	r3, #0
 800331e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8003322:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8003326:	e787      	b.n	8003238 <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003328:	ea4f 18e7 	mov.w	r8, r7, asr #7
 800332c:	f008 0806 	and.w	r8, r8, #6
 8003330:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8003334:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003336:	4964      	ldr	r1, [pc, #400]	; (80034c8 <HAL_I2C_Master_Receive+0x2b0>)
 8003338:	462b      	mov	r3, r5
 800333a:	4632      	mov	r2, r6
 800333c:	4620      	mov	r0, r4
 800333e:	f7ff fcc5 	bl	8002ccc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003342:	2800      	cmp	r0, #0
 8003344:	d1c5      	bne.n	80032d2 <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003346:	6823      	ldr	r3, [r4, #0]
 8003348:	b2ff      	uxtb	r7, r7
 800334a:	611f      	str	r7, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800334c:	4632      	mov	r2, r6
 800334e:	462b      	mov	r3, r5
 8003350:	495c      	ldr	r1, [pc, #368]	; (80034c4 <HAL_I2C_Master_Receive+0x2ac>)
 8003352:	4620      	mov	r0, r4
 8003354:	f7ff fcba 	bl	8002ccc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003358:	4602      	mov	r2, r0
 800335a:	2800      	cmp	r0, #0
 800335c:	d1b9      	bne.n	80032d2 <HAL_I2C_Master_Receive+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800335e:	6823      	ldr	r3, [r4, #0]
 8003360:	9007      	str	r0, [sp, #28]
 8003362:	6959      	ldr	r1, [r3, #20]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003364:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003366:	9107      	str	r1, [sp, #28]
 8003368:	6999      	ldr	r1, [r3, #24]
 800336a:	9107      	str	r1, [sp, #28]
 800336c:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800336e:	6819      	ldr	r1, [r3, #0]
 8003370:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003374:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003376:	9500      	str	r5, [sp, #0]
 8003378:	4633      	mov	r3, r6
 800337a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800337e:	f7ff fd34 	bl	8002dea <I2C_WaitOnFlagUntilTimeout>
 8003382:	2800      	cmp	r0, #0
 8003384:	d1a5      	bne.n	80032d2 <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003386:	6822      	ldr	r2, [r4, #0]
 8003388:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 800338c:	6113      	str	r3, [r2, #16]
 800338e:	e7ab      	b.n	80032e8 <HAL_I2C_Master_Receive+0xd0>
    else if (hi2c->XferSize == 1U)
 8003390:	2a01      	cmp	r2, #1
 8003392:	d131      	bne.n	80033f8 <HAL_I2C_Master_Receive+0x1e0>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800339a:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800339c:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800339e:	6823      	ldr	r3, [r4, #0]
 80033a0:	9004      	str	r0, [sp, #16]
 80033a2:	695a      	ldr	r2, [r3, #20]
 80033a4:	9204      	str	r2, [sp, #16]
 80033a6:	699a      	ldr	r2, [r3, #24]
 80033a8:	9204      	str	r2, [sp, #16]
 80033aa:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80033b4:	b662      	cpsie	i
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033b6:	f8df 8114 	ldr.w	r8, [pc, #276]	; 80034cc <HAL_I2C_Master_Receive+0x2b4>
    while (hi2c->XferSize > 0U)
 80033ba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d0aa      	beq.n	8003316 <HAL_I2C_Master_Receive+0xfe>
      if (hi2c->XferSize <= 3U)
 80033c0:	2b03      	cmp	r3, #3
 80033c2:	f200 8085 	bhi.w	80034d0 <HAL_I2C_Master_Receive+0x2b8>
        if (hi2c->XferSize == 1U)
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d132      	bne.n	8003430 <HAL_I2C_Master_Receive+0x218>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ca:	462a      	mov	r2, r5
 80033cc:	4631      	mov	r1, r6
 80033ce:	4620      	mov	r0, r4
 80033d0:	f7ff fcdc 	bl	8002d8c <I2C_WaitOnRXNEFlagUntilTimeout>
 80033d4:	2800      	cmp	r0, #0
 80033d6:	f47f af7c 	bne.w	80032d2 <HAL_I2C_Master_Receive+0xba>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033da:	6823      	ldr	r3, [r4, #0]
 80033dc:	691a      	ldr	r2, [r3, #16]
 80033de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80033e0:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80033e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80033e4:	3301      	adds	r3, #1
 80033e6:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80033e8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80033ea:	3b01      	subs	r3, #1
 80033ec:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80033ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80033f0:	3b01      	subs	r3, #1
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	8563      	strh	r3, [r4, #42]	; 0x2a
 80033f6:	e7e0      	b.n	80033ba <HAL_I2C_Master_Receive+0x1a2>
    else if (hi2c->XferSize == 2U)
 80033f8:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033fa:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 80033fc:	d10e      	bne.n	800341c <HAL_I2C_Master_Receive+0x204>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003402:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003404:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003406:	6823      	ldr	r3, [r4, #0]
 8003408:	9005      	str	r0, [sp, #20]
 800340a:	695a      	ldr	r2, [r3, #20]
 800340c:	9205      	str	r2, [sp, #20]
 800340e:	699a      	ldr	r2, [r3, #24]
 8003410:	9205      	str	r2, [sp, #20]
 8003412:	9a05      	ldr	r2, [sp, #20]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800341a:	e7ca      	b.n	80033b2 <HAL_I2C_Master_Receive+0x19a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800341c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003420:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003422:	9006      	str	r0, [sp, #24]
 8003424:	695a      	ldr	r2, [r3, #20]
 8003426:	9206      	str	r2, [sp, #24]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	9306      	str	r3, [sp, #24]
 800342c:	9b06      	ldr	r3, [sp, #24]
 800342e:	e7c2      	b.n	80033b6 <HAL_I2C_Master_Receive+0x19e>
        else if (hi2c->XferSize == 2U)
 8003430:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003432:	9500      	str	r5, [sp, #0]
 8003434:	4633      	mov	r3, r6
 8003436:	f04f 0200 	mov.w	r2, #0
 800343a:	4641      	mov	r1, r8
 800343c:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 800343e:	d119      	bne.n	8003474 <HAL_I2C_Master_Receive+0x25c>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003440:	f7ff fcd3 	bl	8002dea <I2C_WaitOnFlagUntilTimeout>
 8003444:	2800      	cmp	r0, #0
 8003446:	f47f af44 	bne.w	80032d2 <HAL_I2C_Master_Receive+0xba>
 800344a:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800344c:	6823      	ldr	r3, [r4, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003454:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003456:	691a      	ldr	r2, [r3, #16]
 8003458:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800345a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800345c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800345e:	3301      	adds	r3, #1
 8003460:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003462:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003464:	3b01      	subs	r3, #1
 8003466:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003468:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800346a:	3b01      	subs	r3, #1
 800346c:	b29b      	uxth	r3, r3
 800346e:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003470:	b662      	cpsie	i
 8003472:	e7b2      	b.n	80033da <HAL_I2C_Master_Receive+0x1c2>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003474:	f7ff fcb9 	bl	8002dea <I2C_WaitOnFlagUntilTimeout>
 8003478:	4602      	mov	r2, r0
 800347a:	2800      	cmp	r0, #0
 800347c:	f47f af29 	bne.w	80032d2 <HAL_I2C_Master_Receive+0xba>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003480:	6821      	ldr	r1, [r4, #0]
 8003482:	680b      	ldr	r3, [r1, #0]
 8003484:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003488:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800348a:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800348c:	6823      	ldr	r3, [r4, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800348e:	4620      	mov	r0, r4
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003490:	6919      	ldr	r1, [r3, #16]
 8003492:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003494:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 8003496:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003498:	9500      	str	r5, [sp, #0]
          hi2c->pBuffPtr++;
 800349a:	3301      	adds	r3, #1
 800349c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800349e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034a0:	4641      	mov	r1, r8
          hi2c->XferSize--;
 80034a2:	3b01      	subs	r3, #1
 80034a4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80034a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80034a8:	3b01      	subs	r3, #1
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034ae:	4633      	mov	r3, r6
 80034b0:	f7ff fc9b 	bl	8002dea <I2C_WaitOnFlagUntilTimeout>
 80034b4:	2800      	cmp	r0, #0
 80034b6:	d0c9      	beq.n	800344c <HAL_I2C_Master_Receive+0x234>
 80034b8:	e70b      	b.n	80032d2 <HAL_I2C_Master_Receive+0xba>
 80034ba:	bf00      	nop
 80034bc:	00100002 	.word	0x00100002
 80034c0:	ffff0000 	.word	0xffff0000
 80034c4:	00010002 	.word	0x00010002
 80034c8:	00010008 	.word	0x00010008
 80034cc:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034d0:	462a      	mov	r2, r5
 80034d2:	4631      	mov	r1, r6
 80034d4:	4620      	mov	r0, r4
 80034d6:	f7ff fc59 	bl	8002d8c <I2C_WaitOnRXNEFlagUntilTimeout>
 80034da:	2800      	cmp	r0, #0
 80034dc:	f47f aef9 	bne.w	80032d2 <HAL_I2C_Master_Receive+0xba>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034e0:	6823      	ldr	r3, [r4, #0]
 80034e2:	691a      	ldr	r2, [r3, #16]
 80034e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034e6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80034e8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80034ea:	1c53      	adds	r3, r2, #1
 80034ec:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80034ee:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80034f0:	3b01      	subs	r3, #1
 80034f2:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80034f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80034f6:	3b01      	subs	r3, #1
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80034fc:	6823      	ldr	r3, [r4, #0]
 80034fe:	6959      	ldr	r1, [r3, #20]
 8003500:	0749      	lsls	r1, r1, #29
 8003502:	f57f af5a 	bpl.w	80033ba <HAL_I2C_Master_Receive+0x1a2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	7053      	strb	r3, [r2, #1]
 800350a:	e76a      	b.n	80033e2 <HAL_I2C_Master_Receive+0x1ca>

0800350c <HAL_I2C_Mem_Write>:
{
 800350c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003510:	4604      	mov	r4, r0
 8003512:	4699      	mov	r9, r3
 8003514:	460f      	mov	r7, r1
 8003516:	4690      	mov	r8, r2
 8003518:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 800351a:	f7ff fa09 	bl	8002930 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800351e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8003522:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003524:	2b20      	cmp	r3, #32
 8003526:	d003      	beq.n	8003530 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8003528:	2002      	movs	r0, #2
}
 800352a:	b003      	add	sp, #12
 800352c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003530:	9000      	str	r0, [sp, #0]
 8003532:	2319      	movs	r3, #25
 8003534:	2201      	movs	r2, #1
 8003536:	493b      	ldr	r1, [pc, #236]	; (8003624 <HAL_I2C_Mem_Write+0x118>)
 8003538:	4620      	mov	r0, r4
 800353a:	f7ff fc56 	bl	8002dea <I2C_WaitOnFlagUntilTimeout>
 800353e:	2800      	cmp	r0, #0
 8003540:	d1f2      	bne.n	8003528 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8003542:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003546:	2b01      	cmp	r3, #1
 8003548:	d0ee      	beq.n	8003528 <HAL_I2C_Mem_Write+0x1c>
 800354a:	2301      	movs	r3, #1
 800354c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003550:	6823      	ldr	r3, [r4, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003552:	4620      	mov	r0, r4
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	07d1      	lsls	r1, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8003558:	bf58      	it	pl
 800355a:	681a      	ldrpl	r2, [r3, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800355c:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 800355e:	bf5c      	itt	pl
 8003560:	f042 0201 	orrpl.w	r2, r2, #1
 8003564:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800356c:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800356e:	2321      	movs	r3, #33	; 0x21
 8003570:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003574:	2340      	movs	r3, #64	; 0x40
 8003576:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800357a:	2300      	movs	r3, #0
 800357c:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800357e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003580:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->pBuffPtr    = pData;
 8003584:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003586:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800358a:	4642      	mov	r2, r8
    hi2c->XferCount   = Size;
 800358c:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800358e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003590:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003592:	4b25      	ldr	r3, [pc, #148]	; (8003628 <HAL_I2C_Mem_Write+0x11c>)
 8003594:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003596:	464b      	mov	r3, r9
 8003598:	f7ff fc7e 	bl	8002e98 <I2C_RequestMemoryWrite>
 800359c:	2800      	cmp	r0, #0
 800359e:	d02a      	beq.n	80035f6 <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 80035a0:	2001      	movs	r0, #1
 80035a2:	e7c2      	b.n	800352a <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035a4:	f7ff fc52 	bl	8002e4c <I2C_WaitOnTXEFlagUntilTimeout>
 80035a8:	b140      	cbz	r0, 80035bc <HAL_I2C_Mem_Write+0xb0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035ac:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ae:	bf01      	itttt	eq
 80035b0:	6822      	ldreq	r2, [r4, #0]
 80035b2:	6813      	ldreq	r3, [r2, #0]
 80035b4:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80035b8:	6013      	streq	r3, [r2, #0]
 80035ba:	e7f1      	b.n	80035a0 <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80035be:	6827      	ldr	r7, [r4, #0]
 80035c0:	461a      	mov	r2, r3
 80035c2:	f812 1b01 	ldrb.w	r1, [r2], #1
 80035c6:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 80035c8:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80035ca:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80035cc:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80035ce:	3a01      	subs	r2, #1
 80035d0:	b292      	uxth	r2, r2
 80035d2:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035d4:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 80035d6:	1e48      	subs	r0, r1, #1
 80035d8:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035da:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 80035dc:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035de:	d50a      	bpl.n	80035f6 <HAL_I2C_Mem_Write+0xea>
 80035e0:	b148      	cbz	r0, 80035f6 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035e2:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 80035e4:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035e6:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 80035e8:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80035ea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80035ec:	3902      	subs	r1, #2
        hi2c->XferCount--;
 80035ee:	3b01      	subs	r3, #1
 80035f0:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80035f2:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80035f4:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80035f6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035f8:	462a      	mov	r2, r5
 80035fa:	4631      	mov	r1, r6
 80035fc:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1d0      	bne.n	80035a4 <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003602:	f7ff fb9d 	bl	8002d40 <I2C_WaitOnBTFFlagUntilTimeout>
 8003606:	2800      	cmp	r0, #0
 8003608:	d1cf      	bne.n	80035aa <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800360a:	6822      	ldr	r2, [r4, #0]
 800360c:	6813      	ldr	r3, [r2, #0]
 800360e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003612:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003614:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8003616:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 800361a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800361e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8003622:	e782      	b.n	800352a <HAL_I2C_Mem_Write+0x1e>
 8003624:	00100002 	.word	0x00100002
 8003628:	ffff0000 	.word	0xffff0000

0800362c <HAL_I2C_IsDeviceReady>:
{
 800362c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003630:	4604      	mov	r4, r0
 8003632:	b085      	sub	sp, #20
 8003634:	4698      	mov	r8, r3
 8003636:	4689      	mov	r9, r1
 8003638:	4692      	mov	sl, r2
  uint32_t tickstart = HAL_GetTick();
 800363a:	f7ff f979 	bl	8002930 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800363e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8003642:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003644:	2b20      	cmp	r3, #32
 8003646:	d003      	beq.n	8003650 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8003648:	2002      	movs	r0, #2
}
 800364a:	b005      	add	sp, #20
 800364c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003650:	9000      	str	r0, [sp, #0]
 8003652:	2319      	movs	r3, #25
 8003654:	2201      	movs	r2, #1
 8003656:	4949      	ldr	r1, [pc, #292]	; (800377c <HAL_I2C_IsDeviceReady+0x150>)
 8003658:	4620      	mov	r0, r4
 800365a:	f7ff fbc6 	bl	8002dea <I2C_WaitOnFlagUntilTimeout>
 800365e:	2800      	cmp	r0, #0
 8003660:	d1f2      	bne.n	8003648 <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 8003662:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003666:	2b01      	cmp	r3, #1
 8003668:	d0ee      	beq.n	8003648 <HAL_I2C_IsDeviceReady+0x1c>
 800366a:	2301      	movs	r3, #1
 800366c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003670:	6823      	ldr	r3, [r4, #0]
  uint32_t I2C_Trials = 1U;
 8003672:	2701      	movs	r7, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003674:	681a      	ldr	r2, [r3, #0]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003676:	f8df b104 	ldr.w	fp, [pc, #260]	; 800377c <HAL_I2C_IsDeviceReady+0x150>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800367a:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800367c:	bf58      	it	pl
 800367e:	681a      	ldrpl	r2, [r3, #0]
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003680:	f009 09fe 	and.w	r9, r9, #254	; 0xfe
      __HAL_I2C_ENABLE(hi2c);
 8003684:	bf5c      	itt	pl
 8003686:	f042 0201 	orrpl.w	r2, r2, #1
 800368a:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003692:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003694:	2324      	movs	r3, #36	; 0x24
 8003696:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800369a:	2300      	movs	r3, #0
 800369c:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800369e:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80036a2:	62e3      	str	r3, [r4, #44]	; 0x2c
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036a4:	6822      	ldr	r2, [r4, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80036a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036aa:	6813      	ldr	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80036ac:	4620      	mov	r0, r4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b2:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80036b4:	9500      	str	r5, [sp, #0]
 80036b6:	4643      	mov	r3, r8
 80036b8:	2200      	movs	r2, #0
 80036ba:	f7ff fb96 	bl	8002dea <I2C_WaitOnFlagUntilTimeout>
 80036be:	b108      	cbz	r0, 80036c4 <HAL_I2C_IsDeviceReady+0x98>
    return HAL_ERROR;
 80036c0:	2001      	movs	r0, #1
 80036c2:	e7c2      	b.n	800364a <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036c4:	6823      	ldr	r3, [r4, #0]
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80036c6:	26a0      	movs	r6, #160	; 0xa0
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036c8:	f8c3 9010 	str.w	r9, [r3, #16]
      tickstart = HAL_GetTick();
 80036cc:	f7ff f930 	bl	8002930 <HAL_GetTick>
 80036d0:	4605      	mov	r5, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80036d2:	6823      	ldr	r3, [r4, #0]
 80036d4:	695a      	ldr	r2, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80036d6:	695b      	ldr	r3, [r3, #20]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80036d8:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80036dc:	f3c3 2380 	ubfx	r3, r3, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80036e0:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80036e4:	29a0      	cmp	r1, #160	; 0xa0
 80036e6:	d001      	beq.n	80036ec <HAL_I2C_IsDeviceReady+0xc0>
 80036e8:	b902      	cbnz	r2, 80036ec <HAL_I2C_IsDeviceReady+0xc0>
 80036ea:	b303      	cbz	r3, 800372e <HAL_I2C_IsDeviceReady+0x102>
      hi2c->State = HAL_I2C_STATE_READY;
 80036ec:	2620      	movs	r6, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80036ee:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 80036f0:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80036f4:	695a      	ldr	r2, [r3, #20]
 80036f6:	f012 0f02 	tst.w	r2, #2
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003700:	601a      	str	r2, [r3, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003702:	d026      	beq.n	8003752 <HAL_I2C_IsDeviceReady+0x126>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003704:	2200      	movs	r2, #0
 8003706:	9203      	str	r2, [sp, #12]
 8003708:	695a      	ldr	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800370a:	491c      	ldr	r1, [pc, #112]	; (800377c <HAL_I2C_IsDeviceReady+0x150>)
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800370c:	9203      	str	r2, [sp, #12]
 800370e:	699b      	ldr	r3, [r3, #24]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003710:	2201      	movs	r2, #1
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003712:	9303      	str	r3, [sp, #12]
 8003714:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003716:	9500      	str	r5, [sp, #0]
 8003718:	2319      	movs	r3, #25
 800371a:	4620      	mov	r0, r4
 800371c:	f7ff fb65 	bl	8002dea <I2C_WaitOnFlagUntilTimeout>
 8003720:	2800      	cmp	r0, #0
 8003722:	d1cd      	bne.n	80036c0 <HAL_I2C_IsDeviceReady+0x94>
        hi2c->State = HAL_I2C_STATE_READY;
 8003724:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8003728:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 800372c:	e78d      	b.n	800364a <HAL_I2C_IsDeviceReady+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800372e:	f7ff f8ff 	bl	8002930 <HAL_GetTick>
 8003732:	1b40      	subs	r0, r0, r5
 8003734:	4540      	cmp	r0, r8
 8003736:	d802      	bhi.n	800373e <HAL_I2C_IsDeviceReady+0x112>
 8003738:	f1b8 0f00 	cmp.w	r8, #0
 800373c:	d101      	bne.n	8003742 <HAL_I2C_IsDeviceReady+0x116>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800373e:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003742:	6823      	ldr	r3, [r4, #0]
 8003744:	695a      	ldr	r2, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003746:	695b      	ldr	r3, [r3, #20]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003748:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800374c:	f3c3 2380 	ubfx	r3, r3, #10, #1
 8003750:	e7c6      	b.n	80036e0 <HAL_I2C_IsDeviceReady+0xb4>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003752:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003756:	4659      	mov	r1, fp
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003758:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800375a:	4620      	mov	r0, r4
 800375c:	9500      	str	r5, [sp, #0]
 800375e:	2319      	movs	r3, #25
 8003760:	2201      	movs	r2, #1
 8003762:	f7ff fb42 	bl	8002dea <I2C_WaitOnFlagUntilTimeout>
 8003766:	2800      	cmp	r0, #0
 8003768:	d1aa      	bne.n	80036c0 <HAL_I2C_IsDeviceReady+0x94>
      I2C_Trials++;
 800376a:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 800376c:	4557      	cmp	r7, sl
 800376e:	d399      	bcc.n	80036a4 <HAL_I2C_IsDeviceReady+0x78>
    hi2c->State = HAL_I2C_STATE_READY;
 8003770:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8003774:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8003778:	e7a2      	b.n	80036c0 <HAL_I2C_IsDeviceReady+0x94>
 800377a:	bf00      	nop
 800377c:	00100002 	.word	0x00100002

08003780 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8003780:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8003782:	4770      	bx	lr

08003784 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003784:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003788:	4605      	mov	r5, r0
 800378a:	b908      	cbnz	r0, 8003790 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 800378c:	2001      	movs	r0, #1
 800378e:	e03c      	b.n	800380a <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003790:	6803      	ldr	r3, [r0, #0]
 8003792:	07db      	lsls	r3, r3, #31
 8003794:	d410      	bmi.n	80037b8 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003796:	682b      	ldr	r3, [r5, #0]
 8003798:	079f      	lsls	r7, r3, #30
 800379a:	d45d      	bmi.n	8003858 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800379c:	682b      	ldr	r3, [r5, #0]
 800379e:	0719      	lsls	r1, r3, #28
 80037a0:	f100 8094 	bmi.w	80038cc <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037a4:	682b      	ldr	r3, [r5, #0]
 80037a6:	075a      	lsls	r2, r3, #29
 80037a8:	f100 80be 	bmi.w	8003928 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037ac:	69e8      	ldr	r0, [r5, #28]
 80037ae:	2800      	cmp	r0, #0
 80037b0:	f040 812c 	bne.w	8003a0c <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 80037b4:	2000      	movs	r0, #0
 80037b6:	e028      	b.n	800380a <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037b8:	4c8f      	ldr	r4, [pc, #572]	; (80039f8 <HAL_RCC_OscConfig+0x274>)
 80037ba:	6863      	ldr	r3, [r4, #4]
 80037bc:	f003 030c 	and.w	r3, r3, #12
 80037c0:	2b04      	cmp	r3, #4
 80037c2:	d007      	beq.n	80037d4 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037c4:	6863      	ldr	r3, [r4, #4]
 80037c6:	f003 030c 	and.w	r3, r3, #12
 80037ca:	2b08      	cmp	r3, #8
 80037cc:	d109      	bne.n	80037e2 <HAL_RCC_OscConfig+0x5e>
 80037ce:	6863      	ldr	r3, [r4, #4]
 80037d0:	03de      	lsls	r6, r3, #15
 80037d2:	d506      	bpl.n	80037e2 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d4:	6823      	ldr	r3, [r4, #0]
 80037d6:	039c      	lsls	r4, r3, #14
 80037d8:	d5dd      	bpl.n	8003796 <HAL_RCC_OscConfig+0x12>
 80037da:	686b      	ldr	r3, [r5, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1da      	bne.n	8003796 <HAL_RCC_OscConfig+0x12>
 80037e0:	e7d4      	b.n	800378c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037e2:	686b      	ldr	r3, [r5, #4]
 80037e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e8:	d112      	bne.n	8003810 <HAL_RCC_OscConfig+0x8c>
 80037ea:	6823      	ldr	r3, [r4, #0]
 80037ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80037f2:	f7ff f89d 	bl	8002930 <HAL_GetTick>
 80037f6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037f8:	6823      	ldr	r3, [r4, #0]
 80037fa:	0398      	lsls	r0, r3, #14
 80037fc:	d4cb      	bmi.n	8003796 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037fe:	f7ff f897 	bl	8002930 <HAL_GetTick>
 8003802:	1b80      	subs	r0, r0, r6
 8003804:	2864      	cmp	r0, #100	; 0x64
 8003806:	d9f7      	bls.n	80037f8 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8003808:	2003      	movs	r0, #3
}
 800380a:	b002      	add	sp, #8
 800380c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003810:	b99b      	cbnz	r3, 800383a <HAL_RCC_OscConfig+0xb6>
 8003812:	6823      	ldr	r3, [r4, #0]
 8003814:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003818:	6023      	str	r3, [r4, #0]
 800381a:	6823      	ldr	r3, [r4, #0]
 800381c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003820:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003822:	f7ff f885 	bl	8002930 <HAL_GetTick>
 8003826:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003828:	6823      	ldr	r3, [r4, #0]
 800382a:	0399      	lsls	r1, r3, #14
 800382c:	d5b3      	bpl.n	8003796 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800382e:	f7ff f87f 	bl	8002930 <HAL_GetTick>
 8003832:	1b80      	subs	r0, r0, r6
 8003834:	2864      	cmp	r0, #100	; 0x64
 8003836:	d9f7      	bls.n	8003828 <HAL_RCC_OscConfig+0xa4>
 8003838:	e7e6      	b.n	8003808 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800383a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800383e:	6823      	ldr	r3, [r4, #0]
 8003840:	d103      	bne.n	800384a <HAL_RCC_OscConfig+0xc6>
 8003842:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003846:	6023      	str	r3, [r4, #0]
 8003848:	e7cf      	b.n	80037ea <HAL_RCC_OscConfig+0x66>
 800384a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800384e:	6023      	str	r3, [r4, #0]
 8003850:	6823      	ldr	r3, [r4, #0]
 8003852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003856:	e7cb      	b.n	80037f0 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003858:	4c67      	ldr	r4, [pc, #412]	; (80039f8 <HAL_RCC_OscConfig+0x274>)
 800385a:	6863      	ldr	r3, [r4, #4]
 800385c:	f013 0f0c 	tst.w	r3, #12
 8003860:	d007      	beq.n	8003872 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003862:	6863      	ldr	r3, [r4, #4]
 8003864:	f003 030c 	and.w	r3, r3, #12
 8003868:	2b08      	cmp	r3, #8
 800386a:	d110      	bne.n	800388e <HAL_RCC_OscConfig+0x10a>
 800386c:	6863      	ldr	r3, [r4, #4]
 800386e:	03da      	lsls	r2, r3, #15
 8003870:	d40d      	bmi.n	800388e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003872:	6823      	ldr	r3, [r4, #0]
 8003874:	079b      	lsls	r3, r3, #30
 8003876:	d502      	bpl.n	800387e <HAL_RCC_OscConfig+0xfa>
 8003878:	692b      	ldr	r3, [r5, #16]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d186      	bne.n	800378c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800387e:	6823      	ldr	r3, [r4, #0]
 8003880:	696a      	ldr	r2, [r5, #20]
 8003882:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003886:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800388a:	6023      	str	r3, [r4, #0]
 800388c:	e786      	b.n	800379c <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800388e:	692a      	ldr	r2, [r5, #16]
 8003890:	4b5a      	ldr	r3, [pc, #360]	; (80039fc <HAL_RCC_OscConfig+0x278>)
 8003892:	b16a      	cbz	r2, 80038b0 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8003894:	2201      	movs	r2, #1
 8003896:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003898:	f7ff f84a 	bl	8002930 <HAL_GetTick>
 800389c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800389e:	6823      	ldr	r3, [r4, #0]
 80038a0:	079f      	lsls	r7, r3, #30
 80038a2:	d4ec      	bmi.n	800387e <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038a4:	f7ff f844 	bl	8002930 <HAL_GetTick>
 80038a8:	1b80      	subs	r0, r0, r6
 80038aa:	2802      	cmp	r0, #2
 80038ac:	d9f7      	bls.n	800389e <HAL_RCC_OscConfig+0x11a>
 80038ae:	e7ab      	b.n	8003808 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80038b0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80038b2:	f7ff f83d 	bl	8002930 <HAL_GetTick>
 80038b6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038b8:	6823      	ldr	r3, [r4, #0]
 80038ba:	0798      	lsls	r0, r3, #30
 80038bc:	f57f af6e 	bpl.w	800379c <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038c0:	f7ff f836 	bl	8002930 <HAL_GetTick>
 80038c4:	1b80      	subs	r0, r0, r6
 80038c6:	2802      	cmp	r0, #2
 80038c8:	d9f6      	bls.n	80038b8 <HAL_RCC_OscConfig+0x134>
 80038ca:	e79d      	b.n	8003808 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038cc:	69aa      	ldr	r2, [r5, #24]
 80038ce:	4c4a      	ldr	r4, [pc, #296]	; (80039f8 <HAL_RCC_OscConfig+0x274>)
 80038d0:	4b4b      	ldr	r3, [pc, #300]	; (8003a00 <HAL_RCC_OscConfig+0x27c>)
 80038d2:	b1da      	cbz	r2, 800390c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80038d4:	2201      	movs	r2, #1
 80038d6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80038d8:	f7ff f82a 	bl	8002930 <HAL_GetTick>
 80038dc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80038e0:	079b      	lsls	r3, r3, #30
 80038e2:	d50d      	bpl.n	8003900 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80038e4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80038e8:	4b46      	ldr	r3, [pc, #280]	; (8003a04 <HAL_RCC_OscConfig+0x280>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80038f0:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80038f2:	bf00      	nop
  }
  while (Delay --);
 80038f4:	9b01      	ldr	r3, [sp, #4]
 80038f6:	1e5a      	subs	r2, r3, #1
 80038f8:	9201      	str	r2, [sp, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1f9      	bne.n	80038f2 <HAL_RCC_OscConfig+0x16e>
 80038fe:	e751      	b.n	80037a4 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003900:	f7ff f816 	bl	8002930 <HAL_GetTick>
 8003904:	1b80      	subs	r0, r0, r6
 8003906:	2802      	cmp	r0, #2
 8003908:	d9e9      	bls.n	80038de <HAL_RCC_OscConfig+0x15a>
 800390a:	e77d      	b.n	8003808 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 800390c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800390e:	f7ff f80f 	bl	8002930 <HAL_GetTick>
 8003912:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003914:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003916:	079f      	lsls	r7, r3, #30
 8003918:	f57f af44 	bpl.w	80037a4 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800391c:	f7ff f808 	bl	8002930 <HAL_GetTick>
 8003920:	1b80      	subs	r0, r0, r6
 8003922:	2802      	cmp	r0, #2
 8003924:	d9f6      	bls.n	8003914 <HAL_RCC_OscConfig+0x190>
 8003926:	e76f      	b.n	8003808 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003928:	4c33      	ldr	r4, [pc, #204]	; (80039f8 <HAL_RCC_OscConfig+0x274>)
 800392a:	69e3      	ldr	r3, [r4, #28]
 800392c:	00d8      	lsls	r0, r3, #3
 800392e:	d424      	bmi.n	800397a <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8003930:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003932:	69e3      	ldr	r3, [r4, #28]
 8003934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003938:	61e3      	str	r3, [r4, #28]
 800393a:	69e3      	ldr	r3, [r4, #28]
 800393c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003944:	4e30      	ldr	r6, [pc, #192]	; (8003a08 <HAL_RCC_OscConfig+0x284>)
 8003946:	6833      	ldr	r3, [r6, #0]
 8003948:	05d9      	lsls	r1, r3, #23
 800394a:	d518      	bpl.n	800397e <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800394c:	68eb      	ldr	r3, [r5, #12]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d126      	bne.n	80039a0 <HAL_RCC_OscConfig+0x21c>
 8003952:	6a23      	ldr	r3, [r4, #32]
 8003954:	f043 0301 	orr.w	r3, r3, #1
 8003958:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800395a:	f7fe ffe9 	bl	8002930 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800395e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003962:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003964:	6a23      	ldr	r3, [r4, #32]
 8003966:	079b      	lsls	r3, r3, #30
 8003968:	d53f      	bpl.n	80039ea <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 800396a:	2f00      	cmp	r7, #0
 800396c:	f43f af1e 	beq.w	80037ac <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003970:	69e3      	ldr	r3, [r4, #28]
 8003972:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003976:	61e3      	str	r3, [r4, #28]
 8003978:	e718      	b.n	80037ac <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 800397a:	2700      	movs	r7, #0
 800397c:	e7e2      	b.n	8003944 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800397e:	6833      	ldr	r3, [r6, #0]
 8003980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003984:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003986:	f7fe ffd3 	bl	8002930 <HAL_GetTick>
 800398a:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800398c:	6833      	ldr	r3, [r6, #0]
 800398e:	05da      	lsls	r2, r3, #23
 8003990:	d4dc      	bmi.n	800394c <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003992:	f7fe ffcd 	bl	8002930 <HAL_GetTick>
 8003996:	eba0 0008 	sub.w	r0, r0, r8
 800399a:	2864      	cmp	r0, #100	; 0x64
 800399c:	d9f6      	bls.n	800398c <HAL_RCC_OscConfig+0x208>
 800399e:	e733      	b.n	8003808 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039a0:	b9ab      	cbnz	r3, 80039ce <HAL_RCC_OscConfig+0x24a>
 80039a2:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039a8:	f023 0301 	bic.w	r3, r3, #1
 80039ac:	6223      	str	r3, [r4, #32]
 80039ae:	6a23      	ldr	r3, [r4, #32]
 80039b0:	f023 0304 	bic.w	r3, r3, #4
 80039b4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80039b6:	f7fe ffbb 	bl	8002930 <HAL_GetTick>
 80039ba:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039bc:	6a23      	ldr	r3, [r4, #32]
 80039be:	0798      	lsls	r0, r3, #30
 80039c0:	d5d3      	bpl.n	800396a <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039c2:	f7fe ffb5 	bl	8002930 <HAL_GetTick>
 80039c6:	1b80      	subs	r0, r0, r6
 80039c8:	4540      	cmp	r0, r8
 80039ca:	d9f7      	bls.n	80039bc <HAL_RCC_OscConfig+0x238>
 80039cc:	e71c      	b.n	8003808 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039ce:	2b05      	cmp	r3, #5
 80039d0:	6a23      	ldr	r3, [r4, #32]
 80039d2:	d103      	bne.n	80039dc <HAL_RCC_OscConfig+0x258>
 80039d4:	f043 0304 	orr.w	r3, r3, #4
 80039d8:	6223      	str	r3, [r4, #32]
 80039da:	e7ba      	b.n	8003952 <HAL_RCC_OscConfig+0x1ce>
 80039dc:	f023 0301 	bic.w	r3, r3, #1
 80039e0:	6223      	str	r3, [r4, #32]
 80039e2:	6a23      	ldr	r3, [r4, #32]
 80039e4:	f023 0304 	bic.w	r3, r3, #4
 80039e8:	e7b6      	b.n	8003958 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ea:	f7fe ffa1 	bl	8002930 <HAL_GetTick>
 80039ee:	eba0 0008 	sub.w	r0, r0, r8
 80039f2:	42b0      	cmp	r0, r6
 80039f4:	d9b6      	bls.n	8003964 <HAL_RCC_OscConfig+0x1e0>
 80039f6:	e707      	b.n	8003808 <HAL_RCC_OscConfig+0x84>
 80039f8:	40021000 	.word	0x40021000
 80039fc:	42420000 	.word	0x42420000
 8003a00:	42420480 	.word	0x42420480
 8003a04:	20000018 	.word	0x20000018
 8003a08:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a0c:	4b2a      	ldr	r3, [pc, #168]	; (8003ab8 <HAL_RCC_OscConfig+0x334>)
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	461c      	mov	r4, r3
 8003a12:	f002 020c 	and.w	r2, r2, #12
 8003a16:	2a08      	cmp	r2, #8
 8003a18:	d03d      	beq.n	8003a96 <HAL_RCC_OscConfig+0x312>
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	4e27      	ldr	r6, [pc, #156]	; (8003abc <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a1e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003a20:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a22:	d12b      	bne.n	8003a7c <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8003a24:	f7fe ff84 	bl	8002930 <HAL_GetTick>
 8003a28:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a2a:	6823      	ldr	r3, [r4, #0]
 8003a2c:	0199      	lsls	r1, r3, #6
 8003a2e:	d41f      	bmi.n	8003a70 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a30:	6a2b      	ldr	r3, [r5, #32]
 8003a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a36:	d105      	bne.n	8003a44 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a38:	6862      	ldr	r2, [r4, #4]
 8003a3a:	68a9      	ldr	r1, [r5, #8]
 8003a3c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003a40:	430a      	orrs	r2, r1
 8003a42:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a44:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8003a46:	6862      	ldr	r2, [r4, #4]
 8003a48:	430b      	orrs	r3, r1
 8003a4a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8003a52:	2301      	movs	r3, #1
 8003a54:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003a56:	f7fe ff6b 	bl	8002930 <HAL_GetTick>
 8003a5a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a5c:	6823      	ldr	r3, [r4, #0]
 8003a5e:	019a      	lsls	r2, r3, #6
 8003a60:	f53f aea8 	bmi.w	80037b4 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a64:	f7fe ff64 	bl	8002930 <HAL_GetTick>
 8003a68:	1b40      	subs	r0, r0, r5
 8003a6a:	2802      	cmp	r0, #2
 8003a6c:	d9f6      	bls.n	8003a5c <HAL_RCC_OscConfig+0x2d8>
 8003a6e:	e6cb      	b.n	8003808 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a70:	f7fe ff5e 	bl	8002930 <HAL_GetTick>
 8003a74:	1bc0      	subs	r0, r0, r7
 8003a76:	2802      	cmp	r0, #2
 8003a78:	d9d7      	bls.n	8003a2a <HAL_RCC_OscConfig+0x2a6>
 8003a7a:	e6c5      	b.n	8003808 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8003a7c:	f7fe ff58 	bl	8002930 <HAL_GetTick>
 8003a80:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a82:	6823      	ldr	r3, [r4, #0]
 8003a84:	019b      	lsls	r3, r3, #6
 8003a86:	f57f ae95 	bpl.w	80037b4 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a8a:	f7fe ff51 	bl	8002930 <HAL_GetTick>
 8003a8e:	1b40      	subs	r0, r0, r5
 8003a90:	2802      	cmp	r0, #2
 8003a92:	d9f6      	bls.n	8003a82 <HAL_RCC_OscConfig+0x2fe>
 8003a94:	e6b8      	b.n	8003808 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a96:	2801      	cmp	r0, #1
 8003a98:	f43f aeb7 	beq.w	800380a <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8003a9c:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a9e:	6a2b      	ldr	r3, [r5, #32]
 8003aa0:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	f47f ae71 	bne.w	800378c <HAL_RCC_OscConfig+0x8>
 8003aaa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003aac:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8003ab0:	1ac0      	subs	r0, r0, r3
 8003ab2:	bf18      	it	ne
 8003ab4:	2001      	movne	r0, #1
 8003ab6:	e6a8      	b.n	800380a <HAL_RCC_OscConfig+0x86>
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	42420060 	.word	0x42420060

08003ac0 <HAL_RCC_GetSysClockFreq>:
{
 8003ac0:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003ac2:	4b18      	ldr	r3, [pc, #96]	; (8003b24 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8003ac4:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003ac6:	ac02      	add	r4, sp, #8
 8003ac8:	f103 0510 	add.w	r5, r3, #16
 8003acc:	4622      	mov	r2, r4
 8003ace:	6818      	ldr	r0, [r3, #0]
 8003ad0:	6859      	ldr	r1, [r3, #4]
 8003ad2:	3308      	adds	r3, #8
 8003ad4:	c203      	stmia	r2!, {r0, r1}
 8003ad6:	42ab      	cmp	r3, r5
 8003ad8:	4614      	mov	r4, r2
 8003ada:	d1f7      	bne.n	8003acc <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003adc:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8003ae0:	4911      	ldr	r1, [pc, #68]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003ae2:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8003ae6:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003ae8:	f003 020c 	and.w	r2, r3, #12
 8003aec:	2a08      	cmp	r2, #8
 8003aee:	d117      	bne.n	8003b20 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003af0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8003af4:	a806      	add	r0, sp, #24
 8003af6:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003af8:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003afa:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003afe:	d50c      	bpl.n	8003b1a <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b00:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b02:	480a      	ldr	r0, [pc, #40]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b04:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b08:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b0a:	aa06      	add	r2, sp, #24
 8003b0c:	4413      	add	r3, r2
 8003b0e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b12:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8003b16:	b007      	add	sp, #28
 8003b18:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b1a:	4805      	ldr	r0, [pc, #20]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x70>)
 8003b1c:	4350      	muls	r0, r2
 8003b1e:	e7fa      	b.n	8003b16 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8003b20:	4802      	ldr	r0, [pc, #8]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8003b22:	e7f8      	b.n	8003b16 <HAL_RCC_GetSysClockFreq+0x56>
 8003b24:	08008890 	.word	0x08008890
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	007a1200 	.word	0x007a1200
 8003b30:	003d0900 	.word	0x003d0900

08003b34 <HAL_RCC_ClockConfig>:
{
 8003b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b38:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8003b3a:	4604      	mov	r4, r0
 8003b3c:	b910      	cbnz	r0, 8003b44 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003b3e:	2001      	movs	r0, #1
}
 8003b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b44:	4a44      	ldr	r2, [pc, #272]	; (8003c58 <HAL_RCC_ClockConfig+0x124>)
 8003b46:	6813      	ldr	r3, [r2, #0]
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	428b      	cmp	r3, r1
 8003b4e:	d328      	bcc.n	8003ba2 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b50:	6821      	ldr	r1, [r4, #0]
 8003b52:	078e      	lsls	r6, r1, #30
 8003b54:	d430      	bmi.n	8003bb8 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b56:	07ca      	lsls	r2, r1, #31
 8003b58:	d443      	bmi.n	8003be2 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b5a:	4a3f      	ldr	r2, [pc, #252]	; (8003c58 <HAL_RCC_ClockConfig+0x124>)
 8003b5c:	6813      	ldr	r3, [r2, #0]
 8003b5e:	f003 0307 	and.w	r3, r3, #7
 8003b62:	42ab      	cmp	r3, r5
 8003b64:	d865      	bhi.n	8003c32 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b66:	6822      	ldr	r2, [r4, #0]
 8003b68:	4d3c      	ldr	r5, [pc, #240]	; (8003c5c <HAL_RCC_ClockConfig+0x128>)
 8003b6a:	f012 0f04 	tst.w	r2, #4
 8003b6e:	d16c      	bne.n	8003c4a <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b70:	0713      	lsls	r3, r2, #28
 8003b72:	d506      	bpl.n	8003b82 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b74:	686b      	ldr	r3, [r5, #4]
 8003b76:	6922      	ldr	r2, [r4, #16]
 8003b78:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003b7c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003b80:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b82:	f7ff ff9d 	bl	8003ac0 <HAL_RCC_GetSysClockFreq>
 8003b86:	686b      	ldr	r3, [r5, #4]
 8003b88:	4a35      	ldr	r2, [pc, #212]	; (8003c60 <HAL_RCC_ClockConfig+0x12c>)
 8003b8a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003b8e:	5cd3      	ldrb	r3, [r2, r3]
 8003b90:	40d8      	lsrs	r0, r3
 8003b92:	4b34      	ldr	r3, [pc, #208]	; (8003c64 <HAL_RCC_ClockConfig+0x130>)
 8003b94:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003b96:	4b34      	ldr	r3, [pc, #208]	; (8003c68 <HAL_RCC_ClockConfig+0x134>)
 8003b98:	6818      	ldr	r0, [r3, #0]
 8003b9a:	f7fe fe87 	bl	80028ac <HAL_InitTick>
  return HAL_OK;
 8003b9e:	2000      	movs	r0, #0
 8003ba0:	e7ce      	b.n	8003b40 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba2:	6813      	ldr	r3, [r2, #0]
 8003ba4:	f023 0307 	bic.w	r3, r3, #7
 8003ba8:	430b      	orrs	r3, r1
 8003baa:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bac:	6813      	ldr	r3, [r2, #0]
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	428b      	cmp	r3, r1
 8003bb4:	d1c3      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xa>
 8003bb6:	e7cb      	b.n	8003b50 <HAL_RCC_ClockConfig+0x1c>
 8003bb8:	4b28      	ldr	r3, [pc, #160]	; (8003c5c <HAL_RCC_ClockConfig+0x128>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bba:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bbe:	bf1e      	ittt	ne
 8003bc0:	685a      	ldrne	r2, [r3, #4]
 8003bc2:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8003bc6:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bc8:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bca:	bf42      	ittt	mi
 8003bcc:	685a      	ldrmi	r2, [r3, #4]
 8003bce:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8003bd2:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	68a0      	ldr	r0, [r4, #8]
 8003bd8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003bdc:	4302      	orrs	r2, r0
 8003bde:	605a      	str	r2, [r3, #4]
 8003be0:	e7b9      	b.n	8003b56 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003be2:	6862      	ldr	r2, [r4, #4]
 8003be4:	4e1d      	ldr	r6, [pc, #116]	; (8003c5c <HAL_RCC_ClockConfig+0x128>)
 8003be6:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003be8:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bea:	d11a      	bne.n	8003c22 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bec:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf0:	d0a5      	beq.n	8003b3e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bf2:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bf4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bf8:	f023 0303 	bic.w	r3, r3, #3
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003c00:	f7fe fe96 	bl	8002930 <HAL_GetTick>
 8003c04:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c06:	6873      	ldr	r3, [r6, #4]
 8003c08:	6862      	ldr	r2, [r4, #4]
 8003c0a:	f003 030c 	and.w	r3, r3, #12
 8003c0e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003c12:	d0a2      	beq.n	8003b5a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c14:	f7fe fe8c 	bl	8002930 <HAL_GetTick>
 8003c18:	1bc0      	subs	r0, r0, r7
 8003c1a:	4540      	cmp	r0, r8
 8003c1c:	d9f3      	bls.n	8003c06 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8003c1e:	2003      	movs	r0, #3
 8003c20:	e78e      	b.n	8003b40 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c22:	2a02      	cmp	r2, #2
 8003c24:	d102      	bne.n	8003c2c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c26:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003c2a:	e7e1      	b.n	8003bf0 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c2c:	f013 0f02 	tst.w	r3, #2
 8003c30:	e7de      	b.n	8003bf0 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c32:	6813      	ldr	r3, [r2, #0]
 8003c34:	f023 0307 	bic.w	r3, r3, #7
 8003c38:	432b      	orrs	r3, r5
 8003c3a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c3c:	6813      	ldr	r3, [r2, #0]
 8003c3e:	f003 0307 	and.w	r3, r3, #7
 8003c42:	42ab      	cmp	r3, r5
 8003c44:	f47f af7b 	bne.w	8003b3e <HAL_RCC_ClockConfig+0xa>
 8003c48:	e78d      	b.n	8003b66 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c4a:	686b      	ldr	r3, [r5, #4]
 8003c4c:	68e1      	ldr	r1, [r4, #12]
 8003c4e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003c52:	430b      	orrs	r3, r1
 8003c54:	606b      	str	r3, [r5, #4]
 8003c56:	e78b      	b.n	8003b70 <HAL_RCC_ClockConfig+0x3c>
 8003c58:	40022000 	.word	0x40022000
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	08009eb4 	.word	0x08009eb4
 8003c64:	20000018 	.word	0x20000018
 8003c68:	20000020 	.word	0x20000020

08003c6c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c6c:	4b04      	ldr	r3, [pc, #16]	; (8003c80 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003c6e:	4a05      	ldr	r2, [pc, #20]	; (8003c84 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003c76:	5cd3      	ldrb	r3, [r2, r3]
 8003c78:	4a03      	ldr	r2, [pc, #12]	; (8003c88 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003c7a:	6810      	ldr	r0, [r2, #0]
}
 8003c7c:	40d8      	lsrs	r0, r3
 8003c7e:	4770      	bx	lr
 8003c80:	40021000 	.word	0x40021000
 8003c84:	08009ec4 	.word	0x08009ec4
 8003c88:	20000018 	.word	0x20000018

08003c8c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c8c:	4b04      	ldr	r3, [pc, #16]	; (8003ca0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003c8e:	4a05      	ldr	r2, [pc, #20]	; (8003ca4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003c96:	5cd3      	ldrb	r3, [r2, r3]
 8003c98:	4a03      	ldr	r2, [pc, #12]	; (8003ca8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003c9a:	6810      	ldr	r0, [r2, #0]
}
 8003c9c:	40d8      	lsrs	r0, r3
 8003c9e:	4770      	bx	lr
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	08009ec4 	.word	0x08009ec4
 8003ca8:	20000018 	.word	0x20000018

08003cac <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003cac:	6803      	ldr	r3, [r0, #0]
{
 8003cae:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003cb2:	07d9      	lsls	r1, r3, #31
{
 8003cb4:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003cb6:	d520      	bpl.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cb8:	4c35      	ldr	r4, [pc, #212]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8003cba:	69e3      	ldr	r3, [r4, #28]
 8003cbc:	00da      	lsls	r2, r3, #3
 8003cbe:	d432      	bmi.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8003cc0:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cc2:	69e3      	ldr	r3, [r4, #28]
 8003cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cc8:	61e3      	str	r3, [r4, #28]
 8003cca:	69e3      	ldr	r3, [r4, #28]
 8003ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd0:	9301      	str	r3, [sp, #4]
 8003cd2:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd4:	4e2f      	ldr	r6, [pc, #188]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003cd6:	6833      	ldr	r3, [r6, #0]
 8003cd8:	05db      	lsls	r3, r3, #23
 8003cda:	d526      	bpl.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cdc:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cde:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003ce2:	d136      	bne.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ce4:	6a23      	ldr	r3, [r4, #32]
 8003ce6:	686a      	ldr	r2, [r5, #4]
 8003ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cec:	4313      	orrs	r3, r2
 8003cee:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003cf0:	b11f      	cbz	r7, 8003cfa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cf2:	69e3      	ldr	r3, [r4, #28]
 8003cf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cf8:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cfa:	6828      	ldr	r0, [r5, #0]
 8003cfc:	0783      	lsls	r3, r0, #30
 8003cfe:	d506      	bpl.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d00:	4a23      	ldr	r2, [pc, #140]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8003d02:	68a9      	ldr	r1, [r5, #8]
 8003d04:	6853      	ldr	r3, [r2, #4]
 8003d06:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003d0a:	430b      	orrs	r3, r1
 8003d0c:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d0e:	f010 0010 	ands.w	r0, r0, #16
 8003d12:	d01b      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d14:	4a1e      	ldr	r2, [pc, #120]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8003d16:	68e9      	ldr	r1, [r5, #12]
 8003d18:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003d1a:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d1c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003d20:	430b      	orrs	r3, r1
 8003d22:	6053      	str	r3, [r2, #4]
 8003d24:	e012      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8003d26:	2700      	movs	r7, #0
 8003d28:	e7d4      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d2a:	6833      	ldr	r3, [r6, #0]
 8003d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d30:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003d32:	f7fe fdfd 	bl	8002930 <HAL_GetTick>
 8003d36:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d38:	6833      	ldr	r3, [r6, #0]
 8003d3a:	05d8      	lsls	r0, r3, #23
 8003d3c:	d4ce      	bmi.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d3e:	f7fe fdf7 	bl	8002930 <HAL_GetTick>
 8003d42:	eba0 0008 	sub.w	r0, r0, r8
 8003d46:	2864      	cmp	r0, #100	; 0x64
 8003d48:	d9f6      	bls.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8003d4a:	2003      	movs	r0, #3
}
 8003d4c:	b002      	add	sp, #8
 8003d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d52:	686a      	ldr	r2, [r5, #4]
 8003d54:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d0c3      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d5c:	2001      	movs	r0, #1
 8003d5e:	4a0e      	ldr	r2, [pc, #56]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d60:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d62:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d64:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d6a:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8003d6c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d6e:	07d9      	lsls	r1, r3, #31
 8003d70:	d5b8      	bpl.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8003d72:	f7fe fddd 	bl	8002930 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d76:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003d7a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d7c:	6a23      	ldr	r3, [r4, #32]
 8003d7e:	079a      	lsls	r2, r3, #30
 8003d80:	d4b0      	bmi.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d82:	f7fe fdd5 	bl	8002930 <HAL_GetTick>
 8003d86:	1b80      	subs	r0, r0, r6
 8003d88:	4540      	cmp	r0, r8
 8003d8a:	d9f7      	bls.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8003d8c:	e7dd      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8003d8e:	bf00      	nop
 8003d90:	40021000 	.word	0x40021000
 8003d94:	40007000 	.word	0x40007000
 8003d98:	42420440 	.word	0x42420440

08003d9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d9c:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d9e:	4604      	mov	r4, r0
 8003da0:	2800      	cmp	r0, #0
 8003da2:	d034      	beq.n	8003e0e <HAL_SPI_Init+0x72>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003da4:	2300      	movs	r3, #0
 8003da6:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003da8:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8003dac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003db0:	b91b      	cbnz	r3, 8003dba <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003db2:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003db6:	f7fe fbf7 	bl	80025a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003dba:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003dbc:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003dbe:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8003dc2:	6813      	ldr	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003dc4:	69a1      	ldr	r1, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 8003dc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dca:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003dcc:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8003dd0:	4303      	orrs	r3, r0
 8003dd2:	68e0      	ldr	r0, [r4, #12]
 8003dd4:	4303      	orrs	r3, r0
 8003dd6:	6920      	ldr	r0, [r4, #16]
 8003dd8:	4303      	orrs	r3, r0
 8003dda:	6960      	ldr	r0, [r4, #20]
 8003ddc:	4303      	orrs	r3, r0
 8003dde:	69e0      	ldr	r0, [r4, #28]
 8003de0:	4303      	orrs	r3, r0
 8003de2:	6a20      	ldr	r0, [r4, #32]
 8003de4:	4303      	orrs	r3, r0
 8003de6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003de8:	4303      	orrs	r3, r0
 8003dea:	f401 7000 	and.w	r0, r1, #512	; 0x200
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003dee:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003df0:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003df2:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003df6:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003df8:	6051      	str	r1, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003dfa:	69d3      	ldr	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003dfc:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003dfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e02:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8003e04:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e06:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e08:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 8003e0c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003e0e:	2001      	movs	r0, #1
 8003e10:	e7fc      	b.n	8003e0c <HAL_SPI_Init+0x70>
	...

08003e14 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e14:	6a03      	ldr	r3, [r0, #32]
{
 8003e16:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e18:	f023 0301 	bic.w	r3, r3, #1
 8003e1c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e1e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e20:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e22:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e24:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e26:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003e2a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e2c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8003e2e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8003e32:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e34:	4d0a      	ldr	r5, [pc, #40]	; (8003e60 <TIM_OC1_SetConfig+0x4c>)
 8003e36:	42a8      	cmp	r0, r5
 8003e38:	d10b      	bne.n	8003e52 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e3a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e3c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003e40:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e42:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e46:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8003e4a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e4c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e50:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e52:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e54:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e56:	684a      	ldr	r2, [r1, #4]
 8003e58:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e5a:	6203      	str	r3, [r0, #32]
}
 8003e5c:	bd70      	pop	{r4, r5, r6, pc}
 8003e5e:	bf00      	nop
 8003e60:	40012c00 	.word	0x40012c00

08003e64 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e64:	6a03      	ldr	r3, [r0, #32]
{
 8003e66:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e6c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e6e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e70:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e72:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e74:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e76:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003e7a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e7c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8003e7e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e82:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e86:	4d0b      	ldr	r5, [pc, #44]	; (8003eb4 <TIM_OC3_SetConfig+0x50>)
 8003e88:	42a8      	cmp	r0, r5
 8003e8a:	d10d      	bne.n	8003ea8 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e8c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e92:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e96:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e9a:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8003e9e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ea0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ea4:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ea8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003eaa:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003eac:	684a      	ldr	r2, [r1, #4]
 8003eae:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eb0:	6203      	str	r3, [r0, #32]
}
 8003eb2:	bd70      	pop	{r4, r5, r6, pc}
 8003eb4:	40012c00 	.word	0x40012c00

08003eb8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003eb8:	6a03      	ldr	r3, [r0, #32]
{
 8003eba:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ebc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ec0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ec2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ec4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ec6:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ec8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003eca:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ece:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ed2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8003ed4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ed8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003edc:	4d06      	ldr	r5, [pc, #24]	; (8003ef8 <TIM_OC4_SetConfig+0x40>)
 8003ede:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ee0:	bf02      	ittt	eq
 8003ee2:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ee4:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ee8:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eec:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003eee:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ef0:	684a      	ldr	r2, [r1, #4]
 8003ef2:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ef4:	6203      	str	r3, [r0, #32]
}
 8003ef6:	bd30      	pop	{r4, r5, pc}
 8003ef8:	40012c00 	.word	0x40012c00

08003efc <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003efc:	4a1a      	ldr	r2, [pc, #104]	; (8003f68 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8003efe:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f00:	4290      	cmp	r0, r2
 8003f02:	d00a      	beq.n	8003f1a <TIM_Base_SetConfig+0x1e>
 8003f04:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003f08:	d007      	beq.n	8003f1a <TIM_Base_SetConfig+0x1e>
 8003f0a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003f0e:	4290      	cmp	r0, r2
 8003f10:	d003      	beq.n	8003f1a <TIM_Base_SetConfig+0x1e>
 8003f12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f16:	4290      	cmp	r0, r2
 8003f18:	d115      	bne.n	8003f46 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8003f1a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003f20:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f22:	4a11      	ldr	r2, [pc, #68]	; (8003f68 <TIM_Base_SetConfig+0x6c>)
 8003f24:	4290      	cmp	r0, r2
 8003f26:	d00a      	beq.n	8003f3e <TIM_Base_SetConfig+0x42>
 8003f28:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003f2c:	d007      	beq.n	8003f3e <TIM_Base_SetConfig+0x42>
 8003f2e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003f32:	4290      	cmp	r0, r2
 8003f34:	d003      	beq.n	8003f3e <TIM_Base_SetConfig+0x42>
 8003f36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f3a:	4290      	cmp	r0, r2
 8003f3c:	d103      	bne.n	8003f46 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f3e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f44:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f46:	694a      	ldr	r2, [r1, #20]
 8003f48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f4c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003f4e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f50:	688b      	ldr	r3, [r1, #8]
 8003f52:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003f54:	680b      	ldr	r3, [r1, #0]
 8003f56:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f58:	4b03      	ldr	r3, [pc, #12]	; (8003f68 <TIM_Base_SetConfig+0x6c>)
 8003f5a:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8003f5c:	bf04      	itt	eq
 8003f5e:	690b      	ldreq	r3, [r1, #16]
 8003f60:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003f62:	2301      	movs	r3, #1
 8003f64:	6143      	str	r3, [r0, #20]
}
 8003f66:	4770      	bx	lr
 8003f68:	40012c00 	.word	0x40012c00

08003f6c <HAL_TIM_PWM_Init>:
{
 8003f6c:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003f6e:	4604      	mov	r4, r0
 8003f70:	b1a0      	cbz	r0, 8003f9c <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003f72:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003f76:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003f7a:	b91b      	cbnz	r3, 8003f84 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003f7c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003f80:	f7fe fb4e 	bl	8002620 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003f84:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f86:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003f88:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f8c:	1d21      	adds	r1, r4, #4
 8003f8e:	f7ff ffb5 	bl	8003efc <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003f92:	2301      	movs	r3, #1
  return HAL_OK;
 8003f94:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003f96:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003f9a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003f9c:	2001      	movs	r0, #1
 8003f9e:	e7fc      	b.n	8003f9a <HAL_TIM_PWM_Init+0x2e>

08003fa0 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fa0:	6a03      	ldr	r3, [r0, #32]
{
 8003fa2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fa4:	f023 0310 	bic.w	r3, r3, #16
 8003fa8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003faa:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003fac:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003fae:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fb0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fb2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fb6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fba:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8003fbc:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fc0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fc4:	4d0b      	ldr	r5, [pc, #44]	; (8003ff4 <TIM_OC2_SetConfig+0x54>)
 8003fc6:	42a8      	cmp	r0, r5
 8003fc8:	d10d      	bne.n	8003fe6 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fca:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8003fcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fd0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fd4:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fd8:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8003fdc:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fe2:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8003fe6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003fe8:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003fea:	684a      	ldr	r2, [r1, #4]
 8003fec:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003fee:	6203      	str	r3, [r0, #32]
}
 8003ff0:	bd70      	pop	{r4, r5, r6, pc}
 8003ff2:	bf00      	nop
 8003ff4:	40012c00 	.word	0x40012c00

08003ff8 <HAL_TIM_PWM_ConfigChannel>:
{
 8003ff8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003ffa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8003ffe:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004000:	2b01      	cmp	r3, #1
 8004002:	f04f 0002 	mov.w	r0, #2
 8004006:	d025      	beq.n	8004054 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8004008:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800400a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 800400e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8004012:	2a0c      	cmp	r2, #12
 8004014:	d818      	bhi.n	8004048 <HAL_TIM_PWM_ConfigChannel+0x50>
 8004016:	e8df f002 	tbb	[pc, r2]
 800401a:	1707      	.short	0x1707
 800401c:	171e1717 	.word	0x171e1717
 8004020:	172f1717 	.word	0x172f1717
 8004024:	1717      	.short	0x1717
 8004026:	40          	.byte	0x40
 8004027:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004028:	6820      	ldr	r0, [r4, #0]
 800402a:	f7ff fef3 	bl	8003e14 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800402e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004030:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004032:	699a      	ldr	r2, [r3, #24]
 8004034:	f042 0208 	orr.w	r2, r2, #8
 8004038:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800403a:	699a      	ldr	r2, [r3, #24]
 800403c:	f022 0204 	bic.w	r2, r2, #4
 8004040:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004042:	699a      	ldr	r2, [r3, #24]
 8004044:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004046:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8004048:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800404a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800404c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004050:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004054:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004056:	6820      	ldr	r0, [r4, #0]
 8004058:	f7ff ffa2 	bl	8003fa0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800405c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800405e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004060:	699a      	ldr	r2, [r3, #24]
 8004062:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004066:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004068:	699a      	ldr	r2, [r3, #24]
 800406a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800406e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004070:	699a      	ldr	r2, [r3, #24]
 8004072:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004076:	e7e6      	b.n	8004046 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004078:	6820      	ldr	r0, [r4, #0]
 800407a:	f7ff fef3 	bl	8003e64 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800407e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004080:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004082:	69da      	ldr	r2, [r3, #28]
 8004084:	f042 0208 	orr.w	r2, r2, #8
 8004088:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800408a:	69da      	ldr	r2, [r3, #28]
 800408c:	f022 0204 	bic.w	r2, r2, #4
 8004090:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004092:	69da      	ldr	r2, [r3, #28]
 8004094:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004096:	61da      	str	r2, [r3, #28]
      break;
 8004098:	e7d6      	b.n	8004048 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800409a:	6820      	ldr	r0, [r4, #0]
 800409c:	f7ff ff0c 	bl	8003eb8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040a0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040a2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040a4:	69da      	ldr	r2, [r3, #28]
 80040a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040aa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040ac:	69da      	ldr	r2, [r3, #28]
 80040ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040b2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040b4:	69da      	ldr	r2, [r3, #28]
 80040b6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80040ba:	e7ec      	b.n	8004096 <HAL_TIM_PWM_ConfigChannel+0x9e>

080040bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040bc:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040be:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040c0:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040c2:	f001 011f 	and.w	r1, r1, #31
 80040c6:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80040c8:	ea23 0304 	bic.w	r3, r3, r4
 80040cc:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040ce:	6a03      	ldr	r3, [r0, #32]
 80040d0:	408a      	lsls	r2, r1
 80040d2:	431a      	orrs	r2, r3
 80040d4:	6202      	str	r2, [r0, #32]
}
 80040d6:	bd10      	pop	{r4, pc}

080040d8 <HAL_TIM_OC_Start>:
{
 80040d8:	b510      	push	{r4, lr}
 80040da:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040dc:	2201      	movs	r2, #1
 80040de:	6800      	ldr	r0, [r0, #0]
 80040e0:	f7ff ffec 	bl	80040bc <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040e4:	6823      	ldr	r3, [r4, #0]
 80040e6:	4a09      	ldr	r2, [pc, #36]	; (800410c <HAL_TIM_OC_Start+0x34>)
}
 80040e8:	2000      	movs	r0, #0
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040ea:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 80040ec:	bf02      	ittt	eq
 80040ee:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80040f0:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 80040f4:	645a      	streq	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040fc:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 80040fe:	bf1e      	ittt	ne
 8004100:	681a      	ldrne	r2, [r3, #0]
 8004102:	f042 0201 	orrne.w	r2, r2, #1
 8004106:	601a      	strne	r2, [r3, #0]
}
 8004108:	bd10      	pop	{r4, pc}
 800410a:	bf00      	nop
 800410c:	40012c00 	.word	0x40012c00

08004110 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004110:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8004114:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8004116:	2b01      	cmp	r3, #1
 8004118:	f04f 0302 	mov.w	r3, #2
 800411c:	d014      	beq.n	8004148 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800411e:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004120:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8004124:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004126:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004128:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800412a:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 800412c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004130:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004134:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004136:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004138:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800413a:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800413c:	2301      	movs	r3, #1
 800413e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004142:	2300      	movs	r3, #0
 8004144:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8004148:	4618      	mov	r0, r3

  return HAL_OK;
}
 800414a:	bd30      	pop	{r4, r5, pc}

0800414c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800414c:	6803      	ldr	r3, [r0, #0]
 800414e:	68da      	ldr	r2, [r3, #12]
 8004150:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004154:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004156:	695a      	ldr	r2, [r3, #20]
 8004158:	f022 0201 	bic.w	r2, r2, #1
 800415c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800415e:	2320      	movs	r3, #32
 8004160:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8004164:	4770      	bx	lr
	...

08004168 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004168:	b538      	push	{r3, r4, r5, lr}
 800416a:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800416c:	6803      	ldr	r3, [r0, #0]
 800416e:	68c1      	ldr	r1, [r0, #12]
 8004170:	691a      	ldr	r2, [r3, #16]
 8004172:	2419      	movs	r4, #25
 8004174:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004178:	430a      	orrs	r2, r1
 800417a:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800417c:	6882      	ldr	r2, [r0, #8]
 800417e:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8004180:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004182:	4302      	orrs	r2, r0
 8004184:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 8004186:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 800418a:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800418e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8004190:	430a      	orrs	r2, r1
 8004192:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004194:	695a      	ldr	r2, [r3, #20]
 8004196:	69a9      	ldr	r1, [r5, #24]
 8004198:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800419c:	430a      	orrs	r2, r1
 800419e:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80041a0:	4a0d      	ldr	r2, [pc, #52]	; (80041d8 <UART_SetConfig+0x70>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d114      	bne.n	80041d0 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80041a6:	f7ff fd71 	bl	8003c8c <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041aa:	4360      	muls	r0, r4
 80041ac:	686c      	ldr	r4, [r5, #4]
 80041ae:	2264      	movs	r2, #100	; 0x64
 80041b0:	00a4      	lsls	r4, r4, #2
 80041b2:	fbb0 f0f4 	udiv	r0, r0, r4
 80041b6:	fbb0 f1f2 	udiv	r1, r0, r2
 80041ba:	fb02 0311 	mls	r3, r2, r1, r0
 80041be:	011b      	lsls	r3, r3, #4
 80041c0:	3332      	adds	r3, #50	; 0x32
 80041c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80041c6:	682c      	ldr	r4, [r5, #0]
 80041c8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80041cc:	60a3      	str	r3, [r4, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 80041ce:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80041d0:	f7ff fd4c 	bl	8003c6c <HAL_RCC_GetPCLK1Freq>
 80041d4:	e7e9      	b.n	80041aa <UART_SetConfig+0x42>
 80041d6:	bf00      	nop
 80041d8:	40013800 	.word	0x40013800

080041dc <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80041dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041de:	4604      	mov	r4, r0
 80041e0:	460e      	mov	r6, r1
 80041e2:	4617      	mov	r7, r2
 80041e4:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041e6:	6821      	ldr	r1, [r4, #0]
 80041e8:	680b      	ldr	r3, [r1, #0]
 80041ea:	ea36 0303 	bics.w	r3, r6, r3
 80041ee:	d101      	bne.n	80041f4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80041f0:	2000      	movs	r0, #0
 80041f2:	e014      	b.n	800421e <UART_WaitOnFlagUntilTimeout.constprop.3+0x42>
    if (Timeout != HAL_MAX_DELAY)
 80041f4:	1c6b      	adds	r3, r5, #1
 80041f6:	d0f7      	beq.n	80041e8 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80041f8:	b995      	cbnz	r5, 8004220 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041fa:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 80041fc:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041fe:	68da      	ldr	r2, [r3, #12]
 8004200:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004204:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004206:	695a      	ldr	r2, [r3, #20]
 8004208:	f022 0201 	bic.w	r2, r2, #1
 800420c:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800420e:	2320      	movs	r3, #32
 8004210:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004214:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8004218:	2300      	movs	r3, #0
 800421a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 800421e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004220:	f7fe fb86 	bl	8002930 <HAL_GetTick>
 8004224:	1bc0      	subs	r0, r0, r7
 8004226:	4285      	cmp	r5, r0
 8004228:	d2dd      	bcs.n	80041e6 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800422a:	e7e6      	b.n	80041fa <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

0800422c <HAL_UART_Init>:
{
 800422c:	b510      	push	{r4, lr}
  if (huart == NULL)
 800422e:	4604      	mov	r4, r0
 8004230:	b340      	cbz	r0, 8004284 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004232:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004236:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800423a:	b91b      	cbnz	r3, 8004244 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800423c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8004240:	f7fe fa24 	bl	800268c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8004244:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8004246:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004248:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800424c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800424e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8004250:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004254:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004256:	f7ff ff87 	bl	8004168 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800425a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800425c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800425e:	691a      	ldr	r2, [r3, #16]
 8004260:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004264:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004266:	695a      	ldr	r2, [r3, #20]
 8004268:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800426c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800426e:	68da      	ldr	r2, [r3, #12]
 8004270:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004274:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004276:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004278:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800427a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800427e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8004282:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004284:	2001      	movs	r0, #1
 8004286:	e7fc      	b.n	8004282 <HAL_UART_Init+0x56>

08004288 <HAL_UART_Transmit>:
{
 8004288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800428c:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800428e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8004292:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8004294:	2b20      	cmp	r3, #32
{
 8004296:	460d      	mov	r5, r1
 8004298:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800429a:	d14c      	bne.n	8004336 <HAL_UART_Transmit+0xae>
    if ((pData == NULL) || (Size == 0U))
 800429c:	2900      	cmp	r1, #0
 800429e:	d048      	beq.n	8004332 <HAL_UART_Transmit+0xaa>
 80042a0:	2a00      	cmp	r2, #0
 80042a2:	d046      	beq.n	8004332 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 80042a4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d044      	beq.n	8004336 <HAL_UART_Transmit+0xae>
 80042ac:	2301      	movs	r3, #1
 80042ae:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b2:	2300      	movs	r3, #0
 80042b4:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042b6:	2321      	movs	r3, #33	; 0x21
 80042b8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80042bc:	f7fe fb38 	bl	8002930 <HAL_GetTick>
 80042c0:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 80042c2:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80042c6:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80042ca:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	b963      	cbnz	r3, 80042ea <HAL_UART_Transmit+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042d0:	463b      	mov	r3, r7
 80042d2:	4632      	mov	r2, r6
 80042d4:	2140      	movs	r1, #64	; 0x40
 80042d6:	4620      	mov	r0, r4
 80042d8:	f7ff ff80 	bl	80041dc <UART_WaitOnFlagUntilTimeout.constprop.3>
 80042dc:	b9a0      	cbnz	r0, 8004308 <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 80042de:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80042e0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 80042e4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 80042e8:	e00f      	b.n	800430a <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 80042ea:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042ec:	4632      	mov	r2, r6
      huart->TxXferCount--;
 80042ee:	3b01      	subs	r3, #1
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80042f4:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042f6:	2180      	movs	r1, #128	; 0x80
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80042f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042fc:	4620      	mov	r0, r4
 80042fe:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004300:	d10e      	bne.n	8004320 <HAL_UART_Transmit+0x98>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004302:	f7ff ff6b 	bl	80041dc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8004306:	b110      	cbz	r0, 800430e <HAL_UART_Transmit+0x86>
          return HAL_TIMEOUT;
 8004308:	2003      	movs	r0, #3
}
 800430a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800430e:	882b      	ldrh	r3, [r5, #0]
 8004310:	6822      	ldr	r2, [r4, #0]
 8004312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004316:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004318:	6923      	ldr	r3, [r4, #16]
 800431a:	b943      	cbnz	r3, 800432e <HAL_UART_Transmit+0xa6>
          pData += 2U;
 800431c:	3502      	adds	r5, #2
 800431e:	e7d4      	b.n	80042ca <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004320:	f7ff ff5c 	bl	80041dc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8004324:	2800      	cmp	r0, #0
 8004326:	d1ef      	bne.n	8004308 <HAL_UART_Transmit+0x80>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004328:	6823      	ldr	r3, [r4, #0]
 800432a:	782a      	ldrb	r2, [r5, #0]
 800432c:	605a      	str	r2, [r3, #4]
 800432e:	3501      	adds	r5, #1
 8004330:	e7cb      	b.n	80042ca <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8004332:	2001      	movs	r0, #1
 8004334:	e7e9      	b.n	800430a <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8004336:	2002      	movs	r0, #2
 8004338:	e7e7      	b.n	800430a <HAL_UART_Transmit+0x82>

0800433a <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800433a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800433e:	2b20      	cmp	r3, #32
 8004340:	d120      	bne.n	8004384 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8004342:	b1e9      	cbz	r1, 8004380 <HAL_UART_Receive_IT+0x46>
 8004344:	b1e2      	cbz	r2, 8004380 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 8004346:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800434a:	2b01      	cmp	r3, #1
 800434c:	d01a      	beq.n	8004384 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 800434e:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8004350:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004352:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004354:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004356:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004358:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800435c:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 800435e:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004360:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 8004362:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004366:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800436a:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800436c:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 800436e:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004370:	f041 0101 	orr.w	r1, r1, #1
 8004374:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004376:	68d1      	ldr	r1, [r2, #12]
 8004378:	f041 0120 	orr.w	r1, r1, #32
 800437c:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 800437e:	4770      	bx	lr
      return HAL_ERROR;
 8004380:	2001      	movs	r0, #1
 8004382:	4770      	bx	lr
    return HAL_BUSY;
 8004384:	2002      	movs	r0, #2
}
 8004386:	4770      	bx	lr

08004388 <HAL_UART_TxCpltCallback>:
 8004388:	4770      	bx	lr

0800438a <HAL_UART_RxCpltCallback>:
 800438a:	4770      	bx	lr

0800438c <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800438c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8004390:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004392:	2b22      	cmp	r3, #34	; 0x22
 8004394:	d133      	bne.n	80043fe <UART_Receive_IT+0x72>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004396:	6881      	ldr	r1, [r0, #8]
 8004398:	6904      	ldr	r4, [r0, #16]
 800439a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800439e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80043a0:	6802      	ldr	r2, [r0, #0]
 80043a2:	d123      	bne.n	80043ec <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043a4:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80043a6:	b9ec      	cbnz	r4, 80043e4 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043ac:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 80043b0:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80043b2:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80043b4:	3c01      	subs	r4, #1
 80043b6:	b2a4      	uxth	r4, r4
 80043b8:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80043ba:	b98c      	cbnz	r4, 80043e0 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80043bc:	6803      	ldr	r3, [r0, #0]
 80043be:	68da      	ldr	r2, [r3, #12]
 80043c0:	f022 0220 	bic.w	r2, r2, #32
 80043c4:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043c6:	68da      	ldr	r2, [r3, #12]
 80043c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043cc:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043ce:	695a      	ldr	r2, [r3, #20]
 80043d0:	f022 0201 	bic.w	r2, r2, #1
 80043d4:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80043d6:	2320      	movs	r3, #32
 80043d8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80043dc:	f7ff ffd5 	bl	800438a <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 80043e0:	2000      	movs	r0, #0
 80043e2:	e00d      	b.n	8004400 <UART_Receive_IT+0x74>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80043e4:	b2d2      	uxtb	r2, r2
 80043e6:	f823 2b01 	strh.w	r2, [r3], #1
 80043ea:	e7e1      	b.n	80043b0 <UART_Receive_IT+0x24>
 80043ec:	1c59      	adds	r1, r3, #1
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043ee:	6852      	ldr	r2, [r2, #4]
 80043f0:	6281      	str	r1, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 80043f2:	b90c      	cbnz	r4, 80043f8 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043f4:	701a      	strb	r2, [r3, #0]
 80043f6:	e7dc      	b.n	80043b2 <UART_Receive_IT+0x26>
 80043f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043fc:	e7fa      	b.n	80043f4 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 80043fe:	2002      	movs	r0, #2
}
 8004400:	bd10      	pop	{r4, pc}

08004402 <HAL_UART_ErrorCallback>:
 8004402:	4770      	bx	lr

08004404 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004404:	6803      	ldr	r3, [r0, #0]
{
 8004406:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004408:	681a      	ldr	r2, [r3, #0]
{
 800440a:	4604      	mov	r4, r0
  if (errorflags == RESET)
 800440c:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800440e:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004410:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8004412:	d107      	bne.n	8004424 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004414:	0696      	lsls	r6, r2, #26
 8004416:	d558      	bpl.n	80044ca <HAL_UART_IRQHandler+0xc6>
 8004418:	068d      	lsls	r5, r1, #26
 800441a:	d556      	bpl.n	80044ca <HAL_UART_IRQHandler+0xc6>
}
 800441c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8004420:	f7ff bfb4 	b.w	800438c <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004424:	f015 0501 	ands.w	r5, r5, #1
 8004428:	d102      	bne.n	8004430 <HAL_UART_IRQHandler+0x2c>
 800442a:	f411 7f90 	tst.w	r1, #288	; 0x120
 800442e:	d04c      	beq.n	80044ca <HAL_UART_IRQHandler+0xc6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004430:	07d3      	lsls	r3, r2, #31
 8004432:	d505      	bpl.n	8004440 <HAL_UART_IRQHandler+0x3c>
 8004434:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004436:	bf42      	ittt	mi
 8004438:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 800443a:	f043 0301 	orrmi.w	r3, r3, #1
 800443e:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004440:	0750      	lsls	r0, r2, #29
 8004442:	d504      	bpl.n	800444e <HAL_UART_IRQHandler+0x4a>
 8004444:	b11d      	cbz	r5, 800444e <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004446:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004448:	f043 0302 	orr.w	r3, r3, #2
 800444c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800444e:	0793      	lsls	r3, r2, #30
 8004450:	d504      	bpl.n	800445c <HAL_UART_IRQHandler+0x58>
 8004452:	b11d      	cbz	r5, 800445c <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004454:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004456:	f043 0304 	orr.w	r3, r3, #4
 800445a:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800445c:	0716      	lsls	r6, r2, #28
 800445e:	d504      	bpl.n	800446a <HAL_UART_IRQHandler+0x66>
 8004460:	b11d      	cbz	r5, 800446a <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004462:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004464:	f043 0308 	orr.w	r3, r3, #8
 8004468:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800446a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800446c:	b343      	cbz	r3, 80044c0 <HAL_UART_IRQHandler+0xbc>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800446e:	0695      	lsls	r5, r2, #26
 8004470:	d504      	bpl.n	800447c <HAL_UART_IRQHandler+0x78>
 8004472:	0688      	lsls	r0, r1, #26
 8004474:	d502      	bpl.n	800447c <HAL_UART_IRQHandler+0x78>
        UART_Receive_IT(huart);
 8004476:	4620      	mov	r0, r4
 8004478:	f7ff ff88 	bl	800438c <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800447c:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 800447e:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004480:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004482:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004484:	0711      	lsls	r1, r2, #28
 8004486:	d402      	bmi.n	800448e <HAL_UART_IRQHandler+0x8a>
 8004488:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800448c:	d019      	beq.n	80044c2 <HAL_UART_IRQHandler+0xbe>
        UART_EndRxTransfer(huart);
 800448e:	f7ff fe5d 	bl	800414c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004492:	6823      	ldr	r3, [r4, #0]
 8004494:	695a      	ldr	r2, [r3, #20]
 8004496:	0652      	lsls	r2, r2, #25
 8004498:	d50f      	bpl.n	80044ba <HAL_UART_IRQHandler+0xb6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800449a:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800449c:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800449e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044a2:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80044a4:	b148      	cbz	r0, 80044ba <HAL_UART_IRQHandler+0xb6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044a6:	4b26      	ldr	r3, [pc, #152]	; (8004540 <HAL_UART_IRQHandler+0x13c>)
 80044a8:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044aa:	f7fe fac3 	bl	8002a34 <HAL_DMA_Abort_IT>
 80044ae:	b138      	cbz	r0, 80044c0 <HAL_UART_IRQHandler+0xbc>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044b0:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 80044b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044b6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80044b8:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80044ba:	4620      	mov	r0, r4
 80044bc:	f7ff ffa1 	bl	8004402 <HAL_UART_ErrorCallback>
}
 80044c0:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80044c2:	f7ff ff9e 	bl	8004402 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c6:	63e5      	str	r5, [r4, #60]	; 0x3c
 80044c8:	e7fa      	b.n	80044c0 <HAL_UART_IRQHandler+0xbc>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044ca:	0616      	lsls	r6, r2, #24
 80044cc:	d528      	bpl.n	8004520 <HAL_UART_IRQHandler+0x11c>
 80044ce:	060d      	lsls	r5, r1, #24
 80044d0:	d526      	bpl.n	8004520 <HAL_UART_IRQHandler+0x11c>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80044d2:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80044d6:	2a21      	cmp	r2, #33	; 0x21
 80044d8:	d1f2      	bne.n	80044c0 <HAL_UART_IRQHandler+0xbc>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80044da:	68a1      	ldr	r1, [r4, #8]
 80044dc:	6a22      	ldr	r2, [r4, #32]
 80044de:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80044e2:	d118      	bne.n	8004516 <HAL_UART_IRQHandler+0x112>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80044e4:	8811      	ldrh	r1, [r2, #0]
 80044e6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80044ea:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80044ec:	6921      	ldr	r1, [r4, #16]
 80044ee:	b981      	cbnz	r1, 8004512 <HAL_UART_IRQHandler+0x10e>
        huart->pTxBuffPtr += 2U;
 80044f0:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80044f2:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 80044f4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80044f6:	3a01      	subs	r2, #1
 80044f8:	b292      	uxth	r2, r2
 80044fa:	84e2      	strh	r2, [r4, #38]	; 0x26
 80044fc:	2a00      	cmp	r2, #0
 80044fe:	d1df      	bne.n	80044c0 <HAL_UART_IRQHandler+0xbc>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004506:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004508:	68da      	ldr	r2, [r3, #12]
 800450a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800450e:	60da      	str	r2, [r3, #12]
 8004510:	e7d6      	b.n	80044c0 <HAL_UART_IRQHandler+0xbc>
        huart->pTxBuffPtr += 1U;
 8004512:	3201      	adds	r2, #1
 8004514:	e7ed      	b.n	80044f2 <HAL_UART_IRQHandler+0xee>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004516:	1c51      	adds	r1, r2, #1
 8004518:	6221      	str	r1, [r4, #32]
 800451a:	7812      	ldrb	r2, [r2, #0]
 800451c:	605a      	str	r2, [r3, #4]
 800451e:	e7e9      	b.n	80044f4 <HAL_UART_IRQHandler+0xf0>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004520:	0650      	lsls	r0, r2, #25
 8004522:	d5cd      	bpl.n	80044c0 <HAL_UART_IRQHandler+0xbc>
 8004524:	064a      	lsls	r2, r1, #25
 8004526:	d5cb      	bpl.n	80044c0 <HAL_UART_IRQHandler+0xbc>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004528:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 800452a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800452c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004530:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004532:	2320      	movs	r3, #32
 8004534:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8004538:	f7ff ff26 	bl	8004388 <HAL_UART_TxCpltCallback>
 800453c:	e7c0      	b.n	80044c0 <HAL_UART_IRQHandler+0xbc>
 800453e:	bf00      	nop
 8004540:	08004545 	.word	0x08004545

08004544 <UART_DMAAbortOnError>:
{
 8004544:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8004546:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004548:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 800454a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800454c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800454e:	f7ff ff58 	bl	8004402 <HAL_UART_ErrorCallback>
}
 8004552:	bd08      	pop	{r3, pc}

08004554 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004554:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8004558:	b113      	cbz	r3, 8004560 <osKernelInitialize+0xc>
    stat = osErrorISR;
 800455a:	f06f 0005 	mvn.w	r0, #5
 800455e:	4770      	bx	lr
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004560:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1f8      	bne.n	800455a <osKernelInitialize+0x6>
 8004568:	4b07      	ldr	r3, [pc, #28]	; (8004588 <osKernelInitialize+0x34>)
 800456a:	6818      	ldr	r0, [r3, #0]
 800456c:	2802      	cmp	r0, #2
 800456e:	d106      	bne.n	800457e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004570:	f3ef 8311 	mrs	r3, BASEPRI
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1f0      	bne.n	800455a <osKernelInitialize+0x6>
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
      stat = osOK;
    } else {
      stat = osError;
 8004578:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800457c:	4770      	bx	lr
    if (KernelState == osKernelInactive) {
 800457e:	2800      	cmp	r0, #0
 8004580:	d1fa      	bne.n	8004578 <osKernelInitialize+0x24>
      KernelState = osKernelReady;
 8004582:	2201      	movs	r2, #1
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	4770      	bx	lr
 8004588:	20001e6c 	.word	0x20001e6c

0800458c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800458c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800458e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8004592:	b113      	cbz	r3, 800459a <osKernelStart+0xe>
    stat = osErrorISR;
 8004594:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 8004598:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800459a:	f3ef 8410 	mrs	r4, PRIMASK
  if (IS_IRQ()) {
 800459e:	2c00      	cmp	r4, #0
 80045a0:	d1f8      	bne.n	8004594 <osKernelStart+0x8>
 80045a2:	4b09      	ldr	r3, [pc, #36]	; (80045c8 <osKernelStart+0x3c>)
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	2a02      	cmp	r2, #2
 80045a8:	d106      	bne.n	80045b8 <osKernelStart+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80045aa:	f3ef 8311 	mrs	r3, BASEPRI
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1f0      	bne.n	8004594 <osKernelStart+0x8>
      stat = osError;
 80045b2:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 80045b6:	e7ef      	b.n	8004598 <osKernelStart+0xc>
    if (KernelState == osKernelReady) {
 80045b8:	2a01      	cmp	r2, #1
 80045ba:	d1fa      	bne.n	80045b2 <osKernelStart+0x26>
      KernelState = osKernelRunning;
 80045bc:	2202      	movs	r2, #2
 80045be:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80045c0:	f001 f932 	bl	8005828 <vTaskStartScheduler>
      stat = osOK;
 80045c4:	4620      	mov	r0, r4
 80045c6:	e7e7      	b.n	8004598 <osKernelStart+0xc>
 80045c8:	20001e6c 	.word	0x20001e6c

080045cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80045cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ce:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80045d0:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80045d2:	b087      	sub	sp, #28
 80045d4:	460b      	mov	r3, r1
  hTask = NULL;
 80045d6:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045d8:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80045dc:	bb62      	cbnz	r2, 8004638 <osThreadNew+0x6c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045de:	f3ef 8210 	mrs	r2, PRIMASK
 80045e2:	bb4a      	cbnz	r2, 8004638 <osThreadNew+0x6c>
 80045e4:	4a26      	ldr	r2, [pc, #152]	; (8004680 <osThreadNew+0xb4>)
 80045e6:	6812      	ldr	r2, [r2, #0]
 80045e8:	2a02      	cmp	r2, #2
 80045ea:	d102      	bne.n	80045f2 <osThreadNew+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80045ec:	f3ef 8211 	mrs	r2, BASEPRI
 80045f0:	bb12      	cbnz	r2, 8004638 <osThreadNew+0x6c>
 80045f2:	b308      	cbz	r0, 8004638 <osThreadNew+0x6c>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 80045f4:	2200      	movs	r2, #0
 80045f6:	f88d 2013 	strb.w	r2, [sp, #19]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 80045fa:	2c00      	cmp	r4, #0
 80045fc:	d039      	beq.n	8004672 <osThreadNew+0xa6>
      if (attr->name != NULL) {
 80045fe:	6821      	ldr	r1, [r4, #0]
 8004600:	b909      	cbnz	r1, 8004606 <osThreadNew+0x3a>
    name  = &empty;
 8004602:	f10d 0113 	add.w	r1, sp, #19
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8004606:	69a5      	ldr	r5, [r4, #24]
 8004608:	2d00      	cmp	r5, #0
 800460a:	bf08      	it	eq
 800460c:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800460e:	1e6a      	subs	r2, r5, #1
 8004610:	2a37      	cmp	r2, #55	; 0x37
 8004612:	462f      	mov	r7, r5
 8004614:	d832      	bhi.n	800467c <osThreadNew+0xb0>
 8004616:	6862      	ldr	r2, [r4, #4]
 8004618:	07d2      	lsls	r2, r2, #31
 800461a:	d42f      	bmi.n	800467c <osThreadNew+0xb0>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800461c:	6966      	ldr	r6, [r4, #20]
 800461e:	b176      	cbz	r6, 800463e <osThreadNew+0x72>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004620:	08b2      	lsrs	r2, r6, #2
 8004622:	e9d4 ce02 	ldrd	ip, lr, [r4, #8]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004626:	f1bc 0f00 	cmp.w	ip, #0
 800462a:	d00a      	beq.n	8004642 <osThreadNew+0x76>
 800462c:	f1be 0f63 	cmp.w	lr, #99	; 0x63
 8004630:	d902      	bls.n	8004638 <osThreadNew+0x6c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004632:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004634:	b104      	cbz	r4, 8004638 <osThreadNew+0x6c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004636:	b9ae      	cbnz	r6, 8004664 <osThreadNew+0x98>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004638:	9805      	ldr	r0, [sp, #20]
}
 800463a:	b007      	add	sp, #28
 800463c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800463e:	2240      	movs	r2, #64	; 0x40
 8004640:	e7ef      	b.n	8004622 <osThreadNew+0x56>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004642:	f1be 0f00 	cmp.w	lr, #0
 8004646:	d1f7      	bne.n	8004638 <osThreadNew+0x6c>
      if (mem == 0) {
 8004648:	6924      	ldr	r4, [r4, #16]
 800464a:	2c00      	cmp	r4, #0
 800464c:	d1f4      	bne.n	8004638 <osThreadNew+0x6c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800464e:	ac05      	add	r4, sp, #20
 8004650:	e9cd 7400 	strd	r7, r4, [sp]
 8004654:	b292      	uxth	r2, r2
 8004656:	f001 f8ba 	bl	80057ce <xTaskCreate>
 800465a:	2801      	cmp	r0, #1
          hTask = NULL;
 800465c:	bf1c      	itt	ne
 800465e:	2300      	movne	r3, #0
 8004660:	9305      	strne	r3, [sp, #20]
 8004662:	e7e9      	b.n	8004638 <osThreadNew+0x6c>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004664:	e9cd 4c01 	strd	r4, ip, [sp, #4]
 8004668:	9500      	str	r5, [sp, #0]
 800466a:	f001 f879 	bl	8005760 <xTaskCreateStatic>
 800466e:	9005      	str	r0, [sp, #20]
 8004670:	e7e2      	b.n	8004638 <osThreadNew+0x6c>
    prio  = (UBaseType_t)osPriorityNormal;
 8004672:	2718      	movs	r7, #24
    stack = configMINIMAL_STACK_SIZE;
 8004674:	2240      	movs	r2, #64	; 0x40
    name  = &empty;
 8004676:	f10d 0113 	add.w	r1, sp, #19
 800467a:	e7e8      	b.n	800464e <osThreadNew+0x82>
        return (NULL);
 800467c:	2000      	movs	r0, #0
 800467e:	e7dc      	b.n	800463a <osThreadNew+0x6e>
 8004680:	20001e6c 	.word	0x20001e6c

08004684 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004684:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004686:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800468a:	b113      	cbz	r3, 8004692 <osDelay+0xe>
    stat = osErrorISR;
 800468c:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8004690:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004692:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1f8      	bne.n	800468c <osDelay+0x8>
 800469a:	4b07      	ldr	r3, [pc, #28]	; (80046b8 <osDelay+0x34>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d103      	bne.n	80046aa <osDelay+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80046a2:	f3ef 8311 	mrs	r3, BASEPRI
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1f0      	bne.n	800468c <osDelay+0x8>
    if (ticks != 0U) {
 80046aa:	2800      	cmp	r0, #0
 80046ac:	d0f0      	beq.n	8004690 <osDelay+0xc>
      vTaskDelay(ticks);
 80046ae:	f001 fa13 	bl	8005ad8 <vTaskDelay>
    stat = osOK;
 80046b2:	2000      	movs	r0, #0
 80046b4:	e7ec      	b.n	8004690 <osDelay+0xc>
 80046b6:	bf00      	nop
 80046b8:	20001e6c 	.word	0x20001e6c

080046bc <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80046bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80046be:	460e      	mov	r6, r1
 80046c0:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046c2:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80046c6:	b11b      	cbz	r3, 80046d0 <osSemaphoreNew+0x14>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 80046c8:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 80046ca:	4620      	mov	r0, r4
 80046cc:	b002      	add	sp, #8
 80046ce:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046d0:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1f7      	bne.n	80046c8 <osSemaphoreNew+0xc>
 80046d8:	4b23      	ldr	r3, [pc, #140]	; (8004768 <osSemaphoreNew+0xac>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d103      	bne.n	80046e8 <osSemaphoreNew+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80046e0:	f3ef 8311 	mrs	r3, BASEPRI
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1ef      	bne.n	80046c8 <osSemaphoreNew+0xc>
 80046e8:	2800      	cmp	r0, #0
 80046ea:	d0ed      	beq.n	80046c8 <osSemaphoreNew+0xc>
 80046ec:	42b0      	cmp	r0, r6
 80046ee:	d3eb      	bcc.n	80046c8 <osSemaphoreNew+0xc>
    if (attr != NULL) {
 80046f0:	b1ed      	cbz	r5, 800472e <osSemaphoreNew+0x72>
 80046f2:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80046f6:	b1c3      	cbz	r3, 800472a <osSemaphoreNew+0x6e>
 80046f8:	2a4f      	cmp	r2, #79	; 0x4f
 80046fa:	d9e5      	bls.n	80046c8 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 80046fc:	2801      	cmp	r0, #1
 80046fe:	d126      	bne.n	800474e <osSemaphoreNew+0x92>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004700:	2203      	movs	r2, #3
 8004702:	9200      	str	r2, [sp, #0]
 8004704:	2200      	movs	r2, #0
 8004706:	4611      	mov	r1, r2
 8004708:	f000 fa9c 	bl	8004c44 <xQueueGenericCreateStatic>
          hSemaphore = xSemaphoreCreateBinary();
 800470c:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800470e:	2800      	cmp	r0, #0
 8004710:	d0da      	beq.n	80046c8 <osSemaphoreNew+0xc>
 8004712:	b1ce      	cbz	r6, 8004748 <osSemaphoreNew+0x8c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004714:	2300      	movs	r3, #0
 8004716:	461a      	mov	r2, r3
 8004718:	4619      	mov	r1, r3
 800471a:	f000 fb47 	bl	8004dac <xQueueGenericSend>
 800471e:	2801      	cmp	r0, #1
 8004720:	d012      	beq.n	8004748 <osSemaphoreNew+0x8c>
            vSemaphoreDelete (hSemaphore);
 8004722:	4620      	mov	r0, r4
 8004724:	f000 fe82 	bl	800542c <vQueueDelete>
 8004728:	e7ce      	b.n	80046c8 <osSemaphoreNew+0xc>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800472a:	2a00      	cmp	r2, #0
 800472c:	d1cc      	bne.n	80046c8 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 800472e:	2801      	cmp	r0, #1
 8004730:	d104      	bne.n	800473c <osSemaphoreNew+0x80>
          hSemaphore = xSemaphoreCreateBinary();
 8004732:	2203      	movs	r2, #3
 8004734:	2100      	movs	r1, #0
 8004736:	f000 fad2 	bl	8004cde <xQueueGenericCreate>
 800473a:	e7e7      	b.n	800470c <osSemaphoreNew+0x50>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800473c:	4631      	mov	r1, r6
 800473e:	f000 fb17 	bl	8004d70 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 8004742:	4604      	mov	r4, r0
 8004744:	2800      	cmp	r0, #0
 8004746:	d0bf      	beq.n	80046c8 <osSemaphoreNew+0xc>
        if (attr != NULL) {
 8004748:	b945      	cbnz	r5, 800475c <osSemaphoreNew+0xa0>
          name = NULL;
 800474a:	4629      	mov	r1, r5
 800474c:	e007      	b.n	800475e <osSemaphoreNew+0xa2>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800474e:	461a      	mov	r2, r3
 8004750:	4631      	mov	r1, r6
 8004752:	f000 faeb 	bl	8004d2c <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 8004756:	4604      	mov	r4, r0
 8004758:	2800      	cmp	r0, #0
 800475a:	d0b5      	beq.n	80046c8 <osSemaphoreNew+0xc>
          name = attr->name;
 800475c:	6829      	ldr	r1, [r5, #0]
        vQueueAddToRegistry (hSemaphore, name);
 800475e:	4620      	mov	r0, r4
 8004760:	f000 fe3e 	bl	80053e0 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 8004764:	e7b1      	b.n	80046ca <osSemaphoreNew+0xe>
 8004766:	bf00      	nop
 8004768:	20001e6c 	.word	0x20001e6c

0800476c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800476c:	b513      	push	{r0, r1, r4, lr}
 800476e:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8004770:	b918      	cbnz	r0, 800477a <osSemaphoreAcquire+0xe>
    stat = osErrorParameter;
 8004772:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8004776:	b002      	add	sp, #8
 8004778:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800477a:	f3ef 8305 	mrs	r3, IPSR
  else if (IS_IRQ()) {
 800477e:	b16b      	cbz	r3, 800479c <osSemaphoreAcquire+0x30>
    if (timeout != 0U) {
 8004780:	2c00      	cmp	r4, #0
 8004782:	d1f6      	bne.n	8004772 <osSemaphoreAcquire+0x6>
      yield = pdFALSE;
 8004784:	aa02      	add	r2, sp, #8
 8004786:	f842 4d04 	str.w	r4, [r2, #-4]!
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800478a:	4621      	mov	r1, r4
 800478c:	f000 fdd8 	bl	8005340 <xQueueReceiveFromISR>
 8004790:	2801      	cmp	r0, #1
 8004792:	d115      	bne.n	80047c0 <osSemaphoreAcquire+0x54>
        portYIELD_FROM_ISR (yield);
 8004794:	9b01      	ldr	r3, [sp, #4]
 8004796:	b9b3      	cbnz	r3, 80047c6 <osSemaphoreAcquire+0x5a>
  stat = osOK;
 8004798:	2000      	movs	r0, #0
 800479a:	e7ec      	b.n	8004776 <osSemaphoreAcquire+0xa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800479c:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1ed      	bne.n	8004780 <osSemaphoreAcquire+0x14>
 80047a4:	4b0e      	ldr	r3, [pc, #56]	; (80047e0 <osSemaphoreAcquire+0x74>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d103      	bne.n	80047b4 <osSemaphoreAcquire+0x48>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80047ac:	f3ef 8311 	mrs	r3, BASEPRI
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1e5      	bne.n	8004780 <osSemaphoreAcquire+0x14>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80047b4:	4621      	mov	r1, r4
 80047b6:	f000 fd01 	bl	80051bc <xQueueSemaphoreTake>
 80047ba:	2801      	cmp	r0, #1
 80047bc:	d0ec      	beq.n	8004798 <osSemaphoreAcquire+0x2c>
      if (timeout != 0U) {
 80047be:	b95c      	cbnz	r4, 80047d8 <osSemaphoreAcquire+0x6c>
        stat = osErrorResource;
 80047c0:	f06f 0002 	mvn.w	r0, #2
 80047c4:	e7d7      	b.n	8004776 <osSemaphoreAcquire+0xa>
        portYIELD_FROM_ISR (yield);
 80047c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ca:	4b06      	ldr	r3, [pc, #24]	; (80047e4 <osSemaphoreAcquire+0x78>)
 80047cc:	601a      	str	r2, [r3, #0]
 80047ce:	f3bf 8f4f 	dsb	sy
 80047d2:	f3bf 8f6f 	isb	sy
 80047d6:	e7df      	b.n	8004798 <osSemaphoreAcquire+0x2c>
        stat = osErrorTimeout;
 80047d8:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 80047dc:	e7cb      	b.n	8004776 <osSemaphoreAcquire+0xa>
 80047de:	bf00      	nop
 80047e0:	20001e6c 	.word	0x20001e6c
 80047e4:	e000ed04 	.word	0xe000ed04

080047e8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80047e8:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80047ea:	b378      	cbz	r0, 800484c <osSemaphoreRelease+0x64>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047ec:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 80047f0:	b153      	cbz	r3, 8004808 <osSemaphoreRelease+0x20>
    yield = pdFALSE;
 80047f2:	2400      	movs	r4, #0
 80047f4:	a902      	add	r1, sp, #8
 80047f6:	f841 4d04 	str.w	r4, [r1, #-4]!

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80047fa:	f000 fbea 	bl	8004fd2 <xQueueGiveFromISR>
 80047fe:	2801      	cmp	r0, #1
 8004800:	d016      	beq.n	8004830 <osSemaphoreRelease+0x48>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 8004802:	f06f 0002 	mvn.w	r0, #2
 8004806:	e016      	b.n	8004836 <osSemaphoreRelease+0x4e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004808:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1f0      	bne.n	80047f2 <osSemaphoreRelease+0xa>
 8004810:	4b10      	ldr	r3, [pc, #64]	; (8004854 <osSemaphoreRelease+0x6c>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2b02      	cmp	r3, #2
 8004816:	d103      	bne.n	8004820 <osSemaphoreRelease+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004818:	f3ef 8311 	mrs	r3, BASEPRI
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1e8      	bne.n	80047f2 <osSemaphoreRelease+0xa>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004820:	2300      	movs	r3, #0
 8004822:	461a      	mov	r2, r3
 8004824:	4619      	mov	r1, r3
 8004826:	f000 fac1 	bl	8004dac <xQueueGenericSend>
 800482a:	2801      	cmp	r0, #1
 800482c:	d002      	beq.n	8004834 <osSemaphoreRelease+0x4c>
 800482e:	e7e8      	b.n	8004802 <osSemaphoreRelease+0x1a>
      portYIELD_FROM_ISR (yield);
 8004830:	9b01      	ldr	r3, [sp, #4]
 8004832:	b913      	cbnz	r3, 800483a <osSemaphoreRelease+0x52>
  stat = osOK;
 8004834:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 8004836:	b002      	add	sp, #8
 8004838:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 800483a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800483e:	4b06      	ldr	r3, [pc, #24]	; (8004858 <osSemaphoreRelease+0x70>)
 8004840:	601a      	str	r2, [r3, #0]
 8004842:	f3bf 8f4f 	dsb	sy
 8004846:	f3bf 8f6f 	isb	sy
 800484a:	e7f3      	b.n	8004834 <osSemaphoreRelease+0x4c>
    stat = osErrorParameter;
 800484c:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8004850:	e7f1      	b.n	8004836 <osSemaphoreRelease+0x4e>
 8004852:	bf00      	nop
 8004854:	20001e6c 	.word	0x20001e6c
 8004858:	e000ed04 	.word	0xe000ed04

0800485c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800485c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800485e:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004860:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004864:	b11b      	cbz	r3, 800486e <osMessageQueueNew+0x12>
  hQueue = NULL;
 8004866:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8004868:	4628      	mov	r0, r5
 800486a:	b002      	add	sp, #8
 800486c:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800486e:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1f7      	bne.n	8004866 <osMessageQueueNew+0xa>
 8004876:	4b1c      	ldr	r3, [pc, #112]	; (80048e8 <osMessageQueueNew+0x8c>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2b02      	cmp	r3, #2
 800487c:	d103      	bne.n	8004886 <osMessageQueueNew+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800487e:	f3ef 8311 	mrs	r3, BASEPRI
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1ef      	bne.n	8004866 <osMessageQueueNew+0xa>
 8004886:	2800      	cmp	r0, #0
 8004888:	d0ed      	beq.n	8004866 <osMessageQueueNew+0xa>
 800488a:	2900      	cmp	r1, #0
 800488c:	d0eb      	beq.n	8004866 <osMessageQueueNew+0xa>
    if (attr != NULL) {
 800488e:	b304      	cbz	r4, 80048d2 <osMessageQueueNew+0x76>
 8004890:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004894:	b1ab      	cbz	r3, 80048c2 <osMessageQueueNew+0x66>
 8004896:	2a4f      	cmp	r2, #79	; 0x4f
 8004898:	d9e5      	bls.n	8004866 <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800489a:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800489c:	2a00      	cmp	r2, #0
 800489e:	d0e2      	beq.n	8004866 <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80048a0:	fb01 f500 	mul.w	r5, r1, r0
 80048a4:	6966      	ldr	r6, [r4, #20]
 80048a6:	42ae      	cmp	r6, r5
 80048a8:	d3dd      	bcc.n	8004866 <osMessageQueueNew+0xa>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80048aa:	2500      	movs	r5, #0
 80048ac:	9500      	str	r5, [sp, #0]
 80048ae:	f000 f9c9 	bl	8004c44 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 80048b2:	4605      	mov	r5, r0
 80048b4:	2800      	cmp	r0, #0
 80048b6:	d0d6      	beq.n	8004866 <osMessageQueueNew+0xa>
        name = attr->name;
 80048b8:	6821      	ldr	r1, [r4, #0]
      vQueueAddToRegistry (hQueue, name);
 80048ba:	4628      	mov	r0, r5
 80048bc:	f000 fd90 	bl	80053e0 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 80048c0:	e7d2      	b.n	8004868 <osMessageQueueNew+0xc>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80048c2:	2a00      	cmp	r2, #0
 80048c4:	d1cf      	bne.n	8004866 <osMessageQueueNew+0xa>
 80048c6:	6923      	ldr	r3, [r4, #16]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1cc      	bne.n	8004866 <osMessageQueueNew+0xa>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80048cc:	6963      	ldr	r3, [r4, #20]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1c9      	bne.n	8004866 <osMessageQueueNew+0xa>
        hQueue = xQueueCreate (msg_count, msg_size);
 80048d2:	2200      	movs	r2, #0
 80048d4:	f000 fa03 	bl	8004cde <xQueueGenericCreate>
    if (hQueue != NULL) {
 80048d8:	4605      	mov	r5, r0
 80048da:	2800      	cmp	r0, #0
 80048dc:	d0c3      	beq.n	8004866 <osMessageQueueNew+0xa>
      if (attr != NULL) {
 80048de:	2c00      	cmp	r4, #0
 80048e0:	d1ea      	bne.n	80048b8 <osMessageQueueNew+0x5c>
        name = NULL;
 80048e2:	4621      	mov	r1, r4
 80048e4:	e7e9      	b.n	80048ba <osMessageQueueNew+0x5e>
 80048e6:	bf00      	nop
 80048e8:	20001e6c 	.word	0x20001e6c

080048ec <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80048ec:	b513      	push	{r0, r1, r4, lr}
 80048ee:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048f0:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80048f4:	b123      	cbz	r3, 8004900 <osMessageQueuePut+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80048f6:	b9e8      	cbnz	r0, 8004934 <osMessageQueuePut+0x48>
      stat = osErrorParameter;
 80048f8:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 80048fc:	b002      	add	sp, #8
 80048fe:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004900:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1f6      	bne.n	80048f6 <osMessageQueuePut+0xa>
 8004908:	4b18      	ldr	r3, [pc, #96]	; (800496c <osMessageQueuePut+0x80>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2b02      	cmp	r3, #2
 800490e:	d103      	bne.n	8004918 <osMessageQueuePut+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004910:	f3ef 8311 	mrs	r3, BASEPRI
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1ee      	bne.n	80048f6 <osMessageQueuePut+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004918:	2800      	cmp	r0, #0
 800491a:	d0ed      	beq.n	80048f8 <osMessageQueuePut+0xc>
 800491c:	2900      	cmp	r1, #0
 800491e:	d0eb      	beq.n	80048f8 <osMessageQueuePut+0xc>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004920:	2300      	movs	r3, #0
 8004922:	4622      	mov	r2, r4
 8004924:	f000 fa42 	bl	8004dac <xQueueGenericSend>
 8004928:	2801      	cmp	r0, #1
 800492a:	d011      	beq.n	8004950 <osMessageQueuePut+0x64>
        if (timeout != 0U) {
 800492c:	b9dc      	cbnz	r4, 8004966 <osMessageQueuePut+0x7a>
          stat = osErrorResource;
 800492e:	f06f 0002 	mvn.w	r0, #2
 8004932:	e7e3      	b.n	80048fc <osMessageQueuePut+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004934:	2900      	cmp	r1, #0
 8004936:	d0df      	beq.n	80048f8 <osMessageQueuePut+0xc>
 8004938:	2c00      	cmp	r4, #0
 800493a:	d1dd      	bne.n	80048f8 <osMessageQueuePut+0xc>
      yield = pdFALSE;
 800493c:	aa02      	add	r2, sp, #8
 800493e:	f842 4d04 	str.w	r4, [r2, #-4]!
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004942:	4623      	mov	r3, r4
 8004944:	f000 fae4 	bl	8004f10 <xQueueGenericSendFromISR>
 8004948:	2801      	cmp	r0, #1
 800494a:	d1f0      	bne.n	800492e <osMessageQueuePut+0x42>
        portYIELD_FROM_ISR (yield);
 800494c:	9b01      	ldr	r3, [sp, #4]
 800494e:	b90b      	cbnz	r3, 8004954 <osMessageQueuePut+0x68>
  stat = osOK;
 8004950:	2000      	movs	r0, #0
 8004952:	e7d3      	b.n	80048fc <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 8004954:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004958:	4b05      	ldr	r3, [pc, #20]	; (8004970 <osMessageQueuePut+0x84>)
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	f3bf 8f4f 	dsb	sy
 8004960:	f3bf 8f6f 	isb	sy
 8004964:	e7f4      	b.n	8004950 <osMessageQueuePut+0x64>
          stat = osErrorTimeout;
 8004966:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800496a:	e7c7      	b.n	80048fc <osMessageQueuePut+0x10>
 800496c:	20001e6c 	.word	0x20001e6c
 8004970:	e000ed04 	.word	0xe000ed04

08004974 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004974:	b513      	push	{r0, r1, r4, lr}
 8004976:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004978:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800497c:	b123      	cbz	r3, 8004988 <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800497e:	b9e0      	cbnz	r0, 80049ba <osMessageQueueGet+0x46>
      stat = osErrorParameter;
 8004980:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8004984:	b002      	add	sp, #8
 8004986:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004988:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1f6      	bne.n	800497e <osMessageQueueGet+0xa>
 8004990:	4b17      	ldr	r3, [pc, #92]	; (80049f0 <osMessageQueueGet+0x7c>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2b02      	cmp	r3, #2
 8004996:	d103      	bne.n	80049a0 <osMessageQueueGet+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004998:	f3ef 8311 	mrs	r3, BASEPRI
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1ee      	bne.n	800497e <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80049a0:	2800      	cmp	r0, #0
 80049a2:	d0ed      	beq.n	8004980 <osMessageQueueGet+0xc>
 80049a4:	2900      	cmp	r1, #0
 80049a6:	d0eb      	beq.n	8004980 <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80049a8:	4622      	mov	r2, r4
 80049aa:	f000 fb67 	bl	800507c <xQueueReceive>
 80049ae:	2801      	cmp	r0, #1
 80049b0:	d010      	beq.n	80049d4 <osMessageQueueGet+0x60>
        if (timeout != 0U) {
 80049b2:	b9d4      	cbnz	r4, 80049ea <osMessageQueueGet+0x76>
          stat = osErrorResource;
 80049b4:	f06f 0002 	mvn.w	r0, #2
 80049b8:	e7e4      	b.n	8004984 <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80049ba:	2900      	cmp	r1, #0
 80049bc:	d0e0      	beq.n	8004980 <osMessageQueueGet+0xc>
 80049be:	2c00      	cmp	r4, #0
 80049c0:	d1de      	bne.n	8004980 <osMessageQueueGet+0xc>
      yield = pdFALSE;
 80049c2:	aa02      	add	r2, sp, #8
 80049c4:	f842 4d04 	str.w	r4, [r2, #-4]!
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80049c8:	f000 fcba 	bl	8005340 <xQueueReceiveFromISR>
 80049cc:	2801      	cmp	r0, #1
 80049ce:	d1f1      	bne.n	80049b4 <osMessageQueueGet+0x40>
        portYIELD_FROM_ISR (yield);
 80049d0:	9b01      	ldr	r3, [sp, #4]
 80049d2:	b90b      	cbnz	r3, 80049d8 <osMessageQueueGet+0x64>
  stat = osOK;
 80049d4:	2000      	movs	r0, #0
 80049d6:	e7d5      	b.n	8004984 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 80049d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049dc:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <osMessageQueueGet+0x80>)
 80049de:	601a      	str	r2, [r3, #0]
 80049e0:	f3bf 8f4f 	dsb	sy
 80049e4:	f3bf 8f6f 	isb	sy
 80049e8:	e7f4      	b.n	80049d4 <osMessageQueueGet+0x60>
          stat = osErrorTimeout;
 80049ea:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 80049ee:	e7c9      	b.n	8004984 <osMessageQueueGet+0x10>
 80049f0:	20001e6c 	.word	0x20001e6c
 80049f4:	e000ed04 	.word	0xe000ed04

080049f8 <vApplicationStackOverflowHook>:
*/
#if (configCHECK_FOR_STACK_OVERFLOW > 0)
__WEAK void vApplicationStackOverflowHook (TaskHandle_t xTask, signed char *pcTaskName) {
  (void)xTask;
  (void)pcTaskName;
}
 80049f8:	4770      	bx	lr
	...

080049fc <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80049fc:	4b03      	ldr	r3, [pc, #12]	; (8004a0c <vApplicationGetIdleTaskMemory+0x10>)
 80049fe:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004a00:	4b03      	ldr	r3, [pc, #12]	; (8004a10 <vApplicationGetIdleTaskMemory+0x14>)
 8004a02:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004a04:	2340      	movs	r3, #64	; 0x40
 8004a06:	6013      	str	r3, [r2, #0]
}
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	20001e08 	.word	0x20001e08
 8004a10:	20001d08 	.word	0x20001d08

08004a14 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004a14:	4b03      	ldr	r3, [pc, #12]	; (8004a24 <vApplicationGetTimerTaskMemory+0x10>)
 8004a16:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004a18:	4b03      	ldr	r3, [pc, #12]	; (8004a28 <vApplicationGetTimerTaskMemory+0x14>)
 8004a1a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004a1c:	2380      	movs	r3, #128	; 0x80
 8004a1e:	6013      	str	r3, [r2, #0]
}
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	20002070 	.word	0x20002070
 8004a28:	20001e70 	.word	0x20001e70

08004a2c <vListInitialise>:
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a2c:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a30:	f100 0308 	add.w	r3, r0, #8
 8004a34:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a36:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a3a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a40:	4770      	bx	lr

08004a42 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004a42:	2300      	movs	r3, #0
 8004a44:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a46:	4770      	bx	lr

08004a48 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a48:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a4a:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8004a4c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a4e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a50:	689a      	ldr	r2, [r3, #8]
 8004a52:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004a54:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8004a56:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004a58:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	6003      	str	r3, [r0, #0]
}
 8004a5e:	4770      	bx	lr

08004a60 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004a60:	680a      	ldr	r2, [r1, #0]
{
 8004a62:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004a64:	1c53      	adds	r3, r2, #1
 8004a66:	d10a      	bne.n	8004a7e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004a68:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004a6e:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004a70:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8004a72:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8004a74:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004a76:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004a78:	3301      	adds	r3, #1
 8004a7a:	6003      	str	r3, [r0, #0]
}
 8004a7c:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a7e:	f100 0308 	add.w	r3, r0, #8
 8004a82:	685c      	ldr	r4, [r3, #4]
 8004a84:	6825      	ldr	r5, [r4, #0]
 8004a86:	4295      	cmp	r5, r2
 8004a88:	d8ef      	bhi.n	8004a6a <vListInsert+0xa>
 8004a8a:	4623      	mov	r3, r4
 8004a8c:	e7f9      	b.n	8004a82 <vListInsert+0x22>

08004a8e <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004a8e:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a90:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8004a94:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a96:	6882      	ldr	r2, [r0, #8]
 8004a98:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a9a:	6859      	ldr	r1, [r3, #4]
 8004a9c:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a9e:	bf08      	it	eq
 8004aa0:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	3a01      	subs	r2, #1
 8004aaa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004aac:	6818      	ldr	r0, [r3, #0]
}
 8004aae:	4770      	bx	lr

08004ab0 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004ab0:	b510      	push	{r4, lr}
 8004ab2:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ab4:	f001 fc6e 	bl	8006394 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004ab8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8004aba:	f001 fc8d 	bl	80063d8 <vPortExitCritical>

	return xReturn;
}
 8004abe:	fab4 f084 	clz	r0, r4
 8004ac2:	0940      	lsrs	r0, r0, #5
 8004ac4:	bd10      	pop	{r4, pc}

08004ac6 <prvCopyDataToQueue>:
{
 8004ac6:	b570      	push	{r4, r5, r6, lr}
 8004ac8:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004aca:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8004acc:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ace:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004ad0:	b942      	cbnz	r2, 8004ae4 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ad2:	6805      	ldr	r5, [r0, #0]
 8004ad4:	b99d      	cbnz	r5, 8004afe <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004ad6:	6840      	ldr	r0, [r0, #4]
 8004ad8:	f001 f992 	bl	8005e00 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8004adc:	6065      	str	r5, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004ade:	3601      	adds	r6, #1
 8004ae0:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8004ae2:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8004ae4:	b96d      	cbnz	r5, 8004b02 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004ae6:	6880      	ldr	r0, [r0, #8]
 8004ae8:	f001 fe8a 	bl	8006800 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004aec:	68a3      	ldr	r3, [r4, #8]
 8004aee:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004af0:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004af2:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004af4:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d301      	bcc.n	8004afe <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8004afe:	2000      	movs	r0, #0
 8004b00:	e7ed      	b.n	8004ade <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b02:	68c0      	ldr	r0, [r0, #12]
 8004b04:	f001 fe7c 	bl	8006800 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004b08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b0a:	68e2      	ldr	r2, [r4, #12]
 8004b0c:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b0e:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004b10:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b12:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004b14:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004b16:	bf3e      	ittt	cc
 8004b18:	6862      	ldrcc	r2, [r4, #4]
 8004b1a:	189b      	addcc	r3, r3, r2
 8004b1c:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8004b1e:	2d02      	cmp	r5, #2
 8004b20:	d1ed      	bne.n	8004afe <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b22:	b10e      	cbz	r6, 8004b28 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8004b24:	3e01      	subs	r6, #1
 8004b26:	e7ea      	b.n	8004afe <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8004b28:	4630      	mov	r0, r6
 8004b2a:	e7d8      	b.n	8004ade <prvCopyDataToQueue+0x18>

08004b2c <prvCopyDataFromQueue>:
{
 8004b2c:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004b2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8004b30:	b410      	push	{r4}
 8004b32:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004b34:	b162      	cbz	r2, 8004b50 <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004b36:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004b38:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004b3a:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004b3c:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004b3e:	60d9      	str	r1, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004b40:	bf28      	it	cs
 8004b42:	6819      	ldrcs	r1, [r3, #0]
}
 8004b44:	bc10      	pop	{r4}
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004b46:	bf28      	it	cs
 8004b48:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004b4a:	68d9      	ldr	r1, [r3, #12]
 8004b4c:	f001 be58 	b.w	8006800 <memcpy>
}
 8004b50:	bc10      	pop	{r4}
 8004b52:	4770      	bx	lr

08004b54 <prvUnlockQueue>:
{
 8004b54:	b570      	push	{r4, r5, r6, lr}
 8004b56:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8004b58:	f001 fc1c 	bl	8006394 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8004b5c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b60:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8004b64:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b66:	2d00      	cmp	r5, #0
 8004b68:	dc14      	bgt.n	8004b94 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8004b6a:	23ff      	movs	r3, #255	; 0xff
 8004b6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8004b70:	f001 fc32 	bl	80063d8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8004b74:	f001 fc0e 	bl	8006394 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8004b78:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b7c:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8004b80:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b82:	2d00      	cmp	r5, #0
 8004b84:	dc12      	bgt.n	8004bac <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8004b86:	23ff      	movs	r3, #255	; 0xff
 8004b88:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8004b8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8004b90:	f001 bc22 	b.w	80063d8 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d0e7      	beq.n	8004b6a <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b9a:	4630      	mov	r0, r6
 8004b9c:	f001 f850 	bl	8005c40 <xTaskRemoveFromEventList>
 8004ba0:	b108      	cbz	r0, 8004ba6 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8004ba2:	f001 f8d5 	bl	8005d50 <vTaskMissedYield>
 8004ba6:	3d01      	subs	r5, #1
 8004ba8:	b26d      	sxtb	r5, r5
 8004baa:	e7dc      	b.n	8004b66 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bac:	6923      	ldr	r3, [r4, #16]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d0e9      	beq.n	8004b86 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bb2:	4630      	mov	r0, r6
 8004bb4:	f001 f844 	bl	8005c40 <xTaskRemoveFromEventList>
 8004bb8:	b108      	cbz	r0, 8004bbe <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8004bba:	f001 f8c9 	bl	8005d50 <vTaskMissedYield>
 8004bbe:	3d01      	subs	r5, #1
 8004bc0:	b26d      	sxtb	r5, r5
 8004bc2:	e7de      	b.n	8004b82 <prvUnlockQueue+0x2e>

08004bc4 <xQueueGenericReset>:
{
 8004bc4:	b538      	push	{r3, r4, r5, lr}
 8004bc6:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8004bc8:	4604      	mov	r4, r0
 8004bca:	b940      	cbnz	r0, 8004bde <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd0:	f383 8811 	msr	BASEPRI, r3
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	e7fe      	b.n	8004bdc <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8004bde:	f001 fbd9 	bl	8006394 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004be2:	e9d4 300f 	ldrd	r3, r0, [r4, #60]	; 0x3c
 8004be6:	4343      	muls	r3, r0
 8004be8:	6822      	ldr	r2, [r4, #0]
 8004bea:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004bec:	1a1b      	subs	r3, r3, r0
 8004bee:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004bf0:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004bf2:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004bf4:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8004bf6:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004bf8:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004bfa:	60a2      	str	r2, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 8004bfc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004c00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8004c04:	b995      	cbnz	r5, 8004c2c <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c06:	6923      	ldr	r3, [r4, #16]
 8004c08:	b163      	cbz	r3, 8004c24 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c0a:	f104 0010 	add.w	r0, r4, #16
 8004c0e:	f001 f817 	bl	8005c40 <xTaskRemoveFromEventList>
 8004c12:	b138      	cbz	r0, 8004c24 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8004c14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c18:	4b09      	ldr	r3, [pc, #36]	; (8004c40 <xQueueGenericReset+0x7c>)
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8004c24:	f001 fbd8 	bl	80063d8 <vPortExitCritical>
}
 8004c28:	2001      	movs	r0, #1
 8004c2a:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c2c:	f104 0010 	add.w	r0, r4, #16
 8004c30:	f7ff fefc 	bl	8004a2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c34:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004c38:	f7ff fef8 	bl	8004a2c <vListInitialise>
 8004c3c:	e7f2      	b.n	8004c24 <xQueueGenericReset+0x60>
 8004c3e:	bf00      	nop
 8004c40:	e000ed04 	.word	0xe000ed04

08004c44 <xQueueGenericCreateStatic>:
	{
 8004c44:	b513      	push	{r0, r1, r4, lr}
 8004c46:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c48:	b940      	cbnz	r0, 8004c5c <xQueueGenericCreateStatic+0x18>
 8004c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4e:	f383 8811 	msr	BASEPRI, r3
 8004c52:	f3bf 8f6f 	isb	sy
 8004c56:	f3bf 8f4f 	dsb	sy
 8004c5a:	e7fe      	b.n	8004c5a <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 8004c5c:	b943      	cbnz	r3, 8004c70 <xQueueGenericCreateStatic+0x2c>
 8004c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c62:	f383 8811 	msr	BASEPRI, r3
 8004c66:	f3bf 8f6f 	isb	sy
 8004c6a:	f3bf 8f4f 	dsb	sy
 8004c6e:	e7fe      	b.n	8004c6e <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004c70:	b14a      	cbz	r2, 8004c86 <xQueueGenericCreateStatic+0x42>
 8004c72:	b991      	cbnz	r1, 8004c9a <xQueueGenericCreateStatic+0x56>
 8004c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c78:	f383 8811 	msr	BASEPRI, r3
 8004c7c:	f3bf 8f6f 	isb	sy
 8004c80:	f3bf 8f4f 	dsb	sy
 8004c84:	e7fe      	b.n	8004c84 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004c86:	b141      	cbz	r1, 8004c9a <xQueueGenericCreateStatic+0x56>
 8004c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8c:	f383 8811 	msr	BASEPRI, r3
 8004c90:	f3bf 8f6f 	isb	sy
 8004c94:	f3bf 8f4f 	dsb	sy
 8004c98:	e7fe      	b.n	8004c98 <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004c9a:	2350      	movs	r3, #80	; 0x50
 8004c9c:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004c9e:	9b01      	ldr	r3, [sp, #4]
 8004ca0:	2b50      	cmp	r3, #80	; 0x50
 8004ca2:	d008      	beq.n	8004cb6 <xQueueGenericCreateStatic+0x72>
 8004ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca8:	f383 8811 	msr	BASEPRI, r3
 8004cac:	f3bf 8f6f 	isb	sy
 8004cb0:	f3bf 8f4f 	dsb	sy
 8004cb4:	e7fe      	b.n	8004cb4 <xQueueGenericCreateStatic+0x70>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004cb6:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004cb8:	2900      	cmp	r1, #0
 8004cba:	bf08      	it	eq
 8004cbc:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8004cbe:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004cc2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004cc6:	4619      	mov	r1, r3
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004cc8:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004cca:	4620      	mov	r0, r4
 8004ccc:	f7ff ff7a 	bl	8004bc4 <xQueueGenericReset>
	}
 8004cd0:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8004cd2:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8004cd6:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8004cda:	b002      	add	sp, #8
 8004cdc:	bd10      	pop	{r4, pc}

08004cde <xQueueGenericCreate>:
	{
 8004cde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce0:	460d      	mov	r5, r1
 8004ce2:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ce4:	4606      	mov	r6, r0
 8004ce6:	b940      	cbnz	r0, 8004cfa <xQueueGenericCreate+0x1c>
 8004ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cec:	f383 8811 	msr	BASEPRI, r3
 8004cf0:	f3bf 8f6f 	isb	sy
 8004cf4:	f3bf 8f4f 	dsb	sy
 8004cf8:	e7fe      	b.n	8004cf8 <xQueueGenericCreate+0x1a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cfa:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004cfc:	3050      	adds	r0, #80	; 0x50
 8004cfe:	f001 fc7d 	bl	80065fc <pvPortMalloc>
		if( pxNewQueue != NULL )
 8004d02:	4604      	mov	r4, r0
 8004d04:	b160      	cbz	r0, 8004d20 <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004d06:	2300      	movs	r3, #0
 8004d08:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8004d0c:	b955      	cbnz	r5, 8004d24 <xQueueGenericCreate+0x46>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004d0e:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8004d10:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004d14:	2101      	movs	r1, #1
 8004d16:	4620      	mov	r0, r4
 8004d18:	f7ff ff54 	bl	8004bc4 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8004d1c:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 8004d20:	4620      	mov	r0, r4
 8004d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004d24:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004d28:	6003      	str	r3, [r0, #0]
 8004d2a:	e7f1      	b.n	8004d10 <xQueueGenericCreate+0x32>

08004d2c <xQueueCreateCountingSemaphoreStatic>:
	{
 8004d2c:	b513      	push	{r0, r1, r4, lr}
 8004d2e:	4613      	mov	r3, r2
 8004d30:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8004d32:	b940      	cbnz	r0, 8004d46 <xQueueCreateCountingSemaphoreStatic+0x1a>
 8004d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d38:	f383 8811 	msr	BASEPRI, r3
 8004d3c:	f3bf 8f6f 	isb	sy
 8004d40:	f3bf 8f4f 	dsb	sy
 8004d44:	e7fe      	b.n	8004d44 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004d46:	4288      	cmp	r0, r1
 8004d48:	d208      	bcs.n	8004d5c <xQueueCreateCountingSemaphoreStatic+0x30>
 8004d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4e:	f383 8811 	msr	BASEPRI, r3
 8004d52:	f3bf 8f6f 	isb	sy
 8004d56:	f3bf 8f4f 	dsb	sy
 8004d5a:	e7fe      	b.n	8004d5a <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004d5c:	2202      	movs	r2, #2
 8004d5e:	9200      	str	r2, [sp, #0]
 8004d60:	2200      	movs	r2, #0
 8004d62:	4611      	mov	r1, r2
 8004d64:	f7ff ff6e 	bl	8004c44 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8004d68:	b100      	cbz	r0, 8004d6c <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004d6a:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8004d6c:	b002      	add	sp, #8
 8004d6e:	bd10      	pop	{r4, pc}

08004d70 <xQueueCreateCountingSemaphore>:
	{
 8004d70:	b510      	push	{r4, lr}
 8004d72:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8004d74:	b940      	cbnz	r0, 8004d88 <xQueueCreateCountingSemaphore+0x18>
 8004d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7a:	f383 8811 	msr	BASEPRI, r3
 8004d7e:	f3bf 8f6f 	isb	sy
 8004d82:	f3bf 8f4f 	dsb	sy
 8004d86:	e7fe      	b.n	8004d86 <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004d88:	4288      	cmp	r0, r1
 8004d8a:	d208      	bcs.n	8004d9e <xQueueCreateCountingSemaphore+0x2e>
 8004d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d90:	f383 8811 	msr	BASEPRI, r3
 8004d94:	f3bf 8f6f 	isb	sy
 8004d98:	f3bf 8f4f 	dsb	sy
 8004d9c:	e7fe      	b.n	8004d9c <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004d9e:	2202      	movs	r2, #2
 8004da0:	2100      	movs	r1, #0
 8004da2:	f7ff ff9c 	bl	8004cde <xQueueGenericCreate>
		if( xHandle != NULL )
 8004da6:	b100      	cbz	r0, 8004daa <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004da8:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8004daa:	bd10      	pop	{r4, pc}

08004dac <xQueueGenericSend>:
{
 8004dac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004db0:	4688      	mov	r8, r1
 8004db2:	9201      	str	r2, [sp, #4]
 8004db4:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8004db6:	4604      	mov	r4, r0
 8004db8:	b940      	cbnz	r0, 8004dcc <xQueueGenericSend+0x20>
 8004dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dbe:	f383 8811 	msr	BASEPRI, r3
 8004dc2:	f3bf 8f6f 	isb	sy
 8004dc6:	f3bf 8f4f 	dsb	sy
 8004dca:	e7fe      	b.n	8004dca <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dcc:	b951      	cbnz	r1, 8004de4 <xQueueGenericSend+0x38>
 8004dce:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004dd0:	b143      	cbz	r3, 8004de4 <xQueueGenericSend+0x38>
 8004dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd6:	f383 8811 	msr	BASEPRI, r3
 8004dda:	f3bf 8f6f 	isb	sy
 8004dde:	f3bf 8f4f 	dsb	sy
 8004de2:	e7fe      	b.n	8004de2 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004de4:	2f02      	cmp	r7, #2
 8004de6:	d10b      	bne.n	8004e00 <xQueueGenericSend+0x54>
 8004de8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d008      	beq.n	8004e00 <xQueueGenericSend+0x54>
 8004dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df2:	f383 8811 	msr	BASEPRI, r3
 8004df6:	f3bf 8f6f 	isb	sy
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	e7fe      	b.n	8004dfe <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e00:	f000 ffac 	bl	8005d5c <xTaskGetSchedulerState>
 8004e04:	b950      	cbnz	r0, 8004e1c <xQueueGenericSend+0x70>
 8004e06:	9e01      	ldr	r6, [sp, #4]
 8004e08:	b14e      	cbz	r6, 8004e1e <xQueueGenericSend+0x72>
 8004e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0e:	f383 8811 	msr	BASEPRI, r3
 8004e12:	f3bf 8f6f 	isb	sy
 8004e16:	f3bf 8f4f 	dsb	sy
 8004e1a:	e7fe      	b.n	8004e1a <xQueueGenericSend+0x6e>
 8004e1c:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8004e1e:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 8004e22:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8004f0c <xQueueGenericSend+0x160>
 8004e26:	e037      	b.n	8004e98 <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e28:	9d01      	ldr	r5, [sp, #4]
 8004e2a:	b91d      	cbnz	r5, 8004e34 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 8004e2c:	f001 fad4 	bl	80063d8 <vPortExitCritical>
			return errQUEUE_FULL;
 8004e30:	2000      	movs	r0, #0
 8004e32:	e050      	b.n	8004ed6 <xQueueGenericSend+0x12a>
				else if( xEntryTimeSet == pdFALSE )
 8004e34:	b916      	cbnz	r6, 8004e3c <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e36:	a802      	add	r0, sp, #8
 8004e38:	f000 ff42 	bl	8005cc0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8004e3c:	f001 facc 	bl	80063d8 <vPortExitCritical>
		vTaskSuspendAll();
 8004e40:	f000 fd38 	bl	80058b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e44:	f001 faa6 	bl	8006394 <vPortEnterCritical>
 8004e48:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004e4c:	2bff      	cmp	r3, #255	; 0xff
 8004e4e:	bf08      	it	eq
 8004e50:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 8004e54:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004e58:	2bff      	cmp	r3, #255	; 0xff
 8004e5a:	bf08      	it	eq
 8004e5c:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 8004e60:	f001 faba 	bl	80063d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e64:	a901      	add	r1, sp, #4
 8004e66:	a802      	add	r0, sp, #8
 8004e68:	f000 ff36 	bl	8005cd8 <xTaskCheckForTimeOut>
 8004e6c:	2800      	cmp	r0, #0
 8004e6e:	d146      	bne.n	8004efe <xQueueGenericSend+0x152>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e70:	f001 fa90 	bl	8006394 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004e74:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004e76:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d12f      	bne.n	8004edc <xQueueGenericSend+0x130>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8004e7c:	f001 faac 	bl	80063d8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004e80:	9901      	ldr	r1, [sp, #4]
 8004e82:	f104 0010 	add.w	r0, r4, #16
 8004e86:	f000 fea1 	bl	8005bcc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e8a:	4620      	mov	r0, r4
 8004e8c:	f7ff fe62 	bl	8004b54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e90:	f000 fdae 	bl	80059f0 <xTaskResumeAll>
 8004e94:	b350      	cbz	r0, 8004eec <xQueueGenericSend+0x140>
 8004e96:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8004e98:	f001 fa7c 	bl	8006394 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e9c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004e9e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d301      	bcc.n	8004ea8 <xQueueGenericSend+0xfc>
 8004ea4:	2f02      	cmp	r7, #2
 8004ea6:	d1bf      	bne.n	8004e28 <xQueueGenericSend+0x7c>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ea8:	463a      	mov	r2, r7
 8004eaa:	4641      	mov	r1, r8
 8004eac:	4620      	mov	r0, r4
 8004eae:	f7ff fe0a 	bl	8004ac6 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004eb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004eb4:	b11b      	cbz	r3, 8004ebe <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004eb6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004eba:	f000 fec1 	bl	8005c40 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8004ebe:	b138      	cbz	r0, 8004ed0 <xQueueGenericSend+0x124>
						queueYIELD_IF_USING_PREEMPTION();
 8004ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ec4:	4b11      	ldr	r3, [pc, #68]	; (8004f0c <xQueueGenericSend+0x160>)
 8004ec6:	601a      	str	r2, [r3, #0]
 8004ec8:	f3bf 8f4f 	dsb	sy
 8004ecc:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004ed0:	f001 fa82 	bl	80063d8 <vPortExitCritical>
				return pdPASS;
 8004ed4:	2001      	movs	r0, #1
}
 8004ed6:	b004      	add	sp, #16
 8004ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 8004edc:	f001 fa7c 	bl	80063d8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8004ee0:	4620      	mov	r0, r4
 8004ee2:	f7ff fe37 	bl	8004b54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ee6:	f000 fd83 	bl	80059f0 <xTaskResumeAll>
 8004eea:	e7d4      	b.n	8004e96 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8004eec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004ef0:	f8ca 3000 	str.w	r3, [sl]
 8004ef4:	f3bf 8f4f 	dsb	sy
 8004ef8:	f3bf 8f6f 	isb	sy
 8004efc:	e7cb      	b.n	8004e96 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 8004efe:	4620      	mov	r0, r4
 8004f00:	f7ff fe28 	bl	8004b54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f04:	f000 fd74 	bl	80059f0 <xTaskResumeAll>
 8004f08:	e792      	b.n	8004e30 <xQueueGenericSend+0x84>
 8004f0a:	bf00      	nop
 8004f0c:	e000ed04 	.word	0xe000ed04

08004f10 <xQueueGenericSendFromISR>:
{
 8004f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f14:	4689      	mov	r9, r1
 8004f16:	4690      	mov	r8, r2
 8004f18:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8004f1a:	4604      	mov	r4, r0
 8004f1c:	b940      	cbnz	r0, 8004f30 <xQueueGenericSendFromISR+0x20>
 8004f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f22:	f383 8811 	msr	BASEPRI, r3
 8004f26:	f3bf 8f6f 	isb	sy
 8004f2a:	f3bf 8f4f 	dsb	sy
 8004f2e:	e7fe      	b.n	8004f2e <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f30:	b951      	cbnz	r1, 8004f48 <xQueueGenericSendFromISR+0x38>
 8004f32:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004f34:	b143      	cbz	r3, 8004f48 <xQueueGenericSendFromISR+0x38>
 8004f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3a:	f383 8811 	msr	BASEPRI, r3
 8004f3e:	f3bf 8f6f 	isb	sy
 8004f42:	f3bf 8f4f 	dsb	sy
 8004f46:	e7fe      	b.n	8004f46 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f48:	2f02      	cmp	r7, #2
 8004f4a:	d10b      	bne.n	8004f64 <xQueueGenericSendFromISR+0x54>
 8004f4c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d008      	beq.n	8004f64 <xQueueGenericSendFromISR+0x54>
 8004f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f56:	f383 8811 	msr	BASEPRI, r3
 8004f5a:	f3bf 8f6f 	isb	sy
 8004f5e:	f3bf 8f4f 	dsb	sy
 8004f62:	e7fe      	b.n	8004f62 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f64:	f001 faf8 	bl	8006558 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004f68:	f3ef 8611 	mrs	r6, BASEPRI
 8004f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f70:	f383 8811 	msr	BASEPRI, r3
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f7c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004f7e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d301      	bcc.n	8004f88 <xQueueGenericSendFromISR+0x78>
 8004f84:	2f02      	cmp	r7, #2
 8004f86:	d122      	bne.n	8004fce <xQueueGenericSendFromISR+0xbe>
			const int8_t cTxLock = pxQueue->cTxLock;
 8004f88:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f8c:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 8004f8e:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f90:	4649      	mov	r1, r9
 8004f92:	4620      	mov	r0, r4
 8004f94:	f7ff fd97 	bl	8004ac6 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8004f98:	1c6b      	adds	r3, r5, #1
 8004f9a:	d113      	bne.n	8004fc4 <xQueueGenericSendFromISR+0xb4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f9e:	b90b      	cbnz	r3, 8004fa4 <xQueueGenericSendFromISR+0x94>
			xReturn = pdPASS;
 8004fa0:	2001      	movs	r0, #1
 8004fa2:	e00b      	b.n	8004fbc <xQueueGenericSendFromISR+0xac>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fa4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004fa8:	f000 fe4a 	bl	8005c40 <xTaskRemoveFromEventList>
 8004fac:	2800      	cmp	r0, #0
 8004fae:	d0f7      	beq.n	8004fa0 <xQueueGenericSendFromISR+0x90>
							if( pxHigherPriorityTaskWoken != NULL )
 8004fb0:	f1b8 0f00 	cmp.w	r8, #0
 8004fb4:	d0f4      	beq.n	8004fa0 <xQueueGenericSendFromISR+0x90>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004fb6:	2001      	movs	r0, #1
 8004fb8:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004fbc:	f386 8811 	msr	BASEPRI, r6
}
 8004fc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004fc4:	3501      	adds	r5, #1
 8004fc6:	b26d      	sxtb	r5, r5
 8004fc8:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8004fcc:	e7e8      	b.n	8004fa0 <xQueueGenericSendFromISR+0x90>
			xReturn = errQUEUE_FULL;
 8004fce:	2000      	movs	r0, #0
 8004fd0:	e7f4      	b.n	8004fbc <xQueueGenericSendFromISR+0xac>

08004fd2 <xQueueGiveFromISR>:
{
 8004fd2:	b570      	push	{r4, r5, r6, lr}
 8004fd4:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8004fd6:	4604      	mov	r4, r0
 8004fd8:	b940      	cbnz	r0, 8004fec <xQueueGiveFromISR+0x1a>
	__asm volatile
 8004fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fde:	f383 8811 	msr	BASEPRI, r3
 8004fe2:	f3bf 8f6f 	isb	sy
 8004fe6:	f3bf 8f4f 	dsb	sy
 8004fea:	e7fe      	b.n	8004fea <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 8004fec:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004fee:	b143      	cbz	r3, 8005002 <xQueueGiveFromISR+0x30>
 8004ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff4:	f383 8811 	msr	BASEPRI, r3
 8004ff8:	f3bf 8f6f 	isb	sy
 8004ffc:	f3bf 8f4f 	dsb	sy
 8005000:	e7fe      	b.n	8005000 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8005002:	6803      	ldr	r3, [r0, #0]
 8005004:	b953      	cbnz	r3, 800501c <xQueueGiveFromISR+0x4a>
 8005006:	6843      	ldr	r3, [r0, #4]
 8005008:	b143      	cbz	r3, 800501c <xQueueGiveFromISR+0x4a>
 800500a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500e:	f383 8811 	msr	BASEPRI, r3
 8005012:	f3bf 8f6f 	isb	sy
 8005016:	f3bf 8f4f 	dsb	sy
 800501a:	e7fe      	b.n	800501a <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800501c:	f001 fa9c 	bl	8006558 <vPortValidateInterruptPriority>
	__asm volatile
 8005020:	f3ef 8611 	mrs	r6, BASEPRI
 8005024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005028:	f383 8811 	msr	BASEPRI, r3
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005034:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005036:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005038:	4293      	cmp	r3, r2
 800503a:	d91c      	bls.n	8005076 <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 800503c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005040:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 8005042:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005044:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8005046:	1c5a      	adds	r2, r3, #1
 8005048:	d110      	bne.n	800506c <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800504a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800504c:	b90b      	cbnz	r3, 8005052 <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 800504e:	2001      	movs	r0, #1
 8005050:	e009      	b.n	8005066 <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005052:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005056:	f000 fdf3 	bl	8005c40 <xTaskRemoveFromEventList>
 800505a:	2800      	cmp	r0, #0
 800505c:	d0f7      	beq.n	800504e <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 800505e:	2d00      	cmp	r5, #0
 8005060:	d0f5      	beq.n	800504e <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005062:	2001      	movs	r0, #1
 8005064:	6028      	str	r0, [r5, #0]
	__asm volatile
 8005066:	f386 8811 	msr	BASEPRI, r6
}
 800506a:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800506c:	3301      	adds	r3, #1
 800506e:	b25b      	sxtb	r3, r3
 8005070:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005074:	e7eb      	b.n	800504e <xQueueGiveFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 8005076:	2000      	movs	r0, #0
 8005078:	e7f5      	b.n	8005066 <xQueueGiveFromISR+0x94>
	...

0800507c <xQueueReceive>:
{
 800507c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005080:	b085      	sub	sp, #20
 8005082:	460f      	mov	r7, r1
 8005084:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005086:	4604      	mov	r4, r0
 8005088:	b940      	cbnz	r0, 800509c <xQueueReceive+0x20>
	__asm volatile
 800508a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508e:	f383 8811 	msr	BASEPRI, r3
 8005092:	f3bf 8f6f 	isb	sy
 8005096:	f3bf 8f4f 	dsb	sy
 800509a:	e7fe      	b.n	800509a <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800509c:	b951      	cbnz	r1, 80050b4 <xQueueReceive+0x38>
 800509e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80050a0:	b143      	cbz	r3, 80050b4 <xQueueReceive+0x38>
 80050a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a6:	f383 8811 	msr	BASEPRI, r3
 80050aa:	f3bf 8f6f 	isb	sy
 80050ae:	f3bf 8f4f 	dsb	sy
 80050b2:	e7fe      	b.n	80050b2 <xQueueReceive+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050b4:	f000 fe52 	bl	8005d5c <xTaskGetSchedulerState>
 80050b8:	b950      	cbnz	r0, 80050d0 <xQueueReceive+0x54>
 80050ba:	9e01      	ldr	r6, [sp, #4]
 80050bc:	b14e      	cbz	r6, 80050d2 <xQueueReceive+0x56>
 80050be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c2:	f383 8811 	msr	BASEPRI, r3
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	e7fe      	b.n	80050ce <xQueueReceive+0x52>
 80050d0:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80050d2:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 80050d6:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 80051b8 <xQueueReceive+0x13c>
 80050da:	e03b      	b.n	8005154 <xQueueReceive+0xd8>
				if( xTicksToWait == ( TickType_t ) 0 )
 80050dc:	9d01      	ldr	r5, [sp, #4]
 80050de:	b91d      	cbnz	r5, 80050e8 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 80050e0:	f001 f97a 	bl	80063d8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 80050e4:	2000      	movs	r0, #0
 80050e6:	e052      	b.n	800518e <xQueueReceive+0x112>
				else if( xEntryTimeSet == pdFALSE )
 80050e8:	b916      	cbnz	r6, 80050f0 <xQueueReceive+0x74>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050ea:	a802      	add	r0, sp, #8
 80050ec:	f000 fde8 	bl	8005cc0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80050f0:	f001 f972 	bl	80063d8 <vPortExitCritical>
		vTaskSuspendAll();
 80050f4:	f000 fbde 	bl	80058b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050f8:	f001 f94c 	bl	8006394 <vPortEnterCritical>
 80050fc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005100:	2bff      	cmp	r3, #255	; 0xff
 8005102:	bf08      	it	eq
 8005104:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8005108:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800510c:	2bff      	cmp	r3, #255	; 0xff
 800510e:	bf08      	it	eq
 8005110:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8005114:	f001 f960 	bl	80063d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005118:	a901      	add	r1, sp, #4
 800511a:	a802      	add	r0, sp, #8
 800511c:	f000 fddc 	bl	8005cd8 <xTaskCheckForTimeOut>
 8005120:	2800      	cmp	r0, #0
 8005122:	d13d      	bne.n	80051a0 <xQueueReceive+0x124>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005124:	4620      	mov	r0, r4
 8005126:	f7ff fcc3 	bl	8004ab0 <prvIsQueueEmpty>
 800512a:	b398      	cbz	r0, 8005194 <xQueueReceive+0x118>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800512c:	9901      	ldr	r1, [sp, #4]
 800512e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005132:	f000 fd4b 	bl	8005bcc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005136:	4620      	mov	r0, r4
 8005138:	f7ff fd0c 	bl	8004b54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800513c:	f000 fc58 	bl	80059f0 <xTaskResumeAll>
 8005140:	b938      	cbnz	r0, 8005152 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 8005142:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005146:	f8c9 3000 	str.w	r3, [r9]
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	f3bf 8f6f 	isb	sy
 8005152:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8005154:	f001 f91e 	bl	8006394 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005158:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800515a:	2d00      	cmp	r5, #0
 800515c:	d0be      	beq.n	80050dc <xQueueReceive+0x60>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800515e:	4639      	mov	r1, r7
 8005160:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005162:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005164:	f7ff fce2 	bl	8004b2c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005168:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800516a:	6923      	ldr	r3, [r4, #16]
 800516c:	b163      	cbz	r3, 8005188 <xQueueReceive+0x10c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800516e:	f104 0010 	add.w	r0, r4, #16
 8005172:	f000 fd65 	bl	8005c40 <xTaskRemoveFromEventList>
 8005176:	b138      	cbz	r0, 8005188 <xQueueReceive+0x10c>
						queueYIELD_IF_USING_PREEMPTION();
 8005178:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800517c:	4b0e      	ldr	r3, [pc, #56]	; (80051b8 <xQueueReceive+0x13c>)
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	f3bf 8f4f 	dsb	sy
 8005184:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8005188:	f001 f926 	bl	80063d8 <vPortExitCritical>
				return pdPASS;
 800518c:	2001      	movs	r0, #1
}
 800518e:	b005      	add	sp, #20
 8005190:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 8005194:	4620      	mov	r0, r4
 8005196:	f7ff fcdd 	bl	8004b54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800519a:	f000 fc29 	bl	80059f0 <xTaskResumeAll>
 800519e:	e7d8      	b.n	8005152 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 80051a0:	4620      	mov	r0, r4
 80051a2:	f7ff fcd7 	bl	8004b54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80051a6:	f000 fc23 	bl	80059f0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80051aa:	4620      	mov	r0, r4
 80051ac:	f7ff fc80 	bl	8004ab0 <prvIsQueueEmpty>
 80051b0:	2800      	cmp	r0, #0
 80051b2:	d0ce      	beq.n	8005152 <xQueueReceive+0xd6>
 80051b4:	e796      	b.n	80050e4 <xQueueReceive+0x68>
 80051b6:	bf00      	nop
 80051b8:	e000ed04 	.word	0xe000ed04

080051bc <xQueueSemaphoreTake>:
{
 80051bc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 80051c0:	4604      	mov	r4, r0
{
 80051c2:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80051c4:	b940      	cbnz	r0, 80051d8 <xQueueSemaphoreTake+0x1c>
 80051c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ca:	f383 8811 	msr	BASEPRI, r3
 80051ce:	f3bf 8f6f 	isb	sy
 80051d2:	f3bf 8f4f 	dsb	sy
 80051d6:	e7fe      	b.n	80051d6 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 80051d8:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80051da:	b145      	cbz	r5, 80051ee <xQueueSemaphoreTake+0x32>
 80051dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	e7fe      	b.n	80051ec <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80051ee:	f000 fdb5 	bl	8005d5c <xTaskGetSchedulerState>
 80051f2:	b950      	cbnz	r0, 800520a <xQueueSemaphoreTake+0x4e>
 80051f4:	9d01      	ldr	r5, [sp, #4]
 80051f6:	b145      	cbz	r5, 800520a <xQueueSemaphoreTake+0x4e>
 80051f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fc:	f383 8811 	msr	BASEPRI, r3
 8005200:	f3bf 8f6f 	isb	sy
 8005204:	f3bf 8f4f 	dsb	sy
 8005208:	e7fe      	b.n	8005208 <xQueueSemaphoreTake+0x4c>
 800520a:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800520c:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 800520e:	f8df 812c 	ldr.w	r8, [pc, #300]	; 800533c <xQueueSemaphoreTake+0x180>
 8005212:	e04f      	b.n	80052b4 <xQueueSemaphoreTake+0xf8>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005214:	9b01      	ldr	r3, [sp, #4]
 8005216:	b963      	cbnz	r3, 8005232 <xQueueSemaphoreTake+0x76>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005218:	b145      	cbz	r5, 800522c <xQueueSemaphoreTake+0x70>
 800521a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521e:	f383 8811 	msr	BASEPRI, r3
 8005222:	f3bf 8f6f 	isb	sy
 8005226:	f3bf 8f4f 	dsb	sy
 800522a:	e7fe      	b.n	800522a <xQueueSemaphoreTake+0x6e>
					taskEXIT_CRITICAL();
 800522c:	f001 f8d4 	bl	80063d8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8005230:	e05e      	b.n	80052f0 <xQueueSemaphoreTake+0x134>
				else if( xEntryTimeSet == pdFALSE )
 8005232:	b916      	cbnz	r6, 800523a <xQueueSemaphoreTake+0x7e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005234:	a802      	add	r0, sp, #8
 8005236:	f000 fd43 	bl	8005cc0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800523a:	f001 f8cd 	bl	80063d8 <vPortExitCritical>
		vTaskSuspendAll();
 800523e:	f000 fb39 	bl	80058b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005242:	f001 f8a7 	bl	8006394 <vPortEnterCritical>
 8005246:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800524a:	2bff      	cmp	r3, #255	; 0xff
 800524c:	bf08      	it	eq
 800524e:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8005252:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005256:	2bff      	cmp	r3, #255	; 0xff
 8005258:	bf08      	it	eq
 800525a:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 800525e:	f001 f8bb 	bl	80063d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005262:	a901      	add	r1, sp, #4
 8005264:	a802      	add	r0, sp, #8
 8005266:	f000 fd37 	bl	8005cd8 <xTaskCheckForTimeOut>
 800526a:	2800      	cmp	r0, #0
 800526c:	d14a      	bne.n	8005304 <xQueueSemaphoreTake+0x148>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800526e:	4620      	mov	r0, r4
 8005270:	f7ff fc1e 	bl	8004ab0 <prvIsQueueEmpty>
 8005274:	2800      	cmp	r0, #0
 8005276:	d03f      	beq.n	80052f8 <xQueueSemaphoreTake+0x13c>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005278:	6823      	ldr	r3, [r4, #0]
 800527a:	b93b      	cbnz	r3, 800528c <xQueueSemaphoreTake+0xd0>
						taskENTER_CRITICAL();
 800527c:	f001 f88a 	bl	8006394 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005280:	6860      	ldr	r0, [r4, #4]
 8005282:	f000 fd7b 	bl	8005d7c <xTaskPriorityInherit>
 8005286:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8005288:	f001 f8a6 	bl	80063d8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800528c:	9901      	ldr	r1, [sp, #4]
 800528e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005292:	f000 fc9b 	bl	8005bcc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005296:	4620      	mov	r0, r4
 8005298:	f7ff fc5c 	bl	8004b54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800529c:	f000 fba8 	bl	80059f0 <xTaskResumeAll>
 80052a0:	b938      	cbnz	r0, 80052b2 <xQueueSemaphoreTake+0xf6>
					portYIELD_WITHIN_API();
 80052a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80052a6:	f8c8 3000 	str.w	r3, [r8]
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	f3bf 8f6f 	isb	sy
 80052b2:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80052b4:	f001 f86e 	bl	8006394 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80052b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d0aa      	beq.n	8005214 <xQueueSemaphoreTake+0x58>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80052be:	3b01      	subs	r3, #1
 80052c0:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80052c2:	6823      	ldr	r3, [r4, #0]
 80052c4:	b913      	cbnz	r3, 80052cc <xQueueSemaphoreTake+0x110>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80052c6:	f000 fe2b 	bl	8005f20 <pvTaskIncrementMutexHeldCount>
 80052ca:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052cc:	6923      	ldr	r3, [r4, #16]
 80052ce:	b163      	cbz	r3, 80052ea <xQueueSemaphoreTake+0x12e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052d0:	f104 0010 	add.w	r0, r4, #16
 80052d4:	f000 fcb4 	bl	8005c40 <xTaskRemoveFromEventList>
 80052d8:	b138      	cbz	r0, 80052ea <xQueueSemaphoreTake+0x12e>
						queueYIELD_IF_USING_PREEMPTION();
 80052da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052de:	4b17      	ldr	r3, [pc, #92]	; (800533c <xQueueSemaphoreTake+0x180>)
 80052e0:	601a      	str	r2, [r3, #0]
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80052ea:	f001 f875 	bl	80063d8 <vPortExitCritical>
				return pdPASS;
 80052ee:	2501      	movs	r5, #1
}
 80052f0:	4628      	mov	r0, r5
 80052f2:	b004      	add	sp, #16
 80052f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 80052f8:	4620      	mov	r0, r4
 80052fa:	f7ff fc2b 	bl	8004b54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80052fe:	f000 fb77 	bl	80059f0 <xTaskResumeAll>
 8005302:	e7d6      	b.n	80052b2 <xQueueSemaphoreTake+0xf6>
			prvUnlockQueue( pxQueue );
 8005304:	4620      	mov	r0, r4
 8005306:	f7ff fc25 	bl	8004b54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800530a:	f000 fb71 	bl	80059f0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800530e:	4620      	mov	r0, r4
 8005310:	f7ff fbce 	bl	8004ab0 <prvIsQueueEmpty>
 8005314:	2800      	cmp	r0, #0
 8005316:	d0cc      	beq.n	80052b2 <xQueueSemaphoreTake+0xf6>
					if( xInheritanceOccurred != pdFALSE )
 8005318:	2d00      	cmp	r5, #0
 800531a:	d0e9      	beq.n	80052f0 <xQueueSemaphoreTake+0x134>
						taskENTER_CRITICAL();
 800531c:	f001 f83a 	bl	8006394 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8005320:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005322:	b119      	cbz	r1, 800532c <xQueueSemaphoreTake+0x170>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005324:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005326:	6819      	ldr	r1, [r3, #0]
 8005328:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800532c:	6860      	ldr	r0, [r4, #4]
 800532e:	f000 fda9 	bl	8005e84 <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 8005332:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 8005334:	f001 f850 	bl	80063d8 <vPortExitCritical>
 8005338:	e7da      	b.n	80052f0 <xQueueSemaphoreTake+0x134>
 800533a:	bf00      	nop
 800533c:	e000ed04 	.word	0xe000ed04

08005340 <xQueueReceiveFromISR>:
{
 8005340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005344:	4689      	mov	r9, r1
 8005346:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8005348:	4605      	mov	r5, r0
 800534a:	b940      	cbnz	r0, 800535e <xQueueReceiveFromISR+0x1e>
 800534c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005350:	f383 8811 	msr	BASEPRI, r3
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	f3bf 8f4f 	dsb	sy
 800535c:	e7fe      	b.n	800535c <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800535e:	b951      	cbnz	r1, 8005376 <xQueueReceiveFromISR+0x36>
 8005360:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005362:	b143      	cbz	r3, 8005376 <xQueueReceiveFromISR+0x36>
 8005364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005368:	f383 8811 	msr	BASEPRI, r3
 800536c:	f3bf 8f6f 	isb	sy
 8005370:	f3bf 8f4f 	dsb	sy
 8005374:	e7fe      	b.n	8005374 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005376:	f001 f8ef 	bl	8006558 <vPortValidateInterruptPriority>
	__asm volatile
 800537a:	f3ef 8711 	mrs	r7, BASEPRI
 800537e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005382:	f383 8811 	msr	BASEPRI, r3
 8005386:	f3bf 8f6f 	isb	sy
 800538a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800538e:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005390:	b31c      	cbz	r4, 80053da <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 8005392:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005396:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 8005398:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800539a:	4628      	mov	r0, r5
 800539c:	f7ff fbc6 	bl	8004b2c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80053a0:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 80053a2:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80053a4:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 80053a6:	d113      	bne.n	80053d0 <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053a8:	692b      	ldr	r3, [r5, #16]
 80053aa:	b90b      	cbnz	r3, 80053b0 <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 80053ac:	2001      	movs	r0, #1
 80053ae:	e00b      	b.n	80053c8 <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053b0:	f105 0010 	add.w	r0, r5, #16
 80053b4:	f000 fc44 	bl	8005c40 <xTaskRemoveFromEventList>
 80053b8:	2800      	cmp	r0, #0
 80053ba:	d0f7      	beq.n	80053ac <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 80053bc:	f1b8 0f00 	cmp.w	r8, #0
 80053c0:	d0f4      	beq.n	80053ac <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80053c2:	2001      	movs	r0, #1
 80053c4:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 80053c8:	f387 8811 	msr	BASEPRI, r7
}
 80053cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80053d0:	3601      	adds	r6, #1
 80053d2:	b276      	sxtb	r6, r6
 80053d4:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 80053d8:	e7e8      	b.n	80053ac <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 80053da:	4620      	mov	r0, r4
 80053dc:	e7f4      	b.n	80053c8 <xQueueReceiveFromISR+0x88>
	...

080053e0 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053e0:	2300      	movs	r3, #0
	{
 80053e2:	b530      	push	{r4, r5, lr}
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80053e4:	4a06      	ldr	r2, [pc, #24]	; (8005400 <vQueueAddToRegistry+0x20>)
 80053e6:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 80053ea:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 80053ee:	b91d      	cbnz	r5, 80053f8 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80053f0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80053f4:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80053f6:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053f8:	3301      	adds	r3, #1
 80053fa:	2b08      	cmp	r3, #8
 80053fc:	d1f3      	bne.n	80053e6 <vQueueAddToRegistry+0x6>
 80053fe:	e7fa      	b.n	80053f6 <vQueueAddToRegistry+0x16>
 8005400:	20002f14 	.word	0x20002f14

08005404 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005404:	2300      	movs	r3, #0
	{
 8005406:	b510      	push	{r4, lr}
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005408:	4a07      	ldr	r2, [pc, #28]	; (8005428 <vQueueUnregisterQueue+0x24>)
 800540a:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800540e:	684c      	ldr	r4, [r1, #4]
 8005410:	4284      	cmp	r4, r0
 8005412:	d104      	bne.n	800541e <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005414:	2000      	movs	r0, #0
 8005416:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800541a:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800541c:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800541e:	3301      	adds	r3, #1
 8005420:	2b08      	cmp	r3, #8
 8005422:	d1f2      	bne.n	800540a <vQueueUnregisterQueue+0x6>
 8005424:	e7fa      	b.n	800541c <vQueueUnregisterQueue+0x18>
 8005426:	bf00      	nop
 8005428:	20002f14 	.word	0x20002f14

0800542c <vQueueDelete>:
{
 800542c:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800542e:	4604      	mov	r4, r0
 8005430:	b940      	cbnz	r0, 8005444 <vQueueDelete+0x18>
	__asm volatile
 8005432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005436:	f383 8811 	msr	BASEPRI, r3
 800543a:	f3bf 8f6f 	isb	sy
 800543e:	f3bf 8f4f 	dsb	sy
 8005442:	e7fe      	b.n	8005442 <vQueueDelete+0x16>
		vQueueUnregisterQueue( pxQueue );
 8005444:	f7ff ffde 	bl	8005404 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005448:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800544c:	b923      	cbnz	r3, 8005458 <vQueueDelete+0x2c>
			vPortFree( pxQueue );
 800544e:	4620      	mov	r0, r4
}
 8005450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 8005454:	f001 b95e 	b.w	8006714 <vPortFree>
}
 8005458:	bd10      	pop	{r4, pc}

0800545a <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800545a:	b570      	push	{r4, r5, r6, lr}
 800545c:	4604      	mov	r4, r0
 800545e:	460d      	mov	r5, r1
 8005460:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005462:	f000 ff97 	bl	8006394 <vPortEnterCritical>
 8005466:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800546a:	2bff      	cmp	r3, #255	; 0xff
 800546c:	bf04      	itt	eq
 800546e:	2300      	moveq	r3, #0
 8005470:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8005474:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005478:	2bff      	cmp	r3, #255	; 0xff
 800547a:	bf04      	itt	eq
 800547c:	2300      	moveq	r3, #0
 800547e:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8005482:	f000 ffa9 	bl	80063d8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005486:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005488:	b92b      	cbnz	r3, 8005496 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800548a:	4632      	mov	r2, r6
 800548c:	4629      	mov	r1, r5
 800548e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005492:	f000 fbb5 	bl	8005c00 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005496:	4620      	mov	r0, r4
	}
 8005498:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800549c:	f7ff bb5a 	b.w	8004b54 <prvUnlockQueue>

080054a0 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80054a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054a4:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80054a6:	f000 ff75 	bl	8006394 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80054aa:	4b2f      	ldr	r3, [pc, #188]	; (8005568 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 80054ac:	4d2f      	ldr	r5, [pc, #188]	; (800556c <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	4f2f      	ldr	r7, [pc, #188]	; (8005570 <prvAddNewTaskToReadyList+0xd0>)
 80054b2:	3201      	adds	r2, #1
 80054b4:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80054b6:	682e      	ldr	r6, [r5, #0]
 80054b8:	2e00      	cmp	r6, #0
 80054ba:	d149      	bne.n	8005550 <prvAddNewTaskToReadyList+0xb0>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80054bc:	602c      	str	r4, [r5, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d11f      	bne.n	8005504 <prvAddNewTaskToReadyList+0x64>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80054c4:	f04f 0814 	mov.w	r8, #20
 80054c8:	fb08 7006 	mla	r0, r8, r6, r7
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054cc:	3601      	adds	r6, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80054ce:	f7ff faad 	bl	8004a2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054d2:	2e38      	cmp	r6, #56	; 0x38
 80054d4:	d1f8      	bne.n	80054c8 <prvAddNewTaskToReadyList+0x28>
	}

	vListInitialise( &xDelayedTaskList1 );
 80054d6:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 800559c <prvAddNewTaskToReadyList+0xfc>
	vListInitialise( &xDelayedTaskList2 );
 80054da:	4e26      	ldr	r6, [pc, #152]	; (8005574 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 80054dc:	4640      	mov	r0, r8
 80054de:	f7ff faa5 	bl	8004a2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80054e2:	4630      	mov	r0, r6
 80054e4:	f7ff faa2 	bl	8004a2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80054e8:	4823      	ldr	r0, [pc, #140]	; (8005578 <prvAddNewTaskToReadyList+0xd8>)
 80054ea:	f7ff fa9f 	bl	8004a2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80054ee:	4823      	ldr	r0, [pc, #140]	; (800557c <prvAddNewTaskToReadyList+0xdc>)
 80054f0:	f7ff fa9c 	bl	8004a2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80054f4:	4822      	ldr	r0, [pc, #136]	; (8005580 <prvAddNewTaskToReadyList+0xe0>)
 80054f6:	f7ff fa99 	bl	8004a2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80054fa:	4b22      	ldr	r3, [pc, #136]	; (8005584 <prvAddNewTaskToReadyList+0xe4>)
 80054fc:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005500:	4b21      	ldr	r3, [pc, #132]	; (8005588 <prvAddNewTaskToReadyList+0xe8>)
 8005502:	601e      	str	r6, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8005504:	2014      	movs	r0, #20
		uxTaskNumber++;
 8005506:	4a21      	ldr	r2, [pc, #132]	; (800558c <prvAddNewTaskToReadyList+0xec>)
 8005508:	6813      	ldr	r3, [r2, #0]
 800550a:	3301      	adds	r3, #1
 800550c:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800550e:	4a20      	ldr	r2, [pc, #128]	; (8005590 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005510:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
 8005512:	6811      	ldr	r1, [r2, #0]
 8005514:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005516:	428b      	cmp	r3, r1
 8005518:	fb00 7003 	mla	r0, r0, r3, r7
 800551c:	f104 0104 	add.w	r1, r4, #4
 8005520:	bf88      	it	hi
 8005522:	6013      	strhi	r3, [r2, #0]
 8005524:	f7ff fa90 	bl	8004a48 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8005528:	f000 ff56 	bl	80063d8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800552c:	4b19      	ldr	r3, [pc, #100]	; (8005594 <prvAddNewTaskToReadyList+0xf4>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	b163      	cbz	r3, 800554c <prvAddNewTaskToReadyList+0xac>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005532:	682b      	ldr	r3, [r5, #0]
 8005534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005536:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005538:	429a      	cmp	r2, r3
 800553a:	d207      	bcs.n	800554c <prvAddNewTaskToReadyList+0xac>
			taskYIELD_IF_USING_PREEMPTION();
 800553c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005540:	4b15      	ldr	r3, [pc, #84]	; (8005598 <prvAddNewTaskToReadyList+0xf8>)
 8005542:	601a      	str	r2, [r3, #0]
 8005544:	f3bf 8f4f 	dsb	sy
 8005548:	f3bf 8f6f 	isb	sy
}
 800554c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8005550:	4b10      	ldr	r3, [pc, #64]	; (8005594 <prvAddNewTaskToReadyList+0xf4>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1d5      	bne.n	8005504 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005558:	682b      	ldr	r3, [r5, #0]
 800555a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800555c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800555e:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8005560:	bf98      	it	ls
 8005562:	602c      	strls	r4, [r5, #0]
 8005564:	e7ce      	b.n	8005504 <prvAddNewTaskToReadyList+0x64>
 8005566:	bf00      	nop
 8005568:	20002544 	.word	0x20002544
 800556c:	200020d4 	.word	0x200020d4
 8005570:	200020e0 	.word	0x200020e0
 8005574:	20002570 	.word	0x20002570
 8005578:	2000258c 	.word	0x2000258c
 800557c:	200025b8 	.word	0x200025b8
 8005580:	200025a4 	.word	0x200025a4
 8005584:	200020d8 	.word	0x200020d8
 8005588:	200020dc 	.word	0x200020dc
 800558c:	20002554 	.word	0x20002554
 8005590:	20002558 	.word	0x20002558
 8005594:	200025a0 	.word	0x200025a0
 8005598:	e000ed04 	.word	0xe000ed04
 800559c:	2000255c 	.word	0x2000255c

080055a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80055a0:	b510      	push	{r4, lr}
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80055a2:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
	{
 80055a6:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80055a8:	b93b      	cbnz	r3, 80055ba <prvDeleteTCB+0x1a>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80055aa:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80055ac:	f001 f8b2 	bl	8006714 <vPortFree>
				vPortFree( pxTCB );
 80055b0:	4620      	mov	r0, r4
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80055b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80055b6:	f001 b8ad 	b.w	8006714 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d0f9      	beq.n	80055b2 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d008      	beq.n	80055d4 <prvDeleteTCB+0x34>
 80055c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c6:	f383 8811 	msr	BASEPRI, r3
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	e7fe      	b.n	80055d2 <prvDeleteTCB+0x32>
	}
 80055d4:	bd10      	pop	{r4, pc}
	...

080055d8 <prvIdleTask>:
{
 80055d8:	b580      	push	{r7, lr}
				taskYIELD();
 80055da:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8005638 <prvIdleTask+0x60>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80055de:	4f12      	ldr	r7, [pc, #72]	; (8005628 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055e0:	4c12      	ldr	r4, [pc, #72]	; (800562c <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 80055e2:	4d13      	ldr	r5, [pc, #76]	; (8005630 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055e4:	6823      	ldr	r3, [r4, #0]
 80055e6:	b963      	cbnz	r3, 8005602 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80055e8:	4b12      	ldr	r3, [pc, #72]	; (8005634 <prvIdleTask+0x5c>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d9f8      	bls.n	80055e2 <prvIdleTask+0xa>
				taskYIELD();
 80055f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80055f4:	f8c8 3000 	str.w	r3, [r8]
 80055f8:	f3bf 8f4f 	dsb	sy
 80055fc:	f3bf 8f6f 	isb	sy
 8005600:	e7ee      	b.n	80055e0 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8005602:	f000 fec7 	bl	8006394 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800560a:	1d30      	adds	r0, r6, #4
 800560c:	f7ff fa3f 	bl	8004a8e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005610:	682b      	ldr	r3, [r5, #0]
 8005612:	3b01      	subs	r3, #1
 8005614:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005616:	6823      	ldr	r3, [r4, #0]
 8005618:	3b01      	subs	r3, #1
 800561a:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800561c:	f000 fedc 	bl	80063d8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8005620:	4630      	mov	r0, r6
 8005622:	f7ff ffbd 	bl	80055a0 <prvDeleteTCB>
 8005626:	e7dd      	b.n	80055e4 <prvIdleTask+0xc>
 8005628:	200025b8 	.word	0x200025b8
 800562c:	20002548 	.word	0x20002548
 8005630:	20002544 	.word	0x20002544
 8005634:	200020e0 	.word	0x200020e0
 8005638:	e000ed04 	.word	0xe000ed04

0800563c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800563c:	4a06      	ldr	r2, [pc, #24]	; (8005658 <prvResetNextTaskUnblockTime+0x1c>)
 800563e:	6813      	ldr	r3, [r2, #0]
 8005640:	6819      	ldr	r1, [r3, #0]
 8005642:	4b06      	ldr	r3, [pc, #24]	; (800565c <prvResetNextTaskUnblockTime+0x20>)
 8005644:	b919      	cbnz	r1, 800564e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005646:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800564a:	601a      	str	r2, [r3, #0]
	}
}
 800564c:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800564e:	6812      	ldr	r2, [r2, #0]
 8005650:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005652:	68d2      	ldr	r2, [r2, #12]
 8005654:	6852      	ldr	r2, [r2, #4]
 8005656:	e7f8      	b.n	800564a <prvResetNextTaskUnblockTime+0xe>
 8005658:	200020d8 	.word	0x200020d8
 800565c:	20002584 	.word	0x20002584

08005660 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8005660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005664:	460d      	mov	r5, r1
 8005666:	e9dd 7409 	ldrd	r7, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800566a:	0096      	lsls	r6, r2, #2
 800566c:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800566e:	4680      	mov	r8, r0
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005670:	21a5      	movs	r1, #165	; 0xa5
 8005672:	6b20      	ldr	r0, [r4, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8005674:	4699      	mov	r9, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005676:	f001 f8ce 	bl	8006816 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800567a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800567c:	3e04      	subs	r6, #4
 800567e:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005680:	f026 0607 	bic.w	r6, r6, #7
 8005684:	1e6b      	subs	r3, r5, #1
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8005686:	6466      	str	r6, [r4, #68]	; 0x44
 8005688:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800568c:	350f      	adds	r5, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800568e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8005692:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8005696:	7819      	ldrb	r1, [r3, #0]
 8005698:	b109      	cbz	r1, 800569e <prvInitialiseNewTask.isra.2+0x3e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800569a:	42ab      	cmp	r3, r5
 800569c:	d1f7      	bne.n	800568e <prvInitialiseNewTask.isra.2+0x2e>
 800569e:	9d08      	ldr	r5, [sp, #32]
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80056a0:	f04f 0a00 	mov.w	sl, #0
 80056a4:	2d37      	cmp	r5, #55	; 0x37
 80056a6:	bf28      	it	cs
 80056a8:	2537      	movcs	r5, #55	; 0x37
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80056aa:	1d20      	adds	r0, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 80056ac:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 80056ae:	e9c4 5a14 	strd	r5, sl, [r4, #80]	; 0x50
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80056b2:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80056b6:	f7ff f9c4 	bl	8004a42 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056ba:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80056be:	f104 0018 	add.w	r0, r4, #24
 80056c2:	f7ff f9be 	bl	8004a42 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80056c6:	f8c4 a05c 	str.w	sl, [r4, #92]	; 0x5c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80056ca:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056cc:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80056ce:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulRunTimeCounter = 0UL;
 80056d0:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80056d4:	f884 a060 	strb.w	sl, [r4, #96]	; 0x60
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80056d8:	464a      	mov	r2, r9
 80056da:	4641      	mov	r1, r8
 80056dc:	4630      	mov	r0, r6
 80056de:	f000 fe31 	bl	8006344 <pxPortInitialiseStack>
 80056e2:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80056e4:	b107      	cbz	r7, 80056e8 <prvInitialiseNewTask.isra.2+0x88>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80056e6:	603c      	str	r4, [r7, #0]
}
 80056e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080056ec <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80056ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ee:	4605      	mov	r5, r0
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80056f0:	4b15      	ldr	r3, [pc, #84]	; (8005748 <prvAddCurrentTaskToDelayedList+0x5c>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056f2:	4e16      	ldr	r6, [pc, #88]	; (800574c <prvAddCurrentTaskToDelayedList+0x60>)
const TickType_t xConstTickCount = xTickCount;
 80056f4:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056f6:	6830      	ldr	r0, [r6, #0]
{
 80056f8:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056fa:	3004      	adds	r0, #4
 80056fc:	f7ff f9c7 	bl	8004a8e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005700:	1c6b      	adds	r3, r5, #1
 8005702:	4633      	mov	r3, r6
 8005704:	d107      	bne.n	8005716 <prvAddCurrentTaskToDelayedList+0x2a>
 8005706:	b137      	cbz	r7, 8005716 <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005708:	6831      	ldr	r1, [r6, #0]
 800570a:	4811      	ldr	r0, [pc, #68]	; (8005750 <prvAddCurrentTaskToDelayedList+0x64>)
 800570c:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800570e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005712:	f7ff b999 	b.w	8004a48 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	1964      	adds	r4, r4, r5
 800571a:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800571c:	d307      	bcc.n	800572e <prvAddCurrentTaskToDelayedList+0x42>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800571e:	4a0d      	ldr	r2, [pc, #52]	; (8005754 <prvAddCurrentTaskToDelayedList+0x68>)
 8005720:	6810      	ldr	r0, [r2, #0]
 8005722:	6819      	ldr	r1, [r3, #0]
}
 8005724:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005728:	3104      	adds	r1, #4
 800572a:	f7ff b999 	b.w	8004a60 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800572e:	4a0a      	ldr	r2, [pc, #40]	; (8005758 <prvAddCurrentTaskToDelayedList+0x6c>)
 8005730:	6810      	ldr	r0, [r2, #0]
 8005732:	6819      	ldr	r1, [r3, #0]
 8005734:	3104      	adds	r1, #4
 8005736:	f7ff f993 	bl	8004a60 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800573a:	4b08      	ldr	r3, [pc, #32]	; (800575c <prvAddCurrentTaskToDelayedList+0x70>)
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8005740:	bf88      	it	hi
 8005742:	601c      	strhi	r4, [r3, #0]
}
 8005744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005746:	bf00      	nop
 8005748:	200025cc 	.word	0x200025cc
 800574c:	200020d4 	.word	0x200020d4
 8005750:	200025a4 	.word	0x200025a4
 8005754:	200020dc 	.word	0x200020dc
 8005758:	200020d8 	.word	0x200020d8
 800575c:	20002584 	.word	0x20002584

08005760 <xTaskCreateStatic>:
	{
 8005760:	b570      	push	{r4, r5, r6, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8005768:	b945      	cbnz	r5, 800577c <xTaskCreateStatic+0x1c>
 800576a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576e:	f383 8811 	msr	BASEPRI, r3
 8005772:	f3bf 8f6f 	isb	sy
 8005776:	f3bf 8f4f 	dsb	sy
 800577a:	e7fe      	b.n	800577a <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800577c:	b944      	cbnz	r4, 8005790 <xTaskCreateStatic+0x30>
 800577e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	e7fe      	b.n	800578e <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8005790:	2664      	movs	r6, #100	; 0x64
 8005792:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005794:	9e04      	ldr	r6, [sp, #16]
 8005796:	2e64      	cmp	r6, #100	; 0x64
 8005798:	d008      	beq.n	80057ac <xTaskCreateStatic+0x4c>
 800579a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579e:	f383 8811 	msr	BASEPRI, r3
 80057a2:	f3bf 8f6f 	isb	sy
 80057a6:	f3bf 8f4f 	dsb	sy
 80057aa:	e7fe      	b.n	80057aa <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80057ac:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80057ae:	2502      	movs	r5, #2
 80057b0:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80057b4:	ad05      	add	r5, sp, #20
 80057b6:	9501      	str	r5, [sp, #4]
 80057b8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80057ba:	9402      	str	r4, [sp, #8]
 80057bc:	9500      	str	r5, [sp, #0]
 80057be:	f7ff ff4f 	bl	8005660 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057c2:	4620      	mov	r0, r4
 80057c4:	f7ff fe6c 	bl	80054a0 <prvAddNewTaskToReadyList>
	}
 80057c8:	9805      	ldr	r0, [sp, #20]
 80057ca:	b006      	add	sp, #24
 80057cc:	bd70      	pop	{r4, r5, r6, pc}

080057ce <xTaskCreate>:
	{
 80057ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80057d2:	4607      	mov	r7, r0
 80057d4:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057d6:	0090      	lsls	r0, r2, #2
	{
 80057d8:	4688      	mov	r8, r1
 80057da:	4616      	mov	r6, r2
 80057dc:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057de:	f000 ff0d 	bl	80065fc <pvPortMalloc>
			if( pxStack != NULL )
 80057e2:	4605      	mov	r5, r0
 80057e4:	b1e8      	cbz	r0, 8005822 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80057e6:	2064      	movs	r0, #100	; 0x64
 80057e8:	f000 ff08 	bl	80065fc <pvPortMalloc>
				if( pxNewTCB != NULL )
 80057ec:	4604      	mov	r4, r0
 80057ee:	b1a8      	cbz	r0, 800581c <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80057f0:	2300      	movs	r3, #0
 80057f2:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80057f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 80057f8:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80057fa:	9301      	str	r3, [sp, #4]
 80057fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80057fe:	9002      	str	r0, [sp, #8]
 8005800:	9300      	str	r3, [sp, #0]
 8005802:	4632      	mov	r2, r6
 8005804:	464b      	mov	r3, r9
 8005806:	4641      	mov	r1, r8
 8005808:	4638      	mov	r0, r7
 800580a:	f7ff ff29 	bl	8005660 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 800580e:	4620      	mov	r0, r4
 8005810:	f7ff fe46 	bl	80054a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005814:	2001      	movs	r0, #1
	}
 8005816:	b005      	add	sp, #20
 8005818:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800581c:	4628      	mov	r0, r5
 800581e:	f000 ff79 	bl	8006714 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005822:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8005826:	e7f6      	b.n	8005816 <xTaskCreate+0x48>

08005828 <vTaskStartScheduler>:
{
 8005828:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800582a:	2400      	movs	r4, #0
{
 800582c:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800582e:	aa07      	add	r2, sp, #28
 8005830:	a906      	add	r1, sp, #24
 8005832:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005834:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005838:	f7ff f8e0 	bl	80049fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800583c:	9b05      	ldr	r3, [sp, #20]
 800583e:	9a07      	ldr	r2, [sp, #28]
 8005840:	9302      	str	r3, [sp, #8]
 8005842:	9b06      	ldr	r3, [sp, #24]
 8005844:	4916      	ldr	r1, [pc, #88]	; (80058a0 <vTaskStartScheduler+0x78>)
 8005846:	e9cd 4300 	strd	r4, r3, [sp]
 800584a:	4816      	ldr	r0, [pc, #88]	; (80058a4 <vTaskStartScheduler+0x7c>)
 800584c:	4623      	mov	r3, r4
 800584e:	f7ff ff87 	bl	8005760 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8005852:	b1b8      	cbz	r0, 8005884 <vTaskStartScheduler+0x5c>
			xReturn = xTimerCreateTimerTask();
 8005854:	f000 fbc2 	bl	8005fdc <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8005858:	2801      	cmp	r0, #1
 800585a:	d115      	bne.n	8005888 <vTaskStartScheduler+0x60>
 800585c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005860:	f383 8811 	msr	BASEPRI, r3
 8005864:	f3bf 8f6f 	isb	sy
 8005868:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800586c:	f04f 32ff 	mov.w	r2, #4294967295
 8005870:	4b0d      	ldr	r3, [pc, #52]	; (80058a8 <vTaskStartScheduler+0x80>)
 8005872:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005874:	4b0d      	ldr	r3, [pc, #52]	; (80058ac <vTaskStartScheduler+0x84>)
 8005876:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005878:	4b0d      	ldr	r3, [pc, #52]	; (80058b0 <vTaskStartScheduler+0x88>)
 800587a:	601c      	str	r4, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800587c:	f7fb fd42 	bl	8001304 <configureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 8005880:	f000 fe10 	bl	80064a4 <xPortStartScheduler>
}
 8005884:	b008      	add	sp, #32
 8005886:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005888:	3001      	adds	r0, #1
 800588a:	d1fb      	bne.n	8005884 <vTaskStartScheduler+0x5c>
 800588c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005890:	f383 8811 	msr	BASEPRI, r3
 8005894:	f3bf 8f6f 	isb	sy
 8005898:	f3bf 8f4f 	dsb	sy
 800589c:	e7fe      	b.n	800589c <vTaskStartScheduler+0x74>
 800589e:	bf00      	nop
 80058a0:	08009ecc 	.word	0x08009ecc
 80058a4:	080055d9 	.word	0x080055d9
 80058a8:	20002584 	.word	0x20002584
 80058ac:	200025a0 	.word	0x200025a0
 80058b0:	200025cc 	.word	0x200025cc

080058b4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80058b4:	4a02      	ldr	r2, [pc, #8]	; (80058c0 <vTaskSuspendAll+0xc>)
 80058b6:	6813      	ldr	r3, [r2, #0]
 80058b8:	3301      	adds	r3, #1
 80058ba:	6013      	str	r3, [r2, #0]
}
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	20002550 	.word	0x20002550

080058c4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80058c4:	4b01      	ldr	r3, [pc, #4]	; (80058cc <xTaskGetTickCount+0x8>)
 80058c6:	6818      	ldr	r0, [r3, #0]
}
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	200025cc 	.word	0x200025cc

080058d0 <xTaskIncrementTick>:
{
 80058d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058d4:	4b3b      	ldr	r3, [pc, #236]	; (80059c4 <xTaskIncrementTick+0xf4>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d16b      	bne.n	80059b4 <xTaskIncrementTick+0xe4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80058dc:	4b3a      	ldr	r3, [pc, #232]	; (80059c8 <xTaskIncrementTick+0xf8>)
 80058de:	681c      	ldr	r4, [r3, #0]
 80058e0:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80058e2:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80058e4:	b9bc      	cbnz	r4, 8005916 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80058e6:	4b39      	ldr	r3, [pc, #228]	; (80059cc <xTaskIncrementTick+0xfc>)
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	6812      	ldr	r2, [r2, #0]
 80058ec:	b142      	cbz	r2, 8005900 <xTaskIncrementTick+0x30>
 80058ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f2:	f383 8811 	msr	BASEPRI, r3
 80058f6:	f3bf 8f6f 	isb	sy
 80058fa:	f3bf 8f4f 	dsb	sy
 80058fe:	e7fe      	b.n	80058fe <xTaskIncrementTick+0x2e>
 8005900:	4a33      	ldr	r2, [pc, #204]	; (80059d0 <xTaskIncrementTick+0x100>)
 8005902:	6819      	ldr	r1, [r3, #0]
 8005904:	6810      	ldr	r0, [r2, #0]
 8005906:	6018      	str	r0, [r3, #0]
 8005908:	6011      	str	r1, [r2, #0]
 800590a:	4a32      	ldr	r2, [pc, #200]	; (80059d4 <xTaskIncrementTick+0x104>)
 800590c:	6813      	ldr	r3, [r2, #0]
 800590e:	3301      	adds	r3, #1
 8005910:	6013      	str	r3, [r2, #0]
 8005912:	f7ff fe93 	bl	800563c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005916:	4d30      	ldr	r5, [pc, #192]	; (80059d8 <xTaskIncrementTick+0x108>)
BaseType_t xSwitchRequired = pdFALSE;
 8005918:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 800591c:	682b      	ldr	r3, [r5, #0]
 800591e:	4f2f      	ldr	r7, [pc, #188]	; (80059dc <xTaskIncrementTick+0x10c>)
 8005920:	42a3      	cmp	r3, r4
 8005922:	d911      	bls.n	8005948 <xTaskIncrementTick+0x78>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005924:	683a      	ldr	r2, [r7, #0]
 8005926:	4b2e      	ldr	r3, [pc, #184]	; (80059e0 <xTaskIncrementTick+0x110>)
 8005928:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800592a:	2214      	movs	r2, #20
 800592c:	434a      	muls	r2, r1
 800592e:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8005930:	2a02      	cmp	r2, #2
 8005932:	bf28      	it	cs
 8005934:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8005938:	4a2a      	ldr	r2, [pc, #168]	; (80059e4 <xTaskIncrementTick+0x114>)
 800593a:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800593c:	2a00      	cmp	r2, #0
}
 800593e:	bf0c      	ite	eq
 8005940:	4658      	moveq	r0, fp
 8005942:	2001      	movne	r0, #1
 8005944:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005948:	f8df 9080 	ldr.w	r9, [pc, #128]	; 80059cc <xTaskIncrementTick+0xfc>
					prvAddTaskToReadyList( pxTCB );
 800594c:	f8df a09c 	ldr.w	sl, [pc, #156]	; 80059ec <xTaskIncrementTick+0x11c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005950:	f8d9 2000 	ldr.w	r2, [r9]
 8005954:	6812      	ldr	r2, [r2, #0]
 8005956:	b91a      	cbnz	r2, 8005960 <xTaskIncrementTick+0x90>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005958:	f04f 32ff 	mov.w	r2, #4294967295
 800595c:	602a      	str	r2, [r5, #0]
					break;
 800595e:	e7e1      	b.n	8005924 <xTaskIncrementTick+0x54>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005960:	f8d9 2000 	ldr.w	r2, [r9]
 8005964:	68d2      	ldr	r2, [r2, #12]
 8005966:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005968:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 800596a:	428c      	cmp	r4, r1
 800596c:	d201      	bcs.n	8005972 <xTaskIncrementTick+0xa2>
						xNextTaskUnblockTime = xItemValue;
 800596e:	6029      	str	r1, [r5, #0]
						break;
 8005970:	e7d8      	b.n	8005924 <xTaskIncrementTick+0x54>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005972:	f106 0804 	add.w	r8, r6, #4
 8005976:	4640      	mov	r0, r8
 8005978:	f7ff f889 	bl	8004a8e <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800597c:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800597e:	b119      	cbz	r1, 8005988 <xTaskIncrementTick+0xb8>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005980:	f106 0018 	add.w	r0, r6, #24
 8005984:	f7ff f883 	bl	8004a8e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005988:	2214      	movs	r2, #20
 800598a:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800598c:	f8da 1000 	ldr.w	r1, [sl]
 8005990:	4b13      	ldr	r3, [pc, #76]	; (80059e0 <xTaskIncrementTick+0x110>)
 8005992:	4288      	cmp	r0, r1
 8005994:	bf88      	it	hi
 8005996:	f8ca 0000 	strhi.w	r0, [sl]
 800599a:	4641      	mov	r1, r8
 800599c:	fb02 3000 	mla	r0, r2, r0, r3
 80059a0:	f7ff f852 	bl	8004a48 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059a4:	6838      	ldr	r0, [r7, #0]
 80059a6:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80059a8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80059aa:	4291      	cmp	r1, r2
 80059ac:	bf28      	it	cs
 80059ae:	f04f 0b01 	movcs.w	fp, #1
 80059b2:	e7cd      	b.n	8005950 <xTaskIncrementTick+0x80>
		++uxPendedTicks;
 80059b4:	4a0c      	ldr	r2, [pc, #48]	; (80059e8 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 80059b6:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 80059ba:	6813      	ldr	r3, [r2, #0]
 80059bc:	3301      	adds	r3, #1
 80059be:	6013      	str	r3, [r2, #0]
 80059c0:	e7ba      	b.n	8005938 <xTaskIncrementTick+0x68>
 80059c2:	bf00      	nop
 80059c4:	20002550 	.word	0x20002550
 80059c8:	200025cc 	.word	0x200025cc
 80059cc:	200020d8 	.word	0x200020d8
 80059d0:	200020dc 	.word	0x200020dc
 80059d4:	20002588 	.word	0x20002588
 80059d8:	20002584 	.word	0x20002584
 80059dc:	200020d4 	.word	0x200020d4
 80059e0:	200020e0 	.word	0x200020e0
 80059e4:	200025d0 	.word	0x200025d0
 80059e8:	2000254c 	.word	0x2000254c
 80059ec:	20002558 	.word	0x20002558

080059f0 <xTaskResumeAll>:
{
 80059f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 80059f4:	4c2f      	ldr	r4, [pc, #188]	; (8005ab4 <xTaskResumeAll+0xc4>)
 80059f6:	6823      	ldr	r3, [r4, #0]
 80059f8:	b943      	cbnz	r3, 8005a0c <xTaskResumeAll+0x1c>
 80059fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fe:	f383 8811 	msr	BASEPRI, r3
 8005a02:	f3bf 8f6f 	isb	sy
 8005a06:	f3bf 8f4f 	dsb	sy
 8005a0a:	e7fe      	b.n	8005a0a <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8005a0c:	f000 fcc2 	bl	8006394 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8005a10:	6823      	ldr	r3, [r4, #0]
 8005a12:	3b01      	subs	r3, #1
 8005a14:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a16:	6824      	ldr	r4, [r4, #0]
 8005a18:	b12c      	cbz	r4, 8005a26 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8005a1a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005a1c:	f000 fcdc 	bl	80063d8 <vPortExitCritical>
}
 8005a20:	4620      	mov	r0, r4
 8005a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005a26:	4b24      	ldr	r3, [pc, #144]	; (8005ab8 <xTaskResumeAll+0xc8>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d0f5      	beq.n	8005a1a <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a2e:	4d23      	ldr	r5, [pc, #140]	; (8005abc <xTaskResumeAll+0xcc>)
					prvAddTaskToReadyList( pxTCB );
 8005a30:	4e23      	ldr	r6, [pc, #140]	; (8005ac0 <xTaskResumeAll+0xd0>)
 8005a32:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8005ad4 <xTaskResumeAll+0xe4>
 8005a36:	e01d      	b.n	8005a74 <xTaskResumeAll+0x84>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005a38:	68eb      	ldr	r3, [r5, #12]
 8005a3a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a3c:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a3e:	f104 0018 	add.w	r0, r4, #24
 8005a42:	f7ff f824 	bl	8004a8e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a46:	4638      	mov	r0, r7
 8005a48:	f7ff f821 	bl	8004a8e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005a4c:	2014      	movs	r0, #20
 8005a4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005a50:	6832      	ldr	r2, [r6, #0]
 8005a52:	fb00 8003 	mla	r0, r0, r3, r8
 8005a56:	4293      	cmp	r3, r2
 8005a58:	4639      	mov	r1, r7
 8005a5a:	bf88      	it	hi
 8005a5c:	6033      	strhi	r3, [r6, #0]
 8005a5e:	f7fe fff3 	bl	8004a48 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a62:	4b18      	ldr	r3, [pc, #96]	; (8005ac4 <xTaskResumeAll+0xd4>)
 8005a64:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d302      	bcc.n	8005a74 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 8005a6e:	2201      	movs	r2, #1
 8005a70:	4b15      	ldr	r3, [pc, #84]	; (8005ac8 <xTaskResumeAll+0xd8>)
 8005a72:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a74:	682b      	ldr	r3, [r5, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1de      	bne.n	8005a38 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8005a7a:	b10c      	cbz	r4, 8005a80 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 8005a7c:	f7ff fdde 	bl	800563c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005a80:	4d12      	ldr	r5, [pc, #72]	; (8005acc <xTaskResumeAll+0xdc>)
 8005a82:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005a84:	b144      	cbz	r4, 8005a98 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 8005a86:	2701      	movs	r7, #1
 8005a88:	4e0f      	ldr	r6, [pc, #60]	; (8005ac8 <xTaskResumeAll+0xd8>)
							if( xTaskIncrementTick() != pdFALSE )
 8005a8a:	f7ff ff21 	bl	80058d0 <xTaskIncrementTick>
 8005a8e:	b100      	cbz	r0, 8005a92 <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 8005a90:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005a92:	3c01      	subs	r4, #1
 8005a94:	d1f9      	bne.n	8005a8a <xTaskResumeAll+0x9a>
						uxPendedTicks = 0;
 8005a96:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8005a98:	4b0b      	ldr	r3, [pc, #44]	; (8005ac8 <xTaskResumeAll+0xd8>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d0bc      	beq.n	8005a1a <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8005aa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aa4:	4b0a      	ldr	r3, [pc, #40]	; (8005ad0 <xTaskResumeAll+0xe0>)
 8005aa6:	601a      	str	r2, [r3, #0]
 8005aa8:	f3bf 8f4f 	dsb	sy
 8005aac:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8005ab0:	2401      	movs	r4, #1
 8005ab2:	e7b3      	b.n	8005a1c <xTaskResumeAll+0x2c>
 8005ab4:	20002550 	.word	0x20002550
 8005ab8:	20002544 	.word	0x20002544
 8005abc:	2000258c 	.word	0x2000258c
 8005ac0:	20002558 	.word	0x20002558
 8005ac4:	200020d4 	.word	0x200020d4
 8005ac8:	200025d0 	.word	0x200025d0
 8005acc:	2000254c 	.word	0x2000254c
 8005ad0:	e000ed04 	.word	0xe000ed04
 8005ad4:	200020e0 	.word	0x200020e0

08005ad8 <vTaskDelay>:
	{
 8005ad8:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ada:	b940      	cbnz	r0, 8005aee <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8005adc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ae0:	4b0d      	ldr	r3, [pc, #52]	; (8005b18 <vTaskDelay+0x40>)
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	f3bf 8f4f 	dsb	sy
 8005ae8:	f3bf 8f6f 	isb	sy
	}
 8005aec:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8005aee:	4b0b      	ldr	r3, [pc, #44]	; (8005b1c <vTaskDelay+0x44>)
 8005af0:	6819      	ldr	r1, [r3, #0]
 8005af2:	b141      	cbz	r1, 8005b06 <vTaskDelay+0x2e>
 8005af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af8:	f383 8811 	msr	BASEPRI, r3
 8005afc:	f3bf 8f6f 	isb	sy
 8005b00:	f3bf 8f4f 	dsb	sy
 8005b04:	e7fe      	b.n	8005b04 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005b06:	f7ff fed5 	bl	80058b4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b0a:	f7ff fdef 	bl	80056ec <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8005b0e:	f7ff ff6f 	bl	80059f0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8005b12:	2800      	cmp	r0, #0
 8005b14:	d0e2      	beq.n	8005adc <vTaskDelay+0x4>
 8005b16:	e7e9      	b.n	8005aec <vTaskDelay+0x14>
 8005b18:	e000ed04 	.word	0xe000ed04
 8005b1c:	20002550 	.word	0x20002550

08005b20 <vTaskSwitchContext>:
{
 8005b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b22:	4b24      	ldr	r3, [pc, #144]	; (8005bb4 <vTaskSwitchContext+0x94>)
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	4b24      	ldr	r3, [pc, #144]	; (8005bb8 <vTaskSwitchContext+0x98>)
 8005b28:	b112      	cbz	r2, 8005b30 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	601a      	str	r2, [r3, #0]
}
 8005b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		xYieldPending = pdFALSE;
 8005b30:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8005b32:	f7fb fbe8 	bl	8001306 <getRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8005b36:	4a21      	ldr	r2, [pc, #132]	; (8005bbc <vTaskSwitchContext+0x9c>)
 8005b38:	4c21      	ldr	r4, [pc, #132]	; (8005bc0 <vTaskSwitchContext+0xa0>)
 8005b3a:	6815      	ldr	r5, [r2, #0]
 8005b3c:	42a8      	cmp	r0, r5
 8005b3e:	d904      	bls.n	8005b4a <vTaskSwitchContext+0x2a>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8005b40:	6821      	ldr	r1, [r4, #0]
 8005b42:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 8005b44:	1b5b      	subs	r3, r3, r5
 8005b46:	4403      	add	r3, r0
 8005b48:	658b      	str	r3, [r1, #88]	; 0x58
				ulTaskSwitchedInTime = ulTotalRunTime;
 8005b4a:	6010      	str	r0, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8005b4c:	6822      	ldr	r2, [r4, #0]
 8005b4e:	6823      	ldr	r3, [r4, #0]
 8005b50:	6812      	ldr	r2, [r2, #0]
 8005b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d804      	bhi.n	8005b62 <vTaskSwitchContext+0x42>
 8005b58:	6820      	ldr	r0, [r4, #0]
 8005b5a:	6821      	ldr	r1, [r4, #0]
 8005b5c:	3134      	adds	r1, #52	; 0x34
 8005b5e:	f7fe ff4b 	bl	80049f8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005b62:	4a18      	ldr	r2, [pc, #96]	; (8005bc4 <vTaskSwitchContext+0xa4>)
 8005b64:	f04f 0c14 	mov.w	ip, #20
 8005b68:	4617      	mov	r7, r2
 8005b6a:	4e17      	ldr	r6, [pc, #92]	; (8005bc8 <vTaskSwitchContext+0xa8>)
 8005b6c:	6833      	ldr	r3, [r6, #0]
 8005b6e:	fb0c f103 	mul.w	r1, ip, r3
 8005b72:	5855      	ldr	r5, [r2, r1]
 8005b74:	1850      	adds	r0, r2, r1
 8005b76:	b18d      	cbz	r5, 8005b9c <vTaskSwitchContext+0x7c>
 8005b78:	6845      	ldr	r5, [r0, #4]
 8005b7a:	3108      	adds	r1, #8
 8005b7c:	686d      	ldr	r5, [r5, #4]
 8005b7e:	440a      	add	r2, r1
 8005b80:	4295      	cmp	r5, r2
 8005b82:	bf08      	it	eq
 8005b84:	686a      	ldreq	r2, [r5, #4]
 8005b86:	6045      	str	r5, [r0, #4]
 8005b88:	bf08      	it	eq
 8005b8a:	6042      	streq	r2, [r0, #4]
 8005b8c:	2214      	movs	r2, #20
 8005b8e:	fb02 7203 	mla	r2, r2, r3, r7
 8005b92:	6852      	ldr	r2, [r2, #4]
 8005b94:	68d2      	ldr	r2, [r2, #12]
 8005b96:	6022      	str	r2, [r4, #0]
 8005b98:	6033      	str	r3, [r6, #0]
}
 8005b9a:	e7c8      	b.n	8005b2e <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005b9c:	b943      	cbnz	r3, 8005bb0 <vTaskSwitchContext+0x90>
 8005b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba2:	f383 8811 	msr	BASEPRI, r3
 8005ba6:	f3bf 8f6f 	isb	sy
 8005baa:	f3bf 8f4f 	dsb	sy
 8005bae:	e7fe      	b.n	8005bae <vTaskSwitchContext+0x8e>
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	e7dc      	b.n	8005b6e <vTaskSwitchContext+0x4e>
 8005bb4:	20002550 	.word	0x20002550
 8005bb8:	200025d0 	.word	0x200025d0
 8005bbc:	20002540 	.word	0x20002540
 8005bc0:	200020d4 	.word	0x200020d4
 8005bc4:	200020e0 	.word	0x200020e0
 8005bc8:	20002558 	.word	0x20002558

08005bcc <vTaskPlaceOnEventList>:
{
 8005bcc:	b510      	push	{r4, lr}
 8005bce:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8005bd0:	b940      	cbnz	r0, 8005be4 <vTaskPlaceOnEventList+0x18>
 8005bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd6:	f383 8811 	msr	BASEPRI, r3
 8005bda:	f3bf 8f6f 	isb	sy
 8005bde:	f3bf 8f4f 	dsb	sy
 8005be2:	e7fe      	b.n	8005be2 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005be4:	4b05      	ldr	r3, [pc, #20]	; (8005bfc <vTaskPlaceOnEventList+0x30>)
 8005be6:	6819      	ldr	r1, [r3, #0]
 8005be8:	3118      	adds	r1, #24
 8005bea:	f7fe ff39 	bl	8004a60 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005bee:	4620      	mov	r0, r4
}
 8005bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005bf4:	2101      	movs	r1, #1
 8005bf6:	f7ff bd79 	b.w	80056ec <prvAddCurrentTaskToDelayedList>
 8005bfa:	bf00      	nop
 8005bfc:	200020d4 	.word	0x200020d4

08005c00 <vTaskPlaceOnEventListRestricted>:
	{
 8005c00:	b538      	push	{r3, r4, r5, lr}
 8005c02:	460d      	mov	r5, r1
 8005c04:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8005c06:	b940      	cbnz	r0, 8005c1a <vTaskPlaceOnEventListRestricted+0x1a>
 8005c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0c:	f383 8811 	msr	BASEPRI, r3
 8005c10:	f3bf 8f6f 	isb	sy
 8005c14:	f3bf 8f4f 	dsb	sy
 8005c18:	e7fe      	b.n	8005c18 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c1a:	4b08      	ldr	r3, [pc, #32]	; (8005c3c <vTaskPlaceOnEventListRestricted+0x3c>)
 8005c1c:	6819      	ldr	r1, [r3, #0]
 8005c1e:	3118      	adds	r1, #24
 8005c20:	f7fe ff12 	bl	8004a48 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8005c24:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c26:	4621      	mov	r1, r4
 8005c28:	bf08      	it	eq
 8005c2a:	4628      	moveq	r0, r5
	}
 8005c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c30:	bf18      	it	ne
 8005c32:	f04f 30ff 	movne.w	r0, #4294967295
 8005c36:	f7ff bd59 	b.w	80056ec <prvAddCurrentTaskToDelayedList>
 8005c3a:	bf00      	nop
 8005c3c:	200020d4 	.word	0x200020d4

08005c40 <xTaskRemoveFromEventList>:
{
 8005c40:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005c42:	68c3      	ldr	r3, [r0, #12]
 8005c44:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8005c46:	b944      	cbnz	r4, 8005c5a <xTaskRemoveFromEventList+0x1a>
 8005c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4c:	f383 8811 	msr	BASEPRI, r3
 8005c50:	f3bf 8f6f 	isb	sy
 8005c54:	f3bf 8f4f 	dsb	sy
 8005c58:	e7fe      	b.n	8005c58 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c5a:	f104 0518 	add.w	r5, r4, #24
 8005c5e:	4628      	mov	r0, r5
 8005c60:	f7fe ff15 	bl	8004a8e <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c64:	4b10      	ldr	r3, [pc, #64]	; (8005ca8 <xTaskRemoveFromEventList+0x68>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	b9db      	cbnz	r3, 8005ca2 <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c6a:	1d25      	adds	r5, r4, #4
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	f7fe ff0e 	bl	8004a8e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005c72:	4a0e      	ldr	r2, [pc, #56]	; (8005cac <xTaskRemoveFromEventList+0x6c>)
 8005c74:	2014      	movs	r0, #20
 8005c76:	6811      	ldr	r1, [r2, #0]
 8005c78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005c7a:	428b      	cmp	r3, r1
 8005c7c:	4629      	mov	r1, r5
 8005c7e:	bf88      	it	hi
 8005c80:	6013      	strhi	r3, [r2, #0]
 8005c82:	4a0b      	ldr	r2, [pc, #44]	; (8005cb0 <xTaskRemoveFromEventList+0x70>)
 8005c84:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005c88:	f7fe fede 	bl	8004a48 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c8c:	4b09      	ldr	r3, [pc, #36]	; (8005cb4 <xTaskRemoveFromEventList+0x74>)
 8005c8e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c94:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8005c96:	bf85      	ittet	hi
 8005c98:	2001      	movhi	r0, #1
 8005c9a:	4b07      	ldrhi	r3, [pc, #28]	; (8005cb8 <xTaskRemoveFromEventList+0x78>)
		xReturn = pdFALSE;
 8005c9c:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 8005c9e:	6018      	strhi	r0, [r3, #0]
}
 8005ca0:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005ca2:	4629      	mov	r1, r5
 8005ca4:	4805      	ldr	r0, [pc, #20]	; (8005cbc <xTaskRemoveFromEventList+0x7c>)
 8005ca6:	e7ef      	b.n	8005c88 <xTaskRemoveFromEventList+0x48>
 8005ca8:	20002550 	.word	0x20002550
 8005cac:	20002558 	.word	0x20002558
 8005cb0:	200020e0 	.word	0x200020e0
 8005cb4:	200020d4 	.word	0x200020d4
 8005cb8:	200025d0 	.word	0x200025d0
 8005cbc:	2000258c 	.word	0x2000258c

08005cc0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005cc0:	4b03      	ldr	r3, [pc, #12]	; (8005cd0 <vTaskInternalSetTimeOutState+0x10>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005cc6:	4b03      	ldr	r3, [pc, #12]	; (8005cd4 <vTaskInternalSetTimeOutState+0x14>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	6043      	str	r3, [r0, #4]
}
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	20002588 	.word	0x20002588
 8005cd4:	200025cc 	.word	0x200025cc

08005cd8 <xTaskCheckForTimeOut>:
{
 8005cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cda:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8005cdc:	4605      	mov	r5, r0
 8005cde:	b940      	cbnz	r0, 8005cf2 <xTaskCheckForTimeOut+0x1a>
 8005ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce4:	f383 8811 	msr	BASEPRI, r3
 8005ce8:	f3bf 8f6f 	isb	sy
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	e7fe      	b.n	8005cf0 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8005cf2:	b941      	cbnz	r1, 8005d06 <xTaskCheckForTimeOut+0x2e>
 8005cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf8:	f383 8811 	msr	BASEPRI, r3
 8005cfc:	f3bf 8f6f 	isb	sy
 8005d00:	f3bf 8f4f 	dsb	sy
 8005d04:	e7fe      	b.n	8005d04 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8005d06:	f000 fb45 	bl	8006394 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8005d0a:	4b0f      	ldr	r3, [pc, #60]	; (8005d48 <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d0c:	6868      	ldr	r0, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 8005d0e:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8005d10:	6823      	ldr	r3, [r4, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d12:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 8005d14:	1c5e      	adds	r6, r3, #1
 8005d16:	d00d      	beq.n	8005d34 <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d18:	4e0c      	ldr	r6, [pc, #48]	; (8005d4c <xTaskCheckForTimeOut+0x74>)
 8005d1a:	682f      	ldr	r7, [r5, #0]
 8005d1c:	6836      	ldr	r6, [r6, #0]
 8005d1e:	42b7      	cmp	r7, r6
 8005d20:	d001      	beq.n	8005d26 <xTaskCheckForTimeOut+0x4e>
 8005d22:	4288      	cmp	r0, r1
 8005d24:	d90d      	bls.n	8005d42 <xTaskCheckForTimeOut+0x6a>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d909      	bls.n	8005d3e <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 8005d2a:	1a9b      	subs	r3, r3, r2
 8005d2c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005d2e:	4628      	mov	r0, r5
 8005d30:	f7ff ffc6 	bl	8005cc0 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8005d34:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005d36:	f000 fb4f 	bl	80063d8 <vPortExitCritical>
}
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*pxTicksToWait = 0;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8005d42:	2401      	movs	r4, #1
 8005d44:	e7f7      	b.n	8005d36 <xTaskCheckForTimeOut+0x5e>
 8005d46:	bf00      	nop
 8005d48:	200025cc 	.word	0x200025cc
 8005d4c:	20002588 	.word	0x20002588

08005d50 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8005d50:	2201      	movs	r2, #1
 8005d52:	4b01      	ldr	r3, [pc, #4]	; (8005d58 <vTaskMissedYield+0x8>)
 8005d54:	601a      	str	r2, [r3, #0]
}
 8005d56:	4770      	bx	lr
 8005d58:	200025d0 	.word	0x200025d0

08005d5c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8005d5c:	4b05      	ldr	r3, [pc, #20]	; (8005d74 <xTaskGetSchedulerState+0x18>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	b133      	cbz	r3, 8005d70 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d62:	4b05      	ldr	r3, [pc, #20]	; (8005d78 <xTaskGetSchedulerState+0x1c>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d68:	bf0c      	ite	eq
 8005d6a:	2002      	moveq	r0, #2
 8005d6c:	2000      	movne	r0, #0
 8005d6e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d70:	2001      	movs	r0, #1
	}
 8005d72:	4770      	bx	lr
 8005d74:	200025a0 	.word	0x200025a0
 8005d78:	20002550 	.word	0x20002550

08005d7c <xTaskPriorityInherit>:
	{
 8005d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8005d7e:	4604      	mov	r4, r0
 8005d80:	2800      	cmp	r0, #0
 8005d82:	d02b      	beq.n	8005ddc <xTaskPriorityInherit+0x60>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005d84:	4a1b      	ldr	r2, [pc, #108]	; (8005df4 <xTaskPriorityInherit+0x78>)
 8005d86:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005d88:	6811      	ldr	r1, [r2, #0]
 8005d8a:	4616      	mov	r6, r2
 8005d8c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8005d8e:	428b      	cmp	r3, r1
 8005d90:	d227      	bcs.n	8005de2 <xTaskPriorityInherit+0x66>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005d92:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005d94:	4d18      	ldr	r5, [pc, #96]	; (8005df8 <xTaskPriorityInherit+0x7c>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005d96:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d98:	bfa1      	itttt	ge
 8005d9a:	6832      	ldrge	r2, [r6, #0]
 8005d9c:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8005d9e:	f1c2 0238 	rsbge	r2, r2, #56	; 0x38
 8005da2:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005da4:	2214      	movs	r2, #20
 8005da6:	fb02 5303 	mla	r3, r2, r3, r5
 8005daa:	6942      	ldr	r2, [r0, #20]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d111      	bne.n	8005dd4 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005db0:	1d07      	adds	r7, r0, #4
 8005db2:	4638      	mov	r0, r7
 8005db4:	f7fe fe6b 	bl	8004a8e <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005db8:	6833      	ldr	r3, [r6, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005dba:	4a10      	ldr	r2, [pc, #64]	; (8005dfc <xTaskPriorityInherit+0x80>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005dbe:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005dc0:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005dc2:	428b      	cmp	r3, r1
 8005dc4:	d80b      	bhi.n	8005dde <xTaskPriorityInherit+0x62>
 8005dc6:	2014      	movs	r0, #20
 8005dc8:	4639      	mov	r1, r7
 8005dca:	fb00 5003 	mla	r0, r0, r3, r5
 8005dce:	f7fe fe3b 	bl	8004a48 <vListInsertEnd>
 8005dd2:	e002      	b.n	8005dda <xTaskPriorityInherit+0x5e>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005dd4:	6833      	ldr	r3, [r6, #0]
 8005dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd8:	62c3      	str	r3, [r0, #44]	; 0x2c
				xReturn = pdTRUE;
 8005dda:	2001      	movs	r0, #1
	}
 8005ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005dde:	6013      	str	r3, [r2, #0]
 8005de0:	e7f1      	b.n	8005dc6 <xTaskPriorityInherit+0x4a>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005de2:	6813      	ldr	r3, [r2, #0]
 8005de4:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8005de6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8005de8:	42a0      	cmp	r0, r4
 8005dea:	bf2c      	ite	cs
 8005dec:	2000      	movcs	r0, #0
 8005dee:	2001      	movcc	r0, #1
 8005df0:	e7f4      	b.n	8005ddc <xTaskPriorityInherit+0x60>
 8005df2:	bf00      	nop
 8005df4:	200020d4 	.word	0x200020d4
 8005df8:	200020e0 	.word	0x200020e0
 8005dfc:	20002558 	.word	0x20002558

08005e00 <xTaskPriorityDisinherit>:
	{
 8005e00:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8005e02:	b908      	cbnz	r0, 8005e08 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 8005e04:	2000      	movs	r0, #0
	}
 8005e06:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8005e08:	4b1b      	ldr	r3, [pc, #108]	; (8005e78 <xTaskPriorityDisinherit+0x78>)
 8005e0a:	681c      	ldr	r4, [r3, #0]
 8005e0c:	4284      	cmp	r4, r0
 8005e0e:	d008      	beq.n	8005e22 <xTaskPriorityDisinherit+0x22>
 8005e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	e7fe      	b.n	8005e20 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8005e22:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005e24:	b943      	cbnz	r3, 8005e38 <xTaskPriorityDisinherit+0x38>
 8005e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2a:	f383 8811 	msr	BASEPRI, r3
 8005e2e:	f3bf 8f6f 	isb	sy
 8005e32:	f3bf 8f4f 	dsb	sy
 8005e36:	e7fe      	b.n	8005e36 <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e38:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005e3a:	6d22      	ldr	r2, [r4, #80]	; 0x50
			( pxTCB->uxMutexesHeld )--;
 8005e3c:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e3e:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8005e40:	6563      	str	r3, [r4, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e42:	d0df      	beq.n	8005e04 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d1dd      	bne.n	8005e04 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e48:	1d25      	adds	r5, r4, #4
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	f7fe fe1f 	bl	8004a8e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e50:	2014      	movs	r0, #20
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e52:	6d23      	ldr	r3, [r4, #80]	; 0x50
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e54:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e58:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e5a:	4a08      	ldr	r2, [pc, #32]	; (8005e7c <xTaskPriorityDisinherit+0x7c>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e5c:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8005e5e:	6811      	ldr	r1, [r2, #0]
 8005e60:	428b      	cmp	r3, r1
 8005e62:	bf88      	it	hi
 8005e64:	6013      	strhi	r3, [r2, #0]
 8005e66:	4a06      	ldr	r2, [pc, #24]	; (8005e80 <xTaskPriorityDisinherit+0x80>)
 8005e68:	4629      	mov	r1, r5
 8005e6a:	fb00 2003 	mla	r0, r0, r3, r2
 8005e6e:	f7fe fdeb 	bl	8004a48 <vListInsertEnd>
					xReturn = pdTRUE;
 8005e72:	2001      	movs	r0, #1
		return xReturn;
 8005e74:	e7c7      	b.n	8005e06 <xTaskPriorityDisinherit+0x6>
 8005e76:	bf00      	nop
 8005e78:	200020d4 	.word	0x200020d4
 8005e7c:	20002558 	.word	0x20002558
 8005e80:	200020e0 	.word	0x200020e0

08005e84 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8005e84:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8005e86:	4604      	mov	r4, r0
 8005e88:	2800      	cmp	r0, #0
 8005e8a:	d041      	beq.n	8005f10 <vTaskPriorityDisinheritAfterTimeout+0x8c>
			configASSERT( pxTCB->uxMutexesHeld );
 8005e8c:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8005e8e:	b942      	cbnz	r2, 8005ea2 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8005e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e94:	f383 8811 	msr	BASEPRI, r3
 8005e98:	f3bf 8f6f 	isb	sy
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	e7fe      	b.n	8005ea0 <vTaskPriorityDisinheritAfterTimeout+0x1c>
 8005ea2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005ea4:	4299      	cmp	r1, r3
 8005ea6:	bf38      	it	cc
 8005ea8:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005eaa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005eac:	428b      	cmp	r3, r1
 8005eae:	d02f      	beq.n	8005f10 <vTaskPriorityDisinheritAfterTimeout+0x8c>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005eb0:	2a01      	cmp	r2, #1
 8005eb2:	d12d      	bne.n	8005f10 <vTaskPriorityDisinheritAfterTimeout+0x8c>
					configASSERT( pxTCB != pxCurrentTCB );
 8005eb4:	4a17      	ldr	r2, [pc, #92]	; (8005f14 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 8005eb6:	6812      	ldr	r2, [r2, #0]
 8005eb8:	4282      	cmp	r2, r0
 8005eba:	d108      	bne.n	8005ece <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8005ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec0:	f383 8811 	msr	BASEPRI, r3
 8005ec4:	f3bf 8f6f 	isb	sy
 8005ec8:	f3bf 8f4f 	dsb	sy
 8005ecc:	e7fe      	b.n	8005ecc <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005ece:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005ed0:	4d11      	ldr	r5, [pc, #68]	; (8005f18 <vTaskPriorityDisinheritAfterTimeout+0x94>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005ed2:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005ed4:	f04f 0214 	mov.w	r2, #20
 8005ed8:	fb02 5303 	mla	r3, r2, r3, r5
 8005edc:	6942      	ldr	r2, [r0, #20]
					pxTCB->uxPriority = uxPriorityToUse;
 8005ede:	62c1      	str	r1, [r0, #44]	; 0x2c
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ee0:	bfa4      	itt	ge
 8005ee2:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
 8005ee6:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d111      	bne.n	8005f10 <vTaskPriorityDisinheritAfterTimeout+0x8c>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005eec:	1d06      	adds	r6, r0, #4
 8005eee:	4630      	mov	r0, r6
 8005ef0:	f7fe fdcd 	bl	8004a8e <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8005ef4:	2014      	movs	r0, #20
 8005ef6:	4a09      	ldr	r2, [pc, #36]	; (8005f1c <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8005ef8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005efa:	6811      	ldr	r1, [r2, #0]
 8005efc:	fb00 5003 	mla	r0, r0, r3, r5
 8005f00:	428b      	cmp	r3, r1
 8005f02:	4631      	mov	r1, r6
	}
 8005f04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 8005f08:	bf88      	it	hi
 8005f0a:	6013      	strhi	r3, [r2, #0]
 8005f0c:	f7fe bd9c 	b.w	8004a48 <vListInsertEnd>
	}
 8005f10:	bd70      	pop	{r4, r5, r6, pc}
 8005f12:	bf00      	nop
 8005f14:	200020d4 	.word	0x200020d4
 8005f18:	200020e0 	.word	0x200020e0
 8005f1c:	20002558 	.word	0x20002558

08005f20 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8005f20:	4b04      	ldr	r3, [pc, #16]	; (8005f34 <pvTaskIncrementMutexHeldCount+0x14>)
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	b11a      	cbz	r2, 8005f2e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8005f26:	6819      	ldr	r1, [r3, #0]
 8005f28:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8005f2a:	3201      	adds	r2, #1
 8005f2c:	654a      	str	r2, [r1, #84]	; 0x54
		return pxCurrentTCB;
 8005f2e:	6818      	ldr	r0, [r3, #0]
	}
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	200020d4 	.word	0x200020d4

08005f38 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005f38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8005f3a:	4c11      	ldr	r4, [pc, #68]	; (8005f80 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8005f3c:	f000 fa2a 	bl	8006394 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8005f40:	6825      	ldr	r5, [r4, #0]
 8005f42:	b9bd      	cbnz	r5, 8005f74 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8005f44:	4f0f      	ldr	r7, [pc, #60]	; (8005f84 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8005f46:	4e10      	ldr	r6, [pc, #64]	; (8005f88 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8005f48:	4638      	mov	r0, r7
 8005f4a:	f7fe fd6f 	bl	8004a2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005f4e:	4630      	mov	r0, r6
 8005f50:	f7fe fd6c 	bl	8004a2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005f54:	4b0d      	ldr	r3, [pc, #52]	; (8005f8c <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005f56:	4a0e      	ldr	r2, [pc, #56]	; (8005f90 <prvCheckForValidListAndQueue+0x58>)
			pxCurrentTimerList = &xActiveTimerList1;
 8005f58:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005f5a:	4b0e      	ldr	r3, [pc, #56]	; (8005f94 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005f5c:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 8005f5e:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005f60:	200a      	movs	r0, #10
 8005f62:	9500      	str	r5, [sp, #0]
 8005f64:	4b0c      	ldr	r3, [pc, #48]	; (8005f98 <prvCheckForValidListAndQueue+0x60>)
 8005f66:	f7fe fe6d 	bl	8004c44 <xQueueGenericCreateStatic>
 8005f6a:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005f6c:	b110      	cbz	r0, 8005f74 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005f6e:	490b      	ldr	r1, [pc, #44]	; (8005f9c <prvCheckForValidListAndQueue+0x64>)
 8005f70:	f7ff fa36 	bl	80053e0 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8005f74:	b003      	add	sp, #12
 8005f76:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8005f7a:	f000 ba2d 	b.w	80063d8 <vPortExitCritical>
 8005f7e:	bf00      	nop
 8005f80:	200026f8 	.word	0x200026f8
 8005f84:	2000267c 	.word	0x2000267c
 8005f88:	20002690 	.word	0x20002690
 8005f8c:	200025d4 	.word	0x200025d4
 8005f90:	200025dc 	.word	0x200025dc
 8005f94:	200025d8 	.word	0x200025d8
 8005f98:	200026a8 	.word	0x200026a8
 8005f9c:	08009ed1 	.word	0x08009ed1

08005fa0 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8005fa0:	4291      	cmp	r1, r2
{
 8005fa2:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005fa4:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005fa6:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8005fa8:	d80a      	bhi.n	8005fc0 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005faa:	1ad2      	subs	r2, r2, r3
 8005fac:	6983      	ldr	r3, [r0, #24]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d20d      	bcs.n	8005fce <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005fb2:	4b08      	ldr	r3, [pc, #32]	; (8005fd4 <prvInsertTimerInActiveList+0x34>)
 8005fb4:	1d01      	adds	r1, r0, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005fb6:	6818      	ldr	r0, [r3, #0]
 8005fb8:	f7fe fd52 	bl	8004a60 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8005fbc:	2000      	movs	r0, #0
}
 8005fbe:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d201      	bcs.n	8005fc8 <prvInsertTimerInActiveList+0x28>
 8005fc4:	4299      	cmp	r1, r3
 8005fc6:	d202      	bcs.n	8005fce <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005fc8:	1d01      	adds	r1, r0, #4
 8005fca:	4b03      	ldr	r3, [pc, #12]	; (8005fd8 <prvInsertTimerInActiveList+0x38>)
 8005fcc:	e7f3      	b.n	8005fb6 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8005fce:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8005fd0:	e7f5      	b.n	8005fbe <prvInsertTimerInActiveList+0x1e>
 8005fd2:	bf00      	nop
 8005fd4:	200025d8 	.word	0x200025d8
 8005fd8:	200025d4 	.word	0x200025d4

08005fdc <xTimerCreateTimerTask>:
{
 8005fdc:	b510      	push	{r4, lr}
 8005fde:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8005fe0:	f7ff ffaa 	bl	8005f38 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8005fe4:	4b12      	ldr	r3, [pc, #72]	; (8006030 <xTimerCreateTimerTask+0x54>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	b1b3      	cbz	r3, 8006018 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005fea:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005fec:	aa07      	add	r2, sp, #28
 8005fee:	a906      	add	r1, sp, #24
 8005ff0:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005ff2:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005ff6:	f7fe fd0d 	bl	8004a14 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005ffa:	9b05      	ldr	r3, [sp, #20]
 8005ffc:	9a07      	ldr	r2, [sp, #28]
 8005ffe:	9302      	str	r3, [sp, #8]
 8006000:	9b06      	ldr	r3, [sp, #24]
 8006002:	490c      	ldr	r1, [pc, #48]	; (8006034 <xTimerCreateTimerTask+0x58>)
 8006004:	9301      	str	r3, [sp, #4]
 8006006:	2302      	movs	r3, #2
 8006008:	480b      	ldr	r0, [pc, #44]	; (8006038 <xTimerCreateTimerTask+0x5c>)
 800600a:	9300      	str	r3, [sp, #0]
 800600c:	4623      	mov	r3, r4
 800600e:	f7ff fba7 	bl	8005760 <xTaskCreateStatic>
 8006012:	4b0a      	ldr	r3, [pc, #40]	; (800603c <xTimerCreateTimerTask+0x60>)
 8006014:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8006016:	b940      	cbnz	r0, 800602a <xTimerCreateTimerTask+0x4e>
 8006018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601c:	f383 8811 	msr	BASEPRI, r3
 8006020:	f3bf 8f6f 	isb	sy
 8006024:	f3bf 8f4f 	dsb	sy
 8006028:	e7fe      	b.n	8006028 <xTimerCreateTimerTask+0x4c>
}
 800602a:	2001      	movs	r0, #1
 800602c:	b008      	add	sp, #32
 800602e:	bd10      	pop	{r4, pc}
 8006030:	200026f8 	.word	0x200026f8
 8006034:	08009ed6 	.word	0x08009ed6
 8006038:	08006115 	.word	0x08006115
 800603c:	200026fc 	.word	0x200026fc

08006040 <xTimerGenericCommand>:
{
 8006040:	b530      	push	{r4, r5, lr}
 8006042:	4615      	mov	r5, r2
 8006044:	b085      	sub	sp, #20
 8006046:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8006048:	4603      	mov	r3, r0
 800604a:	b940      	cbnz	r0, 800605e <xTimerGenericCommand+0x1e>
 800604c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006050:	f383 8811 	msr	BASEPRI, r3
 8006054:	f3bf 8f6f 	isb	sy
 8006058:	f3bf 8f4f 	dsb	sy
 800605c:	e7fe      	b.n	800605c <xTimerGenericCommand+0x1c>
	if( xTimerQueue != NULL )
 800605e:	4c0d      	ldr	r4, [pc, #52]	; (8006094 <xTimerGenericCommand+0x54>)
 8006060:	6820      	ldr	r0, [r4, #0]
 8006062:	b178      	cbz	r0, 8006084 <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006064:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006066:	e9cd 1500 	strd	r1, r5, [sp]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800606a:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800606c:	dc0c      	bgt.n	8006088 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800606e:	f7ff fe75 	bl	8005d5c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006072:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006074:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006076:	bf0c      	ite	eq
 8006078:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800607a:	461a      	movne	r2, r3
 800607c:	4669      	mov	r1, sp
 800607e:	6820      	ldr	r0, [r4, #0]
 8006080:	f7fe fe94 	bl	8004dac <xQueueGenericSend>
}
 8006084:	b005      	add	sp, #20
 8006086:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006088:	2300      	movs	r3, #0
 800608a:	4669      	mov	r1, sp
 800608c:	f7fe ff40 	bl	8004f10 <xQueueGenericSendFromISR>
 8006090:	e7f8      	b.n	8006084 <xTimerGenericCommand+0x44>
 8006092:	bf00      	nop
 8006094:	200026f8 	.word	0x200026f8

08006098 <prvSwitchTimerLists>:
{
 8006098:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800609c:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80060a0:	4d1a      	ldr	r5, [pc, #104]	; (800610c <prvSwitchTimerLists+0x74>)
 80060a2:	682b      	ldr	r3, [r5, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	b932      	cbnz	r2, 80060b6 <prvSwitchTimerLists+0x1e>
	pxCurrentTimerList = pxOverflowTimerList;
 80060a8:	4a19      	ldr	r2, [pc, #100]	; (8006110 <prvSwitchTimerLists+0x78>)
 80060aa:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80060ac:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 80060ae:	6029      	str	r1, [r5, #0]
}
 80060b0:	b002      	add	sp, #8
 80060b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060b6:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060b8:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060ba:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060bc:	1d27      	adds	r7, r4, #4
 80060be:	4638      	mov	r0, r7
 80060c0:	f7fe fce5 	bl	8004a8e <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060c6:	4620      	mov	r0, r4
 80060c8:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80060ca:	69e3      	ldr	r3, [r4, #28]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d1e8      	bne.n	80060a2 <prvSwitchTimerLists+0xa>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80060d0:	69a3      	ldr	r3, [r4, #24]
 80060d2:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 80060d4:	429e      	cmp	r6, r3
 80060d6:	d206      	bcs.n	80060e6 <prvSwitchTimerLists+0x4e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80060d8:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80060da:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80060dc:	4639      	mov	r1, r7
 80060de:	6828      	ldr	r0, [r5, #0]
 80060e0:	f7fe fcbe 	bl	8004a60 <vListInsert>
 80060e4:	e7dd      	b.n	80060a2 <prvSwitchTimerLists+0xa>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80060e6:	2300      	movs	r3, #0
 80060e8:	f8cd 8000 	str.w	r8, [sp]
 80060ec:	4632      	mov	r2, r6
 80060ee:	4619      	mov	r1, r3
 80060f0:	4620      	mov	r0, r4
 80060f2:	f7ff ffa5 	bl	8006040 <xTimerGenericCommand>
				configASSERT( xResult );
 80060f6:	2800      	cmp	r0, #0
 80060f8:	d1d3      	bne.n	80060a2 <prvSwitchTimerLists+0xa>
 80060fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fe:	f383 8811 	msr	BASEPRI, r3
 8006102:	f3bf 8f6f 	isb	sy
 8006106:	f3bf 8f4f 	dsb	sy
 800610a:	e7fe      	b.n	800610a <prvSwitchTimerLists+0x72>
 800610c:	200025d4 	.word	0x200025d4
 8006110:	200025d8 	.word	0x200025d8

08006114 <prvTimerTask>:
{
 8006114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006118:	4d6d      	ldr	r5, [pc, #436]	; (80062d0 <prvTimerTask+0x1bc>)
					portYIELD_WITHIN_API();
 800611a:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 80062e0 <prvTimerTask+0x1cc>
 800611e:	462f      	mov	r7, r5
{
 8006120:	b087      	sub	sp, #28
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006122:	682b      	ldr	r3, [r5, #0]
 8006124:	f8d3 b000 	ldr.w	fp, [r3]
	if( *pxListWasEmpty == pdFALSE )
 8006128:	f1bb 0f00 	cmp.w	fp, #0
 800612c:	d04b      	beq.n	80061c6 <prvTimerTask+0xb2>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	f8d3 a000 	ldr.w	sl, [r3]
	vTaskSuspendAll();
 8006134:	f7ff fbbe 	bl	80058b4 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8006138:	f7ff fbc4 	bl	80058c4 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800613c:	4c65      	ldr	r4, [pc, #404]	; (80062d4 <prvTimerTask+0x1c0>)
	xTimeNow = xTaskGetTickCount();
 800613e:	4681      	mov	r9, r0
	if( xTimeNow < xLastTime )
 8006140:	6823      	ldr	r3, [r4, #0]
 8006142:	4626      	mov	r6, r4
 8006144:	4298      	cmp	r0, r3
 8006146:	d240      	bcs.n	80061ca <prvTimerTask+0xb6>
		prvSwitchTimerLists();
 8006148:	f7ff ffa6 	bl	8006098 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800614c:	f8c4 9000 	str.w	r9, [r4]
			( void ) xTaskResumeAll();
 8006150:	f7ff fc4e 	bl	80059f0 <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006154:	f8df 9184 	ldr.w	r9, [pc, #388]	; 80062dc <prvTimerTask+0x1c8>
 8006158:	2200      	movs	r2, #0
 800615a:	a902      	add	r1, sp, #8
 800615c:	f8d9 0000 	ldr.w	r0, [r9]
 8006160:	f7fe ff8c 	bl	800507c <xQueueReceive>
 8006164:	2800      	cmp	r0, #0
 8006166:	d0dc      	beq.n	8006122 <prvTimerTask+0xe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006168:	9b02      	ldr	r3, [sp, #8]
 800616a:	2b00      	cmp	r3, #0
 800616c:	da03      	bge.n	8006176 <prvTimerTask+0x62>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800616e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006172:	9b03      	ldr	r3, [sp, #12]
 8006174:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006176:	9b02      	ldr	r3, [sp, #8]
 8006178:	2b00      	cmp	r3, #0
 800617a:	dbed      	blt.n	8006158 <prvTimerTask+0x44>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800617c:	9c04      	ldr	r4, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800617e:	6963      	ldr	r3, [r4, #20]
 8006180:	b113      	cbz	r3, 8006188 <prvTimerTask+0x74>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006182:	1d20      	adds	r0, r4, #4
 8006184:	f7fe fc83 	bl	8004a8e <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8006188:	f7ff fb9c 	bl	80058c4 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800618c:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 800618e:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 8006190:	4298      	cmp	r0, r3
 8006192:	d201      	bcs.n	8006198 <prvTimerTask+0x84>
		prvSwitchTimerLists();
 8006194:	f7ff ff80 	bl	8006098 <prvSwitchTimerLists>
 8006198:	9a02      	ldr	r2, [sp, #8]
	xLastTime = xTimeNow;
 800619a:	f8c6 b000 	str.w	fp, [r6]
 800619e:	2a09      	cmp	r2, #9
 80061a0:	d8da      	bhi.n	8006158 <prvTimerTask+0x44>
 80061a2:	2301      	movs	r3, #1
 80061a4:	4093      	lsls	r3, r2
 80061a6:	f413 7a04 	ands.w	sl, r3, #528	; 0x210
 80061aa:	d17e      	bne.n	80062aa <prvTimerTask+0x196>
 80061ac:	f013 0fc7 	tst.w	r3, #199	; 0xc7
 80061b0:	d154      	bne.n	800625c <prvTimerTask+0x148>
 80061b2:	069b      	lsls	r3, r3, #26
 80061b4:	d5d0      	bpl.n	8006158 <prvTimerTask+0x44>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80061b6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1cc      	bne.n	8006158 <prvTimerTask+0x44>
							vPortFree( pxTimer );
 80061be:	4620      	mov	r0, r4
 80061c0:	f000 faa8 	bl	8006714 <vPortFree>
 80061c4:	e7c8      	b.n	8006158 <prvTimerTask+0x44>
		xNextExpireTime = ( TickType_t ) 0U;
 80061c6:	46da      	mov	sl, fp
 80061c8:	e7b4      	b.n	8006134 <prvTimerTask+0x20>
	xLastTime = xTimeNow;
 80061ca:	6020      	str	r0, [r4, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80061cc:	f1bb 0f00 	cmp.w	fp, #0
 80061d0:	d029      	beq.n	8006226 <prvTimerTask+0x112>
 80061d2:	4582      	cmp	sl, r0
 80061d4:	d840      	bhi.n	8006258 <prvTimerTask+0x144>
				( void ) xTaskResumeAll();
 80061d6:	f7ff fc0b 	bl	80059f0 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061e0:	1d20      	adds	r0, r4, #4
 80061e2:	f7fe fc54 	bl	8004a8e <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80061e6:	69e3      	ldr	r3, [r4, #28]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d118      	bne.n	800621e <prvTimerTask+0x10a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80061ec:	69a1      	ldr	r1, [r4, #24]
 80061ee:	4653      	mov	r3, sl
 80061f0:	464a      	mov	r2, r9
 80061f2:	4451      	add	r1, sl
 80061f4:	4620      	mov	r0, r4
 80061f6:	f7ff fed3 	bl	8005fa0 <prvInsertTimerInActiveList>
 80061fa:	b180      	cbz	r0, 800621e <prvTimerTask+0x10a>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80061fc:	2300      	movs	r3, #0
 80061fe:	4652      	mov	r2, sl
 8006200:	9300      	str	r3, [sp, #0]
 8006202:	4619      	mov	r1, r3
 8006204:	4620      	mov	r0, r4
 8006206:	f7ff ff1b 	bl	8006040 <xTimerGenericCommand>
			configASSERT( xResult );
 800620a:	b940      	cbnz	r0, 800621e <prvTimerTask+0x10a>
 800620c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006210:	f383 8811 	msr	BASEPRI, r3
 8006214:	f3bf 8f6f 	isb	sy
 8006218:	f3bf 8f4f 	dsb	sy
 800621c:	e7fe      	b.n	800621c <prvTimerTask+0x108>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800621e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006220:	4620      	mov	r0, r4
 8006222:	4798      	blx	r3
 8006224:	e796      	b.n	8006154 <prvTimerTask+0x40>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006226:	4b2c      	ldr	r3, [pc, #176]	; (80062d8 <prvTimerTask+0x1c4>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	fab2 f282 	clz	r2, r2
 8006230:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006232:	4b2a      	ldr	r3, [pc, #168]	; (80062dc <prvTimerTask+0x1c8>)
 8006234:	ebaa 0109 	sub.w	r1, sl, r9
 8006238:	6818      	ldr	r0, [r3, #0]
 800623a:	f7ff f90e 	bl	800545a <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800623e:	f7ff fbd7 	bl	80059f0 <xTaskResumeAll>
 8006242:	2800      	cmp	r0, #0
 8006244:	d186      	bne.n	8006154 <prvTimerTask+0x40>
					portYIELD_WITHIN_API();
 8006246:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800624a:	f8c8 3000 	str.w	r3, [r8]
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	f3bf 8f6f 	isb	sy
 8006256:	e77d      	b.n	8006154 <prvTimerTask+0x40>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006258:	2200      	movs	r2, #0
 800625a:	e7ea      	b.n	8006232 <prvTimerTask+0x11e>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800625c:	69a1      	ldr	r1, [r4, #24]
 800625e:	9b03      	ldr	r3, [sp, #12]
 8006260:	465a      	mov	r2, fp
 8006262:	4419      	add	r1, r3
 8006264:	4620      	mov	r0, r4
 8006266:	f7ff fe9b 	bl	8005fa0 <prvInsertTimerInActiveList>
 800626a:	2800      	cmp	r0, #0
 800626c:	f43f af74 	beq.w	8006158 <prvTimerTask+0x44>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006270:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006272:	4620      	mov	r0, r4
 8006274:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006276:	69e3      	ldr	r3, [r4, #28]
 8006278:	2b01      	cmp	r3, #1
 800627a:	f47f af6d 	bne.w	8006158 <prvTimerTask+0x44>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800627e:	69a2      	ldr	r2, [r4, #24]
 8006280:	9903      	ldr	r1, [sp, #12]
 8006282:	f8cd a000 	str.w	sl, [sp]
 8006286:	440a      	add	r2, r1
 8006288:	4653      	mov	r3, sl
 800628a:	4651      	mov	r1, sl
 800628c:	4620      	mov	r0, r4
 800628e:	f7ff fed7 	bl	8006040 <xTimerGenericCommand>
							configASSERT( xResult );
 8006292:	2800      	cmp	r0, #0
 8006294:	f47f af60 	bne.w	8006158 <prvTimerTask+0x44>
 8006298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629c:	f383 8811 	msr	BASEPRI, r3
 80062a0:	f3bf 8f6f 	isb	sy
 80062a4:	f3bf 8f4f 	dsb	sy
 80062a8:	e7fe      	b.n	80062a8 <prvTimerTask+0x194>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80062aa:	9903      	ldr	r1, [sp, #12]
 80062ac:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80062ae:	b941      	cbnz	r1, 80062c2 <prvTimerTask+0x1ae>
 80062b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b4:	f383 8811 	msr	BASEPRI, r3
 80062b8:	f3bf 8f6f 	isb	sy
 80062bc:	f3bf 8f4f 	dsb	sy
 80062c0:	e7fe      	b.n	80062c0 <prvTimerTask+0x1ac>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80062c2:	465b      	mov	r3, fp
 80062c4:	465a      	mov	r2, fp
 80062c6:	4459      	add	r1, fp
 80062c8:	4620      	mov	r0, r4
 80062ca:	f7ff fe69 	bl	8005fa0 <prvInsertTimerInActiveList>
 80062ce:	e743      	b.n	8006158 <prvTimerTask+0x44>
 80062d0:	200025d4 	.word	0x200025d4
 80062d4:	200026a4 	.word	0x200026a4
 80062d8:	200025d8 	.word	0x200025d8
 80062dc:	200026f8 	.word	0x200026f8
 80062e0:	e000ed04 	.word	0xe000ed04

080062e4 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 80062e4:	2300      	movs	r3, #0
{
 80062e6:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 80062e8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80062ea:	4b0d      	ldr	r3, [pc, #52]	; (8006320 <prvTaskExitError+0x3c>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	3301      	adds	r3, #1
 80062f0:	d008      	beq.n	8006304 <prvTaskExitError+0x20>
 80062f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f6:	f383 8811 	msr	BASEPRI, r3
 80062fa:	f3bf 8f6f 	isb	sy
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	e7fe      	b.n	8006302 <prvTaskExitError+0x1e>
 8006304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006308:	f383 8811 	msr	BASEPRI, r3
 800630c:	f3bf 8f6f 	isb	sy
 8006310:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006314:	9b01      	ldr	r3, [sp, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d0fc      	beq.n	8006314 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800631a:	b002      	add	sp, #8
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	20000024 	.word	0x20000024

08006324 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006324:	4806      	ldr	r0, [pc, #24]	; (8006340 <prvPortStartFirstTask+0x1c>)
 8006326:	6800      	ldr	r0, [r0, #0]
 8006328:	6800      	ldr	r0, [r0, #0]
 800632a:	f380 8808 	msr	MSP, r0
 800632e:	b662      	cpsie	i
 8006330:	b661      	cpsie	f
 8006332:	f3bf 8f4f 	dsb	sy
 8006336:	f3bf 8f6f 	isb	sy
 800633a:	df00      	svc	0
 800633c:	bf00      	nop
 800633e:	0000      	.short	0x0000
 8006340:	e000ed08 	.word	0xe000ed08

08006344 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006344:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006348:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800634c:	4b05      	ldr	r3, [pc, #20]	; (8006364 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800634e:	f021 0101 	bic.w	r1, r1, #1
 8006352:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006356:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800635a:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800635e:	3840      	subs	r0, #64	; 0x40
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	080062e5 	.word	0x080062e5
	...

08006370 <SVC_Handler>:
	__asm volatile (
 8006370:	4b07      	ldr	r3, [pc, #28]	; (8006390 <pxCurrentTCBConst2>)
 8006372:	6819      	ldr	r1, [r3, #0]
 8006374:	6808      	ldr	r0, [r1, #0]
 8006376:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800637a:	f380 8809 	msr	PSP, r0
 800637e:	f3bf 8f6f 	isb	sy
 8006382:	f04f 0000 	mov.w	r0, #0
 8006386:	f380 8811 	msr	BASEPRI, r0
 800638a:	f04e 0e0d 	orr.w	lr, lr, #13
 800638e:	4770      	bx	lr

08006390 <pxCurrentTCBConst2>:
 8006390:	200020d4 	.word	0x200020d4

08006394 <vPortEnterCritical>:
 8006394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006398:	f383 8811 	msr	BASEPRI, r3
 800639c:	f3bf 8f6f 	isb	sy
 80063a0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80063a4:	4a0a      	ldr	r2, [pc, #40]	; (80063d0 <vPortEnterCritical+0x3c>)
 80063a6:	6813      	ldr	r3, [r2, #0]
 80063a8:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80063aa:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80063ac:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80063ae:	d10d      	bne.n	80063cc <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80063b0:	4b08      	ldr	r3, [pc, #32]	; (80063d4 <vPortEnterCritical+0x40>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80063b8:	d008      	beq.n	80063cc <vPortEnterCritical+0x38>
 80063ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063be:	f383 8811 	msr	BASEPRI, r3
 80063c2:	f3bf 8f6f 	isb	sy
 80063c6:	f3bf 8f4f 	dsb	sy
 80063ca:	e7fe      	b.n	80063ca <vPortEnterCritical+0x36>
	}
}
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop
 80063d0:	20000024 	.word	0x20000024
 80063d4:	e000ed04 	.word	0xe000ed04

080063d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 80063d8:	4a08      	ldr	r2, [pc, #32]	; (80063fc <vPortExitCritical+0x24>)
 80063da:	6813      	ldr	r3, [r2, #0]
 80063dc:	b943      	cbnz	r3, 80063f0 <vPortExitCritical+0x18>
 80063de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e2:	f383 8811 	msr	BASEPRI, r3
 80063e6:	f3bf 8f6f 	isb	sy
 80063ea:	f3bf 8f4f 	dsb	sy
 80063ee:	e7fe      	b.n	80063ee <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80063f0:	3b01      	subs	r3, #1
 80063f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80063f4:	b90b      	cbnz	r3, 80063fa <vPortExitCritical+0x22>
	__asm volatile
 80063f6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80063fa:	4770      	bx	lr
 80063fc:	20000024 	.word	0x20000024

08006400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006400:	f3ef 8009 	mrs	r0, PSP
 8006404:	f3bf 8f6f 	isb	sy
 8006408:	4b0d      	ldr	r3, [pc, #52]	; (8006440 <pxCurrentTCBConst>)
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006410:	6010      	str	r0, [r2, #0]
 8006412:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006416:	f04f 0050 	mov.w	r0, #80	; 0x50
 800641a:	f380 8811 	msr	BASEPRI, r0
 800641e:	f7ff fb7f 	bl	8005b20 <vTaskSwitchContext>
 8006422:	f04f 0000 	mov.w	r0, #0
 8006426:	f380 8811 	msr	BASEPRI, r0
 800642a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800642e:	6819      	ldr	r1, [r3, #0]
 8006430:	6808      	ldr	r0, [r1, #0]
 8006432:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006436:	f380 8809 	msr	PSP, r0
 800643a:	f3bf 8f6f 	isb	sy
 800643e:	4770      	bx	lr

08006440 <pxCurrentTCBConst>:
 8006440:	200020d4 	.word	0x200020d4

08006444 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006444:	b508      	push	{r3, lr}
	__asm volatile
 8006446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644a:	f383 8811 	msr	BASEPRI, r3
 800644e:	f3bf 8f6f 	isb	sy
 8006452:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006456:	f7ff fa3b 	bl	80058d0 <xTaskIncrementTick>
 800645a:	b118      	cbz	r0, 8006464 <xPortSysTickHandler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800645c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006460:	4b02      	ldr	r3, [pc, #8]	; (800646c <xPortSysTickHandler+0x28>)
 8006462:	601a      	str	r2, [r3, #0]
	__asm volatile
 8006464:	2300      	movs	r3, #0
 8006466:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800646a:	bd08      	pop	{r3, pc}
 800646c:	e000ed04 	.word	0xe000ed04

08006470 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006470:	2300      	movs	r3, #0
 8006472:	4a08      	ldr	r2, [pc, #32]	; (8006494 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006474:	4908      	ldr	r1, [pc, #32]	; (8006498 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006476:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006478:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800647a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800647e:	4b07      	ldr	r3, [pc, #28]	; (800649c <vPortSetupTimerInterrupt+0x2c>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	fbb3 f3f1 	udiv	r3, r3, r1
 8006486:	4906      	ldr	r1, [pc, #24]	; (80064a0 <vPortSetupTimerInterrupt+0x30>)
 8006488:	3b01      	subs	r3, #1
 800648a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800648c:	2307      	movs	r3, #7
 800648e:	6013      	str	r3, [r2, #0]
}
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	e000e010 	.word	0xe000e010
 8006498:	e000e018 	.word	0xe000e018
 800649c:	20000018 	.word	0x20000018
 80064a0:	e000e014 	.word	0xe000e014

080064a4 <xPortStartScheduler>:
{
 80064a4:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80064a6:	4b27      	ldr	r3, [pc, #156]	; (8006544 <xPortStartScheduler+0xa0>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064a8:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80064aa:	781a      	ldrb	r2, [r3, #0]
 80064ac:	b2d2      	uxtb	r2, r2
 80064ae:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80064b0:	22ff      	movs	r2, #255	; 0xff
 80064b2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80064b4:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80064b6:	4a24      	ldr	r2, [pc, #144]	; (8006548 <xPortStartScheduler+0xa4>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80064be:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80064c2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80064c6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80064c8:	2207      	movs	r2, #7
 80064ca:	4b20      	ldr	r3, [pc, #128]	; (800654c <xPortStartScheduler+0xa8>)
 80064cc:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064ce:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80064d2:	1e54      	subs	r4, r2, #1
 80064d4:	0600      	lsls	r0, r0, #24
 80064d6:	d40d      	bmi.n	80064f4 <xPortStartScheduler+0x50>
 80064d8:	b101      	cbz	r1, 80064dc <xPortStartScheduler+0x38>
 80064da:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	2a03      	cmp	r2, #3
 80064e0:	d011      	beq.n	8006506 <xPortStartScheduler+0x62>
	__asm volatile
 80064e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e6:	f383 8811 	msr	BASEPRI, r3
 80064ea:	f3bf 8f6f 	isb	sy
 80064ee:	f3bf 8f4f 	dsb	sy
 80064f2:	e7fe      	b.n	80064f2 <xPortStartScheduler+0x4e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80064f4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80064f8:	2101      	movs	r1, #1
 80064fa:	0052      	lsls	r2, r2, #1
 80064fc:	b2d2      	uxtb	r2, r2
 80064fe:	f88d 2003 	strb.w	r2, [sp, #3]
 8006502:	4622      	mov	r2, r4
 8006504:	e7e3      	b.n	80064ce <xPortStartScheduler+0x2a>
	uxCriticalNesting = 0;
 8006506:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006508:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800650a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800650e:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006510:	9b01      	ldr	r3, [sp, #4]
 8006512:	4a0c      	ldr	r2, [pc, #48]	; (8006544 <xPortStartScheduler+0xa0>)
 8006514:	b2db      	uxtb	r3, r3
 8006516:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006518:	4b0d      	ldr	r3, [pc, #52]	; (8006550 <xPortStartScheduler+0xac>)
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8006520:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8006528:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800652a:	f7ff ffa1 	bl	8006470 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800652e:	4b09      	ldr	r3, [pc, #36]	; (8006554 <xPortStartScheduler+0xb0>)
 8006530:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8006532:	f7ff fef7 	bl	8006324 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8006536:	f7ff faf3 	bl	8005b20 <vTaskSwitchContext>
	prvTaskExitError();
 800653a:	f7ff fed3 	bl	80062e4 <prvTaskExitError>
}
 800653e:	4620      	mov	r0, r4
 8006540:	b002      	add	sp, #8
 8006542:	bd10      	pop	{r4, pc}
 8006544:	e000e400 	.word	0xe000e400
 8006548:	20002700 	.word	0x20002700
 800654c:	20002704 	.word	0x20002704
 8006550:	e000ed20 	.word	0xe000ed20
 8006554:	20000024 	.word	0x20000024

08006558 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006558:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800655c:	2b0f      	cmp	r3, #15
 800655e:	d90e      	bls.n	800657e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006560:	4a10      	ldr	r2, [pc, #64]	; (80065a4 <vPortValidateInterruptPriority+0x4c>)
 8006562:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006564:	4a10      	ldr	r2, [pc, #64]	; (80065a8 <vPortValidateInterruptPriority+0x50>)
 8006566:	7812      	ldrb	r2, [r2, #0]
 8006568:	429a      	cmp	r2, r3
 800656a:	d908      	bls.n	800657e <vPortValidateInterruptPriority+0x26>
 800656c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006570:	f383 8811 	msr	BASEPRI, r3
 8006574:	f3bf 8f6f 	isb	sy
 8006578:	f3bf 8f4f 	dsb	sy
 800657c:	e7fe      	b.n	800657c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800657e:	4b0b      	ldr	r3, [pc, #44]	; (80065ac <vPortValidateInterruptPriority+0x54>)
 8006580:	4a0b      	ldr	r2, [pc, #44]	; (80065b0 <vPortValidateInterruptPriority+0x58>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	6812      	ldr	r2, [r2, #0]
 8006586:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800658a:	4293      	cmp	r3, r2
 800658c:	d908      	bls.n	80065a0 <vPortValidateInterruptPriority+0x48>
 800658e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006592:	f383 8811 	msr	BASEPRI, r3
 8006596:	f3bf 8f6f 	isb	sy
 800659a:	f3bf 8f4f 	dsb	sy
 800659e:	e7fe      	b.n	800659e <vPortValidateInterruptPriority+0x46>
	}
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	e000e3f0 	.word	0xe000e3f0
 80065a8:	20002700 	.word	0x20002700
 80065ac:	e000ed0c 	.word	0xe000ed0c
 80065b0:	20002704 	.word	0x20002704

080065b4 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80065b4:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80065b6:	4b0f      	ldr	r3, [pc, #60]	; (80065f4 <prvInsertBlockIntoFreeList+0x40>)
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	4282      	cmp	r2, r0
 80065bc:	d318      	bcc.n	80065f0 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80065be:	685c      	ldr	r4, [r3, #4]
 80065c0:	1919      	adds	r1, r3, r4
 80065c2:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80065c4:	bf01      	itttt	eq
 80065c6:	6841      	ldreq	r1, [r0, #4]
 80065c8:	4618      	moveq	r0, r3
 80065ca:	1909      	addeq	r1, r1, r4
 80065cc:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80065ce:	6844      	ldr	r4, [r0, #4]
 80065d0:	1901      	adds	r1, r0, r4
 80065d2:	428a      	cmp	r2, r1
 80065d4:	d107      	bne.n	80065e6 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80065d6:	4908      	ldr	r1, [pc, #32]	; (80065f8 <prvInsertBlockIntoFreeList+0x44>)
 80065d8:	6809      	ldr	r1, [r1, #0]
 80065da:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80065dc:	bf1f      	itttt	ne
 80065de:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80065e0:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80065e2:	1909      	addne	r1, r1, r4
 80065e4:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80065e6:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80065e8:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80065ea:	bf18      	it	ne
 80065ec:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065ee:	bd10      	pop	{r4, pc}
 80065f0:	4613      	mov	r3, r2
 80065f2:	e7e1      	b.n	80065b8 <prvInsertBlockIntoFreeList+0x4>
 80065f4:	20002f00 	.word	0x20002f00
 80065f8:	20002708 	.word	0x20002708

080065fc <pvPortMalloc>:
{
 80065fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006600:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8006602:	f7ff f957 	bl	80058b4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8006606:	493d      	ldr	r1, [pc, #244]	; (80066fc <pvPortMalloc+0x100>)
 8006608:	4d3d      	ldr	r5, [pc, #244]	; (8006700 <pvPortMalloc+0x104>)
 800660a:	680b      	ldr	r3, [r1, #0]
 800660c:	b9fb      	cbnz	r3, 800664e <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 800660e:	4a3d      	ldr	r2, [pc, #244]	; (8006704 <pvPortMalloc+0x108>)
	xStart.xBlockSize = ( size_t ) 0;
 8006610:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006612:	0756      	lsls	r6, r2, #29
 8006614:	f502 63fd 	add.w	r3, r2, #2024	; 0x7e8
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006618:	bf0f      	iteee	eq
 800661a:	f44f 63fd 	moveq.w	r3, #2024	; 0x7e8
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800661e:	3207      	addne	r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006620:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006624:	1a9b      	subne	r3, r3, r2
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006626:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006628:	4e37      	ldr	r6, [pc, #220]	; (8006708 <pvPortMalloc+0x10c>)
	uxAddress -= xHeapStructSize;
 800662a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800662c:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8006630:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006632:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8006634:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006638:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800663a:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800663c:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006640:	4b32      	ldr	r3, [pc, #200]	; (800670c <pvPortMalloc+0x110>)
 8006642:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006644:	4b32      	ldr	r3, [pc, #200]	; (8006710 <pvPortMalloc+0x114>)
 8006646:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006648:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800664c:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800664e:	682f      	ldr	r7, [r5, #0]
 8006650:	4227      	tst	r7, r4
 8006652:	d14d      	bne.n	80066f0 <pvPortMalloc+0xf4>
			if( xWantedSize > 0 )
 8006654:	2c00      	cmp	r4, #0
 8006656:	d03e      	beq.n	80066d6 <pvPortMalloc+0xda>
				xWantedSize += xHeapStructSize;
 8006658:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800665c:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800665e:	bf1c      	itt	ne
 8006660:	f023 0307 	bicne.w	r3, r3, #7
 8006664:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006666:	2b00      	cmp	r3, #0
 8006668:	d042      	beq.n	80066f0 <pvPortMalloc+0xf4>
 800666a:	4a29      	ldr	r2, [pc, #164]	; (8006710 <pvPortMalloc+0x114>)
 800666c:	6816      	ldr	r6, [r2, #0]
 800666e:	4690      	mov	r8, r2
 8006670:	429e      	cmp	r6, r3
 8006672:	d33d      	bcc.n	80066f0 <pvPortMalloc+0xf4>
				pxBlock = xStart.pxNextFreeBlock;
 8006674:	4a24      	ldr	r2, [pc, #144]	; (8006708 <pvPortMalloc+0x10c>)
 8006676:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006678:	6868      	ldr	r0, [r5, #4]
 800667a:	4298      	cmp	r0, r3
 800667c:	d201      	bcs.n	8006682 <pvPortMalloc+0x86>
 800667e:	682c      	ldr	r4, [r5, #0]
 8006680:	b9a4      	cbnz	r4, 80066ac <pvPortMalloc+0xb0>
				if( pxBlock != pxEnd )
 8006682:	6809      	ldr	r1, [r1, #0]
 8006684:	42a9      	cmp	r1, r5
 8006686:	d033      	beq.n	80066f0 <pvPortMalloc+0xf4>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006688:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800668a:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800668c:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800668e:	1ac2      	subs	r2, r0, r3
 8006690:	2a10      	cmp	r2, #16
 8006692:	d912      	bls.n	80066ba <pvPortMalloc+0xbe>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006694:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006696:	0741      	lsls	r1, r0, #29
 8006698:	d00b      	beq.n	80066b2 <pvPortMalloc+0xb6>
 800669a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669e:	f383 8811 	msr	BASEPRI, r3
 80066a2:	f3bf 8f6f 	isb	sy
 80066a6:	f3bf 8f4f 	dsb	sy
 80066aa:	e7fe      	b.n	80066aa <pvPortMalloc+0xae>
 80066ac:	462a      	mov	r2, r5
 80066ae:	4625      	mov	r5, r4
 80066b0:	e7e2      	b.n	8006678 <pvPortMalloc+0x7c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80066b2:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80066b4:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80066b6:	f7ff ff7d 	bl	80065b4 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80066ba:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80066bc:	4913      	ldr	r1, [pc, #76]	; (800670c <pvPortMalloc+0x110>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80066be:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80066c0:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 80066c2:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80066c4:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80066c6:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80066ca:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80066cc:	bf38      	it	cc
 80066ce:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80066d0:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80066d2:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80066d4:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80066d6:	f7ff f98b 	bl	80059f0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80066da:	0763      	lsls	r3, r4, #29
 80066dc:	d00a      	beq.n	80066f4 <pvPortMalloc+0xf8>
 80066de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	e7fe      	b.n	80066ee <pvPortMalloc+0xf2>
void *pvReturn = NULL;
 80066f0:	2400      	movs	r4, #0
 80066f2:	e7f0      	b.n	80066d6 <pvPortMalloc+0xda>
}
 80066f4:	4620      	mov	r0, r4
 80066f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066fa:	bf00      	nop
 80066fc:	20002708 	.word	0x20002708
 8006700:	20002ef4 	.word	0x20002ef4
 8006704:	2000270c 	.word	0x2000270c
 8006708:	20002f00 	.word	0x20002f00
 800670c:	20002efc 	.word	0x20002efc
 8006710:	20002ef8 	.word	0x20002ef8

08006714 <vPortFree>:
{
 8006714:	b510      	push	{r4, lr}
	if( pv != NULL )
 8006716:	4604      	mov	r4, r0
 8006718:	b370      	cbz	r0, 8006778 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800671a:	4a18      	ldr	r2, [pc, #96]	; (800677c <vPortFree+0x68>)
 800671c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006720:	6812      	ldr	r2, [r2, #0]
 8006722:	4213      	tst	r3, r2
 8006724:	d108      	bne.n	8006738 <vPortFree+0x24>
 8006726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672a:	f383 8811 	msr	BASEPRI, r3
 800672e:	f3bf 8f6f 	isb	sy
 8006732:	f3bf 8f4f 	dsb	sy
 8006736:	e7fe      	b.n	8006736 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006738:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800673c:	b141      	cbz	r1, 8006750 <vPortFree+0x3c>
 800673e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006742:	f383 8811 	msr	BASEPRI, r3
 8006746:	f3bf 8f6f 	isb	sy
 800674a:	f3bf 8f4f 	dsb	sy
 800674e:	e7fe      	b.n	800674e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006750:	ea23 0302 	bic.w	r3, r3, r2
 8006754:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8006758:	f7ff f8ac 	bl	80058b4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800675c:	4a08      	ldr	r2, [pc, #32]	; (8006780 <vPortFree+0x6c>)
 800675e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006762:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006764:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006768:	440b      	add	r3, r1
 800676a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800676c:	f7ff ff22 	bl	80065b4 <prvInsertBlockIntoFreeList>
}
 8006770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8006774:	f7ff b93c 	b.w	80059f0 <xTaskResumeAll>
}
 8006778:	bd10      	pop	{r4, pc}
 800677a:	bf00      	nop
 800677c:	20002ef4 	.word	0x20002ef4
 8006780:	20002ef8 	.word	0x20002ef8

08006784 <_ZdlPvj>:
 8006784:	f000 b800 	b.w	8006788 <_ZdlPv>

08006788 <_ZdlPv>:
 8006788:	f000 b832 	b.w	80067f0 <free>

0800678c <__errno>:
 800678c:	4b01      	ldr	r3, [pc, #4]	; (8006794 <__errno+0x8>)
 800678e:	6818      	ldr	r0, [r3, #0]
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	20000028 	.word	0x20000028

08006798 <__libc_init_array>:
 8006798:	b570      	push	{r4, r5, r6, lr}
 800679a:	2500      	movs	r5, #0
 800679c:	4e0c      	ldr	r6, [pc, #48]	; (80067d0 <__libc_init_array+0x38>)
 800679e:	4c0d      	ldr	r4, [pc, #52]	; (80067d4 <__libc_init_array+0x3c>)
 80067a0:	1ba4      	subs	r4, r4, r6
 80067a2:	10a4      	asrs	r4, r4, #2
 80067a4:	42a5      	cmp	r5, r4
 80067a6:	d109      	bne.n	80067bc <__libc_init_array+0x24>
 80067a8:	f002 f866 	bl	8008878 <_init>
 80067ac:	2500      	movs	r5, #0
 80067ae:	4e0a      	ldr	r6, [pc, #40]	; (80067d8 <__libc_init_array+0x40>)
 80067b0:	4c0a      	ldr	r4, [pc, #40]	; (80067dc <__libc_init_array+0x44>)
 80067b2:	1ba4      	subs	r4, r4, r6
 80067b4:	10a4      	asrs	r4, r4, #2
 80067b6:	42a5      	cmp	r5, r4
 80067b8:	d105      	bne.n	80067c6 <__libc_init_array+0x2e>
 80067ba:	bd70      	pop	{r4, r5, r6, pc}
 80067bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80067c0:	4798      	blx	r3
 80067c2:	3501      	adds	r5, #1
 80067c4:	e7ee      	b.n	80067a4 <__libc_init_array+0xc>
 80067c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80067ca:	4798      	blx	r3
 80067cc:	3501      	adds	r5, #1
 80067ce:	e7f2      	b.n	80067b6 <__libc_init_array+0x1e>
 80067d0:	0800a138 	.word	0x0800a138
 80067d4:	0800a138 	.word	0x0800a138
 80067d8:	0800a138 	.word	0x0800a138
 80067dc:	0800a140 	.word	0x0800a140

080067e0 <malloc>:
 80067e0:	4b02      	ldr	r3, [pc, #8]	; (80067ec <malloc+0xc>)
 80067e2:	4601      	mov	r1, r0
 80067e4:	6818      	ldr	r0, [r3, #0]
 80067e6:	f000 b86b 	b.w	80068c0 <_malloc_r>
 80067ea:	bf00      	nop
 80067ec:	20000028 	.word	0x20000028

080067f0 <free>:
 80067f0:	4b02      	ldr	r3, [pc, #8]	; (80067fc <free+0xc>)
 80067f2:	4601      	mov	r1, r0
 80067f4:	6818      	ldr	r0, [r3, #0]
 80067f6:	f000 b817 	b.w	8006828 <_free_r>
 80067fa:	bf00      	nop
 80067fc:	20000028 	.word	0x20000028

08006800 <memcpy>:
 8006800:	b510      	push	{r4, lr}
 8006802:	1e43      	subs	r3, r0, #1
 8006804:	440a      	add	r2, r1
 8006806:	4291      	cmp	r1, r2
 8006808:	d100      	bne.n	800680c <memcpy+0xc>
 800680a:	bd10      	pop	{r4, pc}
 800680c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006810:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006814:	e7f7      	b.n	8006806 <memcpy+0x6>

08006816 <memset>:
 8006816:	4603      	mov	r3, r0
 8006818:	4402      	add	r2, r0
 800681a:	4293      	cmp	r3, r2
 800681c:	d100      	bne.n	8006820 <memset+0xa>
 800681e:	4770      	bx	lr
 8006820:	f803 1b01 	strb.w	r1, [r3], #1
 8006824:	e7f9      	b.n	800681a <memset+0x4>
	...

08006828 <_free_r>:
 8006828:	b538      	push	{r3, r4, r5, lr}
 800682a:	4605      	mov	r5, r0
 800682c:	2900      	cmp	r1, #0
 800682e:	d043      	beq.n	80068b8 <_free_r+0x90>
 8006830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006834:	1f0c      	subs	r4, r1, #4
 8006836:	2b00      	cmp	r3, #0
 8006838:	bfb8      	it	lt
 800683a:	18e4      	addlt	r4, r4, r3
 800683c:	f001 fb78 	bl	8007f30 <__malloc_lock>
 8006840:	4a1e      	ldr	r2, [pc, #120]	; (80068bc <_free_r+0x94>)
 8006842:	6813      	ldr	r3, [r2, #0]
 8006844:	4610      	mov	r0, r2
 8006846:	b933      	cbnz	r3, 8006856 <_free_r+0x2e>
 8006848:	6063      	str	r3, [r4, #4]
 800684a:	6014      	str	r4, [r2, #0]
 800684c:	4628      	mov	r0, r5
 800684e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006852:	f001 bb6e 	b.w	8007f32 <__malloc_unlock>
 8006856:	42a3      	cmp	r3, r4
 8006858:	d90b      	bls.n	8006872 <_free_r+0x4a>
 800685a:	6821      	ldr	r1, [r4, #0]
 800685c:	1862      	adds	r2, r4, r1
 800685e:	4293      	cmp	r3, r2
 8006860:	bf01      	itttt	eq
 8006862:	681a      	ldreq	r2, [r3, #0]
 8006864:	685b      	ldreq	r3, [r3, #4]
 8006866:	1852      	addeq	r2, r2, r1
 8006868:	6022      	streq	r2, [r4, #0]
 800686a:	6063      	str	r3, [r4, #4]
 800686c:	6004      	str	r4, [r0, #0]
 800686e:	e7ed      	b.n	800684c <_free_r+0x24>
 8006870:	4613      	mov	r3, r2
 8006872:	685a      	ldr	r2, [r3, #4]
 8006874:	b10a      	cbz	r2, 800687a <_free_r+0x52>
 8006876:	42a2      	cmp	r2, r4
 8006878:	d9fa      	bls.n	8006870 <_free_r+0x48>
 800687a:	6819      	ldr	r1, [r3, #0]
 800687c:	1858      	adds	r0, r3, r1
 800687e:	42a0      	cmp	r0, r4
 8006880:	d10b      	bne.n	800689a <_free_r+0x72>
 8006882:	6820      	ldr	r0, [r4, #0]
 8006884:	4401      	add	r1, r0
 8006886:	1858      	adds	r0, r3, r1
 8006888:	4282      	cmp	r2, r0
 800688a:	6019      	str	r1, [r3, #0]
 800688c:	d1de      	bne.n	800684c <_free_r+0x24>
 800688e:	6810      	ldr	r0, [r2, #0]
 8006890:	6852      	ldr	r2, [r2, #4]
 8006892:	4401      	add	r1, r0
 8006894:	6019      	str	r1, [r3, #0]
 8006896:	605a      	str	r2, [r3, #4]
 8006898:	e7d8      	b.n	800684c <_free_r+0x24>
 800689a:	d902      	bls.n	80068a2 <_free_r+0x7a>
 800689c:	230c      	movs	r3, #12
 800689e:	602b      	str	r3, [r5, #0]
 80068a0:	e7d4      	b.n	800684c <_free_r+0x24>
 80068a2:	6820      	ldr	r0, [r4, #0]
 80068a4:	1821      	adds	r1, r4, r0
 80068a6:	428a      	cmp	r2, r1
 80068a8:	bf01      	itttt	eq
 80068aa:	6811      	ldreq	r1, [r2, #0]
 80068ac:	6852      	ldreq	r2, [r2, #4]
 80068ae:	1809      	addeq	r1, r1, r0
 80068b0:	6021      	streq	r1, [r4, #0]
 80068b2:	6062      	str	r2, [r4, #4]
 80068b4:	605c      	str	r4, [r3, #4]
 80068b6:	e7c9      	b.n	800684c <_free_r+0x24>
 80068b8:	bd38      	pop	{r3, r4, r5, pc}
 80068ba:	bf00      	nop
 80068bc:	20002f08 	.word	0x20002f08

080068c0 <_malloc_r>:
 80068c0:	b570      	push	{r4, r5, r6, lr}
 80068c2:	1ccd      	adds	r5, r1, #3
 80068c4:	f025 0503 	bic.w	r5, r5, #3
 80068c8:	3508      	adds	r5, #8
 80068ca:	2d0c      	cmp	r5, #12
 80068cc:	bf38      	it	cc
 80068ce:	250c      	movcc	r5, #12
 80068d0:	2d00      	cmp	r5, #0
 80068d2:	4606      	mov	r6, r0
 80068d4:	db01      	blt.n	80068da <_malloc_r+0x1a>
 80068d6:	42a9      	cmp	r1, r5
 80068d8:	d903      	bls.n	80068e2 <_malloc_r+0x22>
 80068da:	230c      	movs	r3, #12
 80068dc:	6033      	str	r3, [r6, #0]
 80068de:	2000      	movs	r0, #0
 80068e0:	bd70      	pop	{r4, r5, r6, pc}
 80068e2:	f001 fb25 	bl	8007f30 <__malloc_lock>
 80068e6:	4a21      	ldr	r2, [pc, #132]	; (800696c <_malloc_r+0xac>)
 80068e8:	6814      	ldr	r4, [r2, #0]
 80068ea:	4621      	mov	r1, r4
 80068ec:	b991      	cbnz	r1, 8006914 <_malloc_r+0x54>
 80068ee:	4c20      	ldr	r4, [pc, #128]	; (8006970 <_malloc_r+0xb0>)
 80068f0:	6823      	ldr	r3, [r4, #0]
 80068f2:	b91b      	cbnz	r3, 80068fc <_malloc_r+0x3c>
 80068f4:	4630      	mov	r0, r6
 80068f6:	f000 fc8d 	bl	8007214 <_sbrk_r>
 80068fa:	6020      	str	r0, [r4, #0]
 80068fc:	4629      	mov	r1, r5
 80068fe:	4630      	mov	r0, r6
 8006900:	f000 fc88 	bl	8007214 <_sbrk_r>
 8006904:	1c43      	adds	r3, r0, #1
 8006906:	d124      	bne.n	8006952 <_malloc_r+0x92>
 8006908:	230c      	movs	r3, #12
 800690a:	4630      	mov	r0, r6
 800690c:	6033      	str	r3, [r6, #0]
 800690e:	f001 fb10 	bl	8007f32 <__malloc_unlock>
 8006912:	e7e4      	b.n	80068de <_malloc_r+0x1e>
 8006914:	680b      	ldr	r3, [r1, #0]
 8006916:	1b5b      	subs	r3, r3, r5
 8006918:	d418      	bmi.n	800694c <_malloc_r+0x8c>
 800691a:	2b0b      	cmp	r3, #11
 800691c:	d90f      	bls.n	800693e <_malloc_r+0x7e>
 800691e:	600b      	str	r3, [r1, #0]
 8006920:	18cc      	adds	r4, r1, r3
 8006922:	50cd      	str	r5, [r1, r3]
 8006924:	4630      	mov	r0, r6
 8006926:	f001 fb04 	bl	8007f32 <__malloc_unlock>
 800692a:	f104 000b 	add.w	r0, r4, #11
 800692e:	1d23      	adds	r3, r4, #4
 8006930:	f020 0007 	bic.w	r0, r0, #7
 8006934:	1ac3      	subs	r3, r0, r3
 8006936:	d0d3      	beq.n	80068e0 <_malloc_r+0x20>
 8006938:	425a      	negs	r2, r3
 800693a:	50e2      	str	r2, [r4, r3]
 800693c:	e7d0      	b.n	80068e0 <_malloc_r+0x20>
 800693e:	684b      	ldr	r3, [r1, #4]
 8006940:	428c      	cmp	r4, r1
 8006942:	bf16      	itet	ne
 8006944:	6063      	strne	r3, [r4, #4]
 8006946:	6013      	streq	r3, [r2, #0]
 8006948:	460c      	movne	r4, r1
 800694a:	e7eb      	b.n	8006924 <_malloc_r+0x64>
 800694c:	460c      	mov	r4, r1
 800694e:	6849      	ldr	r1, [r1, #4]
 8006950:	e7cc      	b.n	80068ec <_malloc_r+0x2c>
 8006952:	1cc4      	adds	r4, r0, #3
 8006954:	f024 0403 	bic.w	r4, r4, #3
 8006958:	42a0      	cmp	r0, r4
 800695a:	d005      	beq.n	8006968 <_malloc_r+0xa8>
 800695c:	1a21      	subs	r1, r4, r0
 800695e:	4630      	mov	r0, r6
 8006960:	f000 fc58 	bl	8007214 <_sbrk_r>
 8006964:	3001      	adds	r0, #1
 8006966:	d0cf      	beq.n	8006908 <_malloc_r+0x48>
 8006968:	6025      	str	r5, [r4, #0]
 800696a:	e7db      	b.n	8006924 <_malloc_r+0x64>
 800696c:	20002f08 	.word	0x20002f08
 8006970:	20002f0c 	.word	0x20002f0c

08006974 <__cvt>:
 8006974:	2b00      	cmp	r3, #0
 8006976:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800697a:	461e      	mov	r6, r3
 800697c:	bfbb      	ittet	lt
 800697e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006982:	461e      	movlt	r6, r3
 8006984:	2300      	movge	r3, #0
 8006986:	232d      	movlt	r3, #45	; 0x2d
 8006988:	b088      	sub	sp, #32
 800698a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800698c:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8006990:	f027 0720 	bic.w	r7, r7, #32
 8006994:	2f46      	cmp	r7, #70	; 0x46
 8006996:	4614      	mov	r4, r2
 8006998:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800699a:	700b      	strb	r3, [r1, #0]
 800699c:	d004      	beq.n	80069a8 <__cvt+0x34>
 800699e:	2f45      	cmp	r7, #69	; 0x45
 80069a0:	d100      	bne.n	80069a4 <__cvt+0x30>
 80069a2:	3501      	adds	r5, #1
 80069a4:	2302      	movs	r3, #2
 80069a6:	e000      	b.n	80069aa <__cvt+0x36>
 80069a8:	2303      	movs	r3, #3
 80069aa:	aa07      	add	r2, sp, #28
 80069ac:	9204      	str	r2, [sp, #16]
 80069ae:	aa06      	add	r2, sp, #24
 80069b0:	e9cd a202 	strd	sl, r2, [sp, #8]
 80069b4:	e9cd 3500 	strd	r3, r5, [sp]
 80069b8:	4622      	mov	r2, r4
 80069ba:	4633      	mov	r3, r6
 80069bc:	f000 fce8 	bl	8007390 <_dtoa_r>
 80069c0:	2f47      	cmp	r7, #71	; 0x47
 80069c2:	4680      	mov	r8, r0
 80069c4:	d102      	bne.n	80069cc <__cvt+0x58>
 80069c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80069c8:	07db      	lsls	r3, r3, #31
 80069ca:	d526      	bpl.n	8006a1a <__cvt+0xa6>
 80069cc:	2f46      	cmp	r7, #70	; 0x46
 80069ce:	eb08 0905 	add.w	r9, r8, r5
 80069d2:	d111      	bne.n	80069f8 <__cvt+0x84>
 80069d4:	f898 3000 	ldrb.w	r3, [r8]
 80069d8:	2b30      	cmp	r3, #48	; 0x30
 80069da:	d10a      	bne.n	80069f2 <__cvt+0x7e>
 80069dc:	2200      	movs	r2, #0
 80069de:	2300      	movs	r3, #0
 80069e0:	4620      	mov	r0, r4
 80069e2:	4631      	mov	r1, r6
 80069e4:	f7f9 ffe0 	bl	80009a8 <__aeabi_dcmpeq>
 80069e8:	b918      	cbnz	r0, 80069f2 <__cvt+0x7e>
 80069ea:	f1c5 0501 	rsb	r5, r5, #1
 80069ee:	f8ca 5000 	str.w	r5, [sl]
 80069f2:	f8da 3000 	ldr.w	r3, [sl]
 80069f6:	4499      	add	r9, r3
 80069f8:	2200      	movs	r2, #0
 80069fa:	2300      	movs	r3, #0
 80069fc:	4620      	mov	r0, r4
 80069fe:	4631      	mov	r1, r6
 8006a00:	f7f9 ffd2 	bl	80009a8 <__aeabi_dcmpeq>
 8006a04:	b938      	cbnz	r0, 8006a16 <__cvt+0xa2>
 8006a06:	2230      	movs	r2, #48	; 0x30
 8006a08:	9b07      	ldr	r3, [sp, #28]
 8006a0a:	454b      	cmp	r3, r9
 8006a0c:	d205      	bcs.n	8006a1a <__cvt+0xa6>
 8006a0e:	1c59      	adds	r1, r3, #1
 8006a10:	9107      	str	r1, [sp, #28]
 8006a12:	701a      	strb	r2, [r3, #0]
 8006a14:	e7f8      	b.n	8006a08 <__cvt+0x94>
 8006a16:	f8cd 901c 	str.w	r9, [sp, #28]
 8006a1a:	4640      	mov	r0, r8
 8006a1c:	9b07      	ldr	r3, [sp, #28]
 8006a1e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006a20:	eba3 0308 	sub.w	r3, r3, r8
 8006a24:	6013      	str	r3, [r2, #0]
 8006a26:	b008      	add	sp, #32
 8006a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006a2c <__exponent>:
 8006a2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a2e:	2900      	cmp	r1, #0
 8006a30:	bfb4      	ite	lt
 8006a32:	232d      	movlt	r3, #45	; 0x2d
 8006a34:	232b      	movge	r3, #43	; 0x2b
 8006a36:	4604      	mov	r4, r0
 8006a38:	bfb8      	it	lt
 8006a3a:	4249      	neglt	r1, r1
 8006a3c:	2909      	cmp	r1, #9
 8006a3e:	f804 2b02 	strb.w	r2, [r4], #2
 8006a42:	7043      	strb	r3, [r0, #1]
 8006a44:	dd21      	ble.n	8006a8a <__exponent+0x5e>
 8006a46:	f10d 0307 	add.w	r3, sp, #7
 8006a4a:	461f      	mov	r7, r3
 8006a4c:	260a      	movs	r6, #10
 8006a4e:	fb91 f5f6 	sdiv	r5, r1, r6
 8006a52:	fb06 1115 	mls	r1, r6, r5, r1
 8006a56:	2d09      	cmp	r5, #9
 8006a58:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8006a5c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006a60:	f103 32ff 	add.w	r2, r3, #4294967295
 8006a64:	4629      	mov	r1, r5
 8006a66:	dc09      	bgt.n	8006a7c <__exponent+0x50>
 8006a68:	3130      	adds	r1, #48	; 0x30
 8006a6a:	3b02      	subs	r3, #2
 8006a6c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006a70:	42bb      	cmp	r3, r7
 8006a72:	4622      	mov	r2, r4
 8006a74:	d304      	bcc.n	8006a80 <__exponent+0x54>
 8006a76:	1a10      	subs	r0, r2, r0
 8006a78:	b003      	add	sp, #12
 8006a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	e7e6      	b.n	8006a4e <__exponent+0x22>
 8006a80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a84:	f804 2b01 	strb.w	r2, [r4], #1
 8006a88:	e7f2      	b.n	8006a70 <__exponent+0x44>
 8006a8a:	2330      	movs	r3, #48	; 0x30
 8006a8c:	4419      	add	r1, r3
 8006a8e:	7083      	strb	r3, [r0, #2]
 8006a90:	1d02      	adds	r2, r0, #4
 8006a92:	70c1      	strb	r1, [r0, #3]
 8006a94:	e7ef      	b.n	8006a76 <__exponent+0x4a>
	...

08006a98 <_printf_float>:
 8006a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a9c:	b091      	sub	sp, #68	; 0x44
 8006a9e:	460c      	mov	r4, r1
 8006aa0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8006aa2:	4693      	mov	fp, r2
 8006aa4:	461e      	mov	r6, r3
 8006aa6:	4605      	mov	r5, r0
 8006aa8:	f001 fa26 	bl	8007ef8 <_localeconv_r>
 8006aac:	6803      	ldr	r3, [r0, #0]
 8006aae:	4618      	mov	r0, r3
 8006ab0:	9309      	str	r3, [sp, #36]	; 0x24
 8006ab2:	f7f9 fb4d 	bl	8000150 <strlen>
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	930e      	str	r3, [sp, #56]	; 0x38
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	900a      	str	r0, [sp, #40]	; 0x28
 8006abe:	3307      	adds	r3, #7
 8006ac0:	f023 0307 	bic.w	r3, r3, #7
 8006ac4:	f103 0208 	add.w	r2, r3, #8
 8006ac8:	f894 8018 	ldrb.w	r8, [r4, #24]
 8006acc:	f8d4 a000 	ldr.w	sl, [r4]
 8006ad0:	603a      	str	r2, [r7, #0]
 8006ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006ada:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8006ade:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006ae2:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ae8:	4ba6      	ldr	r3, [pc, #664]	; (8006d84 <_printf_float+0x2ec>)
 8006aea:	4638      	mov	r0, r7
 8006aec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006aee:	f7f9 ff8d 	bl	8000a0c <__aeabi_dcmpun>
 8006af2:	bb68      	cbnz	r0, 8006b50 <_printf_float+0xb8>
 8006af4:	f04f 32ff 	mov.w	r2, #4294967295
 8006af8:	4ba2      	ldr	r3, [pc, #648]	; (8006d84 <_printf_float+0x2ec>)
 8006afa:	4638      	mov	r0, r7
 8006afc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006afe:	f7f9 ff67 	bl	80009d0 <__aeabi_dcmple>
 8006b02:	bb28      	cbnz	r0, 8006b50 <_printf_float+0xb8>
 8006b04:	2200      	movs	r2, #0
 8006b06:	2300      	movs	r3, #0
 8006b08:	4638      	mov	r0, r7
 8006b0a:	4649      	mov	r1, r9
 8006b0c:	f7f9 ff56 	bl	80009bc <__aeabi_dcmplt>
 8006b10:	b110      	cbz	r0, 8006b18 <_printf_float+0x80>
 8006b12:	232d      	movs	r3, #45	; 0x2d
 8006b14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b18:	4f9b      	ldr	r7, [pc, #620]	; (8006d88 <_printf_float+0x2f0>)
 8006b1a:	4b9c      	ldr	r3, [pc, #624]	; (8006d8c <_printf_float+0x2f4>)
 8006b1c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006b20:	bf98      	it	ls
 8006b22:	461f      	movls	r7, r3
 8006b24:	2303      	movs	r3, #3
 8006b26:	f04f 0900 	mov.w	r9, #0
 8006b2a:	6123      	str	r3, [r4, #16]
 8006b2c:	f02a 0304 	bic.w	r3, sl, #4
 8006b30:	6023      	str	r3, [r4, #0]
 8006b32:	9600      	str	r6, [sp, #0]
 8006b34:	465b      	mov	r3, fp
 8006b36:	aa0f      	add	r2, sp, #60	; 0x3c
 8006b38:	4621      	mov	r1, r4
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	f000 f9e2 	bl	8006f04 <_printf_common>
 8006b40:	3001      	adds	r0, #1
 8006b42:	f040 8090 	bne.w	8006c66 <_printf_float+0x1ce>
 8006b46:	f04f 30ff 	mov.w	r0, #4294967295
 8006b4a:	b011      	add	sp, #68	; 0x44
 8006b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b50:	463a      	mov	r2, r7
 8006b52:	464b      	mov	r3, r9
 8006b54:	4638      	mov	r0, r7
 8006b56:	4649      	mov	r1, r9
 8006b58:	f7f9 ff58 	bl	8000a0c <__aeabi_dcmpun>
 8006b5c:	b110      	cbz	r0, 8006b64 <_printf_float+0xcc>
 8006b5e:	4f8c      	ldr	r7, [pc, #560]	; (8006d90 <_printf_float+0x2f8>)
 8006b60:	4b8c      	ldr	r3, [pc, #560]	; (8006d94 <_printf_float+0x2fc>)
 8006b62:	e7db      	b.n	8006b1c <_printf_float+0x84>
 8006b64:	6863      	ldr	r3, [r4, #4]
 8006b66:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8006b6a:	1c59      	adds	r1, r3, #1
 8006b6c:	a80d      	add	r0, sp, #52	; 0x34
 8006b6e:	a90e      	add	r1, sp, #56	; 0x38
 8006b70:	d140      	bne.n	8006bf4 <_printf_float+0x15c>
 8006b72:	2306      	movs	r3, #6
 8006b74:	6063      	str	r3, [r4, #4]
 8006b76:	f04f 0c00 	mov.w	ip, #0
 8006b7a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8006b7e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8006b82:	6863      	ldr	r3, [r4, #4]
 8006b84:	6022      	str	r2, [r4, #0]
 8006b86:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8006b8a:	9300      	str	r3, [sp, #0]
 8006b8c:	463a      	mov	r2, r7
 8006b8e:	464b      	mov	r3, r9
 8006b90:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8006b94:	4628      	mov	r0, r5
 8006b96:	f7ff feed 	bl	8006974 <__cvt>
 8006b9a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8006b9e:	2b47      	cmp	r3, #71	; 0x47
 8006ba0:	4607      	mov	r7, r0
 8006ba2:	d109      	bne.n	8006bb8 <_printf_float+0x120>
 8006ba4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ba6:	1cd8      	adds	r0, r3, #3
 8006ba8:	db02      	blt.n	8006bb0 <_printf_float+0x118>
 8006baa:	6862      	ldr	r2, [r4, #4]
 8006bac:	4293      	cmp	r3, r2
 8006bae:	dd47      	ble.n	8006c40 <_printf_float+0x1a8>
 8006bb0:	f1a8 0802 	sub.w	r8, r8, #2
 8006bb4:	fa5f f888 	uxtb.w	r8, r8
 8006bb8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8006bbc:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006bbe:	d824      	bhi.n	8006c0a <_printf_float+0x172>
 8006bc0:	3901      	subs	r1, #1
 8006bc2:	4642      	mov	r2, r8
 8006bc4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006bc8:	910d      	str	r1, [sp, #52]	; 0x34
 8006bca:	f7ff ff2f 	bl	8006a2c <__exponent>
 8006bce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006bd0:	4681      	mov	r9, r0
 8006bd2:	1813      	adds	r3, r2, r0
 8006bd4:	2a01      	cmp	r2, #1
 8006bd6:	6123      	str	r3, [r4, #16]
 8006bd8:	dc02      	bgt.n	8006be0 <_printf_float+0x148>
 8006bda:	6822      	ldr	r2, [r4, #0]
 8006bdc:	07d1      	lsls	r1, r2, #31
 8006bde:	d501      	bpl.n	8006be4 <_printf_float+0x14c>
 8006be0:	3301      	adds	r3, #1
 8006be2:	6123      	str	r3, [r4, #16]
 8006be4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d0a2      	beq.n	8006b32 <_printf_float+0x9a>
 8006bec:	232d      	movs	r3, #45	; 0x2d
 8006bee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bf2:	e79e      	b.n	8006b32 <_printf_float+0x9a>
 8006bf4:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8006bf8:	f000 816e 	beq.w	8006ed8 <_printf_float+0x440>
 8006bfc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006c00:	d1b9      	bne.n	8006b76 <_printf_float+0xde>
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1b7      	bne.n	8006b76 <_printf_float+0xde>
 8006c06:	2301      	movs	r3, #1
 8006c08:	e7b4      	b.n	8006b74 <_printf_float+0xdc>
 8006c0a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8006c0e:	d119      	bne.n	8006c44 <_printf_float+0x1ac>
 8006c10:	2900      	cmp	r1, #0
 8006c12:	6863      	ldr	r3, [r4, #4]
 8006c14:	dd0c      	ble.n	8006c30 <_printf_float+0x198>
 8006c16:	6121      	str	r1, [r4, #16]
 8006c18:	b913      	cbnz	r3, 8006c20 <_printf_float+0x188>
 8006c1a:	6822      	ldr	r2, [r4, #0]
 8006c1c:	07d2      	lsls	r2, r2, #31
 8006c1e:	d502      	bpl.n	8006c26 <_printf_float+0x18e>
 8006c20:	3301      	adds	r3, #1
 8006c22:	440b      	add	r3, r1
 8006c24:	6123      	str	r3, [r4, #16]
 8006c26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c28:	f04f 0900 	mov.w	r9, #0
 8006c2c:	65a3      	str	r3, [r4, #88]	; 0x58
 8006c2e:	e7d9      	b.n	8006be4 <_printf_float+0x14c>
 8006c30:	b913      	cbnz	r3, 8006c38 <_printf_float+0x1a0>
 8006c32:	6822      	ldr	r2, [r4, #0]
 8006c34:	07d0      	lsls	r0, r2, #31
 8006c36:	d501      	bpl.n	8006c3c <_printf_float+0x1a4>
 8006c38:	3302      	adds	r3, #2
 8006c3a:	e7f3      	b.n	8006c24 <_printf_float+0x18c>
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e7f1      	b.n	8006c24 <_printf_float+0x18c>
 8006c40:	f04f 0867 	mov.w	r8, #103	; 0x67
 8006c44:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	db05      	blt.n	8006c58 <_printf_float+0x1c0>
 8006c4c:	6822      	ldr	r2, [r4, #0]
 8006c4e:	6123      	str	r3, [r4, #16]
 8006c50:	07d1      	lsls	r1, r2, #31
 8006c52:	d5e8      	bpl.n	8006c26 <_printf_float+0x18e>
 8006c54:	3301      	adds	r3, #1
 8006c56:	e7e5      	b.n	8006c24 <_printf_float+0x18c>
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	bfcc      	ite	gt
 8006c5c:	2301      	movgt	r3, #1
 8006c5e:	f1c3 0302 	rsble	r3, r3, #2
 8006c62:	4413      	add	r3, r2
 8006c64:	e7de      	b.n	8006c24 <_printf_float+0x18c>
 8006c66:	6823      	ldr	r3, [r4, #0]
 8006c68:	055a      	lsls	r2, r3, #21
 8006c6a:	d407      	bmi.n	8006c7c <_printf_float+0x1e4>
 8006c6c:	6923      	ldr	r3, [r4, #16]
 8006c6e:	463a      	mov	r2, r7
 8006c70:	4659      	mov	r1, fp
 8006c72:	4628      	mov	r0, r5
 8006c74:	47b0      	blx	r6
 8006c76:	3001      	adds	r0, #1
 8006c78:	d129      	bne.n	8006cce <_printf_float+0x236>
 8006c7a:	e764      	b.n	8006b46 <_printf_float+0xae>
 8006c7c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8006c80:	f240 80d7 	bls.w	8006e32 <_printf_float+0x39a>
 8006c84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c88:	2200      	movs	r2, #0
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	f7f9 fe8c 	bl	80009a8 <__aeabi_dcmpeq>
 8006c90:	b388      	cbz	r0, 8006cf6 <_printf_float+0x25e>
 8006c92:	2301      	movs	r3, #1
 8006c94:	4a40      	ldr	r2, [pc, #256]	; (8006d98 <_printf_float+0x300>)
 8006c96:	4659      	mov	r1, fp
 8006c98:	4628      	mov	r0, r5
 8006c9a:	47b0      	blx	r6
 8006c9c:	3001      	adds	r0, #1
 8006c9e:	f43f af52 	beq.w	8006b46 <_printf_float+0xae>
 8006ca2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	db02      	blt.n	8006cb0 <_printf_float+0x218>
 8006caa:	6823      	ldr	r3, [r4, #0]
 8006cac:	07d8      	lsls	r0, r3, #31
 8006cae:	d50e      	bpl.n	8006cce <_printf_float+0x236>
 8006cb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006cb4:	4659      	mov	r1, fp
 8006cb6:	4628      	mov	r0, r5
 8006cb8:	47b0      	blx	r6
 8006cba:	3001      	adds	r0, #1
 8006cbc:	f43f af43 	beq.w	8006b46 <_printf_float+0xae>
 8006cc0:	2700      	movs	r7, #0
 8006cc2:	f104 081a 	add.w	r8, r4, #26
 8006cc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006cc8:	3b01      	subs	r3, #1
 8006cca:	42bb      	cmp	r3, r7
 8006ccc:	dc09      	bgt.n	8006ce2 <_printf_float+0x24a>
 8006cce:	6823      	ldr	r3, [r4, #0]
 8006cd0:	079f      	lsls	r7, r3, #30
 8006cd2:	f100 80fd 	bmi.w	8006ed0 <_printf_float+0x438>
 8006cd6:	68e0      	ldr	r0, [r4, #12]
 8006cd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006cda:	4298      	cmp	r0, r3
 8006cdc:	bfb8      	it	lt
 8006cde:	4618      	movlt	r0, r3
 8006ce0:	e733      	b.n	8006b4a <_printf_float+0xb2>
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	4642      	mov	r2, r8
 8006ce6:	4659      	mov	r1, fp
 8006ce8:	4628      	mov	r0, r5
 8006cea:	47b0      	blx	r6
 8006cec:	3001      	adds	r0, #1
 8006cee:	f43f af2a 	beq.w	8006b46 <_printf_float+0xae>
 8006cf2:	3701      	adds	r7, #1
 8006cf4:	e7e7      	b.n	8006cc6 <_printf_float+0x22e>
 8006cf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	dc2b      	bgt.n	8006d54 <_printf_float+0x2bc>
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	4a26      	ldr	r2, [pc, #152]	; (8006d98 <_printf_float+0x300>)
 8006d00:	4659      	mov	r1, fp
 8006d02:	4628      	mov	r0, r5
 8006d04:	47b0      	blx	r6
 8006d06:	3001      	adds	r0, #1
 8006d08:	f43f af1d 	beq.w	8006b46 <_printf_float+0xae>
 8006d0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d0e:	b923      	cbnz	r3, 8006d1a <_printf_float+0x282>
 8006d10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d12:	b913      	cbnz	r3, 8006d1a <_printf_float+0x282>
 8006d14:	6823      	ldr	r3, [r4, #0]
 8006d16:	07d9      	lsls	r1, r3, #31
 8006d18:	d5d9      	bpl.n	8006cce <_printf_float+0x236>
 8006d1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d1e:	4659      	mov	r1, fp
 8006d20:	4628      	mov	r0, r5
 8006d22:	47b0      	blx	r6
 8006d24:	3001      	adds	r0, #1
 8006d26:	f43f af0e 	beq.w	8006b46 <_printf_float+0xae>
 8006d2a:	f04f 0800 	mov.w	r8, #0
 8006d2e:	f104 091a 	add.w	r9, r4, #26
 8006d32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d34:	425b      	negs	r3, r3
 8006d36:	4543      	cmp	r3, r8
 8006d38:	dc01      	bgt.n	8006d3e <_printf_float+0x2a6>
 8006d3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d3c:	e797      	b.n	8006c6e <_printf_float+0x1d6>
 8006d3e:	2301      	movs	r3, #1
 8006d40:	464a      	mov	r2, r9
 8006d42:	4659      	mov	r1, fp
 8006d44:	4628      	mov	r0, r5
 8006d46:	47b0      	blx	r6
 8006d48:	3001      	adds	r0, #1
 8006d4a:	f43f aefc 	beq.w	8006b46 <_printf_float+0xae>
 8006d4e:	f108 0801 	add.w	r8, r8, #1
 8006d52:	e7ee      	b.n	8006d32 <_printf_float+0x29a>
 8006d54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	bfa8      	it	ge
 8006d5c:	461a      	movge	r2, r3
 8006d5e:	2a00      	cmp	r2, #0
 8006d60:	4690      	mov	r8, r2
 8006d62:	dd07      	ble.n	8006d74 <_printf_float+0x2dc>
 8006d64:	4613      	mov	r3, r2
 8006d66:	4659      	mov	r1, fp
 8006d68:	463a      	mov	r2, r7
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	47b0      	blx	r6
 8006d6e:	3001      	adds	r0, #1
 8006d70:	f43f aee9 	beq.w	8006b46 <_printf_float+0xae>
 8006d74:	f104 031a 	add.w	r3, r4, #26
 8006d78:	f04f 0a00 	mov.w	sl, #0
 8006d7c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8006d80:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d82:	e015      	b.n	8006db0 <_printf_float+0x318>
 8006d84:	7fefffff 	.word	0x7fefffff
 8006d88:	08009ee2 	.word	0x08009ee2
 8006d8c:	08009ede 	.word	0x08009ede
 8006d90:	08009eea 	.word	0x08009eea
 8006d94:	08009ee6 	.word	0x08009ee6
 8006d98:	08009eee 	.word	0x08009eee
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006da0:	4659      	mov	r1, fp
 8006da2:	4628      	mov	r0, r5
 8006da4:	47b0      	blx	r6
 8006da6:	3001      	adds	r0, #1
 8006da8:	f43f aecd 	beq.w	8006b46 <_printf_float+0xae>
 8006dac:	f10a 0a01 	add.w	sl, sl, #1
 8006db0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8006db4:	eba9 0308 	sub.w	r3, r9, r8
 8006db8:	4553      	cmp	r3, sl
 8006dba:	dcef      	bgt.n	8006d9c <_printf_float+0x304>
 8006dbc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	444f      	add	r7, r9
 8006dc4:	db14      	blt.n	8006df0 <_printf_float+0x358>
 8006dc6:	6823      	ldr	r3, [r4, #0]
 8006dc8:	07da      	lsls	r2, r3, #31
 8006dca:	d411      	bmi.n	8006df0 <_printf_float+0x358>
 8006dcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006dce:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006dd0:	eba3 0209 	sub.w	r2, r3, r9
 8006dd4:	eba3 0901 	sub.w	r9, r3, r1
 8006dd8:	4591      	cmp	r9, r2
 8006dda:	bfa8      	it	ge
 8006ddc:	4691      	movge	r9, r2
 8006dde:	f1b9 0f00 	cmp.w	r9, #0
 8006de2:	dc0d      	bgt.n	8006e00 <_printf_float+0x368>
 8006de4:	2700      	movs	r7, #0
 8006de6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006dea:	f104 081a 	add.w	r8, r4, #26
 8006dee:	e018      	b.n	8006e22 <_printf_float+0x38a>
 8006df0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006df4:	4659      	mov	r1, fp
 8006df6:	4628      	mov	r0, r5
 8006df8:	47b0      	blx	r6
 8006dfa:	3001      	adds	r0, #1
 8006dfc:	d1e6      	bne.n	8006dcc <_printf_float+0x334>
 8006dfe:	e6a2      	b.n	8006b46 <_printf_float+0xae>
 8006e00:	464b      	mov	r3, r9
 8006e02:	463a      	mov	r2, r7
 8006e04:	4659      	mov	r1, fp
 8006e06:	4628      	mov	r0, r5
 8006e08:	47b0      	blx	r6
 8006e0a:	3001      	adds	r0, #1
 8006e0c:	d1ea      	bne.n	8006de4 <_printf_float+0x34c>
 8006e0e:	e69a      	b.n	8006b46 <_printf_float+0xae>
 8006e10:	2301      	movs	r3, #1
 8006e12:	4642      	mov	r2, r8
 8006e14:	4659      	mov	r1, fp
 8006e16:	4628      	mov	r0, r5
 8006e18:	47b0      	blx	r6
 8006e1a:	3001      	adds	r0, #1
 8006e1c:	f43f ae93 	beq.w	8006b46 <_printf_float+0xae>
 8006e20:	3701      	adds	r7, #1
 8006e22:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006e26:	1a9b      	subs	r3, r3, r2
 8006e28:	eba3 0309 	sub.w	r3, r3, r9
 8006e2c:	42bb      	cmp	r3, r7
 8006e2e:	dcef      	bgt.n	8006e10 <_printf_float+0x378>
 8006e30:	e74d      	b.n	8006cce <_printf_float+0x236>
 8006e32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e34:	2a01      	cmp	r2, #1
 8006e36:	dc01      	bgt.n	8006e3c <_printf_float+0x3a4>
 8006e38:	07db      	lsls	r3, r3, #31
 8006e3a:	d538      	bpl.n	8006eae <_printf_float+0x416>
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	463a      	mov	r2, r7
 8006e40:	4659      	mov	r1, fp
 8006e42:	4628      	mov	r0, r5
 8006e44:	47b0      	blx	r6
 8006e46:	3001      	adds	r0, #1
 8006e48:	f43f ae7d 	beq.w	8006b46 <_printf_float+0xae>
 8006e4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e50:	4659      	mov	r1, fp
 8006e52:	4628      	mov	r0, r5
 8006e54:	47b0      	blx	r6
 8006e56:	3001      	adds	r0, #1
 8006e58:	f107 0701 	add.w	r7, r7, #1
 8006e5c:	f43f ae73 	beq.w	8006b46 <_printf_float+0xae>
 8006e60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e66:	2200      	movs	r2, #0
 8006e68:	f103 38ff 	add.w	r8, r3, #4294967295
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	f7f9 fd9b 	bl	80009a8 <__aeabi_dcmpeq>
 8006e72:	b9c0      	cbnz	r0, 8006ea6 <_printf_float+0x40e>
 8006e74:	4643      	mov	r3, r8
 8006e76:	463a      	mov	r2, r7
 8006e78:	4659      	mov	r1, fp
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	47b0      	blx	r6
 8006e7e:	3001      	adds	r0, #1
 8006e80:	d10d      	bne.n	8006e9e <_printf_float+0x406>
 8006e82:	e660      	b.n	8006b46 <_printf_float+0xae>
 8006e84:	2301      	movs	r3, #1
 8006e86:	4642      	mov	r2, r8
 8006e88:	4659      	mov	r1, fp
 8006e8a:	4628      	mov	r0, r5
 8006e8c:	47b0      	blx	r6
 8006e8e:	3001      	adds	r0, #1
 8006e90:	f43f ae59 	beq.w	8006b46 <_printf_float+0xae>
 8006e94:	3701      	adds	r7, #1
 8006e96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e98:	3b01      	subs	r3, #1
 8006e9a:	42bb      	cmp	r3, r7
 8006e9c:	dcf2      	bgt.n	8006e84 <_printf_float+0x3ec>
 8006e9e:	464b      	mov	r3, r9
 8006ea0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006ea4:	e6e4      	b.n	8006c70 <_printf_float+0x1d8>
 8006ea6:	2700      	movs	r7, #0
 8006ea8:	f104 081a 	add.w	r8, r4, #26
 8006eac:	e7f3      	b.n	8006e96 <_printf_float+0x3fe>
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e7e1      	b.n	8006e76 <_printf_float+0x3de>
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	4642      	mov	r2, r8
 8006eb6:	4659      	mov	r1, fp
 8006eb8:	4628      	mov	r0, r5
 8006eba:	47b0      	blx	r6
 8006ebc:	3001      	adds	r0, #1
 8006ebe:	f43f ae42 	beq.w	8006b46 <_printf_float+0xae>
 8006ec2:	3701      	adds	r7, #1
 8006ec4:	68e3      	ldr	r3, [r4, #12]
 8006ec6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006ec8:	1a9b      	subs	r3, r3, r2
 8006eca:	42bb      	cmp	r3, r7
 8006ecc:	dcf1      	bgt.n	8006eb2 <_printf_float+0x41a>
 8006ece:	e702      	b.n	8006cd6 <_printf_float+0x23e>
 8006ed0:	2700      	movs	r7, #0
 8006ed2:	f104 0819 	add.w	r8, r4, #25
 8006ed6:	e7f5      	b.n	8006ec4 <_printf_float+0x42c>
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f43f ae94 	beq.w	8006c06 <_printf_float+0x16e>
 8006ede:	f04f 0c00 	mov.w	ip, #0
 8006ee2:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8006ee6:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8006eea:	6022      	str	r2, [r4, #0]
 8006eec:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8006ef0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8006ef4:	9300      	str	r3, [sp, #0]
 8006ef6:	463a      	mov	r2, r7
 8006ef8:	464b      	mov	r3, r9
 8006efa:	4628      	mov	r0, r5
 8006efc:	f7ff fd3a 	bl	8006974 <__cvt>
 8006f00:	4607      	mov	r7, r0
 8006f02:	e64f      	b.n	8006ba4 <_printf_float+0x10c>

08006f04 <_printf_common>:
 8006f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f08:	4691      	mov	r9, r2
 8006f0a:	461f      	mov	r7, r3
 8006f0c:	688a      	ldr	r2, [r1, #8]
 8006f0e:	690b      	ldr	r3, [r1, #16]
 8006f10:	4606      	mov	r6, r0
 8006f12:	4293      	cmp	r3, r2
 8006f14:	bfb8      	it	lt
 8006f16:	4613      	movlt	r3, r2
 8006f18:	f8c9 3000 	str.w	r3, [r9]
 8006f1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f20:	460c      	mov	r4, r1
 8006f22:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f26:	b112      	cbz	r2, 8006f2e <_printf_common+0x2a>
 8006f28:	3301      	adds	r3, #1
 8006f2a:	f8c9 3000 	str.w	r3, [r9]
 8006f2e:	6823      	ldr	r3, [r4, #0]
 8006f30:	0699      	lsls	r1, r3, #26
 8006f32:	bf42      	ittt	mi
 8006f34:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006f38:	3302      	addmi	r3, #2
 8006f3a:	f8c9 3000 	strmi.w	r3, [r9]
 8006f3e:	6825      	ldr	r5, [r4, #0]
 8006f40:	f015 0506 	ands.w	r5, r5, #6
 8006f44:	d107      	bne.n	8006f56 <_printf_common+0x52>
 8006f46:	f104 0a19 	add.w	sl, r4, #25
 8006f4a:	68e3      	ldr	r3, [r4, #12]
 8006f4c:	f8d9 2000 	ldr.w	r2, [r9]
 8006f50:	1a9b      	subs	r3, r3, r2
 8006f52:	42ab      	cmp	r3, r5
 8006f54:	dc29      	bgt.n	8006faa <_printf_common+0xa6>
 8006f56:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006f5a:	6822      	ldr	r2, [r4, #0]
 8006f5c:	3300      	adds	r3, #0
 8006f5e:	bf18      	it	ne
 8006f60:	2301      	movne	r3, #1
 8006f62:	0692      	lsls	r2, r2, #26
 8006f64:	d42e      	bmi.n	8006fc4 <_printf_common+0xc0>
 8006f66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f6a:	4639      	mov	r1, r7
 8006f6c:	4630      	mov	r0, r6
 8006f6e:	47c0      	blx	r8
 8006f70:	3001      	adds	r0, #1
 8006f72:	d021      	beq.n	8006fb8 <_printf_common+0xb4>
 8006f74:	6823      	ldr	r3, [r4, #0]
 8006f76:	68e5      	ldr	r5, [r4, #12]
 8006f78:	f003 0306 	and.w	r3, r3, #6
 8006f7c:	2b04      	cmp	r3, #4
 8006f7e:	bf18      	it	ne
 8006f80:	2500      	movne	r5, #0
 8006f82:	f8d9 2000 	ldr.w	r2, [r9]
 8006f86:	f04f 0900 	mov.w	r9, #0
 8006f8a:	bf08      	it	eq
 8006f8c:	1aad      	subeq	r5, r5, r2
 8006f8e:	68a3      	ldr	r3, [r4, #8]
 8006f90:	6922      	ldr	r2, [r4, #16]
 8006f92:	bf08      	it	eq
 8006f94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	bfc4      	itt	gt
 8006f9c:	1a9b      	subgt	r3, r3, r2
 8006f9e:	18ed      	addgt	r5, r5, r3
 8006fa0:	341a      	adds	r4, #26
 8006fa2:	454d      	cmp	r5, r9
 8006fa4:	d11a      	bne.n	8006fdc <_printf_common+0xd8>
 8006fa6:	2000      	movs	r0, #0
 8006fa8:	e008      	b.n	8006fbc <_printf_common+0xb8>
 8006faa:	2301      	movs	r3, #1
 8006fac:	4652      	mov	r2, sl
 8006fae:	4639      	mov	r1, r7
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	47c0      	blx	r8
 8006fb4:	3001      	adds	r0, #1
 8006fb6:	d103      	bne.n	8006fc0 <_printf_common+0xbc>
 8006fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fc0:	3501      	adds	r5, #1
 8006fc2:	e7c2      	b.n	8006f4a <_printf_common+0x46>
 8006fc4:	2030      	movs	r0, #48	; 0x30
 8006fc6:	18e1      	adds	r1, r4, r3
 8006fc8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006fcc:	1c5a      	adds	r2, r3, #1
 8006fce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006fd2:	4422      	add	r2, r4
 8006fd4:	3302      	adds	r3, #2
 8006fd6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006fda:	e7c4      	b.n	8006f66 <_printf_common+0x62>
 8006fdc:	2301      	movs	r3, #1
 8006fde:	4622      	mov	r2, r4
 8006fe0:	4639      	mov	r1, r7
 8006fe2:	4630      	mov	r0, r6
 8006fe4:	47c0      	blx	r8
 8006fe6:	3001      	adds	r0, #1
 8006fe8:	d0e6      	beq.n	8006fb8 <_printf_common+0xb4>
 8006fea:	f109 0901 	add.w	r9, r9, #1
 8006fee:	e7d8      	b.n	8006fa2 <_printf_common+0x9e>

08006ff0 <_printf_i>:
 8006ff0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ff4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006ff8:	460c      	mov	r4, r1
 8006ffa:	7e09      	ldrb	r1, [r1, #24]
 8006ffc:	b085      	sub	sp, #20
 8006ffe:	296e      	cmp	r1, #110	; 0x6e
 8007000:	4617      	mov	r7, r2
 8007002:	4606      	mov	r6, r0
 8007004:	4698      	mov	r8, r3
 8007006:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007008:	f000 80b3 	beq.w	8007172 <_printf_i+0x182>
 800700c:	d822      	bhi.n	8007054 <_printf_i+0x64>
 800700e:	2963      	cmp	r1, #99	; 0x63
 8007010:	d036      	beq.n	8007080 <_printf_i+0x90>
 8007012:	d80a      	bhi.n	800702a <_printf_i+0x3a>
 8007014:	2900      	cmp	r1, #0
 8007016:	f000 80b9 	beq.w	800718c <_printf_i+0x19c>
 800701a:	2958      	cmp	r1, #88	; 0x58
 800701c:	f000 8083 	beq.w	8007126 <_printf_i+0x136>
 8007020:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007024:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007028:	e032      	b.n	8007090 <_printf_i+0xa0>
 800702a:	2964      	cmp	r1, #100	; 0x64
 800702c:	d001      	beq.n	8007032 <_printf_i+0x42>
 800702e:	2969      	cmp	r1, #105	; 0x69
 8007030:	d1f6      	bne.n	8007020 <_printf_i+0x30>
 8007032:	6820      	ldr	r0, [r4, #0]
 8007034:	6813      	ldr	r3, [r2, #0]
 8007036:	0605      	lsls	r5, r0, #24
 8007038:	f103 0104 	add.w	r1, r3, #4
 800703c:	d52a      	bpl.n	8007094 <_printf_i+0xa4>
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	6011      	str	r1, [r2, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	da03      	bge.n	800704e <_printf_i+0x5e>
 8007046:	222d      	movs	r2, #45	; 0x2d
 8007048:	425b      	negs	r3, r3
 800704a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800704e:	486f      	ldr	r0, [pc, #444]	; (800720c <_printf_i+0x21c>)
 8007050:	220a      	movs	r2, #10
 8007052:	e039      	b.n	80070c8 <_printf_i+0xd8>
 8007054:	2973      	cmp	r1, #115	; 0x73
 8007056:	f000 809d 	beq.w	8007194 <_printf_i+0x1a4>
 800705a:	d808      	bhi.n	800706e <_printf_i+0x7e>
 800705c:	296f      	cmp	r1, #111	; 0x6f
 800705e:	d020      	beq.n	80070a2 <_printf_i+0xb2>
 8007060:	2970      	cmp	r1, #112	; 0x70
 8007062:	d1dd      	bne.n	8007020 <_printf_i+0x30>
 8007064:	6823      	ldr	r3, [r4, #0]
 8007066:	f043 0320 	orr.w	r3, r3, #32
 800706a:	6023      	str	r3, [r4, #0]
 800706c:	e003      	b.n	8007076 <_printf_i+0x86>
 800706e:	2975      	cmp	r1, #117	; 0x75
 8007070:	d017      	beq.n	80070a2 <_printf_i+0xb2>
 8007072:	2978      	cmp	r1, #120	; 0x78
 8007074:	d1d4      	bne.n	8007020 <_printf_i+0x30>
 8007076:	2378      	movs	r3, #120	; 0x78
 8007078:	4865      	ldr	r0, [pc, #404]	; (8007210 <_printf_i+0x220>)
 800707a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800707e:	e055      	b.n	800712c <_printf_i+0x13c>
 8007080:	6813      	ldr	r3, [r2, #0]
 8007082:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007086:	1d19      	adds	r1, r3, #4
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	6011      	str	r1, [r2, #0]
 800708c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007090:	2301      	movs	r3, #1
 8007092:	e08c      	b.n	80071ae <_printf_i+0x1be>
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f010 0f40 	tst.w	r0, #64	; 0x40
 800709a:	6011      	str	r1, [r2, #0]
 800709c:	bf18      	it	ne
 800709e:	b21b      	sxthne	r3, r3
 80070a0:	e7cf      	b.n	8007042 <_printf_i+0x52>
 80070a2:	6813      	ldr	r3, [r2, #0]
 80070a4:	6825      	ldr	r5, [r4, #0]
 80070a6:	1d18      	adds	r0, r3, #4
 80070a8:	6010      	str	r0, [r2, #0]
 80070aa:	0628      	lsls	r0, r5, #24
 80070ac:	d501      	bpl.n	80070b2 <_printf_i+0xc2>
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	e002      	b.n	80070b8 <_printf_i+0xc8>
 80070b2:	0668      	lsls	r0, r5, #25
 80070b4:	d5fb      	bpl.n	80070ae <_printf_i+0xbe>
 80070b6:	881b      	ldrh	r3, [r3, #0]
 80070b8:	296f      	cmp	r1, #111	; 0x6f
 80070ba:	bf14      	ite	ne
 80070bc:	220a      	movne	r2, #10
 80070be:	2208      	moveq	r2, #8
 80070c0:	4852      	ldr	r0, [pc, #328]	; (800720c <_printf_i+0x21c>)
 80070c2:	2100      	movs	r1, #0
 80070c4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80070c8:	6865      	ldr	r5, [r4, #4]
 80070ca:	2d00      	cmp	r5, #0
 80070cc:	60a5      	str	r5, [r4, #8]
 80070ce:	f2c0 8095 	blt.w	80071fc <_printf_i+0x20c>
 80070d2:	6821      	ldr	r1, [r4, #0]
 80070d4:	f021 0104 	bic.w	r1, r1, #4
 80070d8:	6021      	str	r1, [r4, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d13d      	bne.n	800715a <_printf_i+0x16a>
 80070de:	2d00      	cmp	r5, #0
 80070e0:	f040 808e 	bne.w	8007200 <_printf_i+0x210>
 80070e4:	4665      	mov	r5, ip
 80070e6:	2a08      	cmp	r2, #8
 80070e8:	d10b      	bne.n	8007102 <_printf_i+0x112>
 80070ea:	6823      	ldr	r3, [r4, #0]
 80070ec:	07db      	lsls	r3, r3, #31
 80070ee:	d508      	bpl.n	8007102 <_printf_i+0x112>
 80070f0:	6923      	ldr	r3, [r4, #16]
 80070f2:	6862      	ldr	r2, [r4, #4]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	bfde      	ittt	le
 80070f8:	2330      	movle	r3, #48	; 0x30
 80070fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80070fe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007102:	ebac 0305 	sub.w	r3, ip, r5
 8007106:	6123      	str	r3, [r4, #16]
 8007108:	f8cd 8000 	str.w	r8, [sp]
 800710c:	463b      	mov	r3, r7
 800710e:	aa03      	add	r2, sp, #12
 8007110:	4621      	mov	r1, r4
 8007112:	4630      	mov	r0, r6
 8007114:	f7ff fef6 	bl	8006f04 <_printf_common>
 8007118:	3001      	adds	r0, #1
 800711a:	d14d      	bne.n	80071b8 <_printf_i+0x1c8>
 800711c:	f04f 30ff 	mov.w	r0, #4294967295
 8007120:	b005      	add	sp, #20
 8007122:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007126:	4839      	ldr	r0, [pc, #228]	; (800720c <_printf_i+0x21c>)
 8007128:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800712c:	6813      	ldr	r3, [r2, #0]
 800712e:	6821      	ldr	r1, [r4, #0]
 8007130:	1d1d      	adds	r5, r3, #4
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	6015      	str	r5, [r2, #0]
 8007136:	060a      	lsls	r2, r1, #24
 8007138:	d50b      	bpl.n	8007152 <_printf_i+0x162>
 800713a:	07ca      	lsls	r2, r1, #31
 800713c:	bf44      	itt	mi
 800713e:	f041 0120 	orrmi.w	r1, r1, #32
 8007142:	6021      	strmi	r1, [r4, #0]
 8007144:	b91b      	cbnz	r3, 800714e <_printf_i+0x15e>
 8007146:	6822      	ldr	r2, [r4, #0]
 8007148:	f022 0220 	bic.w	r2, r2, #32
 800714c:	6022      	str	r2, [r4, #0]
 800714e:	2210      	movs	r2, #16
 8007150:	e7b7      	b.n	80070c2 <_printf_i+0xd2>
 8007152:	064d      	lsls	r5, r1, #25
 8007154:	bf48      	it	mi
 8007156:	b29b      	uxthmi	r3, r3
 8007158:	e7ef      	b.n	800713a <_printf_i+0x14a>
 800715a:	4665      	mov	r5, ip
 800715c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007160:	fb02 3311 	mls	r3, r2, r1, r3
 8007164:	5cc3      	ldrb	r3, [r0, r3]
 8007166:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800716a:	460b      	mov	r3, r1
 800716c:	2900      	cmp	r1, #0
 800716e:	d1f5      	bne.n	800715c <_printf_i+0x16c>
 8007170:	e7b9      	b.n	80070e6 <_printf_i+0xf6>
 8007172:	6813      	ldr	r3, [r2, #0]
 8007174:	6825      	ldr	r5, [r4, #0]
 8007176:	1d18      	adds	r0, r3, #4
 8007178:	6961      	ldr	r1, [r4, #20]
 800717a:	6010      	str	r0, [r2, #0]
 800717c:	0628      	lsls	r0, r5, #24
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	d501      	bpl.n	8007186 <_printf_i+0x196>
 8007182:	6019      	str	r1, [r3, #0]
 8007184:	e002      	b.n	800718c <_printf_i+0x19c>
 8007186:	066a      	lsls	r2, r5, #25
 8007188:	d5fb      	bpl.n	8007182 <_printf_i+0x192>
 800718a:	8019      	strh	r1, [r3, #0]
 800718c:	2300      	movs	r3, #0
 800718e:	4665      	mov	r5, ip
 8007190:	6123      	str	r3, [r4, #16]
 8007192:	e7b9      	b.n	8007108 <_printf_i+0x118>
 8007194:	6813      	ldr	r3, [r2, #0]
 8007196:	1d19      	adds	r1, r3, #4
 8007198:	6011      	str	r1, [r2, #0]
 800719a:	681d      	ldr	r5, [r3, #0]
 800719c:	6862      	ldr	r2, [r4, #4]
 800719e:	2100      	movs	r1, #0
 80071a0:	4628      	mov	r0, r5
 80071a2:	f000 feb7 	bl	8007f14 <memchr>
 80071a6:	b108      	cbz	r0, 80071ac <_printf_i+0x1bc>
 80071a8:	1b40      	subs	r0, r0, r5
 80071aa:	6060      	str	r0, [r4, #4]
 80071ac:	6863      	ldr	r3, [r4, #4]
 80071ae:	6123      	str	r3, [r4, #16]
 80071b0:	2300      	movs	r3, #0
 80071b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071b6:	e7a7      	b.n	8007108 <_printf_i+0x118>
 80071b8:	6923      	ldr	r3, [r4, #16]
 80071ba:	462a      	mov	r2, r5
 80071bc:	4639      	mov	r1, r7
 80071be:	4630      	mov	r0, r6
 80071c0:	47c0      	blx	r8
 80071c2:	3001      	adds	r0, #1
 80071c4:	d0aa      	beq.n	800711c <_printf_i+0x12c>
 80071c6:	6823      	ldr	r3, [r4, #0]
 80071c8:	079b      	lsls	r3, r3, #30
 80071ca:	d413      	bmi.n	80071f4 <_printf_i+0x204>
 80071cc:	68e0      	ldr	r0, [r4, #12]
 80071ce:	9b03      	ldr	r3, [sp, #12]
 80071d0:	4298      	cmp	r0, r3
 80071d2:	bfb8      	it	lt
 80071d4:	4618      	movlt	r0, r3
 80071d6:	e7a3      	b.n	8007120 <_printf_i+0x130>
 80071d8:	2301      	movs	r3, #1
 80071da:	464a      	mov	r2, r9
 80071dc:	4639      	mov	r1, r7
 80071de:	4630      	mov	r0, r6
 80071e0:	47c0      	blx	r8
 80071e2:	3001      	adds	r0, #1
 80071e4:	d09a      	beq.n	800711c <_printf_i+0x12c>
 80071e6:	3501      	adds	r5, #1
 80071e8:	68e3      	ldr	r3, [r4, #12]
 80071ea:	9a03      	ldr	r2, [sp, #12]
 80071ec:	1a9b      	subs	r3, r3, r2
 80071ee:	42ab      	cmp	r3, r5
 80071f0:	dcf2      	bgt.n	80071d8 <_printf_i+0x1e8>
 80071f2:	e7eb      	b.n	80071cc <_printf_i+0x1dc>
 80071f4:	2500      	movs	r5, #0
 80071f6:	f104 0919 	add.w	r9, r4, #25
 80071fa:	e7f5      	b.n	80071e8 <_printf_i+0x1f8>
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d1ac      	bne.n	800715a <_printf_i+0x16a>
 8007200:	7803      	ldrb	r3, [r0, #0]
 8007202:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007206:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800720a:	e76c      	b.n	80070e6 <_printf_i+0xf6>
 800720c:	08009ef0 	.word	0x08009ef0
 8007210:	08009f01 	.word	0x08009f01

08007214 <_sbrk_r>:
 8007214:	b538      	push	{r3, r4, r5, lr}
 8007216:	2300      	movs	r3, #0
 8007218:	4c05      	ldr	r4, [pc, #20]	; (8007230 <_sbrk_r+0x1c>)
 800721a:	4605      	mov	r5, r0
 800721c:	4608      	mov	r0, r1
 800721e:	6023      	str	r3, [r4, #0]
 8007220:	f7fb fade 	bl	80027e0 <_sbrk>
 8007224:	1c43      	adds	r3, r0, #1
 8007226:	d102      	bne.n	800722e <_sbrk_r+0x1a>
 8007228:	6823      	ldr	r3, [r4, #0]
 800722a:	b103      	cbz	r3, 800722e <_sbrk_r+0x1a>
 800722c:	602b      	str	r3, [r5, #0]
 800722e:	bd38      	pop	{r3, r4, r5, pc}
 8007230:	20002f54 	.word	0x20002f54

08007234 <siprintf>:
 8007234:	b40e      	push	{r1, r2, r3}
 8007236:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800723a:	b500      	push	{lr}
 800723c:	b09c      	sub	sp, #112	; 0x70
 800723e:	ab1d      	add	r3, sp, #116	; 0x74
 8007240:	9002      	str	r0, [sp, #8]
 8007242:	9006      	str	r0, [sp, #24]
 8007244:	9107      	str	r1, [sp, #28]
 8007246:	9104      	str	r1, [sp, #16]
 8007248:	4808      	ldr	r0, [pc, #32]	; (800726c <siprintf+0x38>)
 800724a:	4909      	ldr	r1, [pc, #36]	; (8007270 <siprintf+0x3c>)
 800724c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007250:	9105      	str	r1, [sp, #20]
 8007252:	6800      	ldr	r0, [r0, #0]
 8007254:	a902      	add	r1, sp, #8
 8007256:	9301      	str	r3, [sp, #4]
 8007258:	f001 f9b0 	bl	80085bc <_svfiprintf_r>
 800725c:	2200      	movs	r2, #0
 800725e:	9b02      	ldr	r3, [sp, #8]
 8007260:	701a      	strb	r2, [r3, #0]
 8007262:	b01c      	add	sp, #112	; 0x70
 8007264:	f85d eb04 	ldr.w	lr, [sp], #4
 8007268:	b003      	add	sp, #12
 800726a:	4770      	bx	lr
 800726c:	20000028 	.word	0x20000028
 8007270:	ffff0208 	.word	0xffff0208

08007274 <quorem>:
 8007274:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007278:	6903      	ldr	r3, [r0, #16]
 800727a:	690c      	ldr	r4, [r1, #16]
 800727c:	4680      	mov	r8, r0
 800727e:	42a3      	cmp	r3, r4
 8007280:	f2c0 8084 	blt.w	800738c <quorem+0x118>
 8007284:	3c01      	subs	r4, #1
 8007286:	f101 0714 	add.w	r7, r1, #20
 800728a:	f100 0614 	add.w	r6, r0, #20
 800728e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007292:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007296:	3501      	adds	r5, #1
 8007298:	fbb0 f5f5 	udiv	r5, r0, r5
 800729c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80072a0:	eb06 030c 	add.w	r3, r6, ip
 80072a4:	eb07 090c 	add.w	r9, r7, ip
 80072a8:	9301      	str	r3, [sp, #4]
 80072aa:	b39d      	cbz	r5, 8007314 <quorem+0xa0>
 80072ac:	f04f 0a00 	mov.w	sl, #0
 80072b0:	4638      	mov	r0, r7
 80072b2:	46b6      	mov	lr, r6
 80072b4:	46d3      	mov	fp, sl
 80072b6:	f850 2b04 	ldr.w	r2, [r0], #4
 80072ba:	b293      	uxth	r3, r2
 80072bc:	fb05 a303 	mla	r3, r5, r3, sl
 80072c0:	0c12      	lsrs	r2, r2, #16
 80072c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80072c6:	fb05 a202 	mla	r2, r5, r2, sl
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	ebab 0303 	sub.w	r3, fp, r3
 80072d0:	f8de b000 	ldr.w	fp, [lr]
 80072d4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80072d8:	fa1f fb8b 	uxth.w	fp, fp
 80072dc:	445b      	add	r3, fp
 80072de:	fa1f fb82 	uxth.w	fp, r2
 80072e2:	f8de 2000 	ldr.w	r2, [lr]
 80072e6:	4581      	cmp	r9, r0
 80072e8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80072ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072f6:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80072fa:	f84e 3b04 	str.w	r3, [lr], #4
 80072fe:	d2da      	bcs.n	80072b6 <quorem+0x42>
 8007300:	f856 300c 	ldr.w	r3, [r6, ip]
 8007304:	b933      	cbnz	r3, 8007314 <quorem+0xa0>
 8007306:	9b01      	ldr	r3, [sp, #4]
 8007308:	3b04      	subs	r3, #4
 800730a:	429e      	cmp	r6, r3
 800730c:	461a      	mov	r2, r3
 800730e:	d331      	bcc.n	8007374 <quorem+0x100>
 8007310:	f8c8 4010 	str.w	r4, [r8, #16]
 8007314:	4640      	mov	r0, r8
 8007316:	f001 f821 	bl	800835c <__mcmp>
 800731a:	2800      	cmp	r0, #0
 800731c:	db26      	blt.n	800736c <quorem+0xf8>
 800731e:	4630      	mov	r0, r6
 8007320:	f04f 0c00 	mov.w	ip, #0
 8007324:	3501      	adds	r5, #1
 8007326:	f857 1b04 	ldr.w	r1, [r7], #4
 800732a:	f8d0 e000 	ldr.w	lr, [r0]
 800732e:	b28b      	uxth	r3, r1
 8007330:	ebac 0303 	sub.w	r3, ip, r3
 8007334:	fa1f f28e 	uxth.w	r2, lr
 8007338:	4413      	add	r3, r2
 800733a:	0c0a      	lsrs	r2, r1, #16
 800733c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007340:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007344:	b29b      	uxth	r3, r3
 8007346:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800734a:	45b9      	cmp	r9, r7
 800734c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007350:	f840 3b04 	str.w	r3, [r0], #4
 8007354:	d2e7      	bcs.n	8007326 <quorem+0xb2>
 8007356:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800735a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800735e:	b92a      	cbnz	r2, 800736c <quorem+0xf8>
 8007360:	3b04      	subs	r3, #4
 8007362:	429e      	cmp	r6, r3
 8007364:	461a      	mov	r2, r3
 8007366:	d30b      	bcc.n	8007380 <quorem+0x10c>
 8007368:	f8c8 4010 	str.w	r4, [r8, #16]
 800736c:	4628      	mov	r0, r5
 800736e:	b003      	add	sp, #12
 8007370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007374:	6812      	ldr	r2, [r2, #0]
 8007376:	3b04      	subs	r3, #4
 8007378:	2a00      	cmp	r2, #0
 800737a:	d1c9      	bne.n	8007310 <quorem+0x9c>
 800737c:	3c01      	subs	r4, #1
 800737e:	e7c4      	b.n	800730a <quorem+0x96>
 8007380:	6812      	ldr	r2, [r2, #0]
 8007382:	3b04      	subs	r3, #4
 8007384:	2a00      	cmp	r2, #0
 8007386:	d1ef      	bne.n	8007368 <quorem+0xf4>
 8007388:	3c01      	subs	r4, #1
 800738a:	e7ea      	b.n	8007362 <quorem+0xee>
 800738c:	2000      	movs	r0, #0
 800738e:	e7ee      	b.n	800736e <quorem+0xfa>

08007390 <_dtoa_r>:
 8007390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007394:	4616      	mov	r6, r2
 8007396:	461f      	mov	r7, r3
 8007398:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800739a:	b095      	sub	sp, #84	; 0x54
 800739c:	4604      	mov	r4, r0
 800739e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80073a2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80073a6:	b93d      	cbnz	r5, 80073b8 <_dtoa_r+0x28>
 80073a8:	2010      	movs	r0, #16
 80073aa:	f7ff fa19 	bl	80067e0 <malloc>
 80073ae:	6260      	str	r0, [r4, #36]	; 0x24
 80073b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80073b4:	6005      	str	r5, [r0, #0]
 80073b6:	60c5      	str	r5, [r0, #12]
 80073b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073ba:	6819      	ldr	r1, [r3, #0]
 80073bc:	b151      	cbz	r1, 80073d4 <_dtoa_r+0x44>
 80073be:	685a      	ldr	r2, [r3, #4]
 80073c0:	2301      	movs	r3, #1
 80073c2:	4093      	lsls	r3, r2
 80073c4:	604a      	str	r2, [r1, #4]
 80073c6:	608b      	str	r3, [r1, #8]
 80073c8:	4620      	mov	r0, r4
 80073ca:	f000 fde7 	bl	8007f9c <_Bfree>
 80073ce:	2200      	movs	r2, #0
 80073d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073d2:	601a      	str	r2, [r3, #0]
 80073d4:	1e3b      	subs	r3, r7, #0
 80073d6:	bfaf      	iteee	ge
 80073d8:	2300      	movge	r3, #0
 80073da:	2201      	movlt	r2, #1
 80073dc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80073e0:	9303      	strlt	r3, [sp, #12]
 80073e2:	bfac      	ite	ge
 80073e4:	f8c8 3000 	strge.w	r3, [r8]
 80073e8:	f8c8 2000 	strlt.w	r2, [r8]
 80073ec:	4bae      	ldr	r3, [pc, #696]	; (80076a8 <_dtoa_r+0x318>)
 80073ee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80073f2:	ea33 0308 	bics.w	r3, r3, r8
 80073f6:	d11b      	bne.n	8007430 <_dtoa_r+0xa0>
 80073f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80073fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80073fe:	6013      	str	r3, [r2, #0]
 8007400:	9b02      	ldr	r3, [sp, #8]
 8007402:	b923      	cbnz	r3, 800740e <_dtoa_r+0x7e>
 8007404:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007408:	2800      	cmp	r0, #0
 800740a:	f000 8545 	beq.w	8007e98 <_dtoa_r+0xb08>
 800740e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007410:	b953      	cbnz	r3, 8007428 <_dtoa_r+0x98>
 8007412:	4ba6      	ldr	r3, [pc, #664]	; (80076ac <_dtoa_r+0x31c>)
 8007414:	e021      	b.n	800745a <_dtoa_r+0xca>
 8007416:	4ba6      	ldr	r3, [pc, #664]	; (80076b0 <_dtoa_r+0x320>)
 8007418:	9306      	str	r3, [sp, #24]
 800741a:	3308      	adds	r3, #8
 800741c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800741e:	6013      	str	r3, [r2, #0]
 8007420:	9806      	ldr	r0, [sp, #24]
 8007422:	b015      	add	sp, #84	; 0x54
 8007424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007428:	4ba0      	ldr	r3, [pc, #640]	; (80076ac <_dtoa_r+0x31c>)
 800742a:	9306      	str	r3, [sp, #24]
 800742c:	3303      	adds	r3, #3
 800742e:	e7f5      	b.n	800741c <_dtoa_r+0x8c>
 8007430:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007434:	2200      	movs	r2, #0
 8007436:	2300      	movs	r3, #0
 8007438:	4630      	mov	r0, r6
 800743a:	4639      	mov	r1, r7
 800743c:	f7f9 fab4 	bl	80009a8 <__aeabi_dcmpeq>
 8007440:	4682      	mov	sl, r0
 8007442:	b160      	cbz	r0, 800745e <_dtoa_r+0xce>
 8007444:	2301      	movs	r3, #1
 8007446:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007448:	6013      	str	r3, [r2, #0]
 800744a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800744c:	2b00      	cmp	r3, #0
 800744e:	f000 8520 	beq.w	8007e92 <_dtoa_r+0xb02>
 8007452:	4b98      	ldr	r3, [pc, #608]	; (80076b4 <_dtoa_r+0x324>)
 8007454:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007456:	6013      	str	r3, [r2, #0]
 8007458:	3b01      	subs	r3, #1
 800745a:	9306      	str	r3, [sp, #24]
 800745c:	e7e0      	b.n	8007420 <_dtoa_r+0x90>
 800745e:	ab12      	add	r3, sp, #72	; 0x48
 8007460:	9301      	str	r3, [sp, #4]
 8007462:	ab13      	add	r3, sp, #76	; 0x4c
 8007464:	9300      	str	r3, [sp, #0]
 8007466:	4632      	mov	r2, r6
 8007468:	463b      	mov	r3, r7
 800746a:	4620      	mov	r0, r4
 800746c:	f000 ffee 	bl	800844c <__d2b>
 8007470:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007474:	4683      	mov	fp, r0
 8007476:	2d00      	cmp	r5, #0
 8007478:	d07d      	beq.n	8007576 <_dtoa_r+0x1e6>
 800747a:	46b0      	mov	r8, r6
 800747c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007480:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8007484:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8007488:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800748c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8007490:	2200      	movs	r2, #0
 8007492:	4b89      	ldr	r3, [pc, #548]	; (80076b8 <_dtoa_r+0x328>)
 8007494:	4640      	mov	r0, r8
 8007496:	4649      	mov	r1, r9
 8007498:	f7f8 fe66 	bl	8000168 <__aeabi_dsub>
 800749c:	a37c      	add	r3, pc, #496	; (adr r3, 8007690 <_dtoa_r+0x300>)
 800749e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a2:	f7f9 f819 	bl	80004d8 <__aeabi_dmul>
 80074a6:	a37c      	add	r3, pc, #496	; (adr r3, 8007698 <_dtoa_r+0x308>)
 80074a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ac:	f7f8 fe5e 	bl	800016c <__adddf3>
 80074b0:	4606      	mov	r6, r0
 80074b2:	4628      	mov	r0, r5
 80074b4:	460f      	mov	r7, r1
 80074b6:	f7f8 ffa5 	bl	8000404 <__aeabi_i2d>
 80074ba:	a379      	add	r3, pc, #484	; (adr r3, 80076a0 <_dtoa_r+0x310>)
 80074bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c0:	f7f9 f80a 	bl	80004d8 <__aeabi_dmul>
 80074c4:	4602      	mov	r2, r0
 80074c6:	460b      	mov	r3, r1
 80074c8:	4630      	mov	r0, r6
 80074ca:	4639      	mov	r1, r7
 80074cc:	f7f8 fe4e 	bl	800016c <__adddf3>
 80074d0:	4606      	mov	r6, r0
 80074d2:	460f      	mov	r7, r1
 80074d4:	f7f9 fab0 	bl	8000a38 <__aeabi_d2iz>
 80074d8:	2200      	movs	r2, #0
 80074da:	4682      	mov	sl, r0
 80074dc:	2300      	movs	r3, #0
 80074de:	4630      	mov	r0, r6
 80074e0:	4639      	mov	r1, r7
 80074e2:	f7f9 fa6b 	bl	80009bc <__aeabi_dcmplt>
 80074e6:	b148      	cbz	r0, 80074fc <_dtoa_r+0x16c>
 80074e8:	4650      	mov	r0, sl
 80074ea:	f7f8 ff8b 	bl	8000404 <__aeabi_i2d>
 80074ee:	4632      	mov	r2, r6
 80074f0:	463b      	mov	r3, r7
 80074f2:	f7f9 fa59 	bl	80009a8 <__aeabi_dcmpeq>
 80074f6:	b908      	cbnz	r0, 80074fc <_dtoa_r+0x16c>
 80074f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80074fc:	f1ba 0f16 	cmp.w	sl, #22
 8007500:	d85a      	bhi.n	80075b8 <_dtoa_r+0x228>
 8007502:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007506:	496d      	ldr	r1, [pc, #436]	; (80076bc <_dtoa_r+0x32c>)
 8007508:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800750c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007510:	f7f9 fa72 	bl	80009f8 <__aeabi_dcmpgt>
 8007514:	2800      	cmp	r0, #0
 8007516:	d051      	beq.n	80075bc <_dtoa_r+0x22c>
 8007518:	2300      	movs	r3, #0
 800751a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800751e:	930d      	str	r3, [sp, #52]	; 0x34
 8007520:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007522:	1b5d      	subs	r5, r3, r5
 8007524:	1e6b      	subs	r3, r5, #1
 8007526:	9307      	str	r3, [sp, #28]
 8007528:	bf43      	ittte	mi
 800752a:	2300      	movmi	r3, #0
 800752c:	f1c5 0901 	rsbmi	r9, r5, #1
 8007530:	9307      	strmi	r3, [sp, #28]
 8007532:	f04f 0900 	movpl.w	r9, #0
 8007536:	f1ba 0f00 	cmp.w	sl, #0
 800753a:	db41      	blt.n	80075c0 <_dtoa_r+0x230>
 800753c:	9b07      	ldr	r3, [sp, #28]
 800753e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8007542:	4453      	add	r3, sl
 8007544:	9307      	str	r3, [sp, #28]
 8007546:	2300      	movs	r3, #0
 8007548:	9308      	str	r3, [sp, #32]
 800754a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800754c:	2b09      	cmp	r3, #9
 800754e:	f200 808f 	bhi.w	8007670 <_dtoa_r+0x2e0>
 8007552:	2b05      	cmp	r3, #5
 8007554:	bfc4      	itt	gt
 8007556:	3b04      	subgt	r3, #4
 8007558:	931e      	strgt	r3, [sp, #120]	; 0x78
 800755a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800755c:	bfc8      	it	gt
 800755e:	2500      	movgt	r5, #0
 8007560:	f1a3 0302 	sub.w	r3, r3, #2
 8007564:	bfd8      	it	le
 8007566:	2501      	movle	r5, #1
 8007568:	2b03      	cmp	r3, #3
 800756a:	f200 808d 	bhi.w	8007688 <_dtoa_r+0x2f8>
 800756e:	e8df f003 	tbb	[pc, r3]
 8007572:	7d7b      	.short	0x7d7b
 8007574:	6f2f      	.short	0x6f2f
 8007576:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800757a:	441d      	add	r5, r3
 800757c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007580:	2820      	cmp	r0, #32
 8007582:	dd13      	ble.n	80075ac <_dtoa_r+0x21c>
 8007584:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007588:	9b02      	ldr	r3, [sp, #8]
 800758a:	fa08 f800 	lsl.w	r8, r8, r0
 800758e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007592:	fa23 f000 	lsr.w	r0, r3, r0
 8007596:	ea48 0000 	orr.w	r0, r8, r0
 800759a:	f7f8 ff23 	bl	80003e4 <__aeabi_ui2d>
 800759e:	2301      	movs	r3, #1
 80075a0:	4680      	mov	r8, r0
 80075a2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80075a6:	3d01      	subs	r5, #1
 80075a8:	9310      	str	r3, [sp, #64]	; 0x40
 80075aa:	e771      	b.n	8007490 <_dtoa_r+0x100>
 80075ac:	9b02      	ldr	r3, [sp, #8]
 80075ae:	f1c0 0020 	rsb	r0, r0, #32
 80075b2:	fa03 f000 	lsl.w	r0, r3, r0
 80075b6:	e7f0      	b.n	800759a <_dtoa_r+0x20a>
 80075b8:	2301      	movs	r3, #1
 80075ba:	e7b0      	b.n	800751e <_dtoa_r+0x18e>
 80075bc:	900d      	str	r0, [sp, #52]	; 0x34
 80075be:	e7af      	b.n	8007520 <_dtoa_r+0x190>
 80075c0:	f1ca 0300 	rsb	r3, sl, #0
 80075c4:	9308      	str	r3, [sp, #32]
 80075c6:	2300      	movs	r3, #0
 80075c8:	eba9 090a 	sub.w	r9, r9, sl
 80075cc:	930c      	str	r3, [sp, #48]	; 0x30
 80075ce:	e7bc      	b.n	800754a <_dtoa_r+0x1ba>
 80075d0:	2301      	movs	r3, #1
 80075d2:	9309      	str	r3, [sp, #36]	; 0x24
 80075d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	dd74      	ble.n	80076c4 <_dtoa_r+0x334>
 80075da:	4698      	mov	r8, r3
 80075dc:	9304      	str	r3, [sp, #16]
 80075de:	2200      	movs	r2, #0
 80075e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80075e2:	6072      	str	r2, [r6, #4]
 80075e4:	2204      	movs	r2, #4
 80075e6:	f102 0014 	add.w	r0, r2, #20
 80075ea:	4298      	cmp	r0, r3
 80075ec:	6871      	ldr	r1, [r6, #4]
 80075ee:	d96e      	bls.n	80076ce <_dtoa_r+0x33e>
 80075f0:	4620      	mov	r0, r4
 80075f2:	f000 fc9f 	bl	8007f34 <_Balloc>
 80075f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075f8:	6030      	str	r0, [r6, #0]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f1b8 0f0e 	cmp.w	r8, #14
 8007600:	9306      	str	r3, [sp, #24]
 8007602:	f200 80ed 	bhi.w	80077e0 <_dtoa_r+0x450>
 8007606:	2d00      	cmp	r5, #0
 8007608:	f000 80ea 	beq.w	80077e0 <_dtoa_r+0x450>
 800760c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007610:	f1ba 0f00 	cmp.w	sl, #0
 8007614:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007618:	dd77      	ble.n	800770a <_dtoa_r+0x37a>
 800761a:	4a28      	ldr	r2, [pc, #160]	; (80076bc <_dtoa_r+0x32c>)
 800761c:	f00a 030f 	and.w	r3, sl, #15
 8007620:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007624:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007628:	06f0      	lsls	r0, r6, #27
 800762a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007632:	d568      	bpl.n	8007706 <_dtoa_r+0x376>
 8007634:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007638:	4b21      	ldr	r3, [pc, #132]	; (80076c0 <_dtoa_r+0x330>)
 800763a:	2503      	movs	r5, #3
 800763c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007640:	f7f9 f874 	bl	800072c <__aeabi_ddiv>
 8007644:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007648:	f006 060f 	and.w	r6, r6, #15
 800764c:	4f1c      	ldr	r7, [pc, #112]	; (80076c0 <_dtoa_r+0x330>)
 800764e:	e04f      	b.n	80076f0 <_dtoa_r+0x360>
 8007650:	2301      	movs	r3, #1
 8007652:	9309      	str	r3, [sp, #36]	; 0x24
 8007654:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007656:	4453      	add	r3, sl
 8007658:	f103 0801 	add.w	r8, r3, #1
 800765c:	9304      	str	r3, [sp, #16]
 800765e:	4643      	mov	r3, r8
 8007660:	2b01      	cmp	r3, #1
 8007662:	bfb8      	it	lt
 8007664:	2301      	movlt	r3, #1
 8007666:	e7ba      	b.n	80075de <_dtoa_r+0x24e>
 8007668:	2300      	movs	r3, #0
 800766a:	e7b2      	b.n	80075d2 <_dtoa_r+0x242>
 800766c:	2300      	movs	r3, #0
 800766e:	e7f0      	b.n	8007652 <_dtoa_r+0x2c2>
 8007670:	2501      	movs	r5, #1
 8007672:	2300      	movs	r3, #0
 8007674:	9509      	str	r5, [sp, #36]	; 0x24
 8007676:	931e      	str	r3, [sp, #120]	; 0x78
 8007678:	f04f 33ff 	mov.w	r3, #4294967295
 800767c:	2200      	movs	r2, #0
 800767e:	9304      	str	r3, [sp, #16]
 8007680:	4698      	mov	r8, r3
 8007682:	2312      	movs	r3, #18
 8007684:	921f      	str	r2, [sp, #124]	; 0x7c
 8007686:	e7aa      	b.n	80075de <_dtoa_r+0x24e>
 8007688:	2301      	movs	r3, #1
 800768a:	9309      	str	r3, [sp, #36]	; 0x24
 800768c:	e7f4      	b.n	8007678 <_dtoa_r+0x2e8>
 800768e:	bf00      	nop
 8007690:	636f4361 	.word	0x636f4361
 8007694:	3fd287a7 	.word	0x3fd287a7
 8007698:	8b60c8b3 	.word	0x8b60c8b3
 800769c:	3fc68a28 	.word	0x3fc68a28
 80076a0:	509f79fb 	.word	0x509f79fb
 80076a4:	3fd34413 	.word	0x3fd34413
 80076a8:	7ff00000 	.word	0x7ff00000
 80076ac:	08009f1b 	.word	0x08009f1b
 80076b0:	08009f12 	.word	0x08009f12
 80076b4:	08009eef 	.word	0x08009eef
 80076b8:	3ff80000 	.word	0x3ff80000
 80076bc:	08009f48 	.word	0x08009f48
 80076c0:	08009f20 	.word	0x08009f20
 80076c4:	2301      	movs	r3, #1
 80076c6:	9304      	str	r3, [sp, #16]
 80076c8:	4698      	mov	r8, r3
 80076ca:	461a      	mov	r2, r3
 80076cc:	e7da      	b.n	8007684 <_dtoa_r+0x2f4>
 80076ce:	3101      	adds	r1, #1
 80076d0:	6071      	str	r1, [r6, #4]
 80076d2:	0052      	lsls	r2, r2, #1
 80076d4:	e787      	b.n	80075e6 <_dtoa_r+0x256>
 80076d6:	07f1      	lsls	r1, r6, #31
 80076d8:	d508      	bpl.n	80076ec <_dtoa_r+0x35c>
 80076da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80076de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076e2:	f7f8 fef9 	bl	80004d8 <__aeabi_dmul>
 80076e6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80076ea:	3501      	adds	r5, #1
 80076ec:	1076      	asrs	r6, r6, #1
 80076ee:	3708      	adds	r7, #8
 80076f0:	2e00      	cmp	r6, #0
 80076f2:	d1f0      	bne.n	80076d6 <_dtoa_r+0x346>
 80076f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80076f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076fc:	f7f9 f816 	bl	800072c <__aeabi_ddiv>
 8007700:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007704:	e01b      	b.n	800773e <_dtoa_r+0x3ae>
 8007706:	2502      	movs	r5, #2
 8007708:	e7a0      	b.n	800764c <_dtoa_r+0x2bc>
 800770a:	f000 80a4 	beq.w	8007856 <_dtoa_r+0x4c6>
 800770e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007712:	f1ca 0600 	rsb	r6, sl, #0
 8007716:	4ba0      	ldr	r3, [pc, #640]	; (8007998 <_dtoa_r+0x608>)
 8007718:	f006 020f 	and.w	r2, r6, #15
 800771c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007724:	f7f8 fed8 	bl	80004d8 <__aeabi_dmul>
 8007728:	2502      	movs	r5, #2
 800772a:	2300      	movs	r3, #0
 800772c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007730:	4f9a      	ldr	r7, [pc, #616]	; (800799c <_dtoa_r+0x60c>)
 8007732:	1136      	asrs	r6, r6, #4
 8007734:	2e00      	cmp	r6, #0
 8007736:	f040 8083 	bne.w	8007840 <_dtoa_r+0x4b0>
 800773a:	2b00      	cmp	r3, #0
 800773c:	d1e0      	bne.n	8007700 <_dtoa_r+0x370>
 800773e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007740:	2b00      	cmp	r3, #0
 8007742:	f000 808a 	beq.w	800785a <_dtoa_r+0x4ca>
 8007746:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800774a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800774e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007752:	2200      	movs	r2, #0
 8007754:	4b92      	ldr	r3, [pc, #584]	; (80079a0 <_dtoa_r+0x610>)
 8007756:	f7f9 f931 	bl	80009bc <__aeabi_dcmplt>
 800775a:	2800      	cmp	r0, #0
 800775c:	d07d      	beq.n	800785a <_dtoa_r+0x4ca>
 800775e:	f1b8 0f00 	cmp.w	r8, #0
 8007762:	d07a      	beq.n	800785a <_dtoa_r+0x4ca>
 8007764:	9b04      	ldr	r3, [sp, #16]
 8007766:	2b00      	cmp	r3, #0
 8007768:	dd36      	ble.n	80077d8 <_dtoa_r+0x448>
 800776a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800776e:	2200      	movs	r2, #0
 8007770:	4b8c      	ldr	r3, [pc, #560]	; (80079a4 <_dtoa_r+0x614>)
 8007772:	f7f8 feb1 	bl	80004d8 <__aeabi_dmul>
 8007776:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800777a:	9e04      	ldr	r6, [sp, #16]
 800777c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8007780:	3501      	adds	r5, #1
 8007782:	4628      	mov	r0, r5
 8007784:	f7f8 fe3e 	bl	8000404 <__aeabi_i2d>
 8007788:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800778c:	f7f8 fea4 	bl	80004d8 <__aeabi_dmul>
 8007790:	2200      	movs	r2, #0
 8007792:	4b85      	ldr	r3, [pc, #532]	; (80079a8 <_dtoa_r+0x618>)
 8007794:	f7f8 fcea 	bl	800016c <__adddf3>
 8007798:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800779c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80077a0:	950b      	str	r5, [sp, #44]	; 0x2c
 80077a2:	2e00      	cmp	r6, #0
 80077a4:	d15c      	bne.n	8007860 <_dtoa_r+0x4d0>
 80077a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077aa:	2200      	movs	r2, #0
 80077ac:	4b7f      	ldr	r3, [pc, #508]	; (80079ac <_dtoa_r+0x61c>)
 80077ae:	f7f8 fcdb 	bl	8000168 <__aeabi_dsub>
 80077b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077b4:	462b      	mov	r3, r5
 80077b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077ba:	f7f9 f91d 	bl	80009f8 <__aeabi_dcmpgt>
 80077be:	2800      	cmp	r0, #0
 80077c0:	f040 8281 	bne.w	8007cc6 <_dtoa_r+0x936>
 80077c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077ca:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80077ce:	f7f9 f8f5 	bl	80009bc <__aeabi_dcmplt>
 80077d2:	2800      	cmp	r0, #0
 80077d4:	f040 8275 	bne.w	8007cc2 <_dtoa_r+0x932>
 80077d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80077dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80077e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f2c0 814b 	blt.w	8007a7e <_dtoa_r+0x6ee>
 80077e8:	f1ba 0f0e 	cmp.w	sl, #14
 80077ec:	f300 8147 	bgt.w	8007a7e <_dtoa_r+0x6ee>
 80077f0:	4b69      	ldr	r3, [pc, #420]	; (8007998 <_dtoa_r+0x608>)
 80077f2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80077f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80077fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007800:	2b00      	cmp	r3, #0
 8007802:	f280 80d7 	bge.w	80079b4 <_dtoa_r+0x624>
 8007806:	f1b8 0f00 	cmp.w	r8, #0
 800780a:	f300 80d3 	bgt.w	80079b4 <_dtoa_r+0x624>
 800780e:	f040 8257 	bne.w	8007cc0 <_dtoa_r+0x930>
 8007812:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007816:	2200      	movs	r2, #0
 8007818:	4b64      	ldr	r3, [pc, #400]	; (80079ac <_dtoa_r+0x61c>)
 800781a:	f7f8 fe5d 	bl	80004d8 <__aeabi_dmul>
 800781e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007822:	f7f9 f8df 	bl	80009e4 <__aeabi_dcmpge>
 8007826:	4646      	mov	r6, r8
 8007828:	4647      	mov	r7, r8
 800782a:	2800      	cmp	r0, #0
 800782c:	f040 822d 	bne.w	8007c8a <_dtoa_r+0x8fa>
 8007830:	9b06      	ldr	r3, [sp, #24]
 8007832:	9a06      	ldr	r2, [sp, #24]
 8007834:	1c5d      	adds	r5, r3, #1
 8007836:	2331      	movs	r3, #49	; 0x31
 8007838:	f10a 0a01 	add.w	sl, sl, #1
 800783c:	7013      	strb	r3, [r2, #0]
 800783e:	e228      	b.n	8007c92 <_dtoa_r+0x902>
 8007840:	07f2      	lsls	r2, r6, #31
 8007842:	d505      	bpl.n	8007850 <_dtoa_r+0x4c0>
 8007844:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007848:	f7f8 fe46 	bl	80004d8 <__aeabi_dmul>
 800784c:	2301      	movs	r3, #1
 800784e:	3501      	adds	r5, #1
 8007850:	1076      	asrs	r6, r6, #1
 8007852:	3708      	adds	r7, #8
 8007854:	e76e      	b.n	8007734 <_dtoa_r+0x3a4>
 8007856:	2502      	movs	r5, #2
 8007858:	e771      	b.n	800773e <_dtoa_r+0x3ae>
 800785a:	4657      	mov	r7, sl
 800785c:	4646      	mov	r6, r8
 800785e:	e790      	b.n	8007782 <_dtoa_r+0x3f2>
 8007860:	4b4d      	ldr	r3, [pc, #308]	; (8007998 <_dtoa_r+0x608>)
 8007862:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007866:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800786a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800786c:	2b00      	cmp	r3, #0
 800786e:	d048      	beq.n	8007902 <_dtoa_r+0x572>
 8007870:	4602      	mov	r2, r0
 8007872:	460b      	mov	r3, r1
 8007874:	2000      	movs	r0, #0
 8007876:	494e      	ldr	r1, [pc, #312]	; (80079b0 <_dtoa_r+0x620>)
 8007878:	f7f8 ff58 	bl	800072c <__aeabi_ddiv>
 800787c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007880:	f7f8 fc72 	bl	8000168 <__aeabi_dsub>
 8007884:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007888:	9d06      	ldr	r5, [sp, #24]
 800788a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800788e:	f7f9 f8d3 	bl	8000a38 <__aeabi_d2iz>
 8007892:	9011      	str	r0, [sp, #68]	; 0x44
 8007894:	f7f8 fdb6 	bl	8000404 <__aeabi_i2d>
 8007898:	4602      	mov	r2, r0
 800789a:	460b      	mov	r3, r1
 800789c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078a0:	f7f8 fc62 	bl	8000168 <__aeabi_dsub>
 80078a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80078a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078aa:	3330      	adds	r3, #48	; 0x30
 80078ac:	f805 3b01 	strb.w	r3, [r5], #1
 80078b0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80078b4:	f7f9 f882 	bl	80009bc <__aeabi_dcmplt>
 80078b8:	2800      	cmp	r0, #0
 80078ba:	d163      	bne.n	8007984 <_dtoa_r+0x5f4>
 80078bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078c0:	2000      	movs	r0, #0
 80078c2:	4937      	ldr	r1, [pc, #220]	; (80079a0 <_dtoa_r+0x610>)
 80078c4:	f7f8 fc50 	bl	8000168 <__aeabi_dsub>
 80078c8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80078cc:	f7f9 f876 	bl	80009bc <__aeabi_dcmplt>
 80078d0:	2800      	cmp	r0, #0
 80078d2:	f040 80b5 	bne.w	8007a40 <_dtoa_r+0x6b0>
 80078d6:	9b06      	ldr	r3, [sp, #24]
 80078d8:	1aeb      	subs	r3, r5, r3
 80078da:	429e      	cmp	r6, r3
 80078dc:	f77f af7c 	ble.w	80077d8 <_dtoa_r+0x448>
 80078e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80078e4:	2200      	movs	r2, #0
 80078e6:	4b2f      	ldr	r3, [pc, #188]	; (80079a4 <_dtoa_r+0x614>)
 80078e8:	f7f8 fdf6 	bl	80004d8 <__aeabi_dmul>
 80078ec:	2200      	movs	r2, #0
 80078ee:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80078f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078f6:	4b2b      	ldr	r3, [pc, #172]	; (80079a4 <_dtoa_r+0x614>)
 80078f8:	f7f8 fdee 	bl	80004d8 <__aeabi_dmul>
 80078fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007900:	e7c3      	b.n	800788a <_dtoa_r+0x4fa>
 8007902:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007906:	f7f8 fde7 	bl	80004d8 <__aeabi_dmul>
 800790a:	9b06      	ldr	r3, [sp, #24]
 800790c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007910:	199d      	adds	r5, r3, r6
 8007912:	461e      	mov	r6, r3
 8007914:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007918:	f7f9 f88e 	bl	8000a38 <__aeabi_d2iz>
 800791c:	9011      	str	r0, [sp, #68]	; 0x44
 800791e:	f7f8 fd71 	bl	8000404 <__aeabi_i2d>
 8007922:	4602      	mov	r2, r0
 8007924:	460b      	mov	r3, r1
 8007926:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800792a:	f7f8 fc1d 	bl	8000168 <__aeabi_dsub>
 800792e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007930:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007934:	3330      	adds	r3, #48	; 0x30
 8007936:	f806 3b01 	strb.w	r3, [r6], #1
 800793a:	42ae      	cmp	r6, r5
 800793c:	f04f 0200 	mov.w	r2, #0
 8007940:	d124      	bne.n	800798c <_dtoa_r+0x5fc>
 8007942:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007946:	4b1a      	ldr	r3, [pc, #104]	; (80079b0 <_dtoa_r+0x620>)
 8007948:	f7f8 fc10 	bl	800016c <__adddf3>
 800794c:	4602      	mov	r2, r0
 800794e:	460b      	mov	r3, r1
 8007950:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007954:	f7f9 f850 	bl	80009f8 <__aeabi_dcmpgt>
 8007958:	2800      	cmp	r0, #0
 800795a:	d171      	bne.n	8007a40 <_dtoa_r+0x6b0>
 800795c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007960:	2000      	movs	r0, #0
 8007962:	4913      	ldr	r1, [pc, #76]	; (80079b0 <_dtoa_r+0x620>)
 8007964:	f7f8 fc00 	bl	8000168 <__aeabi_dsub>
 8007968:	4602      	mov	r2, r0
 800796a:	460b      	mov	r3, r1
 800796c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007970:	f7f9 f824 	bl	80009bc <__aeabi_dcmplt>
 8007974:	2800      	cmp	r0, #0
 8007976:	f43f af2f 	beq.w	80077d8 <_dtoa_r+0x448>
 800797a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800797e:	1e6a      	subs	r2, r5, #1
 8007980:	2b30      	cmp	r3, #48	; 0x30
 8007982:	d001      	beq.n	8007988 <_dtoa_r+0x5f8>
 8007984:	46ba      	mov	sl, r7
 8007986:	e04a      	b.n	8007a1e <_dtoa_r+0x68e>
 8007988:	4615      	mov	r5, r2
 800798a:	e7f6      	b.n	800797a <_dtoa_r+0x5ea>
 800798c:	4b05      	ldr	r3, [pc, #20]	; (80079a4 <_dtoa_r+0x614>)
 800798e:	f7f8 fda3 	bl	80004d8 <__aeabi_dmul>
 8007992:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007996:	e7bd      	b.n	8007914 <_dtoa_r+0x584>
 8007998:	08009f48 	.word	0x08009f48
 800799c:	08009f20 	.word	0x08009f20
 80079a0:	3ff00000 	.word	0x3ff00000
 80079a4:	40240000 	.word	0x40240000
 80079a8:	401c0000 	.word	0x401c0000
 80079ac:	40140000 	.word	0x40140000
 80079b0:	3fe00000 	.word	0x3fe00000
 80079b4:	9d06      	ldr	r5, [sp, #24]
 80079b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80079ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079be:	4630      	mov	r0, r6
 80079c0:	4639      	mov	r1, r7
 80079c2:	f7f8 feb3 	bl	800072c <__aeabi_ddiv>
 80079c6:	f7f9 f837 	bl	8000a38 <__aeabi_d2iz>
 80079ca:	4681      	mov	r9, r0
 80079cc:	f7f8 fd1a 	bl	8000404 <__aeabi_i2d>
 80079d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079d4:	f7f8 fd80 	bl	80004d8 <__aeabi_dmul>
 80079d8:	4602      	mov	r2, r0
 80079da:	460b      	mov	r3, r1
 80079dc:	4630      	mov	r0, r6
 80079de:	4639      	mov	r1, r7
 80079e0:	f7f8 fbc2 	bl	8000168 <__aeabi_dsub>
 80079e4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80079e8:	f805 6b01 	strb.w	r6, [r5], #1
 80079ec:	9e06      	ldr	r6, [sp, #24]
 80079ee:	4602      	mov	r2, r0
 80079f0:	1bae      	subs	r6, r5, r6
 80079f2:	45b0      	cmp	r8, r6
 80079f4:	460b      	mov	r3, r1
 80079f6:	d135      	bne.n	8007a64 <_dtoa_r+0x6d4>
 80079f8:	f7f8 fbb8 	bl	800016c <__adddf3>
 80079fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a00:	4606      	mov	r6, r0
 8007a02:	460f      	mov	r7, r1
 8007a04:	f7f8 fff8 	bl	80009f8 <__aeabi_dcmpgt>
 8007a08:	b9c8      	cbnz	r0, 8007a3e <_dtoa_r+0x6ae>
 8007a0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a0e:	4630      	mov	r0, r6
 8007a10:	4639      	mov	r1, r7
 8007a12:	f7f8 ffc9 	bl	80009a8 <__aeabi_dcmpeq>
 8007a16:	b110      	cbz	r0, 8007a1e <_dtoa_r+0x68e>
 8007a18:	f019 0f01 	tst.w	r9, #1
 8007a1c:	d10f      	bne.n	8007a3e <_dtoa_r+0x6ae>
 8007a1e:	4659      	mov	r1, fp
 8007a20:	4620      	mov	r0, r4
 8007a22:	f000 fabb 	bl	8007f9c <_Bfree>
 8007a26:	2300      	movs	r3, #0
 8007a28:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007a2a:	702b      	strb	r3, [r5, #0]
 8007a2c:	f10a 0301 	add.w	r3, sl, #1
 8007a30:	6013      	str	r3, [r2, #0]
 8007a32:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f43f acf3 	beq.w	8007420 <_dtoa_r+0x90>
 8007a3a:	601d      	str	r5, [r3, #0]
 8007a3c:	e4f0      	b.n	8007420 <_dtoa_r+0x90>
 8007a3e:	4657      	mov	r7, sl
 8007a40:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007a44:	1e6b      	subs	r3, r5, #1
 8007a46:	2a39      	cmp	r2, #57	; 0x39
 8007a48:	d106      	bne.n	8007a58 <_dtoa_r+0x6c8>
 8007a4a:	9a06      	ldr	r2, [sp, #24]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d107      	bne.n	8007a60 <_dtoa_r+0x6d0>
 8007a50:	2330      	movs	r3, #48	; 0x30
 8007a52:	7013      	strb	r3, [r2, #0]
 8007a54:	4613      	mov	r3, r2
 8007a56:	3701      	adds	r7, #1
 8007a58:	781a      	ldrb	r2, [r3, #0]
 8007a5a:	3201      	adds	r2, #1
 8007a5c:	701a      	strb	r2, [r3, #0]
 8007a5e:	e791      	b.n	8007984 <_dtoa_r+0x5f4>
 8007a60:	461d      	mov	r5, r3
 8007a62:	e7ed      	b.n	8007a40 <_dtoa_r+0x6b0>
 8007a64:	2200      	movs	r2, #0
 8007a66:	4b99      	ldr	r3, [pc, #612]	; (8007ccc <_dtoa_r+0x93c>)
 8007a68:	f7f8 fd36 	bl	80004d8 <__aeabi_dmul>
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	2300      	movs	r3, #0
 8007a70:	4606      	mov	r6, r0
 8007a72:	460f      	mov	r7, r1
 8007a74:	f7f8 ff98 	bl	80009a8 <__aeabi_dcmpeq>
 8007a78:	2800      	cmp	r0, #0
 8007a7a:	d09e      	beq.n	80079ba <_dtoa_r+0x62a>
 8007a7c:	e7cf      	b.n	8007a1e <_dtoa_r+0x68e>
 8007a7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a80:	2a00      	cmp	r2, #0
 8007a82:	f000 8088 	beq.w	8007b96 <_dtoa_r+0x806>
 8007a86:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007a88:	2a01      	cmp	r2, #1
 8007a8a:	dc6d      	bgt.n	8007b68 <_dtoa_r+0x7d8>
 8007a8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007a8e:	2a00      	cmp	r2, #0
 8007a90:	d066      	beq.n	8007b60 <_dtoa_r+0x7d0>
 8007a92:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007a96:	464d      	mov	r5, r9
 8007a98:	9e08      	ldr	r6, [sp, #32]
 8007a9a:	9a07      	ldr	r2, [sp, #28]
 8007a9c:	2101      	movs	r1, #1
 8007a9e:	441a      	add	r2, r3
 8007aa0:	4620      	mov	r0, r4
 8007aa2:	4499      	add	r9, r3
 8007aa4:	9207      	str	r2, [sp, #28]
 8007aa6:	f000 fb19 	bl	80080dc <__i2b>
 8007aaa:	4607      	mov	r7, r0
 8007aac:	2d00      	cmp	r5, #0
 8007aae:	dd0b      	ble.n	8007ac8 <_dtoa_r+0x738>
 8007ab0:	9b07      	ldr	r3, [sp, #28]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	dd08      	ble.n	8007ac8 <_dtoa_r+0x738>
 8007ab6:	42ab      	cmp	r3, r5
 8007ab8:	bfa8      	it	ge
 8007aba:	462b      	movge	r3, r5
 8007abc:	9a07      	ldr	r2, [sp, #28]
 8007abe:	eba9 0903 	sub.w	r9, r9, r3
 8007ac2:	1aed      	subs	r5, r5, r3
 8007ac4:	1ad3      	subs	r3, r2, r3
 8007ac6:	9307      	str	r3, [sp, #28]
 8007ac8:	9b08      	ldr	r3, [sp, #32]
 8007aca:	b1eb      	cbz	r3, 8007b08 <_dtoa_r+0x778>
 8007acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d065      	beq.n	8007b9e <_dtoa_r+0x80e>
 8007ad2:	b18e      	cbz	r6, 8007af8 <_dtoa_r+0x768>
 8007ad4:	4639      	mov	r1, r7
 8007ad6:	4632      	mov	r2, r6
 8007ad8:	4620      	mov	r0, r4
 8007ada:	f000 fb9d 	bl	8008218 <__pow5mult>
 8007ade:	465a      	mov	r2, fp
 8007ae0:	4601      	mov	r1, r0
 8007ae2:	4607      	mov	r7, r0
 8007ae4:	4620      	mov	r0, r4
 8007ae6:	f000 fb02 	bl	80080ee <__multiply>
 8007aea:	4659      	mov	r1, fp
 8007aec:	900a      	str	r0, [sp, #40]	; 0x28
 8007aee:	4620      	mov	r0, r4
 8007af0:	f000 fa54 	bl	8007f9c <_Bfree>
 8007af4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007af6:	469b      	mov	fp, r3
 8007af8:	9b08      	ldr	r3, [sp, #32]
 8007afa:	1b9a      	subs	r2, r3, r6
 8007afc:	d004      	beq.n	8007b08 <_dtoa_r+0x778>
 8007afe:	4659      	mov	r1, fp
 8007b00:	4620      	mov	r0, r4
 8007b02:	f000 fb89 	bl	8008218 <__pow5mult>
 8007b06:	4683      	mov	fp, r0
 8007b08:	2101      	movs	r1, #1
 8007b0a:	4620      	mov	r0, r4
 8007b0c:	f000 fae6 	bl	80080dc <__i2b>
 8007b10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b12:	4606      	mov	r6, r0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f000 81c6 	beq.w	8007ea6 <_dtoa_r+0xb16>
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	4601      	mov	r1, r0
 8007b1e:	4620      	mov	r0, r4
 8007b20:	f000 fb7a 	bl	8008218 <__pow5mult>
 8007b24:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007b26:	4606      	mov	r6, r0
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	dc3e      	bgt.n	8007baa <_dtoa_r+0x81a>
 8007b2c:	9b02      	ldr	r3, [sp, #8]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d137      	bne.n	8007ba2 <_dtoa_r+0x812>
 8007b32:	9b03      	ldr	r3, [sp, #12]
 8007b34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d134      	bne.n	8007ba6 <_dtoa_r+0x816>
 8007b3c:	9b03      	ldr	r3, [sp, #12]
 8007b3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b42:	0d1b      	lsrs	r3, r3, #20
 8007b44:	051b      	lsls	r3, r3, #20
 8007b46:	b12b      	cbz	r3, 8007b54 <_dtoa_r+0x7c4>
 8007b48:	9b07      	ldr	r3, [sp, #28]
 8007b4a:	f109 0901 	add.w	r9, r9, #1
 8007b4e:	3301      	adds	r3, #1
 8007b50:	9307      	str	r3, [sp, #28]
 8007b52:	2301      	movs	r3, #1
 8007b54:	9308      	str	r3, [sp, #32]
 8007b56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d128      	bne.n	8007bae <_dtoa_r+0x81e>
 8007b5c:	2001      	movs	r0, #1
 8007b5e:	e02e      	b.n	8007bbe <_dtoa_r+0x82e>
 8007b60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007b62:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007b66:	e796      	b.n	8007a96 <_dtoa_r+0x706>
 8007b68:	9b08      	ldr	r3, [sp, #32]
 8007b6a:	f108 36ff 	add.w	r6, r8, #4294967295
 8007b6e:	42b3      	cmp	r3, r6
 8007b70:	bfb7      	itett	lt
 8007b72:	9b08      	ldrlt	r3, [sp, #32]
 8007b74:	1b9e      	subge	r6, r3, r6
 8007b76:	1af2      	sublt	r2, r6, r3
 8007b78:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8007b7a:	bfbf      	itttt	lt
 8007b7c:	9608      	strlt	r6, [sp, #32]
 8007b7e:	189b      	addlt	r3, r3, r2
 8007b80:	930c      	strlt	r3, [sp, #48]	; 0x30
 8007b82:	2600      	movlt	r6, #0
 8007b84:	f1b8 0f00 	cmp.w	r8, #0
 8007b88:	bfb9      	ittee	lt
 8007b8a:	eba9 0508 	sublt.w	r5, r9, r8
 8007b8e:	2300      	movlt	r3, #0
 8007b90:	464d      	movge	r5, r9
 8007b92:	4643      	movge	r3, r8
 8007b94:	e781      	b.n	8007a9a <_dtoa_r+0x70a>
 8007b96:	9e08      	ldr	r6, [sp, #32]
 8007b98:	464d      	mov	r5, r9
 8007b9a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007b9c:	e786      	b.n	8007aac <_dtoa_r+0x71c>
 8007b9e:	9a08      	ldr	r2, [sp, #32]
 8007ba0:	e7ad      	b.n	8007afe <_dtoa_r+0x76e>
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	e7d6      	b.n	8007b54 <_dtoa_r+0x7c4>
 8007ba6:	9b02      	ldr	r3, [sp, #8]
 8007ba8:	e7d4      	b.n	8007b54 <_dtoa_r+0x7c4>
 8007baa:	2300      	movs	r3, #0
 8007bac:	9308      	str	r3, [sp, #32]
 8007bae:	6933      	ldr	r3, [r6, #16]
 8007bb0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007bb4:	6918      	ldr	r0, [r3, #16]
 8007bb6:	f000 fa43 	bl	8008040 <__hi0bits>
 8007bba:	f1c0 0020 	rsb	r0, r0, #32
 8007bbe:	9b07      	ldr	r3, [sp, #28]
 8007bc0:	4418      	add	r0, r3
 8007bc2:	f010 001f 	ands.w	r0, r0, #31
 8007bc6:	d047      	beq.n	8007c58 <_dtoa_r+0x8c8>
 8007bc8:	f1c0 0320 	rsb	r3, r0, #32
 8007bcc:	2b04      	cmp	r3, #4
 8007bce:	dd3b      	ble.n	8007c48 <_dtoa_r+0x8b8>
 8007bd0:	9b07      	ldr	r3, [sp, #28]
 8007bd2:	f1c0 001c 	rsb	r0, r0, #28
 8007bd6:	4481      	add	r9, r0
 8007bd8:	4405      	add	r5, r0
 8007bda:	4403      	add	r3, r0
 8007bdc:	9307      	str	r3, [sp, #28]
 8007bde:	f1b9 0f00 	cmp.w	r9, #0
 8007be2:	dd05      	ble.n	8007bf0 <_dtoa_r+0x860>
 8007be4:	4659      	mov	r1, fp
 8007be6:	464a      	mov	r2, r9
 8007be8:	4620      	mov	r0, r4
 8007bea:	f000 fb63 	bl	80082b4 <__lshift>
 8007bee:	4683      	mov	fp, r0
 8007bf0:	9b07      	ldr	r3, [sp, #28]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	dd05      	ble.n	8007c02 <_dtoa_r+0x872>
 8007bf6:	4631      	mov	r1, r6
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	4620      	mov	r0, r4
 8007bfc:	f000 fb5a 	bl	80082b4 <__lshift>
 8007c00:	4606      	mov	r6, r0
 8007c02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c04:	b353      	cbz	r3, 8007c5c <_dtoa_r+0x8cc>
 8007c06:	4631      	mov	r1, r6
 8007c08:	4658      	mov	r0, fp
 8007c0a:	f000 fba7 	bl	800835c <__mcmp>
 8007c0e:	2800      	cmp	r0, #0
 8007c10:	da24      	bge.n	8007c5c <_dtoa_r+0x8cc>
 8007c12:	2300      	movs	r3, #0
 8007c14:	4659      	mov	r1, fp
 8007c16:	220a      	movs	r2, #10
 8007c18:	4620      	mov	r0, r4
 8007c1a:	f000 f9d6 	bl	8007fca <__multadd>
 8007c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c20:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c24:	4683      	mov	fp, r0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	f000 8144 	beq.w	8007eb4 <_dtoa_r+0xb24>
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	4639      	mov	r1, r7
 8007c30:	220a      	movs	r2, #10
 8007c32:	4620      	mov	r0, r4
 8007c34:	f000 f9c9 	bl	8007fca <__multadd>
 8007c38:	9b04      	ldr	r3, [sp, #16]
 8007c3a:	4607      	mov	r7, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	dc4d      	bgt.n	8007cdc <_dtoa_r+0x94c>
 8007c40:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007c42:	2b02      	cmp	r3, #2
 8007c44:	dd4a      	ble.n	8007cdc <_dtoa_r+0x94c>
 8007c46:	e011      	b.n	8007c6c <_dtoa_r+0x8dc>
 8007c48:	d0c9      	beq.n	8007bde <_dtoa_r+0x84e>
 8007c4a:	9a07      	ldr	r2, [sp, #28]
 8007c4c:	331c      	adds	r3, #28
 8007c4e:	441a      	add	r2, r3
 8007c50:	4499      	add	r9, r3
 8007c52:	441d      	add	r5, r3
 8007c54:	4613      	mov	r3, r2
 8007c56:	e7c1      	b.n	8007bdc <_dtoa_r+0x84c>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	e7f6      	b.n	8007c4a <_dtoa_r+0x8ba>
 8007c5c:	f1b8 0f00 	cmp.w	r8, #0
 8007c60:	dc36      	bgt.n	8007cd0 <_dtoa_r+0x940>
 8007c62:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	dd33      	ble.n	8007cd0 <_dtoa_r+0x940>
 8007c68:	f8cd 8010 	str.w	r8, [sp, #16]
 8007c6c:	9b04      	ldr	r3, [sp, #16]
 8007c6e:	b963      	cbnz	r3, 8007c8a <_dtoa_r+0x8fa>
 8007c70:	4631      	mov	r1, r6
 8007c72:	2205      	movs	r2, #5
 8007c74:	4620      	mov	r0, r4
 8007c76:	f000 f9a8 	bl	8007fca <__multadd>
 8007c7a:	4601      	mov	r1, r0
 8007c7c:	4606      	mov	r6, r0
 8007c7e:	4658      	mov	r0, fp
 8007c80:	f000 fb6c 	bl	800835c <__mcmp>
 8007c84:	2800      	cmp	r0, #0
 8007c86:	f73f add3 	bgt.w	8007830 <_dtoa_r+0x4a0>
 8007c8a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007c8c:	9d06      	ldr	r5, [sp, #24]
 8007c8e:	ea6f 0a03 	mvn.w	sl, r3
 8007c92:	f04f 0900 	mov.w	r9, #0
 8007c96:	4631      	mov	r1, r6
 8007c98:	4620      	mov	r0, r4
 8007c9a:	f000 f97f 	bl	8007f9c <_Bfree>
 8007c9e:	2f00      	cmp	r7, #0
 8007ca0:	f43f aebd 	beq.w	8007a1e <_dtoa_r+0x68e>
 8007ca4:	f1b9 0f00 	cmp.w	r9, #0
 8007ca8:	d005      	beq.n	8007cb6 <_dtoa_r+0x926>
 8007caa:	45b9      	cmp	r9, r7
 8007cac:	d003      	beq.n	8007cb6 <_dtoa_r+0x926>
 8007cae:	4649      	mov	r1, r9
 8007cb0:	4620      	mov	r0, r4
 8007cb2:	f000 f973 	bl	8007f9c <_Bfree>
 8007cb6:	4639      	mov	r1, r7
 8007cb8:	4620      	mov	r0, r4
 8007cba:	f000 f96f 	bl	8007f9c <_Bfree>
 8007cbe:	e6ae      	b.n	8007a1e <_dtoa_r+0x68e>
 8007cc0:	2600      	movs	r6, #0
 8007cc2:	4637      	mov	r7, r6
 8007cc4:	e7e1      	b.n	8007c8a <_dtoa_r+0x8fa>
 8007cc6:	46ba      	mov	sl, r7
 8007cc8:	4637      	mov	r7, r6
 8007cca:	e5b1      	b.n	8007830 <_dtoa_r+0x4a0>
 8007ccc:	40240000 	.word	0x40240000
 8007cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cd2:	f8cd 8010 	str.w	r8, [sp, #16]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	f000 80f3 	beq.w	8007ec2 <_dtoa_r+0xb32>
 8007cdc:	2d00      	cmp	r5, #0
 8007cde:	dd05      	ble.n	8007cec <_dtoa_r+0x95c>
 8007ce0:	4639      	mov	r1, r7
 8007ce2:	462a      	mov	r2, r5
 8007ce4:	4620      	mov	r0, r4
 8007ce6:	f000 fae5 	bl	80082b4 <__lshift>
 8007cea:	4607      	mov	r7, r0
 8007cec:	9b08      	ldr	r3, [sp, #32]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d04c      	beq.n	8007d8c <_dtoa_r+0x9fc>
 8007cf2:	6879      	ldr	r1, [r7, #4]
 8007cf4:	4620      	mov	r0, r4
 8007cf6:	f000 f91d 	bl	8007f34 <_Balloc>
 8007cfa:	4605      	mov	r5, r0
 8007cfc:	693a      	ldr	r2, [r7, #16]
 8007cfe:	f107 010c 	add.w	r1, r7, #12
 8007d02:	3202      	adds	r2, #2
 8007d04:	0092      	lsls	r2, r2, #2
 8007d06:	300c      	adds	r0, #12
 8007d08:	f7fe fd7a 	bl	8006800 <memcpy>
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	4629      	mov	r1, r5
 8007d10:	4620      	mov	r0, r4
 8007d12:	f000 facf 	bl	80082b4 <__lshift>
 8007d16:	46b9      	mov	r9, r7
 8007d18:	4607      	mov	r7, r0
 8007d1a:	9b06      	ldr	r3, [sp, #24]
 8007d1c:	9307      	str	r3, [sp, #28]
 8007d1e:	9b02      	ldr	r3, [sp, #8]
 8007d20:	f003 0301 	and.w	r3, r3, #1
 8007d24:	9308      	str	r3, [sp, #32]
 8007d26:	4631      	mov	r1, r6
 8007d28:	4658      	mov	r0, fp
 8007d2a:	f7ff faa3 	bl	8007274 <quorem>
 8007d2e:	4649      	mov	r1, r9
 8007d30:	4605      	mov	r5, r0
 8007d32:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007d36:	4658      	mov	r0, fp
 8007d38:	f000 fb10 	bl	800835c <__mcmp>
 8007d3c:	463a      	mov	r2, r7
 8007d3e:	9002      	str	r0, [sp, #8]
 8007d40:	4631      	mov	r1, r6
 8007d42:	4620      	mov	r0, r4
 8007d44:	f000 fb24 	bl	8008390 <__mdiff>
 8007d48:	68c3      	ldr	r3, [r0, #12]
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	bb03      	cbnz	r3, 8007d90 <_dtoa_r+0xa00>
 8007d4e:	4601      	mov	r1, r0
 8007d50:	9009      	str	r0, [sp, #36]	; 0x24
 8007d52:	4658      	mov	r0, fp
 8007d54:	f000 fb02 	bl	800835c <__mcmp>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d5c:	4611      	mov	r1, r2
 8007d5e:	4620      	mov	r0, r4
 8007d60:	9309      	str	r3, [sp, #36]	; 0x24
 8007d62:	f000 f91b 	bl	8007f9c <_Bfree>
 8007d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d68:	b9a3      	cbnz	r3, 8007d94 <_dtoa_r+0xa04>
 8007d6a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007d6c:	b992      	cbnz	r2, 8007d94 <_dtoa_r+0xa04>
 8007d6e:	9a08      	ldr	r2, [sp, #32]
 8007d70:	b982      	cbnz	r2, 8007d94 <_dtoa_r+0xa04>
 8007d72:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007d76:	d029      	beq.n	8007dcc <_dtoa_r+0xa3c>
 8007d78:	9b02      	ldr	r3, [sp, #8]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	dd01      	ble.n	8007d82 <_dtoa_r+0x9f2>
 8007d7e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007d82:	9b07      	ldr	r3, [sp, #28]
 8007d84:	1c5d      	adds	r5, r3, #1
 8007d86:	f883 8000 	strb.w	r8, [r3]
 8007d8a:	e784      	b.n	8007c96 <_dtoa_r+0x906>
 8007d8c:	4638      	mov	r0, r7
 8007d8e:	e7c2      	b.n	8007d16 <_dtoa_r+0x986>
 8007d90:	2301      	movs	r3, #1
 8007d92:	e7e3      	b.n	8007d5c <_dtoa_r+0x9cc>
 8007d94:	9a02      	ldr	r2, [sp, #8]
 8007d96:	2a00      	cmp	r2, #0
 8007d98:	db04      	blt.n	8007da4 <_dtoa_r+0xa14>
 8007d9a:	d123      	bne.n	8007de4 <_dtoa_r+0xa54>
 8007d9c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007d9e:	bb0a      	cbnz	r2, 8007de4 <_dtoa_r+0xa54>
 8007da0:	9a08      	ldr	r2, [sp, #32]
 8007da2:	b9fa      	cbnz	r2, 8007de4 <_dtoa_r+0xa54>
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	ddec      	ble.n	8007d82 <_dtoa_r+0x9f2>
 8007da8:	4659      	mov	r1, fp
 8007daa:	2201      	movs	r2, #1
 8007dac:	4620      	mov	r0, r4
 8007dae:	f000 fa81 	bl	80082b4 <__lshift>
 8007db2:	4631      	mov	r1, r6
 8007db4:	4683      	mov	fp, r0
 8007db6:	f000 fad1 	bl	800835c <__mcmp>
 8007dba:	2800      	cmp	r0, #0
 8007dbc:	dc03      	bgt.n	8007dc6 <_dtoa_r+0xa36>
 8007dbe:	d1e0      	bne.n	8007d82 <_dtoa_r+0x9f2>
 8007dc0:	f018 0f01 	tst.w	r8, #1
 8007dc4:	d0dd      	beq.n	8007d82 <_dtoa_r+0x9f2>
 8007dc6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007dca:	d1d8      	bne.n	8007d7e <_dtoa_r+0x9ee>
 8007dcc:	9b07      	ldr	r3, [sp, #28]
 8007dce:	9a07      	ldr	r2, [sp, #28]
 8007dd0:	1c5d      	adds	r5, r3, #1
 8007dd2:	2339      	movs	r3, #57	; 0x39
 8007dd4:	7013      	strb	r3, [r2, #0]
 8007dd6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007dda:	1e6a      	subs	r2, r5, #1
 8007ddc:	2b39      	cmp	r3, #57	; 0x39
 8007dde:	d04d      	beq.n	8007e7c <_dtoa_r+0xaec>
 8007de0:	3301      	adds	r3, #1
 8007de2:	e052      	b.n	8007e8a <_dtoa_r+0xafa>
 8007de4:	9a07      	ldr	r2, [sp, #28]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	f102 0501 	add.w	r5, r2, #1
 8007dec:	dd06      	ble.n	8007dfc <_dtoa_r+0xa6c>
 8007dee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007df2:	d0eb      	beq.n	8007dcc <_dtoa_r+0xa3c>
 8007df4:	f108 0801 	add.w	r8, r8, #1
 8007df8:	9b07      	ldr	r3, [sp, #28]
 8007dfa:	e7c4      	b.n	8007d86 <_dtoa_r+0x9f6>
 8007dfc:	9b06      	ldr	r3, [sp, #24]
 8007dfe:	9a04      	ldr	r2, [sp, #16]
 8007e00:	1aeb      	subs	r3, r5, r3
 8007e02:	4293      	cmp	r3, r2
 8007e04:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007e08:	d021      	beq.n	8007e4e <_dtoa_r+0xabe>
 8007e0a:	4659      	mov	r1, fp
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	220a      	movs	r2, #10
 8007e10:	4620      	mov	r0, r4
 8007e12:	f000 f8da 	bl	8007fca <__multadd>
 8007e16:	45b9      	cmp	r9, r7
 8007e18:	4683      	mov	fp, r0
 8007e1a:	f04f 0300 	mov.w	r3, #0
 8007e1e:	f04f 020a 	mov.w	r2, #10
 8007e22:	4649      	mov	r1, r9
 8007e24:	4620      	mov	r0, r4
 8007e26:	d105      	bne.n	8007e34 <_dtoa_r+0xaa4>
 8007e28:	f000 f8cf 	bl	8007fca <__multadd>
 8007e2c:	4681      	mov	r9, r0
 8007e2e:	4607      	mov	r7, r0
 8007e30:	9507      	str	r5, [sp, #28]
 8007e32:	e778      	b.n	8007d26 <_dtoa_r+0x996>
 8007e34:	f000 f8c9 	bl	8007fca <__multadd>
 8007e38:	4639      	mov	r1, r7
 8007e3a:	4681      	mov	r9, r0
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	220a      	movs	r2, #10
 8007e40:	4620      	mov	r0, r4
 8007e42:	f000 f8c2 	bl	8007fca <__multadd>
 8007e46:	4607      	mov	r7, r0
 8007e48:	e7f2      	b.n	8007e30 <_dtoa_r+0xaa0>
 8007e4a:	f04f 0900 	mov.w	r9, #0
 8007e4e:	4659      	mov	r1, fp
 8007e50:	2201      	movs	r2, #1
 8007e52:	4620      	mov	r0, r4
 8007e54:	f000 fa2e 	bl	80082b4 <__lshift>
 8007e58:	4631      	mov	r1, r6
 8007e5a:	4683      	mov	fp, r0
 8007e5c:	f000 fa7e 	bl	800835c <__mcmp>
 8007e60:	2800      	cmp	r0, #0
 8007e62:	dcb8      	bgt.n	8007dd6 <_dtoa_r+0xa46>
 8007e64:	d102      	bne.n	8007e6c <_dtoa_r+0xadc>
 8007e66:	f018 0f01 	tst.w	r8, #1
 8007e6a:	d1b4      	bne.n	8007dd6 <_dtoa_r+0xa46>
 8007e6c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007e70:	1e6a      	subs	r2, r5, #1
 8007e72:	2b30      	cmp	r3, #48	; 0x30
 8007e74:	f47f af0f 	bne.w	8007c96 <_dtoa_r+0x906>
 8007e78:	4615      	mov	r5, r2
 8007e7a:	e7f7      	b.n	8007e6c <_dtoa_r+0xadc>
 8007e7c:	9b06      	ldr	r3, [sp, #24]
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d105      	bne.n	8007e8e <_dtoa_r+0xafe>
 8007e82:	2331      	movs	r3, #49	; 0x31
 8007e84:	9a06      	ldr	r2, [sp, #24]
 8007e86:	f10a 0a01 	add.w	sl, sl, #1
 8007e8a:	7013      	strb	r3, [r2, #0]
 8007e8c:	e703      	b.n	8007c96 <_dtoa_r+0x906>
 8007e8e:	4615      	mov	r5, r2
 8007e90:	e7a1      	b.n	8007dd6 <_dtoa_r+0xa46>
 8007e92:	4b17      	ldr	r3, [pc, #92]	; (8007ef0 <_dtoa_r+0xb60>)
 8007e94:	f7ff bae1 	b.w	800745a <_dtoa_r+0xca>
 8007e98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	f47f aabb 	bne.w	8007416 <_dtoa_r+0x86>
 8007ea0:	4b14      	ldr	r3, [pc, #80]	; (8007ef4 <_dtoa_r+0xb64>)
 8007ea2:	f7ff bada 	b.w	800745a <_dtoa_r+0xca>
 8007ea6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	f77f ae3f 	ble.w	8007b2c <_dtoa_r+0x79c>
 8007eae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007eb0:	9308      	str	r3, [sp, #32]
 8007eb2:	e653      	b.n	8007b5c <_dtoa_r+0x7cc>
 8007eb4:	9b04      	ldr	r3, [sp, #16]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	dc03      	bgt.n	8007ec2 <_dtoa_r+0xb32>
 8007eba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007ebc:	2b02      	cmp	r3, #2
 8007ebe:	f73f aed5 	bgt.w	8007c6c <_dtoa_r+0x8dc>
 8007ec2:	9d06      	ldr	r5, [sp, #24]
 8007ec4:	4631      	mov	r1, r6
 8007ec6:	4658      	mov	r0, fp
 8007ec8:	f7ff f9d4 	bl	8007274 <quorem>
 8007ecc:	9b06      	ldr	r3, [sp, #24]
 8007ece:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007ed2:	f805 8b01 	strb.w	r8, [r5], #1
 8007ed6:	9a04      	ldr	r2, [sp, #16]
 8007ed8:	1aeb      	subs	r3, r5, r3
 8007eda:	429a      	cmp	r2, r3
 8007edc:	ddb5      	ble.n	8007e4a <_dtoa_r+0xaba>
 8007ede:	4659      	mov	r1, fp
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	220a      	movs	r2, #10
 8007ee4:	4620      	mov	r0, r4
 8007ee6:	f000 f870 	bl	8007fca <__multadd>
 8007eea:	4683      	mov	fp, r0
 8007eec:	e7ea      	b.n	8007ec4 <_dtoa_r+0xb34>
 8007eee:	bf00      	nop
 8007ef0:	08009eee 	.word	0x08009eee
 8007ef4:	08009f12 	.word	0x08009f12

08007ef8 <_localeconv_r>:
 8007ef8:	4b04      	ldr	r3, [pc, #16]	; (8007f0c <_localeconv_r+0x14>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	6a18      	ldr	r0, [r3, #32]
 8007efe:	4b04      	ldr	r3, [pc, #16]	; (8007f10 <_localeconv_r+0x18>)
 8007f00:	2800      	cmp	r0, #0
 8007f02:	bf08      	it	eq
 8007f04:	4618      	moveq	r0, r3
 8007f06:	30f0      	adds	r0, #240	; 0xf0
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	20000028 	.word	0x20000028
 8007f10:	2000008c 	.word	0x2000008c

08007f14 <memchr>:
 8007f14:	b510      	push	{r4, lr}
 8007f16:	b2c9      	uxtb	r1, r1
 8007f18:	4402      	add	r2, r0
 8007f1a:	4290      	cmp	r0, r2
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	d101      	bne.n	8007f24 <memchr+0x10>
 8007f20:	2300      	movs	r3, #0
 8007f22:	e003      	b.n	8007f2c <memchr+0x18>
 8007f24:	781c      	ldrb	r4, [r3, #0]
 8007f26:	3001      	adds	r0, #1
 8007f28:	428c      	cmp	r4, r1
 8007f2a:	d1f6      	bne.n	8007f1a <memchr+0x6>
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	bd10      	pop	{r4, pc}

08007f30 <__malloc_lock>:
 8007f30:	4770      	bx	lr

08007f32 <__malloc_unlock>:
 8007f32:	4770      	bx	lr

08007f34 <_Balloc>:
 8007f34:	b570      	push	{r4, r5, r6, lr}
 8007f36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007f38:	4604      	mov	r4, r0
 8007f3a:	460e      	mov	r6, r1
 8007f3c:	b93d      	cbnz	r5, 8007f4e <_Balloc+0x1a>
 8007f3e:	2010      	movs	r0, #16
 8007f40:	f7fe fc4e 	bl	80067e0 <malloc>
 8007f44:	6260      	str	r0, [r4, #36]	; 0x24
 8007f46:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007f4a:	6005      	str	r5, [r0, #0]
 8007f4c:	60c5      	str	r5, [r0, #12]
 8007f4e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007f50:	68eb      	ldr	r3, [r5, #12]
 8007f52:	b183      	cbz	r3, 8007f76 <_Balloc+0x42>
 8007f54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007f5c:	b9b8      	cbnz	r0, 8007f8e <_Balloc+0x5a>
 8007f5e:	2101      	movs	r1, #1
 8007f60:	fa01 f506 	lsl.w	r5, r1, r6
 8007f64:	1d6a      	adds	r2, r5, #5
 8007f66:	0092      	lsls	r2, r2, #2
 8007f68:	4620      	mov	r0, r4
 8007f6a:	f000 fabe 	bl	80084ea <_calloc_r>
 8007f6e:	b160      	cbz	r0, 8007f8a <_Balloc+0x56>
 8007f70:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007f74:	e00e      	b.n	8007f94 <_Balloc+0x60>
 8007f76:	2221      	movs	r2, #33	; 0x21
 8007f78:	2104      	movs	r1, #4
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	f000 fab5 	bl	80084ea <_calloc_r>
 8007f80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f82:	60e8      	str	r0, [r5, #12]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d1e4      	bne.n	8007f54 <_Balloc+0x20>
 8007f8a:	2000      	movs	r0, #0
 8007f8c:	bd70      	pop	{r4, r5, r6, pc}
 8007f8e:	6802      	ldr	r2, [r0, #0]
 8007f90:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007f94:	2300      	movs	r3, #0
 8007f96:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f9a:	e7f7      	b.n	8007f8c <_Balloc+0x58>

08007f9c <_Bfree>:
 8007f9c:	b570      	push	{r4, r5, r6, lr}
 8007f9e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007fa0:	4606      	mov	r6, r0
 8007fa2:	460d      	mov	r5, r1
 8007fa4:	b93c      	cbnz	r4, 8007fb6 <_Bfree+0x1a>
 8007fa6:	2010      	movs	r0, #16
 8007fa8:	f7fe fc1a 	bl	80067e0 <malloc>
 8007fac:	6270      	str	r0, [r6, #36]	; 0x24
 8007fae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007fb2:	6004      	str	r4, [r0, #0]
 8007fb4:	60c4      	str	r4, [r0, #12]
 8007fb6:	b13d      	cbz	r5, 8007fc8 <_Bfree+0x2c>
 8007fb8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007fba:	686a      	ldr	r2, [r5, #4]
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007fc2:	6029      	str	r1, [r5, #0]
 8007fc4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007fc8:	bd70      	pop	{r4, r5, r6, pc}

08007fca <__multadd>:
 8007fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fce:	461f      	mov	r7, r3
 8007fd0:	4606      	mov	r6, r0
 8007fd2:	460c      	mov	r4, r1
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	690d      	ldr	r5, [r1, #16]
 8007fd8:	f101 0c14 	add.w	ip, r1, #20
 8007fdc:	f8dc 0000 	ldr.w	r0, [ip]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	b281      	uxth	r1, r0
 8007fe4:	fb02 7101 	mla	r1, r2, r1, r7
 8007fe8:	0c00      	lsrs	r0, r0, #16
 8007fea:	0c0f      	lsrs	r7, r1, #16
 8007fec:	fb02 7000 	mla	r0, r2, r0, r7
 8007ff0:	b289      	uxth	r1, r1
 8007ff2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007ff6:	429d      	cmp	r5, r3
 8007ff8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007ffc:	f84c 1b04 	str.w	r1, [ip], #4
 8008000:	dcec      	bgt.n	8007fdc <__multadd+0x12>
 8008002:	b1d7      	cbz	r7, 800803a <__multadd+0x70>
 8008004:	68a3      	ldr	r3, [r4, #8]
 8008006:	42ab      	cmp	r3, r5
 8008008:	dc12      	bgt.n	8008030 <__multadd+0x66>
 800800a:	6861      	ldr	r1, [r4, #4]
 800800c:	4630      	mov	r0, r6
 800800e:	3101      	adds	r1, #1
 8008010:	f7ff ff90 	bl	8007f34 <_Balloc>
 8008014:	4680      	mov	r8, r0
 8008016:	6922      	ldr	r2, [r4, #16]
 8008018:	f104 010c 	add.w	r1, r4, #12
 800801c:	3202      	adds	r2, #2
 800801e:	0092      	lsls	r2, r2, #2
 8008020:	300c      	adds	r0, #12
 8008022:	f7fe fbed 	bl	8006800 <memcpy>
 8008026:	4621      	mov	r1, r4
 8008028:	4630      	mov	r0, r6
 800802a:	f7ff ffb7 	bl	8007f9c <_Bfree>
 800802e:	4644      	mov	r4, r8
 8008030:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008034:	3501      	adds	r5, #1
 8008036:	615f      	str	r7, [r3, #20]
 8008038:	6125      	str	r5, [r4, #16]
 800803a:	4620      	mov	r0, r4
 800803c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008040 <__hi0bits>:
 8008040:	0c02      	lsrs	r2, r0, #16
 8008042:	0412      	lsls	r2, r2, #16
 8008044:	4603      	mov	r3, r0
 8008046:	b9b2      	cbnz	r2, 8008076 <__hi0bits+0x36>
 8008048:	0403      	lsls	r3, r0, #16
 800804a:	2010      	movs	r0, #16
 800804c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008050:	bf04      	itt	eq
 8008052:	021b      	lsleq	r3, r3, #8
 8008054:	3008      	addeq	r0, #8
 8008056:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800805a:	bf04      	itt	eq
 800805c:	011b      	lsleq	r3, r3, #4
 800805e:	3004      	addeq	r0, #4
 8008060:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008064:	bf04      	itt	eq
 8008066:	009b      	lsleq	r3, r3, #2
 8008068:	3002      	addeq	r0, #2
 800806a:	2b00      	cmp	r3, #0
 800806c:	db06      	blt.n	800807c <__hi0bits+0x3c>
 800806e:	005b      	lsls	r3, r3, #1
 8008070:	d503      	bpl.n	800807a <__hi0bits+0x3a>
 8008072:	3001      	adds	r0, #1
 8008074:	4770      	bx	lr
 8008076:	2000      	movs	r0, #0
 8008078:	e7e8      	b.n	800804c <__hi0bits+0xc>
 800807a:	2020      	movs	r0, #32
 800807c:	4770      	bx	lr

0800807e <__lo0bits>:
 800807e:	6803      	ldr	r3, [r0, #0]
 8008080:	4601      	mov	r1, r0
 8008082:	f013 0207 	ands.w	r2, r3, #7
 8008086:	d00b      	beq.n	80080a0 <__lo0bits+0x22>
 8008088:	07da      	lsls	r2, r3, #31
 800808a:	d423      	bmi.n	80080d4 <__lo0bits+0x56>
 800808c:	0798      	lsls	r0, r3, #30
 800808e:	bf49      	itett	mi
 8008090:	085b      	lsrmi	r3, r3, #1
 8008092:	089b      	lsrpl	r3, r3, #2
 8008094:	2001      	movmi	r0, #1
 8008096:	600b      	strmi	r3, [r1, #0]
 8008098:	bf5c      	itt	pl
 800809a:	600b      	strpl	r3, [r1, #0]
 800809c:	2002      	movpl	r0, #2
 800809e:	4770      	bx	lr
 80080a0:	b298      	uxth	r0, r3
 80080a2:	b9a8      	cbnz	r0, 80080d0 <__lo0bits+0x52>
 80080a4:	2010      	movs	r0, #16
 80080a6:	0c1b      	lsrs	r3, r3, #16
 80080a8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80080ac:	bf04      	itt	eq
 80080ae:	0a1b      	lsreq	r3, r3, #8
 80080b0:	3008      	addeq	r0, #8
 80080b2:	071a      	lsls	r2, r3, #28
 80080b4:	bf04      	itt	eq
 80080b6:	091b      	lsreq	r3, r3, #4
 80080b8:	3004      	addeq	r0, #4
 80080ba:	079a      	lsls	r2, r3, #30
 80080bc:	bf04      	itt	eq
 80080be:	089b      	lsreq	r3, r3, #2
 80080c0:	3002      	addeq	r0, #2
 80080c2:	07da      	lsls	r2, r3, #31
 80080c4:	d402      	bmi.n	80080cc <__lo0bits+0x4e>
 80080c6:	085b      	lsrs	r3, r3, #1
 80080c8:	d006      	beq.n	80080d8 <__lo0bits+0x5a>
 80080ca:	3001      	adds	r0, #1
 80080cc:	600b      	str	r3, [r1, #0]
 80080ce:	4770      	bx	lr
 80080d0:	4610      	mov	r0, r2
 80080d2:	e7e9      	b.n	80080a8 <__lo0bits+0x2a>
 80080d4:	2000      	movs	r0, #0
 80080d6:	4770      	bx	lr
 80080d8:	2020      	movs	r0, #32
 80080da:	4770      	bx	lr

080080dc <__i2b>:
 80080dc:	b510      	push	{r4, lr}
 80080de:	460c      	mov	r4, r1
 80080e0:	2101      	movs	r1, #1
 80080e2:	f7ff ff27 	bl	8007f34 <_Balloc>
 80080e6:	2201      	movs	r2, #1
 80080e8:	6144      	str	r4, [r0, #20]
 80080ea:	6102      	str	r2, [r0, #16]
 80080ec:	bd10      	pop	{r4, pc}

080080ee <__multiply>:
 80080ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f2:	4614      	mov	r4, r2
 80080f4:	690a      	ldr	r2, [r1, #16]
 80080f6:	6923      	ldr	r3, [r4, #16]
 80080f8:	4688      	mov	r8, r1
 80080fa:	429a      	cmp	r2, r3
 80080fc:	bfbe      	ittt	lt
 80080fe:	460b      	movlt	r3, r1
 8008100:	46a0      	movlt	r8, r4
 8008102:	461c      	movlt	r4, r3
 8008104:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008108:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800810c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008110:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008114:	eb07 0609 	add.w	r6, r7, r9
 8008118:	42b3      	cmp	r3, r6
 800811a:	bfb8      	it	lt
 800811c:	3101      	addlt	r1, #1
 800811e:	f7ff ff09 	bl	8007f34 <_Balloc>
 8008122:	f100 0514 	add.w	r5, r0, #20
 8008126:	462b      	mov	r3, r5
 8008128:	2200      	movs	r2, #0
 800812a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800812e:	4573      	cmp	r3, lr
 8008130:	d316      	bcc.n	8008160 <__multiply+0x72>
 8008132:	f104 0214 	add.w	r2, r4, #20
 8008136:	f108 0114 	add.w	r1, r8, #20
 800813a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800813e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008142:	9300      	str	r3, [sp, #0]
 8008144:	9b00      	ldr	r3, [sp, #0]
 8008146:	9201      	str	r2, [sp, #4]
 8008148:	4293      	cmp	r3, r2
 800814a:	d80c      	bhi.n	8008166 <__multiply+0x78>
 800814c:	2e00      	cmp	r6, #0
 800814e:	dd03      	ble.n	8008158 <__multiply+0x6a>
 8008150:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008154:	2b00      	cmp	r3, #0
 8008156:	d05d      	beq.n	8008214 <__multiply+0x126>
 8008158:	6106      	str	r6, [r0, #16]
 800815a:	b003      	add	sp, #12
 800815c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008160:	f843 2b04 	str.w	r2, [r3], #4
 8008164:	e7e3      	b.n	800812e <__multiply+0x40>
 8008166:	f8b2 b000 	ldrh.w	fp, [r2]
 800816a:	f1bb 0f00 	cmp.w	fp, #0
 800816e:	d023      	beq.n	80081b8 <__multiply+0xca>
 8008170:	4689      	mov	r9, r1
 8008172:	46ac      	mov	ip, r5
 8008174:	f04f 0800 	mov.w	r8, #0
 8008178:	f859 4b04 	ldr.w	r4, [r9], #4
 800817c:	f8dc a000 	ldr.w	sl, [ip]
 8008180:	b2a3      	uxth	r3, r4
 8008182:	fa1f fa8a 	uxth.w	sl, sl
 8008186:	fb0b a303 	mla	r3, fp, r3, sl
 800818a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800818e:	f8dc 4000 	ldr.w	r4, [ip]
 8008192:	4443      	add	r3, r8
 8008194:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008198:	fb0b 840a 	mla	r4, fp, sl, r8
 800819c:	46e2      	mov	sl, ip
 800819e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80081a8:	454f      	cmp	r7, r9
 80081aa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80081ae:	f84a 3b04 	str.w	r3, [sl], #4
 80081b2:	d82b      	bhi.n	800820c <__multiply+0x11e>
 80081b4:	f8cc 8004 	str.w	r8, [ip, #4]
 80081b8:	9b01      	ldr	r3, [sp, #4]
 80081ba:	3204      	adds	r2, #4
 80081bc:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80081c0:	f1ba 0f00 	cmp.w	sl, #0
 80081c4:	d020      	beq.n	8008208 <__multiply+0x11a>
 80081c6:	4689      	mov	r9, r1
 80081c8:	46a8      	mov	r8, r5
 80081ca:	f04f 0b00 	mov.w	fp, #0
 80081ce:	682b      	ldr	r3, [r5, #0]
 80081d0:	f8b9 c000 	ldrh.w	ip, [r9]
 80081d4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80081d8:	b29b      	uxth	r3, r3
 80081da:	fb0a 440c 	mla	r4, sl, ip, r4
 80081de:	46c4      	mov	ip, r8
 80081e0:	445c      	add	r4, fp
 80081e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80081e6:	f84c 3b04 	str.w	r3, [ip], #4
 80081ea:	f859 3b04 	ldr.w	r3, [r9], #4
 80081ee:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80081f2:	0c1b      	lsrs	r3, r3, #16
 80081f4:	fb0a b303 	mla	r3, sl, r3, fp
 80081f8:	454f      	cmp	r7, r9
 80081fa:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80081fe:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008202:	d805      	bhi.n	8008210 <__multiply+0x122>
 8008204:	f8c8 3004 	str.w	r3, [r8, #4]
 8008208:	3504      	adds	r5, #4
 800820a:	e79b      	b.n	8008144 <__multiply+0x56>
 800820c:	46d4      	mov	ip, sl
 800820e:	e7b3      	b.n	8008178 <__multiply+0x8a>
 8008210:	46e0      	mov	r8, ip
 8008212:	e7dd      	b.n	80081d0 <__multiply+0xe2>
 8008214:	3e01      	subs	r6, #1
 8008216:	e799      	b.n	800814c <__multiply+0x5e>

08008218 <__pow5mult>:
 8008218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800821c:	4615      	mov	r5, r2
 800821e:	f012 0203 	ands.w	r2, r2, #3
 8008222:	4606      	mov	r6, r0
 8008224:	460f      	mov	r7, r1
 8008226:	d007      	beq.n	8008238 <__pow5mult+0x20>
 8008228:	4c21      	ldr	r4, [pc, #132]	; (80082b0 <__pow5mult+0x98>)
 800822a:	3a01      	subs	r2, #1
 800822c:	2300      	movs	r3, #0
 800822e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008232:	f7ff feca 	bl	8007fca <__multadd>
 8008236:	4607      	mov	r7, r0
 8008238:	10ad      	asrs	r5, r5, #2
 800823a:	d035      	beq.n	80082a8 <__pow5mult+0x90>
 800823c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800823e:	b93c      	cbnz	r4, 8008250 <__pow5mult+0x38>
 8008240:	2010      	movs	r0, #16
 8008242:	f7fe facd 	bl	80067e0 <malloc>
 8008246:	6270      	str	r0, [r6, #36]	; 0x24
 8008248:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800824c:	6004      	str	r4, [r0, #0]
 800824e:	60c4      	str	r4, [r0, #12]
 8008250:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008254:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008258:	b94c      	cbnz	r4, 800826e <__pow5mult+0x56>
 800825a:	f240 2171 	movw	r1, #625	; 0x271
 800825e:	4630      	mov	r0, r6
 8008260:	f7ff ff3c 	bl	80080dc <__i2b>
 8008264:	2300      	movs	r3, #0
 8008266:	4604      	mov	r4, r0
 8008268:	f8c8 0008 	str.w	r0, [r8, #8]
 800826c:	6003      	str	r3, [r0, #0]
 800826e:	f04f 0800 	mov.w	r8, #0
 8008272:	07eb      	lsls	r3, r5, #31
 8008274:	d50a      	bpl.n	800828c <__pow5mult+0x74>
 8008276:	4639      	mov	r1, r7
 8008278:	4622      	mov	r2, r4
 800827a:	4630      	mov	r0, r6
 800827c:	f7ff ff37 	bl	80080ee <__multiply>
 8008280:	4681      	mov	r9, r0
 8008282:	4639      	mov	r1, r7
 8008284:	4630      	mov	r0, r6
 8008286:	f7ff fe89 	bl	8007f9c <_Bfree>
 800828a:	464f      	mov	r7, r9
 800828c:	106d      	asrs	r5, r5, #1
 800828e:	d00b      	beq.n	80082a8 <__pow5mult+0x90>
 8008290:	6820      	ldr	r0, [r4, #0]
 8008292:	b938      	cbnz	r0, 80082a4 <__pow5mult+0x8c>
 8008294:	4622      	mov	r2, r4
 8008296:	4621      	mov	r1, r4
 8008298:	4630      	mov	r0, r6
 800829a:	f7ff ff28 	bl	80080ee <__multiply>
 800829e:	6020      	str	r0, [r4, #0]
 80082a0:	f8c0 8000 	str.w	r8, [r0]
 80082a4:	4604      	mov	r4, r0
 80082a6:	e7e4      	b.n	8008272 <__pow5mult+0x5a>
 80082a8:	4638      	mov	r0, r7
 80082aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082ae:	bf00      	nop
 80082b0:	0800a010 	.word	0x0800a010

080082b4 <__lshift>:
 80082b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082b8:	460c      	mov	r4, r1
 80082ba:	4607      	mov	r7, r0
 80082bc:	4616      	mov	r6, r2
 80082be:	6923      	ldr	r3, [r4, #16]
 80082c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80082c4:	eb0a 0903 	add.w	r9, sl, r3
 80082c8:	6849      	ldr	r1, [r1, #4]
 80082ca:	68a3      	ldr	r3, [r4, #8]
 80082cc:	f109 0501 	add.w	r5, r9, #1
 80082d0:	42ab      	cmp	r3, r5
 80082d2:	db32      	blt.n	800833a <__lshift+0x86>
 80082d4:	4638      	mov	r0, r7
 80082d6:	f7ff fe2d 	bl	8007f34 <_Balloc>
 80082da:	2300      	movs	r3, #0
 80082dc:	4680      	mov	r8, r0
 80082de:	461a      	mov	r2, r3
 80082e0:	f100 0114 	add.w	r1, r0, #20
 80082e4:	4553      	cmp	r3, sl
 80082e6:	db2b      	blt.n	8008340 <__lshift+0x8c>
 80082e8:	6920      	ldr	r0, [r4, #16]
 80082ea:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80082ee:	f104 0314 	add.w	r3, r4, #20
 80082f2:	f016 021f 	ands.w	r2, r6, #31
 80082f6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80082fa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80082fe:	d025      	beq.n	800834c <__lshift+0x98>
 8008300:	2000      	movs	r0, #0
 8008302:	f1c2 0e20 	rsb	lr, r2, #32
 8008306:	468a      	mov	sl, r1
 8008308:	681e      	ldr	r6, [r3, #0]
 800830a:	4096      	lsls	r6, r2
 800830c:	4330      	orrs	r0, r6
 800830e:	f84a 0b04 	str.w	r0, [sl], #4
 8008312:	f853 0b04 	ldr.w	r0, [r3], #4
 8008316:	459c      	cmp	ip, r3
 8008318:	fa20 f00e 	lsr.w	r0, r0, lr
 800831c:	d814      	bhi.n	8008348 <__lshift+0x94>
 800831e:	6048      	str	r0, [r1, #4]
 8008320:	b108      	cbz	r0, 8008326 <__lshift+0x72>
 8008322:	f109 0502 	add.w	r5, r9, #2
 8008326:	3d01      	subs	r5, #1
 8008328:	4638      	mov	r0, r7
 800832a:	f8c8 5010 	str.w	r5, [r8, #16]
 800832e:	4621      	mov	r1, r4
 8008330:	f7ff fe34 	bl	8007f9c <_Bfree>
 8008334:	4640      	mov	r0, r8
 8008336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800833a:	3101      	adds	r1, #1
 800833c:	005b      	lsls	r3, r3, #1
 800833e:	e7c7      	b.n	80082d0 <__lshift+0x1c>
 8008340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008344:	3301      	adds	r3, #1
 8008346:	e7cd      	b.n	80082e4 <__lshift+0x30>
 8008348:	4651      	mov	r1, sl
 800834a:	e7dc      	b.n	8008306 <__lshift+0x52>
 800834c:	3904      	subs	r1, #4
 800834e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008352:	459c      	cmp	ip, r3
 8008354:	f841 2f04 	str.w	r2, [r1, #4]!
 8008358:	d8f9      	bhi.n	800834e <__lshift+0x9a>
 800835a:	e7e4      	b.n	8008326 <__lshift+0x72>

0800835c <__mcmp>:
 800835c:	6903      	ldr	r3, [r0, #16]
 800835e:	690a      	ldr	r2, [r1, #16]
 8008360:	b530      	push	{r4, r5, lr}
 8008362:	1a9b      	subs	r3, r3, r2
 8008364:	d10c      	bne.n	8008380 <__mcmp+0x24>
 8008366:	0092      	lsls	r2, r2, #2
 8008368:	3014      	adds	r0, #20
 800836a:	3114      	adds	r1, #20
 800836c:	1884      	adds	r4, r0, r2
 800836e:	4411      	add	r1, r2
 8008370:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008374:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008378:	4295      	cmp	r5, r2
 800837a:	d003      	beq.n	8008384 <__mcmp+0x28>
 800837c:	d305      	bcc.n	800838a <__mcmp+0x2e>
 800837e:	2301      	movs	r3, #1
 8008380:	4618      	mov	r0, r3
 8008382:	bd30      	pop	{r4, r5, pc}
 8008384:	42a0      	cmp	r0, r4
 8008386:	d3f3      	bcc.n	8008370 <__mcmp+0x14>
 8008388:	e7fa      	b.n	8008380 <__mcmp+0x24>
 800838a:	f04f 33ff 	mov.w	r3, #4294967295
 800838e:	e7f7      	b.n	8008380 <__mcmp+0x24>

08008390 <__mdiff>:
 8008390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008394:	460d      	mov	r5, r1
 8008396:	4607      	mov	r7, r0
 8008398:	4611      	mov	r1, r2
 800839a:	4628      	mov	r0, r5
 800839c:	4614      	mov	r4, r2
 800839e:	f7ff ffdd 	bl	800835c <__mcmp>
 80083a2:	1e06      	subs	r6, r0, #0
 80083a4:	d108      	bne.n	80083b8 <__mdiff+0x28>
 80083a6:	4631      	mov	r1, r6
 80083a8:	4638      	mov	r0, r7
 80083aa:	f7ff fdc3 	bl	8007f34 <_Balloc>
 80083ae:	2301      	movs	r3, #1
 80083b0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80083b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083b8:	bfa4      	itt	ge
 80083ba:	4623      	movge	r3, r4
 80083bc:	462c      	movge	r4, r5
 80083be:	4638      	mov	r0, r7
 80083c0:	6861      	ldr	r1, [r4, #4]
 80083c2:	bfa6      	itte	ge
 80083c4:	461d      	movge	r5, r3
 80083c6:	2600      	movge	r6, #0
 80083c8:	2601      	movlt	r6, #1
 80083ca:	f7ff fdb3 	bl	8007f34 <_Balloc>
 80083ce:	f04f 0e00 	mov.w	lr, #0
 80083d2:	60c6      	str	r6, [r0, #12]
 80083d4:	692b      	ldr	r3, [r5, #16]
 80083d6:	6926      	ldr	r6, [r4, #16]
 80083d8:	f104 0214 	add.w	r2, r4, #20
 80083dc:	f105 0914 	add.w	r9, r5, #20
 80083e0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80083e4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80083e8:	f100 0114 	add.w	r1, r0, #20
 80083ec:	f852 ab04 	ldr.w	sl, [r2], #4
 80083f0:	f859 5b04 	ldr.w	r5, [r9], #4
 80083f4:	fa1f f38a 	uxth.w	r3, sl
 80083f8:	4473      	add	r3, lr
 80083fa:	b2ac      	uxth	r4, r5
 80083fc:	1b1b      	subs	r3, r3, r4
 80083fe:	0c2c      	lsrs	r4, r5, #16
 8008400:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8008404:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8008408:	b29b      	uxth	r3, r3
 800840a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800840e:	45c8      	cmp	r8, r9
 8008410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008414:	4694      	mov	ip, r2
 8008416:	f841 4b04 	str.w	r4, [r1], #4
 800841a:	d8e7      	bhi.n	80083ec <__mdiff+0x5c>
 800841c:	45bc      	cmp	ip, r7
 800841e:	d304      	bcc.n	800842a <__mdiff+0x9a>
 8008420:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008424:	b183      	cbz	r3, 8008448 <__mdiff+0xb8>
 8008426:	6106      	str	r6, [r0, #16]
 8008428:	e7c4      	b.n	80083b4 <__mdiff+0x24>
 800842a:	f85c 4b04 	ldr.w	r4, [ip], #4
 800842e:	b2a2      	uxth	r2, r4
 8008430:	4472      	add	r2, lr
 8008432:	1413      	asrs	r3, r2, #16
 8008434:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008438:	b292      	uxth	r2, r2
 800843a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800843e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008442:	f841 2b04 	str.w	r2, [r1], #4
 8008446:	e7e9      	b.n	800841c <__mdiff+0x8c>
 8008448:	3e01      	subs	r6, #1
 800844a:	e7e9      	b.n	8008420 <__mdiff+0x90>

0800844c <__d2b>:
 800844c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008450:	461c      	mov	r4, r3
 8008452:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8008456:	2101      	movs	r1, #1
 8008458:	4690      	mov	r8, r2
 800845a:	f7ff fd6b 	bl	8007f34 <_Balloc>
 800845e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8008462:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008466:	4607      	mov	r7, r0
 8008468:	bb34      	cbnz	r4, 80084b8 <__d2b+0x6c>
 800846a:	9201      	str	r2, [sp, #4]
 800846c:	f1b8 0200 	subs.w	r2, r8, #0
 8008470:	d027      	beq.n	80084c2 <__d2b+0x76>
 8008472:	a802      	add	r0, sp, #8
 8008474:	f840 2d08 	str.w	r2, [r0, #-8]!
 8008478:	f7ff fe01 	bl	800807e <__lo0bits>
 800847c:	9900      	ldr	r1, [sp, #0]
 800847e:	b1f0      	cbz	r0, 80084be <__d2b+0x72>
 8008480:	9a01      	ldr	r2, [sp, #4]
 8008482:	f1c0 0320 	rsb	r3, r0, #32
 8008486:	fa02 f303 	lsl.w	r3, r2, r3
 800848a:	430b      	orrs	r3, r1
 800848c:	40c2      	lsrs	r2, r0
 800848e:	617b      	str	r3, [r7, #20]
 8008490:	9201      	str	r2, [sp, #4]
 8008492:	9b01      	ldr	r3, [sp, #4]
 8008494:	2b00      	cmp	r3, #0
 8008496:	bf14      	ite	ne
 8008498:	2102      	movne	r1, #2
 800849a:	2101      	moveq	r1, #1
 800849c:	61bb      	str	r3, [r7, #24]
 800849e:	6139      	str	r1, [r7, #16]
 80084a0:	b1c4      	cbz	r4, 80084d4 <__d2b+0x88>
 80084a2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80084a6:	4404      	add	r4, r0
 80084a8:	6034      	str	r4, [r6, #0]
 80084aa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80084ae:	6028      	str	r0, [r5, #0]
 80084b0:	4638      	mov	r0, r7
 80084b2:	b002      	add	sp, #8
 80084b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084b8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80084bc:	e7d5      	b.n	800846a <__d2b+0x1e>
 80084be:	6179      	str	r1, [r7, #20]
 80084c0:	e7e7      	b.n	8008492 <__d2b+0x46>
 80084c2:	a801      	add	r0, sp, #4
 80084c4:	f7ff fddb 	bl	800807e <__lo0bits>
 80084c8:	2101      	movs	r1, #1
 80084ca:	9b01      	ldr	r3, [sp, #4]
 80084cc:	6139      	str	r1, [r7, #16]
 80084ce:	617b      	str	r3, [r7, #20]
 80084d0:	3020      	adds	r0, #32
 80084d2:	e7e5      	b.n	80084a0 <__d2b+0x54>
 80084d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80084d8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80084dc:	6030      	str	r0, [r6, #0]
 80084de:	6918      	ldr	r0, [r3, #16]
 80084e0:	f7ff fdae 	bl	8008040 <__hi0bits>
 80084e4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80084e8:	e7e1      	b.n	80084ae <__d2b+0x62>

080084ea <_calloc_r>:
 80084ea:	b538      	push	{r3, r4, r5, lr}
 80084ec:	fb02 f401 	mul.w	r4, r2, r1
 80084f0:	4621      	mov	r1, r4
 80084f2:	f7fe f9e5 	bl	80068c0 <_malloc_r>
 80084f6:	4605      	mov	r5, r0
 80084f8:	b118      	cbz	r0, 8008502 <_calloc_r+0x18>
 80084fa:	4622      	mov	r2, r4
 80084fc:	2100      	movs	r1, #0
 80084fe:	f7fe f98a 	bl	8006816 <memset>
 8008502:	4628      	mov	r0, r5
 8008504:	bd38      	pop	{r3, r4, r5, pc}

08008506 <__ssputs_r>:
 8008506:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800850a:	688e      	ldr	r6, [r1, #8]
 800850c:	4682      	mov	sl, r0
 800850e:	429e      	cmp	r6, r3
 8008510:	460c      	mov	r4, r1
 8008512:	4690      	mov	r8, r2
 8008514:	4699      	mov	r9, r3
 8008516:	d837      	bhi.n	8008588 <__ssputs_r+0x82>
 8008518:	898a      	ldrh	r2, [r1, #12]
 800851a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800851e:	d031      	beq.n	8008584 <__ssputs_r+0x7e>
 8008520:	2302      	movs	r3, #2
 8008522:	6825      	ldr	r5, [r4, #0]
 8008524:	6909      	ldr	r1, [r1, #16]
 8008526:	1a6f      	subs	r7, r5, r1
 8008528:	6965      	ldr	r5, [r4, #20]
 800852a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800852e:	fb95 f5f3 	sdiv	r5, r5, r3
 8008532:	f109 0301 	add.w	r3, r9, #1
 8008536:	443b      	add	r3, r7
 8008538:	429d      	cmp	r5, r3
 800853a:	bf38      	it	cc
 800853c:	461d      	movcc	r5, r3
 800853e:	0553      	lsls	r3, r2, #21
 8008540:	d530      	bpl.n	80085a4 <__ssputs_r+0x9e>
 8008542:	4629      	mov	r1, r5
 8008544:	f7fe f9bc 	bl	80068c0 <_malloc_r>
 8008548:	4606      	mov	r6, r0
 800854a:	b950      	cbnz	r0, 8008562 <__ssputs_r+0x5c>
 800854c:	230c      	movs	r3, #12
 800854e:	f04f 30ff 	mov.w	r0, #4294967295
 8008552:	f8ca 3000 	str.w	r3, [sl]
 8008556:	89a3      	ldrh	r3, [r4, #12]
 8008558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800855c:	81a3      	strh	r3, [r4, #12]
 800855e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008562:	463a      	mov	r2, r7
 8008564:	6921      	ldr	r1, [r4, #16]
 8008566:	f7fe f94b 	bl	8006800 <memcpy>
 800856a:	89a3      	ldrh	r3, [r4, #12]
 800856c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008574:	81a3      	strh	r3, [r4, #12]
 8008576:	6126      	str	r6, [r4, #16]
 8008578:	443e      	add	r6, r7
 800857a:	6026      	str	r6, [r4, #0]
 800857c:	464e      	mov	r6, r9
 800857e:	6165      	str	r5, [r4, #20]
 8008580:	1bed      	subs	r5, r5, r7
 8008582:	60a5      	str	r5, [r4, #8]
 8008584:	454e      	cmp	r6, r9
 8008586:	d900      	bls.n	800858a <__ssputs_r+0x84>
 8008588:	464e      	mov	r6, r9
 800858a:	4632      	mov	r2, r6
 800858c:	4641      	mov	r1, r8
 800858e:	6820      	ldr	r0, [r4, #0]
 8008590:	f000 f91e 	bl	80087d0 <memmove>
 8008594:	68a3      	ldr	r3, [r4, #8]
 8008596:	2000      	movs	r0, #0
 8008598:	1b9b      	subs	r3, r3, r6
 800859a:	60a3      	str	r3, [r4, #8]
 800859c:	6823      	ldr	r3, [r4, #0]
 800859e:	441e      	add	r6, r3
 80085a0:	6026      	str	r6, [r4, #0]
 80085a2:	e7dc      	b.n	800855e <__ssputs_r+0x58>
 80085a4:	462a      	mov	r2, r5
 80085a6:	f000 f92c 	bl	8008802 <_realloc_r>
 80085aa:	4606      	mov	r6, r0
 80085ac:	2800      	cmp	r0, #0
 80085ae:	d1e2      	bne.n	8008576 <__ssputs_r+0x70>
 80085b0:	6921      	ldr	r1, [r4, #16]
 80085b2:	4650      	mov	r0, sl
 80085b4:	f7fe f938 	bl	8006828 <_free_r>
 80085b8:	e7c8      	b.n	800854c <__ssputs_r+0x46>
	...

080085bc <_svfiprintf_r>:
 80085bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085c0:	461d      	mov	r5, r3
 80085c2:	898b      	ldrh	r3, [r1, #12]
 80085c4:	b09d      	sub	sp, #116	; 0x74
 80085c6:	061f      	lsls	r7, r3, #24
 80085c8:	4680      	mov	r8, r0
 80085ca:	460c      	mov	r4, r1
 80085cc:	4616      	mov	r6, r2
 80085ce:	d50f      	bpl.n	80085f0 <_svfiprintf_r+0x34>
 80085d0:	690b      	ldr	r3, [r1, #16]
 80085d2:	b96b      	cbnz	r3, 80085f0 <_svfiprintf_r+0x34>
 80085d4:	2140      	movs	r1, #64	; 0x40
 80085d6:	f7fe f973 	bl	80068c0 <_malloc_r>
 80085da:	6020      	str	r0, [r4, #0]
 80085dc:	6120      	str	r0, [r4, #16]
 80085de:	b928      	cbnz	r0, 80085ec <_svfiprintf_r+0x30>
 80085e0:	230c      	movs	r3, #12
 80085e2:	f8c8 3000 	str.w	r3, [r8]
 80085e6:	f04f 30ff 	mov.w	r0, #4294967295
 80085ea:	e0c8      	b.n	800877e <_svfiprintf_r+0x1c2>
 80085ec:	2340      	movs	r3, #64	; 0x40
 80085ee:	6163      	str	r3, [r4, #20]
 80085f0:	2300      	movs	r3, #0
 80085f2:	9309      	str	r3, [sp, #36]	; 0x24
 80085f4:	2320      	movs	r3, #32
 80085f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085fa:	2330      	movs	r3, #48	; 0x30
 80085fc:	f04f 0b01 	mov.w	fp, #1
 8008600:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008604:	9503      	str	r5, [sp, #12]
 8008606:	4637      	mov	r7, r6
 8008608:	463d      	mov	r5, r7
 800860a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800860e:	b10b      	cbz	r3, 8008614 <_svfiprintf_r+0x58>
 8008610:	2b25      	cmp	r3, #37	; 0x25
 8008612:	d13e      	bne.n	8008692 <_svfiprintf_r+0xd6>
 8008614:	ebb7 0a06 	subs.w	sl, r7, r6
 8008618:	d00b      	beq.n	8008632 <_svfiprintf_r+0x76>
 800861a:	4653      	mov	r3, sl
 800861c:	4632      	mov	r2, r6
 800861e:	4621      	mov	r1, r4
 8008620:	4640      	mov	r0, r8
 8008622:	f7ff ff70 	bl	8008506 <__ssputs_r>
 8008626:	3001      	adds	r0, #1
 8008628:	f000 80a4 	beq.w	8008774 <_svfiprintf_r+0x1b8>
 800862c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800862e:	4453      	add	r3, sl
 8008630:	9309      	str	r3, [sp, #36]	; 0x24
 8008632:	783b      	ldrb	r3, [r7, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	f000 809d 	beq.w	8008774 <_svfiprintf_r+0x1b8>
 800863a:	2300      	movs	r3, #0
 800863c:	f04f 32ff 	mov.w	r2, #4294967295
 8008640:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008644:	9304      	str	r3, [sp, #16]
 8008646:	9307      	str	r3, [sp, #28]
 8008648:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800864c:	931a      	str	r3, [sp, #104]	; 0x68
 800864e:	462f      	mov	r7, r5
 8008650:	2205      	movs	r2, #5
 8008652:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008656:	4850      	ldr	r0, [pc, #320]	; (8008798 <_svfiprintf_r+0x1dc>)
 8008658:	f7ff fc5c 	bl	8007f14 <memchr>
 800865c:	9b04      	ldr	r3, [sp, #16]
 800865e:	b9d0      	cbnz	r0, 8008696 <_svfiprintf_r+0xda>
 8008660:	06d9      	lsls	r1, r3, #27
 8008662:	bf44      	itt	mi
 8008664:	2220      	movmi	r2, #32
 8008666:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800866a:	071a      	lsls	r2, r3, #28
 800866c:	bf44      	itt	mi
 800866e:	222b      	movmi	r2, #43	; 0x2b
 8008670:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008674:	782a      	ldrb	r2, [r5, #0]
 8008676:	2a2a      	cmp	r2, #42	; 0x2a
 8008678:	d015      	beq.n	80086a6 <_svfiprintf_r+0xea>
 800867a:	462f      	mov	r7, r5
 800867c:	2000      	movs	r0, #0
 800867e:	250a      	movs	r5, #10
 8008680:	9a07      	ldr	r2, [sp, #28]
 8008682:	4639      	mov	r1, r7
 8008684:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008688:	3b30      	subs	r3, #48	; 0x30
 800868a:	2b09      	cmp	r3, #9
 800868c:	d94d      	bls.n	800872a <_svfiprintf_r+0x16e>
 800868e:	b1b8      	cbz	r0, 80086c0 <_svfiprintf_r+0x104>
 8008690:	e00f      	b.n	80086b2 <_svfiprintf_r+0xf6>
 8008692:	462f      	mov	r7, r5
 8008694:	e7b8      	b.n	8008608 <_svfiprintf_r+0x4c>
 8008696:	4a40      	ldr	r2, [pc, #256]	; (8008798 <_svfiprintf_r+0x1dc>)
 8008698:	463d      	mov	r5, r7
 800869a:	1a80      	subs	r0, r0, r2
 800869c:	fa0b f000 	lsl.w	r0, fp, r0
 80086a0:	4318      	orrs	r0, r3
 80086a2:	9004      	str	r0, [sp, #16]
 80086a4:	e7d3      	b.n	800864e <_svfiprintf_r+0x92>
 80086a6:	9a03      	ldr	r2, [sp, #12]
 80086a8:	1d11      	adds	r1, r2, #4
 80086aa:	6812      	ldr	r2, [r2, #0]
 80086ac:	9103      	str	r1, [sp, #12]
 80086ae:	2a00      	cmp	r2, #0
 80086b0:	db01      	blt.n	80086b6 <_svfiprintf_r+0xfa>
 80086b2:	9207      	str	r2, [sp, #28]
 80086b4:	e004      	b.n	80086c0 <_svfiprintf_r+0x104>
 80086b6:	4252      	negs	r2, r2
 80086b8:	f043 0302 	orr.w	r3, r3, #2
 80086bc:	9207      	str	r2, [sp, #28]
 80086be:	9304      	str	r3, [sp, #16]
 80086c0:	783b      	ldrb	r3, [r7, #0]
 80086c2:	2b2e      	cmp	r3, #46	; 0x2e
 80086c4:	d10c      	bne.n	80086e0 <_svfiprintf_r+0x124>
 80086c6:	787b      	ldrb	r3, [r7, #1]
 80086c8:	2b2a      	cmp	r3, #42	; 0x2a
 80086ca:	d133      	bne.n	8008734 <_svfiprintf_r+0x178>
 80086cc:	9b03      	ldr	r3, [sp, #12]
 80086ce:	3702      	adds	r7, #2
 80086d0:	1d1a      	adds	r2, r3, #4
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	9203      	str	r2, [sp, #12]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	bfb8      	it	lt
 80086da:	f04f 33ff 	movlt.w	r3, #4294967295
 80086de:	9305      	str	r3, [sp, #20]
 80086e0:	4d2e      	ldr	r5, [pc, #184]	; (800879c <_svfiprintf_r+0x1e0>)
 80086e2:	2203      	movs	r2, #3
 80086e4:	7839      	ldrb	r1, [r7, #0]
 80086e6:	4628      	mov	r0, r5
 80086e8:	f7ff fc14 	bl	8007f14 <memchr>
 80086ec:	b138      	cbz	r0, 80086fe <_svfiprintf_r+0x142>
 80086ee:	2340      	movs	r3, #64	; 0x40
 80086f0:	1b40      	subs	r0, r0, r5
 80086f2:	fa03 f000 	lsl.w	r0, r3, r0
 80086f6:	9b04      	ldr	r3, [sp, #16]
 80086f8:	3701      	adds	r7, #1
 80086fa:	4303      	orrs	r3, r0
 80086fc:	9304      	str	r3, [sp, #16]
 80086fe:	7839      	ldrb	r1, [r7, #0]
 8008700:	2206      	movs	r2, #6
 8008702:	4827      	ldr	r0, [pc, #156]	; (80087a0 <_svfiprintf_r+0x1e4>)
 8008704:	1c7e      	adds	r6, r7, #1
 8008706:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800870a:	f7ff fc03 	bl	8007f14 <memchr>
 800870e:	2800      	cmp	r0, #0
 8008710:	d038      	beq.n	8008784 <_svfiprintf_r+0x1c8>
 8008712:	4b24      	ldr	r3, [pc, #144]	; (80087a4 <_svfiprintf_r+0x1e8>)
 8008714:	bb13      	cbnz	r3, 800875c <_svfiprintf_r+0x1a0>
 8008716:	9b03      	ldr	r3, [sp, #12]
 8008718:	3307      	adds	r3, #7
 800871a:	f023 0307 	bic.w	r3, r3, #7
 800871e:	3308      	adds	r3, #8
 8008720:	9303      	str	r3, [sp, #12]
 8008722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008724:	444b      	add	r3, r9
 8008726:	9309      	str	r3, [sp, #36]	; 0x24
 8008728:	e76d      	b.n	8008606 <_svfiprintf_r+0x4a>
 800872a:	fb05 3202 	mla	r2, r5, r2, r3
 800872e:	2001      	movs	r0, #1
 8008730:	460f      	mov	r7, r1
 8008732:	e7a6      	b.n	8008682 <_svfiprintf_r+0xc6>
 8008734:	2300      	movs	r3, #0
 8008736:	250a      	movs	r5, #10
 8008738:	4619      	mov	r1, r3
 800873a:	3701      	adds	r7, #1
 800873c:	9305      	str	r3, [sp, #20]
 800873e:	4638      	mov	r0, r7
 8008740:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008744:	3a30      	subs	r2, #48	; 0x30
 8008746:	2a09      	cmp	r2, #9
 8008748:	d903      	bls.n	8008752 <_svfiprintf_r+0x196>
 800874a:	2b00      	cmp	r3, #0
 800874c:	d0c8      	beq.n	80086e0 <_svfiprintf_r+0x124>
 800874e:	9105      	str	r1, [sp, #20]
 8008750:	e7c6      	b.n	80086e0 <_svfiprintf_r+0x124>
 8008752:	fb05 2101 	mla	r1, r5, r1, r2
 8008756:	2301      	movs	r3, #1
 8008758:	4607      	mov	r7, r0
 800875a:	e7f0      	b.n	800873e <_svfiprintf_r+0x182>
 800875c:	ab03      	add	r3, sp, #12
 800875e:	9300      	str	r3, [sp, #0]
 8008760:	4622      	mov	r2, r4
 8008762:	4b11      	ldr	r3, [pc, #68]	; (80087a8 <_svfiprintf_r+0x1ec>)
 8008764:	a904      	add	r1, sp, #16
 8008766:	4640      	mov	r0, r8
 8008768:	f7fe f996 	bl	8006a98 <_printf_float>
 800876c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008770:	4681      	mov	r9, r0
 8008772:	d1d6      	bne.n	8008722 <_svfiprintf_r+0x166>
 8008774:	89a3      	ldrh	r3, [r4, #12]
 8008776:	065b      	lsls	r3, r3, #25
 8008778:	f53f af35 	bmi.w	80085e6 <_svfiprintf_r+0x2a>
 800877c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800877e:	b01d      	add	sp, #116	; 0x74
 8008780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008784:	ab03      	add	r3, sp, #12
 8008786:	9300      	str	r3, [sp, #0]
 8008788:	4622      	mov	r2, r4
 800878a:	4b07      	ldr	r3, [pc, #28]	; (80087a8 <_svfiprintf_r+0x1ec>)
 800878c:	a904      	add	r1, sp, #16
 800878e:	4640      	mov	r0, r8
 8008790:	f7fe fc2e 	bl	8006ff0 <_printf_i>
 8008794:	e7ea      	b.n	800876c <_svfiprintf_r+0x1b0>
 8008796:	bf00      	nop
 8008798:	0800a01c 	.word	0x0800a01c
 800879c:	0800a022 	.word	0x0800a022
 80087a0:	0800a026 	.word	0x0800a026
 80087a4:	08006a99 	.word	0x08006a99
 80087a8:	08008507 	.word	0x08008507

080087ac <__ascii_mbtowc>:
 80087ac:	b082      	sub	sp, #8
 80087ae:	b901      	cbnz	r1, 80087b2 <__ascii_mbtowc+0x6>
 80087b0:	a901      	add	r1, sp, #4
 80087b2:	b142      	cbz	r2, 80087c6 <__ascii_mbtowc+0x1a>
 80087b4:	b14b      	cbz	r3, 80087ca <__ascii_mbtowc+0x1e>
 80087b6:	7813      	ldrb	r3, [r2, #0]
 80087b8:	600b      	str	r3, [r1, #0]
 80087ba:	7812      	ldrb	r2, [r2, #0]
 80087bc:	1c10      	adds	r0, r2, #0
 80087be:	bf18      	it	ne
 80087c0:	2001      	movne	r0, #1
 80087c2:	b002      	add	sp, #8
 80087c4:	4770      	bx	lr
 80087c6:	4610      	mov	r0, r2
 80087c8:	e7fb      	b.n	80087c2 <__ascii_mbtowc+0x16>
 80087ca:	f06f 0001 	mvn.w	r0, #1
 80087ce:	e7f8      	b.n	80087c2 <__ascii_mbtowc+0x16>

080087d0 <memmove>:
 80087d0:	4288      	cmp	r0, r1
 80087d2:	b510      	push	{r4, lr}
 80087d4:	eb01 0302 	add.w	r3, r1, r2
 80087d8:	d807      	bhi.n	80087ea <memmove+0x1a>
 80087da:	1e42      	subs	r2, r0, #1
 80087dc:	4299      	cmp	r1, r3
 80087de:	d00a      	beq.n	80087f6 <memmove+0x26>
 80087e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087e4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80087e8:	e7f8      	b.n	80087dc <memmove+0xc>
 80087ea:	4283      	cmp	r3, r0
 80087ec:	d9f5      	bls.n	80087da <memmove+0xa>
 80087ee:	1881      	adds	r1, r0, r2
 80087f0:	1ad2      	subs	r2, r2, r3
 80087f2:	42d3      	cmn	r3, r2
 80087f4:	d100      	bne.n	80087f8 <memmove+0x28>
 80087f6:	bd10      	pop	{r4, pc}
 80087f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80087fc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008800:	e7f7      	b.n	80087f2 <memmove+0x22>

08008802 <_realloc_r>:
 8008802:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008804:	4607      	mov	r7, r0
 8008806:	4614      	mov	r4, r2
 8008808:	460e      	mov	r6, r1
 800880a:	b921      	cbnz	r1, 8008816 <_realloc_r+0x14>
 800880c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008810:	4611      	mov	r1, r2
 8008812:	f7fe b855 	b.w	80068c0 <_malloc_r>
 8008816:	b922      	cbnz	r2, 8008822 <_realloc_r+0x20>
 8008818:	f7fe f806 	bl	8006828 <_free_r>
 800881c:	4625      	mov	r5, r4
 800881e:	4628      	mov	r0, r5
 8008820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008822:	f000 f821 	bl	8008868 <_malloc_usable_size_r>
 8008826:	42a0      	cmp	r0, r4
 8008828:	d20f      	bcs.n	800884a <_realloc_r+0x48>
 800882a:	4621      	mov	r1, r4
 800882c:	4638      	mov	r0, r7
 800882e:	f7fe f847 	bl	80068c0 <_malloc_r>
 8008832:	4605      	mov	r5, r0
 8008834:	2800      	cmp	r0, #0
 8008836:	d0f2      	beq.n	800881e <_realloc_r+0x1c>
 8008838:	4631      	mov	r1, r6
 800883a:	4622      	mov	r2, r4
 800883c:	f7fd ffe0 	bl	8006800 <memcpy>
 8008840:	4631      	mov	r1, r6
 8008842:	4638      	mov	r0, r7
 8008844:	f7fd fff0 	bl	8006828 <_free_r>
 8008848:	e7e9      	b.n	800881e <_realloc_r+0x1c>
 800884a:	4635      	mov	r5, r6
 800884c:	e7e7      	b.n	800881e <_realloc_r+0x1c>

0800884e <__ascii_wctomb>:
 800884e:	b149      	cbz	r1, 8008864 <__ascii_wctomb+0x16>
 8008850:	2aff      	cmp	r2, #255	; 0xff
 8008852:	bf8b      	itete	hi
 8008854:	238a      	movhi	r3, #138	; 0x8a
 8008856:	700a      	strbls	r2, [r1, #0]
 8008858:	6003      	strhi	r3, [r0, #0]
 800885a:	2001      	movls	r0, #1
 800885c:	bf88      	it	hi
 800885e:	f04f 30ff 	movhi.w	r0, #4294967295
 8008862:	4770      	bx	lr
 8008864:	4608      	mov	r0, r1
 8008866:	4770      	bx	lr

08008868 <_malloc_usable_size_r>:
 8008868:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800886c:	1f18      	subs	r0, r3, #4
 800886e:	2b00      	cmp	r3, #0
 8008870:	bfbc      	itt	lt
 8008872:	580b      	ldrlt	r3, [r1, r0]
 8008874:	18c0      	addlt	r0, r0, r3
 8008876:	4770      	bx	lr

08008878 <_init>:
 8008878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800887a:	bf00      	nop
 800887c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800887e:	bc08      	pop	{r3}
 8008880:	469e      	mov	lr, r3
 8008882:	4770      	bx	lr

08008884 <_fini>:
 8008884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008886:	bf00      	nop
 8008888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800888a:	bc08      	pop	{r3}
 800888c:	469e      	mov	lr, r3
 800888e:	4770      	bx	lr
