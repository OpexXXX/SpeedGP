
SpeedGPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8a0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001390  0800b9b0  0800b9b0  0001b9b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd40  0800cd40  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800cd40  0800cd40  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cd40  0800cd40  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800cd40  0800cd40  0001cd40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd48  0800cd48  0001cd48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800cd4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000044b8  200001f4  0800cf40  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200046ac  0800cf40  000246ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000309ce  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005dbd  00000000  00000000  00050beb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000195ee  00000000  00000000  000569a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001858  00000000  00000000  0006ff98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002630  00000000  00000000  000717f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001b6c6  00000000  00000000  00073e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00017ef6  00000000  00000000  0008f4e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0008a164  00000000  00000000  000a73dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00131540  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005698  00000000  00000000  001315bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b998 	.word	0x0800b998

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	0800b998 	.word	0x0800b998

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b44:	f1a2 0201 	sub.w	r2, r2, #1
 8000b48:	d1ed      	bne.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <_Z13BuzzerSetFreqt>:


void BuzzerSetFreq(uint16_t freq)
{

	TIM2->PSC = (48000000  / ((BUZZER_VOLUME_MAX*2)*freq)) - 1; //prescaller
 8000f44:	23fa      	movs	r3, #250	; 0xfa
 8000f46:	4343      	muls	r3, r0
 8000f48:	4803      	ldr	r0, [pc, #12]	; (8000f58 <_Z13BuzzerSetFreqt+0x14>)
 8000f4a:	fb90 f0f3 	sdiv	r0, r0, r3
 8000f4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f52:	3801      	subs	r0, #1
 8000f54:	6298      	str	r0, [r3, #40]	; 0x28
}
 8000f56:	4770      	bx	lr
 8000f58:	02dc6c00 	.word	0x02dc6c00

08000f5c <_Z15BuzzerSetVolumet>:
void BuzzerSetVolume(uint16_t volume)
{
	if(volume > BUZZER_VOLUME_MAX)
		volume = BUZZER_VOLUME_MAX;

	TIM2->CCR1 = volume;
 8000f5c:	287d      	cmp	r0, #125	; 0x7d
 8000f5e:	bf28      	it	cs
 8000f60:	207d      	movcs	r0, #125	; 0x7d
 8000f62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f66:	6358      	str	r0, [r3, #52]	; 0x34
}
 8000f68:	4770      	bx	lr
	...

08000f6c <I2C_Write>:
#define YA_OFFSET_H         0x7A
#define YA_OFFSET_L         0x7B
#define ZA_OFFSET_H         0x7D
#define ZA_OFFSET_L         0x7E
I2C_HandleTypeDef* ihandle;
IIC_Result I2C_Write(uint8_t device_address, uint8_t register_address, uint8_t data) {
 8000f6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Format array to send */
	d[0] = register_address;
	d[1] = data;

	/* Try to transmit via I2C */
	if (HAL_I2C_Master_Transmit(ihandle, (uint16_t)device_address, (uint8_t *)d, 2, 1000) != HAL_OK) {
 8000f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f72:	4c09      	ldr	r4, [pc, #36]	; (8000f98 <I2C_Write+0x2c>)
	d[0] = register_address;
 8000f74:	f88d 100c 	strb.w	r1, [sp, #12]
	d[1] = data;
 8000f78:	f88d 200d 	strb.w	r2, [sp, #13]
	if (HAL_I2C_Master_Transmit(ihandle, (uint16_t)device_address, (uint8_t *)d, 2, 1000) != HAL_OK) {
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	4601      	mov	r1, r0
 8000f80:	2302      	movs	r3, #2
 8000f82:	aa03      	add	r2, sp, #12
 8000f84:	6820      	ldr	r0, [r4, #0]
 8000f86:	f002 fb89 	bl	800369c <HAL_I2C_Master_Transmit>
 8000f8a:	b118      	cbz	r0, 8000f94 <I2C_Write+0x28>
		/* Check error */
		if (HAL_I2C_GetError(ihandle) != HAL_I2C_ERROR_AF) {
 8000f8c:	6820      	ldr	r0, [r4, #0]
 8000f8e:	f002 ff07 	bl	8003da0 <HAL_I2C_GetError>
 8000f92:	2001      	movs	r0, #1
	}

	/* Return OK */

	return IIC_Result_Ok;
}
 8000f94:	b004      	add	sp, #16
 8000f96:	bd10      	pop	{r4, pc}
 8000f98:	20000210 	.word	0x20000210

08000f9c <I2C_ReadMulti>:

IIC_Result I2C_ReadMulti(uint8_t device_address, uint8_t register_address, uint8_t* data, uint16_t count) {
 8000f9c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}

	/* Send register address */
	if (HAL_I2C_Master_Transmit(ihandle, (uint16_t)device_address, &register_address, 1, 1000) != HAL_OK) {
 8000fa0:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8000fa4:	4c0f      	ldr	r4, [pc, #60]	; (8000fe4 <I2C_ReadMulti+0x48>)
IIC_Result I2C_ReadMulti(uint8_t device_address, uint8_t register_address, uint8_t* data, uint16_t count) {
 8000fa6:	4617      	mov	r7, r2
 8000fa8:	aa04      	add	r2, sp, #16
 8000faa:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8000fae:	4698      	mov	r8, r3
	if (HAL_I2C_Master_Transmit(ihandle, (uint16_t)device_address, &register_address, 1, 1000) != HAL_OK) {
 8000fb0:	4605      	mov	r5, r0
 8000fb2:	4601      	mov	r1, r0
 8000fb4:	9600      	str	r6, [sp, #0]
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	6820      	ldr	r0, [r4, #0]
 8000fba:	f002 fb6f 	bl	800369c <HAL_I2C_Master_Transmit>
 8000fbe:	b120      	cbz	r0, 8000fca <I2C_ReadMulti+0x2e>
		return IIC_Result_Error;
	}
	/* Receive multiple byte */
	if (HAL_I2C_Master_Receive(ihandle, device_address, data, count, 1000) != HAL_OK) {
		/* Check error */
		if (HAL_I2C_GetError(ihandle) != HAL_I2C_ERROR_AF) {
 8000fc0:	6820      	ldr	r0, [r4, #0]
 8000fc2:	f002 feed 	bl	8003da0 <HAL_I2C_GetError>
 8000fc6:	2001      	movs	r0, #1
 8000fc8:	e008      	b.n	8000fdc <I2C_ReadMulti+0x40>
	if (HAL_I2C_Master_Receive(ihandle, device_address, data, count, 1000) != HAL_OK) {
 8000fca:	9600      	str	r6, [sp, #0]
 8000fcc:	4643      	mov	r3, r8
 8000fce:	463a      	mov	r2, r7
 8000fd0:	4629      	mov	r1, r5
 8000fd2:	6820      	ldr	r0, [r4, #0]
 8000fd4:	f002 fc30 	bl	8003838 <HAL_I2C_Master_Receive>
 8000fd8:	2800      	cmp	r0, #0
 8000fda:	d1f1      	bne.n	8000fc0 <I2C_ReadMulti+0x24>
	}

	/* Return OK */

	return IIC_Result_Ok;
}
 8000fdc:	b004      	add	sp, #16
 8000fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000210 	.word	0x20000210

08000fe8 <I2C_Read>:
IIC_Result I2C_Read(uint8_t device_address, uint8_t register_address, uint8_t* data) {
 8000fe8:	b5f0      	push	{r4, r5, r6, r7, lr}

	/* Send address */

	if (HAL_I2C_Master_Transmit(ihandle, (uint16_t)device_address, &register_address, 1, 1000) != HAL_OK) {
 8000fea:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
IIC_Result I2C_Read(uint8_t device_address, uint8_t register_address, uint8_t* data) {
 8000fee:	b085      	sub	sp, #20
	if (HAL_I2C_Master_Transmit(ihandle, (uint16_t)device_address, &register_address, 1, 1000) != HAL_OK) {
 8000ff0:	4c0e      	ldr	r4, [pc, #56]	; (800102c <I2C_Read+0x44>)
IIC_Result I2C_Read(uint8_t device_address, uint8_t register_address, uint8_t* data) {
 8000ff2:	4617      	mov	r7, r2
 8000ff4:	aa04      	add	r2, sp, #16
 8000ff6:	f802 1d01 	strb.w	r1, [r2, #-1]!
	if (HAL_I2C_Master_Transmit(ihandle, (uint16_t)device_address, &register_address, 1, 1000) != HAL_OK) {
 8000ffa:	4605      	mov	r5, r0
 8000ffc:	4601      	mov	r1, r0
 8000ffe:	9600      	str	r6, [sp, #0]
 8001000:	2301      	movs	r3, #1
 8001002:	6820      	ldr	r0, [r4, #0]
 8001004:	f002 fb4a 	bl	800369c <HAL_I2C_Master_Transmit>
 8001008:	b120      	cbz	r0, 8001014 <I2C_Read+0x2c>
		if (HAL_I2C_GetError(ihandle) != HAL_I2C_ERROR_AF) {
 800100a:	6820      	ldr	r0, [r4, #0]
 800100c:	f002 fec8 	bl	8003da0 <HAL_I2C_GetError>
 8001010:	2001      	movs	r0, #1
 8001012:	e008      	b.n	8001026 <I2C_Read+0x3e>

		return IIC_Result_Error;
	}

	/* Receive multiple byte */
	if (HAL_I2C_Master_Receive(ihandle, device_address, data, 1, 1000) != HAL_OK) {
 8001014:	9600      	str	r6, [sp, #0]
 8001016:	2301      	movs	r3, #1
 8001018:	463a      	mov	r2, r7
 800101a:	4629      	mov	r1, r5
 800101c:	6820      	ldr	r0, [r4, #0]
 800101e:	f002 fc0b 	bl	8003838 <HAL_I2C_Master_Receive>
 8001022:	2800      	cmp	r0, #0
 8001024:	d1f1      	bne.n	800100a <I2C_Read+0x22>
	}

	/* Return OK */

	return IIC_Result_Ok;
}
 8001026:	b005      	add	sp, #20
 8001028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102a:	bf00      	nop
 800102c:	20000210 	.word	0x20000210

08001030 <I2C_IsDeviceConnected>:

IIC_Result I2C_IsDeviceConnected(uint8_t device_address) {

	/* Check if device is ready for communication */
	if (HAL_I2C_IsDeviceReady(ihandle, device_address, 2, 5) != HAL_OK) {
 8001030:	4601      	mov	r1, r0
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <I2C_IsDeviceConnected+0x18>)
IIC_Result I2C_IsDeviceConnected(uint8_t device_address) {
 8001034:	b508      	push	{r3, lr}
	if (HAL_I2C_IsDeviceReady(ihandle, device_address, 2, 5) != HAL_OK) {
 8001036:	2202      	movs	r2, #2
 8001038:	2305      	movs	r3, #5
 800103a:	6800      	ldr	r0, [r0, #0]
 800103c:	f002 fe06 	bl	8003c4c <HAL_I2C_IsDeviceReady>
	}

	/* Return OK */

	return IIC_Result_Ok;
}
 8001040:	3000      	adds	r0, #0
 8001042:	bf18      	it	ne
 8001044:	2001      	movne	r0, #1
 8001046:	bd08      	pop	{r3, pc}
 8001048:	20000210 	.word	0x20000210

0800104c <MPU9250_Init>:

TM_MPU9250_Result_t MPU9250_Init(I2C_HandleTypeDef* handle,TM_MPU9250_t* MPU9250, TM_MPU9250_Device_t dev) {
	ihandle = handle;
 800104c:	4b59      	ldr	r3, [pc, #356]	; (80011b4 <MPU9250_Init+0x168>)
TM_MPU9250_Result_t MPU9250_Init(I2C_HandleTypeDef* handle,TM_MPU9250_t* MPU9250, TM_MPU9250_Device_t dev) {
 800104e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ihandle = handle;
 8001050:	6018      	str	r0, [r3, #0]
	 uint8_t data;

	    /* Set values */
	    MPU9250->I2C_Addr = MPU9250_I2C_ADDR | (uint8_t)dev;
	    MPU9250->I2C_Addr_Mag = MPU9250_I2C_ADDR_MAG;
 8001052:	2318      	movs	r3, #24
	    MPU9250->I2C_Addr = MPU9250_I2C_ADDR | (uint8_t)dev;
 8001054:	f042 00d0 	orr.w	r0, r2, #208	; 0xd0
 8001058:	f881 0044 	strb.w	r0, [r1, #68]	; 0x44
	    MPU9250->I2C_Addr_Mag = MPU9250_I2C_ADDR_MAG;
 800105c:	f881 3045 	strb.w	r3, [r1, #69]	; 0x45
TM_MPU9250_Result_t MPU9250_Init(I2C_HandleTypeDef* handle,TM_MPU9250_t* MPU9250, TM_MPU9250_Device_t dev) {
 8001060:	460c      	mov	r4, r1




	    /* Check if device connected */
	    if (I2C_IsDeviceConnected(MPU9250->I2C_Addr) != IIC_Result_Ok) {
 8001062:	f7ff ffe5 	bl	8001030 <I2C_IsDeviceConnected>
 8001066:	4605      	mov	r5, r0
 8001068:	b110      	cbz	r0, 8001070 <MPU9250_Init+0x24>
	        return TM_MPU9250_Result_DeviceNotConnected;
 800106a:	2002      	movs	r0, #2
	    MPU9250->AMult = 2.0f / 32768.0f;
	    MPU9250->GMult = 250.0f / 32768.0f;
	    MPU9250->MMult = 10.0f * 4912.0f / 32768.0f;

	    return TM_MPU9250_Result_Ok;
}
 800106c:	b003      	add	sp, #12
 800106e:	bd30      	pop	{r4, r5, pc}
	    I2C_Read( MPU9250->I2C_Addr, WHO_AM_I_MPU9250, &data);
 8001070:	f10d 0207 	add.w	r2, sp, #7
 8001074:	2175      	movs	r1, #117	; 0x75
 8001076:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800107a:	f7ff ffb5 	bl	8000fe8 <I2C_Read>
	    if (data != 0x71) {
 800107e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001082:	2b71      	cmp	r3, #113	; 0x71
 8001084:	d1f1      	bne.n	800106a <MPU9250_Init+0x1e>
	    I2C_Write( MPU9250->I2C_Addr, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 8001086:	462a      	mov	r2, r5
 8001088:	216b      	movs	r1, #107	; 0x6b
 800108a:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800108e:	f7ff ff6d 	bl	8000f6c <I2C_Write>
	    HAL_Delay(100); // Wait for all registers to reset
 8001092:	2064      	movs	r0, #100	; 0x64
 8001094:	f001 ff62 	bl	8002f5c <HAL_Delay>
	    I2C_Write( MPU9250->I2C_Addr, PWR_MGMT_1, 0x01);  // Auto select clock source to be PLL gyroscope reference if ready else
 8001098:	2201      	movs	r2, #1
 800109a:	216b      	movs	r1, #107	; 0x6b
 800109c:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 80010a0:	f7ff ff64 	bl	8000f6c <I2C_Write>
	    HAL_Delay(200);
 80010a4:	20c8      	movs	r0, #200	; 0xc8
 80010a6:	f001 ff59 	bl	8002f5c <HAL_Delay>
	    I2C_Write( MPU9250->I2C_Addr, CONFIG, 0x03);
 80010aa:	2203      	movs	r2, #3
 80010ac:	211a      	movs	r1, #26
 80010ae:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 80010b2:	f7ff ff5b 	bl	8000f6c <I2C_Write>
	    I2C_Write( MPU9250->I2C_Addr, SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; a rate consistent with the filter update rate
 80010b6:	2204      	movs	r2, #4
 80010b8:	2119      	movs	r1, #25
 80010ba:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 80010be:	f7ff ff55 	bl	8000f6c <I2C_Write>
	    I2C_Read( MPU9250->I2C_Addr, GYRO_CONFIG, &data); // get current GYRO_CONFIG register value
 80010c2:	f10d 0207 	add.w	r2, sp, #7
 80010c6:	211b      	movs	r1, #27
 80010c8:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 80010cc:	f7ff ff8c 	bl	8000fe8 <I2C_Read>
	    data &= ~0x18; // Clear AFS bits [4:3]
 80010d0:	f89d 2007 	ldrb.w	r2, [sp, #7]
	    I2C_Write( MPU9250->I2C_Addr, GYRO_CONFIG, data); // Write new GYRO_CONFIG value to register
 80010d4:	211b      	movs	r1, #27
	    data &= ~0x18; // Clear AFS bits [4:3]
 80010d6:	f002 02e5 	and.w	r2, r2, #229	; 0xe5
	    I2C_Write( MPU9250->I2C_Addr, GYRO_CONFIG, data); // Write new GYRO_CONFIG value to register
 80010da:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
	    data &= ~0x18; // Clear AFS bits [4:3]
 80010de:	f88d 2007 	strb.w	r2, [sp, #7]
	    I2C_Write( MPU9250->I2C_Addr, GYRO_CONFIG, data); // Write new GYRO_CONFIG value to register
 80010e2:	f7ff ff43 	bl	8000f6c <I2C_Write>
	    I2C_Read( MPU9250->I2C_Addr, ACCEL_CONFIG, &data); // get current ACCEL_CONFIG register value
 80010e6:	f10d 0207 	add.w	r2, sp, #7
 80010ea:	211c      	movs	r1, #28
 80010ec:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 80010f0:	f7ff ff7a 	bl	8000fe8 <I2C_Read>
	    data &= ~0x18;  // Clear AFS bits [4:3]
 80010f4:	f89d 2007 	ldrb.w	r2, [sp, #7]
	    I2C_Write( MPU9250->I2C_Addr, ACCEL_CONFIG, data); // Write new ACCEL_CONFIG register value
 80010f8:	211c      	movs	r1, #28
	    data &= ~0x18;  // Clear AFS bits [4:3]
 80010fa:	f002 02e7 	and.w	r2, r2, #231	; 0xe7
	    I2C_Write( MPU9250->I2C_Addr, ACCEL_CONFIG, data); // Write new ACCEL_CONFIG register value
 80010fe:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
	    data &= ~0x18;  // Clear AFS bits [4:3]
 8001102:	f88d 2007 	strb.w	r2, [sp, #7]
	    I2C_Write( MPU9250->I2C_Addr, ACCEL_CONFIG, data); // Write new ACCEL_CONFIG register value
 8001106:	f7ff ff31 	bl	8000f6c <I2C_Write>
	    I2C_Read( MPU9250->I2C_Addr, ACCEL_CONFIG2, &data); // get current ACCEL_CONFIG2 register value
 800110a:	f10d 0207 	add.w	r2, sp, #7
 800110e:	211d      	movs	r1, #29
 8001110:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8001114:	f7ff ff68 	bl	8000fe8 <I2C_Read>
	    data &= ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8001118:	f89d 2007 	ldrb.w	r2, [sp, #7]
	    I2C_Write( MPU9250->I2C_Addr, ACCEL_CONFIG2, data); // Write new ACCEL_CONFIG2 register value
 800111c:	211d      	movs	r1, #29
	    data &= ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 800111e:	f022 020f 	bic.w	r2, r2, #15
	    data |= 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8001122:	f042 0203 	orr.w	r2, r2, #3
	    I2C_Write( MPU9250->I2C_Addr, ACCEL_CONFIG2, data); // Write new ACCEL_CONFIG2 register value
 8001126:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
	    data |= 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 800112a:	f88d 2007 	strb.w	r2, [sp, #7]
	    I2C_Write( MPU9250->I2C_Addr, ACCEL_CONFIG2, data); // Write new ACCEL_CONFIG2 register value
 800112e:	f7ff ff1d 	bl	8000f6c <I2C_Write>
	    I2C_Write( MPU9250->I2C_Addr, INT_PIN_CFG, 0x22);
 8001132:	2222      	movs	r2, #34	; 0x22
 8001134:	2137      	movs	r1, #55	; 0x37
 8001136:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800113a:	f7ff ff17 	bl	8000f6c <I2C_Write>
	    I2C_Write( MPU9250->I2C_Addr, INT_ENABLE, 0x01);
 800113e:	2201      	movs	r2, #1
 8001140:	2138      	movs	r1, #56	; 0x38
 8001142:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8001146:	f7ff ff11 	bl	8000f6c <I2C_Write>
	    if (I2C_IsDeviceConnected( MPU9250->I2C_Addr_Mag) !=  IIC_Result_Ok) {
 800114a:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
 800114e:	f7ff ff6f 	bl	8001030 <I2C_IsDeviceConnected>
 8001152:	4605      	mov	r5, r0
 8001154:	2800      	cmp	r0, #0
 8001156:	d188      	bne.n	800106a <MPU9250_Init+0x1e>
	    I2C_Write( MPU9250->I2C_Addr_Mag, AK8963_CNTL, 0x00); // Power down magnetometer
 8001158:	4602      	mov	r2, r0
 800115a:	210a      	movs	r1, #10
 800115c:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
 8001160:	f7ff ff04 	bl	8000f6c <I2C_Write>
	    HAL_Delay(10);
 8001164:	200a      	movs	r0, #10
 8001166:	f001 fef9 	bl	8002f5c <HAL_Delay>
	    I2C_Write( MPU9250->I2C_Addr_Mag, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 800116a:	220f      	movs	r2, #15
 800116c:	210a      	movs	r1, #10
 800116e:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
 8001172:	f7ff fefb 	bl	8000f6c <I2C_Write>
	    HAL_Delay(10);
 8001176:	200a      	movs	r0, #10
 8001178:	f001 fef0 	bl	8002f5c <HAL_Delay>
	    I2C_Write( MPU9250->I2C_Addr_Mag, AK8963_CNTL, 0x00); // Power down magnetometer
 800117c:	462a      	mov	r2, r5
 800117e:	210a      	movs	r1, #10
 8001180:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
 8001184:	f7ff fef2 	bl	8000f6c <I2C_Write>
	    HAL_Delay(10);
 8001188:	200a      	movs	r0, #10
 800118a:	f001 fee7 	bl	8002f5c <HAL_Delay>
	    I2C_Write( MPU9250->I2C_Addr_Mag, AK8963_CNTL, 1 << 4 | 2); // Set magnetometer data resolution and sample ODR
 800118e:	2212      	movs	r2, #18
 8001190:	210a      	movs	r1, #10
 8001192:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
 8001196:	f7ff fee9 	bl	8000f6c <I2C_Write>
	    HAL_Delay(10);
 800119a:	200a      	movs	r0, #10
 800119c:	f001 fede 	bl	8002f5c <HAL_Delay>
	    MPU9250->AMult = 2.0f / 32768.0f;
 80011a0:	f04f 5362 	mov.w	r3, #947912704	; 0x38800000
 80011a4:	63a3      	str	r3, [r4, #56]	; 0x38
	    MPU9250->GMult = 250.0f / 32768.0f;
 80011a6:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <MPU9250_Init+0x16c>)
	    return TM_MPU9250_Result_Ok;
 80011a8:	4628      	mov	r0, r5
	    MPU9250->GMult = 250.0f / 32768.0f;
 80011aa:	63e3      	str	r3, [r4, #60]	; 0x3c
	    MPU9250->MMult = 10.0f * 4912.0f / 32768.0f;
 80011ac:	4b03      	ldr	r3, [pc, #12]	; (80011bc <MPU9250_Init+0x170>)
 80011ae:	6423      	str	r3, [r4, #64]	; 0x40
	    return TM_MPU9250_Result_Ok;
 80011b0:	e75c      	b.n	800106c <MPU9250_Init+0x20>
 80011b2:	bf00      	nop
 80011b4:	20000210 	.word	0x20000210
 80011b8:	3bfa0000 	.word	0x3bfa0000
 80011bc:	3fbfe000 	.word	0x3fbfe000

080011c0 <TM_MPU9250_ReadAcce>:


TM_MPU9250_Result_t TM_MPU9250_ReadAcce(TM_MPU9250_t* MPU9250) {
 80011c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80011c2:	4604      	mov	r4, r0
	uint8_t data[6];

	/* Read accelerometer data */
	I2C_ReadMulti( MPU9250->I2C_Addr, ACCEL_XOUT_H, data, 6);
 80011c4:	466a      	mov	r2, sp
 80011c6:	213b      	movs	r1, #59	; 0x3b
 80011c8:	2306      	movs	r3, #6
 80011ca:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
 80011ce:	f7ff fee5 	bl	8000f9c <I2C_ReadMulti>

	MPU9250->Ax_Raw = ((int16_t)data[0] << 8) | data[1];
 80011d2:	f89d 3000 	ldrb.w	r3, [sp]
 80011d6:	f89d 0001 	ldrb.w	r0, [sp, #1]
	MPU9250->Ay_Raw = ((int16_t)data[2] << 8) | data[3];
 80011da:	f89d 6003 	ldrb.w	r6, [sp, #3]
	MPU9250->Ax_Raw = ((int16_t)data[0] << 8) | data[1];
 80011de:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	MPU9250->Ay_Raw = ((int16_t)data[2] << 8) | data[3];
 80011e2:	f89d 3002 	ldrb.w	r3, [sp, #2]
	MPU9250->Az_Raw = ((int16_t)data[4] << 8) | data[5];
 80011e6:	f89d 5005 	ldrb.w	r5, [sp, #5]
	MPU9250->Ay_Raw = ((int16_t)data[2] << 8) | data[3];
 80011ea:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
	MPU9250->Az_Raw = ((int16_t)data[4] << 8) | data[5];
 80011ee:	f89d 3004 	ldrb.w	r3, [sp, #4]

	MPU9250->Ax = (float)MPU9250->Ax_Raw * MPU9250->AMult;
 80011f2:	6ba7      	ldr	r7, [r4, #56]	; 0x38
	MPU9250->Az_Raw = ((int16_t)data[4] << 8) | data[5];
 80011f4:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	MPU9250->Ay_Raw = ((int16_t)data[2] << 8) | data[3];
 80011f8:	b236      	sxth	r6, r6
	MPU9250->Az_Raw = ((int16_t)data[4] << 8) | data[5];
 80011fa:	b22d      	sxth	r5, r5
	MPU9250->Ax_Raw = ((int16_t)data[0] << 8) | data[1];
 80011fc:	b200      	sxth	r0, r0
 80011fe:	84a0      	strh	r0, [r4, #36]	; 0x24
	MPU9250->Ay_Raw = ((int16_t)data[2] << 8) | data[3];
 8001200:	84e6      	strh	r6, [r4, #38]	; 0x26
	MPU9250->Az_Raw = ((int16_t)data[4] << 8) | data[5];
 8001202:	8525      	strh	r5, [r4, #40]	; 0x28
	MPU9250->Ax = (float)MPU9250->Ax_Raw * MPU9250->AMult;
 8001204:	f7ff fcfa 	bl	8000bfc <__aeabi_i2f>
 8001208:	4639      	mov	r1, r7
 800120a:	f7ff fd4b 	bl	8000ca4 <__aeabi_fmul>
 800120e:	6020      	str	r0, [r4, #0]
	MPU9250->Ay = (float)MPU9250->Ay_Raw * MPU9250->AMult;
 8001210:	4630      	mov	r0, r6
 8001212:	f7ff fcf3 	bl	8000bfc <__aeabi_i2f>
 8001216:	4639      	mov	r1, r7
 8001218:	f7ff fd44 	bl	8000ca4 <__aeabi_fmul>
 800121c:	6060      	str	r0, [r4, #4]
	MPU9250->Az = (float)MPU9250->Az_Raw * MPU9250->AMult;
 800121e:	4628      	mov	r0, r5
 8001220:	f7ff fcec 	bl	8000bfc <__aeabi_i2f>
 8001224:	4639      	mov	r1, r7
 8001226:	f7ff fd3d 	bl	8000ca4 <__aeabi_fmul>
 800122a:	60a0      	str	r0, [r4, #8]
	  return TM_MPU9250_Result_Ok;
}
 800122c:	2000      	movs	r0, #0
 800122e:	b003      	add	sp, #12
 8001230:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001232 <TM_MPU9250_ReadGyro>:

TM_MPU9250_Result_t TM_MPU9250_ReadGyro(TM_MPU9250_t* MPU9250) {
 8001232:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001234:	4604      	mov	r4, r0
	uint8_t data[6];
	I2C_ReadMulti( MPU9250->I2C_Addr, GYRO_XOUT_H, data, 6);
 8001236:	466a      	mov	r2, sp
 8001238:	2143      	movs	r1, #67	; 0x43
 800123a:	2306      	movs	r3, #6
 800123c:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
 8001240:	f7ff feac 	bl	8000f9c <I2C_ReadMulti>

	MPU9250->Gx_Raw = ((int16_t)data[0] << 8) | data[1];
 8001244:	f89d 3000 	ldrb.w	r3, [sp]
 8001248:	f89d 0001 	ldrb.w	r0, [sp, #1]
	MPU9250->Gy_Raw = ((int16_t)data[2] << 8) | data[3];
 800124c:	f89d 6003 	ldrb.w	r6, [sp, #3]
	MPU9250->Gx_Raw = ((int16_t)data[0] << 8) | data[1];
 8001250:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	MPU9250->Gy_Raw = ((int16_t)data[2] << 8) | data[3];
 8001254:	f89d 3002 	ldrb.w	r3, [sp, #2]
	MPU9250->Gz_Raw = ((int16_t)data[4] << 8) | data[5];
 8001258:	f89d 5005 	ldrb.w	r5, [sp, #5]
	MPU9250->Gy_Raw = ((int16_t)data[2] << 8) | data[3];
 800125c:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
	MPU9250->Gz_Raw = ((int16_t)data[4] << 8) | data[5];
 8001260:	f89d 3004 	ldrb.w	r3, [sp, #4]

	MPU9250->Gx = (float)MPU9250->Gx_Raw * MPU9250->GMult;
 8001264:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	MPU9250->Gz_Raw = ((int16_t)data[4] << 8) | data[5];
 8001266:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	MPU9250->Gy_Raw = ((int16_t)data[2] << 8) | data[3];
 800126a:	b236      	sxth	r6, r6
	MPU9250->Gz_Raw = ((int16_t)data[4] << 8) | data[5];
 800126c:	b22d      	sxth	r5, r5
	MPU9250->Gx_Raw = ((int16_t)data[0] << 8) | data[1];
 800126e:	b200      	sxth	r0, r0
 8001270:	8560      	strh	r0, [r4, #42]	; 0x2a
	MPU9250->Gy_Raw = ((int16_t)data[2] << 8) | data[3];
 8001272:	85a6      	strh	r6, [r4, #44]	; 0x2c
	MPU9250->Gz_Raw = ((int16_t)data[4] << 8) | data[5];
 8001274:	85e5      	strh	r5, [r4, #46]	; 0x2e
	MPU9250->Gx = (float)MPU9250->Gx_Raw * MPU9250->GMult;
 8001276:	f7ff fcc1 	bl	8000bfc <__aeabi_i2f>
 800127a:	4639      	mov	r1, r7
 800127c:	f7ff fd12 	bl	8000ca4 <__aeabi_fmul>
 8001280:	60e0      	str	r0, [r4, #12]
	MPU9250->Gy = (float)MPU9250->Gy_Raw * MPU9250->GMult;
 8001282:	4630      	mov	r0, r6
 8001284:	f7ff fcba 	bl	8000bfc <__aeabi_i2f>
 8001288:	4639      	mov	r1, r7
 800128a:	f7ff fd0b 	bl	8000ca4 <__aeabi_fmul>
 800128e:	6120      	str	r0, [r4, #16]
	MPU9250->Gz = (float)MPU9250->Gz_Raw * MPU9250->GMult;
 8001290:	4628      	mov	r0, r5
 8001292:	f7ff fcb3 	bl	8000bfc <__aeabi_i2f>
 8001296:	4639      	mov	r1, r7
 8001298:	f7ff fd04 	bl	8000ca4 <__aeabi_fmul>
 800129c:	6160      	str	r0, [r4, #20]
	  return TM_MPU9250_Result_Ok;
}
 800129e:	2000      	movs	r0, #0
 80012a0:	b003      	add	sp, #12
 80012a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012a4 <TM_MPU9250_ReadMag>:

TM_MPU9250_Result_t TM_MPU9250_ReadMag(TM_MPU9250_t* MPU9250) {
 80012a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80012a6:	4604      	mov	r4, r0
	uint8_t data[7];
	uint8_t check;

	/* Check status */
	I2C_Read( MPU9250->I2C_Addr_Mag, AK8963_ST1, &check);
 80012a8:	f10d 0207 	add.w	r2, sp, #7
 80012ac:	2102      	movs	r1, #2
 80012ae:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
 80012b2:	f7ff fe99 	bl	8000fe8 <I2C_Read>

	if (check & 0x01) {
 80012b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80012ba:	07da      	lsls	r2, r3, #31
 80012bc:	d51f      	bpl.n	80012fe <TM_MPU9250_ReadMag+0x5a>
		I2C_ReadMulti( MPU9250->I2C_Addr_Mag, AK8963_XOUT_L, data, 7);
 80012be:	2307      	movs	r3, #7
 80012c0:	aa02      	add	r2, sp, #8
 80012c2:	2103      	movs	r1, #3
 80012c4:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
 80012c8:	f7ff fe68 	bl	8000f9c <I2C_ReadMulti>
		if (!(data[6] & 0x08)) {
 80012cc:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80012d0:	071b      	lsls	r3, r3, #28
 80012d2:	d414      	bmi.n	80012fe <TM_MPU9250_ReadMag+0x5a>
			MPU9250->Mx_Raw = ((int16_t)data[1] << 8) | data[0];
 80012d4:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80012d8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80012dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80012e0:	8623      	strh	r3, [r4, #48]	; 0x30
			MPU9250->My_Raw = ((int16_t)data[3] << 8) | data[2];
 80012e2:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80012e6:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80012ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80012ee:	8663      	strh	r3, [r4, #50]	; 0x32
			MPU9250->Mz_Raw = ((int16_t)data[5] << 8) | data[4];
 80012f0:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80012f4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80012f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80012fc:	86a3      	strh	r3, [r4, #52]	; 0x34
		}
	}
	  return TM_MPU9250_Result_Ok;
}
 80012fe:	2000      	movs	r0, #0
 8001300:	b004      	add	sp, #16
 8001302:	bd10      	pop	{r4, pc}

08001304 <configureTimerForRunTimeStats>:
/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{

}
 8001304:	4770      	bx	lr

08001306 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
return 0;
}
 8001306:	2000      	movs	r0, #0
 8001308:	4770      	bx	lr
	...

0800130c <_ZN8Keyboard6Button16setDefaultBuzzerEv>:
#include  "keyboard.h"
namespace Keyboard{


void Button::setDefaultBuzzer()
{
 800130c:	4603      	mov	r3, r0
	this->shortPressBuzzer=defShortPressBuzzer;
 800130e:	4a0b      	ldr	r2, [pc, #44]	; (800133c <_ZN8Keyboard6Button16setDefaultBuzzerEv+0x30>)
 8001310:	6810      	ldr	r0, [r2, #0]
 8001312:	8892      	ldrh	r2, [r2, #4]
 8001314:	6158      	str	r0, [r3, #20]
 8001316:	831a      	strh	r2, [r3, #24]
	this->longPressBuzzer = defLongPressBuzzer;
 8001318:	4a09      	ldr	r2, [pc, #36]	; (8001340 <_ZN8Keyboard6Button16setDefaultBuzzerEv+0x34>)
 800131a:	6811      	ldr	r1, [r2, #0]
 800131c:	8892      	ldrh	r2, [r2, #4]
 800131e:	f8c3 101a 	str.w	r1, [r3, #26]
 8001322:	83da      	strh	r2, [r3, #30]
	this->longReleeseBuzzer= defLongReleeseBuzzer;
 8001324:	4a07      	ldr	r2, [pc, #28]	; (8001344 <_ZN8Keyboard6Button16setDefaultBuzzerEv+0x38>)
 8001326:	6810      	ldr	r0, [r2, #0]
 8001328:	8892      	ldrh	r2, [r2, #4]
 800132a:	6218      	str	r0, [r3, #32]
 800132c:	849a      	strh	r2, [r3, #36]	; 0x24
	this->shortReleeseBuzzer = defShortReleeseBuzzer;
 800132e:	4a06      	ldr	r2, [pc, #24]	; (8001348 <_ZN8Keyboard6Button16setDefaultBuzzerEv+0x3c>)
 8001330:	6811      	ldr	r1, [r2, #0]
 8001332:	8892      	ldrh	r2, [r2, #4]
 8001334:	f8c3 1026 	str.w	r1, [r3, #38]	; 0x26
 8001338:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800133a:	4770      	bx	lr
 800133c:	0800c142 	.word	0x0800c142
 8001340:	0800c13c 	.word	0x0800c13c
 8001344:	0800c148 	.word	0x0800c148
 8001348:	0800c14e 	.word	0x0800c14e

0800134c <_ZN8Keyboard6Button7readPinEv>:
	this->setDefaultBuzzer();
}

bool Button::readPin()
		{
	bool result = HAL_GPIO_ReadPin(buttonPort, buttonPin)==GPIO_PIN_RESET;
 800134c:	8981      	ldrh	r1, [r0, #12]
		{
 800134e:	b508      	push	{r3, lr}
	bool result = HAL_GPIO_ReadPin(buttonPort, buttonPin)==GPIO_PIN_RESET;
 8001350:	6880      	ldr	r0, [r0, #8]
 8001352:	f001 ffa7 	bl	80032a4 <HAL_GPIO_ReadPin>
	return result;
		}
 8001356:	fab0 f080 	clz	r0, r0
 800135a:	0940      	lsrs	r0, r0, #5
 800135c:	bd08      	pop	{r3, pc}

0800135e <_ZN8Keyboard6Button14checkLongpressEv>:
	this->btnState = BUTTON_POLL;

}

bool Button::checkLongpress()
{
 800135e:	b510      	push	{r4, lr}
	if((this->start_press_timer + LONG_PRESS_TIME)<osKernelGetTickCount())
 8001360:	6844      	ldr	r4, [r0, #4]
 8001362:	f006 fa7f 	bl	8007864 <osKernelGetTickCount>
 8001366:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
	{
		return true;
	}
	return false;
};
 800136a:	4284      	cmp	r4, r0
 800136c:	bf2c      	ite	cs
 800136e:	2000      	movcs	r0, #0
 8001370:	2001      	movcc	r0, #1
 8001372:	bd10      	pop	{r4, pc}

08001374 <_ZN8Keyboard6Button8getStateEv>:
{
 8001374:	b538      	push	{r3, r4, r5, lr}
 8001376:	4605      	mov	r5, r0
	bool pinState = readPin();
 8001378:	f7ff ffe8 	bl	800134c <_ZN8Keyboard6Button7readPinEv>
 800137c:	782b      	ldrb	r3, [r5, #0]
	if(pinState && this->btnState==BUTTON_POLL)
 800137e:	b1c8      	cbz	r0, 80013b4 <_ZN8Keyboard6Button8getStateEv+0x40>
 8001380:	b933      	cbnz	r3, 8001390 <_ZN8Keyboard6Button8getStateEv+0x1c>
		this->btnState = BUTTON_SHORT_PRESSED;
 8001382:	2403      	movs	r4, #3
 8001384:	702c      	strb	r4, [r5, #0]
	    this->start_press_timer = osKernelGetTickCount();
 8001386:	f006 fa6d 	bl	8007864 <osKernelGetTickCount>
 800138a:	6068      	str	r0, [r5, #4]
 800138c:	4620      	mov	r0, r4
}
 800138e:	bd38      	pop	{r3, r4, r5, pc}
	if(pinState && checkLongpress() && (this->btnState==BUTTON_SHORT_PRESSED))
 8001390:	4628      	mov	r0, r5
 8001392:	f7ff ffe4 	bl	800135e <_ZN8Keyboard6Button14checkLongpressEv>
 8001396:	b908      	cbnz	r0, 800139c <_ZN8Keyboard6Button8getStateEv+0x28>
		return BUTTON_POLL;
 8001398:	2000      	movs	r0, #0
 800139a:	e7f8      	b.n	800138e <_ZN8Keyboard6Button8getStateEv+0x1a>
	if(pinState && checkLongpress() && (this->btnState==BUTTON_SHORT_PRESSED))
 800139c:	782b      	ldrb	r3, [r5, #0]
 800139e:	2b03      	cmp	r3, #3
 80013a0:	d1fa      	bne.n	8001398 <_ZN8Keyboard6Button8getStateEv+0x24>
	this->btnState = BUTTON_LONG_PRESSED;
 80013a2:	2001      	movs	r0, #1
 80013a4:	7028      	strb	r0, [r5, #0]
		return BUTTON_LONG_PRESSED;
 80013a6:	e7f2      	b.n	800138e <_ZN8Keyboard6Button8getStateEv+0x1a>
	if(!pinState && (this->btnState==BUTTON_LONG_PRESSED))
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d1f5      	bne.n	8001398 <_ZN8Keyboard6Button8getStateEv+0x24>
	this->start_press_timer = 0 ;
 80013ac:	6068      	str	r0, [r5, #4]
	this->btnState = BUTTON_POLL;
 80013ae:	7028      	strb	r0, [r5, #0]
		return BUTTON_LONG_RELEASED;
 80013b0:	2002      	movs	r0, #2
 80013b2:	e7ec      	b.n	800138e <_ZN8Keyboard6Button8getStateEv+0x1a>
	if(!pinState && (this->btnState==BUTTON_SHORT_PRESSED))
 80013b4:	2b03      	cmp	r3, #3
 80013b6:	d1f7      	bne.n	80013a8 <_ZN8Keyboard6Button8getStateEv+0x34>
	this->btnState = BUTTON_POLL;
 80013b8:	7028      	strb	r0, [r5, #0]
		return BUTTON_SHORT_RELEASED;
 80013ba:	2004      	movs	r0, #4
 80013bc:	e7e7      	b.n	800138e <_ZN8Keyboard6Button8getStateEv+0x1a>
	...

080013c0 <_ZN8Keyboard6HadlerC1EP7osQueueINS_17buttonEventStructEEPS1_I12buzzerStructE>:
Button::Button(GPIO_TypeDef * btnPort,uint16_t btnPin,const char* label):Label(label)
 80013c0:	4b16      	ldr	r3, [pc, #88]	; (800141c <_ZN8Keyboard6HadlerC1EP7osQueueINS_17buttonEventStructEEPS1_I12buzzerStructE+0x5c>)


Hadler::Hadler(osQueue<buttonEventStruct> *  keyQueue,	osQueue<buzzerStruct> * buzQueue): keyboardQueue(keyQueue), buzzerQueue(buzQueue)
 80013c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
Button::Button(GPIO_TypeDef * btnPort,uint16_t btnPin,const char* label):Label(label)
 80013c6:	2500      	movs	r5, #0
 80013c8:	6103      	str	r3, [r0, #16]
	this->buttonPin = btnPin;
 80013ca:	2320      	movs	r3, #32
Hadler::Hadler(osQueue<buttonEventStruct> *  keyQueue,	osQueue<buzzerStruct> * buzQueue): keyboardQueue(keyQueue), buzzerQueue(buzQueue)
 80013cc:	4604      	mov	r4, r0
	this->buttonPort = btnPort;
 80013ce:	4e14      	ldr	r6, [pc, #80]	; (8001420 <_ZN8Keyboard6HadlerC1EP7osQueueINS_17buttonEventStructEEPS1_I12buzzerStructE+0x60>)
Button::Button(GPIO_TypeDef * btnPort,uint16_t btnPin,const char* label):Label(label)
 80013d0:	7005      	strb	r5, [r0, #0]
 80013d2:	6045      	str	r5, [r0, #4]
	this->buttonPort = btnPort;
 80013d4:	6086      	str	r6, [r0, #8]
	this->buttonPin = btnPin;
 80013d6:	8183      	strh	r3, [r0, #12]
Hadler::Hadler(osQueue<buttonEventStruct> *  keyQueue,	osQueue<buzzerStruct> * buzQueue): keyboardQueue(keyQueue), buzzerQueue(buzQueue)
 80013d8:	4688      	mov	r8, r1
 80013da:	4617      	mov	r7, r2
	this->setDefaultBuzzer();
 80013dc:	f7ff ff96 	bl	800130c <_ZN8Keyboard6Button16setDefaultBuzzerEv>
Button::Button(GPIO_TypeDef * btnPort,uint16_t btnPin,const char* label):Label(label)
 80013e0:	4b10      	ldr	r3, [pc, #64]	; (8001424 <_ZN8Keyboard6HadlerC1EP7osQueueINS_17buttonEventStructEEPS1_I12buzzerStructE+0x64>)
	this->setDefaultBuzzer();
 80013e2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
Button::Button(GPIO_TypeDef * btnPort,uint16_t btnPin,const char* label):Label(label)
 80013e6:	63e3      	str	r3, [r4, #60]	; 0x3c
	this->buttonPin = btnPin;
 80013e8:	2310      	movs	r3, #16
Button::Button(GPIO_TypeDef * btnPort,uint16_t btnPin,const char* label):Label(label)
 80013ea:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
	this->buttonPin = btnPin;
 80013ee:	8723      	strh	r3, [r4, #56]	; 0x38
Button::Button(GPIO_TypeDef * btnPort,uint16_t btnPin,const char* label):Label(label)
 80013f0:	6325      	str	r5, [r4, #48]	; 0x30
	this->buttonPort = btnPort;
 80013f2:	6366      	str	r6, [r4, #52]	; 0x34
	this->setDefaultBuzzer();
 80013f4:	f7ff ff8a 	bl	800130c <_ZN8Keyboard6Button16setDefaultBuzzerEv>
Button::Button(GPIO_TypeDef * btnPort,uint16_t btnPin,const char* label):Label(label)
 80013f8:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <_ZN8Keyboard6HadlerC1EP7osQueueINS_17buttonEventStructEEPS1_I12buzzerStructE+0x68>)
	this->setDefaultBuzzer();
 80013fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
Button::Button(GPIO_TypeDef * btnPort,uint16_t btnPin,const char* label):Label(label)
 80013fe:	66a3      	str	r3, [r4, #104]	; 0x68
	this->buttonPin = btnPin;
 8001400:	2308      	movs	r3, #8
Button::Button(GPIO_TypeDef * btnPort,uint16_t btnPin,const char* label):Label(label)
 8001402:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8001406:	65e5      	str	r5, [r4, #92]	; 0x5c
	this->buttonPort = btnPort;
 8001408:	6626      	str	r6, [r4, #96]	; 0x60
	this->buttonPin = btnPin;
 800140a:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
	this->setDefaultBuzzer();
 800140e:	f7ff ff7d 	bl	800130c <_ZN8Keyboard6Button16setDefaultBuzzerEv>
Hadler::Hadler(osQueue<buttonEventStruct> *  keyQueue,	osQueue<buzzerStruct> * buzQueue): keyboardQueue(keyQueue), buzzerQueue(buzQueue)
 8001412:	e9c4 8721 	strd	r8, r7, [r4, #132]	; 0x84
{

}
 8001416:	4620      	mov	r0, r4
 8001418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800141c:	0800c12c 	.word	0x0800c12c
 8001420:	40010c00 	.word	0x40010c00
 8001424:	0800c131 	.word	0x0800c131
 8001428:	0800c136 	.word	0x0800c136

0800142c <_ZN8Keyboard6Hadler13checkKeyboardEv>:
void Hadler::checkKeyboard()
{
 800142c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800142e:	4605      	mov	r5, r0
 8001430:	4604      	mov	r4, r0
 8001432:	f100 0784 	add.w	r7, r0, #132	; 0x84
	for (int i = 0; i <BTN_COUNT ; ++i)
	{
		ButtonState stat = buttons[i].getState();
 8001436:	4620      	mov	r0, r4
 8001438:	f7ff ff9c 	bl	8001374 <_ZN8Keyboard6Button8getStateEv>
		switch (stat) {
 800143c:	3801      	subs	r0, #1
 800143e:	2803      	cmp	r0, #3
 8001440:	d81c      	bhi.n	800147c <_ZN8Keyboard6Hadler13checkKeyboardEv+0x50>
 8001442:	e8df f000 	tbb	[pc, r0]
 8001446:	0c02      	.short	0x0c02
 8001448:	2520      	.short	0x2520
							return this->longPressBuzzer;
 800144a:	4623      	mov	r3, r4
				case BUTTON_LONG_PRESSED:
						this->buzzerQueue->send(buttons[i].getBuzzer(BUTTON_LONG_PRESSED));
 800144c:	f8d5 6088 	ldr.w	r6, [r5, #136]	; 0x88
							return this->longPressBuzzer;
 8001450:	f853 0f1a 	ldr.w	r0, [r3, #26]!
						return this->shortReleeseBuzzer;
 8001454:	9000      	str	r0, [sp, #0]
 8001456:	889b      	ldrh	r3, [r3, #4]
 8001458:	f8ad 3004 	strh.w	r3, [sp, #4]
 800145c:	e008      	b.n	8001470 <_ZN8Keyboard6Hadler13checkKeyboardEv+0x44>
					break;
				case BUTTON_LONG_RELEASED:
					this->buzzerQueue->send(buttons[i].getBuzzer(BUTTON_LONG_RELEASED));
 800145e:	f8d5 6088 	ldr.w	r6, [r5, #136]	; 0x88
						return this->longReleeseBuzzer;
 8001462:	f104 0320 	add.w	r3, r4, #32
						return this->shortPressBuzzer;
 8001466:	e893 0003 	ldmia.w	r3, {r0, r1}
 800146a:	9000      	str	r0, [sp, #0]
 800146c:	f8ad 1004 	strh.w	r1, [sp, #4]
		return osMessageQueueGet(xHandle, val, NULL, xTicksToWait);
	}

	osStatus_t send(const T & val, TickType_t xTicksToWait = 0U)
	{
		return osMessageQueuePut(xHandle, &val, NULL, xTicksToWait);
 8001470:	2300      	movs	r3, #0
 8001472:	4669      	mov	r1, sp
 8001474:	461a      	mov	r2, r3
 8001476:	6830      	ldr	r0, [r6, #0]
 8001478:	f006 fb5a 	bl	8007b30 <osMessageQueuePut>
 800147c:	342c      	adds	r4, #44	; 0x2c
	for (int i = 0; i <BTN_COUNT ; ++i)
 800147e:	42a7      	cmp	r7, r4
 8001480:	d1d9      	bne.n	8001436 <_ZN8Keyboard6Hadler13checkKeyboardEv+0xa>
				default:
					break;
			}
	}

}
 8001482:	b003      	add	sp, #12
 8001484:	bdf0      	pop	{r4, r5, r6, r7, pc}
					this->buzzerQueue->send(buttons[i].getBuzzer(BUTTON_SHORT_PRESSED));
 8001486:	f8d5 6088 	ldr.w	r6, [r5, #136]	; 0x88
						return this->shortPressBuzzer;
 800148a:	f104 0314 	add.w	r3, r4, #20
 800148e:	e7ea      	b.n	8001466 <_ZN8Keyboard6Hadler13checkKeyboardEv+0x3a>
						return this->shortReleeseBuzzer;
 8001490:	4623      	mov	r3, r4
					this->buzzerQueue->send(buttons[i].getBuzzer(BUTTON_SHORT_RELEASED));
 8001492:	f8d5 6088 	ldr.w	r6, [r5, #136]	; 0x88
						return this->shortReleeseBuzzer;
 8001496:	f853 0f26 	ldr.w	r0, [r3, #38]!
 800149a:	e7db      	b.n	8001454 <_ZN8Keyboard6Hadler13checkKeyboardEv+0x28>

0800149c <_Z16StartDefaultTaskPv>:




void StartDefaultTask(void *argument)
{
 800149c:	b508      	push	{r3, lr}
	for(;;)
	{
		osDelay(20);
 800149e:	2014      	movs	r0, #20
 80014a0:	f006 fa3c 	bl	800791c <osDelay>
 80014a4:	e7fb      	b.n	800149e <_Z16StartDefaultTaskPv+0x2>
	...

080014a8 <_Z17StartKeyboardTaskPv>:
		}
	}
}

void StartKeyboardTask(void *argument)
{
 80014a8:	b500      	push	{lr}
 80014aa:	b0a5      	sub	sp, #148	; 0x94
	Keyboard::Hadler KeyboardHadler = Keyboard::Hadler(&keyboardQueueHandle,&buzzerQueueHandle);
 80014ac:	4a05      	ldr	r2, [pc, #20]	; (80014c4 <_Z17StartKeyboardTaskPv+0x1c>)
 80014ae:	4906      	ldr	r1, [pc, #24]	; (80014c8 <_Z17StartKeyboardTaskPv+0x20>)
 80014b0:	a801      	add	r0, sp, #4
 80014b2:	f7ff ff85 	bl	80013c0 <_ZN8Keyboard6HadlerC1EP7osQueueINS_17buttonEventStructEEPS1_I12buzzerStructE>
	for(;;)
	{
		KeyboardHadler.checkKeyboard();
 80014b6:	a801      	add	r0, sp, #4
 80014b8:	f7ff ffb8 	bl	800142c <_ZN8Keyboard6Hadler13checkKeyboardEv>

		osDelay(5);
 80014bc:	2005      	movs	r0, #5
 80014be:	f006 fa2d 	bl	800791c <osDelay>
 80014c2:	e7f8      	b.n	80014b6 <_Z17StartKeyboardTaskPv+0xe>
 80014c4:	20000280 	.word	0x20000280
 80014c8:	20000448 	.word	0x20000448

080014cc <_Z16StartDysplayTaskPv>:
	}
}

/* USER CODE END Header_StartDysplayTask */
void StartDysplayTask(void *argument)
{
 80014cc:	b580      	push	{r7, lr}
		osSemaphoreAcquire(accelStructBinarySemHandle,osWaitForever);
		char str[32];
		//std::string ssa;
		ssd1306_Fill(Black);
		ssd1306_SetCursor(2,2);
		sprintf(str, "%d", accelStruct.Ax_Raw);
 80014ce:	4d73      	ldr	r5, [pc, #460]	; (800169c <_Z16StartDysplayTaskPv+0x1d0>)
{
 80014d0:	b088      	sub	sp, #32
		osSemaphoreAcquire(accelStructBinarySemHandle,osWaitForever);
 80014d2:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 80016cc <_Z16StartDysplayTaskPv+0x200>
 80014d6:	f04f 31ff 	mov.w	r1, #4294967295
 80014da:	f8d8 0000 	ldr.w	r0, [r8]
 80014de:	f006 fa7f 	bl	80079e0 <osSemaphoreAcquire>
		ssd1306_Fill(Black);
 80014e2:	2000      	movs	r0, #0
 80014e4:	f001 f9e8 	bl	80028b8 <_Z12ssd1306_Fill13SSD1306_COLOR>
		ssd1306_SetCursor(2,2);
 80014e8:	2102      	movs	r1, #2

		ssd1306_SetCursor(2,43);
		//ssd1306_WriteString(gpsParser->HDOP,Font_7x10,White);

		ssd1306_SetCursor(2,33);
		sprintf(str, "%d", accelStruct.Mx_Raw*50);
 80014ea:	2732      	movs	r7, #50	; 0x32
		sprintf(str, "%d", accelStruct.Ax_Raw);
 80014ec:	4e6c      	ldr	r6, [pc, #432]	; (80016a0 <_Z16StartDysplayTaskPv+0x1d4>)
		ssd1306_WriteString("Ax:",Font_7x10,White);
 80014ee:	4c6d      	ldr	r4, [pc, #436]	; (80016a4 <_Z16StartDysplayTaskPv+0x1d8>)
		ssd1306_SetCursor(2,2);
 80014f0:	4608      	mov	r0, r1
 80014f2:	f001 faff 	bl	8002af4 <_Z17ssd1306_SetCursorhh>
		sprintf(str, "%d", accelStruct.Ax_Raw);
 80014f6:	f9b6 2024 	ldrsh.w	r2, [r6, #36]	; 0x24
 80014fa:	4629      	mov	r1, r5
 80014fc:	4668      	mov	r0, sp
 80014fe:	f008 fee5 	bl	800a2cc <siprintf>
		ssd1306_WriteString("Ax:",Font_7x10,White);
 8001502:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001506:	2301      	movs	r3, #1
 8001508:	4867      	ldr	r0, [pc, #412]	; (80016a8 <_Z16StartDysplayTaskPv+0x1dc>)
 800150a:	f001 fadd 	bl	8002ac8 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
		ssd1306_WriteString(str,Font_7x10,White);
 800150e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001512:	2301      	movs	r3, #1
 8001514:	4668      	mov	r0, sp
 8001516:	f001 fad7 	bl	8002ac8 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
		ssd1306_SetCursor(2,12);
 800151a:	210c      	movs	r1, #12
 800151c:	2002      	movs	r0, #2
 800151e:	f001 fae9 	bl	8002af4 <_Z17ssd1306_SetCursorhh>
		sprintf(str, "%d", accelStruct.Ay_Raw);
 8001522:	f9b6 2026 	ldrsh.w	r2, [r6, #38]	; 0x26
 8001526:	4629      	mov	r1, r5
 8001528:	4668      	mov	r0, sp
 800152a:	f008 fecf 	bl	800a2cc <siprintf>
		ssd1306_WriteString("Ay:",Font_7x10,White);
 800152e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001532:	2301      	movs	r3, #1
 8001534:	485d      	ldr	r0, [pc, #372]	; (80016ac <_Z16StartDysplayTaskPv+0x1e0>)
 8001536:	f001 fac7 	bl	8002ac8 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
		ssd1306_WriteString(str,Font_7x10,White);
 800153a:	e894 0006 	ldmia.w	r4, {r1, r2}
 800153e:	2301      	movs	r3, #1
 8001540:	4668      	mov	r0, sp
 8001542:	f001 fac1 	bl	8002ac8 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
		ssd1306_SetCursor(2,22);
 8001546:	2116      	movs	r1, #22
 8001548:	2002      	movs	r0, #2
 800154a:	f001 fad3 	bl	8002af4 <_Z17ssd1306_SetCursorhh>
		sprintf(str, "%d", accelStruct.Az_Raw);
 800154e:	f9b6 2028 	ldrsh.w	r2, [r6, #40]	; 0x28
 8001552:	4629      	mov	r1, r5
 8001554:	4668      	mov	r0, sp
 8001556:	f008 feb9 	bl	800a2cc <siprintf>
		ssd1306_WriteString("Az:",Font_7x10,White);
 800155a:	e894 0006 	ldmia.w	r4, {r1, r2}
 800155e:	2301      	movs	r3, #1
 8001560:	4853      	ldr	r0, [pc, #332]	; (80016b0 <_Z16StartDysplayTaskPv+0x1e4>)
 8001562:	f001 fab1 	bl	8002ac8 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
		ssd1306_WriteString(str,Font_7x10,White);
 8001566:	e894 0006 	ldmia.w	r4, {r1, r2}
 800156a:	2301      	movs	r3, #1
 800156c:	4668      	mov	r0, sp
 800156e:	f001 faab 	bl	8002ac8 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
		ssd1306_SetCursor(60,2);
 8001572:	2102      	movs	r1, #2
 8001574:	203c      	movs	r0, #60	; 0x3c
 8001576:	f001 fabd 	bl	8002af4 <_Z17ssd1306_SetCursorhh>
		sprintf(str, "%d", accelStruct.Gx_Raw);
 800157a:	f9b6 202a 	ldrsh.w	r2, [r6, #42]	; 0x2a
 800157e:	4629      	mov	r1, r5
 8001580:	4668      	mov	r0, sp
 8001582:	f008 fea3 	bl	800a2cc <siprintf>
		ssd1306_WriteString("Gx:",Font_7x10,White);
 8001586:	e894 0006 	ldmia.w	r4, {r1, r2}
 800158a:	2301      	movs	r3, #1
 800158c:	4849      	ldr	r0, [pc, #292]	; (80016b4 <_Z16StartDysplayTaskPv+0x1e8>)
 800158e:	f001 fa9b 	bl	8002ac8 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
		ssd1306_WriteString(str,Font_7x10,White);
 8001592:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001596:	2301      	movs	r3, #1
 8001598:	4668      	mov	r0, sp
 800159a:	f001 fa95 	bl	8002ac8 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
		ssd1306_SetCursor(60,12);
 800159e:	210c      	movs	r1, #12
 80015a0:	203c      	movs	r0, #60	; 0x3c
 80015a2:	f001 faa7 	bl	8002af4 <_Z17ssd1306_SetCursorhh>
		sprintf(str, "%d", accelStruct.Gy_Raw);
 80015a6:	f9b6 202c 	ldrsh.w	r2, [r6, #44]	; 0x2c
 80015aa:	4629      	mov	r1, r5
 80015ac:	4668      	mov	r0, sp
 80015ae:	f008 fe8d 	bl	800a2cc <siprintf>
		ssd1306_WriteString("Gy:",Font_7x10,White);
 80015b2:	e894 0006 	ldmia.w	r4, {r1, r2}
 80015b6:	2301      	movs	r3, #1
 80015b8:	483f      	ldr	r0, [pc, #252]	; (80016b8 <_Z16StartDysplayTaskPv+0x1ec>)
 80015ba:	f001 fa85 	bl	8002ac8 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
		ssd1306_WriteString(str,Font_7x10,White);
 80015be:	e894 0006 	ldmia.w	r4, {r1, r2}
 80015c2:	2301      	movs	r3, #1
 80015c4:	4668      	mov	r0, sp
 80015c6:	f001 fa7f 	bl	8002ac8 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
		ssd1306_SetCursor(60,22);
 80015ca:	2116      	movs	r1, #22
 80015cc:	203c      	movs	r0, #60	; 0x3c
 80015ce:	f001 fa91 	bl	8002af4 <_Z17ssd1306_SetCursorhh>
		sprintf(str, "%d", accelStruct.Gz_Raw);
 80015d2:	f9b6 202e 	ldrsh.w	r2, [r6, #46]	; 0x2e
 80015d6:	4629      	mov	r1, r5
 80015d8:	4668      	mov	r0, sp
 80015da:	f008 fe77 	bl	800a2cc <siprintf>
		ssd1306_WriteString("Gz:",Font_7x10,White);
 80015de:	e894 0006 	ldmia.w	r4, {r1, r2}
 80015e2:	2301      	movs	r3, #1
 80015e4:	4835      	ldr	r0, [pc, #212]	; (80016bc <_Z16StartDysplayTaskPv+0x1f0>)
 80015e6:	f001 fa6f 	bl	8002ac8 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
		ssd1306_WriteString(str,Font_7x10,White);
 80015ea:	e894 0006 	ldmia.w	r4, {r1, r2}
 80015ee:	2301      	movs	r3, #1
 80015f0:	4668      	mov	r0, sp
 80015f2:	f001 fa69 	bl	8002ac8 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
		ssd1306_SetCursor(2,43);
 80015f6:	212b      	movs	r1, #43	; 0x2b
 80015f8:	2002      	movs	r0, #2
 80015fa:	f001 fa7b 	bl	8002af4 <_Z17ssd1306_SetCursorhh>
		ssd1306_SetCursor(2,33);
 80015fe:	2121      	movs	r1, #33	; 0x21
 8001600:	2002      	movs	r0, #2
 8001602:	f001 fa77 	bl	8002af4 <_Z17ssd1306_SetCursorhh>
		sprintf(str, "%d", accelStruct.Mx_Raw*50);
 8001606:	f9b6 2030 	ldrsh.w	r2, [r6, #48]	; 0x30
 800160a:	4629      	mov	r1, r5
 800160c:	437a      	muls	r2, r7
 800160e:	4668      	mov	r0, sp
 8001610:	f008 fe5c 	bl	800a2cc <siprintf>
		ssd1306_WriteString("Mx:",Font_7x10,White);
 8001614:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001618:	2301      	movs	r3, #1
 800161a:	4829      	ldr	r0, [pc, #164]	; (80016c0 <_Z16StartDysplayTaskPv+0x1f4>)
 800161c:	f001 fa54 	bl	8002ac8 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
		ssd1306_WriteString(str,Font_7x10,White);
 8001620:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001624:	2301      	movs	r3, #1
 8001626:	4668      	mov	r0, sp
 8001628:	f001 fa4e 	bl	8002ac8 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
		//	debugMsg(" Mx:",0,0);
		//				debugMsg(str,0,0);
		ssd1306_SetCursor(2,43);
 800162c:	212b      	movs	r1, #43	; 0x2b
 800162e:	2002      	movs	r0, #2
 8001630:	f001 fa60 	bl	8002af4 <_Z17ssd1306_SetCursorhh>
		sprintf(str, "%d", accelStruct.My_Raw*50);
 8001634:	f9b6 2032 	ldrsh.w	r2, [r6, #50]	; 0x32
 8001638:	4629      	mov	r1, r5
 800163a:	437a      	muls	r2, r7
 800163c:	4668      	mov	r0, sp
 800163e:	f008 fe45 	bl	800a2cc <siprintf>
		ssd1306_WriteString("My:",Font_7x10,White);
 8001642:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001646:	2301      	movs	r3, #1
 8001648:	481e      	ldr	r0, [pc, #120]	; (80016c4 <_Z16StartDysplayTaskPv+0x1f8>)
 800164a:	f001 fa3d 	bl	8002ac8 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
		ssd1306_WriteString(str,Font_7x10,White);
 800164e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001652:	2301      	movs	r3, #1
 8001654:	4668      	mov	r0, sp
 8001656:	f001 fa37 	bl	8002ac8 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
		//	debugMsg(" My:",0,0);
		//	debugMsg(str,0,0);

		ssd1306_SetCursor(2,53);
 800165a:	2135      	movs	r1, #53	; 0x35
 800165c:	2002      	movs	r0, #2
 800165e:	f001 fa49 	bl	8002af4 <_Z17ssd1306_SetCursorhh>
		sprintf(str, "%d", accelStruct.Mz_Raw*50);
 8001662:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	; 0x34
 8001666:	4629      	mov	r1, r5
 8001668:	437a      	muls	r2, r7
 800166a:	4668      	mov	r0, sp
 800166c:	f008 fe2e 	bl	800a2cc <siprintf>
		ssd1306_WriteString("Mz:",Font_7x10,White);
 8001670:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001674:	2301      	movs	r3, #1
 8001676:	4814      	ldr	r0, [pc, #80]	; (80016c8 <_Z16StartDysplayTaskPv+0x1fc>)
 8001678:	f001 fa26 	bl	8002ac8 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
		ssd1306_WriteString(str,Font_7x10,White);
 800167c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001680:	2301      	movs	r3, #1
 8001682:	4668      	mov	r0, sp
 8001684:	f001 fa20 	bl	8002ac8 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>
					}else{

					ssa = gpsParser->UTCtime;
					ssd1306_WriteString(ssa.c_str(),Font_7x10,White);
					}*/
		osSemaphoreRelease(accelStructBinarySemHandle);
 8001688:	f8d8 0000 	ldr.w	r0, [r8]
 800168c:	f006 f9e6 	bl	8007a5c <osSemaphoreRelease>



		ssd1306_UpdateScreen();
 8001690:	f001 f920 	bl	80028d4 <_Z20ssd1306_UpdateScreenv>
		osDelay(10);
 8001694:	200a      	movs	r0, #10
 8001696:	f006 f941 	bl	800791c <osDelay>
 800169a:	e71a      	b.n	80014d2 <_Z16StartDysplayTaskPv+0x6>
 800169c:	0800c1ed 	.word	0x0800c1ed
 80016a0:	20000224 	.word	0x20000224
 80016a4:	20000000 	.word	0x20000000
 80016a8:	0800c1f0 	.word	0x0800c1f0
 80016ac:	0800c1f4 	.word	0x0800c1f4
 80016b0:	0800c1f8 	.word	0x0800c1f8
 80016b4:	0800c1fc 	.word	0x0800c1fc
 80016b8:	0800c200 	.word	0x0800c200
 80016bc:	0800c204 	.word	0x0800c204
 80016c0:	0800c208 	.word	0x0800c208
 80016c4:	0800c20c 	.word	0x0800c20c
 80016c8:	0800c210 	.word	0x0800c210
 80016cc:	2000026c 	.word	0x2000026c

080016d0 <_Z14StartAccelTaskPv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartAccelTask */
void StartAccelTask(void *argument)
{
 80016d0:	b508      	push	{r3, lr}
	/* USER CODE BEGIN StartAccelTask */
	/* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(accelStructBinarySemHandle, osWaitForever);
 80016d2:	4d10      	ldr	r5, [pc, #64]	; (8001714 <_Z14StartAccelTaskPv+0x44>)
		TM_MPU9250_ReadAcce(&accelStruct);
 80016d4:	4c10      	ldr	r4, [pc, #64]	; (8001718 <_Z14StartAccelTaskPv+0x48>)
		osSemaphoreAcquire(accelStructBinarySemHandle, osWaitForever);
 80016d6:	f04f 31ff 	mov.w	r1, #4294967295
 80016da:	6828      	ldr	r0, [r5, #0]
 80016dc:	f006 f980 	bl	80079e0 <osSemaphoreAcquire>
		TM_MPU9250_ReadAcce(&accelStruct);
 80016e0:	4620      	mov	r0, r4
 80016e2:	f7ff fd6d 	bl	80011c0 <TM_MPU9250_ReadAcce>
		osDelay(1);
 80016e6:	2001      	movs	r0, #1
 80016e8:	f006 f918 	bl	800791c <osDelay>
		TM_MPU9250_ReadGyro(&accelStruct);
 80016ec:	4620      	mov	r0, r4
 80016ee:	f7ff fda0 	bl	8001232 <TM_MPU9250_ReadGyro>
		osDelay(1);
 80016f2:	2001      	movs	r0, #1
 80016f4:	f006 f912 	bl	800791c <osDelay>
		TM_MPU9250_ReadMag(&accelStruct);
 80016f8:	4620      	mov	r0, r4
 80016fa:	f7ff fdd3 	bl	80012a4 <TM_MPU9250_ReadMag>
		osDelay(1);
 80016fe:	2001      	movs	r0, #1
 8001700:	f006 f90c 	bl	800791c <osDelay>

		osSemaphoreRelease(accelStructBinarySemHandle);
 8001704:	6828      	ldr	r0, [r5, #0]
 8001706:	f006 f9a9 	bl	8007a5c <osSemaphoreRelease>
		osDelay(2);
 800170a:	2002      	movs	r0, #2
 800170c:	f006 f906 	bl	800791c <osDelay>
 8001710:	e7e1      	b.n	80016d6 <_Z14StartAccelTaskPv+0x6>
 8001712:	bf00      	nop
 8001714:	2000026c 	.word	0x2000026c
 8001718:	20000224 	.word	0x20000224

0800171c <_Z15StartBuzzerTaskPv>:
{
 800171c:	b537      	push	{r0, r1, r2, r4, r5, lr}
		status = buzzerQueueHandle.receive(&buzzerParameters); // osMessageQueueGet(buzzerQueueHandle, &buzzerParameters, NULL, osWaitForever);   // wait for message
 800171e:	4d0d      	ldr	r5, [pc, #52]	; (8001754 <_Z15StartBuzzerTaskPv+0x38>)
		return osMessageQueueGet(xHandle, val, NULL, xTicksToWait);
 8001720:	f04f 33ff 	mov.w	r3, #4294967295
 8001724:	2200      	movs	r2, #0
 8001726:	4669      	mov	r1, sp
 8001728:	6828      	ldr	r0, [r5, #0]
 800172a:	f006 fa45 	bl	8007bb8 <osMessageQueueGet>
		if (status == osOK) {
 800172e:	4604      	mov	r4, r0
 8001730:	2800      	cmp	r0, #0
 8001732:	d1f5      	bne.n	8001720 <_Z15StartBuzzerTaskPv+0x4>
			BuzzerSetFreq(buzzerParameters.freq);
 8001734:	f8bd 0000 	ldrh.w	r0, [sp]
 8001738:	f7ff fc04 	bl	8000f44 <_Z13BuzzerSetFreqt>
			BuzzerSetVolume(buzzerParameters.volume);
 800173c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8001740:	f7ff fc0c 	bl	8000f5c <_Z15BuzzerSetVolumet>
			osDelay(buzzerParameters.duration);
 8001744:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8001748:	f006 f8e8 	bl	800791c <osDelay>
			BuzzerSetVolume(0);
 800174c:	4620      	mov	r0, r4
 800174e:	f7ff fc05 	bl	8000f5c <_Z15BuzzerSetVolumet>
 8001752:	e7e5      	b.n	8001720 <_Z15StartBuzzerTaskPv+0x4>
 8001754:	20000280 	.word	0x20000280

08001758 <_Z23StartgpsNMEA_ParserTaskPv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartgpsNMEA_ParserTask */
void StartgpsNMEA_ParserTask(void *argument)
{
 8001758:	b510      	push	{r4, lr}
 800175a:	b0fe      	sub	sp, #504	; 0x1f8
	/* USER CODE BEGIN StartgpsNMEA_ParserTask */
	/* Infinite loop */
	osStatus_t status;

	NMEA_UART::GPS_MESSEGE_TYPE messageType;
	NMEA_UART::Parser gpsParser;
 800175c:	a801      	add	r0, sp, #4
 800175e:	f000 fc25 	bl	8001fac <_ZN9NMEA_UART6ParserC1Ev>
	for(;;)
	{
		using namespace NMEA_UART;
		uint8_t sym=0;
 8001762:	f04f 0400 	mov.w	r4, #0
 8001766:	4809      	ldr	r0, [pc, #36]	; (800178c <_Z23StartgpsNMEA_ParserTaskPv+0x34>)
 8001768:	f04f 33ff 	mov.w	r3, #4294967295
 800176c:	2200      	movs	r2, #0
 800176e:	f10d 0103 	add.w	r1, sp, #3
 8001772:	6800      	ldr	r0, [r0, #0]
 8001774:	f88d 4003 	strb.w	r4, [sp, #3]
 8001778:	f006 fa1e 	bl	8007bb8 <osMessageQueueGet>
		status =GPS_UARTQueueHandle.receive(&sym);  //osMessageQueueGet(GPS_UARTQueueHandle, &sym, NULL, osWaitForever);   // wait for message
		if (status == osOK) {
 800177c:	2800      	cmp	r0, #0
 800177e:	d1f2      	bne.n	8001766 <_Z23StartgpsNMEA_ParserTaskPv+0xe>

			messageType  = gpsParser.charParser(sym);
 8001780:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8001784:	a801      	add	r0, sp, #4
 8001786:	f000 fcef 	bl	8002168 <_ZN9NMEA_UART6Parser10charParserEh>
				break;
			}

		}

	}
 800178a:	e7ec      	b.n	8001766 <_Z23StartgpsNMEA_ParserTaskPv+0xe>
 800178c:	20000214 	.word	0x20000214

08001790 <_ZN6osTask5startEPFvPvE>:
{
		priority=osPriority;
}


	void start(osThreadFunc_t func)
 8001790:	b530      	push	{r4, r5, lr}
 8001792:	4604      	mov	r4, r0
 8001794:	460d      	mov	r5, r1
 8001796:	b08b      	sub	sp, #44	; 0x2c
	{
		const osThreadAttr_t Task_attributes = {
 8001798:	2220      	movs	r2, #32
 800179a:	2100      	movs	r1, #0
 800179c:	a802      	add	r0, sp, #8
 800179e:	f008 f852 	bl	8009846 <memset>
				stack_mem :NULL,// &TaskBuffer[0],
				stack_size: stack_size*4,
				priority : (osPriority_t) priority,
				tz_module : NULL,
				reserved:NULL
		};
 80017a2:	68a3      	ldr	r3, [r4, #8]

		TaskHandle = osThreadNew(func, NULL, &Task_attributes);
 80017a4:	aa01      	add	r2, sp, #4
		};
 80017a6:	9301      	str	r3, [sp, #4]
				stack_size: stack_size*4,
 80017a8:	89a3      	ldrh	r3, [r4, #12]
		TaskHandle = osThreadNew(func, NULL, &Task_attributes);
 80017aa:	2100      	movs	r1, #0
				stack_size: stack_size*4,
 80017ac:	009b      	lsls	r3, r3, #2
		};
 80017ae:	9306      	str	r3, [sp, #24]
 80017b0:	6863      	ldr	r3, [r4, #4]
		TaskHandle = osThreadNew(func, NULL, &Task_attributes);
 80017b2:	4628      	mov	r0, r5
		};
 80017b4:	9307      	str	r3, [sp, #28]
		TaskHandle = osThreadNew(func, NULL, &Task_attributes);
 80017b6:	f006 f86b 	bl	8007890 <osThreadNew>
 80017ba:	6020      	str	r0, [r4, #0]
	}
 80017bc:	b00b      	add	sp, #44	; 0x2c
 80017be:	bd30      	pop	{r4, r5, pc}

080017c0 <_Z11UART_PrintfPKcz>:
void UART_Printf(const char* fmt, ...) {
 80017c0:	b40f      	push	{r0, r1, r2, r3}
 80017c2:	b500      	push	{lr}
 80017c4:	b0c3      	sub	sp, #268	; 0x10c
 80017c6:	ab44      	add	r3, sp, #272	; 0x110
 80017c8:	f853 2b04 	ldr.w	r2, [r3], #4
    vsnprintf(buff, sizeof(buff), fmt, args);
 80017cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017d0:	a802      	add	r0, sp, #8
    va_start(args, fmt);
 80017d2:	9301      	str	r3, [sp, #4]
    vsnprintf(buff, sizeof(buff), fmt, args);
 80017d4:	f008 fdce 	bl	800a374 <vsniprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buff, strlen(buff),
 80017d8:	a802      	add	r0, sp, #8
 80017da:	f7fe fcb9 	bl	8000150 <strlen>
 80017de:	f04f 33ff 	mov.w	r3, #4294967295
 80017e2:	b282      	uxth	r2, r0
 80017e4:	a902      	add	r1, sp, #8
 80017e6:	4804      	ldr	r0, [pc, #16]	; (80017f8 <_Z11UART_PrintfPKcz+0x38>)
 80017e8:	f003 f996 	bl	8004b18 <HAL_UART_Transmit>
}
 80017ec:	b043      	add	sp, #268	; 0x10c
 80017ee:	f85d eb04 	ldr.w	lr, [sp], #4
 80017f2:	b004      	add	sp, #16
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	20000408 	.word	0x20000408

080017fc <_Z4initv>:
void init() {
 80017fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001800:	f6ad 1d74 	subw	sp, sp, #2420	; 0x974
    UART_Printf("Ready!\r\n");
 8001804:	4871      	ldr	r0, [pc, #452]	; (80019cc <_Z4initv+0x1d0>)
    res = f_mount(&fs, "", 0);
 8001806:	aca5      	add	r4, sp, #660	; 0x294
    UART_Printf("Ready!\r\n");
 8001808:	f7ff ffda 	bl	80017c0 <_Z11UART_PrintfPKcz>
    res = f_mount(&fs, "", 0);
 800180c:	4970      	ldr	r1, [pc, #448]	; (80019d0 <_Z4initv+0x1d4>)
 800180e:	2200      	movs	r2, #0
 8001810:	4620      	mov	r0, r4
 8001812:	f005 fa71 	bl	8006cf8 <f_mount>
    if(res != FR_OK) {
 8001816:	4601      	mov	r1, r0
 8001818:	b130      	cbz	r0, 8001828 <_Z4initv+0x2c>
        UART_Printf("f_mount() failed, res = %d\r\n", res);
 800181a:	486e      	ldr	r0, [pc, #440]	; (80019d4 <_Z4initv+0x1d8>)
        UART_Printf("Unmount failed, res = %d\r\n", res);
 800181c:	f7ff ffd0 	bl	80017c0 <_Z11UART_PrintfPKcz>
}
 8001820:	f60d 1d74 	addw	sp, sp, #2420	; 0x974
 8001824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    UART_Printf("f_mount() done!\r\n");
 8001828:	486b      	ldr	r0, [pc, #428]	; (80019d8 <_Z4initv+0x1dc>)
 800182a:	f7ff ffc9 	bl	80017c0 <_Z11UART_PrintfPKcz>
    res = f_getfree("/", &freeClust, &fs_ptr);
 800182e:	a904      	add	r1, sp, #16
 8001830:	aa05      	add	r2, sp, #20
 8001832:	486a      	ldr	r0, [pc, #424]	; (80019dc <_Z4initv+0x1e0>)
    FATFS* fs_ptr = &fs;
 8001834:	9405      	str	r4, [sp, #20]
    res = f_getfree("/", &freeClust, &fs_ptr);
 8001836:	f005 fed4 	bl	80075e2 <f_getfree>
    if(res != FR_OK) {
 800183a:	4601      	mov	r1, r0
 800183c:	b108      	cbz	r0, 8001842 <_Z4initv+0x46>
        UART_Printf("f_getfree() failed, res = %d\r\n", res);
 800183e:	4868      	ldr	r0, [pc, #416]	; (80019e0 <_Z4initv+0x1e4>)
 8001840:	e7ec      	b.n	800181c <_Z4initv+0x20>
    UART_Printf("f_getfree() done!\r\n");
 8001842:	4868      	ldr	r0, [pc, #416]	; (80019e4 <_Z4initv+0x1e8>)
 8001844:	f7ff ffbc 	bl	80017c0 <_Z11UART_PrintfPKcz>
    uint32_t totalBlocks = (fs.n_fatent - 2) * fs.csize;
 8001848:	69e5      	ldr	r5, [r4, #28]
 800184a:	8963      	ldrh	r3, [r4, #10]
    uint32_t freeBlocks = freeClust * fs.csize;
 800184c:	9e04      	ldr	r6, [sp, #16]
    uint32_t totalBlocks = (fs.n_fatent - 2) * fs.csize;
 800184e:	3d02      	subs	r5, #2
 8001850:	435d      	muls	r5, r3
    uint32_t freeBlocks = freeClust * fs.csize;
 8001852:	435e      	muls	r6, r3
    switch (fs.fs_type) {//(0, FS_FAT12, FS_FAT16, FS_FAT32 or FS_EXFAT) */
 8001854:	7823      	ldrb	r3, [r4, #0]
 8001856:	3b01      	subs	r3, #1
 8001858:	2b03      	cmp	r3, #3
 800185a:	d806      	bhi.n	800186a <_Z4initv+0x6e>
 800185c:	e8df f003 	tbb	[pc, r3]
 8001860:	22201e02 	.word	0x22201e02
			 UART_Printf("FAT12\r\n");
 8001864:	4860      	ldr	r0, [pc, #384]	; (80019e8 <_Z4initv+0x1ec>)
			  UART_Printf("EXFAT\r\n");
 8001866:	f7ff ffab 	bl	80017c0 <_Z11UART_PrintfPKcz>
    UART_Printf("Total blocks: %lu (%lu Mb)\r\n",
 800186a:	f44f 67fa 	mov.w	r7, #2000	; 0x7d0
 800186e:	fbb5 f9f7 	udiv	r9, r5, r7
 8001872:	4629      	mov	r1, r5
 8001874:	464a      	mov	r2, r9
 8001876:	485d      	ldr	r0, [pc, #372]	; (80019ec <_Z4initv+0x1f0>)
 8001878:	f7ff ffa2 	bl	80017c0 <_Z11UART_PrintfPKcz>
    UART_Printf("Free blocks: %lu (%lu Mb)\r\n",
 800187c:	fbb6 f7f7 	udiv	r7, r6, r7
 8001880:	4631      	mov	r1, r6
 8001882:	463a      	mov	r2, r7
 8001884:	485a      	ldr	r0, [pc, #360]	; (80019f0 <_Z4initv+0x1f4>)
 8001886:	f7ff ff9b 	bl	80017c0 <_Z11UART_PrintfPKcz>
    res = f_opendir(&dir, "/");
 800188a:	4954      	ldr	r1, [pc, #336]	; (80019dc <_Z4initv+0x1e0>)
 800188c:	a808      	add	r0, sp, #32
 800188e:	f005 fe29 	bl	80074e4 <f_opendir>
    if(res != FR_OK) {
 8001892:	4604      	mov	r4, r0
 8001894:	b140      	cbz	r0, 80018a8 <_Z4initv+0xac>
        UART_Printf("f_opendir() failed, res = %d\r\n", res);
 8001896:	4601      	mov	r1, r0
 8001898:	4856      	ldr	r0, [pc, #344]	; (80019f4 <_Z4initv+0x1f8>)
 800189a:	e7bf      	b.n	800181c <_Z4initv+0x20>
			  UART_Printf( "FAT16\r\n");
 800189c:	4856      	ldr	r0, [pc, #344]	; (80019f8 <_Z4initv+0x1fc>)
 800189e:	e7e2      	b.n	8001866 <_Z4initv+0x6a>
			  UART_Printf( "FAT32\r\n");
 80018a0:	4856      	ldr	r0, [pc, #344]	; (80019fc <_Z4initv+0x200>)
 80018a2:	e7e0      	b.n	8001866 <_Z4initv+0x6a>
			  UART_Printf("EXFAT\r\n");
 80018a4:	4856      	ldr	r0, [pc, #344]	; (8001a00 <_Z4initv+0x204>)
 80018a6:	e7de      	b.n	8001866 <_Z4initv+0x6a>
    UART_Printf("--------\r\nRoot directory:\r\n");
 80018a8:	4856      	ldr	r0, [pc, #344]	; (8001a04 <_Z4initv+0x208>)
 80018aa:	f7ff ff89 	bl	80017c0 <_Z11UART_PrintfPKcz>
    uint32_t totalFiles = 0;
 80018ae:	46a0      	mov	r8, r4
            UART_Printf("  FILE %s\r\n", fileInfo.fname);
 80018b0:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8001a40 <_Z4initv+0x244>
            UART_Printf("  DIR  %s\r\n", fileInfo.fname);
 80018b4:	f8df b18c 	ldr.w	fp, [pc, #396]	; 8001a44 <_Z4initv+0x248>
        res = f_readdir(&dir, &fileInfo);
 80018b8:	a95c      	add	r1, sp, #368	; 0x170
 80018ba:	a808      	add	r0, sp, #32
 80018bc:	f005 fe69 	bl	8007592 <f_readdir>
        if((res != FR_OK) || (fileInfo.fname[0] == '\0')) {
 80018c0:	b998      	cbnz	r0, 80018ea <_Z4initv+0xee>
 80018c2:	f89d 318a 	ldrb.w	r3, [sp, #394]	; 0x18a
 80018c6:	b183      	cbz	r3, 80018ea <_Z4initv+0xee>
        if(fileInfo.fattrib & AM_DIR) {
 80018c8:	f89d 317c 	ldrb.w	r3, [sp, #380]	; 0x17c
            UART_Printf("  DIR  %s\r\n", fileInfo.fname);
 80018cc:	f50d 71c5 	add.w	r1, sp, #394	; 0x18a
        if(fileInfo.fattrib & AM_DIR) {
 80018d0:	06db      	lsls	r3, r3, #27
 80018d2:	d504      	bpl.n	80018de <_Z4initv+0xe2>
            UART_Printf("  DIR  %s\r\n", fileInfo.fname);
 80018d4:	4658      	mov	r0, fp
 80018d6:	f7ff ff73 	bl	80017c0 <_Z11UART_PrintfPKcz>
            totalDirs++;
 80018da:	3401      	adds	r4, #1
 80018dc:	e7ec      	b.n	80018b8 <_Z4initv+0xbc>
            UART_Printf("  FILE %s\r\n", fileInfo.fname);
 80018de:	4650      	mov	r0, sl
 80018e0:	f7ff ff6e 	bl	80017c0 <_Z11UART_PrintfPKcz>
            totalFiles++;
 80018e4:	f108 0801 	add.w	r8, r8, #1
 80018e8:	e7e6      	b.n	80018b8 <_Z4initv+0xbc>
    UART_Printf("(total: %lu dirs, %lu files)\r\n--------\r\n",
 80018ea:	4621      	mov	r1, r4
 80018ec:	4642      	mov	r2, r8
 80018ee:	4846      	ldr	r0, [pc, #280]	; (8001a08 <_Z4initv+0x20c>)
 80018f0:	f7ff ff66 	bl	80017c0 <_Z11UART_PrintfPKcz>
    res = f_closedir(&dir);
 80018f4:	a808      	add	r0, sp, #32
 80018f6:	f005 fe43 	bl	8007580 <f_closedir>
    if(res != FR_OK) {
 80018fa:	4601      	mov	r1, r0
 80018fc:	b108      	cbz	r0, 8001902 <_Z4initv+0x106>
        UART_Printf("f_closedir() failed, res = %d\r\n", res);
 80018fe:	4843      	ldr	r0, [pc, #268]	; (8001a0c <_Z4initv+0x210>)
 8001900:	e78c      	b.n	800181c <_Z4initv+0x20>
    UART_Printf("Writing to log1.txt...\r\n");
 8001902:	4843      	ldr	r0, [pc, #268]	; (8001a10 <_Z4initv+0x214>)
 8001904:	f7ff ff5c 	bl	80017c0 <_Z11UART_PrintfPKcz>
    snprintf(writeBuff, sizeof(writeBuff),
 8001908:	462b      	mov	r3, r5
 800190a:	4a42      	ldr	r2, [pc, #264]	; (8001a14 <_Z4initv+0x218>)
 800190c:	2180      	movs	r1, #128	; 0x80
 800190e:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8001912:	f8cd 9000 	str.w	r9, [sp]
 8001916:	a81c      	add	r0, sp, #112	; 0x70
 8001918:	f008 fca4 	bl	800a264 <sniprintf>
    res = f_open(&logFile, "log1.txt", FA_OPEN_APPEND | FA_WRITE);
 800191c:	493e      	ldr	r1, [pc, #248]	; (8001a18 <_Z4initv+0x21c>)
 800191e:	2232      	movs	r2, #50	; 0x32
 8001920:	f50d 609a 	add.w	r0, sp, #1232	; 0x4d0
 8001924:	f005 fa0e 	bl	8006d44 <f_open>
    if(res != FR_OK) {
 8001928:	4601      	mov	r1, r0
 800192a:	b108      	cbz	r0, 8001930 <_Z4initv+0x134>
        UART_Printf("f_open() failed, res = %d\r\n", res);
 800192c:	483b      	ldr	r0, [pc, #236]	; (8001a1c <_Z4initv+0x220>)
 800192e:	e775      	b.n	800181c <_Z4initv+0x20>
    unsigned int bytesToWrite = strlen(writeBuff);
 8001930:	a81c      	add	r0, sp, #112	; 0x70
 8001932:	f7fe fc0d 	bl	8000150 <strlen>
    res = f_write(&logFile, writeBuff, bytesToWrite, &bytesWritten);
 8001936:	a91c      	add	r1, sp, #112	; 0x70
 8001938:	4602      	mov	r2, r0
    unsigned int bytesToWrite = strlen(writeBuff);
 800193a:	4604      	mov	r4, r0
    res = f_write(&logFile, writeBuff, bytesToWrite, &bytesWritten);
 800193c:	ab06      	add	r3, sp, #24
 800193e:	f50d 609a 	add.w	r0, sp, #1232	; 0x4d0
 8001942:	f005 fc1c 	bl	800717e <f_write>
    if(res != FR_OK) {
 8001946:	4601      	mov	r1, r0
 8001948:	b108      	cbz	r0, 800194e <_Z4initv+0x152>
        UART_Printf("f_write() failed, res = %d\r\n", res);
 800194a:	4835      	ldr	r0, [pc, #212]	; (8001a20 <_Z4initv+0x224>)
 800194c:	e766      	b.n	800181c <_Z4initv+0x20>
    if(bytesWritten < bytesToWrite) {
 800194e:	9b06      	ldr	r3, [sp, #24]
 8001950:	42a3      	cmp	r3, r4
 8001952:	d202      	bcs.n	800195a <_Z4initv+0x15e>
        UART_Printf("WARNING! Disk is full.\r\n");
 8001954:	4833      	ldr	r0, [pc, #204]	; (8001a24 <_Z4initv+0x228>)
 8001956:	f7ff ff33 	bl	80017c0 <_Z11UART_PrintfPKcz>
    res = f_close(&logFile);
 800195a:	f50d 609a 	add.w	r0, sp, #1232	; 0x4d0
 800195e:	f005 fdb4 	bl	80074ca <f_close>
    if(res != FR_OK) {
 8001962:	4601      	mov	r1, r0
 8001964:	b108      	cbz	r0, 800196a <_Z4initv+0x16e>
        UART_Printf("f_close() failed, res = %d\r\n", res);
 8001966:	4830      	ldr	r0, [pc, #192]	; (8001a28 <_Z4initv+0x22c>)
 8001968:	e758      	b.n	800181c <_Z4initv+0x20>
    UART_Printf("Reading file...\r\n");
 800196a:	4830      	ldr	r0, [pc, #192]	; (8001a2c <_Z4initv+0x230>)
 800196c:	f7ff ff28 	bl	80017c0 <_Z11UART_PrintfPKcz>
    res = f_open(&msgFile, "log1.txt", FA_READ);
 8001970:	4929      	ldr	r1, [pc, #164]	; (8001a18 <_Z4initv+0x21c>)
 8001972:	2201      	movs	r2, #1
 8001974:	f50d 60e4 	add.w	r0, sp, #1824	; 0x720
 8001978:	f005 f9e4 	bl	8006d44 <f_open>
    if(res != FR_OK) {
 800197c:	4601      	mov	r1, r0
 800197e:	2800      	cmp	r0, #0
 8001980:	d1d4      	bne.n	800192c <_Z4initv+0x130>
    res = f_read(&msgFile, readBuff, sizeof(readBuff)-1, &bytesRead);
 8001982:	ac3c      	add	r4, sp, #240	; 0xf0
 8001984:	4621      	mov	r1, r4
 8001986:	ab07      	add	r3, sp, #28
 8001988:	227f      	movs	r2, #127	; 0x7f
 800198a:	f50d 60e4 	add.w	r0, sp, #1824	; 0x720
 800198e:	f005 fb31 	bl	8006ff4 <f_read>
    if(res != FR_OK) {
 8001992:	4601      	mov	r1, r0
 8001994:	b108      	cbz	r0, 800199a <_Z4initv+0x19e>
        UART_Printf("f_read() failed, res = %d\r\n", res);
 8001996:	4826      	ldr	r0, [pc, #152]	; (8001a30 <_Z4initv+0x234>)
 8001998:	e740      	b.n	800181c <_Z4initv+0x20>
    readBuff[bytesRead] = '\0';
 800199a:	9b07      	ldr	r3, [sp, #28]
    UART_Printf("```\r\n%s\r\n```\r\n", readBuff);
 800199c:	4621      	mov	r1, r4
    readBuff[bytesRead] = '\0';
 800199e:	54e0      	strb	r0, [r4, r3]
    UART_Printf("```\r\n%s\r\n```\r\n", readBuff);
 80019a0:	4824      	ldr	r0, [pc, #144]	; (8001a34 <_Z4initv+0x238>)
 80019a2:	f7ff ff0d 	bl	80017c0 <_Z11UART_PrintfPKcz>
    res = f_close(&msgFile);
 80019a6:	f50d 60e4 	add.w	r0, sp, #1824	; 0x720
 80019aa:	f005 fd8e 	bl	80074ca <f_close>
    if(res != FR_OK) {
 80019ae:	4602      	mov	r2, r0
 80019b0:	b108      	cbz	r0, 80019b6 <_Z4initv+0x1ba>
        UART_Printf("f_close() failed, res = %d\r\n", res);
 80019b2:	4601      	mov	r1, r0
 80019b4:	e7d7      	b.n	8001966 <_Z4initv+0x16a>
    res = f_mount(NULL, "", 0);
 80019b6:	4906      	ldr	r1, [pc, #24]	; (80019d0 <_Z4initv+0x1d4>)
 80019b8:	f005 f99e 	bl	8006cf8 <f_mount>
    if(res != FR_OK) {
 80019bc:	4601      	mov	r1, r0
 80019be:	b108      	cbz	r0, 80019c4 <_Z4initv+0x1c8>
        UART_Printf("Unmount failed, res = %d\r\n", res);
 80019c0:	481d      	ldr	r0, [pc, #116]	; (8001a38 <_Z4initv+0x23c>)
 80019c2:	e72b      	b.n	800181c <_Z4initv+0x20>
    UART_Printf("Done!\r\n");
 80019c4:	481d      	ldr	r0, [pc, #116]	; (8001a3c <_Z4initv+0x240>)
 80019c6:	f7ff fefb 	bl	80017c0 <_Z11UART_PrintfPKcz>
 80019ca:	e729      	b.n	8001820 <_Z4initv+0x24>
 80019cc:	0800c214 	.word	0x0800c214
 80019d0:	0800c482 	.word	0x0800c482
 80019d4:	0800c21d 	.word	0x0800c21d
 80019d8:	0800c23a 	.word	0x0800c23a
 80019dc:	0800c24c 	.word	0x0800c24c
 80019e0:	0800c24e 	.word	0x0800c24e
 80019e4:	0800c26d 	.word	0x0800c26d
 80019e8:	0800c281 	.word	0x0800c281
 80019ec:	0800c2a1 	.word	0x0800c2a1
 80019f0:	0800c38f 	.word	0x0800c38f
 80019f4:	0800c2be 	.word	0x0800c2be
 80019f8:	0800c289 	.word	0x0800c289
 80019fc:	0800c291 	.word	0x0800c291
 8001a00:	0800c299 	.word	0x0800c299
 8001a04:	0800c2dd 	.word	0x0800c2dd
 8001a08:	0800c311 	.word	0x0800c311
 8001a0c:	0800c33a 	.word	0x0800c33a
 8001a10:	0800c35a 	.word	0x0800c35a
 8001a14:	0800c373 	.word	0x0800c373
 8001a18:	0800c3ab 	.word	0x0800c3ab
 8001a1c:	0800c3b4 	.word	0x0800c3b4
 8001a20:	0800c3d0 	.word	0x0800c3d0
 8001a24:	0800c3ed 	.word	0x0800c3ed
 8001a28:	0800c406 	.word	0x0800c406
 8001a2c:	0800c423 	.word	0x0800c423
 8001a30:	0800c435 	.word	0x0800c435
 8001a34:	0800c451 	.word	0x0800c451
 8001a38:	0800c460 	.word	0x0800c460
 8001a3c:	0800c47b 	.word	0x0800c47b
 8001a40:	0800c305 	.word	0x0800c305
 8001a44:	0800c2f9 	.word	0x0800c2f9

08001a48 <_Z15StartSDcardTaskPv>:
{
 8001a48:	b508      	push	{r3, lr}
	   init();
 8001a4a:	f7ff fed7 	bl	80017fc <_Z4initv>
		osDelay(20);
 8001a4e:	2014      	movs	r0, #20
 8001a50:	f005 ff64 	bl	800791c <osDelay>
 8001a54:	e7fb      	b.n	8001a4e <_Z15StartSDcardTaskPv+0x6>
	...

08001a58 <Error_Handler>:
 */
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	  HAL_UART_Transmit(&huart3, (uint8_t *) "ERROR ERROR!!!", 14, 10);
 8001a58:	230a      	movs	r3, #10
 8001a5a:	220e      	movs	r2, #14
 8001a5c:	4901      	ldr	r1, [pc, #4]	; (8001a64 <Error_Handler+0xc>)
 8001a5e:	4802      	ldr	r0, [pc, #8]	; (8001a68 <Error_Handler+0x10>)
 8001a60:	f003 b85a 	b.w	8004b18 <HAL_UART_Transmit>
 8001a64:	0800c154 	.word	0x0800c154
 8001a68:	20000408 	.word	0x20000408

08001a6c <_Z18SystemClock_Configv>:
	/* USER CODE END Error_Handler_Debug */
}
void SystemClock_Config(void)
{
 8001a6c:	b510      	push	{r4, lr}
 8001a6e:	b094      	sub	sp, #80	; 0x50
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a70:	2214      	movs	r2, #20
 8001a72:	2100      	movs	r1, #0
 8001a74:	a80c      	add	r0, sp, #48	; 0x30
 8001a76:	f007 fee6 	bl	8009846 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a7a:	2214      	movs	r2, #20
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	eb0d 0002 	add.w	r0, sp, r2
 8001a82:	f007 fee0 	bl	8009846 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a86:	2210      	movs	r2, #16
 8001a88:	2100      	movs	r1, #0
 8001a8a:	a801      	add	r0, sp, #4
 8001a8c:	f007 fedb 	bl	8009846 <memset>
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a90:	2402      	movs	r4, #2
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a96:	2201      	movs	r2, #1
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a98:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a9c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001aa0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aa4:	a80a      	add	r0, sp, #40	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001aa6:	920e      	str	r2, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001aa8:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aaa:	f002 f97b 	bl	8003da4 <HAL_RCC_OscConfig>
 8001aae:	b108      	cbz	r0, 8001ab4 <_Z18SystemClock_Configv+0x48>
	{
		Error_Handler();
 8001ab0:	f7ff ffd2 	bl	8001a58 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ab4:	230f      	movs	r3, #15
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ab6:	e9cd 3405 	strd	r3, r4, [sp, #20]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001aba:	2400      	movs	r4, #0
 8001abc:	f44f 6380 	mov.w	r3, #1024	; 0x400
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ac0:	2102      	movs	r1, #2
 8001ac2:	a805      	add	r0, sp, #20
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ac4:	e9cd 4307 	strd	r4, r3, [sp, #28]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ac8:	9409      	str	r4, [sp, #36]	; 0x24
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001aca:	f002 fb43 	bl	8004154 <HAL_RCC_ClockConfig>
 8001ace:	b108      	cbz	r0, 8001ad4 <_Z18SystemClock_Configv+0x68>
	{
		Error_Handler();
 8001ad0:	f7ff ffc2 	bl	8001a58 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001ad4:	2310      	movs	r3, #16
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ad6:	a801      	add	r0, sp, #4
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001ad8:	9301      	str	r3, [sp, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001ada:	9404      	str	r4, [sp, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001adc:	f002 fbf6 	bl	80042cc <HAL_RCCEx_PeriphCLKConfig>
 8001ae0:	b108      	cbz	r0, 8001ae6 <_Z18SystemClock_Configv+0x7a>
	{
		Error_Handler();
 8001ae2:	f7ff ffb9 	bl	8001a58 <Error_Handler>
	}
}
 8001ae6:	b014      	add	sp, #80	; 0x50
 8001ae8:	bd10      	pop	{r4, pc}
	...

08001aec <main>:
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08e      	sub	sp, #56	; 0x38
	HAL_Init();
 8001af0:	f001 fa10 	bl	8002f14 <HAL_Init>
	SystemClock_Config();
 8001af4:	f7ff ffba 	bl	8001a6c <_Z18SystemClock_Configv>
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af8:	2210      	movs	r2, #16
 8001afa:	2100      	movs	r1, #0
 8001afc:	a807      	add	r0, sp, #28
 8001afe:	f007 fea2 	bl	8009846 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001b02:	4bba      	ldr	r3, [pc, #744]	; (8001dec <main+0x300>)

	/*Configure GPIO pin : SD_SPI_CS_Pin */
	GPIO_InitStruct.Pin = SD_SPI_CS_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b04:	2400      	movs	r4, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001b06:	699a      	ldr	r2, [r3, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b08:	2501      	movs	r5, #1
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001b0a:	f042 0210 	orr.w	r2, r2, #16
 8001b0e:	619a      	str	r2, [r3, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b10:	2740      	movs	r7, #64	; 0x40
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b12:	2603      	movs	r6, #3
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001b14:	699a      	ldr	r2, [r3, #24]

	/*Configure GPIO pin : GPS_EN_Pin */
	GPIO_InitStruct.Pin = GPS_EN_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b16:	f04f 0802 	mov.w	r8, #2
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001b1a:	f002 0210 	and.w	r2, r2, #16
 8001b1e:	9201      	str	r2, [sp, #4]
 8001b20:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001b22:	699a      	ldr	r2, [r3, #24]
	HAL_GPIO_WritePin(SD_SPI_CS_GPIO_Port, SD_SPI_CS_Pin, GPIO_PIN_SET);
 8001b24:	2140      	movs	r1, #64	; 0x40
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001b26:	f042 0220 	orr.w	r2, r2, #32
 8001b2a:	619a      	str	r2, [r3, #24]
 8001b2c:	699a      	ldr	r2, [r3, #24]
	HAL_GPIO_WritePin(SD_SPI_CS_GPIO_Port, SD_SPI_CS_Pin, GPIO_PIN_SET);
 8001b2e:	48b0      	ldr	r0, [pc, #704]	; (8001df0 <main+0x304>)
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001b30:	f002 0220 	and.w	r2, r2, #32
 8001b34:	9202      	str	r2, [sp, #8]
 8001b36:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001b38:	699a      	ldr	r2, [r3, #24]
 8001b3a:	f042 0204 	orr.w	r2, r2, #4
 8001b3e:	619a      	str	r2, [r3, #24]
 8001b40:	699a      	ldr	r2, [r3, #24]
 8001b42:	f002 0204 	and.w	r2, r2, #4
 8001b46:	9203      	str	r2, [sp, #12]
 8001b48:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4a:	699a      	ldr	r2, [r3, #24]
 8001b4c:	f042 0208 	orr.w	r2, r2, #8
 8001b50:	619a      	str	r2, [r3, #24]
 8001b52:	699b      	ldr	r3, [r3, #24]
	HAL_GPIO_WritePin(SD_SPI_CS_GPIO_Port, SD_SPI_CS_Pin, GPIO_PIN_SET);
 8001b54:	2201      	movs	r2, #1
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001b56:	f003 0308 	and.w	r3, r3, #8
 8001b5a:	9304      	str	r3, [sp, #16]
 8001b5c:	9b04      	ldr	r3, [sp, #16]
	HAL_GPIO_WritePin(SD_SPI_CS_GPIO_Port, SD_SPI_CS_Pin, GPIO_PIN_SET);
 8001b5e:	f001 fba7 	bl	80032b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPS_EN_GPIO_Port, GPS_EN_Pin, GPIO_PIN_RESET);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2101      	movs	r1, #1
 8001b66:	48a3      	ldr	r0, [pc, #652]	; (8001df4 <main+0x308>)
 8001b68:	f001 fba2 	bl	80032b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_LE_GPIO_Port, LED_LE_Pin, GPIO_PIN_SET);
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	2140      	movs	r1, #64	; 0x40
 8001b70:	48a0      	ldr	r0, [pc, #640]	; (8001df4 <main+0x308>)
 8001b72:	f001 fb9d 	bl	80032b0 <HAL_GPIO_WritePin>
	HAL_GPIO_Init(SD_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001b76:	a907      	add	r1, sp, #28
 8001b78:	489d      	ldr	r0, [pc, #628]	; (8001df0 <main+0x304>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7a:	e9cd 7507 	strd	r7, r5, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b7e:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
	HAL_GPIO_Init(SD_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001b82:	f001 faaf 	bl	80030e4 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPS_EN_GPIO_Port, &GPIO_InitStruct);
 8001b86:	a907      	add	r1, sp, #28
 8001b88:	489a      	ldr	r0, [pc, #616]	; (8001df4 <main+0x308>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8a:	e9cd 5507 	strd	r5, r5, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	9409      	str	r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b90:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
	HAL_GPIO_Init(GPS_EN_GPIO_Port, &GPIO_InitStruct);
 8001b94:	f001 faa6 	bl	80030e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : GPS_PPS_Pin */
	GPIO_InitStruct.Pin = GPS_PPS_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPS_PPS_GPIO_Port, &GPIO_InitStruct);
 8001b98:	a907      	add	r1, sp, #28
 8001b9a:	4896      	ldr	r0, [pc, #600]	; (8001df4 <main+0x308>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b9c:	e9cd 8407 	strd	r8, r4, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	9409      	str	r4, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPS_PPS_GPIO_Port, &GPIO_InitStruct);
 8001ba2:	f001 fa9f 	bl	80030e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : MPU_INT_Pin */
	GPIO_InitStruct.Pin = MPU_INT_Pin;
 8001ba6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(MPU_INT_GPIO_Port, &GPIO_InitStruct);
 8001baa:	a907      	add	r1, sp, #28
 8001bac:	4890      	ldr	r0, [pc, #576]	; (8001df0 <main+0x304>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bae:	e9cd 3407 	strd	r3, r4, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	9409      	str	r4, [sp, #36]	; 0x24
	HAL_GPIO_Init(MPU_INT_GPIO_Port, &GPIO_InitStruct);
 8001bb4:	f001 fa96 	bl	80030e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN_3_Pin BTN_2_Pin BTN_1_Pin */
	GPIO_InitStruct.Pin = BTN_3_Pin|BTN_2_Pin|BTN_1_Pin;
 8001bb8:	2338      	movs	r3, #56	; 0x38
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bba:	a907      	add	r1, sp, #28
 8001bbc:	488d      	ldr	r0, [pc, #564]	; (8001df4 <main+0x308>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bbe:	e9cd 3407 	strd	r3, r4, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bc2:	9509      	str	r5, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc4:	f001 fa8e 	bl	80030e4 <HAL_GPIO_Init>
	/*Configure GPIO pin : LED_LE_Pin */
	GPIO_InitStruct.Pin = LED_LE_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(LED_LE_GPIO_Port, &GPIO_InitStruct);
 8001bc8:	488a      	ldr	r0, [pc, #552]	; (8001df4 <main+0x308>)
 8001bca:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bcc:	e9cd 7507 	strd	r7, r5, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bd0:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
	HAL_GPIO_Init(LED_LE_GPIO_Port, &GPIO_InitStruct);
 8001bd4:	f001 fa86 	bl	80030e4 <HAL_GPIO_Init>
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8001bd8:	f44f 7382 	mov.w	r3, #260	; 0x104
	hspi2.Instance = SPI2;
 8001bdc:	4886      	ldr	r0, [pc, #536]	; (8001df8 <main+0x30c>)
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8001bde:	4f87      	ldr	r7, [pc, #540]	; (8001dfc <main+0x310>)
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001be0:	e9c0 4402 	strd	r4, r4, [r0, #8]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8001be4:	e9c0 7300 	strd	r7, r3, [r0]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8001be8:	f44f 7300 	mov.w	r3, #512	; 0x200
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bec:	e9c0 3406 	strd	r3, r4, [r0, #24]
	hspi2.Init.CRCPolynomial = 10;
 8001bf0:	230a      	movs	r3, #10
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bf2:	e9c0 4404 	strd	r4, r4, [r0, #16]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bf6:	e9c0 4408 	strd	r4, r4, [r0, #32]
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bfa:	6284      	str	r4, [r0, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8001bfc:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001bfe:	f002 fc26 	bl	800444e <HAL_SPI_Init>
 8001c02:	b108      	cbz	r0, 8001c08 <main+0x11c>
		Error_Handler();
 8001c04:	f7ff ff28 	bl	8001a58 <Error_Handler>
	huart1.Init.BaudRate = 115200;
 8001c08:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
	huart1.Instance = USART1;
 8001c0c:	487c      	ldr	r0, [pc, #496]	; (8001e00 <main+0x314>)
	huart1.Init.BaudRate = 115200;
 8001c0e:	4e7d      	ldr	r6, [pc, #500]	; (8001e04 <main+0x318>)
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001c10:	220c      	movs	r2, #12
	huart1.Init.BaudRate = 115200;
 8001c12:	e9c0 6300 	strd	r6, r3, [r0]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c16:	2300      	movs	r3, #0
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001c18:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001c1c:	6103      	str	r3, [r0, #16]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c1e:	e9c0 2305 	strd	r2, r3, [r0, #20]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c22:	61c3      	str	r3, [r0, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c24:	f002 ff4a 	bl	8004abc <HAL_UART_Init>
 8001c28:	b108      	cbz	r0, 8001c2e <main+0x142>
		Error_Handler();
 8001c2a:	f7ff ff15 	bl	8001a58 <Error_Handler>
	HAL_UART_Receive_IT (&huart1, receiveBuffer, (uint8_t) 1);
 8001c2e:	2201      	movs	r2, #1
 8001c30:	4975      	ldr	r1, [pc, #468]	; (8001e08 <main+0x31c>)
 8001c32:	4873      	ldr	r0, [pc, #460]	; (8001e00 <main+0x314>)
 8001c34:	f002 ffc9 	bl	8004bca <HAL_UART_Receive_IT>
	huart3.Init.BaudRate = 115200;
 8001c38:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
	huart3.Instance = USART3;
 8001c3c:	4873      	ldr	r0, [pc, #460]	; (8001e0c <main+0x320>)
	huart3.Init.BaudRate = 115200;
 8001c3e:	4d74      	ldr	r5, [pc, #464]	; (8001e10 <main+0x324>)
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001c40:	220c      	movs	r2, #12
	huart3.Init.BaudRate = 115200;
 8001c42:	e9c0 5300 	strd	r5, r3, [r0]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c46:	2300      	movs	r3, #0
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001c48:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001c4c:	6103      	str	r3, [r0, #16]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c4e:	e9c0 2305 	strd	r2, r3, [r0, #20]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c52:	61c3      	str	r3, [r0, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c54:	f002 ff32 	bl	8004abc <HAL_UART_Init>
 8001c58:	b108      	cbz	r0, 8001c5e <main+0x172>
		Error_Handler();
 8001c5a:	f7ff fefd 	bl	8001a58 <Error_Handler>
	hi2c1.Instance = I2C1;
 8001c5e:	486d      	ldr	r0, [pc, #436]	; (8001e14 <main+0x328>)
	hi2c1.Init.ClockSpeed = 400000;
 8001c60:	4c6d      	ldr	r4, [pc, #436]	; (8001e18 <main+0x32c>)
 8001c62:	4b6e      	ldr	r3, [pc, #440]	; (8001e1c <main+0x330>)
 8001c64:	e9c0 4300 	strd	r4, r3, [r0]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c68:	2400      	movs	r4, #0
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	hi2c1.Init.OwnAddress1 = 0;
 8001c6e:	e9c0 4402 	strd	r4, r4, [r0, #8]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c72:	e9c0 3404 	strd	r3, r4, [r0, #16]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c76:	e9c0 4406 	strd	r4, r4, [r0, #24]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c7a:	6204      	str	r4, [r0, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c7c:	f001 fc6a 	bl	8003554 <HAL_I2C_Init>
 8001c80:	b108      	cbz	r0, 8001c86 <main+0x19a>
		Error_Handler();
 8001c82:	f7ff fee9 	bl	8001a58 <Error_Handler>
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001c86:	221c      	movs	r2, #28
 8001c88:	2100      	movs	r1, #0
 8001c8a:	eb0d 0002 	add.w	r0, sp, r2
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c8e:	e9cd 4405 	strd	r4, r4, [sp, #20]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001c92:	f007 fdd8 	bl	8009846 <memset>
	htim2.Init.Prescaler = 479;
 8001c96:	f240 13df 	movw	r3, #479	; 0x1df
 8001c9a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	htim2.Instance = TIM2;
 8001c9e:	4860      	ldr	r0, [pc, #384]	; (8001e20 <main+0x334>)
	htim2.Init.Prescaler = 479;
 8001ca0:	e9c0 1300 	strd	r1, r3, [r0]
	htim2.Init.Period = 254;
 8001ca4:	23fe      	movs	r3, #254	; 0xfe
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca6:	6084      	str	r4, [r0, #8]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca8:	e9c0 3403 	strd	r3, r4, [r0, #12]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cac:	6184      	str	r4, [r0, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001cae:	f002 fda5 	bl	80047fc <HAL_TIM_PWM_Init>
 8001cb2:	b108      	cbz	r0, 8001cb8 <main+0x1cc>
		Error_Handler();
 8001cb4:	f7ff fed0 	bl	8001a58 <Error_Handler>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb8:	2300      	movs	r3, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cba:	a905      	add	r1, sp, #20
 8001cbc:	4858      	ldr	r0, [pc, #352]	; (8001e20 <main+0x334>)
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cbe:	e9cd 3305 	strd	r3, r3, [sp, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cc2:	f002 fe6d 	bl	80049a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001cc6:	b108      	cbz	r0, 8001ccc <main+0x1e0>
		Error_Handler();
 8001cc8:	f7ff fec6 	bl	8001a58 <Error_Handler>
	sConfigOC.Pulse = 124;
 8001ccc:	2260      	movs	r2, #96	; 0x60
 8001cce:	237c      	movs	r3, #124	; 0x7c
 8001cd0:	e9cd 2307 	strd	r2, r3, [sp, #28]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cd4:	2200      	movs	r2, #0
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cd6:	a907      	add	r1, sp, #28
 8001cd8:	4851      	ldr	r0, [pc, #324]	; (8001e20 <main+0x334>)
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cda:	9209      	str	r2, [sp, #36]	; 0x24
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cdc:	920b      	str	r2, [sp, #44]	; 0x2c
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cde:	f002 fdd3 	bl	8004888 <HAL_TIM_PWM_ConfigChannel>
 8001ce2:	b108      	cbz	r0, 8001ce8 <main+0x1fc>
		Error_Handler();
 8001ce4:	f7ff feb8 	bl	8001a58 <Error_Handler>
	HAL_TIM_MspPostInit(&htim2);
 8001ce8:	484d      	ldr	r0, [pc, #308]	; (8001e20 <main+0x334>)
 8001cea:	f000 ffbb 	bl	8002c64 <HAL_TIM_MspPostInit>
	BuzzerSetVolume(0);
 8001cee:	2000      	movs	r0, #0
 8001cf0:	f7ff f934 	bl	8000f5c <_Z15BuzzerSetVolumet>
	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	484a      	ldr	r0, [pc, #296]	; (8001e20 <main+0x334>)
 8001cf8:	f002 fe36 	bl	8004968 <HAL_TIM_OC_Start>
	HAL_Delay(50);
 8001cfc:	2032      	movs	r0, #50	; 0x32
 8001cfe:	f001 f92d 	bl	8002f5c <HAL_Delay>
	ssd1306_Init();
 8001d02:	f000 fe0d 	bl	8002920 <_Z12ssd1306_Initv>
	HAL_Delay(50);
 8001d06:	2032      	movs	r0, #50	; 0x32
 8001d08:	f001 f928 	bl	8002f5c <HAL_Delay>
	ssd1306_Fill(Black);
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	f000 fdd3 	bl	80028b8 <_Z12ssd1306_Fill13SSD1306_COLOR>
	HAL_Delay(50);
 8001d12:	2032      	movs	r0, #50	; 0x32
 8001d14:	f001 f922 	bl	8002f5c <HAL_Delay>
	ssd1306_UpdateScreen();
 8001d18:	f000 fddc 	bl	80028d4 <_Z20ssd1306_UpdateScreenv>
	HAL_Delay(50);
 8001d1c:	2032      	movs	r0, #50	; 0x32
 8001d1e:	f001 f91d 	bl	8002f5c <HAL_Delay>
	MPU9250_Init(&hi2c1,&accelStruct,TM_MPU9250_Device_0);
 8001d22:	2200      	movs	r2, #0
 8001d24:	493f      	ldr	r1, [pc, #252]	; (8001e24 <main+0x338>)
 8001d26:	483b      	ldr	r0, [pc, #236]	; (8001e14 <main+0x328>)
 8001d28:	f7ff f990 	bl	800104c <MPU9250_Init>
	USART1->CR1 |= USART_CR1_RXNEIE; /*//прерывание по приему данных*/
 8001d2c:	4a35      	ldr	r2, [pc, #212]	; (8001e04 <main+0x318>)
	HAL_UART_Receive_IT (&huart1, receiveBuffer, (uint8_t) 1);
 8001d2e:	4936      	ldr	r1, [pc, #216]	; (8001e08 <main+0x31c>)
	USART1->CR1 |= USART_CR1_RXNEIE; /*//прерывание по приему данных*/
 8001d30:	68d3      	ldr	r3, [r2, #12]
	HAL_UART_Receive_IT (&huart1, receiveBuffer, (uint8_t) 1);
 8001d32:	4833      	ldr	r0, [pc, #204]	; (8001e00 <main+0x314>)
	USART1->CR1 |= USART_CR1_RXNEIE; /*//прерывание по приему данных*/
 8001d34:	f043 0320 	orr.w	r3, r3, #32
 8001d38:	60d3      	str	r3, [r2, #12]
	HAL_UART_Receive_IT (&huart1, receiveBuffer, (uint8_t) 1);
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f002 ff45 	bl	8004bca <HAL_UART_Receive_IT>
    sd_ini();
 8001d40:	f000 fcc2 	bl	80026c8 <_Z6sd_iniv>
	osKernelInitialize();
 8001d44:	f005 fd52 	bl	80077ec <osKernelInitialize>
	I2C_BinarySemHandle = osSemaphoreNew(1, 1, &I2C_BinarySem_attributes);
 8001d48:	2101      	movs	r1, #1
 8001d4a:	4a37      	ldr	r2, [pc, #220]	; (8001e28 <main+0x33c>)
 8001d4c:	4608      	mov	r0, r1
 8001d4e:	f005 fe01 	bl	8007954 <osSemaphoreNew>
	accelStructBinarySemHandle = osSemaphoreNew(1,1, &accelStructBinarySem_attributes);
 8001d52:	2101      	movs	r1, #1
	I2C_BinarySemHandle = osSemaphoreNew(1, 1, &I2C_BinarySem_attributes);
 8001d54:	4b35      	ldr	r3, [pc, #212]	; (8001e2c <main+0x340>)
	accelStructBinarySemHandle = osSemaphoreNew(1,1, &accelStructBinarySem_attributes);
 8001d56:	4a36      	ldr	r2, [pc, #216]	; (8001e30 <main+0x344>)
	I2C_BinarySemHandle = osSemaphoreNew(1, 1, &I2C_BinarySem_attributes);
 8001d58:	6018      	str	r0, [r3, #0]
	accelStructBinarySemHandle = osSemaphoreNew(1,1, &accelStructBinarySem_attributes);
 8001d5a:	4608      	mov	r0, r1
 8001d5c:	f005 fdfa 	bl	8007954 <osSemaphoreNew>
	debugUARTBinarySemHandle = osSemaphoreNew(1,1, &debugUARTBinarySem_attributes);
 8001d60:	2101      	movs	r1, #1
	accelStructBinarySemHandle = osSemaphoreNew(1,1, &accelStructBinarySem_attributes);
 8001d62:	4b34      	ldr	r3, [pc, #208]	; (8001e34 <main+0x348>)
	debugUARTBinarySemHandle = osSemaphoreNew(1,1, &debugUARTBinarySem_attributes);
 8001d64:	4a34      	ldr	r2, [pc, #208]	; (8001e38 <main+0x34c>)
	accelStructBinarySemHandle = osSemaphoreNew(1,1, &accelStructBinarySem_attributes);
 8001d66:	6018      	str	r0, [r3, #0]
	debugUARTBinarySemHandle = osSemaphoreNew(1,1, &debugUARTBinarySem_attributes);
 8001d68:	4608      	mov	r0, r1
 8001d6a:	f005 fdf3 	bl	8007954 <osSemaphoreNew>
 8001d6e:	4b33      	ldr	r3, [pc, #204]	; (8001e3c <main+0x350>)
				name : NameQ,
 8001d70:	4c33      	ldr	r4, [pc, #204]	; (8001e40 <main+0x354>)
 8001d72:	6018      	str	r0, [r3, #0]
		const osMessageQueueAttr_t attributes = {
 8001d74:	2214      	movs	r2, #20
 8001d76:	2100      	movs	r1, #0
 8001d78:	a808      	add	r0, sp, #32
 8001d7a:	f007 fd64 	bl	8009846 <memset>
 8001d7e:	68a3      	ldr	r3, [r4, #8]
		xHandle=osMessageQueueNew (queueSize, sizeof(T), &attributes);
 8001d80:	aa07      	add	r2, sp, #28
 8001d82:	2106      	movs	r1, #6
 8001d84:	88a0      	ldrh	r0, [r4, #4]
		const osMessageQueueAttr_t attributes = {
 8001d86:	9307      	str	r3, [sp, #28]
		xHandle=osMessageQueueNew (queueSize, sizeof(T), &attributes);
 8001d88:	f005 fea2 	bl	8007ad0 <osMessageQueueNew>
 8001d8c:	6020      	str	r0, [r4, #0]
				name : NameQ,
 8001d8e:	4c2d      	ldr	r4, [pc, #180]	; (8001e44 <main+0x358>)
		const osMessageQueueAttr_t attributes = {
 8001d90:	2214      	movs	r2, #20
 8001d92:	2100      	movs	r1, #0
 8001d94:	a808      	add	r0, sp, #32
 8001d96:	f007 fd56 	bl	8009846 <memset>
 8001d9a:	68a3      	ldr	r3, [r4, #8]
		xHandle=osMessageQueueNew (queueSize, sizeof(T), &attributes);
 8001d9c:	aa07      	add	r2, sp, #28
 8001d9e:	2102      	movs	r1, #2
 8001da0:	88a0      	ldrh	r0, [r4, #4]
		const osMessageQueueAttr_t attributes = {
 8001da2:	9307      	str	r3, [sp, #28]
		xHandle=osMessageQueueNew (queueSize, sizeof(T), &attributes);
 8001da4:	f005 fe94 	bl	8007ad0 <osMessageQueueNew>
 8001da8:	6020      	str	r0, [r4, #0]
				name : NameQ,
 8001daa:	4c27      	ldr	r4, [pc, #156]	; (8001e48 <main+0x35c>)
		const osMessageQueueAttr_t attributes = {
 8001dac:	2214      	movs	r2, #20
 8001dae:	2100      	movs	r1, #0
 8001db0:	a808      	add	r0, sp, #32
 8001db2:	f007 fd48 	bl	8009846 <memset>
 8001db6:	68a3      	ldr	r3, [r4, #8]
		xHandle=osMessageQueueNew (queueSize, sizeof(T), &attributes);
 8001db8:	aa07      	add	r2, sp, #28
 8001dba:	2102      	movs	r1, #2
 8001dbc:	88a0      	ldrh	r0, [r4, #4]
		const osMessageQueueAttr_t attributes = {
 8001dbe:	9307      	str	r3, [sp, #28]
		xHandle=osMessageQueueNew (queueSize, sizeof(T), &attributes);
 8001dc0:	f005 fe86 	bl	8007ad0 <osMessageQueueNew>
 8001dc4:	6020      	str	r0, [r4, #0]
				name : NameQ,
 8001dc6:	4c21      	ldr	r4, [pc, #132]	; (8001e4c <main+0x360>)
		const osMessageQueueAttr_t attributes = {
 8001dc8:	2214      	movs	r2, #20
 8001dca:	2100      	movs	r1, #0
 8001dcc:	a808      	add	r0, sp, #32
 8001dce:	f007 fd3a 	bl	8009846 <memset>
 8001dd2:	68a3      	ldr	r3, [r4, #8]
		xHandle=osMessageQueueNew (queueSize, sizeof(T), &attributes);
 8001dd4:	aa07      	add	r2, sp, #28
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	88a0      	ldrh	r0, [r4, #4]
		const osMessageQueueAttr_t attributes = {
 8001dda:	9307      	str	r3, [sp, #28]
		xHandle=osMessageQueueNew (queueSize, sizeof(T), &attributes);
 8001ddc:	f005 fe78 	bl	8007ad0 <osMessageQueueNew>
	defaultTask.start(StartDefaultTask);
 8001de0:	491b      	ldr	r1, [pc, #108]	; (8001e50 <main+0x364>)
 8001de2:	6020      	str	r0, [r4, #0]
 8001de4:	481b      	ldr	r0, [pc, #108]	; (8001e54 <main+0x368>)
 8001de6:	f7ff fcd3 	bl	8001790 <_ZN6osTask5startEPFvPvE>
 8001dea:	e035      	b.n	8001e58 <main+0x36c>
 8001dec:	40021000 	.word	0x40021000
 8001df0:	40010800 	.word	0x40010800
 8001df4:	40010c00 	.word	0x40010c00
 8001df8:	20000330 	.word	0x20000330
 8001dfc:	40003800 	.word	0x40003800
 8001e00:	200003c8 	.word	0x200003c8
 8001e04:	40013800 	.word	0x40013800
 8001e08:	20000464 	.word	0x20000464
 8001e0c:	20000408 	.word	0x20000408
 8001e10:	40004800 	.word	0x40004800
 8001e14:	200002dc 	.word	0x200002dc
 8001e18:	40005400 	.word	0x40005400
 8001e1c:	00061a80 	.word	0x00061a80
 8001e20:	20000388 	.word	0x20000388
 8001e24:	20000224 	.word	0x20000224
 8001e28:	0800c484 	.word	0x0800c484
 8001e2c:	20000220 	.word	0x20000220
 8001e30:	0800c4a4 	.word	0x0800c4a4
 8001e34:	2000026c 	.word	0x2000026c
 8001e38:	0800c494 	.word	0x0800c494
 8001e3c:	2000029c 	.word	0x2000029c
 8001e40:	20000280 	.word	0x20000280
 8001e44:	200002b0 	.word	0x200002b0
 8001e48:	20000448 	.word	0x20000448
 8001e4c:	20000214 	.word	0x20000214
 8001e50:	0800149d 	.word	0x0800149d
 8001e54:	200002a0 	.word	0x200002a0
	buzzerTask.start(StartBuzzerTask);				//Handle = osThreadNew(StartBuzzerTask, NULL, &buzzerTask_attributes);
 8001e58:	490d      	ldr	r1, [pc, #52]	; (8001e90 <main+0x3a4>)
 8001e5a:	480e      	ldr	r0, [pc, #56]	; (8001e94 <main+0x3a8>)
 8001e5c:	f7ff fc98 	bl	8001790 <_ZN6osTask5startEPFvPvE>
	keyboardTask.start(StartKeyboardTask);			//Handle = osThreadNew(StartKeyboardTask, NULL, &keyboardTask_attributes);
 8001e60:	490d      	ldr	r1, [pc, #52]	; (8001e98 <main+0x3ac>)
 8001e62:	480e      	ldr	r0, [pc, #56]	; (8001e9c <main+0x3b0>)
 8001e64:	f7ff fc94 	bl	8001790 <_ZN6osTask5startEPFvPvE>
	dysplayTask.start(StartDysplayTask);			//Handle = osThreadNew(StartDysplayTask, NULL, &dysplayTask_attributes);
 8001e68:	490d      	ldr	r1, [pc, #52]	; (8001ea0 <main+0x3b4>)
 8001e6a:	480e      	ldr	r0, [pc, #56]	; (8001ea4 <main+0x3b8>)
 8001e6c:	f7ff fc90 	bl	8001790 <_ZN6osTask5startEPFvPvE>
	accelTask.start(StartAccelTask);				//Handle = osThreadNew(StartAccelTask, NULL, &accelTask_attributes);
 8001e70:	490d      	ldr	r1, [pc, #52]	; (8001ea8 <main+0x3bc>)
 8001e72:	480e      	ldr	r0, [pc, #56]	; (8001eac <main+0x3c0>)
 8001e74:	f7ff fc8c 	bl	8001790 <_ZN6osTask5startEPFvPvE>
	gpsNMEA_ParserT.start(StartgpsNMEA_ParserTask);	//Handle = osThreadNew(StartgpsNMEA_ParserTask, NULL, &gpsNMEA_ParserT_attributes);
 8001e78:	490d      	ldr	r1, [pc, #52]	; (8001eb0 <main+0x3c4>)
 8001e7a:	480e      	ldr	r0, [pc, #56]	; (8001eb4 <main+0x3c8>)
 8001e7c:	f7ff fc88 	bl	8001790 <_ZN6osTask5startEPFvPvE>
	sdCardTask.start(StartSDcardTask);
 8001e80:	490d      	ldr	r1, [pc, #52]	; (8001eb8 <main+0x3cc>)
 8001e82:	480e      	ldr	r0, [pc, #56]	; (8001ebc <main+0x3d0>)
 8001e84:	f7ff fc84 	bl	8001790 <_ZN6osTask5startEPFvPvE>
	osKernelStart();
 8001e88:	f005 fccc 	bl	8007824 <osKernelStart>
 8001e8c:	e7fe      	b.n	8001e8c <main+0x3a0>
 8001e8e:	bf00      	nop
 8001e90:	0800171d 	.word	0x0800171d
 8001e94:	2000028c 	.word	0x2000028c
 8001e98:	080014a9 	.word	0x080014a9
 8001e9c:	20000454 	.word	0x20000454
 8001ea0:	080014cd 	.word	0x080014cd
 8001ea4:	200002bc 	.word	0x200002bc
 8001ea8:	080016d1 	.word	0x080016d1
 8001eac:	20000270 	.word	0x20000270
 8001eb0:	08001759 	.word	0x08001759
 8001eb4:	200002cc 	.word	0x200002cc
 8001eb8:	08001a49 	.word	0x08001a49
 8001ebc:	20000484 	.word	0x20000484

08001ec0 <_GLOBAL__sub_I_hi2c1>:
	osTask(const char *name,uint16_t stack,osPriority_t osPriority=osPriorityNormal ):NameQ(name),stack_size(stack)
 8001ec0:	491f      	ldr	r1, [pc, #124]	; (8001f40 <_GLOBAL__sub_I_hi2c1+0x80>)
 8001ec2:	4b20      	ldr	r3, [pc, #128]	; (8001f44 <_GLOBAL__sub_I_hi2c1+0x84>)
 8001ec4:	2240      	movs	r2, #64	; 0x40
 8001ec6:	608b      	str	r3, [r1, #8]
		priority=osPriority;
 8001ec8:	2318      	movs	r3, #24
	osTask(const char *name,uint16_t stack,osPriority_t osPriority=osPriorityNormal ):NameQ(name),stack_size(stack)
 8001eca:	818a      	strh	r2, [r1, #12]
		priority=osPriority;
 8001ecc:	604b      	str	r3, [r1, #4]
	osTask(const char *name,uint16_t stack,osPriority_t osPriority=osPriorityNormal ):NameQ(name),stack_size(stack)
 8001ece:	481e      	ldr	r0, [pc, #120]	; (8001f48 <_GLOBAL__sub_I_hi2c1+0x88>)
 8001ed0:	491e      	ldr	r1, [pc, #120]	; (8001f4c <_GLOBAL__sub_I_hi2c1+0x8c>)
 8001ed2:	6088      	str	r0, [r1, #8]
 8001ed4:	818a      	strh	r2, [r1, #12]
		priority=osPriority;
 8001ed6:	604b      	str	r3, [r1, #4]
	osTask(const char *name,uint16_t stack,osPriority_t osPriority=osPriorityNormal ):NameQ(name),stack_size(stack)
 8001ed8:	481d      	ldr	r0, [pc, #116]	; (8001f50 <_GLOBAL__sub_I_hi2c1+0x90>)
 8001eda:	491e      	ldr	r1, [pc, #120]	; (8001f54 <_GLOBAL__sub_I_hi2c1+0x94>)
 8001edc:	6088      	str	r0, [r1, #8]
 8001ede:	2046      	movs	r0, #70	; 0x46
		priority=osPriority;
 8001ee0:	604b      	str	r3, [r1, #4]
	osTask(const char *name,uint16_t stack,osPriority_t osPriority=osPriorityNormal ):NameQ(name),stack_size(stack)
 8001ee2:	8188      	strh	r0, [r1, #12]
 8001ee4:	491c      	ldr	r1, [pc, #112]	; (8001f58 <_GLOBAL__sub_I_hi2c1+0x98>)
 8001ee6:	481d      	ldr	r0, [pc, #116]	; (8001f5c <_GLOBAL__sub_I_hi2c1+0x9c>)
		priority=osPriority;
 8001ee8:	604b      	str	r3, [r1, #4]
	osTask(const char *name,uint16_t stack,osPriority_t osPriority=osPriorityNormal ):NameQ(name),stack_size(stack)
 8001eea:	6088      	str	r0, [r1, #8]
 8001eec:	208c      	movs	r0, #140	; 0x8c
 8001eee:	8188      	strh	r0, [r1, #12]
 8001ef0:	491b      	ldr	r1, [pc, #108]	; (8001f60 <_GLOBAL__sub_I_hi2c1+0xa0>)
 8001ef2:	481c      	ldr	r0, [pc, #112]	; (8001f64 <_GLOBAL__sub_I_hi2c1+0xa4>)
 8001ef4:	818a      	strh	r2, [r1, #12]
 8001ef6:	6088      	str	r0, [r1, #8]
		priority=osPriority;
 8001ef8:	604b      	str	r3, [r1, #4]
	osTask(const char *name,uint16_t stack,osPriority_t osPriority=osPriorityNormal ):NameQ(name),stack_size(stack)
 8001efa:	481b      	ldr	r0, [pc, #108]	; (8001f68 <_GLOBAL__sub_I_hi2c1+0xa8>)
 8001efc:	491b      	ldr	r1, [pc, #108]	; (8001f6c <_GLOBAL__sub_I_hi2c1+0xac>)
 8001efe:	6088      	str	r0, [r1, #8]
 8001f00:	20c8      	movs	r0, #200	; 0xc8
		priority=osPriority;
 8001f02:	604b      	str	r3, [r1, #4]
	osTask(const char *name,uint16_t stack,osPriority_t osPriority=osPriorityNormal ):NameQ(name),stack_size(stack)
 8001f04:	8188      	strh	r0, [r1, #12]
 8001f06:	4b1a      	ldr	r3, [pc, #104]	; (8001f70 <_GLOBAL__sub_I_hi2c1+0xb0>)
 8001f08:	491a      	ldr	r1, [pc, #104]	; (8001f74 <_GLOBAL__sub_I_hi2c1+0xb4>)
 8001f0a:	6099      	str	r1, [r3, #8]
 8001f0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f10:	8199      	strh	r1, [r3, #12]
		priority=osPriority;
 8001f12:	2123      	movs	r1, #35	; 0x23
 8001f14:	6059      	str	r1, [r3, #4]
	osQueue(uint16_t count,const char *name):NameQ(name),queueSize(count)
 8001f16:	2102      	movs	r1, #2
 8001f18:	4b17      	ldr	r3, [pc, #92]	; (8001f78 <_GLOBAL__sub_I_hi2c1+0xb8>)
 8001f1a:	8099      	strh	r1, [r3, #4]
 8001f1c:	4917      	ldr	r1, [pc, #92]	; (8001f7c <_GLOBAL__sub_I_hi2c1+0xbc>)
 8001f1e:	6099      	str	r1, [r3, #8]
 8001f20:	2110      	movs	r1, #16
 8001f22:	4b17      	ldr	r3, [pc, #92]	; (8001f80 <_GLOBAL__sub_I_hi2c1+0xc0>)
 8001f24:	8099      	strh	r1, [r3, #4]
 8001f26:	4917      	ldr	r1, [pc, #92]	; (8001f84 <_GLOBAL__sub_I_hi2c1+0xc4>)
 8001f28:	6099      	str	r1, [r3, #8]
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	4b16      	ldr	r3, [pc, #88]	; (8001f88 <_GLOBAL__sub_I_hi2c1+0xc8>)
 8001f2e:	8099      	strh	r1, [r3, #4]
 8001f30:	4916      	ldr	r1, [pc, #88]	; (8001f8c <_GLOBAL__sub_I_hi2c1+0xcc>)
 8001f32:	6099      	str	r1, [r3, #8]
 8001f34:	4b16      	ldr	r3, [pc, #88]	; (8001f90 <_GLOBAL__sub_I_hi2c1+0xd0>)
 8001f36:	809a      	strh	r2, [r3, #4]
 8001f38:	4a16      	ldr	r2, [pc, #88]	; (8001f94 <_GLOBAL__sub_I_hi2c1+0xd4>)
 8001f3a:	609a      	str	r2, [r3, #8]

}
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	200002a0 	.word	0x200002a0
 8001f44:	0800c163 	.word	0x0800c163
 8001f48:	0800c16f 	.word	0x0800c16f
 8001f4c:	2000028c 	.word	0x2000028c
 8001f50:	0800c17a 	.word	0x0800c17a
 8001f54:	20000454 	.word	0x20000454
 8001f58:	200002bc 	.word	0x200002bc
 8001f5c:	0800c187 	.word	0x0800c187
 8001f60:	20000270 	.word	0x20000270
 8001f64:	0800c193 	.word	0x0800c193
 8001f68:	0800c19d 	.word	0x0800c19d
 8001f6c:	200002cc 	.word	0x200002cc
 8001f70:	20000484 	.word	0x20000484
 8001f74:	0800c1ad 	.word	0x0800c1ad
 8001f78:	20000280 	.word	0x20000280
 8001f7c:	0800c1b8 	.word	0x0800c1b8
 8001f80:	200002b0 	.word	0x200002b0
 8001f84:	0800c1c4 	.word	0x0800c1c4
 8001f88:	20000448 	.word	0x20000448
 8001f8c:	0800c1d1 	.word	0x0800c1d1
 8001f90:	20000214 	.word	0x20000214
 8001f94:	0800c1df 	.word	0x0800c1df

08001f98 <_ZN9NMEA_UART6ParserD1Ev>:
    GPS_COUNT = 0;

}

Parser::~Parser() {
}
 8001f98:	4770      	bx	lr

08001f9a <_ZN9NMEA_UART6ParserD0Ev>:
Parser::~Parser() {
 8001f9a:	b510      	push	{r4, lr}
 8001f9c:	4604      	mov	r4, r0
}
 8001f9e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001fa2:	f007 fc07 	bl	80097b4 <_ZdlPvj>
 8001fa6:	4620      	mov	r0, r4
 8001fa8:	bd10      	pop	{r4, pc}
	...

08001fac <_ZN9NMEA_UART6ParserC1Ev>:
    GSV { UNUSED, UNUSED, ViewSatellite, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED}
 8001fac:	4601      	mov	r1, r0
 8001fae:	4a65      	ldr	r2, [pc, #404]	; (8002144 <_ZN9NMEA_UART6ParserC1Ev+0x198>)
Parser::Parser() :
 8001fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    GSV { UNUSED, UNUSED, ViewSatellite, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED, UNUSED}
 8001fb4:	f841 2b04 	str.w	r2, [r1], #4
 8001fb8:	f100 020e 	add.w	r2, r0, #14
 8001fbc:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
 8001fc0:	f100 0235 	add.w	r2, r0, #53	; 0x35
 8001fc4:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
 8001fc8:	f8c0 20e0 	str.w	r2, [r0, #224]	; 0xe0
 8001fcc:	f8c0 1120 	str.w	r1, [r0, #288]	; 0x120
 8001fd0:	f100 023e 	add.w	r2, r0, #62	; 0x3e
 8001fd4:	f100 0163 	add.w	r1, r0, #99	; 0x63
 8001fd8:	f100 042a 	add.w	r4, r0, #42	; 0x2a
 8001fdc:	f100 0e2c 	add.w	lr, r0, #44	; 0x2c
 8001fe0:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
 8001fe4:	f100 0848 	add.w	r8, r0, #72	; 0x48
 8001fe8:	f100 02a0 	add.w	r2, r0, #160	; 0xa0
 8001fec:	f8c0 1134 	str.w	r1, [r0, #308]	; 0x134
 8001ff0:	f100 0165 	add.w	r1, r0, #101	; 0x65
 8001ff4:	e9c0 823e 	strd	r8, r2, [r0, #248]	; 0xf8
 8001ff8:	f100 0710 	add.w	r7, r0, #16
 8001ffc:	f100 061c 	add.w	r6, r0, #28
 8002000:	f100 051e 	add.w	r5, r0, #30
 8002004:	f8c0 40d8 	str.w	r4, [r0, #216]	; 0xd8
 8002008:	f8c0 e0dc 	str.w	lr, [r0, #220]	; 0xdc
 800200c:	f100 0c46 	add.w	ip, r0, #70	; 0x46
 8002010:	f8c0 e108 	str.w	lr, [r0, #264]	; 0x108
 8002014:	f8c0 4130 	str.w	r4, [r0, #304]	; 0x130
 8002018:	f8c0 1138 	str.w	r1, [r0, #312]	; 0x138
 800201c:	f100 0468 	add.w	r4, r0, #104	; 0x68
 8002020:	f100 018c 	add.w	r1, r0, #140	; 0x8c
 8002024:	f100 0851 	add.w	r8, r0, #81	; 0x51
 8002028:	f100 0e5a 	add.w	lr, r0, #90	; 0x5a
 800202c:	e9c0 223a 	strd	r2, r2, [r0, #232]	; 0xe8
 8002030:	e9c0 c23c 	strd	ip, r2, [r0, #240]	; 0xf0
 8002034:	f8c0 2104 	str.w	r2, [r0, #260]	; 0x104
 8002038:	f8c0 210c 	str.w	r2, [r0, #268]	; 0x10c
 800203c:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
 8002040:	f8c0 211c 	str.w	r2, [r0, #284]	; 0x11c
 8002044:	f8c0 70cc 	str.w	r7, [r0, #204]	; 0xcc
 8002048:	f8c0 60d0 	str.w	r6, [r0, #208]	; 0xd0
 800204c:	f8c0 50d4 	str.w	r5, [r0, #212]	; 0xd4
 8002050:	f8c0 8100 	str.w	r8, [r0, #256]	; 0x100
 8002054:	f8c0 e110 	str.w	lr, [r0, #272]	; 0x110
 8002058:	f8c0 c118 	str.w	ip, [r0, #280]	; 0x118
 800205c:	f8c0 7124 	str.w	r7, [r0, #292]	; 0x124
 8002060:	f8c0 6128 	str.w	r6, [r0, #296]	; 0x128
 8002064:	f8c0 512c 	str.w	r5, [r0, #300]	; 0x12c
 8002068:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
 800206c:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
 8002070:	f100 0474 	add.w	r4, r0, #116	; 0x74
 8002074:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
 8002078:	f100 0480 	add.w	r4, r0, #128	; 0x80
 800207c:	f8c0 415c 	str.w	r4, [r0, #348]	; 0x15c
 8002080:	f8c0 1198 	str.w	r1, [r0, #408]	; 0x198
 8002084:	f100 0482 	add.w	r4, r0, #130	; 0x82
 8002088:	f100 0194 	add.w	r1, r0, #148	; 0x94
 800208c:	f8c0 4160 	str.w	r4, [r0, #352]	; 0x160
 8002090:	f8c0 119c 	str.w	r1, [r0, #412]	; 0x19c
 8002094:	f100 0484 	add.w	r4, r0, #132	; 0x84
 8002098:	f100 019c 	add.w	r1, r0, #156	; 0x9c
 800209c:	f8c0 2144 	str.w	r2, [r0, #324]	; 0x144
 80020a0:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
 80020a4:	f8c0 2150 	str.w	r2, [r0, #336]	; 0x150
 80020a8:	f8c0 2154 	str.w	r2, [r0, #340]	; 0x154
 80020ac:	f8c0 2158 	str.w	r2, [r0, #344]	; 0x158
 80020b0:	f8c0 2164 	str.w	r2, [r0, #356]	; 0x164
 80020b4:	f8c0 2168 	str.w	r2, [r0, #360]	; 0x168
 80020b8:	f8c0 216c 	str.w	r2, [r0, #364]	; 0x16c
 80020bc:	f8c0 2170 	str.w	r2, [r0, #368]	; 0x170
 80020c0:	f8c0 2174 	str.w	r2, [r0, #372]	; 0x174
 80020c4:	f8c0 2178 	str.w	r2, [r0, #376]	; 0x178
 80020c8:	f8c0 217c 	str.w	r2, [r0, #380]	; 0x17c
 80020cc:	f8c0 2180 	str.w	r2, [r0, #384]	; 0x180
 80020d0:	f8c0 2184 	str.w	r2, [r0, #388]	; 0x184
 80020d4:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 80020d8:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 80020dc:	f8c0 2190 	str.w	r2, [r0, #400]	; 0x190
 80020e0:	f8c0 21a0 	str.w	r2, [r0, #416]	; 0x1a0
 80020e4:	f8c0 21a4 	str.w	r2, [r0, #420]	; 0x1a4
 80020e8:	f8c0 21a8 	str.w	r2, [r0, #424]	; 0x1a8
 80020ec:	f8c0 21b0 	str.w	r2, [r0, #432]	; 0x1b0
 80020f0:	f8c0 21b4 	str.w	r2, [r0, #436]	; 0x1b4
 80020f4:	f8c0 21b8 	str.w	r2, [r0, #440]	; 0x1b8
 80020f8:	f8c0 21bc 	str.w	r2, [r0, #444]	; 0x1bc
 80020fc:	f8c0 4194 	str.w	r4, [r0, #404]	; 0x194
 8002100:	f8c0 11ac 	str.w	r1, [r0, #428]	; 0x1ac
 8002104:	f8c0 21c0 	str.w	r2, [r0, #448]	; 0x1c0
 8002108:	f8c0 21c4 	str.w	r2, [r0, #452]	; 0x1c4
 800210c:	f8c0 21c8 	str.w	r2, [r0, #456]	; 0x1c8
 8002110:	f8c0 21cc 	str.w	r2, [r0, #460]	; 0x1cc
 8002114:	f8c0 21d0 	str.w	r2, [r0, #464]	; 0x1d0
 8002118:	f8c0 21d4 	str.w	r2, [r0, #468]	; 0x1d4
 800211c:	f8c0 21d8 	str.w	r2, [r0, #472]	; 0x1d8
 8002120:	f8c0 21dc 	str.w	r2, [r0, #476]	; 0x1dc
 8002124:	f8c0 21e0 	str.w	r2, [r0, #480]	; 0x1e0
 8002128:	f8c0 21e4 	str.w	r2, [r0, #484]	; 0x1e4
 800212c:	f8c0 21e8 	str.w	r2, [r0, #488]	; 0x1e8
 8002130:	f8c0 21ec 	str.w	r2, [r0, #492]	; 0x1ec
 8002134:	f8c0 21f0 	str.w	r2, [r0, #496]	; 0x1f0
    GLONAS_COUNT = 0;
 8002138:	2200      	movs	r2, #0
 800213a:	f8a0 20c0 	strh.w	r2, [r0, #192]	; 0xc0
}
 800213e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002142:	bf00      	nop
 8002144:	0800c4f4 	.word	0x0800c4f4

08002148 <_ZN9NMEA_UART10asciiToIntEPc>:
    resultDecCoor = dd + ((float) mm / 60) + ((float) ss / 60);
    return (resultDecCoor);
}

/*//Конвертация String в Int, строка без точки, "154" -> 154*/
int asciiToInt(char* s) {
 8002148:	1e42      	subs	r2, r0, #1
    int n = 0;
    while (*s >= '0' && *s <= '9') {
        n *= 10;
 800214a:	210a      	movs	r1, #10
    int n = 0;
 800214c:	2000      	movs	r0, #0
int asciiToInt(char* s) {
 800214e:	b510      	push	{r4, lr}
    while (*s >= '0' && *s <= '9') {
 8002150:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8002154:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 8002158:	2c09      	cmp	r4, #9
 800215a:	d803      	bhi.n	8002164 <_ZN9NMEA_UART10asciiToIntEPc+0x1c>
        n += *s++;
 800215c:	fb01 3000 	mla	r0, r1, r0, r3
        n -= '0';
 8002160:	3830      	subs	r0, #48	; 0x30
    while (*s >= '0' && *s <= '9') {
 8002162:	e7f5      	b.n	8002150 <_ZN9NMEA_UART10asciiToIntEPc+0x8>
    }
    return (n);
}
 8002164:	bd10      	pop	{r4, pc}
	...

08002168 <_ZN9NMEA_UART6Parser10charParserEh>:
    if (data == '$') {
 8002168:	2924      	cmp	r1, #36	; 0x24
GPS_MESSEGE_TYPE Parser::charParser(unsigned char data) {
 800216a:	b570      	push	{r4, r5, r6, lr}
 800216c:	4604      	mov	r4, r0
 800216e:	4e8e      	ldr	r6, [pc, #568]	; (80023a8 <_ZN9NMEA_UART6Parser10charParserEh+0x240>)
    if (data == '$') {
 8002170:	d108      	bne.n	8002184 <_ZN9NMEA_UART6Parser10charParserEh+0x1c>
        ComaPoint = 0xff;
 8002172:	22ff      	movs	r2, #255	; 0xff
        ByteCount = 0;
 8002174:	2000      	movs	r0, #0
        ComaPoint = 0xff;
 8002176:	4b8d      	ldr	r3, [pc, #564]	; (80023ac <_ZN9NMEA_UART6Parser10charParserEh+0x244>)
        ByteCount = 0;
 8002178:	7030      	strb	r0, [r6, #0]
        ComaPoint = 0xff;
 800217a:	701a      	strb	r2, [r3, #0]
        MsgTxt = (char*) &MsgType;
 800217c:	4b8c      	ldr	r3, [pc, #560]	; (80023b0 <_ZN9NMEA_UART6Parser10charParserEh+0x248>)
 800217e:	4a8d      	ldr	r2, [pc, #564]	; (80023b4 <_ZN9NMEA_UART6Parser10charParserEh+0x24c>)
 8002180:	601a      	str	r2, [r3, #0]
}
 8002182:	bd70      	pop	{r4, r5, r6, pc}
    if (ByteCount == 0xff)
 8002184:	7833      	ldrb	r3, [r6, #0]
 8002186:	2bff      	cmp	r3, #255	; 0xff
 8002188:	d101      	bne.n	800218e <_ZN9NMEA_UART6Parser10charParserEh+0x26>
        return (GPS_NULL);
 800218a:	2000      	movs	r0, #0
 800218c:	e7f9      	b.n	8002182 <_ZN9NMEA_UART6Parser10charParserEh+0x1a>
    ByteCount++;
 800218e:	1c5a      	adds	r2, r3, #1
 8002190:	b2d2      	uxtb	r2, r2
    if (ByteCount <= 1)
 8002192:	2a01      	cmp	r2, #1
    ByteCount++;
 8002194:	7032      	strb	r2, [r6, #0]
    if (ByteCount <= 1)
 8002196:	d0f8      	beq.n	800218a <_ZN9NMEA_UART6Parser10charParserEh+0x22>
    if (ByteCount < 6 && ByteCount > 1) /*//берем 4 символа заголовка*/
 8002198:	3b01      	subs	r3, #1
 800219a:	2b03      	cmp	r3, #3
 800219c:	d805      	bhi.n	80021aa <_ZN9NMEA_UART6Parser10charParserEh+0x42>
        *MsgTxt = data; /*//и делаем из него число*/
 800219e:	4a84      	ldr	r2, [pc, #528]	; (80023b0 <_ZN9NMEA_UART6Parser10charParserEh+0x248>)
 80021a0:	6813      	ldr	r3, [r2, #0]
 80021a2:	f803 1b01 	strb.w	r1, [r3], #1
        MsgTxt++;
 80021a6:	6013      	str	r3, [r2, #0]
 80021a8:	e7ef      	b.n	800218a <_ZN9NMEA_UART6Parser10charParserEh+0x22>
    switch (MsgType) {
 80021aa:	4d82      	ldr	r5, [pc, #520]	; (80023b4 <_ZN9NMEA_UART6Parser10charParserEh+0x24c>)
 80021ac:	4a82      	ldr	r2, [pc, #520]	; (80023b8 <_ZN9NMEA_UART6Parser10charParserEh+0x250>)
 80021ae:	682b      	ldr	r3, [r5, #0]
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d055      	beq.n	8002260 <_ZN9NMEA_UART6Parser10charParserEh+0xf8>
 80021b4:	d826      	bhi.n	8002204 <_ZN9NMEA_UART6Parser10charParserEh+0x9c>
 80021b6:	f1a2 7201 	sub.w	r2, r2, #33816576	; 0x2040000
 80021ba:	f5a2 3202 	sub.w	r2, r2, #133120	; 0x20800
 80021be:	f2a2 22fe 	subw	r2, r2, #766	; 0x2fe
 80021c2:	4293      	cmp	r3, r2
 80021c4:	f000 8092 	beq.w	80022ec <_ZN9NMEA_UART6Parser10charParserEh+0x184>
 80021c8:	d806      	bhi.n	80021d8 <_ZN9NMEA_UART6Parser10charParserEh+0x70>
 80021ca:	3a02      	subs	r2, #2
 80021cc:	4293      	cmp	r3, r2
 80021ce:	f000 808d 	beq.w	80022ec <_ZN9NMEA_UART6Parser10charParserEh+0x184>
        ByteCount = 0xff;
 80021d2:	23ff      	movs	r3, #255	; 0xff
 80021d4:	7033      	strb	r3, [r6, #0]
 80021d6:	e7d8      	b.n	800218a <_ZN9NMEA_UART6Parser10charParserEh+0x22>
    switch (MsgType) {
 80021d8:	4a78      	ldr	r2, [pc, #480]	; (80023bc <_ZN9NMEA_UART6Parser10charParserEh+0x254>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d002      	beq.n	80021e4 <_ZN9NMEA_UART6Parser10charParserEh+0x7c>
 80021de:	3202      	adds	r2, #2
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d1f6      	bne.n	80021d2 <_ZN9NMEA_UART6Parser10charParserEh+0x6a>
        if (data == ',') {
 80021e4:	292c      	cmp	r1, #44	; 0x2c
 80021e6:	f040 80ca 	bne.w	800237e <_ZN9NMEA_UART6Parser10charParserEh+0x216>
            CharPoint = 0;
 80021ea:	2000      	movs	r0, #0
            ComaPoint++;
 80021ec:	4a6f      	ldr	r2, [pc, #444]	; (80023ac <_ZN9NMEA_UART6Parser10charParserEh+0x244>)
 80021ee:	7813      	ldrb	r3, [r2, #0]
 80021f0:	3301      	adds	r3, #1
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	7013      	strb	r3, [r2, #0]
            CharPoint = 0;
 80021f6:	4a72      	ldr	r2, [pc, #456]	; (80023c0 <_ZN9NMEA_UART6Parser10charParserEh+0x258>)
            GSA[ComaPoint][0] = 0;
 80021f8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
            CharPoint = 0;
 80021fc:	7010      	strb	r0, [r2, #0]
            GSA[ComaPoint][0] = 0;
 80021fe:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
 8002202:	e03b      	b.n	800227c <_ZN9NMEA_UART6Parser10charParserEh+0x114>
    switch (MsgType) {
 8002204:	4a6f      	ldr	r2, [pc, #444]	; (80023c4 <_ZN9NMEA_UART6Parser10charParserEh+0x25c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d051      	beq.n	80022ae <_ZN9NMEA_UART6Parser10charParserEh+0x146>
 800220a:	d813      	bhi.n	8002234 <_ZN9NMEA_UART6Parser10charParserEh+0xcc>
 800220c:	f1a2 2204 	sub.w	r2, r2, #67109888	; 0x4000400
 8002210:	f5a2 22e0 	sub.w	r2, r2, #458752	; 0x70000
 8002214:	4293      	cmp	r3, r2
 8002216:	d023      	beq.n	8002260 <_ZN9NMEA_UART6Parser10charParserEh+0xf8>
 8002218:	f102 6280 	add.w	r2, r2, #67108864	; 0x4000000
 800221c:	f502 22e0 	add.w	r2, r2, #458752	; 0x70000
 8002220:	f202 32fe 	addw	r2, r2, #1022	; 0x3fe
 8002224:	4293      	cmp	r3, r2
 8002226:	d1d4      	bne.n	80021d2 <_ZN9NMEA_UART6Parser10charParserEh+0x6a>
        if (data == ',') {
 8002228:	292c      	cmp	r1, #44	; 0x2c
 800222a:	d042      	beq.n	80022b2 <_ZN9NMEA_UART6Parser10charParserEh+0x14a>
        if (data == '*') {
 800222c:	292a      	cmp	r1, #42	; 0x2a
 800222e:	d14e      	bne.n	80022ce <_ZN9NMEA_UART6Parser10charParserEh+0x166>
            return (GPS_NVTG);
 8002230:	2008      	movs	r0, #8
 8002232:	e7a6      	b.n	8002182 <_ZN9NMEA_UART6Parser10charParserEh+0x1a>
    switch (MsgType) {
 8002234:	4a64      	ldr	r2, [pc, #400]	; (80023c8 <_ZN9NMEA_UART6Parser10charParserEh+0x260>)
 8002236:	4293      	cmp	r3, r2
 8002238:	f000 8084 	beq.w	8002344 <_ZN9NMEA_UART6Parser10charParserEh+0x1dc>
 800223c:	3204      	adds	r2, #4
 800223e:	4293      	cmp	r3, r2
 8002240:	d1c7      	bne.n	80021d2 <_ZN9NMEA_UART6Parser10charParserEh+0x6a>
        if (data == ',') {
 8002242:	292c      	cmp	r1, #44	; 0x2c
 8002244:	d173      	bne.n	800232e <_ZN9NMEA_UART6Parser10charParserEh+0x1c6>
            CharPoint = 0;
 8002246:	2000      	movs	r0, #0
            ComaPoint++;
 8002248:	4a58      	ldr	r2, [pc, #352]	; (80023ac <_ZN9NMEA_UART6Parser10charParserEh+0x244>)
 800224a:	7813      	ldrb	r3, [r2, #0]
 800224c:	3301      	adds	r3, #1
 800224e:	b2db      	uxtb	r3, r3
 8002250:	7013      	strb	r3, [r2, #0]
            CharPoint = 0;
 8002252:	4a5b      	ldr	r2, [pc, #364]	; (80023c0 <_ZN9NMEA_UART6Parser10charParserEh+0x258>)
            GSV[ComaPoint][0] = 0;
 8002254:	eb04 0483 	add.w	r4, r4, r3, lsl #2
            CharPoint = 0;
 8002258:	7010      	strb	r0, [r2, #0]
            GSV[ComaPoint][0] = 0;
 800225a:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 800225e:	e00d      	b.n	800227c <_ZN9NMEA_UART6Parser10charParserEh+0x114>
        if (data == ',') {
 8002260:	292c      	cmp	r1, #44	; 0x2c
 8002262:	d10d      	bne.n	8002280 <_ZN9NMEA_UART6Parser10charParserEh+0x118>
            CharPoint = 0;
 8002264:	2000      	movs	r0, #0
            ComaPoint++;
 8002266:	4a51      	ldr	r2, [pc, #324]	; (80023ac <_ZN9NMEA_UART6Parser10charParserEh+0x244>)
 8002268:	7813      	ldrb	r3, [r2, #0]
 800226a:	3301      	adds	r3, #1
 800226c:	b2db      	uxtb	r3, r3
 800226e:	7013      	strb	r3, [r2, #0]
            RMC[ComaPoint][0] = 0;
 8002270:	eb04 0483 	add.w	r4, r4, r3, lsl #2
            CharPoint = 0;
 8002274:	4a52      	ldr	r2, [pc, #328]	; (80023c0 <_ZN9NMEA_UART6Parser10charParserEh+0x258>)
            RMC[ComaPoint][0] = 0;
 8002276:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
            CharPoint = 0;
 800227a:	7010      	strb	r0, [r2, #0]
            GSA[ComaPoint][0] = 0;
 800227c:	7018      	strb	r0, [r3, #0]
            return (GPS_NULL);
 800227e:	e780      	b.n	8002182 <_ZN9NMEA_UART6Parser10charParserEh+0x1a>
        if ((data) == ('*')) {
 8002280:	292a      	cmp	r1, #42	; 0x2a
 8002282:	d103      	bne.n	800228c <_ZN9NMEA_UART6Parser10charParserEh+0x124>
            MsgType = 0;
 8002284:	2300      	movs	r3, #0
            return (GPS_NRMC);
 8002286:	2002      	movs	r0, #2
            MsgType = 0;
 8002288:	602b      	str	r3, [r5, #0]
            return (GPS_NRMC);
 800228a:	e77a      	b.n	8002182 <_ZN9NMEA_UART6Parser10charParserEh+0x1a>
        RMC[ComaPoint][CharPoint++] = data;
 800228c:	4b47      	ldr	r3, [pc, #284]	; (80023ac <_ZN9NMEA_UART6Parser10charParserEh+0x244>)
 800228e:	484c      	ldr	r0, [pc, #304]	; (80023c0 <_ZN9NMEA_UART6Parser10charParserEh+0x258>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	7802      	ldrb	r2, [r0, #0]
 8002294:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8002298:	f8d4 50c4 	ldr.w	r5, [r4, #196]	; 0xc4
 800229c:	1c53      	adds	r3, r2, #1
 800229e:	54a9      	strb	r1, [r5, r2]
 80022a0:	b2db      	uxtb	r3, r3
        RMC[ComaPoint][CharPoint] = 0;
 80022a2:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
        RMC[ComaPoint][CharPoint++] = data;
 80022a6:	7003      	strb	r3, [r0, #0]
        GSA[ComaPoint][CharPoint] = 0;
 80022a8:	2000      	movs	r0, #0
 80022aa:	54d0      	strb	r0, [r2, r3]
        return (GPS_NULL);
 80022ac:	e769      	b.n	8002182 <_ZN9NMEA_UART6Parser10charParserEh+0x1a>
        if (data == ',') {
 80022ae:	292c      	cmp	r1, #44	; 0x2c
 80022b0:	d10b      	bne.n	80022ca <_ZN9NMEA_UART6Parser10charParserEh+0x162>
            CharPoint = 0;
 80022b2:	2000      	movs	r0, #0
            ComaPoint++;
 80022b4:	4a3d      	ldr	r2, [pc, #244]	; (80023ac <_ZN9NMEA_UART6Parser10charParserEh+0x244>)
 80022b6:	7813      	ldrb	r3, [r2, #0]
 80022b8:	3301      	adds	r3, #1
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	7013      	strb	r3, [r2, #0]
            CharPoint = 0;
 80022be:	4a40      	ldr	r2, [pc, #256]	; (80023c0 <_ZN9NMEA_UART6Parser10charParserEh+0x258>)
            VTG[ComaPoint][0] = 0;
 80022c0:	333e      	adds	r3, #62	; 0x3e
            CharPoint = 0;
 80022c2:	7010      	strb	r0, [r2, #0]
            GGA[ComaPoint][0] = 0;
 80022c4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80022c8:	e7d8      	b.n	800227c <_ZN9NMEA_UART6Parser10charParserEh+0x114>
        if (data == '*') {
 80022ca:	292a      	cmp	r1, #42	; 0x2a
 80022cc:	d068      	beq.n	80023a0 <_ZN9NMEA_UART6Parser10charParserEh+0x238>
        VTG[ComaPoint][CharPoint++] = data;
 80022ce:	4b37      	ldr	r3, [pc, #220]	; (80023ac <_ZN9NMEA_UART6Parser10charParserEh+0x244>)
 80022d0:	483b      	ldr	r0, [pc, #236]	; (80023c0 <_ZN9NMEA_UART6Parser10charParserEh+0x258>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	7802      	ldrb	r2, [r0, #0]
 80022d6:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80022da:	f8d4 50f8 	ldr.w	r5, [r4, #248]	; 0xf8
 80022de:	1c53      	adds	r3, r2, #1
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	7003      	strb	r3, [r0, #0]
 80022e4:	54a9      	strb	r1, [r5, r2]
        VTG[ComaPoint][CharPoint] = 0;
 80022e6:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
 80022ea:	e7dd      	b.n	80022a8 <_ZN9NMEA_UART6Parser10charParserEh+0x140>
        if (data == ',') {
 80022ec:	292c      	cmp	r1, #44	; 0x2c
 80022ee:	d109      	bne.n	8002304 <_ZN9NMEA_UART6Parser10charParserEh+0x19c>
            CharPoint = 0;
 80022f0:	2000      	movs	r0, #0
            ComaPoint++;
 80022f2:	4a2e      	ldr	r2, [pc, #184]	; (80023ac <_ZN9NMEA_UART6Parser10charParserEh+0x244>)
 80022f4:	7813      	ldrb	r3, [r2, #0]
 80022f6:	3301      	adds	r3, #1
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	7013      	strb	r3, [r2, #0]
            CharPoint = 0;
 80022fc:	4a30      	ldr	r2, [pc, #192]	; (80023c0 <_ZN9NMEA_UART6Parser10charParserEh+0x258>)
            GGA[ComaPoint][0] = 0;
 80022fe:	3348      	adds	r3, #72	; 0x48
            CharPoint = 0;
 8002300:	7010      	strb	r0, [r2, #0]
 8002302:	e7df      	b.n	80022c4 <_ZN9NMEA_UART6Parser10charParserEh+0x15c>
        if (data == '*') {
 8002304:	292a      	cmp	r1, #42	; 0x2a
 8002306:	d103      	bne.n	8002310 <_ZN9NMEA_UART6Parser10charParserEh+0x1a8>
            MsgType = 0;
 8002308:	2300      	movs	r3, #0
            return (GPS_NGGA);
 800230a:	2004      	movs	r0, #4
            MsgType = 0;
 800230c:	602b      	str	r3, [r5, #0]
            return (GPS_NGGA);
 800230e:	e738      	b.n	8002182 <_ZN9NMEA_UART6Parser10charParserEh+0x1a>
        GGA[ComaPoint][CharPoint++] = data;
 8002310:	4b26      	ldr	r3, [pc, #152]	; (80023ac <_ZN9NMEA_UART6Parser10charParserEh+0x244>)
 8002312:	482b      	ldr	r0, [pc, #172]	; (80023c0 <_ZN9NMEA_UART6Parser10charParserEh+0x258>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	7802      	ldrb	r2, [r0, #0]
 8002318:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800231c:	f8d4 5120 	ldr.w	r5, [r4, #288]	; 0x120
 8002320:	1c53      	adds	r3, r2, #1
 8002322:	b2db      	uxtb	r3, r3
 8002324:	54a9      	strb	r1, [r5, r2]
 8002326:	7003      	strb	r3, [r0, #0]
        GGA[ComaPoint][CharPoint] = 0;
 8002328:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800232c:	e7bc      	b.n	80022a8 <_ZN9NMEA_UART6Parser10charParserEh+0x140>
        if (data == '*') {
 800232e:	292a      	cmp	r1, #42	; 0x2a
 8002330:	d116      	bne.n	8002360 <_ZN9NMEA_UART6Parser10charParserEh+0x1f8>
            GPS_COUNT = asciiToInt(ViewSatellite);
 8002332:	309c      	adds	r0, #156	; 0x9c
 8002334:	f7ff ff08 	bl	8002148 <_ZN9NMEA_UART10asciiToIntEPc>
            MsgType = 0;
 8002338:	2300      	movs	r3, #0
            GPS_COUNT = asciiToInt(ViewSatellite);
 800233a:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
            MsgType = 0;
 800233e:	602b      	str	r3, [r5, #0]
            return (GPS_PGSV);
 8002340:	2005      	movs	r0, #5
 8002342:	e71e      	b.n	8002182 <_ZN9NMEA_UART6Parser10charParserEh+0x1a>
        if (data == ',') {
 8002344:	292c      	cmp	r1, #44	; 0x2c
 8002346:	f43f af7e 	beq.w	8002246 <_ZN9NMEA_UART6Parser10charParserEh+0xde>
        if (data == '*') {
 800234a:	292a      	cmp	r1, #42	; 0x2a
 800234c:	d108      	bne.n	8002360 <_ZN9NMEA_UART6Parser10charParserEh+0x1f8>
            GLONAS_COUNT = asciiToInt(ViewSatellite);
 800234e:	309c      	adds	r0, #156	; 0x9c
 8002350:	f7ff fefa 	bl	8002148 <_ZN9NMEA_UART10asciiToIntEPc>
            MsgType = 0;
 8002354:	2300      	movs	r3, #0
            GLONAS_COUNT = asciiToInt(ViewSatellite);
 8002356:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
            MsgType = 0;
 800235a:	602b      	str	r3, [r5, #0]
            return (GPS_LGSV);
 800235c:	2006      	movs	r0, #6
 800235e:	e710      	b.n	8002182 <_ZN9NMEA_UART6Parser10charParserEh+0x1a>
        GSV[ComaPoint][CharPoint++] = data;
 8002360:	4b12      	ldr	r3, [pc, #72]	; (80023ac <_ZN9NMEA_UART6Parser10charParserEh+0x244>)
 8002362:	4817      	ldr	r0, [pc, #92]	; (80023c0 <_ZN9NMEA_UART6Parser10charParserEh+0x258>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	7802      	ldrb	r2, [r0, #0]
 8002368:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800236c:	f8d4 51a4 	ldr.w	r5, [r4, #420]	; 0x1a4
 8002370:	1c53      	adds	r3, r2, #1
 8002372:	b2db      	uxtb	r3, r3
 8002374:	7003      	strb	r3, [r0, #0]
 8002376:	54a9      	strb	r1, [r5, r2]
        GSV[ComaPoint][CharPoint] = 0;
 8002378:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
 800237c:	e794      	b.n	80022a8 <_ZN9NMEA_UART6Parser10charParserEh+0x140>
        if (data == '*') {
 800237e:	292a      	cmp	r1, #42	; 0x2a
 8002380:	d010      	beq.n	80023a4 <_ZN9NMEA_UART6Parser10charParserEh+0x23c>
        GSA[ComaPoint][CharPoint++] = data;
 8002382:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <_ZN9NMEA_UART6Parser10charParserEh+0x244>)
 8002384:	480e      	ldr	r0, [pc, #56]	; (80023c0 <_ZN9NMEA_UART6Parser10charParserEh+0x258>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	7802      	ldrb	r2, [r0, #0]
 800238a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800238e:	f8d4 515c 	ldr.w	r5, [r4, #348]	; 0x15c
 8002392:	1c53      	adds	r3, r2, #1
 8002394:	b2db      	uxtb	r3, r3
 8002396:	54a9      	strb	r1, [r5, r2]
 8002398:	7003      	strb	r3, [r0, #0]
        GSA[ComaPoint][CharPoint] = 0;
 800239a:	f8d4 215c 	ldr.w	r2, [r4, #348]	; 0x15c
 800239e:	e783      	b.n	80022a8 <_ZN9NMEA_UART6Parser10charParserEh+0x140>
            return (GPS_PVTG);
 80023a0:	2007      	movs	r0, #7
 80023a2:	e6ee      	b.n	8002182 <_ZN9NMEA_UART6Parser10charParserEh+0x1a>
            return (GPS_GNGSA);
 80023a4:	200a      	movs	r0, #10
 80023a6:	e6ec      	b.n	8002182 <_ZN9NMEA_UART6Parser10charParserEh+0x1a>
 80023a8:	2000000c 	.word	0x2000000c
 80023ac:	2000000d 	.word	0x2000000d
 80023b0:	20000008 	.word	0x20000008
 80023b4:	20000494 	.word	0x20000494
 80023b8:	434d524e 	.word	0x434d524e
 80023bc:	4153474e 	.word	0x4153474e
 80023c0:	20000498 	.word	0x20000498
 80023c4:	47545650 	.word	0x47545650
 80023c8:	5653474c 	.word	0x5653474c

080023cc <_Z14SPIx_WriteReadh>:
{

}
//-----------------------------------------------
uint8_t SPIx_WriteRead(uint8_t Byte)
{
 80023cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t receivedbyte = 0;
 80023ce:	2300      	movs	r3, #0
 80023d0:	aa06      	add	r2, sp, #24
 80023d2:	f802 3d01 	strb.w	r3, [r2, #-1]!
	if(HAL_SPI_TransmitReceive(&hspi2,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 80023d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
{
 80023da:	f88d 000f 	strb.w	r0, [sp, #15]
	if(HAL_SPI_TransmitReceive(&hspi2,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	f10d 010f 	add.w	r1, sp, #15
 80023e4:	2301      	movs	r3, #1
 80023e6:	4804      	ldr	r0, [pc, #16]	; (80023f8 <_Z14SPIx_WriteReadh+0x2c>)
 80023e8:	f002 f86c 	bl	80044c4 <HAL_SPI_TransmitReceive>
	{
		Error();
	}
	return receivedbyte;
}
 80023ec:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80023f0:	b007      	add	sp, #28
 80023f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80023f6:	bf00      	nop
 80023f8:	20000330 	.word	0x20000330

080023fc <_Z15SPI_ReceiveBytev>:
	SPIx_WriteRead(bt);
}
//-----------------------------------------------
uint8_t SPI_ReceiveByte(void)
{
	uint8_t bt = SPIx_WriteRead(0xFF);
 80023fc:	20ff      	movs	r0, #255	; 0xff
 80023fe:	f7ff bfe5 	b.w	80023cc <_Z14SPIx_WriteReadh>

08002402 <_Z11SPI_Releasev>:
	return bt;
}
//-----------------------------------------------
void SPI_Release(void)
{
	SPIx_WriteRead(0xFF);
 8002402:	20ff      	movs	r0, #255	; 0xff
 8002404:	f7ff bfe2 	b.w	80023cc <_Z14SPIx_WriteReadh>

08002408 <_Z14SPI_wait_readyv>:
}
//-----------------------------------------------
uint8_t SPI_wait_ready(void)
{
 8002408:	b538      	push	{r3, r4, r5, lr}
	uint8_t res;
	uint16_t cnt;
	cnt=0;
 800240a:	2400      	movs	r4, #0
 800240c:	f64f 75ff 	movw	r5, #65535	; 0xffff
	do { //���� ��������� ��������� BUSY
		res=SPI_ReceiveByte();
 8002410:	f7ff fff4 	bl	80023fc <_Z15SPI_ReceiveBytev>
		cnt++;
 8002414:	3401      	adds	r4, #1
	} while ( (res!=0xFF)&&(cnt<0xFFFF) );
 8002416:	28ff      	cmp	r0, #255	; 0xff
		cnt++;
 8002418:	b2a4      	uxth	r4, r4
	} while ( (res!=0xFF)&&(cnt<0xFFFF) );
 800241a:	d003      	beq.n	8002424 <_Z14SPI_wait_readyv+0x1c>
 800241c:	42ac      	cmp	r4, r5
 800241e:	d1f7      	bne.n	8002410 <_Z14SPI_wait_readyv+0x8>
	if (cnt>=0xFFFF) return 1;
 8002420:	2001      	movs	r0, #1
 8002422:	e002      	b.n	800242a <_Z14SPI_wait_readyv+0x22>
 8002424:	42ac      	cmp	r4, r5
 8002426:	bf08      	it	eq
 8002428:	2001      	moveq	r0, #1
	return res;
}
 800242a:	bd38      	pop	{r3, r4, r5, pc}

0800242c <_Z6SD_cmdhm>:
//-----------------------------------------------
uint8_t SD_cmd (uint8_t cmd, uint32_t arg)
{
 800242c:	b538      	push	{r3, r4, r5, lr}
#ifdef SD_DEBUG
	sprintf(str1,"sd.cpp SD_cmd :%d  value:0x%04X\r\n",cmd,arg);
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
{
 8002432:	4604      	mov	r4, r0
 8002434:	460d      	mov	r5, r1
	sprintf(str1,"sd.cpp SD_cmd :%d  value:0x%04X\r\n",cmd,arg);
 8002436:	4825      	ldr	r0, [pc, #148]	; (80024cc <_Z6SD_cmdhm+0xa0>)
 8002438:	4925      	ldr	r1, [pc, #148]	; (80024d0 <_Z6SD_cmdhm+0xa4>)
 800243a:	f007 ff47 	bl	800a2cc <siprintf>
	HAL_UART_Transmit(&huart3,(uint8_t*)str1,strlen(str1),0x1000);
 800243e:	4823      	ldr	r0, [pc, #140]	; (80024cc <_Z6SD_cmdhm+0xa0>)
 8002440:	f7fd fe86 	bl	8000150 <strlen>
 8002444:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002448:	b282      	uxth	r2, r0
 800244a:	4920      	ldr	r1, [pc, #128]	; (80024cc <_Z6SD_cmdhm+0xa0>)
 800244c:	4821      	ldr	r0, [pc, #132]	; (80024d4 <_Z6SD_cmdhm+0xa8>)
 800244e:	f002 fb63 	bl	8004b18 <HAL_UART_Transmit>
#endif
	uint8_t n, res;
	// ACMD<n> is the command sequense of CMD55-CMD<n>
	if (cmd & 0x80)
 8002452:	0622      	lsls	r2, r4, #24
 8002454:	d507      	bpl.n	8002466 <_Z6SD_cmdhm+0x3a>
	{
		cmd &= 0x7F;
		res = SD_cmd(CMD55, 0);
 8002456:	2100      	movs	r1, #0
 8002458:	2077      	movs	r0, #119	; 0x77
 800245a:	f7ff ffe7 	bl	800242c <_Z6SD_cmdhm>
		if (res > 1) return res;
 800245e:	2801      	cmp	r0, #1
 8002460:	d831      	bhi.n	80024c6 <_Z6SD_cmdhm+0x9a>
		cmd &= 0x7F;
 8002462:	f004 047f 	and.w	r4, r4, #127	; 0x7f
	}
	// Select the card
	SS_SD_DESELECT();
 8002466:	2201      	movs	r2, #1
 8002468:	2140      	movs	r1, #64	; 0x40
 800246a:	481b      	ldr	r0, [pc, #108]	; (80024d8 <_Z6SD_cmdhm+0xac>)
 800246c:	f000 ff20 	bl	80032b0 <HAL_GPIO_WritePin>
	SPI_ReceiveByte();
 8002470:	f7ff ffc4 	bl	80023fc <_Z15SPI_ReceiveBytev>
	SS_SD_SELECT();
 8002474:	2200      	movs	r2, #0
 8002476:	2140      	movs	r1, #64	; 0x40
 8002478:	4817      	ldr	r0, [pc, #92]	; (80024d8 <_Z6SD_cmdhm+0xac>)
 800247a:	f000 ff19 	bl	80032b0 <HAL_GPIO_WritePin>
	SPI_ReceiveByte();
 800247e:	f7ff ffbd 	bl	80023fc <_Z15SPI_ReceiveBytev>
	SPIx_WriteRead(bt);
 8002482:	4620      	mov	r0, r4
 8002484:	f7ff ffa2 	bl	80023cc <_Z14SPIx_WriteReadh>
 8002488:	0e28      	lsrs	r0, r5, #24
 800248a:	f7ff ff9f 	bl	80023cc <_Z14SPIx_WriteReadh>
 800248e:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8002492:	f7ff ff9b 	bl	80023cc <_Z14SPIx_WriteReadh>
 8002496:	f3c5 2007 	ubfx	r0, r5, #8, #8
 800249a:	f7ff ff97 	bl	80023cc <_Z14SPIx_WriteReadh>
 800249e:	b2e8      	uxtb	r0, r5
 80024a0:	f7ff ff94 	bl	80023cc <_Z14SPIx_WriteReadh>
	SPI_SendByte((uint8_t)(arg >> 24)); // Argument[31..24]
	SPI_SendByte((uint8_t)(arg >> 16)); // Argument[23..16]
	SPI_SendByte((uint8_t)(arg >> 8)); // Argument[15..8]
	SPI_SendByte((uint8_t)arg); // Argument[7..0]
	n = 0x01; // Dummy CRC + Stop
	if (cmd == CMD0) {n = 0x95;} // Valid CRC for CMD0(0)
 80024a4:	2c40      	cmp	r4, #64	; 0x40
 80024a6:	d00f      	beq.n	80024c8 <_Z6SD_cmdhm+0x9c>
	if (cmd == CMD8) {n = 0x87;} // Valid CRC for CMD8(0x1AA)
 80024a8:	2c48      	cmp	r4, #72	; 0x48
 80024aa:	bf14      	ite	ne
 80024ac:	2001      	movne	r0, #1
 80024ae:	2087      	moveq	r0, #135	; 0x87
	SPIx_WriteRead(bt);
 80024b0:	f7ff ff8c 	bl	80023cc <_Z14SPIx_WriteReadh>
 80024b4:	240a      	movs	r4, #10
	SPI_SendByte(n);	
	// Receive a command response
	n = 10; // Wait for a valid response in timeout of 10 attempts
	do {
		res = SPI_ReceiveByte();
 80024b6:	f7ff ffa1 	bl	80023fc <_Z15SPI_ReceiveBytev>
	} while ((res & 0x80) && --n);
 80024ba:	0603      	lsls	r3, r0, #24
 80024bc:	d503      	bpl.n	80024c6 <_Z6SD_cmdhm+0x9a>
 80024be:	3c01      	subs	r4, #1
 80024c0:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80024c4:	d1f7      	bne.n	80024b6 <_Z6SD_cmdhm+0x8a>
	return res;
}
 80024c6:	bd38      	pop	{r3, r4, r5, pc}
	if (cmd == CMD0) {n = 0x95;} // Valid CRC for CMD0(0)
 80024c8:	2095      	movs	r0, #149	; 0x95
 80024ca:	e7f1      	b.n	80024b0 <_Z6SD_cmdhm+0x84>
 80024cc:	2000049a 	.word	0x2000049a
 80024d0:	0800c562 	.word	0x0800c562
 80024d4:	20000408 	.word	0x20000408
 80024d8:	40010800 	.word	0x40010800

080024dc <_Z13SD_Read_BlockPhm>:
{
	HAL_Delay(30);
}
//-----------------------------------------------
uint8_t SD_Read_Block (uint8_t *buff, uint32_t lba)
{
 80024dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#ifdef SD_DEBUG
	sprintf(str1,"sd.cpp SD_Read_Block: 0x%010X  %d\r\n",lba,lba);
 80024e0:	460a      	mov	r2, r1
 80024e2:	460b      	mov	r3, r1
{
 80024e4:	460c      	mov	r4, r1
 80024e6:	4607      	mov	r7, r0
	sprintf(str1,"sd.cpp SD_Read_Block: 0x%010X  %d\r\n",lba,lba);
 80024e8:	494c      	ldr	r1, [pc, #304]	; (800261c <_Z13SD_Read_BlockPhm+0x140>)
 80024ea:	484d      	ldr	r0, [pc, #308]	; (8002620 <_Z13SD_Read_BlockPhm+0x144>)
 80024ec:	f007 feee 	bl	800a2cc <siprintf>
	HAL_UART_Transmit(&huart3,(uint8_t*)str1,strlen(str1),0x1000);
 80024f0:	484b      	ldr	r0, [pc, #300]	; (8002620 <_Z13SD_Read_BlockPhm+0x144>)
 80024f2:	f7fd fe2d 	bl	8000150 <strlen>
 80024f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024fa:	b282      	uxth	r2, r0
 80024fc:	4948      	ldr	r1, [pc, #288]	; (8002620 <_Z13SD_Read_BlockPhm+0x144>)
 80024fe:	4849      	ldr	r0, [pc, #292]	; (8002624 <_Z13SD_Read_BlockPhm+0x148>)
 8002500:	f002 fb0a 	bl	8004b18 <HAL_UART_Transmit>
#endif
	uint8_t result;
	uint16_t cnt;

	result=SD_cmd (CMD17, lba); //CMD17 ������� ��� 50 � 96
 8002504:	4621      	mov	r1, r4
 8002506:	2051      	movs	r0, #81	; 0x51
 8002508:	f7ff ff90 	bl	800242c <_Z6SD_cmdhm>
	if (result!=0x00) return 5; //�����, ���� ��������� �� 0x00
 800250c:	4605      	mov	r5, r0
 800250e:	b118      	cbz	r0, 8002518 <_Z13SD_Read_BlockPhm+0x3c>
 8002510:	2505      	movs	r5, #5
	HAL_UART_Transmit(&huart3,(uint8_t*)"\r\n",2,0x1000);
	HAL_UART_Transmit(&huart3,(uint8_t*)"\r\n",2,0x1000);

#endif
	return 0;
}
 8002512:	4628      	mov	r0, r5
 8002514:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	SPI_Release();
 8002518:	f7ff ff73 	bl	8002402 <_Z11SPI_Releasev>
	cnt=0;
 800251c:	462c      	mov	r4, r5
 800251e:	f64f 76ff 	movw	r6, #65535	; 0xffff
		result=SPI_ReceiveByte();
 8002522:	f7ff ff6b 	bl	80023fc <_Z15SPI_ReceiveBytev>
		cnt++;
 8002526:	3401      	adds	r4, #1
	} while ( (result!=0xFE)&&(cnt<0xFFFF) );
 8002528:	28fe      	cmp	r0, #254	; 0xfe
		cnt++;
 800252a:	b2a4      	uxth	r4, r4
	} while ( (result!=0xFE)&&(cnt<0xFFFF) );
 800252c:	d002      	beq.n	8002534 <_Z13SD_Read_BlockPhm+0x58>
 800252e:	42b4      	cmp	r4, r6
 8002530:	d1f7      	bne.n	8002522 <_Z13SD_Read_BlockPhm+0x46>
 8002532:	e7ed      	b.n	8002510 <_Z13SD_Read_BlockPhm+0x34>
	if (cnt>=0xFFFF) return 5;
 8002534:	42b4      	cmp	r4, r6
 8002536:	d0eb      	beq.n	8002510 <_Z13SD_Read_BlockPhm+0x34>
 8002538:	1e7c      	subs	r4, r7, #1
 800253a:	f207 16ff 	addw	r6, r7, #511	; 0x1ff
	for (cnt=0;cnt<512;cnt++) buff[cnt]=SPI_ReceiveByte(); //�������� ����� ����� �� ���� � �����
 800253e:	f7ff ff5d 	bl	80023fc <_Z15SPI_ReceiveBytev>
 8002542:	f804 0f01 	strb.w	r0, [r4, #1]!
 8002546:	42a6      	cmp	r6, r4
 8002548:	d1f9      	bne.n	800253e <_Z13SD_Read_BlockPhm+0x62>
	SPI_Release(); //���������� ����������� �����
 800254a:	f7ff ff5a 	bl	8002402 <_Z11SPI_Releasev>
	SPI_Release();
 800254e:	f7ff ff58 	bl	8002402 <_Z11SPI_Releasev>
	sprintf(str1,"     reading data:\r\n");
 8002552:	4935      	ldr	r1, [pc, #212]	; (8002628 <_Z13SD_Read_BlockPhm+0x14c>)
 8002554:	4832      	ldr	r0, [pc, #200]	; (8002620 <_Z13SD_Read_BlockPhm+0x144>)
 8002556:	f007 fed9 	bl	800a30c <strcpy>
	HAL_UART_Transmit(&huart3,(uint8_t*)str1,strlen(str1),0x1000);
 800255a:	4831      	ldr	r0, [pc, #196]	; (8002620 <_Z13SD_Read_BlockPhm+0x144>)
 800255c:	f7fd fdf8 	bl	8000150 <strlen>
 8002560:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002564:	b282      	uxth	r2, r0
 8002566:	492e      	ldr	r1, [pc, #184]	; (8002620 <_Z13SD_Read_BlockPhm+0x144>)
 8002568:	482e      	ldr	r0, [pc, #184]	; (8002624 <_Z13SD_Read_BlockPhm+0x148>)
 800256a:	f002 fad5 	bl	8004b18 <HAL_UART_Transmit>
 800256e:	2400      	movs	r4, #0
		sprintf(str1,"0x%02X ",cnt);
 8002570:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8002630 <_Z13SD_Read_BlockPhm+0x154>
 8002574:	4e2a      	ldr	r6, [pc, #168]	; (8002620 <_Z13SD_Read_BlockPhm+0x144>)
			HAL_UART_Transmit(&huart3,(uint8_t*)str1,strlen(str1),0x1000);
 8002576:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8002624 <_Z13SD_Read_BlockPhm+0x148>
		sprintf(str1,"0x%02X ",cnt);
 800257a:	4622      	mov	r2, r4
 800257c:	4649      	mov	r1, r9
 800257e:	4630      	mov	r0, r6
 8002580:	f007 fea4 	bl	800a2cc <siprintf>
			HAL_UART_Transmit(&huart3,(uint8_t*)str1,strlen(str1),0x1000);
 8002584:	4630      	mov	r0, r6
 8002586:	f7fd fde3 	bl	8000150 <strlen>
 800258a:	3401      	adds	r4, #1
 800258c:	b282      	uxth	r2, r0
 800258e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002592:	4631      	mov	r1, r6
 8002594:	4640      	mov	r0, r8
 8002596:	f002 fabf 	bl	8004b18 <HAL_UART_Transmit>
	for (cnt=0;cnt<16;cnt++)
 800259a:	2c10      	cmp	r4, #16
 800259c:	d1ed      	bne.n	800257a <_Z13SD_Read_BlockPhm+0x9e>
	HAL_UART_Transmit(&huart3,(uint8_t*)"\r\n",2,0x1000);
 800259e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025a2:	2202      	movs	r2, #2
 80025a4:	4921      	ldr	r1, [pc, #132]	; (800262c <_Z13SD_Read_BlockPhm+0x150>)
 80025a6:	481f      	ldr	r0, [pc, #124]	; (8002624 <_Z13SD_Read_BlockPhm+0x148>)
 80025a8:	f002 fab6 	bl	8004b18 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3,(uint8_t*)"\r\n",2,0x1000);
 80025ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025b0:	2202      	movs	r2, #2
 80025b2:	491e      	ldr	r1, [pc, #120]	; (800262c <_Z13SD_Read_BlockPhm+0x150>)
 80025b4:	481b      	ldr	r0, [pc, #108]	; (8002624 <_Z13SD_Read_BlockPhm+0x148>)
 80025b6:	f002 faaf 	bl	8004b18 <HAL_UART_Transmit>
 80025ba:	2400      	movs	r4, #0
	if(cnt%16==0&&cnt!=0)HAL_UART_Transmit(&huart3,(uint8_t*)"\r\n",2,0x1000);
 80025bc:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8002624 <_Z13SD_Read_BlockPhm+0x148>
	sprintf(str1,"0x%02X ", buff[cnt]);
 80025c0:	4e17      	ldr	r6, [pc, #92]	; (8002620 <_Z13SD_Read_BlockPhm+0x144>)
 80025c2:	b2a3      	uxth	r3, r4
	if(cnt%16==0&&cnt!=0)HAL_UART_Transmit(&huart3,(uint8_t*)"\r\n",2,0x1000);
 80025c4:	071a      	lsls	r2, r3, #28
 80025c6:	d107      	bne.n	80025d8 <_Z13SD_Read_BlockPhm+0xfc>
 80025c8:	b133      	cbz	r3, 80025d8 <_Z13SD_Read_BlockPhm+0xfc>
 80025ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025ce:	2202      	movs	r2, #2
 80025d0:	4916      	ldr	r1, [pc, #88]	; (800262c <_Z13SD_Read_BlockPhm+0x150>)
 80025d2:	4640      	mov	r0, r8
 80025d4:	f002 faa0 	bl	8004b18 <HAL_UART_Transmit>
	sprintf(str1,"0x%02X ", buff[cnt]);
 80025d8:	5d3a      	ldrb	r2, [r7, r4]
 80025da:	4915      	ldr	r1, [pc, #84]	; (8002630 <_Z13SD_Read_BlockPhm+0x154>)
 80025dc:	4630      	mov	r0, r6
 80025de:	f007 fe75 	bl	800a2cc <siprintf>
	HAL_UART_Transmit(&huart3,(uint8_t*)str1,strlen(str1),0x1000);
 80025e2:	4630      	mov	r0, r6
 80025e4:	f7fd fdb4 	bl	8000150 <strlen>
 80025e8:	3401      	adds	r4, #1
 80025ea:	b282      	uxth	r2, r0
 80025ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025f0:	4631      	mov	r1, r6
 80025f2:	4640      	mov	r0, r8
 80025f4:	f002 fa90 	bl	8004b18 <HAL_UART_Transmit>
	for (cnt=0;cnt<512;cnt++){
 80025f8:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 80025fc:	d1e1      	bne.n	80025c2 <_Z13SD_Read_BlockPhm+0xe6>
	HAL_UART_Transmit(&huart3,(uint8_t*)"\r\n",2,0x1000);
 80025fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002602:	2202      	movs	r2, #2
 8002604:	4909      	ldr	r1, [pc, #36]	; (800262c <_Z13SD_Read_BlockPhm+0x150>)
 8002606:	4807      	ldr	r0, [pc, #28]	; (8002624 <_Z13SD_Read_BlockPhm+0x148>)
 8002608:	f002 fa86 	bl	8004b18 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3,(uint8_t*)"\r\n",2,0x1000);
 800260c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002610:	2202      	movs	r2, #2
 8002612:	4906      	ldr	r1, [pc, #24]	; (800262c <_Z13SD_Read_BlockPhm+0x150>)
 8002614:	4803      	ldr	r0, [pc, #12]	; (8002624 <_Z13SD_Read_BlockPhm+0x148>)
 8002616:	f002 fa7f 	bl	8004b18 <HAL_UART_Transmit>
	return 0;
 800261a:	e77a      	b.n	8002512 <_Z13SD_Read_BlockPhm+0x36>
 800261c:	0800c4fc 	.word	0x0800c4fc
 8002620:	2000049a 	.word	0x2000049a
 8002624:	20000408 	.word	0x20000408
 8002628:	0800c520 	.word	0x0800c520
 800262c:	0800c480 	.word	0x0800c480
 8002630:	0800c535 	.word	0x0800c535

08002634 <_Z14SD_Write_BlockPhm>:
//-----------------------------------------------
uint8_t SD_Write_Block (uint8_t *buff, uint32_t lba)
{
 8002634:	b570      	push	{r4, r5, r6, lr}
#ifdef SD_DEBUG
	sprintf(str1,"sd.cpp SD_Write_Block: 0x%010X  %d\r\n",lba,lba);
 8002636:	460b      	mov	r3, r1
 8002638:	460a      	mov	r2, r1
{
 800263a:	460d      	mov	r5, r1
 800263c:	4604      	mov	r4, r0
	sprintf(str1,"sd.cpp SD_Write_Block: 0x%010X  %d\r\n",lba,lba);
 800263e:	491f      	ldr	r1, [pc, #124]	; (80026bc <_Z14SD_Write_BlockPhm+0x88>)
 8002640:	481f      	ldr	r0, [pc, #124]	; (80026c0 <_Z14SD_Write_BlockPhm+0x8c>)
 8002642:	f007 fe43 	bl	800a2cc <siprintf>
	HAL_UART_Transmit(&huart3,(uint8_t*)str1,strlen(str1),0x1000);
 8002646:	481e      	ldr	r0, [pc, #120]	; (80026c0 <_Z14SD_Write_BlockPhm+0x8c>)
 8002648:	f7fd fd82 	bl	8000150 <strlen>
 800264c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002650:	b282      	uxth	r2, r0
 8002652:	491b      	ldr	r1, [pc, #108]	; (80026c0 <_Z14SD_Write_BlockPhm+0x8c>)
 8002654:	481b      	ldr	r0, [pc, #108]	; (80026c4 <_Z14SD_Write_BlockPhm+0x90>)
 8002656:	f002 fa5f 	bl	8004b18 <HAL_UART_Transmit>
#endif
	uint8_t result;
	uint16_t cnt;
	result=SD_cmd(CMD24,lba); //CMD24 ������� ��� 51 � 97-98
 800265a:	4629      	mov	r1, r5
 800265c:	2058      	movs	r0, #88	; 0x58
 800265e:	f7ff fee5 	bl	800242c <_Z6SD_cmdhm>
	if (result!=0x00) return 6; //�����, ���� ��������� �� 0x00
 8002662:	4605      	mov	r5, r0
 8002664:	b110      	cbz	r0, 800266c <_Z14SD_Write_BlockPhm+0x38>
 8002666:	2506      	movs	r5, #6
		result=SPI_ReceiveByte();
		cnt++;
	} while ( (result!=0xFF)&&(cnt<0xFFFF) );
	if (cnt>=0xFFFF) return 6;
	return 0;
}
 8002668:	4628      	mov	r0, r5
 800266a:	bd70      	pop	{r4, r5, r6, pc}
	SPI_Release();
 800266c:	f7ff fec9 	bl	8002402 <_Z11SPI_Releasev>
	SPIx_WriteRead(bt);
 8002670:	20fe      	movs	r0, #254	; 0xfe
 8002672:	f7ff feab 	bl	80023cc <_Z14SPIx_WriteReadh>
 8002676:	1e66      	subs	r6, r4, #1
 8002678:	f204 14ff 	addw	r4, r4, #511	; 0x1ff
 800267c:	f816 0f01 	ldrb.w	r0, [r6, #1]!
 8002680:	f7ff fea4 	bl	80023cc <_Z14SPIx_WriteReadh>
	for (cnt=0;cnt<512;cnt++) SPI_SendByte(buff[cnt]); //������
 8002684:	42a6      	cmp	r6, r4
 8002686:	d1f9      	bne.n	800267c <_Z14SD_Write_BlockPhm+0x48>
	SPI_Release(); //��������� ���������� �����
 8002688:	f7ff febb 	bl	8002402 <_Z11SPI_Releasev>
	SPI_Release();
 800268c:	f7ff feb9 	bl	8002402 <_Z11SPI_Releasev>
	result=SPI_ReceiveByte();
 8002690:	f7ff feb4 	bl	80023fc <_Z15SPI_ReceiveBytev>
	if ((result&0x05)!=0x05) return 6; //�����, ���� ��������� �� 0x05 (������� ��� 111)
 8002694:	f000 0005 	and.w	r0, r0, #5
 8002698:	2805      	cmp	r0, #5
 800269a:	d1e4      	bne.n	8002666 <_Z14SD_Write_BlockPhm+0x32>
	cnt=0;
 800269c:	2400      	movs	r4, #0
 800269e:	f64f 76ff 	movw	r6, #65535	; 0xffff
		result=SPI_ReceiveByte();
 80026a2:	f7ff feab 	bl	80023fc <_Z15SPI_ReceiveBytev>
		cnt++;
 80026a6:	3401      	adds	r4, #1
	} while ( (result!=0xFF)&&(cnt<0xFFFF) );
 80026a8:	28ff      	cmp	r0, #255	; 0xff
		cnt++;
 80026aa:	b2a4      	uxth	r4, r4
	} while ( (result!=0xFF)&&(cnt<0xFFFF) );
 80026ac:	d002      	beq.n	80026b4 <_Z14SD_Write_BlockPhm+0x80>
 80026ae:	42b4      	cmp	r4, r6
 80026b0:	d1f7      	bne.n	80026a2 <_Z14SD_Write_BlockPhm+0x6e>
 80026b2:	e7d8      	b.n	8002666 <_Z14SD_Write_BlockPhm+0x32>
	if (cnt>=0xFFFF) return 6;
 80026b4:	42b4      	cmp	r4, r6
 80026b6:	d1d7      	bne.n	8002668 <_Z14SD_Write_BlockPhm+0x34>
 80026b8:	e7d5      	b.n	8002666 <_Z14SD_Write_BlockPhm+0x32>
 80026ba:	bf00      	nop
 80026bc:	0800c53d 	.word	0x0800c53d
 80026c0:	2000049a 	.word	0x2000049a
 80026c4:	20000408 	.word	0x20000408

080026c8 <_Z6sd_iniv>:
//-----------------------------------------------
uint8_t sd_ini(void)
{
 80026c8:	b5f0      	push	{r4, r5, r6, r7, lr}
#ifdef SD_DEBUG
	sprintf(str1,"sd.cpp sd_ini\r\n");
 80026ca:	4969      	ldr	r1, [pc, #420]	; (8002870 <_Z6sd_iniv+0x1a8>)
{
 80026cc:	b085      	sub	sp, #20
	sprintf(str1,"sd.cpp sd_ini\r\n");
 80026ce:	4869      	ldr	r0, [pc, #420]	; (8002874 <_Z6sd_iniv+0x1ac>)
 80026d0:	f007 fe1c 	bl	800a30c <strcpy>
	HAL_UART_Transmit(&huart3,(uint8_t*)str1,strlen(str1),0x1000);
 80026d4:	4867      	ldr	r0, [pc, #412]	; (8002874 <_Z6sd_iniv+0x1ac>)
 80026d6:	f7fd fd3b 	bl	8000150 <strlen>
 80026da:	4966      	ldr	r1, [pc, #408]	; (8002874 <_Z6sd_iniv+0x1ac>)
 80026dc:	b282      	uxth	r2, r0
 80026de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026e2:	4865      	ldr	r0, [pc, #404]	; (8002878 <_Z6sd_iniv+0x1b0>)
 80026e4:	f002 fa18 	bl	8004b18 <HAL_UART_Transmit>
	uint8_t i, cmd;
	int16_t tmr;
	uint32_t temp;


	sdinfo.type = 0;
 80026e8:	2300      	movs	r3, #0
 80026ea:	4d64      	ldr	r5, [pc, #400]	; (800287c <_Z6sd_iniv+0x1b4>)
	uint8_t ocr[4];

	temp = hspi2.Init.BaudRatePrescaler;
 80026ec:	4e64      	ldr	r6, [pc, #400]	; (8002880 <_Z6sd_iniv+0x1b8>)
	sdinfo.type = 0;
 80026ee:	702b      	strb	r3, [r5, #0]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128; //156.25 kbbs
 80026f0:	2330      	movs	r3, #48	; 0x30
	HAL_SPI_Init(&hspi2);
 80026f2:	4630      	mov	r0, r6
	temp = hspi2.Init.BaudRatePrescaler;
 80026f4:	69f7      	ldr	r7, [r6, #28]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128; //156.25 kbbs
 80026f6:	61f3      	str	r3, [r6, #28]
	HAL_SPI_Init(&hspi2);
 80026f8:	f001 fea9 	bl	800444e <HAL_SPI_Init>

	SS_SD_DESELECT();
 80026fc:	2201      	movs	r2, #1
 80026fe:	2140      	movs	r1, #64	; 0x40
 8002700:	4860      	ldr	r0, [pc, #384]	; (8002884 <_Z6sd_iniv+0x1bc>)
 8002702:	f000 fdd5 	bl	80032b0 <HAL_GPIO_WritePin>
 8002706:	240a      	movs	r4, #10
 8002708:	3c01      	subs	r4, #1
	for(i=0;i<10;i++) //80 ��������� (�� ����� 74) ������� ��� 91
		SPI_Release();
 800270a:	f7ff fe7a 	bl	8002402 <_Z11SPI_Releasev>
	for(i=0;i<10;i++) //80 ��������� (�� ����� 74) ������� ��� 91
 800270e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8002712:	d1f9      	bne.n	8002708 <_Z6sd_iniv+0x40>
	hspi2.Init.BaudRatePrescaler = temp;
	HAL_SPI_Init(&hspi2);
 8002714:	485a      	ldr	r0, [pc, #360]	; (8002880 <_Z6sd_iniv+0x1b8>)
	hspi2.Init.BaudRatePrescaler = temp;
 8002716:	61f7      	str	r7, [r6, #28]
	HAL_SPI_Init(&hspi2);
 8002718:	f001 fe99 	bl	800444e <HAL_SPI_Init>
	SS_SD_SELECT();
 800271c:	4622      	mov	r2, r4
 800271e:	2140      	movs	r1, #64	; 0x40
 8002720:	4858      	ldr	r0, [pc, #352]	; (8002884 <_Z6sd_iniv+0x1bc>)
 8002722:	f000 fdc5 	bl	80032b0 <HAL_GPIO_WritePin>

	if (SD_cmd(CMD0, 0) == 1) // Enter Idle state
 8002726:	4621      	mov	r1, r4
 8002728:	2040      	movs	r0, #64	; 0x40
 800272a:	f7ff fe7f 	bl	800242c <_Z6SD_cmdhm>
 800272e:	2801      	cmp	r0, #1
 8002730:	4606      	mov	r6, r0
 8002732:	d167      	bne.n	8002804 <_Z6sd_iniv+0x13c>
	{
		HAL_Delay(1000);
 8002734:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002738:	f000 fc10 	bl	8002f5c <HAL_Delay>
		//SPI_Release();
		if (SD_cmd(CMD8, 0x1AA) == 1) // SDv2
 800273c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002740:	2048      	movs	r0, #72	; 0x48
 8002742:	f7ff fe73 	bl	800242c <_Z6SD_cmdhm>
 8002746:	2801      	cmp	r0, #1
 8002748:	d142      	bne.n	80027d0 <_Z6sd_iniv+0x108>
		{
			for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 800274a:	ae03      	add	r6, sp, #12
 800274c:	f7ff fe56 	bl	80023fc <_Z15SPI_ReceiveBytev>
 8002750:	5530      	strb	r0, [r6, r4]
 8002752:	3401      	adds	r4, #1
 8002754:	2c04      	cmp	r4, #4
 8002756:	d1f9      	bne.n	800274c <_Z6sd_iniv+0x84>
#ifdef SD_DEBUG
			sprintf(str1,"OCR: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",ocr[0],ocr[1],ocr[2],ocr[3]);
 8002758:	f89d 700e 	ldrb.w	r7, [sp, #14]
 800275c:	f89d 400f 	ldrb.w	r4, [sp, #15]
 8002760:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8002764:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8002768:	4947      	ldr	r1, [pc, #284]	; (8002888 <_Z6sd_iniv+0x1c0>)
 800276a:	e9cd 7400 	strd	r7, r4, [sp]
 800276e:	4841      	ldr	r0, [pc, #260]	; (8002874 <_Z6sd_iniv+0x1ac>)
 8002770:	f007 fdac 	bl	800a2cc <siprintf>
			HAL_UART_Transmit(&huart3,(uint8_t*)str1,strlen(str1),0x1000);
 8002774:	483f      	ldr	r0, [pc, #252]	; (8002874 <_Z6sd_iniv+0x1ac>)
 8002776:	f7fd fceb 	bl	8000150 <strlen>
 800277a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800277e:	b282      	uxth	r2, r0
 8002780:	493c      	ldr	r1, [pc, #240]	; (8002874 <_Z6sd_iniv+0x1ac>)
 8002782:	483d      	ldr	r0, [pc, #244]	; (8002878 <_Z6sd_iniv+0x1b0>)
 8002784:	f002 f9c8 	bl	8004b18 <HAL_UART_Transmit>
#endif
			// Get trailing return value of R7 resp
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) // The card can work at vdd range of 2.7-3.6V
 8002788:	2f01      	cmp	r7, #1
 800278a:	d10f      	bne.n	80027ac <_Z6sd_iniv+0xe4>
 800278c:	2caa      	cmp	r4, #170	; 0xaa
 800278e:	d10d      	bne.n	80027ac <_Z6sd_iniv+0xe4>
 8002790:	f642 64e0 	movw	r4, #12000	; 0x2ee0
			{
				for (tmr = 12000; tmr && SD_cmd(ACMD41, 1UL << 30); tmr--)
 8002794:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002798:	20e9      	movs	r0, #233	; 0xe9
 800279a:	f7ff fe47 	bl	800242c <_Z6SD_cmdhm>
 800279e:	4601      	mov	r1, r0
 80027a0:	2800      	cmp	r0, #0
 80027a2:	d031      	beq.n	8002808 <_Z6sd_iniv+0x140>
 80027a4:	3c01      	subs	r4, #1
 80027a6:	b2a4      	uxth	r4, r4
 80027a8:	2c00      	cmp	r4, #0
 80027aa:	d1f3      	bne.n	8002794 <_Z6sd_iniv+0xcc>
	else
	{
		return 1;
	}
#ifdef SD_DEBUG
	sprintf(str1,"Type SD: 0x%02X\r\n",sdinfo.type);
 80027ac:	782a      	ldrb	r2, [r5, #0]
 80027ae:	4937      	ldr	r1, [pc, #220]	; (800288c <_Z6sd_iniv+0x1c4>)
 80027b0:	4830      	ldr	r0, [pc, #192]	; (8002874 <_Z6sd_iniv+0x1ac>)
 80027b2:	f007 fd8b 	bl	800a2cc <siprintf>
	HAL_UART_Transmit(&huart3,(uint8_t*)str1,strlen(str1),0x1000);
 80027b6:	482f      	ldr	r0, [pc, #188]	; (8002874 <_Z6sd_iniv+0x1ac>)
 80027b8:	f7fd fcca 	bl	8000150 <strlen>
 80027bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027c0:	b282      	uxth	r2, r0
 80027c2:	492c      	ldr	r1, [pc, #176]	; (8002874 <_Z6sd_iniv+0x1ac>)
 80027c4:	482c      	ldr	r0, [pc, #176]	; (8002878 <_Z6sd_iniv+0x1b0>)
 80027c6:	f002 f9a7 	bl	8004b18 <HAL_UART_Transmit>
#endif
	return 0;
 80027ca:	2000      	movs	r0, #0
}
 80027cc:	b005      	add	sp, #20
 80027ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (SD_cmd(ACMD41, 0) <= 1)
 80027d0:	4621      	mov	r1, r4
 80027d2:	20e9      	movs	r0, #233	; 0xe9
 80027d4:	f7ff fe2a 	bl	800242c <_Z6SD_cmdhm>
 80027d8:	2801      	cmp	r0, #1
				sdinfo.type = CT_SD1; cmd = ACMD41; // SDv1
 80027da:	bf95      	itete	ls
 80027dc:	2302      	movls	r3, #2
				sdinfo.type = CT_MMC; cmd = CMD1; // MMCv3
 80027de:	702e      	strbhi	r6, [r5, #0]
				sdinfo.type = CT_SD1; cmd = ACMD41; // SDv1
 80027e0:	26e9      	movls	r6, #233	; 0xe9
				sdinfo.type = CT_MMC; cmd = CMD1; // MMCv3
 80027e2:	2641      	movhi	r6, #65	; 0x41
 80027e4:	f246 14a8 	movw	r4, #25000	; 0x61a8
				sdinfo.type = CT_SD1; cmd = ACMD41; // SDv1
 80027e8:	bf98      	it	ls
 80027ea:	702b      	strbls	r3, [r5, #0]
			for (tmr = 25000; tmr && SD_cmd(cmd, 0); tmr--) ; // Wait for leaving idle state
 80027ec:	2100      	movs	r1, #0
 80027ee:	4630      	mov	r0, r6
 80027f0:	f7ff fe1c 	bl	800242c <_Z6SD_cmdhm>
 80027f4:	2800      	cmp	r0, #0
 80027f6:	d033      	beq.n	8002860 <_Z6sd_iniv+0x198>
 80027f8:	3c01      	subs	r4, #1
 80027fa:	b2a4      	uxth	r4, r4
 80027fc:	2c00      	cmp	r4, #0
 80027fe:	d1f5      	bne.n	80027ec <_Z6sd_iniv+0x124>
				sdinfo.type = 0;
 8002800:	2300      	movs	r3, #0
 8002802:	e02b      	b.n	800285c <_Z6sd_iniv+0x194>
		return 1;
 8002804:	2001      	movs	r0, #1
 8002806:	e7e1      	b.n	80027cc <_Z6sd_iniv+0x104>
				if (tmr && SD_cmd(CMD58, 0) == 0)
 8002808:	207a      	movs	r0, #122	; 0x7a
 800280a:	f7ff fe0f 	bl	800242c <_Z6SD_cmdhm>
 800280e:	2800      	cmp	r0, #0
 8002810:	d1cc      	bne.n	80027ac <_Z6sd_iniv+0xe4>
 8002812:	4604      	mov	r4, r0
						ocr[i] = SPI_ReceiveByte();
 8002814:	f7ff fdf2 	bl	80023fc <_Z15SPI_ReceiveBytev>
 8002818:	5530      	strb	r0, [r6, r4]
 800281a:	3401      	adds	r4, #1
					for (i = 0; i < 4; i++)
 800281c:	2c04      	cmp	r4, #4
 800281e:	d1f9      	bne.n	8002814 <_Z6sd_iniv+0x14c>
					sprintf(str1,"OCR: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",ocr[0],ocr[1],ocr[2],ocr[3]);
 8002820:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8002824:	f89d 400c 	ldrb.w	r4, [sp, #12]
 8002828:	9201      	str	r2, [sp, #4]
 800282a:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800282e:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8002832:	4915      	ldr	r1, [pc, #84]	; (8002888 <_Z6sd_iniv+0x1c0>)
 8002834:	9200      	str	r2, [sp, #0]
 8002836:	480f      	ldr	r0, [pc, #60]	; (8002874 <_Z6sd_iniv+0x1ac>)
 8002838:	4622      	mov	r2, r4
 800283a:	f007 fd47 	bl	800a2cc <siprintf>
					HAL_UART_Transmit(&huart3,(uint8_t*)str1,strlen(str1),0x1000);
 800283e:	480d      	ldr	r0, [pc, #52]	; (8002874 <_Z6sd_iniv+0x1ac>)
 8002840:	f7fd fc86 	bl	8000150 <strlen>
 8002844:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002848:	b282      	uxth	r2, r0
 800284a:	490a      	ldr	r1, [pc, #40]	; (8002874 <_Z6sd_iniv+0x1ac>)
 800284c:	480a      	ldr	r0, [pc, #40]	; (8002878 <_Z6sd_iniv+0x1b0>)
 800284e:	f002 f963 	bl	8004b18 <HAL_UART_Transmit>
					sdinfo.type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; // SDv2 (HC or SC)
 8002852:	f014 0f40 	tst.w	r4, #64	; 0x40
 8002856:	bf14      	ite	ne
 8002858:	230c      	movne	r3, #12
 800285a:	2304      	moveq	r3, #4
				sdinfo.type = 0;
 800285c:	702b      	strb	r3, [r5, #0]
 800285e:	e7a5      	b.n	80027ac <_Z6sd_iniv+0xe4>
			if (!tmr || SD_cmd(CMD16, 512) != 0) // Set R/W block length to 512
 8002860:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002864:	2050      	movs	r0, #80	; 0x50
 8002866:	f7ff fde1 	bl	800242c <_Z6SD_cmdhm>
 800286a:	2800      	cmp	r0, #0
 800286c:	d1c8      	bne.n	8002800 <_Z6sd_iniv+0x138>
 800286e:	e79d      	b.n	80027ac <_Z6sd_iniv+0xe4>
 8002870:	0800c584 	.word	0x0800c584
 8002874:	2000049a 	.word	0x2000049a
 8002878:	20000408 	.word	0x20000408
 800287c:	20000499 	.word	0x20000499
 8002880:	20000330 	.word	0x20000330
 8002884:	40010800 	.word	0x40010800
 8002888:	0800c594 	.word	0x0800c594
 800288c:	0800c5b7 	.word	0x0800c5b7

08002890 <_ZL20ssd1306_WriteCommandh>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8002890:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8002892:	2301      	movs	r3, #1
 8002894:	210a      	movs	r1, #10
{
 8002896:	aa06      	add	r2, sp, #24
 8002898:	f802 0d01 	strb.w	r0, [r2, #-1]!
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 800289c:	9200      	str	r2, [sp, #0]
 800289e:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	2178      	movs	r1, #120	; 0x78
 80028a6:	4803      	ldr	r0, [pc, #12]	; (80028b4 <_ZL20ssd1306_WriteCommandh+0x24>)
 80028a8:	f001 f940 	bl	8003b2c <HAL_I2C_Mem_Write>

}
 80028ac:	b007      	add	sp, #28
 80028ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80028b2:	bf00      	nop
 80028b4:	200002dc 	.word	0x200002dc

080028b8 <_Z12ssd1306_Fill13SSD1306_COLOR>:
void ssd1306_Fill(SSD1306_COLOR color)
{
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80028b8:	2300      	movs	r3, #0
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80028ba:	4905      	ldr	r1, [pc, #20]	; (80028d0 <_Z12ssd1306_Fill13SSD1306_COLOR+0x18>)
 80028bc:	1c02      	adds	r2, r0, #0
 80028be:	bf18      	it	ne
 80028c0:	2201      	movne	r2, #1
 80028c2:	4252      	negs	r2, r2
 80028c4:	545a      	strb	r2, [r3, r1]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80028c6:	3301      	adds	r3, #1
 80028c8:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 80028cc:	d1f6      	bne.n	80028bc <_Z12ssd1306_Fill13SSD1306_COLOR+0x4>
	}
}
 80028ce:	4770      	bx	lr
 80028d0:	200004d6 	.word	0x200004d6

080028d4 <_Z20ssd1306_UpdateScreenv>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 80028d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80028d6:	2400      	movs	r4, #0
	for (i = 0; i < 8; i++) {
		ssd1306_WriteCommand(0xB0 + i);
		ssd1306_WriteCommand(0x00);
		ssd1306_WriteCommand(0x10);

		HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100);
 80028d8:	4e0f      	ldr	r6, [pc, #60]	; (8002918 <_Z20ssd1306_UpdateScreenv+0x44>)
 80028da:	4d10      	ldr	r5, [pc, #64]	; (800291c <_Z20ssd1306_UpdateScreenv+0x48>)
		ssd1306_WriteCommand(0xB0 + i);
 80028dc:	f1a4 0050 	sub.w	r0, r4, #80	; 0x50
 80028e0:	b2c0      	uxtb	r0, r0
 80028e2:	f7ff ffd5 	bl	8002890 <_ZL20ssd1306_WriteCommandh>
		ssd1306_WriteCommand(0x00);
 80028e6:	2000      	movs	r0, #0
 80028e8:	f7ff ffd2 	bl	8002890 <_ZL20ssd1306_WriteCommandh>
		ssd1306_WriteCommand(0x10);
 80028ec:	2010      	movs	r0, #16
 80028ee:	f7ff ffcf 	bl	8002890 <_ZL20ssd1306_WriteCommandh>
		HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100);
 80028f2:	2382      	movs	r3, #130	; 0x82
 80028f4:	2264      	movs	r2, #100	; 0x64
 80028f6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80028fa:	fb03 6304 	mla	r3, r3, r4, r6
 80028fe:	2240      	movs	r2, #64	; 0x40
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	2178      	movs	r1, #120	; 0x78
 8002904:	2301      	movs	r3, #1
 8002906:	4628      	mov	r0, r5
 8002908:	3401      	adds	r4, #1
 800290a:	f001 f90f 	bl	8003b2c <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 800290e:	2c08      	cmp	r4, #8
 8002910:	d1e4      	bne.n	80028dc <_Z20ssd1306_UpdateScreenv+0x8>

	}
}
 8002912:	b004      	add	sp, #16
 8002914:	bd70      	pop	{r4, r5, r6, pc}
 8002916:	bf00      	nop
 8002918:	200004d6 	.word	0x200004d6
 800291c:	200002dc 	.word	0x200002dc

08002920 <_Z12ssd1306_Initv>:
{
 8002920:	b508      	push	{r3, lr}
	HAL_Delay(100);
 8002922:	2064      	movs	r0, #100	; 0x64
 8002924:	f000 fb1a 	bl	8002f5c <HAL_Delay>
	ssd1306_WriteCommand(0xAE); //display off
 8002928:	20ae      	movs	r0, #174	; 0xae
 800292a:	f7ff ffb1 	bl	8002890 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800292e:	2020      	movs	r0, #32
 8002930:	f7ff ffae 	bl	8002890 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002934:	2010      	movs	r0, #16
 8002936:	f7ff ffab 	bl	8002890 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800293a:	20b0      	movs	r0, #176	; 0xb0
 800293c:	f7ff ffa8 	bl	8002890 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002940:	20c8      	movs	r0, #200	; 0xc8
 8002942:	f7ff ffa5 	bl	8002890 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x00); //---set low column address
 8002946:	2000      	movs	r0, #0
 8002948:	f7ff ffa2 	bl	8002890 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x10); //---set high column address
 800294c:	2010      	movs	r0, #16
 800294e:	f7ff ff9f 	bl	8002890 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x40); //--set start line address
 8002952:	2040      	movs	r0, #64	; 0x40
 8002954:	f7ff ff9c 	bl	8002890 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 8002958:	2081      	movs	r0, #129	; 0x81
 800295a:	f7ff ff99 	bl	8002890 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xFF);
 800295e:	20ff      	movs	r0, #255	; 0xff
 8002960:	f7ff ff96 	bl	8002890 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 8002964:	20a1      	movs	r0, #161	; 0xa1
 8002966:	f7ff ff93 	bl	8002890 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xA6); //--set normal display
 800296a:	20a6      	movs	r0, #166	; 0xa6
 800296c:	f7ff ff90 	bl	8002890 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8002970:	20a8      	movs	r0, #168	; 0xa8
 8002972:	f7ff ff8d 	bl	8002890 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x3F); //
 8002976:	203f      	movs	r0, #63	; 0x3f
 8002978:	f7ff ff8a 	bl	8002890 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800297c:	20a4      	movs	r0, #164	; 0xa4
 800297e:	f7ff ff87 	bl	8002890 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8002982:	20d3      	movs	r0, #211	; 0xd3
 8002984:	f7ff ff84 	bl	8002890 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x00); //-not offset
 8002988:	2000      	movs	r0, #0
 800298a:	f7ff ff81 	bl	8002890 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800298e:	20d5      	movs	r0, #213	; 0xd5
 8002990:	f7ff ff7e 	bl	8002890 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002994:	20f0      	movs	r0, #240	; 0xf0
 8002996:	f7ff ff7b 	bl	8002890 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800299a:	20d9      	movs	r0, #217	; 0xd9
 800299c:	f7ff ff78 	bl	8002890 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x22); //
 80029a0:	2022      	movs	r0, #34	; 0x22
 80029a2:	f7ff ff75 	bl	8002890 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 80029a6:	20da      	movs	r0, #218	; 0xda
 80029a8:	f7ff ff72 	bl	8002890 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x12);
 80029ac:	2012      	movs	r0, #18
 80029ae:	f7ff ff6f 	bl	8002890 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 80029b2:	20db      	movs	r0, #219	; 0xdb
 80029b4:	f7ff ff6c 	bl	8002890 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80029b8:	2020      	movs	r0, #32
 80029ba:	f7ff ff69 	bl	8002890 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80029be:	208d      	movs	r0, #141	; 0x8d
 80029c0:	f7ff ff66 	bl	8002890 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0x14); //
 80029c4:	2014      	movs	r0, #20
 80029c6:	f7ff ff63 	bl	8002890 <_ZL20ssd1306_WriteCommandh>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 80029ca:	20af      	movs	r0, #175	; 0xaf
 80029cc:	f7ff ff60 	bl	8002890 <_ZL20ssd1306_WriteCommandh>
	ssd1306_Fill(Black);
 80029d0:	2000      	movs	r0, #0
 80029d2:	f7ff ff71 	bl	80028b8 <_Z12ssd1306_Fill13SSD1306_COLOR>
	ssd1306_UpdateScreen();
 80029d6:	f7ff ff7d 	bl	80028d4 <_Z20ssd1306_UpdateScreenv>
	SSD1306.Initialized = 1;
 80029da:	2001      	movs	r0, #1
	SSD1306.CurrentX = 0;
 80029dc:	2200      	movs	r2, #0
 80029de:	4b02      	ldr	r3, [pc, #8]	; (80029e8 <_Z12ssd1306_Initv+0xc8>)
	SSD1306.Initialized = 1;
 80029e0:	7158      	strb	r0, [r3, #5]
	SSD1306.CurrentX = 0;
 80029e2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80029e4:	805a      	strh	r2, [r3, #2]
}
 80029e6:	bd08      	pop	{r3, pc}
 80029e8:	200008e6 	.word	0x200008e6

080029ec <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR>:
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 80029ec:	2881      	cmp	r0, #129	; 0x81
{
 80029ee:	b530      	push	{r4, r5, lr}
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 80029f0:	d817      	bhi.n	8002a22 <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0x36>
 80029f2:	293f      	cmp	r1, #63	; 0x3f
 80029f4:	d815      	bhi.n	8002a22 <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0x36>
		// Don't write outside the buffer
		return;
	}

	// Check if pixel should be inverted
	if (SSD1306.Inverted)
 80029f6:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0x38>)
 80029f8:	791b      	ldrb	r3, [r3, #4]
 80029fa:	b113      	cbz	r3, 8002a02 <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0x16>
	{
		color = (SSD1306_COLOR)!color;
 80029fc:	fab2 f282 	clz	r2, r2
 8002a00:	0952      	lsrs	r2, r2, #5
 8002a02:	2382      	movs	r3, #130	; 0x82
 8002a04:	08cc      	lsrs	r4, r1, #3
 8002a06:	fb03 0004 	mla	r0, r3, r4, r0
 8002a0a:	f001 0407 	and.w	r4, r1, #7
 8002a0e:	2101      	movs	r1, #1
 8002a10:	4d05      	ldr	r5, [pc, #20]	; (8002a28 <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR+0x3c>)
 8002a12:	40a1      	lsls	r1, r4
 8002a14:	562b      	ldrsb	r3, [r5, r0]
 8002a16:	b249      	sxtb	r1, r1
	}

	// Draw in the right color
	if (color == White)
 8002a18:	2a01      	cmp	r2, #1
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002a1a:	bf0c      	ite	eq
 8002a1c:	430b      	orreq	r3, r1
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002a1e:	438b      	bicne	r3, r1
 8002a20:	542b      	strb	r3, [r5, r0]
	}
}
 8002a22:	bd30      	pop	{r4, r5, pc}
 8002a24:	200008e6 	.word	0x200008e6
 8002a28:	200004d6 	.word	0x200004d6

08002a2c <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8002a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a30:	b087      	sub	sp, #28
 8002a32:	4607      	mov	r7, r0
 8002a34:	a806      	add	r0, sp, #24
 8002a36:	e900 0006 	stmdb	r0, {r1, r2}
 8002a3a:	469b      	mov	fp, r3
	uint32_t i, b, j;

	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8002a3c:	4b21      	ldr	r3, [pc, #132]	; (8002ac4 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0x98>)
 8002a3e:	f89d 9010 	ldrb.w	r9, [sp, #16]
 8002a42:	881c      	ldrh	r4, [r3, #0]
 8002a44:	9301      	str	r3, [sp, #4]
 8002a46:	eb04 0209 	add.w	r2, r4, r9
 8002a4a:	2a81      	cmp	r2, #129	; 0x81
 8002a4c:	dc37      	bgt.n	8002abe <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0x92>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8002a4e:	885b      	ldrh	r3, [r3, #2]
 8002a50:	f89d a011 	ldrb.w	sl, [sp, #17]
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	eb03 020a 	add.w	r2, r3, sl
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8002a5a:	2a3f      	cmp	r2, #63	; 0x3f
 8002a5c:	dc2f      	bgt.n	8002abe <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0x92>
		// Not enough space on current line
		return 0;
	}

	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 8002a5e:	2500      	movs	r5, #0
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002a60:	f1a7 0220 	sub.w	r2, r7, #32
 8002a64:	fb0a f302 	mul.w	r3, sl, r2
 8002a68:	9302      	str	r3, [sp, #8]
	for (i = 0; i < Font.FontHeight; i++)
 8002a6a:	45aa      	cmp	sl, r5
 8002a6c:	d920      	bls.n	8002ab0 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0x84>
		for (j = 0; j < Font.FontWidth; j++)
 8002a6e:	2600      	movs	r6, #0
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002a70:	9b02      	ldr	r3, [sp, #8]
 8002a72:	9905      	ldr	r1, [sp, #20]
 8002a74:	195a      	adds	r2, r3, r5
 8002a76:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 8002a7a:	9303      	str	r3, [sp, #12]
 8002a7c:	9b00      	ldr	r3, [sp, #0]
 8002a7e:	eb05 0803 	add.w	r8, r5, r3
 8002a82:	fa5f f888 	uxtb.w	r8, r8
		for (j = 0; j < Font.FontWidth; j++)
 8002a86:	45b1      	cmp	r9, r6
 8002a88:	d910      	bls.n	8002aac <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0x80>
		{
			if ((b << j) & 0x8000)
 8002a8a:	9b03      	ldr	r3, [sp, #12]
 8002a8c:	1930      	adds	r0, r6, r4
 8002a8e:	fa03 f206 	lsl.w	r2, r3, r6
 8002a92:	0413      	lsls	r3, r2, #16
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
			}
			else
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002a94:	bf58      	it	pl
 8002a96:	fabb f28b 	clzpl	r2, fp
 8002a9a:	b2c0      	uxtb	r0, r0
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002a9c:	bf4c      	ite	mi
 8002a9e:	465a      	movmi	r2, fp
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002aa0:	0952      	lsrpl	r2, r2, #5
 8002aa2:	4641      	mov	r1, r8
 8002aa4:	f7ff ffa2 	bl	80029ec <_Z17ssd1306_DrawPixelhh13SSD1306_COLOR>
		for (j = 0; j < Font.FontWidth; j++)
 8002aa8:	3601      	adds	r6, #1
 8002aaa:	e7ec      	b.n	8002a86 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0x5a>
	for (i = 0; i < Font.FontHeight; i++)
 8002aac:	3501      	adds	r5, #1
 8002aae:	e7dc      	b.n	8002a6a <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0x3e>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 8002ab0:	9b01      	ldr	r3, [sp, #4]
 8002ab2:	444c      	add	r4, r9
 8002ab4:	801c      	strh	r4, [r3, #0]

	// Return written char for validation
	return ch;
}
 8002ab6:	4638      	mov	r0, r7
 8002ab8:	b007      	add	sp, #28
 8002aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
 8002abe:	2700      	movs	r7, #0
 8002ac0:	e7f9      	b.n	8002ab6 <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR+0x8a>
 8002ac2:	bf00      	nop
 8002ac4:	200008e6 	.word	0x200008e6

08002ac8 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 8002ac8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002aca:	466d      	mov	r5, sp
 8002acc:	461f      	mov	r7, r3
 8002ace:	e885 0006 	stmia.w	r5, {r1, r2}
 8002ad2:	1e46      	subs	r6, r0, #1
	// Write until null-byte
	while (*str)
 8002ad4:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 8002ad8:	b144      	cbz	r4, 8002aec <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR+0x24>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 8002ada:	e895 0006 	ldmia.w	r5, {r1, r2}
 8002ade:	4620      	mov	r0, r4
 8002ae0:	463b      	mov	r3, r7
 8002ae2:	f7ff ffa3 	bl	8002a2c <_Z17ssd1306_WriteCharc7FontDef13SSD1306_COLOR>
 8002ae6:	7834      	ldrb	r4, [r6, #0]
 8002ae8:	42a0      	cmp	r0, r4
 8002aea:	d0f3      	beq.n	8002ad4 <_Z19ssd1306_WriteStringPKc7FontDef13SSD1306_COLOR+0xc>
		str++;
	}

	// Everything ok
	return *str;
}
 8002aec:	4620      	mov	r0, r4
 8002aee:	b003      	add	sp, #12
 8002af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002af4 <_Z17ssd1306_SetCursorhh>:
//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
	SSD1306.CurrentX = x;
 8002af4:	4b01      	ldr	r3, [pc, #4]	; (8002afc <_Z17ssd1306_SetCursorhh+0x8>)
 8002af6:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8002af8:	8059      	strh	r1, [r3, #2]
}
 8002afa:	4770      	bx	lr
 8002afc:	200008e6 	.word	0x200008e6

08002b00 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b00:	4b11      	ldr	r3, [pc, #68]	; (8002b48 <HAL_MspInit+0x48>)
{
 8002b02:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b04:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b06:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b08:	f042 0201 	orr.w	r2, r2, #1
 8002b0c:	619a      	str	r2, [r3, #24]
 8002b0e:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b10:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b14:	f002 0201 	and.w	r2, r2, #1
 8002b18:	9200      	str	r2, [sp, #0]
 8002b1a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b1c:	69da      	ldr	r2, [r3, #28]
 8002b1e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b22:	61da      	str	r2, [r3, #28]
 8002b24:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b26:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2c:	9301      	str	r3, [sp, #4]
 8002b2e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b30:	f000 fa38 	bl	8002fa4 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002b34:	4a05      	ldr	r2, [pc, #20]	; (8002b4c <HAL_MspInit+0x4c>)
 8002b36:	6853      	ldr	r3, [r2, #4]
 8002b38:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002b3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b42:	b003      	add	sp, #12
 8002b44:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	40010000 	.word	0x40010000

08002b50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b50:	b510      	push	{r4, lr}
 8002b52:	4604      	mov	r4, r0
 8002b54:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b56:	2210      	movs	r2, #16
 8002b58:	2100      	movs	r1, #0
 8002b5a:	a802      	add	r0, sp, #8
 8002b5c:	f006 fe73 	bl	8009846 <memset>
  if(hi2c->Instance==I2C1)
 8002b60:	6822      	ldr	r2, [r4, #0]
 8002b62:	4b15      	ldr	r3, [pc, #84]	; (8002bb8 <HAL_I2C_MspInit+0x68>)
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d124      	bne.n	8002bb2 <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b68:	4c14      	ldr	r4, [pc, #80]	; (8002bbc <HAL_I2C_MspInit+0x6c>)
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b6a:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b6e:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b70:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b72:	f043 0308 	orr.w	r3, r3, #8
 8002b76:	61a3      	str	r3, [r4, #24]
 8002b78:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b7a:	4811      	ldr	r0, [pc, #68]	; (8002bc0 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b7c:	f003 0308 	and.w	r3, r3, #8
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b84:	2312      	movs	r3, #18
 8002b86:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b8e:	f000 faa9 	bl	80030e4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002b92:	4a0c      	ldr	r2, [pc, #48]	; (8002bc4 <HAL_I2C_MspInit+0x74>)
 8002b94:	6853      	ldr	r3, [r2, #4]
 8002b96:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002b9a:	f043 0302 	orr.w	r3, r3, #2
 8002b9e:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ba0:	69e3      	ldr	r3, [r4, #28]
 8002ba2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ba6:	61e3      	str	r3, [r4, #28]
 8002ba8:	69e3      	ldr	r3, [r4, #28]
 8002baa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bae:	9301      	str	r3, [sp, #4]
 8002bb0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002bb2:	b006      	add	sp, #24
 8002bb4:	bd10      	pop	{r4, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40005400 	.word	0x40005400
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	40010c00 	.word	0x40010c00
 8002bc4:	40010000 	.word	0x40010000

08002bc8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002bc8:	b510      	push	{r4, lr}
 8002bca:	4604      	mov	r4, r0
 8002bcc:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bce:	2210      	movs	r2, #16
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	a802      	add	r0, sp, #8
 8002bd4:	f006 fe37 	bl	8009846 <memset>
  if(hspi->Instance==SPI2)
 8002bd8:	6822      	ldr	r2, [r4, #0]
 8002bda:	4b17      	ldr	r3, [pc, #92]	; (8002c38 <HAL_SPI_MspInit+0x70>)
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d128      	bne.n	8002c32 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002be0:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 8002be4:	69da      	ldr	r2, [r3, #28]
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be6:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002be8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bec:	61da      	str	r2, [r3, #28]
 8002bee:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf0:	4812      	ldr	r0, [pc, #72]	; (8002c3c <HAL_SPI_MspInit+0x74>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002bf2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002bf6:	9200      	str	r2, [sp, #0]
 8002bf8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bfa:	699a      	ldr	r2, [r3, #24]
 8002bfc:	f042 0208 	orr.w	r2, r2, #8
 8002c00:	619a      	str	r2, [r3, #24]
 8002c02:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c04:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c08:	f003 0308 	and.w	r3, r3, #8
 8002c0c:	9301      	str	r3, [sp, #4]
 8002c0e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c10:	2302      	movs	r3, #2
 8002c12:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c16:	2303      	movs	r3, #3
 8002c18:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c1a:	f000 fa63 	bl	80030e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c22:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c24:	4805      	ldr	r0, [pc, #20]	; (8002c3c <HAL_SPI_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c26:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c2a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c2e:	f000 fa59 	bl	80030e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002c32:	b006      	add	sp, #24
 8002c34:	bd10      	pop	{r4, pc}
 8002c36:	bf00      	nop
 8002c38:	40003800 	.word	0x40003800
 8002c3c:	40010c00 	.word	0x40010c00

08002c40 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM2)
 8002c40:	6803      	ldr	r3, [r0, #0]
{
 8002c42:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM2)
 8002c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c48:	d10a      	bne.n	8002c60 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c4a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002c4e:	69da      	ldr	r2, [r3, #28]
 8002c50:	f042 0201 	orr.w	r2, r2, #1
 8002c54:	61da      	str	r2, [r3, #28]
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	9301      	str	r3, [sp, #4]
 8002c5e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002c60:	b002      	add	sp, #8
 8002c62:	4770      	bx	lr

08002c64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c64:	b510      	push	{r4, lr}
 8002c66:	4604      	mov	r4, r0
 8002c68:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c6a:	2210      	movs	r2, #16
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	a802      	add	r0, sp, #8
 8002c70:	f006 fde9 	bl	8009846 <memset>
  if(htim->Instance==TIM2)
 8002c74:	6823      	ldr	r3, [r4, #0]
 8002c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c7a:	d113      	bne.n	8002ca4 <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c7c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002c80:	699a      	ldr	r2, [r3, #24]
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8002c82:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c84:	f042 0204 	orr.w	r2, r2, #4
 8002c88:	619a      	str	r2, [r3, #24]
 8002c8a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8c:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c8e:	f003 0304 	and.w	r3, r3, #4
 8002c92:	9301      	str	r3, [sp, #4]
 8002c94:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c96:	2302      	movs	r3, #2
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8002c98:	4803      	ldr	r0, [pc, #12]	; (8002ca8 <HAL_TIM_MspPostInit+0x44>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c9e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8002ca0:	f000 fa20 	bl	80030e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002ca4:	b006      	add	sp, #24
 8002ca6:	bd10      	pop	{r4, pc}
 8002ca8:	40010800 	.word	0x40010800

08002cac <HAL_UART_MspInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cac:	2210      	movs	r2, #16
{
 8002cae:	b510      	push	{r4, lr}
 8002cb0:	4604      	mov	r4, r0
 8002cb2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb4:	eb0d 0002 	add.w	r0, sp, r2
 8002cb8:	2100      	movs	r1, #0
 8002cba:	f006 fdc4 	bl	8009846 <memset>
  if(huart->Instance==USART1)
 8002cbe:	6823      	ldr	r3, [r4, #0]
 8002cc0:	4a30      	ldr	r2, [pc, #192]	; (8002d84 <HAL_UART_MspInit+0xd8>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d131      	bne.n	8002d2a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cc6:	4b30      	ldr	r3, [pc, #192]	; (8002d88 <HAL_UART_MspInit+0xdc>)
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc8:	f44f 7000 	mov.w	r0, #512	; 0x200
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ccc:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cce:	a904      	add	r1, sp, #16
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cd4:	619a      	str	r2, [r3, #24]
 8002cd6:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cd8:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cda:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002cde:	9200      	str	r2, [sp, #0]
 8002ce0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ce2:	699a      	ldr	r2, [r3, #24]
 8002ce4:	f042 0204 	orr.w	r2, r2, #4
 8002ce8:	619a      	str	r2, [r3, #24]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	9301      	str	r3, [sp, #4]
 8002cf2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	e9cd 0304 	strd	r0, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cfa:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cfc:	4823      	ldr	r0, [pc, #140]	; (8002d8c <HAL_UART_MspInit+0xe0>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cfe:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d00:	f000 f9f0 	bl	80030e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d04:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d08:	a904      	add	r1, sp, #16
 8002d0a:	4820      	ldr	r0, [pc, #128]	; (8002d8c <HAL_UART_MspInit+0xe0>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d0c:	e9cd 3404 	strd	r3, r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d10:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d12:	f000 f9e7 	bl	80030e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002d16:	2025      	movs	r0, #37	; 0x25
 8002d18:	4622      	mov	r2, r4
 8002d1a:	2105      	movs	r1, #5
 8002d1c:	f000 f942 	bl	8002fa4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d20:	2025      	movs	r0, #37	; 0x25
 8002d22:	f000 f973 	bl	800300c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002d26:	b008      	add	sp, #32
 8002d28:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 8002d2a:	4a19      	ldr	r2, [pc, #100]	; (8002d90 <HAL_UART_MspInit+0xe4>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d1fa      	bne.n	8002d26 <HAL_UART_MspInit+0x7a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d30:	4b15      	ldr	r3, [pc, #84]	; (8002d88 <HAL_UART_MspInit+0xdc>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d32:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d34:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d36:	4817      	ldr	r0, [pc, #92]	; (8002d94 <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d38:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002d3c:	61da      	str	r2, [r3, #28]
 8002d3e:	69da      	ldr	r2, [r3, #28]
 8002d40:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8002d44:	9202      	str	r2, [sp, #8]
 8002d46:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d48:	699a      	ldr	r2, [r3, #24]
 8002d4a:	f042 0208 	orr.w	r2, r2, #8
 8002d4e:	619a      	str	r2, [r3, #24]
 8002d50:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d52:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d56:	f003 0308 	and.w	r3, r3, #8
 8002d5a:	9303      	str	r3, [sp, #12]
 8002d5c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5e:	2302      	movs	r3, #2
 8002d60:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d64:	2303      	movs	r3, #3
 8002d66:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d68:	f000 f9bc 	bl	80030e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d72:	4808      	ldr	r0, [pc, #32]	; (8002d94 <HAL_UART_MspInit+0xe8>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d74:	e9cd 1304 	strd	r1, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d78:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d7c:	f000 f9b2 	bl	80030e4 <HAL_GPIO_Init>
}
 8002d80:	e7d1      	b.n	8002d26 <HAL_UART_MspInit+0x7a>
 8002d82:	bf00      	nop
 8002d84:	40013800 	.word	0x40013800
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	40010800 	.word	0x40010800
 8002d90:	40004800 	.word	0x40004800
 8002d94:	40010c00 	.word	0x40010c00

08002d98 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002d98:	4770      	bx	lr

08002d9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d9a:	e7fe      	b.n	8002d9a <HardFault_Handler>

08002d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d9c:	e7fe      	b.n	8002d9c <MemManage_Handler>

08002d9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d9e:	e7fe      	b.n	8002d9e <BusFault_Handler>

08002da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002da0:	e7fe      	b.n	8002da0 <UsageFault_Handler>

08002da2 <DebugMon_Handler>:
 8002da2:	4770      	bx	lr

08002da4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002da4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002da6:	f000 f8c7 	bl	8002f38 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002daa:	f006 f807 	bl	8008dbc <xTaskGetSchedulerState>
 8002dae:	2801      	cmp	r0, #1
 8002db0:	d003      	beq.n	8002dba <SysTick_Handler+0x16>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002db2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  xPortSysTickHandler();
 8002db6:	f006 bb5d 	b.w	8009474 <xPortSysTickHandler>
}
 8002dba:	bd08      	pop	{r3, pc}

08002dbc <USART1_IRQHandler>:
{
  /* USER CODE BEGIN USART1_IRQn 0 */
	unsigned char tmp;


	if((USART1->SR & USART_SR_RXNE)!=0)
 8002dbc:	4b0d      	ldr	r3, [pc, #52]	; (8002df4 <USART1_IRQHandler+0x38>)
{
 8002dbe:	b507      	push	{r0, r1, r2, lr}
	if((USART1->SR & USART_SR_RXNE)!=0)
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	0692      	lsls	r2, r2, #26
 8002dc4:	d50f      	bpl.n	8002de6 <USART1_IRQHandler+0x2a>
	{
		tmp = USART1->DR;                   //прочитать принятый байт
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	a902      	add	r1, sp, #8
 8002dca:	f801 3d01 	strb.w	r3, [r1, #-1]!
		osMessageQueuePut(GPS_UARTQueueHandle, &tmp, 0U, 0U);
 8002dce:	2300      	movs	r3, #0
 8002dd0:	4809      	ldr	r0, [pc, #36]	; (8002df8 <USART1_IRQHandler+0x3c>)
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	6800      	ldr	r0, [r0, #0]
 8002dd6:	f004 feab 	bl	8007b30 <osMessageQueuePut>
		HAL_UART_Receive_IT(&huart1, tmp, (uint8_t)1);
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8002de0:	4806      	ldr	r0, [pc, #24]	; (8002dfc <USART1_IRQHandler+0x40>)
 8002de2:	f001 fef2 	bl	8004bca <HAL_UART_Receive_IT>
	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002de6:	4805      	ldr	r0, [pc, #20]	; (8002dfc <USART1_IRQHandler+0x40>)
 8002de8:	f001 ff54 	bl	8004c94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002dec:	b003      	add	sp, #12
 8002dee:	f85d fb04 	ldr.w	pc, [sp], #4
 8002df2:	bf00      	nop
 8002df4:	40013800 	.word	0x40013800
 8002df8:	20000214 	.word	0x20000214
 8002dfc:	200003c8 	.word	0x200003c8

08002e00 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002e00:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002e02:	4b0a      	ldr	r3, [pc, #40]	; (8002e2c <_sbrk+0x2c>)
{
 8002e04:	4602      	mov	r2, r0
	if (heap_end == 0)
 8002e06:	6819      	ldr	r1, [r3, #0]
 8002e08:	b909      	cbnz	r1, 8002e0e <_sbrk+0xe>
		heap_end = &end;
 8002e0a:	4909      	ldr	r1, [pc, #36]	; (8002e30 <_sbrk+0x30>)
 8002e0c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8002e0e:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8002e10:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002e12:	4402      	add	r2, r0
 8002e14:	428a      	cmp	r2, r1
 8002e16:	d906      	bls.n	8002e26 <_sbrk+0x26>
	{
		errno = ENOMEM;
 8002e18:	f006 fcd0 	bl	80097bc <__errno>
 8002e1c:	230c      	movs	r3, #12
 8002e1e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002e20:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8002e24:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8002e26:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8002e28:	e7fc      	b.n	8002e24 <_sbrk+0x24>
 8002e2a:	bf00      	nop
 8002e2c:	200008ec 	.word	0x200008ec
 8002e30:	200046b0 	.word	0x200046b0

08002e34 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002e34:	4b0f      	ldr	r3, [pc, #60]	; (8002e74 <SystemInit+0x40>)
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	f042 0201 	orr.w	r2, r2, #1
 8002e3c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002e3e:	6859      	ldr	r1, [r3, #4]
 8002e40:	4a0d      	ldr	r2, [pc, #52]	; (8002e78 <SystemInit+0x44>)
 8002e42:	400a      	ands	r2, r1
 8002e44:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002e4c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e50:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e58:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002e5a:	685a      	ldr	r2, [r3, #4]
 8002e5c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002e60:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002e62:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002e66:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002e68:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e6c:	4b03      	ldr	r3, [pc, #12]	; (8002e7c <SystemInit+0x48>)
 8002e6e:	609a      	str	r2, [r3, #8]
#endif 
}
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	40021000 	.word	0x40021000
 8002e78:	f8ff0000 	.word	0xf8ff0000
 8002e7c:	e000ed00 	.word	0xe000ed00

08002e80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002e80:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002e82:	e003      	b.n	8002e8c <LoopCopyDataInit>

08002e84 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002e84:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002e86:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002e88:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002e8a:	3104      	adds	r1, #4

08002e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002e8c:	480a      	ldr	r0, [pc, #40]	; (8002eb8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002e8e:	4b0b      	ldr	r3, [pc, #44]	; (8002ebc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002e90:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002e92:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002e94:	d3f6      	bcc.n	8002e84 <CopyDataInit>
  ldr r2, =_sbss
 8002e96:	4a0a      	ldr	r2, [pc, #40]	; (8002ec0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002e98:	e002      	b.n	8002ea0 <LoopFillZerobss>

08002e9a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002e9a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002e9c:	f842 3b04 	str.w	r3, [r2], #4

08002ea0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002ea0:	4b08      	ldr	r3, [pc, #32]	; (8002ec4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002ea2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002ea4:	d3f9      	bcc.n	8002e9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ea6:	f7ff ffc5 	bl	8002e34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002eaa:	f006 fc8d 	bl	80097c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002eae:	f7fe fe1d 	bl	8001aec <main>
  bx lr
 8002eb2:	4770      	bx	lr
  ldr r3, =_sidata
 8002eb4:	0800cd4c 	.word	0x0800cd4c
  ldr r0, =_sdata
 8002eb8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002ebc:	200001f4 	.word	0x200001f4
  ldr r2, =_sbss
 8002ec0:	200001f4 	.word	0x200001f4
  ldr r3, = _ebss
 8002ec4:	200046ac 	.word	0x200046ac

08002ec8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ec8:	e7fe      	b.n	8002ec8 <ADC1_2_IRQHandler>
	...

08002ecc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ecc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ece:	4b0e      	ldr	r3, [pc, #56]	; (8002f08 <HAL_InitTick+0x3c>)
{
 8002ed0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ed2:	7818      	ldrb	r0, [r3, #0]
 8002ed4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ed8:	fbb3 f3f0 	udiv	r3, r3, r0
 8002edc:	4a0b      	ldr	r2, [pc, #44]	; (8002f0c <HAL_InitTick+0x40>)
 8002ede:	6810      	ldr	r0, [r2, #0]
 8002ee0:	fbb0 f0f3 	udiv	r0, r0, r3
 8002ee4:	f000 f8a0 	bl	8003028 <HAL_SYSTICK_Config>
 8002ee8:	4604      	mov	r4, r0
 8002eea:	b958      	cbnz	r0, 8002f04 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002eec:	2d0f      	cmp	r5, #15
 8002eee:	d809      	bhi.n	8002f04 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	4629      	mov	r1, r5
 8002ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef8:	f000 f854 	bl	8002fa4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002efc:	4620      	mov	r0, r4
 8002efe:	4b04      	ldr	r3, [pc, #16]	; (8002f10 <HAL_InitTick+0x44>)
 8002f00:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002f02:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002f04:	2001      	movs	r0, #1
 8002f06:	e7fc      	b.n	8002f02 <HAL_InitTick+0x36>
 8002f08:	20000014 	.word	0x20000014
 8002f0c:	20000010 	.word	0x20000010
 8002f10:	20000018 	.word	0x20000018

08002f14 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f14:	4a07      	ldr	r2, [pc, #28]	; (8002f34 <HAL_Init+0x20>)
{
 8002f16:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f18:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f1a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f1c:	f043 0310 	orr.w	r3, r3, #16
 8002f20:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f22:	f000 f82d 	bl	8002f80 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f26:	200f      	movs	r0, #15
 8002f28:	f7ff ffd0 	bl	8002ecc <HAL_InitTick>
  HAL_MspInit();
 8002f2c:	f7ff fde8 	bl	8002b00 <HAL_MspInit>
}
 8002f30:	2000      	movs	r0, #0
 8002f32:	bd08      	pop	{r3, pc}
 8002f34:	40022000 	.word	0x40022000

08002f38 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002f38:	4a03      	ldr	r2, [pc, #12]	; (8002f48 <HAL_IncTick+0x10>)
 8002f3a:	4b04      	ldr	r3, [pc, #16]	; (8002f4c <HAL_IncTick+0x14>)
 8002f3c:	6811      	ldr	r1, [r2, #0]
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	440b      	add	r3, r1
 8002f42:	6013      	str	r3, [r2, #0]
}
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	20004664 	.word	0x20004664
 8002f4c:	20000014 	.word	0x20000014

08002f50 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002f50:	4b01      	ldr	r3, [pc, #4]	; (8002f58 <HAL_GetTick+0x8>)
 8002f52:	6818      	ldr	r0, [r3, #0]
}
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	20004664 	.word	0x20004664

08002f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f5c:	b538      	push	{r3, r4, r5, lr}
 8002f5e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002f60:	f7ff fff6 	bl	8002f50 <HAL_GetTick>
 8002f64:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f66:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002f68:	bf1e      	ittt	ne
 8002f6a:	4b04      	ldrne	r3, [pc, #16]	; (8002f7c <HAL_Delay+0x20>)
 8002f6c:	781b      	ldrbne	r3, [r3, #0]
 8002f6e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f70:	f7ff ffee 	bl	8002f50 <HAL_GetTick>
 8002f74:	1b40      	subs	r0, r0, r5
 8002f76:	42a0      	cmp	r0, r4
 8002f78:	d3fa      	bcc.n	8002f70 <HAL_Delay+0x14>
  {
  }
}
 8002f7a:	bd38      	pop	{r3, r4, r5, pc}
 8002f7c:	20000014 	.word	0x20000014

08002f80 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f80:	4a07      	ldr	r2, [pc, #28]	; (8002fa0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f82:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f84:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f86:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f8a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002f8e:	041b      	lsls	r3, r3, #16
 8002f90:	0c1b      	lsrs	r3, r3, #16
 8002f92:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8002f9a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002f9c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002f9e:	4770      	bx	lr
 8002fa0:	e000ed00 	.word	0xe000ed00

08002fa4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fa4:	4b17      	ldr	r3, [pc, #92]	; (8003004 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fa6:	b570      	push	{r4, r5, r6, lr}
 8002fa8:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002faa:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fae:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fb2:	f1c4 0507 	rsb	r5, r4, #7
 8002fb6:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fb8:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fbc:	bf28      	it	cs
 8002fbe:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fc0:	2b06      	cmp	r3, #6
 8002fc2:	bf98      	it	ls
 8002fc4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fc6:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fca:	bf88      	it	hi
 8002fcc:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fce:	ea21 0303 	bic.w	r3, r1, r3
 8002fd2:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fd4:	fa06 f404 	lsl.w	r4, r6, r4
 8002fd8:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8002fdc:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fde:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fe2:	bfa8      	it	ge
 8002fe4:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8002fe8:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fec:	bfb8      	it	lt
 8002fee:	4a06      	ldrlt	r2, [pc, #24]	; (8003008 <HAL_NVIC_SetPriority+0x64>)
 8002ff0:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ff2:	bfab      	itete	ge
 8002ff4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ff8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ffc:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003000:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003002:	bd70      	pop	{r4, r5, r6, pc}
 8003004:	e000ed00 	.word	0xe000ed00
 8003008:	e000ed14 	.word	0xe000ed14

0800300c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800300c:	2800      	cmp	r0, #0
 800300e:	db08      	blt.n	8003022 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003010:	2301      	movs	r3, #1
 8003012:	0942      	lsrs	r2, r0, #5
 8003014:	f000 001f 	and.w	r0, r0, #31
 8003018:	fa03 f000 	lsl.w	r0, r3, r0
 800301c:	4b01      	ldr	r3, [pc, #4]	; (8003024 <HAL_NVIC_EnableIRQ+0x18>)
 800301e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003022:	4770      	bx	lr
 8003024:	e000e100 	.word	0xe000e100

08003028 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003028:	3801      	subs	r0, #1
 800302a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800302e:	d20a      	bcs.n	8003046 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003030:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003032:	4b06      	ldr	r3, [pc, #24]	; (800304c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003034:	4a06      	ldr	r2, [pc, #24]	; (8003050 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003036:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003038:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800303c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800303e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003040:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003046:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	e000e010 	.word	0xe000e010
 8003050:	e000ed00 	.word	0xe000ed00

08003054 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003054:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8003058:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800305a:	2b02      	cmp	r3, #2
 800305c:	d003      	beq.n	8003066 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800305e:	2304      	movs	r3, #4
 8003060:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8003062:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8003064:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003066:	6803      	ldr	r3, [r0, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	f022 020e 	bic.w	r2, r2, #14
 800306e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	f022 0201 	bic.w	r2, r2, #1
 8003076:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003078:	4a18      	ldr	r2, [pc, #96]	; (80030dc <HAL_DMA_Abort_IT+0x88>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d01f      	beq.n	80030be <HAL_DMA_Abort_IT+0x6a>
 800307e:	3214      	adds	r2, #20
 8003080:	4293      	cmp	r3, r2
 8003082:	d01e      	beq.n	80030c2 <HAL_DMA_Abort_IT+0x6e>
 8003084:	3214      	adds	r2, #20
 8003086:	4293      	cmp	r3, r2
 8003088:	d01d      	beq.n	80030c6 <HAL_DMA_Abort_IT+0x72>
 800308a:	3214      	adds	r2, #20
 800308c:	4293      	cmp	r3, r2
 800308e:	d01d      	beq.n	80030cc <HAL_DMA_Abort_IT+0x78>
 8003090:	3214      	adds	r2, #20
 8003092:	4293      	cmp	r3, r2
 8003094:	d01d      	beq.n	80030d2 <HAL_DMA_Abort_IT+0x7e>
 8003096:	3214      	adds	r2, #20
 8003098:	4293      	cmp	r3, r2
 800309a:	bf0c      	ite	eq
 800309c:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80030a0:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80030a4:	4a0e      	ldr	r2, [pc, #56]	; (80030e0 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 80030a6:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80030a8:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80030aa:	2301      	movs	r3, #1
 80030ac:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 80030b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 80030b2:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80030b6:	b17b      	cbz	r3, 80030d8 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 80030b8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80030ba:	4620      	mov	r0, r4
 80030bc:	e7d2      	b.n	8003064 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80030be:	2301      	movs	r3, #1
 80030c0:	e7f0      	b.n	80030a4 <HAL_DMA_Abort_IT+0x50>
 80030c2:	2310      	movs	r3, #16
 80030c4:	e7ee      	b.n	80030a4 <HAL_DMA_Abort_IT+0x50>
 80030c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030ca:	e7eb      	b.n	80030a4 <HAL_DMA_Abort_IT+0x50>
 80030cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030d0:	e7e8      	b.n	80030a4 <HAL_DMA_Abort_IT+0x50>
 80030d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030d6:	e7e5      	b.n	80030a4 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 80030d8:	4618      	mov	r0, r3
 80030da:	e7c3      	b.n	8003064 <HAL_DMA_Abort_IT+0x10>
 80030dc:	40020008 	.word	0x40020008
 80030e0:	40020000 	.word	0x40020000

080030e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80030e8:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80030ea:	4626      	mov	r6, r4
 80030ec:	4b65      	ldr	r3, [pc, #404]	; (8003284 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80030ee:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8003294 <HAL_GPIO_Init+0x1b0>
 80030f2:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8003298 <HAL_GPIO_Init+0x1b4>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030f6:	680a      	ldr	r2, [r1, #0]
 80030f8:	fa32 f506 	lsrs.w	r5, r2, r6
 80030fc:	d102      	bne.n	8003104 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 80030fe:	b003      	add	sp, #12
 8003100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8003104:	f04f 0801 	mov.w	r8, #1
 8003108:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800310c:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8003110:	4590      	cmp	r8, r2
 8003112:	d17e      	bne.n	8003212 <HAL_GPIO_Init+0x12e>
      switch (GPIO_Init->Mode)
 8003114:	684d      	ldr	r5, [r1, #4]
 8003116:	2d12      	cmp	r5, #18
 8003118:	f000 80a9 	beq.w	800326e <HAL_GPIO_Init+0x18a>
 800311c:	f200 8082 	bhi.w	8003224 <HAL_GPIO_Init+0x140>
 8003120:	2d02      	cmp	r5, #2
 8003122:	f000 80a1 	beq.w	8003268 <HAL_GPIO_Init+0x184>
 8003126:	d876      	bhi.n	8003216 <HAL_GPIO_Init+0x132>
 8003128:	2d00      	cmp	r5, #0
 800312a:	f000 8088 	beq.w	800323e <HAL_GPIO_Init+0x15a>
 800312e:	2d01      	cmp	r5, #1
 8003130:	f000 8098 	beq.w	8003264 <HAL_GPIO_Init+0x180>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003134:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003138:	2aff      	cmp	r2, #255	; 0xff
 800313a:	bf93      	iteet	ls
 800313c:	4682      	movls	sl, r0
 800313e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8003142:	3d08      	subhi	r5, #8
 8003144:	f8d0 b000 	ldrls.w	fp, [r0]
 8003148:	bf92      	itee	ls
 800314a:	00b5      	lslls	r5, r6, #2
 800314c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8003150:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003152:	fa09 f805 	lsl.w	r8, r9, r5
 8003156:	ea2b 0808 	bic.w	r8, fp, r8
 800315a:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800315e:	bf88      	it	hi
 8003160:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003164:	ea48 0505 	orr.w	r5, r8, r5
 8003168:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800316c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8003170:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8003174:	d04d      	beq.n	8003212 <HAL_GPIO_Init+0x12e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003176:	4f44      	ldr	r7, [pc, #272]	; (8003288 <HAL_GPIO_Init+0x1a4>)
 8003178:	f026 0803 	bic.w	r8, r6, #3
 800317c:	69bd      	ldr	r5, [r7, #24]
 800317e:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8003182:	f045 0501 	orr.w	r5, r5, #1
 8003186:	61bd      	str	r5, [r7, #24]
 8003188:	69bd      	ldr	r5, [r7, #24]
 800318a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 800318e:	f005 0501 	and.w	r5, r5, #1
 8003192:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003194:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003198:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800319a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800319e:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80031a2:	fa09 f90b 	lsl.w	r9, r9, fp
 80031a6:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80031aa:	4d38      	ldr	r5, [pc, #224]	; (800328c <HAL_GPIO_Init+0x1a8>)
 80031ac:	42a8      	cmp	r0, r5
 80031ae:	d063      	beq.n	8003278 <HAL_GPIO_Init+0x194>
 80031b0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80031b4:	42a8      	cmp	r0, r5
 80031b6:	d061      	beq.n	800327c <HAL_GPIO_Init+0x198>
 80031b8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80031bc:	42a8      	cmp	r0, r5
 80031be:	d05f      	beq.n	8003280 <HAL_GPIO_Init+0x19c>
 80031c0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80031c4:	42a8      	cmp	r0, r5
 80031c6:	bf0c      	ite	eq
 80031c8:	2503      	moveq	r5, #3
 80031ca:	2504      	movne	r5, #4
 80031cc:	fa05 f50b 	lsl.w	r5, r5, fp
 80031d0:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80031d4:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80031d8:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031da:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80031de:	bf14      	ite	ne
 80031e0:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80031e2:	4395      	biceq	r5, r2
 80031e4:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80031e6:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031e8:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80031ec:	bf14      	ite	ne
 80031ee:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80031f0:	4395      	biceq	r5, r2
 80031f2:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80031f4:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031f6:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80031fa:	bf14      	ite	ne
 80031fc:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80031fe:	4395      	biceq	r5, r2
 8003200:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8003202:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003204:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8003208:	bf14      	ite	ne
 800320a:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800320c:	ea25 0202 	biceq.w	r2, r5, r2
 8003210:	60da      	str	r2, [r3, #12]
	position++;
 8003212:	3601      	adds	r6, #1
 8003214:	e76f      	b.n	80030f6 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8003216:	2d03      	cmp	r5, #3
 8003218:	d022      	beq.n	8003260 <HAL_GPIO_Init+0x17c>
 800321a:	2d11      	cmp	r5, #17
 800321c:	d18a      	bne.n	8003134 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800321e:	68cc      	ldr	r4, [r1, #12]
 8003220:	3404      	adds	r4, #4
          break;
 8003222:	e787      	b.n	8003134 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8003224:	4f1a      	ldr	r7, [pc, #104]	; (8003290 <HAL_GPIO_Init+0x1ac>)
 8003226:	42bd      	cmp	r5, r7
 8003228:	d009      	beq.n	800323e <HAL_GPIO_Init+0x15a>
 800322a:	d812      	bhi.n	8003252 <HAL_GPIO_Init+0x16e>
 800322c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800329c <HAL_GPIO_Init+0x1b8>
 8003230:	454d      	cmp	r5, r9
 8003232:	d004      	beq.n	800323e <HAL_GPIO_Init+0x15a>
 8003234:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8003238:	454d      	cmp	r5, r9
 800323a:	f47f af7b 	bne.w	8003134 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800323e:	688c      	ldr	r4, [r1, #8]
 8003240:	b1c4      	cbz	r4, 8003274 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003242:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8003244:	bf0c      	ite	eq
 8003246:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800324a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800324e:	2408      	movs	r4, #8
 8003250:	e770      	b.n	8003134 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8003252:	4565      	cmp	r5, ip
 8003254:	d0f3      	beq.n	800323e <HAL_GPIO_Init+0x15a>
 8003256:	4575      	cmp	r5, lr
 8003258:	d0f1      	beq.n	800323e <HAL_GPIO_Init+0x15a>
 800325a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80032a0 <HAL_GPIO_Init+0x1bc>
 800325e:	e7eb      	b.n	8003238 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003260:	2400      	movs	r4, #0
 8003262:	e767      	b.n	8003134 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003264:	68cc      	ldr	r4, [r1, #12]
          break;
 8003266:	e765      	b.n	8003134 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003268:	68cc      	ldr	r4, [r1, #12]
 800326a:	3408      	adds	r4, #8
          break;
 800326c:	e762      	b.n	8003134 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800326e:	68cc      	ldr	r4, [r1, #12]
 8003270:	340c      	adds	r4, #12
          break;
 8003272:	e75f      	b.n	8003134 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003274:	2404      	movs	r4, #4
 8003276:	e75d      	b.n	8003134 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003278:	2500      	movs	r5, #0
 800327a:	e7a7      	b.n	80031cc <HAL_GPIO_Init+0xe8>
 800327c:	2501      	movs	r5, #1
 800327e:	e7a5      	b.n	80031cc <HAL_GPIO_Init+0xe8>
 8003280:	2502      	movs	r5, #2
 8003282:	e7a3      	b.n	80031cc <HAL_GPIO_Init+0xe8>
 8003284:	40010400 	.word	0x40010400
 8003288:	40021000 	.word	0x40021000
 800328c:	40010800 	.word	0x40010800
 8003290:	10210000 	.word	0x10210000
 8003294:	10310000 	.word	0x10310000
 8003298:	10320000 	.word	0x10320000
 800329c:	10110000 	.word	0x10110000
 80032a0:	10220000 	.word	0x10220000

080032a4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032a4:	6883      	ldr	r3, [r0, #8]
 80032a6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80032a8:	bf14      	ite	ne
 80032aa:	2001      	movne	r0, #1
 80032ac:	2000      	moveq	r0, #0
 80032ae:	4770      	bx	lr

080032b0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032b0:	b10a      	cbz	r2, 80032b6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80032b2:	6101      	str	r1, [r0, #16]
  }
}
 80032b4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80032b6:	0409      	lsls	r1, r1, #16
 80032b8:	e7fb      	b.n	80032b2 <HAL_GPIO_WritePin+0x2>

080032ba <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032ba:	6801      	ldr	r1, [r0, #0]
 80032bc:	2200      	movs	r2, #0
 80032be:	694b      	ldr	r3, [r1, #20]
 80032c0:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80032c4:	d010      	beq.n	80032e8 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032c6:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80032ca:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80032cc:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80032ce:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032d0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032d4:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032d8:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032da:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032de:	f043 0304 	orr.w	r3, r3, #4
 80032e2:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 80032e4:	2001      	movs	r0, #1
 80032e6:	4770      	bx	lr
  }
  return HAL_OK;
 80032e8:	4618      	mov	r0, r3
}
 80032ea:	4770      	bx	lr

080032ec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80032ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032f0:	4604      	mov	r4, r0
 80032f2:	4616      	mov	r6, r2
 80032f4:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032f6:	b28f      	uxth	r7, r1
 80032f8:	6825      	ldr	r5, [r4, #0]
 80032fa:	6968      	ldr	r0, [r5, #20]
 80032fc:	ea37 0000 	bics.w	r0, r7, r0
 8003300:	d017      	beq.n	8003332 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003302:	696b      	ldr	r3, [r5, #20]
 8003304:	055a      	lsls	r2, r3, #21
 8003306:	d516      	bpl.n	8003336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003308:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 800330a:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800330c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003310:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003312:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8003316:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003318:	2300      	movs	r3, #0
 800331a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800331c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003320:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003324:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003326:	f042 0204 	orr.w	r2, r2, #4
        return HAL_ERROR;
 800332a:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800332c:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800332e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8003336:	1c73      	adds	r3, r6, #1
 8003338:	d0df      	beq.n	80032fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800333a:	f7ff fe09 	bl	8002f50 <HAL_GetTick>
 800333e:	eba0 0008 	sub.w	r0, r0, r8
 8003342:	42b0      	cmp	r0, r6
 8003344:	d801      	bhi.n	800334a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>
 8003346:	2e00      	cmp	r6, #0
 8003348:	d1d6      	bne.n	80032f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800334a:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800334c:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800334e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003350:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003354:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003358:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800335a:	f042 0220 	orr.w	r2, r2, #32
 800335e:	e7e4      	b.n	800332a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>

08003360 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8003360:	b570      	push	{r4, r5, r6, lr}
 8003362:	4604      	mov	r4, r0
 8003364:	460d      	mov	r5, r1
 8003366:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003368:	6823      	ldr	r3, [r4, #0]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	075b      	lsls	r3, r3, #29
 800336e:	d501      	bpl.n	8003374 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8003370:	2000      	movs	r0, #0
}
 8003372:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003374:	4620      	mov	r0, r4
 8003376:	f7ff ffa0 	bl	80032ba <I2C_IsAcknowledgeFailed>
 800337a:	b9a8      	cbnz	r0, 80033a8 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 800337c:	1c6a      	adds	r2, r5, #1
 800337e:	d0f3      	beq.n	8003368 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003380:	f7ff fde6 	bl	8002f50 <HAL_GetTick>
 8003384:	1b80      	subs	r0, r0, r6
 8003386:	42a8      	cmp	r0, r5
 8003388:	d801      	bhi.n	800338e <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 800338a:	2d00      	cmp	r5, #0
 800338c:	d1ec      	bne.n	8003368 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800338e:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003390:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003392:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003394:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003398:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800339c:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800339e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033a2:	f042 0220 	orr.w	r2, r2, #32
 80033a6:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80033a8:	2001      	movs	r0, #1
 80033aa:	e7e2      	b.n	8003372 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

080033ac <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80033ac:	b570      	push	{r4, r5, r6, lr}
 80033ae:	4604      	mov	r4, r0
 80033b0:	460d      	mov	r5, r1
 80033b2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033b4:	6820      	ldr	r0, [r4, #0]
 80033b6:	6943      	ldr	r3, [r0, #20]
 80033b8:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80033bc:	d001      	beq.n	80033c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80033be:	2000      	movs	r0, #0
 80033c0:	e010      	b.n	80033e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80033c2:	6942      	ldr	r2, [r0, #20]
 80033c4:	06d2      	lsls	r2, r2, #27
 80033c6:	d50e      	bpl.n	80033e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033c8:	f06f 0210 	mvn.w	r2, #16
 80033cc:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80033ce:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80033d0:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033d2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033d6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80033da:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80033dc:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033de:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80033e0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80033e4:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e6:	f7ff fdb3 	bl	8002f50 <HAL_GetTick>
 80033ea:	1b80      	subs	r0, r0, r6
 80033ec:	42a8      	cmp	r0, r5
 80033ee:	d801      	bhi.n	80033f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 80033f0:	2d00      	cmp	r5, #0
 80033f2:	d1df      	bne.n	80033b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80033f4:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80033f6:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80033f8:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80033fa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033fe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003402:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003404:	f042 0220 	orr.w	r2, r2, #32
 8003408:	e7e8      	b.n	80033dc <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

0800340a <I2C_WaitOnFlagUntilTimeout>:
{
 800340a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800340e:	4604      	mov	r4, r0
 8003410:	4690      	mov	r8, r2
 8003412:	461f      	mov	r7, r3
 8003414:	9e08      	ldr	r6, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003416:	ea4f 4911 	mov.w	r9, r1, lsr #16
 800341a:	b28d      	uxth	r5, r1
 800341c:	6821      	ldr	r1, [r4, #0]
 800341e:	f1b9 0f01 	cmp.w	r9, #1
 8003422:	bf0c      	ite	eq
 8003424:	694b      	ldreq	r3, [r1, #20]
 8003426:	698b      	ldrne	r3, [r1, #24]
 8003428:	ea35 0303 	bics.w	r3, r5, r3
 800342c:	bf0c      	ite	eq
 800342e:	2301      	moveq	r3, #1
 8003430:	2300      	movne	r3, #0
 8003432:	4598      	cmp	r8, r3
 8003434:	d001      	beq.n	800343a <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8003436:	2000      	movs	r0, #0
 8003438:	e016      	b.n	8003468 <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 800343a:	1c7b      	adds	r3, r7, #1
 800343c:	d0ef      	beq.n	800341e <I2C_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800343e:	f7ff fd87 	bl	8002f50 <HAL_GetTick>
 8003442:	1b80      	subs	r0, r0, r6
 8003444:	42b8      	cmp	r0, r7
 8003446:	d801      	bhi.n	800344c <I2C_WaitOnFlagUntilTimeout+0x42>
 8003448:	2f00      	cmp	r7, #0
 800344a:	d1e7      	bne.n	800341c <I2C_WaitOnFlagUntilTimeout+0x12>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800344c:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800344e:	2220      	movs	r2, #32
        __HAL_UNLOCK(hi2c);
 8003450:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003452:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003454:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003458:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800345c:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800345e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003462:	f042 0220 	orr.w	r2, r2, #32
 8003466:	6422      	str	r2, [r4, #64]	; 0x40
}
 8003468:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800346c <I2C_WaitOnTXEFlagUntilTimeout>:
{
 800346c:	b570      	push	{r4, r5, r6, lr}
 800346e:	4604      	mov	r4, r0
 8003470:	460d      	mov	r5, r1
 8003472:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003474:	6823      	ldr	r3, [r4, #0]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	061b      	lsls	r3, r3, #24
 800347a:	d501      	bpl.n	8003480 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 800347c:	2000      	movs	r0, #0
}
 800347e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003480:	4620      	mov	r0, r4
 8003482:	f7ff ff1a 	bl	80032ba <I2C_IsAcknowledgeFailed>
 8003486:	b9a8      	cbnz	r0, 80034b4 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8003488:	1c6a      	adds	r2, r5, #1
 800348a:	d0f3      	beq.n	8003474 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800348c:	f7ff fd60 	bl	8002f50 <HAL_GetTick>
 8003490:	1b80      	subs	r0, r0, r6
 8003492:	42a8      	cmp	r0, r5
 8003494:	d801      	bhi.n	800349a <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d1ec      	bne.n	8003474 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800349a:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800349c:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800349e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80034a0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034a4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034a8:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80034aa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034ae:	f042 0220 	orr.w	r2, r2, #32
 80034b2:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80034b4:	2001      	movs	r0, #1
 80034b6:	e7e2      	b.n	800347e <I2C_WaitOnTXEFlagUntilTimeout+0x12>

080034b8 <I2C_RequestMemoryWrite>:
{
 80034b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80034bc:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034be:	6802      	ldr	r2, [r0, #0]
{
 80034c0:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034c2:	6813      	ldr	r3, [r2, #0]
{
 80034c4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ca:	6013      	str	r3, [r2, #0]
{
 80034cc:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034ce:	9600      	str	r6, [sp, #0]
 80034d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80034d2:	2200      	movs	r2, #0
 80034d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 80034d8:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034da:	f7ff ff96 	bl	800340a <I2C_WaitOnFlagUntilTimeout>
 80034de:	b118      	cbz	r0, 80034e8 <I2C_RequestMemoryWrite+0x30>
      return HAL_ERROR;
 80034e0:	2001      	movs	r0, #1
}
 80034e2:	b004      	add	sp, #16
 80034e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034e8:	6823      	ldr	r3, [r4, #0]
 80034ea:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 80034ee:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80034f2:	4633      	mov	r3, r6
 80034f4:	4916      	ldr	r1, [pc, #88]	; (8003550 <I2C_RequestMemoryWrite+0x98>)
 80034f6:	4620      	mov	r0, r4
 80034f8:	f7ff fef8 	bl	80032ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034fc:	2800      	cmp	r0, #0
 80034fe:	d1ef      	bne.n	80034e0 <I2C_RequestMemoryWrite+0x28>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003500:	6823      	ldr	r3, [r4, #0]
 8003502:	9003      	str	r0, [sp, #12]
 8003504:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003506:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003508:	9203      	str	r2, [sp, #12]
 800350a:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800350c:	4632      	mov	r2, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800350e:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003510:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003512:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003514:	f7ff ffaa 	bl	800346c <I2C_WaitOnTXEFlagUntilTimeout>
 8003518:	b140      	cbz	r0, 800352c <I2C_RequestMemoryWrite+0x74>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800351a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800351c:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800351e:	bf01      	itttt	eq
 8003520:	6822      	ldreq	r2, [r4, #0]
 8003522:	6813      	ldreq	r3, [r2, #0]
 8003524:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8003528:	6013      	streq	r3, [r2, #0]
 800352a:	e7d9      	b.n	80034e0 <I2C_RequestMemoryWrite+0x28>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800352c:	f1b8 0f01 	cmp.w	r8, #1
 8003530:	6823      	ldr	r3, [r4, #0]
 8003532:	d102      	bne.n	800353a <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003534:	b2ed      	uxtb	r5, r5
 8003536:	611d      	str	r5, [r3, #16]
 8003538:	e7d3      	b.n	80034e2 <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800353a:	0a2a      	lsrs	r2, r5, #8
 800353c:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800353e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003540:	4632      	mov	r2, r6
 8003542:	4620      	mov	r0, r4
 8003544:	f7ff ff92 	bl	800346c <I2C_WaitOnTXEFlagUntilTimeout>
 8003548:	2800      	cmp	r0, #0
 800354a:	d1e6      	bne.n	800351a <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800354c:	6823      	ldr	r3, [r4, #0]
 800354e:	e7f1      	b.n	8003534 <I2C_RequestMemoryWrite+0x7c>
 8003550:	00010002 	.word	0x00010002

08003554 <HAL_I2C_Init>:
{
 8003554:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8003556:	4604      	mov	r4, r0
 8003558:	b908      	cbnz	r0, 800355e <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800355a:	2001      	movs	r0, #1
}
 800355c:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800355e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003562:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003566:	b91b      	cbnz	r3, 8003570 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8003568:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800356c:	f7ff faf0 	bl	8002b50 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003570:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8003572:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003574:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003578:	6813      	ldr	r3, [r2, #0]
 800357a:	f023 0301 	bic.w	r3, r3, #1
 800357e:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003580:	f000 fe84 	bl	800428c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003584:	6863      	ldr	r3, [r4, #4]
 8003586:	4a41      	ldr	r2, [pc, #260]	; (800368c <HAL_I2C_Init+0x138>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d84d      	bhi.n	8003628 <HAL_I2C_Init+0xd4>
 800358c:	4a40      	ldr	r2, [pc, #256]	; (8003690 <HAL_I2C_Init+0x13c>)
 800358e:	4290      	cmp	r0, r2
 8003590:	d9e3      	bls.n	800355a <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8003592:	4940      	ldr	r1, [pc, #256]	; (8003694 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003594:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8003596:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800359a:	6855      	ldr	r5, [r2, #4]
 800359c:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80035a0:	430d      	orrs	r5, r1
 80035a2:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035a4:	6a15      	ldr	r5, [r2, #32]
 80035a6:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80035aa:	3101      	adds	r1, #1
 80035ac:	4329      	orrs	r1, r5
 80035ae:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035b0:	69d1      	ldr	r1, [r2, #28]
 80035b2:	4d36      	ldr	r5, [pc, #216]	; (800368c <HAL_I2C_Init+0x138>)
 80035b4:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80035b8:	42ab      	cmp	r3, r5
 80035ba:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80035be:	f100 30ff 	add.w	r0, r0, #4294967295
 80035c2:	d848      	bhi.n	8003656 <HAL_I2C_Init+0x102>
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	fbb0 f0f3 	udiv	r0, r0, r3
 80035ca:	1c43      	adds	r3, r0, #1
 80035cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035d0:	2b04      	cmp	r3, #4
 80035d2:	bf38      	it	cc
 80035d4:	2304      	movcc	r3, #4
 80035d6:	430b      	orrs	r3, r1
 80035d8:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035da:	6811      	ldr	r1, [r2, #0]
 80035dc:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80035e0:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80035e4:	4303      	orrs	r3, r0
 80035e6:	430b      	orrs	r3, r1
 80035e8:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035ea:	6891      	ldr	r1, [r2, #8]
 80035ec:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80035f0:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80035f4:	4303      	orrs	r3, r0
 80035f6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80035fa:	430b      	orrs	r3, r1
 80035fc:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035fe:	68d1      	ldr	r1, [r2, #12]
 8003600:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8003604:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003608:	4303      	orrs	r3, r0
 800360a:	430b      	orrs	r3, r1
 800360c:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800360e:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003610:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8003612:	f043 0301 	orr.w	r3, r3, #1
 8003616:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8003618:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800361a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800361c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003620:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003622:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8003626:	e799      	b.n	800355c <HAL_I2C_Init+0x8>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003628:	4a1b      	ldr	r2, [pc, #108]	; (8003698 <HAL_I2C_Init+0x144>)
 800362a:	4290      	cmp	r0, r2
 800362c:	d995      	bls.n	800355a <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 800362e:	4e19      	ldr	r6, [pc, #100]	; (8003694 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003630:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8003634:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003638:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800363a:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800363c:	6855      	ldr	r5, [r2, #4]
 800363e:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8003642:	4335      	orrs	r5, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003644:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003648:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800364a:	6a15      	ldr	r5, [r2, #32]
 800364c:	fbb1 f1f6 	udiv	r1, r1, r6
 8003650:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8003654:	e7a9      	b.n	80035aa <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003656:	68a5      	ldr	r5, [r4, #8]
 8003658:	b955      	cbnz	r5, 8003670 <HAL_I2C_Init+0x11c>
 800365a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800365e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003662:	1c43      	adds	r3, r0, #1
 8003664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003668:	b16b      	cbz	r3, 8003686 <HAL_I2C_Init+0x132>
 800366a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800366e:	e7b2      	b.n	80035d6 <HAL_I2C_Init+0x82>
 8003670:	2519      	movs	r5, #25
 8003672:	436b      	muls	r3, r5
 8003674:	fbb0 f0f3 	udiv	r0, r0, r3
 8003678:	1c43      	adds	r3, r0, #1
 800367a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800367e:	b113      	cbz	r3, 8003686 <HAL_I2C_Init+0x132>
 8003680:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003684:	e7a7      	b.n	80035d6 <HAL_I2C_Init+0x82>
 8003686:	2301      	movs	r3, #1
 8003688:	e7a5      	b.n	80035d6 <HAL_I2C_Init+0x82>
 800368a:	bf00      	nop
 800368c:	000186a0 	.word	0x000186a0
 8003690:	001e847f 	.word	0x001e847f
 8003694:	000f4240 	.word	0x000f4240
 8003698:	003d08ff 	.word	0x003d08ff

0800369c <HAL_I2C_Master_Transmit>:
{
 800369c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80036a0:	4604      	mov	r4, r0
 80036a2:	461f      	mov	r7, r3
 80036a4:	460d      	mov	r5, r1
 80036a6:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 80036a8:	f7ff fc52 	bl	8002f50 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80036ac:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 80036b0:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80036b2:	2b20      	cmp	r3, #32
 80036b4:	d004      	beq.n	80036c0 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 80036b6:	2502      	movs	r5, #2
}
 80036b8:	4628      	mov	r0, r5
 80036ba:	b004      	add	sp, #16
 80036bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036c0:	9000      	str	r0, [sp, #0]
 80036c2:	2319      	movs	r3, #25
 80036c4:	2201      	movs	r2, #1
 80036c6:	4958      	ldr	r1, [pc, #352]	; (8003828 <HAL_I2C_Master_Transmit+0x18c>)
 80036c8:	4620      	mov	r0, r4
 80036ca:	f7ff fe9e 	bl	800340a <I2C_WaitOnFlagUntilTimeout>
 80036ce:	2800      	cmp	r0, #0
 80036d0:	d1f1      	bne.n	80036b6 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 80036d2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d0ed      	beq.n	80036b6 <HAL_I2C_Master_Transmit+0x1a>
 80036da:	2301      	movs	r3, #1
 80036dc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036e0:	6823      	ldr	r3, [r4, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80036e6:	bf5e      	ittt	pl
 80036e8:	681a      	ldrpl	r2, [r3, #0]
 80036ea:	f042 0201 	orrpl.w	r2, r2, #1
 80036ee:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036f6:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80036f8:	2221      	movs	r2, #33	; 0x21
 80036fa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80036fe:	2210      	movs	r2, #16
 8003700:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003704:	2200      	movs	r2, #0
 8003706:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8003708:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800370a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 800370c:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8003710:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003712:	4a46      	ldr	r2, [pc, #280]	; (800382c <HAL_I2C_Master_Transmit+0x190>)
 8003714:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003716:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003718:	2a08      	cmp	r2, #8
 800371a:	d004      	beq.n	8003726 <HAL_I2C_Master_Transmit+0x8a>
 800371c:	2a01      	cmp	r2, #1
 800371e:	d002      	beq.n	8003726 <HAL_I2C_Master_Transmit+0x8a>
 8003720:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8003724:	d104      	bne.n	8003730 <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	e002      	b.n	8003736 <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003730:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003732:	2a12      	cmp	r2, #18
 8003734:	d0f7      	beq.n	8003726 <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003736:	9600      	str	r6, [sp, #0]
 8003738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800373a:	2200      	movs	r2, #0
 800373c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003740:	4620      	mov	r0, r4
 8003742:	f7ff fe62 	bl	800340a <I2C_WaitOnFlagUntilTimeout>
 8003746:	b108      	cbz	r0, 800374c <HAL_I2C_Master_Transmit+0xb0>
        return HAL_ERROR;
 8003748:	2501      	movs	r5, #1
 800374a:	e7b5      	b.n	80036b8 <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800374c:	6923      	ldr	r3, [r4, #16]
 800374e:	6822      	ldr	r2, [r4, #0]
 8003750:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003754:	d121      	bne.n	800379a <HAL_I2C_Master_Transmit+0xfe>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003756:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 800375a:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800375c:	4633      	mov	r3, r6
 800375e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003760:	4933      	ldr	r1, [pc, #204]	; (8003830 <HAL_I2C_Master_Transmit+0x194>)
 8003762:	4620      	mov	r0, r4
 8003764:	f7ff fdc2 	bl	80032ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003768:	4605      	mov	r5, r0
 800376a:	2800      	cmp	r0, #0
 800376c:	d1ec      	bne.n	8003748 <HAL_I2C_Master_Transmit+0xac>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800376e:	6823      	ldr	r3, [r4, #0]
 8003770:	9003      	str	r0, [sp, #12]
 8003772:	695a      	ldr	r2, [r3, #20]
 8003774:	9203      	str	r2, [sp, #12]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	9303      	str	r3, [sp, #12]
 800377a:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 800377c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800377e:	b9f3      	cbnz	r3, 80037be <HAL_I2C_Master_Transmit+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003780:	6821      	ldr	r1, [r4, #0]
 8003782:	680a      	ldr	r2, [r1, #0]
 8003784:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003788:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800378a:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 800378c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8003790:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003794:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8003798:	e78e      	b.n	80036b8 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800379a:	11eb      	asrs	r3, r5, #7
 800379c:	f003 0306 	and.w	r3, r3, #6
 80037a0:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80037a4:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80037a6:	4923      	ldr	r1, [pc, #140]	; (8003834 <HAL_I2C_Master_Transmit+0x198>)
 80037a8:	4633      	mov	r3, r6
 80037aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80037ac:	4620      	mov	r0, r4
 80037ae:	f7ff fd9d 	bl	80032ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037b2:	2800      	cmp	r0, #0
 80037b4:	d1c8      	bne.n	8003748 <HAL_I2C_Master_Transmit+0xac>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037b6:	6823      	ldr	r3, [r4, #0]
 80037b8:	b2ed      	uxtb	r5, r5
 80037ba:	611d      	str	r5, [r3, #16]
 80037bc:	e7ce      	b.n	800375c <HAL_I2C_Master_Transmit+0xc0>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037be:	4632      	mov	r2, r6
 80037c0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80037c2:	4620      	mov	r0, r4
 80037c4:	f7ff fe52 	bl	800346c <I2C_WaitOnTXEFlagUntilTimeout>
 80037c8:	b140      	cbz	r0, 80037dc <HAL_I2C_Master_Transmit+0x140>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80037cc:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ce:	bf01      	itttt	eq
 80037d0:	6822      	ldreq	r2, [r4, #0]
 80037d2:	6813      	ldreq	r3, [r2, #0]
 80037d4:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80037d8:	6013      	streq	r3, [r2, #0]
 80037da:	e7b5      	b.n	8003748 <HAL_I2C_Master_Transmit+0xac>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80037de:	6820      	ldr	r0, [r4, #0]
 80037e0:	461a      	mov	r2, r3
 80037e2:	f812 1b01 	ldrb.w	r1, [r2], #1
 80037e6:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 80037e8:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80037ea:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80037ec:	3a01      	subs	r2, #1
 80037ee:	b292      	uxth	r2, r2
 80037f0:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80037f2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037f4:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 80037f6:	1e51      	subs	r1, r2, #1
 80037f8:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037fa:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 80037fc:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037fe:	d50a      	bpl.n	8003816 <HAL_I2C_Master_Transmit+0x17a>
 8003800:	b149      	cbz	r1, 8003816 <HAL_I2C_Master_Transmit+0x17a>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003802:	7859      	ldrb	r1, [r3, #1]
        hi2c->pBuffPtr++;
 8003804:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003806:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8003808:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800380a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800380c:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 800380e:	3b01      	subs	r3, #1
 8003810:	b29b      	uxth	r3, r3
 8003812:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8003814:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003816:	4632      	mov	r2, r6
 8003818:	990a      	ldr	r1, [sp, #40]	; 0x28
 800381a:	4620      	mov	r0, r4
 800381c:	f7ff fda0 	bl	8003360 <I2C_WaitOnBTFFlagUntilTimeout>
 8003820:	2800      	cmp	r0, #0
 8003822:	d0ab      	beq.n	800377c <HAL_I2C_Master_Transmit+0xe0>
 8003824:	e7d1      	b.n	80037ca <HAL_I2C_Master_Transmit+0x12e>
 8003826:	bf00      	nop
 8003828:	00100002 	.word	0x00100002
 800382c:	ffff0000 	.word	0xffff0000
 8003830:	00010002 	.word	0x00010002
 8003834:	00010008 	.word	0x00010008

08003838 <HAL_I2C_Master_Receive>:
{
 8003838:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800383c:	4604      	mov	r4, r0
 800383e:	b089      	sub	sp, #36	; 0x24
 8003840:	4698      	mov	r8, r3
 8003842:	460f      	mov	r7, r1
 8003844:	4691      	mov	r9, r2
 8003846:	9e10      	ldr	r6, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8003848:	f7ff fb82 	bl	8002f50 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800384c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8003850:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003852:	2b20      	cmp	r3, #32
 8003854:	d004      	beq.n	8003860 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 8003856:	2702      	movs	r7, #2
}
 8003858:	4638      	mov	r0, r7
 800385a:	b009      	add	sp, #36	; 0x24
 800385c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003860:	9000      	str	r0, [sp, #0]
 8003862:	2319      	movs	r3, #25
 8003864:	2201      	movs	r2, #1
 8003866:	499d      	ldr	r1, [pc, #628]	; (8003adc <HAL_I2C_Master_Receive+0x2a4>)
 8003868:	4620      	mov	r0, r4
 800386a:	f7ff fdce 	bl	800340a <I2C_WaitOnFlagUntilTimeout>
 800386e:	2800      	cmp	r0, #0
 8003870:	d1f1      	bne.n	8003856 <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 8003872:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003876:	2b01      	cmp	r3, #1
 8003878:	d0ed      	beq.n	8003856 <HAL_I2C_Master_Receive+0x1e>
 800387a:	2301      	movs	r3, #1
 800387c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003880:	6823      	ldr	r3, [r4, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8003886:	bf5e      	ittt	pl
 8003888:	681a      	ldrpl	r2, [r3, #0]
 800388a:	f042 0201 	orrpl.w	r2, r2, #1
 800388e:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003896:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003898:	2222      	movs	r2, #34	; 0x22
 800389a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800389e:	2210      	movs	r2, #16
 80038a0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80038a4:	2200      	movs	r2, #0
 80038a6:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80038a8:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038ac:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80038ae:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80038b2:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038b4:	4a8a      	ldr	r2, [pc, #552]	; (8003ae0 <HAL_I2C_Master_Receive+0x2a8>)
 80038b6:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80038b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ba:	6819      	ldr	r1, [r3, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80038bc:	2a08      	cmp	r2, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038be:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80038c2:	6019      	str	r1, [r3, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80038c4:	d004      	beq.n	80038d0 <HAL_I2C_Master_Receive+0x98>
 80038c6:	2a01      	cmp	r2, #1
 80038c8:	d002      	beq.n	80038d0 <HAL_I2C_Master_Receive+0x98>
 80038ca:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80038ce:	d104      	bne.n	80038da <HAL_I2C_Master_Receive+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	e002      	b.n	80038e0 <HAL_I2C_Master_Receive+0xa8>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80038da:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80038dc:	2a11      	cmp	r2, #17
 80038de:	d0f7      	beq.n	80038d0 <HAL_I2C_Master_Receive+0x98>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038e0:	9500      	str	r5, [sp, #0]
 80038e2:	4633      	mov	r3, r6
 80038e4:	2200      	movs	r2, #0
 80038e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038ea:	4620      	mov	r0, r4
 80038ec:	f7ff fd8d 	bl	800340a <I2C_WaitOnFlagUntilTimeout>
 80038f0:	b108      	cbz	r0, 80038f6 <HAL_I2C_Master_Receive+0xbe>
      return HAL_ERROR;
 80038f2:	2701      	movs	r7, #1
 80038f4:	e7b0      	b.n	8003858 <HAL_I2C_Master_Receive+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038f6:	6922      	ldr	r2, [r4, #16]
 80038f8:	6823      	ldr	r3, [r4, #0]
 80038fa:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80038fe:	d123      	bne.n	8003948 <HAL_I2C_Master_Receive+0x110>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003900:	f047 0701 	orr.w	r7, r7, #1
 8003904:	b2ff      	uxtb	r7, r7
 8003906:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003908:	462b      	mov	r3, r5
 800390a:	4632      	mov	r2, r6
 800390c:	4975      	ldr	r1, [pc, #468]	; (8003ae4 <HAL_I2C_Master_Receive+0x2ac>)
 800390e:	4620      	mov	r0, r4
 8003910:	f7ff fcec 	bl	80032ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003914:	4607      	mov	r7, r0
 8003916:	2800      	cmp	r0, #0
 8003918:	d1eb      	bne.n	80038f2 <HAL_I2C_Master_Receive+0xba>
    if (hi2c->XferSize == 0U)
 800391a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800391c:	6823      	ldr	r3, [r4, #0]
 800391e:	2a00      	cmp	r2, #0
 8003920:	d146      	bne.n	80039b0 <HAL_I2C_Master_Receive+0x178>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003922:	9003      	str	r0, [sp, #12]
 8003924:	695a      	ldr	r2, [r3, #20]
 8003926:	9203      	str	r2, [sp, #12]
 8003928:	699a      	ldr	r2, [r3, #24]
 800392a:	9203      	str	r2, [sp, #12]
 800392c:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003934:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003936:	2320      	movs	r3, #32
 8003938:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800393c:	2300      	movs	r3, #0
 800393e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8003942:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8003946:	e787      	b.n	8003858 <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003948:	ea4f 18e7 	mov.w	r8, r7, asr #7
 800394c:	f008 0806 	and.w	r8, r8, #6
 8003950:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8003954:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003956:	4964      	ldr	r1, [pc, #400]	; (8003ae8 <HAL_I2C_Master_Receive+0x2b0>)
 8003958:	462b      	mov	r3, r5
 800395a:	4632      	mov	r2, r6
 800395c:	4620      	mov	r0, r4
 800395e:	f7ff fcc5 	bl	80032ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003962:	2800      	cmp	r0, #0
 8003964:	d1c5      	bne.n	80038f2 <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003966:	6823      	ldr	r3, [r4, #0]
 8003968:	b2ff      	uxtb	r7, r7
 800396a:	611f      	str	r7, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800396c:	4632      	mov	r2, r6
 800396e:	462b      	mov	r3, r5
 8003970:	495c      	ldr	r1, [pc, #368]	; (8003ae4 <HAL_I2C_Master_Receive+0x2ac>)
 8003972:	4620      	mov	r0, r4
 8003974:	f7ff fcba 	bl	80032ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003978:	4602      	mov	r2, r0
 800397a:	2800      	cmp	r0, #0
 800397c:	d1b9      	bne.n	80038f2 <HAL_I2C_Master_Receive+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800397e:	6823      	ldr	r3, [r4, #0]
 8003980:	9007      	str	r0, [sp, #28]
 8003982:	6959      	ldr	r1, [r3, #20]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003984:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003986:	9107      	str	r1, [sp, #28]
 8003988:	6999      	ldr	r1, [r3, #24]
 800398a:	9107      	str	r1, [sp, #28]
 800398c:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800398e:	6819      	ldr	r1, [r3, #0]
 8003990:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003994:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003996:	9500      	str	r5, [sp, #0]
 8003998:	4633      	mov	r3, r6
 800399a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800399e:	f7ff fd34 	bl	800340a <I2C_WaitOnFlagUntilTimeout>
 80039a2:	2800      	cmp	r0, #0
 80039a4:	d1a5      	bne.n	80038f2 <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80039a6:	6822      	ldr	r2, [r4, #0]
 80039a8:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 80039ac:	6113      	str	r3, [r2, #16]
 80039ae:	e7ab      	b.n	8003908 <HAL_I2C_Master_Receive+0xd0>
    else if (hi2c->XferSize == 1U)
 80039b0:	2a01      	cmp	r2, #1
 80039b2:	d131      	bne.n	8003a18 <HAL_I2C_Master_Receive+0x1e0>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ba:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80039bc:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039be:	6823      	ldr	r3, [r4, #0]
 80039c0:	9004      	str	r0, [sp, #16]
 80039c2:	695a      	ldr	r2, [r3, #20]
 80039c4:	9204      	str	r2, [sp, #16]
 80039c6:	699a      	ldr	r2, [r3, #24]
 80039c8:	9204      	str	r2, [sp, #16]
 80039ca:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80039d4:	b662      	cpsie	i
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039d6:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8003aec <HAL_I2C_Master_Receive+0x2b4>
    while (hi2c->XferSize > 0U)
 80039da:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0aa      	beq.n	8003936 <HAL_I2C_Master_Receive+0xfe>
      if (hi2c->XferSize <= 3U)
 80039e0:	2b03      	cmp	r3, #3
 80039e2:	f200 8085 	bhi.w	8003af0 <HAL_I2C_Master_Receive+0x2b8>
        if (hi2c->XferSize == 1U)
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d132      	bne.n	8003a50 <HAL_I2C_Master_Receive+0x218>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039ea:	462a      	mov	r2, r5
 80039ec:	4631      	mov	r1, r6
 80039ee:	4620      	mov	r0, r4
 80039f0:	f7ff fcdc 	bl	80033ac <I2C_WaitOnRXNEFlagUntilTimeout>
 80039f4:	2800      	cmp	r0, #0
 80039f6:	f47f af7c 	bne.w	80038f2 <HAL_I2C_Master_Receive+0xba>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039fa:	6823      	ldr	r3, [r4, #0]
 80039fc:	691a      	ldr	r2, [r3, #16]
 80039fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a00:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003a02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a04:	3301      	adds	r3, #1
 8003a06:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003a08:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003a0e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003a16:	e7e0      	b.n	80039da <HAL_I2C_Master_Receive+0x1a2>
    else if (hi2c->XferSize == 2U)
 8003a18:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a1a:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 8003a1c:	d10e      	bne.n	8003a3c <HAL_I2C_Master_Receive+0x204>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a22:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a24:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a26:	6823      	ldr	r3, [r4, #0]
 8003a28:	9005      	str	r0, [sp, #20]
 8003a2a:	695a      	ldr	r2, [r3, #20]
 8003a2c:	9205      	str	r2, [sp, #20]
 8003a2e:	699a      	ldr	r2, [r3, #24]
 8003a30:	9205      	str	r2, [sp, #20]
 8003a32:	9a05      	ldr	r2, [sp, #20]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a3a:	e7ca      	b.n	80039d2 <HAL_I2C_Master_Receive+0x19a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a40:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a42:	9006      	str	r0, [sp, #24]
 8003a44:	695a      	ldr	r2, [r3, #20]
 8003a46:	9206      	str	r2, [sp, #24]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	9306      	str	r3, [sp, #24]
 8003a4c:	9b06      	ldr	r3, [sp, #24]
 8003a4e:	e7c2      	b.n	80039d6 <HAL_I2C_Master_Receive+0x19e>
        else if (hi2c->XferSize == 2U)
 8003a50:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a52:	9500      	str	r5, [sp, #0]
 8003a54:	4633      	mov	r3, r6
 8003a56:	f04f 0200 	mov.w	r2, #0
 8003a5a:	4641      	mov	r1, r8
 8003a5c:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8003a5e:	d119      	bne.n	8003a94 <HAL_I2C_Master_Receive+0x25c>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a60:	f7ff fcd3 	bl	800340a <I2C_WaitOnFlagUntilTimeout>
 8003a64:	2800      	cmp	r0, #0
 8003a66:	f47f af44 	bne.w	80038f2 <HAL_I2C_Master_Receive+0xba>
 8003a6a:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a6c:	6823      	ldr	r3, [r4, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a74:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a76:	691a      	ldr	r2, [r3, #16]
 8003a78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a7a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003a7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a7e:	3301      	adds	r3, #1
 8003a80:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003a82:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003a84:	3b01      	subs	r3, #1
 8003a86:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003a88:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003a90:	b662      	cpsie	i
 8003a92:	e7b2      	b.n	80039fa <HAL_I2C_Master_Receive+0x1c2>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a94:	f7ff fcb9 	bl	800340a <I2C_WaitOnFlagUntilTimeout>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	2800      	cmp	r0, #0
 8003a9c:	f47f af29 	bne.w	80038f2 <HAL_I2C_Master_Receive+0xba>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aa0:	6821      	ldr	r1, [r4, #0]
 8003aa2:	680b      	ldr	r3, [r1, #0]
 8003aa4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003aa8:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003aaa:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aac:	6823      	ldr	r3, [r4, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003aae:	4620      	mov	r0, r4
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ab0:	6919      	ldr	r1, [r3, #16]
 8003ab2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ab4:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 8003ab6:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ab8:	9500      	str	r5, [sp, #0]
          hi2c->pBuffPtr++;
 8003aba:	3301      	adds	r3, #1
 8003abc:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003abe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ac0:	4641      	mov	r1, r8
          hi2c->XferSize--;
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003ac6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ace:	4633      	mov	r3, r6
 8003ad0:	f7ff fc9b 	bl	800340a <I2C_WaitOnFlagUntilTimeout>
 8003ad4:	2800      	cmp	r0, #0
 8003ad6:	d0c9      	beq.n	8003a6c <HAL_I2C_Master_Receive+0x234>
 8003ad8:	e70b      	b.n	80038f2 <HAL_I2C_Master_Receive+0xba>
 8003ada:	bf00      	nop
 8003adc:	00100002 	.word	0x00100002
 8003ae0:	ffff0000 	.word	0xffff0000
 8003ae4:	00010002 	.word	0x00010002
 8003ae8:	00010008 	.word	0x00010008
 8003aec:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003af0:	462a      	mov	r2, r5
 8003af2:	4631      	mov	r1, r6
 8003af4:	4620      	mov	r0, r4
 8003af6:	f7ff fc59 	bl	80033ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8003afa:	2800      	cmp	r0, #0
 8003afc:	f47f aef9 	bne.w	80038f2 <HAL_I2C_Master_Receive+0xba>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b00:	6823      	ldr	r3, [r4, #0]
 8003b02:	691a      	ldr	r2, [r3, #16]
 8003b04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b06:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003b08:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003b0a:	1c53      	adds	r3, r2, #1
 8003b0c:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8003b0e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003b10:	3b01      	subs	r3, #1
 8003b12:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8003b14:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003b16:	3b01      	subs	r3, #1
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b1c:	6823      	ldr	r3, [r4, #0]
 8003b1e:	6959      	ldr	r1, [r3, #20]
 8003b20:	0749      	lsls	r1, r1, #29
 8003b22:	f57f af5a 	bpl.w	80039da <HAL_I2C_Master_Receive+0x1a2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	7053      	strb	r3, [r2, #1]
 8003b2a:	e76a      	b.n	8003a02 <HAL_I2C_Master_Receive+0x1ca>

08003b2c <HAL_I2C_Mem_Write>:
{
 8003b2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003b30:	4604      	mov	r4, r0
 8003b32:	4699      	mov	r9, r3
 8003b34:	460f      	mov	r7, r1
 8003b36:	4690      	mov	r8, r2
 8003b38:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8003b3a:	f7ff fa09 	bl	8002f50 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b3e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8003b42:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b44:	2b20      	cmp	r3, #32
 8003b46:	d003      	beq.n	8003b50 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8003b48:	2002      	movs	r0, #2
}
 8003b4a:	b003      	add	sp, #12
 8003b4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b50:	9000      	str	r0, [sp, #0]
 8003b52:	2319      	movs	r3, #25
 8003b54:	2201      	movs	r2, #1
 8003b56:	493b      	ldr	r1, [pc, #236]	; (8003c44 <HAL_I2C_Mem_Write+0x118>)
 8003b58:	4620      	mov	r0, r4
 8003b5a:	f7ff fc56 	bl	800340a <I2C_WaitOnFlagUntilTimeout>
 8003b5e:	2800      	cmp	r0, #0
 8003b60:	d1f2      	bne.n	8003b48 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8003b62:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d0ee      	beq.n	8003b48 <HAL_I2C_Mem_Write+0x1c>
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b70:	6823      	ldr	r3, [r4, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b72:	4620      	mov	r0, r4
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	07d1      	lsls	r1, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8003b78:	bf58      	it	pl
 8003b7a:	681a      	ldrpl	r2, [r3, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b7c:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 8003b7e:	bf5c      	itt	pl
 8003b80:	f042 0201 	orrpl.w	r2, r2, #1
 8003b84:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b8c:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b8e:	2321      	movs	r3, #33	; 0x21
 8003b90:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b94:	2340      	movs	r3, #64	; 0x40
 8003b96:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003b9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ba0:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->pBuffPtr    = pData;
 8003ba4:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ba6:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003baa:	4642      	mov	r2, r8
    hi2c->XferCount   = Size;
 8003bac:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003bb0:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bb2:	4b25      	ldr	r3, [pc, #148]	; (8003c48 <HAL_I2C_Mem_Write+0x11c>)
 8003bb4:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bb6:	464b      	mov	r3, r9
 8003bb8:	f7ff fc7e 	bl	80034b8 <I2C_RequestMemoryWrite>
 8003bbc:	2800      	cmp	r0, #0
 8003bbe:	d02a      	beq.n	8003c16 <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 8003bc0:	2001      	movs	r0, #1
 8003bc2:	e7c2      	b.n	8003b4a <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bc4:	f7ff fc52 	bl	800346c <I2C_WaitOnTXEFlagUntilTimeout>
 8003bc8:	b140      	cbz	r0, 8003bdc <HAL_I2C_Mem_Write+0xb0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003bcc:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bce:	bf01      	itttt	eq
 8003bd0:	6822      	ldreq	r2, [r4, #0]
 8003bd2:	6813      	ldreq	r3, [r2, #0]
 8003bd4:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8003bd8:	6013      	streq	r3, [r2, #0]
 8003bda:	e7f1      	b.n	8003bc0 <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003bde:	6827      	ldr	r7, [r4, #0]
 8003be0:	461a      	mov	r2, r3
 8003be2:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003be6:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8003be8:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003bea:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003bec:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003bee:	3a01      	subs	r2, #1
 8003bf0:	b292      	uxth	r2, r2
 8003bf2:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003bf4:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8003bf6:	1e48      	subs	r0, r1, #1
 8003bf8:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003bfa:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8003bfc:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003bfe:	d50a      	bpl.n	8003c16 <HAL_I2C_Mem_Write+0xea>
 8003c00:	b148      	cbz	r0, 8003c16 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c02:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 8003c04:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c06:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8003c08:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003c0a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8003c0c:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8003c12:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8003c14:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c16:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c18:	462a      	mov	r2, r5
 8003c1a:	4631      	mov	r1, r6
 8003c1c:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1d0      	bne.n	8003bc4 <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c22:	f7ff fb9d 	bl	8003360 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c26:	2800      	cmp	r0, #0
 8003c28:	d1cf      	bne.n	8003bca <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c2a:	6822      	ldr	r2, [r4, #0]
 8003c2c:	6813      	ldr	r3, [r2, #0]
 8003c2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c32:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003c34:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8003c36:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8003c3a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c3e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8003c42:	e782      	b.n	8003b4a <HAL_I2C_Mem_Write+0x1e>
 8003c44:	00100002 	.word	0x00100002
 8003c48:	ffff0000 	.word	0xffff0000

08003c4c <HAL_I2C_IsDeviceReady>:
{
 8003c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c50:	4604      	mov	r4, r0
 8003c52:	b085      	sub	sp, #20
 8003c54:	4698      	mov	r8, r3
 8003c56:	4689      	mov	r9, r1
 8003c58:	4692      	mov	sl, r2
  uint32_t tickstart = HAL_GetTick();
 8003c5a:	f7ff f979 	bl	8002f50 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c5e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8003c62:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c64:	2b20      	cmp	r3, #32
 8003c66:	d003      	beq.n	8003c70 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8003c68:	2002      	movs	r0, #2
}
 8003c6a:	b005      	add	sp, #20
 8003c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c70:	9000      	str	r0, [sp, #0]
 8003c72:	2319      	movs	r3, #25
 8003c74:	2201      	movs	r2, #1
 8003c76:	4949      	ldr	r1, [pc, #292]	; (8003d9c <HAL_I2C_IsDeviceReady+0x150>)
 8003c78:	4620      	mov	r0, r4
 8003c7a:	f7ff fbc6 	bl	800340a <I2C_WaitOnFlagUntilTimeout>
 8003c7e:	2800      	cmp	r0, #0
 8003c80:	d1f2      	bne.n	8003c68 <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 8003c82:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d0ee      	beq.n	8003c68 <HAL_I2C_IsDeviceReady+0x1c>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c90:	6823      	ldr	r3, [r4, #0]
  uint32_t I2C_Trials = 1U;
 8003c92:	2701      	movs	r7, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c94:	681a      	ldr	r2, [r3, #0]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c96:	f8df b104 	ldr.w	fp, [pc, #260]	; 8003d9c <HAL_I2C_IsDeviceReady+0x150>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c9a:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8003c9c:	bf58      	it	pl
 8003c9e:	681a      	ldrpl	r2, [r3, #0]
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ca0:	f009 09fe 	and.w	r9, r9, #254	; 0xfe
      __HAL_I2C_ENABLE(hi2c);
 8003ca4:	bf5c      	itt	pl
 8003ca6:	f042 0201 	orrpl.w	r2, r2, #1
 8003caa:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cb2:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cb4:	2324      	movs	r3, #36	; 0x24
 8003cb6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cbe:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8003cc2:	62e3      	str	r3, [r4, #44]	; 0x2c
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cc4:	6822      	ldr	r2, [r4, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003cc6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cca:	6813      	ldr	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003ccc:	4620      	mov	r0, r4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd2:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003cd4:	9500      	str	r5, [sp, #0]
 8003cd6:	4643      	mov	r3, r8
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f7ff fb96 	bl	800340a <I2C_WaitOnFlagUntilTimeout>
 8003cde:	b108      	cbz	r0, 8003ce4 <HAL_I2C_IsDeviceReady+0x98>
    return HAL_ERROR;
 8003ce0:	2001      	movs	r0, #1
 8003ce2:	e7c2      	b.n	8003c6a <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ce4:	6823      	ldr	r3, [r4, #0]
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003ce6:	26a0      	movs	r6, #160	; 0xa0
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ce8:	f8c3 9010 	str.w	r9, [r3, #16]
      tickstart = HAL_GetTick();
 8003cec:	f7ff f930 	bl	8002f50 <HAL_GetTick>
 8003cf0:	4605      	mov	r5, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003cf2:	6823      	ldr	r3, [r4, #0]
 8003cf4:	695a      	ldr	r2, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003cf6:	695b      	ldr	r3, [r3, #20]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003cf8:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003cfc:	f3c3 2380 	ubfx	r3, r3, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d00:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8003d04:	29a0      	cmp	r1, #160	; 0xa0
 8003d06:	d001      	beq.n	8003d0c <HAL_I2C_IsDeviceReady+0xc0>
 8003d08:	b902      	cbnz	r2, 8003d0c <HAL_I2C_IsDeviceReady+0xc0>
 8003d0a:	b303      	cbz	r3, 8003d4e <HAL_I2C_IsDeviceReady+0x102>
      hi2c->State = HAL_I2C_STATE_READY;
 8003d0c:	2620      	movs	r6, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003d0e:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8003d10:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003d14:	695a      	ldr	r2, [r3, #20]
 8003d16:	f012 0f02 	tst.w	r2, #2
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d20:	601a      	str	r2, [r3, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003d22:	d026      	beq.n	8003d72 <HAL_I2C_IsDeviceReady+0x126>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d24:	2200      	movs	r2, #0
 8003d26:	9203      	str	r2, [sp, #12]
 8003d28:	695a      	ldr	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d2a:	491c      	ldr	r1, [pc, #112]	; (8003d9c <HAL_I2C_IsDeviceReady+0x150>)
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d2c:	9203      	str	r2, [sp, #12]
 8003d2e:	699b      	ldr	r3, [r3, #24]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d30:	2201      	movs	r2, #1
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d32:	9303      	str	r3, [sp, #12]
 8003d34:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d36:	9500      	str	r5, [sp, #0]
 8003d38:	2319      	movs	r3, #25
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	f7ff fb65 	bl	800340a <I2C_WaitOnFlagUntilTimeout>
 8003d40:	2800      	cmp	r0, #0
 8003d42:	d1cd      	bne.n	8003ce0 <HAL_I2C_IsDeviceReady+0x94>
        hi2c->State = HAL_I2C_STATE_READY;
 8003d44:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8003d48:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 8003d4c:	e78d      	b.n	8003c6a <HAL_I2C_IsDeviceReady+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d4e:	f7ff f8ff 	bl	8002f50 <HAL_GetTick>
 8003d52:	1b40      	subs	r0, r0, r5
 8003d54:	4540      	cmp	r0, r8
 8003d56:	d802      	bhi.n	8003d5e <HAL_I2C_IsDeviceReady+0x112>
 8003d58:	f1b8 0f00 	cmp.w	r8, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_I2C_IsDeviceReady+0x116>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003d5e:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d62:	6823      	ldr	r3, [r4, #0]
 8003d64:	695a      	ldr	r2, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d66:	695b      	ldr	r3, [r3, #20]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d68:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d6c:	f3c3 2380 	ubfx	r3, r3, #10, #1
 8003d70:	e7c6      	b.n	8003d00 <HAL_I2C_IsDeviceReady+0xb4>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d76:	4659      	mov	r1, fp
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d78:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d7a:	4620      	mov	r0, r4
 8003d7c:	9500      	str	r5, [sp, #0]
 8003d7e:	2319      	movs	r3, #25
 8003d80:	2201      	movs	r2, #1
 8003d82:	f7ff fb42 	bl	800340a <I2C_WaitOnFlagUntilTimeout>
 8003d86:	2800      	cmp	r0, #0
 8003d88:	d1aa      	bne.n	8003ce0 <HAL_I2C_IsDeviceReady+0x94>
      I2C_Trials++;
 8003d8a:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 8003d8c:	4557      	cmp	r7, sl
 8003d8e:	d399      	bcc.n	8003cc4 <HAL_I2C_IsDeviceReady+0x78>
    hi2c->State = HAL_I2C_STATE_READY;
 8003d90:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8003d94:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8003d98:	e7a2      	b.n	8003ce0 <HAL_I2C_IsDeviceReady+0x94>
 8003d9a:	bf00      	nop
 8003d9c:	00100002 	.word	0x00100002

08003da0 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8003da0:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8003da2:	4770      	bx	lr

08003da4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003da4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003da8:	4605      	mov	r5, r0
 8003daa:	b908      	cbnz	r0, 8003db0 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8003dac:	2001      	movs	r0, #1
 8003dae:	e03c      	b.n	8003e2a <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003db0:	6803      	ldr	r3, [r0, #0]
 8003db2:	07db      	lsls	r3, r3, #31
 8003db4:	d410      	bmi.n	8003dd8 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003db6:	682b      	ldr	r3, [r5, #0]
 8003db8:	079f      	lsls	r7, r3, #30
 8003dba:	d45d      	bmi.n	8003e78 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dbc:	682b      	ldr	r3, [r5, #0]
 8003dbe:	0719      	lsls	r1, r3, #28
 8003dc0:	f100 8094 	bmi.w	8003eec <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dc4:	682b      	ldr	r3, [r5, #0]
 8003dc6:	075a      	lsls	r2, r3, #29
 8003dc8:	f100 80be 	bmi.w	8003f48 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dcc:	69e8      	ldr	r0, [r5, #28]
 8003dce:	2800      	cmp	r0, #0
 8003dd0:	f040 812c 	bne.w	800402c <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8003dd4:	2000      	movs	r0, #0
 8003dd6:	e028      	b.n	8003e2a <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dd8:	4c8f      	ldr	r4, [pc, #572]	; (8004018 <HAL_RCC_OscConfig+0x274>)
 8003dda:	6863      	ldr	r3, [r4, #4]
 8003ddc:	f003 030c 	and.w	r3, r3, #12
 8003de0:	2b04      	cmp	r3, #4
 8003de2:	d007      	beq.n	8003df4 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003de4:	6863      	ldr	r3, [r4, #4]
 8003de6:	f003 030c 	and.w	r3, r3, #12
 8003dea:	2b08      	cmp	r3, #8
 8003dec:	d109      	bne.n	8003e02 <HAL_RCC_OscConfig+0x5e>
 8003dee:	6863      	ldr	r3, [r4, #4]
 8003df0:	03de      	lsls	r6, r3, #15
 8003df2:	d506      	bpl.n	8003e02 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df4:	6823      	ldr	r3, [r4, #0]
 8003df6:	039c      	lsls	r4, r3, #14
 8003df8:	d5dd      	bpl.n	8003db6 <HAL_RCC_OscConfig+0x12>
 8003dfa:	686b      	ldr	r3, [r5, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1da      	bne.n	8003db6 <HAL_RCC_OscConfig+0x12>
 8003e00:	e7d4      	b.n	8003dac <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e02:	686b      	ldr	r3, [r5, #4]
 8003e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e08:	d112      	bne.n	8003e30 <HAL_RCC_OscConfig+0x8c>
 8003e0a:	6823      	ldr	r3, [r4, #0]
 8003e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e10:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003e12:	f7ff f89d 	bl	8002f50 <HAL_GetTick>
 8003e16:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e18:	6823      	ldr	r3, [r4, #0]
 8003e1a:	0398      	lsls	r0, r3, #14
 8003e1c:	d4cb      	bmi.n	8003db6 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e1e:	f7ff f897 	bl	8002f50 <HAL_GetTick>
 8003e22:	1b80      	subs	r0, r0, r6
 8003e24:	2864      	cmp	r0, #100	; 0x64
 8003e26:	d9f7      	bls.n	8003e18 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8003e28:	2003      	movs	r0, #3
}
 8003e2a:	b002      	add	sp, #8
 8003e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e30:	b99b      	cbnz	r3, 8003e5a <HAL_RCC_OscConfig+0xb6>
 8003e32:	6823      	ldr	r3, [r4, #0]
 8003e34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e38:	6023      	str	r3, [r4, #0]
 8003e3a:	6823      	ldr	r3, [r4, #0]
 8003e3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e40:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003e42:	f7ff f885 	bl	8002f50 <HAL_GetTick>
 8003e46:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e48:	6823      	ldr	r3, [r4, #0]
 8003e4a:	0399      	lsls	r1, r3, #14
 8003e4c:	d5b3      	bpl.n	8003db6 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e4e:	f7ff f87f 	bl	8002f50 <HAL_GetTick>
 8003e52:	1b80      	subs	r0, r0, r6
 8003e54:	2864      	cmp	r0, #100	; 0x64
 8003e56:	d9f7      	bls.n	8003e48 <HAL_RCC_OscConfig+0xa4>
 8003e58:	e7e6      	b.n	8003e28 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e5e:	6823      	ldr	r3, [r4, #0]
 8003e60:	d103      	bne.n	8003e6a <HAL_RCC_OscConfig+0xc6>
 8003e62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e66:	6023      	str	r3, [r4, #0]
 8003e68:	e7cf      	b.n	8003e0a <HAL_RCC_OscConfig+0x66>
 8003e6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e6e:	6023      	str	r3, [r4, #0]
 8003e70:	6823      	ldr	r3, [r4, #0]
 8003e72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e76:	e7cb      	b.n	8003e10 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e78:	4c67      	ldr	r4, [pc, #412]	; (8004018 <HAL_RCC_OscConfig+0x274>)
 8003e7a:	6863      	ldr	r3, [r4, #4]
 8003e7c:	f013 0f0c 	tst.w	r3, #12
 8003e80:	d007      	beq.n	8003e92 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e82:	6863      	ldr	r3, [r4, #4]
 8003e84:	f003 030c 	and.w	r3, r3, #12
 8003e88:	2b08      	cmp	r3, #8
 8003e8a:	d110      	bne.n	8003eae <HAL_RCC_OscConfig+0x10a>
 8003e8c:	6863      	ldr	r3, [r4, #4]
 8003e8e:	03da      	lsls	r2, r3, #15
 8003e90:	d40d      	bmi.n	8003eae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e92:	6823      	ldr	r3, [r4, #0]
 8003e94:	079b      	lsls	r3, r3, #30
 8003e96:	d502      	bpl.n	8003e9e <HAL_RCC_OscConfig+0xfa>
 8003e98:	692b      	ldr	r3, [r5, #16]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d186      	bne.n	8003dac <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e9e:	6823      	ldr	r3, [r4, #0]
 8003ea0:	696a      	ldr	r2, [r5, #20]
 8003ea2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003ea6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003eaa:	6023      	str	r3, [r4, #0]
 8003eac:	e786      	b.n	8003dbc <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003eae:	692a      	ldr	r2, [r5, #16]
 8003eb0:	4b5a      	ldr	r3, [pc, #360]	; (800401c <HAL_RCC_OscConfig+0x278>)
 8003eb2:	b16a      	cbz	r2, 8003ed0 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003eb8:	f7ff f84a 	bl	8002f50 <HAL_GetTick>
 8003ebc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ebe:	6823      	ldr	r3, [r4, #0]
 8003ec0:	079f      	lsls	r7, r3, #30
 8003ec2:	d4ec      	bmi.n	8003e9e <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ec4:	f7ff f844 	bl	8002f50 <HAL_GetTick>
 8003ec8:	1b80      	subs	r0, r0, r6
 8003eca:	2802      	cmp	r0, #2
 8003ecc:	d9f7      	bls.n	8003ebe <HAL_RCC_OscConfig+0x11a>
 8003ece:	e7ab      	b.n	8003e28 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8003ed0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003ed2:	f7ff f83d 	bl	8002f50 <HAL_GetTick>
 8003ed6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ed8:	6823      	ldr	r3, [r4, #0]
 8003eda:	0798      	lsls	r0, r3, #30
 8003edc:	f57f af6e 	bpl.w	8003dbc <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ee0:	f7ff f836 	bl	8002f50 <HAL_GetTick>
 8003ee4:	1b80      	subs	r0, r0, r6
 8003ee6:	2802      	cmp	r0, #2
 8003ee8:	d9f6      	bls.n	8003ed8 <HAL_RCC_OscConfig+0x134>
 8003eea:	e79d      	b.n	8003e28 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003eec:	69aa      	ldr	r2, [r5, #24]
 8003eee:	4c4a      	ldr	r4, [pc, #296]	; (8004018 <HAL_RCC_OscConfig+0x274>)
 8003ef0:	4b4b      	ldr	r3, [pc, #300]	; (8004020 <HAL_RCC_OscConfig+0x27c>)
 8003ef2:	b1da      	cbz	r2, 8003f2c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003ef8:	f7ff f82a 	bl	8002f50 <HAL_GetTick>
 8003efc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003efe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f00:	079b      	lsls	r3, r3, #30
 8003f02:	d50d      	bpl.n	8003f20 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f04:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003f08:	4b46      	ldr	r3, [pc, #280]	; (8004024 <HAL_RCC_OscConfig+0x280>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f10:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8003f12:	bf00      	nop
  }
  while (Delay --);
 8003f14:	9b01      	ldr	r3, [sp, #4]
 8003f16:	1e5a      	subs	r2, r3, #1
 8003f18:	9201      	str	r2, [sp, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1f9      	bne.n	8003f12 <HAL_RCC_OscConfig+0x16e>
 8003f1e:	e751      	b.n	8003dc4 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f20:	f7ff f816 	bl	8002f50 <HAL_GetTick>
 8003f24:	1b80      	subs	r0, r0, r6
 8003f26:	2802      	cmp	r0, #2
 8003f28:	d9e9      	bls.n	8003efe <HAL_RCC_OscConfig+0x15a>
 8003f2a:	e77d      	b.n	8003e28 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8003f2c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003f2e:	f7ff f80f 	bl	8002f50 <HAL_GetTick>
 8003f32:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f36:	079f      	lsls	r7, r3, #30
 8003f38:	f57f af44 	bpl.w	8003dc4 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f3c:	f7ff f808 	bl	8002f50 <HAL_GetTick>
 8003f40:	1b80      	subs	r0, r0, r6
 8003f42:	2802      	cmp	r0, #2
 8003f44:	d9f6      	bls.n	8003f34 <HAL_RCC_OscConfig+0x190>
 8003f46:	e76f      	b.n	8003e28 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f48:	4c33      	ldr	r4, [pc, #204]	; (8004018 <HAL_RCC_OscConfig+0x274>)
 8003f4a:	69e3      	ldr	r3, [r4, #28]
 8003f4c:	00d8      	lsls	r0, r3, #3
 8003f4e:	d424      	bmi.n	8003f9a <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8003f50:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f52:	69e3      	ldr	r3, [r4, #28]
 8003f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f58:	61e3      	str	r3, [r4, #28]
 8003f5a:	69e3      	ldr	r3, [r4, #28]
 8003f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f64:	4e30      	ldr	r6, [pc, #192]	; (8004028 <HAL_RCC_OscConfig+0x284>)
 8003f66:	6833      	ldr	r3, [r6, #0]
 8003f68:	05d9      	lsls	r1, r3, #23
 8003f6a:	d518      	bpl.n	8003f9e <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f6c:	68eb      	ldr	r3, [r5, #12]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d126      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x21c>
 8003f72:	6a23      	ldr	r3, [r4, #32]
 8003f74:	f043 0301 	orr.w	r3, r3, #1
 8003f78:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8003f7a:	f7fe ffe9 	bl	8002f50 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f7e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003f82:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f84:	6a23      	ldr	r3, [r4, #32]
 8003f86:	079b      	lsls	r3, r3, #30
 8003f88:	d53f      	bpl.n	800400a <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8003f8a:	2f00      	cmp	r7, #0
 8003f8c:	f43f af1e 	beq.w	8003dcc <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f90:	69e3      	ldr	r3, [r4, #28]
 8003f92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f96:	61e3      	str	r3, [r4, #28]
 8003f98:	e718      	b.n	8003dcc <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8003f9a:	2700      	movs	r7, #0
 8003f9c:	e7e2      	b.n	8003f64 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f9e:	6833      	ldr	r3, [r6, #0]
 8003fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003fa6:	f7fe ffd3 	bl	8002f50 <HAL_GetTick>
 8003faa:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fac:	6833      	ldr	r3, [r6, #0]
 8003fae:	05da      	lsls	r2, r3, #23
 8003fb0:	d4dc      	bmi.n	8003f6c <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fb2:	f7fe ffcd 	bl	8002f50 <HAL_GetTick>
 8003fb6:	eba0 0008 	sub.w	r0, r0, r8
 8003fba:	2864      	cmp	r0, #100	; 0x64
 8003fbc:	d9f6      	bls.n	8003fac <HAL_RCC_OscConfig+0x208>
 8003fbe:	e733      	b.n	8003e28 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fc0:	b9ab      	cbnz	r3, 8003fee <HAL_RCC_OscConfig+0x24a>
 8003fc2:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fc4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fc8:	f023 0301 	bic.w	r3, r3, #1
 8003fcc:	6223      	str	r3, [r4, #32]
 8003fce:	6a23      	ldr	r3, [r4, #32]
 8003fd0:	f023 0304 	bic.w	r3, r3, #4
 8003fd4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8003fd6:	f7fe ffbb 	bl	8002f50 <HAL_GetTick>
 8003fda:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fdc:	6a23      	ldr	r3, [r4, #32]
 8003fde:	0798      	lsls	r0, r3, #30
 8003fe0:	d5d3      	bpl.n	8003f8a <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fe2:	f7fe ffb5 	bl	8002f50 <HAL_GetTick>
 8003fe6:	1b80      	subs	r0, r0, r6
 8003fe8:	4540      	cmp	r0, r8
 8003fea:	d9f7      	bls.n	8003fdc <HAL_RCC_OscConfig+0x238>
 8003fec:	e71c      	b.n	8003e28 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fee:	2b05      	cmp	r3, #5
 8003ff0:	6a23      	ldr	r3, [r4, #32]
 8003ff2:	d103      	bne.n	8003ffc <HAL_RCC_OscConfig+0x258>
 8003ff4:	f043 0304 	orr.w	r3, r3, #4
 8003ff8:	6223      	str	r3, [r4, #32]
 8003ffa:	e7ba      	b.n	8003f72 <HAL_RCC_OscConfig+0x1ce>
 8003ffc:	f023 0301 	bic.w	r3, r3, #1
 8004000:	6223      	str	r3, [r4, #32]
 8004002:	6a23      	ldr	r3, [r4, #32]
 8004004:	f023 0304 	bic.w	r3, r3, #4
 8004008:	e7b6      	b.n	8003f78 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800400a:	f7fe ffa1 	bl	8002f50 <HAL_GetTick>
 800400e:	eba0 0008 	sub.w	r0, r0, r8
 8004012:	42b0      	cmp	r0, r6
 8004014:	d9b6      	bls.n	8003f84 <HAL_RCC_OscConfig+0x1e0>
 8004016:	e707      	b.n	8003e28 <HAL_RCC_OscConfig+0x84>
 8004018:	40021000 	.word	0x40021000
 800401c:	42420000 	.word	0x42420000
 8004020:	42420480 	.word	0x42420480
 8004024:	20000010 	.word	0x20000010
 8004028:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800402c:	4b2a      	ldr	r3, [pc, #168]	; (80040d8 <HAL_RCC_OscConfig+0x334>)
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	461c      	mov	r4, r3
 8004032:	f002 020c 	and.w	r2, r2, #12
 8004036:	2a08      	cmp	r2, #8
 8004038:	d03d      	beq.n	80040b6 <HAL_RCC_OscConfig+0x312>
 800403a:	2300      	movs	r3, #0
 800403c:	4e27      	ldr	r6, [pc, #156]	; (80040dc <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800403e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004040:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004042:	d12b      	bne.n	800409c <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8004044:	f7fe ff84 	bl	8002f50 <HAL_GetTick>
 8004048:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800404a:	6823      	ldr	r3, [r4, #0]
 800404c:	0199      	lsls	r1, r3, #6
 800404e:	d41f      	bmi.n	8004090 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004050:	6a2b      	ldr	r3, [r5, #32]
 8004052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004056:	d105      	bne.n	8004064 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004058:	6862      	ldr	r2, [r4, #4]
 800405a:	68a9      	ldr	r1, [r5, #8]
 800405c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004060:	430a      	orrs	r2, r1
 8004062:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004064:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8004066:	6862      	ldr	r2, [r4, #4]
 8004068:	430b      	orrs	r3, r1
 800406a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800406e:	4313      	orrs	r3, r2
 8004070:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8004072:	2301      	movs	r3, #1
 8004074:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8004076:	f7fe ff6b 	bl	8002f50 <HAL_GetTick>
 800407a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800407c:	6823      	ldr	r3, [r4, #0]
 800407e:	019a      	lsls	r2, r3, #6
 8004080:	f53f aea8 	bmi.w	8003dd4 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004084:	f7fe ff64 	bl	8002f50 <HAL_GetTick>
 8004088:	1b40      	subs	r0, r0, r5
 800408a:	2802      	cmp	r0, #2
 800408c:	d9f6      	bls.n	800407c <HAL_RCC_OscConfig+0x2d8>
 800408e:	e6cb      	b.n	8003e28 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004090:	f7fe ff5e 	bl	8002f50 <HAL_GetTick>
 8004094:	1bc0      	subs	r0, r0, r7
 8004096:	2802      	cmp	r0, #2
 8004098:	d9d7      	bls.n	800404a <HAL_RCC_OscConfig+0x2a6>
 800409a:	e6c5      	b.n	8003e28 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 800409c:	f7fe ff58 	bl	8002f50 <HAL_GetTick>
 80040a0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040a2:	6823      	ldr	r3, [r4, #0]
 80040a4:	019b      	lsls	r3, r3, #6
 80040a6:	f57f ae95 	bpl.w	8003dd4 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040aa:	f7fe ff51 	bl	8002f50 <HAL_GetTick>
 80040ae:	1b40      	subs	r0, r0, r5
 80040b0:	2802      	cmp	r0, #2
 80040b2:	d9f6      	bls.n	80040a2 <HAL_RCC_OscConfig+0x2fe>
 80040b4:	e6b8      	b.n	8003e28 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040b6:	2801      	cmp	r0, #1
 80040b8:	f43f aeb7 	beq.w	8003e2a <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 80040bc:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040be:	6a2b      	ldr	r3, [r5, #32]
 80040c0:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 80040c4:	429a      	cmp	r2, r3
 80040c6:	f47f ae71 	bne.w	8003dac <HAL_RCC_OscConfig+0x8>
 80040ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80040cc:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 80040d0:	1ac0      	subs	r0, r0, r3
 80040d2:	bf18      	it	ne
 80040d4:	2001      	movne	r0, #1
 80040d6:	e6a8      	b.n	8003e2a <HAL_RCC_OscConfig+0x86>
 80040d8:	40021000 	.word	0x40021000
 80040dc:	42420060 	.word	0x42420060

080040e0 <HAL_RCC_GetSysClockFreq>:
{
 80040e0:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80040e2:	4b18      	ldr	r3, [pc, #96]	; (8004144 <HAL_RCC_GetSysClockFreq+0x64>)
{
 80040e4:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80040e6:	ac02      	add	r4, sp, #8
 80040e8:	f103 0510 	add.w	r5, r3, #16
 80040ec:	4622      	mov	r2, r4
 80040ee:	6818      	ldr	r0, [r3, #0]
 80040f0:	6859      	ldr	r1, [r3, #4]
 80040f2:	3308      	adds	r3, #8
 80040f4:	c203      	stmia	r2!, {r0, r1}
 80040f6:	42ab      	cmp	r3, r5
 80040f8:	4614      	mov	r4, r2
 80040fa:	d1f7      	bne.n	80040ec <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80040fc:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8004100:	4911      	ldr	r1, [pc, #68]	; (8004148 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004102:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8004106:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004108:	f003 020c 	and.w	r2, r3, #12
 800410c:	2a08      	cmp	r2, #8
 800410e:	d117      	bne.n	8004140 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004110:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8004114:	a806      	add	r0, sp, #24
 8004116:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004118:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800411a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800411e:	d50c      	bpl.n	800413a <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004120:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004122:	480a      	ldr	r0, [pc, #40]	; (800414c <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004124:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004128:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800412a:	aa06      	add	r2, sp, #24
 800412c:	4413      	add	r3, r2
 800412e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004132:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8004136:	b007      	add	sp, #28
 8004138:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800413a:	4805      	ldr	r0, [pc, #20]	; (8004150 <HAL_RCC_GetSysClockFreq+0x70>)
 800413c:	4350      	muls	r0, r2
 800413e:	e7fa      	b.n	8004136 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8004140:	4802      	ldr	r0, [pc, #8]	; (800414c <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8004142:	e7f8      	b.n	8004136 <HAL_RCC_GetSysClockFreq+0x56>
 8004144:	0800b9b0 	.word	0x0800b9b0
 8004148:	40021000 	.word	0x40021000
 800414c:	007a1200 	.word	0x007a1200
 8004150:	003d0900 	.word	0x003d0900

08004154 <HAL_RCC_ClockConfig>:
{
 8004154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004158:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800415a:	4604      	mov	r4, r0
 800415c:	b910      	cbnz	r0, 8004164 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800415e:	2001      	movs	r0, #1
}
 8004160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004164:	4a44      	ldr	r2, [pc, #272]	; (8004278 <HAL_RCC_ClockConfig+0x124>)
 8004166:	6813      	ldr	r3, [r2, #0]
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	428b      	cmp	r3, r1
 800416e:	d328      	bcc.n	80041c2 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004170:	6821      	ldr	r1, [r4, #0]
 8004172:	078e      	lsls	r6, r1, #30
 8004174:	d430      	bmi.n	80041d8 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004176:	07ca      	lsls	r2, r1, #31
 8004178:	d443      	bmi.n	8004202 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800417a:	4a3f      	ldr	r2, [pc, #252]	; (8004278 <HAL_RCC_ClockConfig+0x124>)
 800417c:	6813      	ldr	r3, [r2, #0]
 800417e:	f003 0307 	and.w	r3, r3, #7
 8004182:	42ab      	cmp	r3, r5
 8004184:	d865      	bhi.n	8004252 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004186:	6822      	ldr	r2, [r4, #0]
 8004188:	4d3c      	ldr	r5, [pc, #240]	; (800427c <HAL_RCC_ClockConfig+0x128>)
 800418a:	f012 0f04 	tst.w	r2, #4
 800418e:	d16c      	bne.n	800426a <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004190:	0713      	lsls	r3, r2, #28
 8004192:	d506      	bpl.n	80041a2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004194:	686b      	ldr	r3, [r5, #4]
 8004196:	6922      	ldr	r2, [r4, #16]
 8004198:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800419c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80041a0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041a2:	f7ff ff9d 	bl	80040e0 <HAL_RCC_GetSysClockFreq>
 80041a6:	686b      	ldr	r3, [r5, #4]
 80041a8:	4a35      	ldr	r2, [pc, #212]	; (8004280 <HAL_RCC_ClockConfig+0x12c>)
 80041aa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80041ae:	5cd3      	ldrb	r3, [r2, r3]
 80041b0:	40d8      	lsrs	r0, r3
 80041b2:	4b34      	ldr	r3, [pc, #208]	; (8004284 <HAL_RCC_ClockConfig+0x130>)
 80041b4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80041b6:	4b34      	ldr	r3, [pc, #208]	; (8004288 <HAL_RCC_ClockConfig+0x134>)
 80041b8:	6818      	ldr	r0, [r3, #0]
 80041ba:	f7fe fe87 	bl	8002ecc <HAL_InitTick>
  return HAL_OK;
 80041be:	2000      	movs	r0, #0
 80041c0:	e7ce      	b.n	8004160 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041c2:	6813      	ldr	r3, [r2, #0]
 80041c4:	f023 0307 	bic.w	r3, r3, #7
 80041c8:	430b      	orrs	r3, r1
 80041ca:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041cc:	6813      	ldr	r3, [r2, #0]
 80041ce:	f003 0307 	and.w	r3, r3, #7
 80041d2:	428b      	cmp	r3, r1
 80041d4:	d1c3      	bne.n	800415e <HAL_RCC_ClockConfig+0xa>
 80041d6:	e7cb      	b.n	8004170 <HAL_RCC_ClockConfig+0x1c>
 80041d8:	4b28      	ldr	r3, [pc, #160]	; (800427c <HAL_RCC_ClockConfig+0x128>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041da:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041de:	bf1e      	ittt	ne
 80041e0:	685a      	ldrne	r2, [r3, #4]
 80041e2:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80041e6:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041e8:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041ea:	bf42      	ittt	mi
 80041ec:	685a      	ldrmi	r2, [r3, #4]
 80041ee:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80041f2:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	68a0      	ldr	r0, [r4, #8]
 80041f8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80041fc:	4302      	orrs	r2, r0
 80041fe:	605a      	str	r2, [r3, #4]
 8004200:	e7b9      	b.n	8004176 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004202:	6862      	ldr	r2, [r4, #4]
 8004204:	4e1d      	ldr	r6, [pc, #116]	; (800427c <HAL_RCC_ClockConfig+0x128>)
 8004206:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004208:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800420a:	d11a      	bne.n	8004242 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800420c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004210:	d0a5      	beq.n	800415e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004212:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004214:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004218:	f023 0303 	bic.w	r3, r3, #3
 800421c:	4313      	orrs	r3, r2
 800421e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8004220:	f7fe fe96 	bl	8002f50 <HAL_GetTick>
 8004224:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004226:	6873      	ldr	r3, [r6, #4]
 8004228:	6862      	ldr	r2, [r4, #4]
 800422a:	f003 030c 	and.w	r3, r3, #12
 800422e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004232:	d0a2      	beq.n	800417a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004234:	f7fe fe8c 	bl	8002f50 <HAL_GetTick>
 8004238:	1bc0      	subs	r0, r0, r7
 800423a:	4540      	cmp	r0, r8
 800423c:	d9f3      	bls.n	8004226 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 800423e:	2003      	movs	r0, #3
 8004240:	e78e      	b.n	8004160 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004242:	2a02      	cmp	r2, #2
 8004244:	d102      	bne.n	800424c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004246:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800424a:	e7e1      	b.n	8004210 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800424c:	f013 0f02 	tst.w	r3, #2
 8004250:	e7de      	b.n	8004210 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004252:	6813      	ldr	r3, [r2, #0]
 8004254:	f023 0307 	bic.w	r3, r3, #7
 8004258:	432b      	orrs	r3, r5
 800425a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800425c:	6813      	ldr	r3, [r2, #0]
 800425e:	f003 0307 	and.w	r3, r3, #7
 8004262:	42ab      	cmp	r3, r5
 8004264:	f47f af7b 	bne.w	800415e <HAL_RCC_ClockConfig+0xa>
 8004268:	e78d      	b.n	8004186 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800426a:	686b      	ldr	r3, [r5, #4]
 800426c:	68e1      	ldr	r1, [r4, #12]
 800426e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004272:	430b      	orrs	r3, r1
 8004274:	606b      	str	r3, [r5, #4]
 8004276:	e78b      	b.n	8004190 <HAL_RCC_ClockConfig+0x3c>
 8004278:	40022000 	.word	0x40022000
 800427c:	40021000 	.word	0x40021000
 8004280:	0800c5c9 	.word	0x0800c5c9
 8004284:	20000010 	.word	0x20000010
 8004288:	20000018 	.word	0x20000018

0800428c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800428c:	4b04      	ldr	r3, [pc, #16]	; (80042a0 <HAL_RCC_GetPCLK1Freq+0x14>)
 800428e:	4a05      	ldr	r2, [pc, #20]	; (80042a4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004296:	5cd3      	ldrb	r3, [r2, r3]
 8004298:	4a03      	ldr	r2, [pc, #12]	; (80042a8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800429a:	6810      	ldr	r0, [r2, #0]
}
 800429c:	40d8      	lsrs	r0, r3
 800429e:	4770      	bx	lr
 80042a0:	40021000 	.word	0x40021000
 80042a4:	0800c5d9 	.word	0x0800c5d9
 80042a8:	20000010 	.word	0x20000010

080042ac <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042ac:	4b04      	ldr	r3, [pc, #16]	; (80042c0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80042ae:	4a05      	ldr	r2, [pc, #20]	; (80042c4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80042b6:	5cd3      	ldrb	r3, [r2, r3]
 80042b8:	4a03      	ldr	r2, [pc, #12]	; (80042c8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80042ba:	6810      	ldr	r0, [r2, #0]
}
 80042bc:	40d8      	lsrs	r0, r3
 80042be:	4770      	bx	lr
 80042c0:	40021000 	.word	0x40021000
 80042c4:	0800c5d9 	.word	0x0800c5d9
 80042c8:	20000010 	.word	0x20000010

080042cc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80042cc:	6803      	ldr	r3, [r0, #0]
{
 80042ce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80042d2:	07d9      	lsls	r1, r3, #31
{
 80042d4:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80042d6:	d520      	bpl.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042d8:	4c35      	ldr	r4, [pc, #212]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80042da:	69e3      	ldr	r3, [r4, #28]
 80042dc:	00da      	lsls	r2, r3, #3
 80042de:	d432      	bmi.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80042e0:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80042e2:	69e3      	ldr	r3, [r4, #28]
 80042e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042e8:	61e3      	str	r3, [r4, #28]
 80042ea:	69e3      	ldr	r3, [r4, #28]
 80042ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f0:	9301      	str	r3, [sp, #4]
 80042f2:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042f4:	4e2f      	ldr	r6, [pc, #188]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80042f6:	6833      	ldr	r3, [r6, #0]
 80042f8:	05db      	lsls	r3, r3, #23
 80042fa:	d526      	bpl.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042fc:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042fe:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004302:	d136      	bne.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004304:	6a23      	ldr	r3, [r4, #32]
 8004306:	686a      	ldr	r2, [r5, #4]
 8004308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800430c:	4313      	orrs	r3, r2
 800430e:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004310:	b11f      	cbz	r7, 800431a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004312:	69e3      	ldr	r3, [r4, #28]
 8004314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004318:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800431a:	6828      	ldr	r0, [r5, #0]
 800431c:	0783      	lsls	r3, r0, #30
 800431e:	d506      	bpl.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004320:	4a23      	ldr	r2, [pc, #140]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8004322:	68a9      	ldr	r1, [r5, #8]
 8004324:	6853      	ldr	r3, [r2, #4]
 8004326:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800432a:	430b      	orrs	r3, r1
 800432c:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800432e:	f010 0010 	ands.w	r0, r0, #16
 8004332:	d01b      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004334:	4a1e      	ldr	r2, [pc, #120]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8004336:	68e9      	ldr	r1, [r5, #12]
 8004338:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800433a:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800433c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004340:	430b      	orrs	r3, r1
 8004342:	6053      	str	r3, [r2, #4]
 8004344:	e012      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8004346:	2700      	movs	r7, #0
 8004348:	e7d4      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800434a:	6833      	ldr	r3, [r6, #0]
 800434c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004350:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004352:	f7fe fdfd 	bl	8002f50 <HAL_GetTick>
 8004356:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004358:	6833      	ldr	r3, [r6, #0]
 800435a:	05d8      	lsls	r0, r3, #23
 800435c:	d4ce      	bmi.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800435e:	f7fe fdf7 	bl	8002f50 <HAL_GetTick>
 8004362:	eba0 0008 	sub.w	r0, r0, r8
 8004366:	2864      	cmp	r0, #100	; 0x64
 8004368:	d9f6      	bls.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800436a:	2003      	movs	r0, #3
}
 800436c:	b002      	add	sp, #8
 800436e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004372:	686a      	ldr	r2, [r5, #4]
 8004374:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004378:	429a      	cmp	r2, r3
 800437a:	d0c3      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 800437c:	2001      	movs	r0, #1
 800437e:	4a0e      	ldr	r2, [pc, #56]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004380:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8004382:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004384:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004386:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800438a:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 800438c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800438e:	07d9      	lsls	r1, r3, #31
 8004390:	d5b8      	bpl.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8004392:	f7fe fddd 	bl	8002f50 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004396:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800439a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800439c:	6a23      	ldr	r3, [r4, #32]
 800439e:	079a      	lsls	r2, r3, #30
 80043a0:	d4b0      	bmi.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043a2:	f7fe fdd5 	bl	8002f50 <HAL_GetTick>
 80043a6:	1b80      	subs	r0, r0, r6
 80043a8:	4540      	cmp	r0, r8
 80043aa:	d9f7      	bls.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xd0>
 80043ac:	e7dd      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80043ae:	bf00      	nop
 80043b0:	40021000 	.word	0x40021000
 80043b4:	40007000 	.word	0x40007000
 80043b8:	42420440 	.word	0x42420440

080043bc <SPI_WaitFlagStateUntilTimeout.constprop.6>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80043bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043be:	4604      	mov	r4, r0
 80043c0:	460e      	mov	r6, r1
 80043c2:	4615      	mov	r5, r2
 80043c4:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043c6:	6821      	ldr	r1, [r4, #0]
 80043c8:	688a      	ldr	r2, [r1, #8]
 80043ca:	ea36 0302 	bics.w	r3, r6, r2
 80043ce:	d001      	beq.n	80043d4 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80043d0:	2000      	movs	r0, #0
 80043d2:	e02d      	b.n	8004430 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x74>
    if (Timeout != HAL_MAX_DELAY)
 80043d4:	1c6b      	adds	r3, r5, #1
 80043d6:	d0f7      	beq.n	80043c8 <SPI_WaitFlagStateUntilTimeout.constprop.6+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80043d8:	f7fe fdba 	bl	8002f50 <HAL_GetTick>
 80043dc:	1bc0      	subs	r0, r0, r7
 80043de:	4285      	cmp	r5, r0
 80043e0:	d8f1      	bhi.n	80043c6 <SPI_WaitFlagStateUntilTimeout.constprop.6+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043e2:	6823      	ldr	r3, [r4, #0]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80043ea:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043ec:	6862      	ldr	r2, [r4, #4]
 80043ee:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80043f2:	d10a      	bne.n	800440a <SPI_WaitFlagStateUntilTimeout.constprop.6+0x4e>
 80043f4:	68a2      	ldr	r2, [r4, #8]
 80043f6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80043fa:	d002      	beq.n	8004402 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043fc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004400:	d103      	bne.n	800440a <SPI_WaitFlagStateUntilTimeout.constprop.6+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004408:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800440a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800440c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004410:	d107      	bne.n	8004422 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x66>
          SPI_RESET_CRC(hspi);
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004418:	601a      	str	r2, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004420:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8004422:	2301      	movs	r3, #1
 8004424:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8004428:	2300      	movs	r3, #0
 800442a:	2003      	movs	r0, #3
 800442c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004432 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004432:	b510      	push	{r4, lr}
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004434:	4613      	mov	r3, r2
 8004436:	460a      	mov	r2, r1
 8004438:	2180      	movs	r1, #128	; 0x80
{
 800443a:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800443c:	f7ff ffbe 	bl	80043bc <SPI_WaitFlagStateUntilTimeout.constprop.6>
 8004440:	b120      	cbz	r0, 800444c <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8004442:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004444:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004446:	f043 0320 	orr.w	r3, r3, #32
 800444a:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 800444c:	bd10      	pop	{r4, pc}

0800444e <HAL_SPI_Init>:
{
 800444e:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8004450:	4604      	mov	r4, r0
 8004452:	2800      	cmp	r0, #0
 8004454:	d034      	beq.n	80044c0 <HAL_SPI_Init+0x72>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004456:	2300      	movs	r3, #0
 8004458:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800445a:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800445e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004462:	b91b      	cbnz	r3, 800446c <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8004464:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8004468:	f7fe fbae 	bl	8002bc8 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 800446c:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800446e:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004470:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8004474:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004476:	69a1      	ldr	r1, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 8004478:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800447c:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800447e:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8004482:	4303      	orrs	r3, r0
 8004484:	68e0      	ldr	r0, [r4, #12]
 8004486:	4303      	orrs	r3, r0
 8004488:	6920      	ldr	r0, [r4, #16]
 800448a:	4303      	orrs	r3, r0
 800448c:	6960      	ldr	r0, [r4, #20]
 800448e:	4303      	orrs	r3, r0
 8004490:	69e0      	ldr	r0, [r4, #28]
 8004492:	4303      	orrs	r3, r0
 8004494:	6a20      	ldr	r0, [r4, #32]
 8004496:	4303      	orrs	r3, r0
 8004498:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800449a:	4303      	orrs	r3, r0
 800449c:	f401 7000 	and.w	r0, r1, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80044a0:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80044a2:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80044a4:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80044a8:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80044aa:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044ac:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044ae:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044b4:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80044b6:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044b8:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044ba:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80044be:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80044c0:	2001      	movs	r0, #1
 80044c2:	e7fc      	b.n	80044be <HAL_SPI_Init+0x70>

080044c4 <HAL_SPI_TransmitReceive>:
{
 80044c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80044c8:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80044ca:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 80044ce:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80044d0:	2b01      	cmp	r3, #1
{
 80044d2:	460d      	mov	r5, r1
 80044d4:	4691      	mov	r9, r2
 80044d6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 80044d8:	f000 80e2 	beq.w	80046a0 <HAL_SPI_TransmitReceive+0x1dc>
 80044dc:	2301      	movs	r3, #1
 80044de:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80044e2:	f7fe fd35 	bl	8002f50 <HAL_GetTick>
  tmp_state           = hspi->State;
 80044e6:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 80044ea:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 80044ec:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80044ee:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 80044f0:	6861      	ldr	r1, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80044f2:	d00a      	beq.n	800450a <HAL_SPI_TransmitReceive+0x46>
 80044f4:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80044f8:	f040 80d0 	bne.w	800469c <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80044fc:	68a0      	ldr	r0, [r4, #8]
 80044fe:	2800      	cmp	r0, #0
 8004500:	f040 80cc 	bne.w	800469c <HAL_SPI_TransmitReceive+0x1d8>
 8004504:	2b04      	cmp	r3, #4
 8004506:	f040 80c9 	bne.w	800469c <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800450a:	2d00      	cmp	r5, #0
 800450c:	f000 80c4 	beq.w	8004698 <HAL_SPI_TransmitReceive+0x1d4>
 8004510:	f1b9 0f00 	cmp.w	r9, #0
 8004514:	f000 80c0 	beq.w	8004698 <HAL_SPI_TransmitReceive+0x1d4>
 8004518:	2e00      	cmp	r6, #0
 800451a:	f000 80bd 	beq.w	8004698 <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800451e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004522:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004526:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004528:	bf1c      	itt	ne
 800452a:	2305      	movne	r3, #5
 800452c:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004530:	2300      	movs	r3, #0
 8004532:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8004534:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004538:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 800453a:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 800453c:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800453e:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8004540:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004542:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8004544:	bf58      	it	pl
 8004546:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004548:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 800454a:	bf58      	it	pl
 800454c:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8004550:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8004552:	bf58      	it	pl
 8004554:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004556:	68e2      	ldr	r2, [r4, #12]
 8004558:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800455c:	d158      	bne.n	8004610 <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800455e:	b109      	cbz	r1, 8004564 <HAL_SPI_TransmitReceive+0xa0>
 8004560:	2e01      	cmp	r6, #1
 8004562:	d107      	bne.n	8004574 <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004564:	f835 2b02 	ldrh.w	r2, [r5], #2
 8004568:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800456a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800456c:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800456e:	3b01      	subs	r3, #1
 8004570:	b29b      	uxth	r3, r3
 8004572:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8004574:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004576:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004578:	b29b      	uxth	r3, r3
 800457a:	b9ab      	cbnz	r3, 80045a8 <HAL_SPI_TransmitReceive+0xe4>
 800457c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800457e:	b29b      	uxth	r3, r3
 8004580:	b993      	cbnz	r3, 80045a8 <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004582:	4642      	mov	r2, r8
 8004584:	4639      	mov	r1, r7
 8004586:	4620      	mov	r0, r4
 8004588:	f7ff ff53 	bl	8004432 <SPI_EndRxTxTransaction>
 800458c:	2800      	cmp	r0, #0
 800458e:	f040 8081 	bne.w	8004694 <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004592:	68a3      	ldr	r3, [r4, #8]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d132      	bne.n	80045fe <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004598:	6823      	ldr	r3, [r4, #0]
 800459a:	9001      	str	r0, [sp, #4]
 800459c:	68da      	ldr	r2, [r3, #12]
 800459e:	9201      	str	r2, [sp, #4]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	9301      	str	r3, [sp, #4]
 80045a4:	9b01      	ldr	r3, [sp, #4]
 80045a6:	e02a      	b.n	80045fe <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045a8:	6822      	ldr	r2, [r4, #0]
 80045aa:	6893      	ldr	r3, [r2, #8]
 80045ac:	0799      	lsls	r1, r3, #30
 80045ae:	d50d      	bpl.n	80045cc <HAL_SPI_TransmitReceive+0x108>
 80045b0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	b153      	cbz	r3, 80045cc <HAL_SPI_TransmitReceive+0x108>
 80045b6:	b14d      	cbz	r5, 80045cc <HAL_SPI_TransmitReceive+0x108>
        txallowed = 0U;
 80045b8:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80045bc:	f833 1b02 	ldrh.w	r1, [r3], #2
 80045c0:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045c2:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80045c4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80045c6:	3b01      	subs	r3, #1
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045cc:	6893      	ldr	r3, [r2, #8]
 80045ce:	07db      	lsls	r3, r3, #31
 80045d0:	d50c      	bpl.n	80045ec <HAL_SPI_TransmitReceive+0x128>
 80045d2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	b14b      	cbz	r3, 80045ec <HAL_SPI_TransmitReceive+0x128>
        txallowed = 1U;
 80045d8:	2501      	movs	r5, #1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80045da:	68d2      	ldr	r2, [r2, #12]
 80045dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80045de:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80045e2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80045e4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80045e6:	3b01      	subs	r3, #1
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80045ec:	f7fe fcb0 	bl	8002f50 <HAL_GetTick>
 80045f0:	eba0 0008 	sub.w	r0, r0, r8
 80045f4:	4287      	cmp	r7, r0
 80045f6:	d8be      	bhi.n	8004576 <HAL_SPI_TransmitReceive+0xb2>
 80045f8:	1c7e      	adds	r6, r7, #1
 80045fa:	d0bc      	beq.n	8004576 <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 80045fc:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80045fe:	2301      	movs	r3, #1
 8004600:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004604:	2300      	movs	r3, #0
 8004606:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800460a:	b003      	add	sp, #12
 800460c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004610:	b109      	cbz	r1, 8004616 <HAL_SPI_TransmitReceive+0x152>
 8004612:	2e01      	cmp	r6, #1
 8004614:	d108      	bne.n	8004628 <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004616:	782a      	ldrb	r2, [r5, #0]
 8004618:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800461a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800461c:	3301      	adds	r3, #1
 800461e:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004620:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004622:	3b01      	subs	r3, #1
 8004624:	b29b      	uxth	r3, r3
 8004626:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8004628:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800462a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800462c:	b29b      	uxth	r3, r3
 800462e:	b91b      	cbnz	r3, 8004638 <HAL_SPI_TransmitReceive+0x174>
 8004630:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004632:	b29b      	uxth	r3, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	d0a4      	beq.n	8004582 <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004638:	6822      	ldr	r2, [r4, #0]
 800463a:	6893      	ldr	r3, [r2, #8]
 800463c:	0798      	lsls	r0, r3, #30
 800463e:	d50e      	bpl.n	800465e <HAL_SPI_TransmitReceive+0x19a>
 8004640:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004642:	b29b      	uxth	r3, r3
 8004644:	b15b      	cbz	r3, 800465e <HAL_SPI_TransmitReceive+0x19a>
 8004646:	b155      	cbz	r5, 800465e <HAL_SPI_TransmitReceive+0x19a>
        txallowed = 0U;
 8004648:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800464a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8004650:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004652:	3301      	adds	r3, #1
 8004654:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004656:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004658:	3b01      	subs	r3, #1
 800465a:	b29b      	uxth	r3, r3
 800465c:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800465e:	6822      	ldr	r2, [r4, #0]
 8004660:	6893      	ldr	r3, [r2, #8]
 8004662:	07d9      	lsls	r1, r3, #31
 8004664:	d50d      	bpl.n	8004682 <HAL_SPI_TransmitReceive+0x1be>
 8004666:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004668:	b29b      	uxth	r3, r3
 800466a:	b153      	cbz	r3, 8004682 <HAL_SPI_TransmitReceive+0x1be>
        txallowed = 1U;
 800466c:	2501      	movs	r5, #1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800466e:	68d2      	ldr	r2, [r2, #12]
 8004670:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004672:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004674:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004676:	3301      	adds	r3, #1
 8004678:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800467a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800467c:	3b01      	subs	r3, #1
 800467e:	b29b      	uxth	r3, r3
 8004680:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004682:	f7fe fc65 	bl	8002f50 <HAL_GetTick>
 8004686:	eba0 0008 	sub.w	r0, r0, r8
 800468a:	4287      	cmp	r7, r0
 800468c:	d8cd      	bhi.n	800462a <HAL_SPI_TransmitReceive+0x166>
 800468e:	1c7b      	adds	r3, r7, #1
 8004690:	d0cb      	beq.n	800462a <HAL_SPI_TransmitReceive+0x166>
 8004692:	e7b3      	b.n	80045fc <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004694:	2320      	movs	r3, #32
 8004696:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004698:	2001      	movs	r0, #1
 800469a:	e7b0      	b.n	80045fe <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 800469c:	2002      	movs	r0, #2
 800469e:	e7ae      	b.n	80045fe <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 80046a0:	2002      	movs	r0, #2
 80046a2:	e7b2      	b.n	800460a <HAL_SPI_TransmitReceive+0x146>

080046a4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046a4:	6a03      	ldr	r3, [r0, #32]
{
 80046a6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046a8:	f023 0301 	bic.w	r3, r3, #1
 80046ac:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ae:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046b0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046b2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046b4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046b6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80046ba:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046bc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80046be:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80046c2:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046c4:	4d0a      	ldr	r5, [pc, #40]	; (80046f0 <TIM_OC1_SetConfig+0x4c>)
 80046c6:	42a8      	cmp	r0, r5
 80046c8:	d10b      	bne.n	80046e2 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046ca:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80046cc:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80046d0:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046d2:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046d6:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80046da:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80046dc:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80046e0:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046e2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046e4:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046e6:	684a      	ldr	r2, [r1, #4]
 80046e8:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ea:	6203      	str	r3, [r0, #32]
}
 80046ec:	bd70      	pop	{r4, r5, r6, pc}
 80046ee:	bf00      	nop
 80046f0:	40012c00 	.word	0x40012c00

080046f4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046f4:	6a03      	ldr	r3, [r0, #32]
{
 80046f6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046fc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046fe:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004700:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004702:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004704:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004706:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800470a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800470c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800470e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004712:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004716:	4d0b      	ldr	r5, [pc, #44]	; (8004744 <TIM_OC3_SetConfig+0x50>)
 8004718:	42a8      	cmp	r0, r5
 800471a:	d10d      	bne.n	8004738 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800471c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800471e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004722:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004726:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800472a:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800472e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8004730:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004734:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004738:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800473a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800473c:	684a      	ldr	r2, [r1, #4]
 800473e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004740:	6203      	str	r3, [r0, #32]
}
 8004742:	bd70      	pop	{r4, r5, r6, pc}
 8004744:	40012c00 	.word	0x40012c00

08004748 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004748:	6a03      	ldr	r3, [r0, #32]
{
 800474a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800474c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004750:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004752:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004754:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004756:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004758:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800475a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800475e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004762:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8004764:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004768:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800476c:	4d06      	ldr	r5, [pc, #24]	; (8004788 <TIM_OC4_SetConfig+0x40>)
 800476e:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004770:	bf02      	ittt	eq
 8004772:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004774:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004778:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800477c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800477e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004780:	684a      	ldr	r2, [r1, #4]
 8004782:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004784:	6203      	str	r3, [r0, #32]
}
 8004786:	bd30      	pop	{r4, r5, pc}
 8004788:	40012c00 	.word	0x40012c00

0800478c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800478c:	4a1a      	ldr	r2, [pc, #104]	; (80047f8 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800478e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004790:	4290      	cmp	r0, r2
 8004792:	d00a      	beq.n	80047aa <TIM_Base_SetConfig+0x1e>
 8004794:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004798:	d007      	beq.n	80047aa <TIM_Base_SetConfig+0x1e>
 800479a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800479e:	4290      	cmp	r0, r2
 80047a0:	d003      	beq.n	80047aa <TIM_Base_SetConfig+0x1e>
 80047a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80047a6:	4290      	cmp	r0, r2
 80047a8:	d115      	bne.n	80047d6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 80047aa:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80047b0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047b2:	4a11      	ldr	r2, [pc, #68]	; (80047f8 <TIM_Base_SetConfig+0x6c>)
 80047b4:	4290      	cmp	r0, r2
 80047b6:	d00a      	beq.n	80047ce <TIM_Base_SetConfig+0x42>
 80047b8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80047bc:	d007      	beq.n	80047ce <TIM_Base_SetConfig+0x42>
 80047be:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80047c2:	4290      	cmp	r0, r2
 80047c4:	d003      	beq.n	80047ce <TIM_Base_SetConfig+0x42>
 80047c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80047ca:	4290      	cmp	r0, r2
 80047cc:	d103      	bne.n	80047d6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047ce:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80047d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047d4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047d6:	694a      	ldr	r2, [r1, #20]
 80047d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047dc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80047de:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047e0:	688b      	ldr	r3, [r1, #8]
 80047e2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80047e4:	680b      	ldr	r3, [r1, #0]
 80047e6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047e8:	4b03      	ldr	r3, [pc, #12]	; (80047f8 <TIM_Base_SetConfig+0x6c>)
 80047ea:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80047ec:	bf04      	itt	eq
 80047ee:	690b      	ldreq	r3, [r1, #16]
 80047f0:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80047f2:	2301      	movs	r3, #1
 80047f4:	6143      	str	r3, [r0, #20]
}
 80047f6:	4770      	bx	lr
 80047f8:	40012c00 	.word	0x40012c00

080047fc <HAL_TIM_PWM_Init>:
{
 80047fc:	b510      	push	{r4, lr}
  if (htim == NULL)
 80047fe:	4604      	mov	r4, r0
 8004800:	b1a0      	cbz	r0, 800482c <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004802:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004806:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800480a:	b91b      	cbnz	r3, 8004814 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800480c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004810:	f7fe fa16 	bl	8002c40 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004814:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004816:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004818:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800481c:	1d21      	adds	r1, r4, #4
 800481e:	f7ff ffb5 	bl	800478c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8004822:	2301      	movs	r3, #1
  return HAL_OK;
 8004824:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004826:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800482a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800482c:	2001      	movs	r0, #1
 800482e:	e7fc      	b.n	800482a <HAL_TIM_PWM_Init+0x2e>

08004830 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004830:	6a03      	ldr	r3, [r0, #32]
{
 8004832:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004834:	f023 0310 	bic.w	r3, r3, #16
 8004838:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800483a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800483c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800483e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004840:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004842:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004846:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800484a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800484c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004850:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004854:	4d0b      	ldr	r5, [pc, #44]	; (8004884 <TIM_OC2_SetConfig+0x54>)
 8004856:	42a8      	cmp	r0, r5
 8004858:	d10d      	bne.n	8004876 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800485a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800485c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004860:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004864:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004868:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800486c:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800486e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004872:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8004876:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004878:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800487a:	684a      	ldr	r2, [r1, #4]
 800487c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800487e:	6203      	str	r3, [r0, #32]
}
 8004880:	bd70      	pop	{r4, r5, r6, pc}
 8004882:	bf00      	nop
 8004884:	40012c00 	.word	0x40012c00

08004888 <HAL_TIM_PWM_ConfigChannel>:
{
 8004888:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800488a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800488e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004890:	2b01      	cmp	r3, #1
 8004892:	f04f 0002 	mov.w	r0, #2
 8004896:	d025      	beq.n	80048e4 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8004898:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800489a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 800489e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 80048a2:	2a0c      	cmp	r2, #12
 80048a4:	d818      	bhi.n	80048d8 <HAL_TIM_PWM_ConfigChannel+0x50>
 80048a6:	e8df f002 	tbb	[pc, r2]
 80048aa:	1707      	.short	0x1707
 80048ac:	171e1717 	.word	0x171e1717
 80048b0:	172f1717 	.word	0x172f1717
 80048b4:	1717      	.short	0x1717
 80048b6:	40          	.byte	0x40
 80048b7:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048b8:	6820      	ldr	r0, [r4, #0]
 80048ba:	f7ff fef3 	bl	80046a4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048be:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048c0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048c2:	699a      	ldr	r2, [r3, #24]
 80048c4:	f042 0208 	orr.w	r2, r2, #8
 80048c8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048ca:	699a      	ldr	r2, [r3, #24]
 80048cc:	f022 0204 	bic.w	r2, r2, #4
 80048d0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048d2:	699a      	ldr	r2, [r3, #24]
 80048d4:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048d6:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80048d8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80048da:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80048dc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80048e0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80048e4:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048e6:	6820      	ldr	r0, [r4, #0]
 80048e8:	f7ff ffa2 	bl	8004830 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048ec:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048ee:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048f0:	699a      	ldr	r2, [r3, #24]
 80048f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048f8:	699a      	ldr	r2, [r3, #24]
 80048fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004900:	699a      	ldr	r2, [r3, #24]
 8004902:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004906:	e7e6      	b.n	80048d6 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004908:	6820      	ldr	r0, [r4, #0]
 800490a:	f7ff fef3 	bl	80046f4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800490e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004910:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004912:	69da      	ldr	r2, [r3, #28]
 8004914:	f042 0208 	orr.w	r2, r2, #8
 8004918:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800491a:	69da      	ldr	r2, [r3, #28]
 800491c:	f022 0204 	bic.w	r2, r2, #4
 8004920:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004922:	69da      	ldr	r2, [r3, #28]
 8004924:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004926:	61da      	str	r2, [r3, #28]
      break;
 8004928:	e7d6      	b.n	80048d8 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800492a:	6820      	ldr	r0, [r4, #0]
 800492c:	f7ff ff0c 	bl	8004748 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004930:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004932:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004934:	69da      	ldr	r2, [r3, #28]
 8004936:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800493a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800493c:	69da      	ldr	r2, [r3, #28]
 800493e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004942:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004944:	69da      	ldr	r2, [r3, #28]
 8004946:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800494a:	e7ec      	b.n	8004926 <HAL_TIM_PWM_ConfigChannel+0x9e>

0800494c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800494c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800494e:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004950:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004952:	f001 011f 	and.w	r1, r1, #31
 8004956:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8004958:	ea23 0304 	bic.w	r3, r3, r4
 800495c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800495e:	6a03      	ldr	r3, [r0, #32]
 8004960:	408a      	lsls	r2, r1
 8004962:	431a      	orrs	r2, r3
 8004964:	6202      	str	r2, [r0, #32]
}
 8004966:	bd10      	pop	{r4, pc}

08004968 <HAL_TIM_OC_Start>:
{
 8004968:	b510      	push	{r4, lr}
 800496a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800496c:	2201      	movs	r2, #1
 800496e:	6800      	ldr	r0, [r0, #0]
 8004970:	f7ff ffec 	bl	800494c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004974:	6823      	ldr	r3, [r4, #0]
 8004976:	4a09      	ldr	r2, [pc, #36]	; (800499c <HAL_TIM_OC_Start+0x34>)
}
 8004978:	2000      	movs	r0, #0
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800497a:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 800497c:	bf02      	ittt	eq
 800497e:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8004980:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8004984:	645a      	streq	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800498c:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 800498e:	bf1e      	ittt	ne
 8004990:	681a      	ldrne	r2, [r3, #0]
 8004992:	f042 0201 	orrne.w	r2, r2, #1
 8004996:	601a      	strne	r2, [r3, #0]
}
 8004998:	bd10      	pop	{r4, pc}
 800499a:	bf00      	nop
 800499c:	40012c00 	.word	0x40012c00

080049a0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049a0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80049a4:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	f04f 0302 	mov.w	r3, #2
 80049ac:	d014      	beq.n	80049d8 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049ae:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80049b0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80049b4:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049b6:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049b8:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049ba:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 80049bc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 80049c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049c4:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049c6:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049c8:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80049ca:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049cc:	2301      	movs	r3, #1
 80049ce:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049d2:	2300      	movs	r3, #0
 80049d4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80049d8:	4618      	mov	r0, r3

  return HAL_OK;
}
 80049da:	bd30      	pop	{r4, r5, pc}

080049dc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049dc:	6803      	ldr	r3, [r0, #0]
 80049de:	68da      	ldr	r2, [r3, #12]
 80049e0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80049e4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049e6:	695a      	ldr	r2, [r3, #20]
 80049e8:	f022 0201 	bic.w	r2, r2, #1
 80049ec:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049ee:	2320      	movs	r3, #32
 80049f0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 80049f4:	4770      	bx	lr
	...

080049f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049f8:	b538      	push	{r3, r4, r5, lr}
 80049fa:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049fc:	6803      	ldr	r3, [r0, #0]
 80049fe:	68c1      	ldr	r1, [r0, #12]
 8004a00:	691a      	ldr	r2, [r3, #16]
 8004a02:	2419      	movs	r4, #25
 8004a04:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004a0c:	6882      	ldr	r2, [r0, #8]
 8004a0e:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8004a10:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004a12:	4302      	orrs	r2, r0
 8004a14:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 8004a16:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8004a1a:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004a1e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8004a20:	430a      	orrs	r2, r1
 8004a22:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a24:	695a      	ldr	r2, [r3, #20]
 8004a26:	69a9      	ldr	r1, [r5, #24]
 8004a28:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004a30:	4a0d      	ldr	r2, [pc, #52]	; (8004a68 <UART_SetConfig+0x70>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d114      	bne.n	8004a60 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004a36:	f7ff fc39 	bl	80042ac <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a3a:	4360      	muls	r0, r4
 8004a3c:	686c      	ldr	r4, [r5, #4]
 8004a3e:	2264      	movs	r2, #100	; 0x64
 8004a40:	00a4      	lsls	r4, r4, #2
 8004a42:	fbb0 f0f4 	udiv	r0, r0, r4
 8004a46:	fbb0 f1f2 	udiv	r1, r0, r2
 8004a4a:	fb02 0311 	mls	r3, r2, r1, r0
 8004a4e:	011b      	lsls	r3, r3, #4
 8004a50:	3332      	adds	r3, #50	; 0x32
 8004a52:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a56:	682c      	ldr	r4, [r5, #0]
 8004a58:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8004a5c:	60a3      	str	r3, [r4, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 8004a5e:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8004a60:	f7ff fc14 	bl	800428c <HAL_RCC_GetPCLK1Freq>
 8004a64:	e7e9      	b.n	8004a3a <UART_SetConfig+0x42>
 8004a66:	bf00      	nop
 8004a68:	40013800 	.word	0x40013800

08004a6c <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8004a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a6e:	4604      	mov	r4, r0
 8004a70:	460e      	mov	r6, r1
 8004a72:	4617      	mov	r7, r2
 8004a74:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a76:	6821      	ldr	r1, [r4, #0]
 8004a78:	680b      	ldr	r3, [r1, #0]
 8004a7a:	ea36 0303 	bics.w	r3, r6, r3
 8004a7e:	d101      	bne.n	8004a84 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8004a80:	2000      	movs	r0, #0
 8004a82:	e014      	b.n	8004aae <UART_WaitOnFlagUntilTimeout.constprop.3+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8004a84:	1c6b      	adds	r3, r5, #1
 8004a86:	d0f7      	beq.n	8004a78 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a88:	b995      	cbnz	r5, 8004ab0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a8a:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8004a8c:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a8e:	68da      	ldr	r2, [r3, #12]
 8004a90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a94:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a96:	695a      	ldr	r2, [r3, #20]
 8004a98:	f022 0201 	bic.w	r2, r2, #1
 8004a9c:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8004a9e:	2320      	movs	r3, #32
 8004aa0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004aa4:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8004aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ab0:	f7fe fa4e 	bl	8002f50 <HAL_GetTick>
 8004ab4:	1bc0      	subs	r0, r0, r7
 8004ab6:	4285      	cmp	r5, r0
 8004ab8:	d2dd      	bcs.n	8004a76 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8004aba:	e7e6      	b.n	8004a8a <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08004abc <HAL_UART_Init>:
{
 8004abc:	b510      	push	{r4, lr}
  if (huart == NULL)
 8004abe:	4604      	mov	r4, r0
 8004ac0:	b340      	cbz	r0, 8004b14 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004ac2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004ac6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004aca:	b91b      	cbnz	r3, 8004ad4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8004acc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8004ad0:	f7fe f8ec 	bl	8002cac <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8004ad4:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8004ad6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004ad8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8004adc:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8004ade:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8004ae0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ae4:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004ae6:	f7ff ff87 	bl	80049f8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aea:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aec:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aee:	691a      	ldr	r2, [r3, #16]
 8004af0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004af4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004af6:	695a      	ldr	r2, [r3, #20]
 8004af8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004afc:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8004afe:	68da      	ldr	r2, [r3, #12]
 8004b00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b04:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004b06:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b08:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004b0a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004b0e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8004b12:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004b14:	2001      	movs	r0, #1
 8004b16:	e7fc      	b.n	8004b12 <HAL_UART_Init+0x56>

08004b18 <HAL_UART_Transmit>:
{
 8004b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b1c:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8004b1e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8004b22:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8004b24:	2b20      	cmp	r3, #32
{
 8004b26:	460d      	mov	r5, r1
 8004b28:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8004b2a:	d14c      	bne.n	8004bc6 <HAL_UART_Transmit+0xae>
    if ((pData == NULL) || (Size == 0U))
 8004b2c:	2900      	cmp	r1, #0
 8004b2e:	d048      	beq.n	8004bc2 <HAL_UART_Transmit+0xaa>
 8004b30:	2a00      	cmp	r2, #0
 8004b32:	d046      	beq.n	8004bc2 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 8004b34:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d044      	beq.n	8004bc6 <HAL_UART_Transmit+0xae>
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b42:	2300      	movs	r3, #0
 8004b44:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b46:	2321      	movs	r3, #33	; 0x21
 8004b48:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8004b4c:	f7fe fa00 	bl	8002f50 <HAL_GetTick>
 8004b50:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8004b52:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b56:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004b5a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	b963      	cbnz	r3, 8004b7a <HAL_UART_Transmit+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b60:	463b      	mov	r3, r7
 8004b62:	4632      	mov	r2, r6
 8004b64:	2140      	movs	r1, #64	; 0x40
 8004b66:	4620      	mov	r0, r4
 8004b68:	f7ff ff80 	bl	8004a6c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8004b6c:	b9a0      	cbnz	r0, 8004b98 <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 8004b6e:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8004b70:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8004b74:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8004b78:	e00f      	b.n	8004b9a <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 8004b7a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b7c:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004b84:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b86:	2180      	movs	r1, #128	; 0x80
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b8c:	4620      	mov	r0, r4
 8004b8e:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004b90:	d10e      	bne.n	8004bb0 <HAL_UART_Transmit+0x98>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b92:	f7ff ff6b 	bl	8004a6c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8004b96:	b110      	cbz	r0, 8004b9e <HAL_UART_Transmit+0x86>
          return HAL_TIMEOUT;
 8004b98:	2003      	movs	r0, #3
}
 8004b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004b9e:	882b      	ldrh	r3, [r5, #0]
 8004ba0:	6822      	ldr	r2, [r4, #0]
 8004ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ba6:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004ba8:	6923      	ldr	r3, [r4, #16]
 8004baa:	b943      	cbnz	r3, 8004bbe <HAL_UART_Transmit+0xa6>
          pData += 2U;
 8004bac:	3502      	adds	r5, #2
 8004bae:	e7d4      	b.n	8004b5a <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bb0:	f7ff ff5c 	bl	8004a6c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8004bb4:	2800      	cmp	r0, #0
 8004bb6:	d1ef      	bne.n	8004b98 <HAL_UART_Transmit+0x80>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004bb8:	6823      	ldr	r3, [r4, #0]
 8004bba:	782a      	ldrb	r2, [r5, #0]
 8004bbc:	605a      	str	r2, [r3, #4]
 8004bbe:	3501      	adds	r5, #1
 8004bc0:	e7cb      	b.n	8004b5a <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8004bc2:	2001      	movs	r0, #1
 8004bc4:	e7e9      	b.n	8004b9a <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8004bc6:	2002      	movs	r0, #2
 8004bc8:	e7e7      	b.n	8004b9a <HAL_UART_Transmit+0x82>

08004bca <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bca:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8004bce:	2b20      	cmp	r3, #32
 8004bd0:	d120      	bne.n	8004c14 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8004bd2:	b1e9      	cbz	r1, 8004c10 <HAL_UART_Receive_IT+0x46>
 8004bd4:	b1e2      	cbz	r2, 8004c10 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 8004bd6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d01a      	beq.n	8004c14 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 8004bde:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8004be0:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004be2:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004be4:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004be6:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004be8:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004bec:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8004bee:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004bf0:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 8004bf2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004bf6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8004bfa:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004bfc:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 8004bfe:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004c00:	f041 0101 	orr.w	r1, r1, #1
 8004c04:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004c06:	68d1      	ldr	r1, [r2, #12]
 8004c08:	f041 0120 	orr.w	r1, r1, #32
 8004c0c:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8004c0e:	4770      	bx	lr
      return HAL_ERROR;
 8004c10:	2001      	movs	r0, #1
 8004c12:	4770      	bx	lr
    return HAL_BUSY;
 8004c14:	2002      	movs	r0, #2
}
 8004c16:	4770      	bx	lr

08004c18 <HAL_UART_TxCpltCallback>:
 8004c18:	4770      	bx	lr

08004c1a <HAL_UART_RxCpltCallback>:
 8004c1a:	4770      	bx	lr

08004c1c <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c1c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8004c20:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c22:	2b22      	cmp	r3, #34	; 0x22
 8004c24:	d133      	bne.n	8004c8e <UART_Receive_IT+0x72>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004c26:	6881      	ldr	r1, [r0, #8]
 8004c28:	6904      	ldr	r4, [r0, #16]
 8004c2a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8004c2e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004c30:	6802      	ldr	r2, [r0, #0]
 8004c32:	d123      	bne.n	8004c7c <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c34:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004c36:	b9ec      	cbnz	r4, 8004c74 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c3c:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8004c40:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8004c42:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8004c44:	3c01      	subs	r4, #1
 8004c46:	b2a4      	uxth	r4, r4
 8004c48:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8004c4a:	b98c      	cbnz	r4, 8004c70 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c4c:	6803      	ldr	r3, [r0, #0]
 8004c4e:	68da      	ldr	r2, [r3, #12]
 8004c50:	f022 0220 	bic.w	r2, r2, #32
 8004c54:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c56:	68da      	ldr	r2, [r3, #12]
 8004c58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c5c:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c5e:	695a      	ldr	r2, [r3, #20]
 8004c60:	f022 0201 	bic.w	r2, r2, #1
 8004c64:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004c66:	2320      	movs	r3, #32
 8004c68:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8004c6c:	f7ff ffd5 	bl	8004c1a <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8004c70:	2000      	movs	r0, #0
 8004c72:	e00d      	b.n	8004c90 <UART_Receive_IT+0x74>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004c74:	b2d2      	uxtb	r2, r2
 8004c76:	f823 2b01 	strh.w	r2, [r3], #1
 8004c7a:	e7e1      	b.n	8004c40 <UART_Receive_IT+0x24>
 8004c7c:	1c59      	adds	r1, r3, #1
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c7e:	6852      	ldr	r2, [r2, #4]
 8004c80:	6281      	str	r1, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004c82:	b90c      	cbnz	r4, 8004c88 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c84:	701a      	strb	r2, [r3, #0]
 8004c86:	e7dc      	b.n	8004c42 <UART_Receive_IT+0x26>
 8004c88:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c8c:	e7fa      	b.n	8004c84 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8004c8e:	2002      	movs	r0, #2
}
 8004c90:	bd10      	pop	{r4, pc}

08004c92 <HAL_UART_ErrorCallback>:
 8004c92:	4770      	bx	lr

08004c94 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c94:	6803      	ldr	r3, [r0, #0]
{
 8004c96:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c98:	681a      	ldr	r2, [r3, #0]
{
 8004c9a:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8004c9c:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c9e:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ca0:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8004ca2:	d107      	bne.n	8004cb4 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ca4:	0696      	lsls	r6, r2, #26
 8004ca6:	d558      	bpl.n	8004d5a <HAL_UART_IRQHandler+0xc6>
 8004ca8:	068d      	lsls	r5, r1, #26
 8004caa:	d556      	bpl.n	8004d5a <HAL_UART_IRQHandler+0xc6>
}
 8004cac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8004cb0:	f7ff bfb4 	b.w	8004c1c <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004cb4:	f015 0501 	ands.w	r5, r5, #1
 8004cb8:	d102      	bne.n	8004cc0 <HAL_UART_IRQHandler+0x2c>
 8004cba:	f411 7f90 	tst.w	r1, #288	; 0x120
 8004cbe:	d04c      	beq.n	8004d5a <HAL_UART_IRQHandler+0xc6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004cc0:	07d3      	lsls	r3, r2, #31
 8004cc2:	d505      	bpl.n	8004cd0 <HAL_UART_IRQHandler+0x3c>
 8004cc4:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cc6:	bf42      	ittt	mi
 8004cc8:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8004cca:	f043 0301 	orrmi.w	r3, r3, #1
 8004cce:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cd0:	0750      	lsls	r0, r2, #29
 8004cd2:	d504      	bpl.n	8004cde <HAL_UART_IRQHandler+0x4a>
 8004cd4:	b11d      	cbz	r5, 8004cde <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cd6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004cd8:	f043 0302 	orr.w	r3, r3, #2
 8004cdc:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cde:	0793      	lsls	r3, r2, #30
 8004ce0:	d504      	bpl.n	8004cec <HAL_UART_IRQHandler+0x58>
 8004ce2:	b11d      	cbz	r5, 8004cec <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ce4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004ce6:	f043 0304 	orr.w	r3, r3, #4
 8004cea:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cec:	0716      	lsls	r6, r2, #28
 8004cee:	d504      	bpl.n	8004cfa <HAL_UART_IRQHandler+0x66>
 8004cf0:	b11d      	cbz	r5, 8004cfa <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cf2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004cf4:	f043 0308 	orr.w	r3, r3, #8
 8004cf8:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004cfa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004cfc:	b343      	cbz	r3, 8004d50 <HAL_UART_IRQHandler+0xbc>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cfe:	0695      	lsls	r5, r2, #26
 8004d00:	d504      	bpl.n	8004d0c <HAL_UART_IRQHandler+0x78>
 8004d02:	0688      	lsls	r0, r1, #26
 8004d04:	d502      	bpl.n	8004d0c <HAL_UART_IRQHandler+0x78>
        UART_Receive_IT(huart);
 8004d06:	4620      	mov	r0, r4
 8004d08:	f7ff ff88 	bl	8004c1c <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d0c:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8004d0e:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d10:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d12:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004d14:	0711      	lsls	r1, r2, #28
 8004d16:	d402      	bmi.n	8004d1e <HAL_UART_IRQHandler+0x8a>
 8004d18:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8004d1c:	d019      	beq.n	8004d52 <HAL_UART_IRQHandler+0xbe>
        UART_EndRxTransfer(huart);
 8004d1e:	f7ff fe5d 	bl	80049dc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d22:	6823      	ldr	r3, [r4, #0]
 8004d24:	695a      	ldr	r2, [r3, #20]
 8004d26:	0652      	lsls	r2, r2, #25
 8004d28:	d50f      	bpl.n	8004d4a <HAL_UART_IRQHandler+0xb6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d2a:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8004d2c:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d32:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8004d34:	b148      	cbz	r0, 8004d4a <HAL_UART_IRQHandler+0xb6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d36:	4b26      	ldr	r3, [pc, #152]	; (8004dd0 <HAL_UART_IRQHandler+0x13c>)
 8004d38:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d3a:	f7fe f98b 	bl	8003054 <HAL_DMA_Abort_IT>
 8004d3e:	b138      	cbz	r0, 8004d50 <HAL_UART_IRQHandler+0xbc>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d40:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8004d42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d46:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004d48:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8004d4a:	4620      	mov	r0, r4
 8004d4c:	f7ff ffa1 	bl	8004c92 <HAL_UART_ErrorCallback>
}
 8004d50:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8004d52:	f7ff ff9e 	bl	8004c92 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d56:	63e5      	str	r5, [r4, #60]	; 0x3c
 8004d58:	e7fa      	b.n	8004d50 <HAL_UART_IRQHandler+0xbc>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d5a:	0616      	lsls	r6, r2, #24
 8004d5c:	d528      	bpl.n	8004db0 <HAL_UART_IRQHandler+0x11c>
 8004d5e:	060d      	lsls	r5, r1, #24
 8004d60:	d526      	bpl.n	8004db0 <HAL_UART_IRQHandler+0x11c>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d62:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8004d66:	2a21      	cmp	r2, #33	; 0x21
 8004d68:	d1f2      	bne.n	8004d50 <HAL_UART_IRQHandler+0xbc>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004d6a:	68a1      	ldr	r1, [r4, #8]
 8004d6c:	6a22      	ldr	r2, [r4, #32]
 8004d6e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8004d72:	d118      	bne.n	8004da6 <HAL_UART_IRQHandler+0x112>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d74:	8811      	ldrh	r1, [r2, #0]
 8004d76:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004d7a:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004d7c:	6921      	ldr	r1, [r4, #16]
 8004d7e:	b981      	cbnz	r1, 8004da2 <HAL_UART_IRQHandler+0x10e>
        huart->pTxBuffPtr += 2U;
 8004d80:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8004d82:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8004d84:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8004d86:	3a01      	subs	r2, #1
 8004d88:	b292      	uxth	r2, r2
 8004d8a:	84e2      	strh	r2, [r4, #38]	; 0x26
 8004d8c:	2a00      	cmp	r2, #0
 8004d8e:	d1df      	bne.n	8004d50 <HAL_UART_IRQHandler+0xbc>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d90:	68da      	ldr	r2, [r3, #12]
 8004d92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d96:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d98:	68da      	ldr	r2, [r3, #12]
 8004d9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d9e:	60da      	str	r2, [r3, #12]
 8004da0:	e7d6      	b.n	8004d50 <HAL_UART_IRQHandler+0xbc>
        huart->pTxBuffPtr += 1U;
 8004da2:	3201      	adds	r2, #1
 8004da4:	e7ed      	b.n	8004d82 <HAL_UART_IRQHandler+0xee>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004da6:	1c51      	adds	r1, r2, #1
 8004da8:	6221      	str	r1, [r4, #32]
 8004daa:	7812      	ldrb	r2, [r2, #0]
 8004dac:	605a      	str	r2, [r3, #4]
 8004dae:	e7e9      	b.n	8004d84 <HAL_UART_IRQHandler+0xf0>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004db0:	0650      	lsls	r0, r2, #25
 8004db2:	d5cd      	bpl.n	8004d50 <HAL_UART_IRQHandler+0xbc>
 8004db4:	064a      	lsls	r2, r1, #25
 8004db6:	d5cb      	bpl.n	8004d50 <HAL_UART_IRQHandler+0xbc>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004db8:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8004dba:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004dbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dc0:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004dc2:	2320      	movs	r3, #32
 8004dc4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8004dc8:	f7ff ff26 	bl	8004c18 <HAL_UART_TxCpltCallback>
 8004dcc:	e7c0      	b.n	8004d50 <HAL_UART_IRQHandler+0xbc>
 8004dce:	bf00      	nop
 8004dd0:	08004dd5 	.word	0x08004dd5

08004dd4 <UART_DMAAbortOnError>:
{
 8004dd4:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8004dd6:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dd8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8004dda:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ddc:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8004dde:	f7ff ff58 	bl	8004c92 <HAL_UART_ErrorCallback>
}
 8004de2:	bd08      	pop	{r3, pc}

08004de4 <disk_status>:
DSTATUS disk_status (
		BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
	return 0;
}
 8004de4:	2000      	movs	r0, #0
 8004de6:	4770      	bx	lr

08004de8 <disk_initialize>:

DSTATUS disk_initialize (
		BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
	Stat &= ~STA_NOINIT;
 8004de8:	4a03      	ldr	r2, [pc, #12]	; (8004df8 <disk_initialize+0x10>)
	return 0;
}
 8004dea:	2000      	movs	r0, #0
	Stat &= ~STA_NOINIT;
 8004dec:	7813      	ldrb	r3, [r2, #0]
 8004dee:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004df2:	7013      	strb	r3, [r2, #0]
}
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	2000001c 	.word	0x2000001c

08004dfc <disk_read>:
		BYTE pdrv,		/* Physical drive nmuber to identify the drive */
		BYTE *buff,		/* Data buffer to store read data */
		LBA_t sector,	/* Start sector in LBA */
		UINT count		/* Number of sectors to read */
)
{
 8004dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfe:	4604      	mov	r4, r0
 8004e00:	460e      	mov	r6, r1
	/* USER CODE BEGIN READ */
#ifdef SD_DEBUG
	sprintf(str1,"disk.cpp disk_read()  sector: %lu; count: %d\r\n",sector, count);
 8004e02:	4818      	ldr	r0, [pc, #96]	; (8004e64 <disk_read+0x68>)
 8004e04:	4918      	ldr	r1, [pc, #96]	; (8004e68 <disk_read+0x6c>)
{
 8004e06:	4617      	mov	r7, r2
 8004e08:	461d      	mov	r5, r3
	sprintf(str1,"disk.cpp disk_read()  sector: %lu; count: %d\r\n",sector, count);
 8004e0a:	f005 fa5f 	bl	800a2cc <siprintf>
	HAL_UART_Transmit(&huart3,(uint8_t*)str1,strlen(str1),0x1000);
 8004e0e:	4815      	ldr	r0, [pc, #84]	; (8004e64 <disk_read+0x68>)
 8004e10:	f7fb f99e 	bl	8000150 <strlen>
 8004e14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e18:	b282      	uxth	r2, r0
 8004e1a:	4912      	ldr	r1, [pc, #72]	; (8004e64 <disk_read+0x68>)
 8004e1c:	4813      	ldr	r0, [pc, #76]	; (8004e6c <disk_read+0x70>)
 8004e1e:	f7ff fe7b 	bl	8004b18 <HAL_UART_Transmit>
#endif

	if (pdrv || !count) return RES_PARERR;
 8004e22:	b9d4      	cbnz	r4, 8004e5a <disk_read+0x5e>
 8004e24:	b1cd      	cbz	r5, 8004e5a <disk_read+0x5e>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004e26:	4b12      	ldr	r3, [pc, #72]	; (8004e70 <disk_read+0x74>)
 8004e28:	7818      	ldrb	r0, [r3, #0]
 8004e2a:	f010 0401 	ands.w	r4, r0, #1
 8004e2e:	d116      	bne.n	8004e5e <disk_read+0x62>
	 sector *= 512; /* Convert to byte address if needed  if (!(sdinfo.type & 4)) */

	if (count == 1) /* Single block read */
 8004e30:	2d01      	cmp	r5, #1
 8004e32:	d107      	bne.n	8004e44 <disk_read+0x48>
	{
		SD_Read_Block(buff,sector); //Ñ÷èòàåì áëîê â áóôåð
 8004e34:	0279      	lsls	r1, r7, #9
 8004e36:	4630      	mov	r0, r6
 8004e38:	f7fd fb50 	bl	80024dc <_Z13SD_Read_BlockPhm>
	{

		HAL_UART_Transmit(&huart3,(uint8_t*)"Multiple R\r\n",12,0x1000);

	}
	SPI_Release();
 8004e3c:	f7fd fae1 	bl	8002402 <_Z11SPI_Releasev>
	return count ? RES_ERROR : RES_OK;
 8004e40:	4620      	mov	r0, r4
	return RES_OK;
	/* USER CODE END READ */
}
 8004e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		HAL_UART_Transmit(&huart3,(uint8_t*)"Multiple R\r\n",12,0x1000);
 8004e44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e48:	220c      	movs	r2, #12
 8004e4a:	490a      	ldr	r1, [pc, #40]	; (8004e74 <disk_read+0x78>)
 8004e4c:	4807      	ldr	r0, [pc, #28]	; (8004e6c <disk_read+0x70>)
 8004e4e:	f7ff fe63 	bl	8004b18 <HAL_UART_Transmit>
	SPI_Release();
 8004e52:	f7fd fad6 	bl	8002402 <_Z11SPI_Releasev>
	return count ? RES_ERROR : RES_OK;
 8004e56:	2001      	movs	r0, #1
 8004e58:	e7f3      	b.n	8004e42 <disk_read+0x46>
	if (pdrv || !count) return RES_PARERR;
 8004e5a:	2004      	movs	r0, #4
 8004e5c:	e7f1      	b.n	8004e42 <disk_read+0x46>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004e5e:	2003      	movs	r0, #3
 8004e60:	e7ef      	b.n	8004e42 <disk_read+0x46>
 8004e62:	bf00      	nop
 8004e64:	2000049a 	.word	0x2000049a
 8004e68:	0800c602 	.word	0x0800c602
 8004e6c:	20000408 	.word	0x20000408
 8004e70:	2000001c 	.word	0x2000001c
 8004e74:	0800c631 	.word	0x0800c631

08004e78 <disk_write>:
		BYTE pdrv,			/* Physical drive nmuber to identify the drive */
		const BYTE *buff,	/* Data to be written */
		LBA_t sector,		/* Start sector in LBA */
		UINT count			/* Number of sectors to write */
)
{
 8004e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e7a:	4604      	mov	r4, r0
 8004e7c:	460e      	mov	r6, r1
#ifdef SD_DEBUG
	sprintf(str1,"disk.cpp disk_write()  sector: %lu; count: %d\r\n",sector, count);
 8004e7e:	4817      	ldr	r0, [pc, #92]	; (8004edc <disk_write+0x64>)
 8004e80:	4917      	ldr	r1, [pc, #92]	; (8004ee0 <disk_write+0x68>)
{
 8004e82:	4617      	mov	r7, r2
 8004e84:	461d      	mov	r5, r3
	sprintf(str1,"disk.cpp disk_write()  sector: %lu; count: %d\r\n",sector, count);
 8004e86:	f005 fa21 	bl	800a2cc <siprintf>
	HAL_UART_Transmit(&huart3,(uint8_t*)str1,strlen(str1),0x1000);
 8004e8a:	4814      	ldr	r0, [pc, #80]	; (8004edc <disk_write+0x64>)
 8004e8c:	f7fb f960 	bl	8000150 <strlen>
 8004e90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e94:	b282      	uxth	r2, r0
 8004e96:	4911      	ldr	r1, [pc, #68]	; (8004edc <disk_write+0x64>)
 8004e98:	4812      	ldr	r0, [pc, #72]	; (8004ee4 <disk_write+0x6c>)
 8004e9a:	f7ff fe3d 	bl	8004b18 <HAL_UART_Transmit>
#endif

	if (pdrv || !count) return RES_PARERR;
 8004e9e:	b9b4      	cbnz	r4, 8004ece <disk_write+0x56>
 8004ea0:	b1ad      	cbz	r5, 8004ece <disk_write+0x56>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004ea2:	4b11      	ldr	r3, [pc, #68]	; (8004ee8 <disk_write+0x70>)
 8004ea4:	781a      	ldrb	r2, [r3, #0]
 8004ea6:	07d2      	lsls	r2, r2, #31
 8004ea8:	d413      	bmi.n	8004ed2 <disk_write+0x5a>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8004eaa:	7818      	ldrb	r0, [r3, #0]
 8004eac:	f010 0404 	ands.w	r4, r0, #4
 8004eb0:	d111      	bne.n	8004ed6 <disk_write+0x5e>

		sector *= 512;
	 /* Convert to byte address if needed */
	if (count == 1) /* Single block read */
 8004eb2:	2d01      	cmp	r5, #1
 8004eb4:	d107      	bne.n	8004ec6 <disk_write+0x4e>
	{
		SD_Write_Block((BYTE*)buff,sector); //Ñ÷èòàåì áëîê â áóôåð
 8004eb6:	0279      	lsls	r1, r7, #9
 8004eb8:	4630      	mov	r0, r6
 8004eba:	f7fd fbbb 	bl	8002634 <_Z14SD_Write_BlockPhm>
	}
	else /* Multiple block read */
	{
		//	HAL_UART_Transmit(&huart3,(uint8_t*)"Multiple W\r\n",12,0x1000);
	}
	SPI_Release();
 8004ebe:	f7fd faa0 	bl	8002402 <_Z11SPI_Releasev>
	return count ? RES_ERROR : RES_OK;
 8004ec2:	4620      	mov	r0, r4
}
 8004ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	SPI_Release();
 8004ec6:	f7fd fa9c 	bl	8002402 <_Z11SPI_Releasev>
	return count ? RES_ERROR : RES_OK;
 8004eca:	2001      	movs	r0, #1
 8004ecc:	e7fa      	b.n	8004ec4 <disk_write+0x4c>
	if (pdrv || !count) return RES_PARERR;
 8004ece:	2004      	movs	r0, #4
 8004ed0:	e7f8      	b.n	8004ec4 <disk_write+0x4c>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004ed2:	2003      	movs	r0, #3
 8004ed4:	e7f6      	b.n	8004ec4 <disk_write+0x4c>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8004ed6:	2002      	movs	r0, #2
 8004ed8:	e7f4      	b.n	8004ec4 <disk_write+0x4c>
 8004eda:	bf00      	nop
 8004edc:	2000049a 	.word	0x2000049a
 8004ee0:	0800c63e 	.word	0x0800c63e
 8004ee4:	20000408 	.word	0x20000408
 8004ee8:	2000001c 	.word	0x2000001c

08004eec <disk_ioctl>:
DRESULT disk_ioctl (
		BYTE pdrv,		/* Physical drive nmuber (0..) */
		BYTE cmd,		/* Control code */
		void *buff		/* Buffer to send/receive control data */
)
{
 8004eec:	b570      	push	{r4, r5, r6, lr}
 8004eee:	4604      	mov	r4, r0
 8004ef0:	460d      	mov	r5, r1
 8004ef2:	4616      	mov	r6, r2

	DRESULT res;

#ifdef SD_DEBUG
	sprintf(str1,"disk.cpp disk_ioctl()  CMD: %d\r\n",cmd);
 8004ef4:	4818      	ldr	r0, [pc, #96]	; (8004f58 <disk_ioctl+0x6c>)
 8004ef6:	460a      	mov	r2, r1
 8004ef8:	4918      	ldr	r1, [pc, #96]	; (8004f5c <disk_ioctl+0x70>)
 8004efa:	f005 f9e7 	bl	800a2cc <siprintf>
	HAL_UART_Transmit(&huart3,(uint8_t*)str1,strlen(str1),0x1000);
 8004efe:	4816      	ldr	r0, [pc, #88]	; (8004f58 <disk_ioctl+0x6c>)
 8004f00:	f7fb f926 	bl	8000150 <strlen>
 8004f04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f08:	b282      	uxth	r2, r0
 8004f0a:	4913      	ldr	r1, [pc, #76]	; (8004f58 <disk_ioctl+0x6c>)
 8004f0c:	4814      	ldr	r0, [pc, #80]	; (8004f60 <disk_ioctl+0x74>)
 8004f0e:	f7ff fe03 	bl	8004b18 <HAL_UART_Transmit>
#endif
	if (pdrv) return RES_PARERR;
 8004f12:	b9e4      	cbnz	r4, 8004f4e <disk_ioctl+0x62>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004f14:	4b13      	ldr	r3, [pc, #76]	; (8004f64 <disk_ioctl+0x78>)
 8004f16:	781c      	ldrb	r4, [r3, #0]
 8004f18:	f014 0401 	ands.w	r4, r4, #1
 8004f1c:	d119      	bne.n	8004f52 <disk_ioctl+0x66>
	res = RES_ERROR;
	switch (cmd)
 8004f1e:	b11d      	cbz	r5, 8004f28 <disk_ioctl+0x3c>
 8004f20:	2d02      	cmp	r5, #2
 8004f22:	d010      	beq.n	8004f46 <disk_ioctl+0x5a>
		res = RES_OK;
		break;


	default:
		res = RES_PARERR;
 8004f24:	2404      	movs	r4, #4
 8004f26:	e00a      	b.n	8004f3e <disk_ioctl+0x52>
		SS_SD_SELECT();
 8004f28:	462a      	mov	r2, r5
 8004f2a:	2140      	movs	r1, #64	; 0x40
 8004f2c:	480e      	ldr	r0, [pc, #56]	; (8004f68 <disk_ioctl+0x7c>)
 8004f2e:	f7fe f9bf 	bl	80032b0 <HAL_GPIO_WritePin>
		if (SPI_wait_ready() == 0xFF)
 8004f32:	f7fd fa69 	bl	8002408 <_Z14SPI_wait_readyv>
			res = RES_OK;
 8004f36:	f1b0 04ff 	subs.w	r4, r0, #255	; 0xff
 8004f3a:	bf18      	it	ne
 8004f3c:	2401      	movne	r4, #1
	}
	SPI_Release();
 8004f3e:	f7fd fa60 	bl	8002402 <_Z11SPI_Releasev>
	return res;
}
 8004f42:	4620      	mov	r0, r4
 8004f44:	bd70      	pop	{r4, r5, r6, pc}
		*(WORD*)buff = 512;
 8004f46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f4a:	8033      	strh	r3, [r6, #0]
		break;
 8004f4c:	e7f7      	b.n	8004f3e <disk_ioctl+0x52>
	if (pdrv) return RES_PARERR;
 8004f4e:	2404      	movs	r4, #4
 8004f50:	e7f7      	b.n	8004f42 <disk_ioctl+0x56>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004f52:	2403      	movs	r4, #3
 8004f54:	e7f5      	b.n	8004f42 <disk_ioctl+0x56>
 8004f56:	bf00      	nop
 8004f58:	2000049a 	.word	0x2000049a
 8004f5c:	0800c5e1 	.word	0x0800c5e1
 8004f60:	20000408 	.word	0x20000408
 8004f64:	2000001c 	.word	0x2000001c
 8004f68:	40010800 	.word	0x40010800

08004f6c <ld_dword>:
static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 8004f6c:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 8004f6e:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 8004f70:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 8004f72:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return rv;
}
 8004f76:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8004f7a:	4770      	bx	lr

08004f7c <ld_qword>:

#if FF_FS_EXFAT
static QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8004f7c:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}

	rv = ptr[7];
	rv = rv << 8 | ptr[6];
	rv = rv << 8 | ptr[5];
	rv = rv << 8 | ptr[4];
	rv = rv << 8 | ptr[3];
 8004f80:	2500      	movs	r5, #0
	rv = rv << 8 | ptr[4];
 8004f82:	6841      	ldr	r1, [r0, #4]
	rv = rv << 8 | ptr[3];
 8004f84:	78c4      	ldrb	r4, [r0, #3]
 8004f86:	0e0b      	lsrs	r3, r1, #24
 8004f88:	ea45 0c03 	orr.w	ip, r5, r3
	rv = rv << 8 | ptr[2];
 8004f8c:	2500      	movs	r5, #0
	rv = rv << 8 | ptr[3];
 8004f8e:	020a      	lsls	r2, r1, #8
 8004f90:	ea44 0b02 	orr.w	fp, r4, r2
	rv = rv << 8 | ptr[2];
 8004f94:	ea4f 230c 	mov.w	r3, ip, lsl #8
 8004f98:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
 8004f9c:	ea45 0c03 	orr.w	ip, r5, r3
	rv = rv << 8 | ptr[1];
 8004fa0:	2500      	movs	r5, #0
	rv = rv << 8 | ptr[2];
 8004fa2:	7884      	ldrb	r4, [r0, #2]
 8004fa4:	ea4f 220b 	mov.w	r2, fp, lsl #8
 8004fa8:	ea44 0b02 	orr.w	fp, r4, r2
	rv = rv << 8 | ptr[1];
 8004fac:	ea4f 230c 	mov.w	r3, ip, lsl #8
 8004fb0:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
 8004fb4:	ea45 0c03 	orr.w	ip, r5, r3
	rv = rv << 8 | ptr[0];
 8004fb8:	2500      	movs	r5, #0
	rv = rv << 8 | ptr[1];
 8004fba:	7844      	ldrb	r4, [r0, #1]
 8004fbc:	ea4f 220b 	mov.w	r2, fp, lsl #8
 8004fc0:	ea44 0b02 	orr.w	fp, r4, r2
	rv = rv << 8 | ptr[0];
 8004fc4:	ea4f 230c 	mov.w	r3, ip, lsl #8
 8004fc8:	7804      	ldrb	r4, [r0, #0]
 8004fca:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
 8004fce:	ea4f 220b 	mov.w	r2, fp, lsl #8
	return rv;
}
 8004fd2:	ea44 0002 	orr.w	r0, r4, r2
 8004fd6:	ea45 0103 	orr.w	r1, r5, r3
 8004fda:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}

08004fde <st_dword>:
	*ptr++ = (BYTE)val;
}

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8004fde:	0a0b      	lsrs	r3, r1, #8
 8004fe0:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004fe2:	7043      	strb	r3, [r0, #1]
 8004fe4:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8004fe6:	0e09      	lsrs	r1, r1, #24
 8004fe8:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8004fea:	70c1      	strb	r1, [r0, #3]
}
 8004fec:	4770      	bx	lr

08004fee <st_qword>:

#if FF_FS_EXFAT
static void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8004fee:	0a11      	lsrs	r1, r2, #8
 8004ff0:	7002      	strb	r2, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004ff2:	7041      	strb	r1, [r0, #1]
 8004ff4:	0c11      	lsrs	r1, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8004ff6:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8004ff8:	70c2      	strb	r2, [r0, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 8004ffa:	0a1a      	lsrs	r2, r3, #8
 8004ffc:	7103      	strb	r3, [r0, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8004ffe:	7142      	strb	r2, [r0, #5]
 8005000:	0c1a      	lsrs	r2, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8005002:	0e1b      	lsrs	r3, r3, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8005004:	7081      	strb	r1, [r0, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005006:	7182      	strb	r2, [r0, #6]
	*ptr++ = (BYTE)val;
 8005008:	71c3      	strb	r3, [r0, #7]
}
 800500a:	4770      	bx	lr

0800500c <mem_set>:
}


/* Fill memory block */
static void mem_set (void* dst, int val, UINT cnt)
{
 800500c:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 800500e:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 8005012:	4290      	cmp	r0, r2
 8005014:	d1fb      	bne.n	800500e <mem_set+0x2>
}
 8005016:	4770      	bx	lr

08005018 <mem_cmp>:


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
 8005018:	b510      	push	{r4, lr}
 800501a:	4402      	add	r2, r0
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 800501c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005020:	f811 4b01 	ldrb.w	r4, [r1], #1
	} while (--cnt && r == 0);
 8005024:	4290      	cmp	r0, r2
		r = *d++ - *s++;
 8005026:	eba3 0304 	sub.w	r3, r3, r4
	} while (--cnt && r == 0);
 800502a:	d001      	beq.n	8005030 <mem_cmp+0x18>
 800502c:	2b00      	cmp	r3, #0
 800502e:	d0f5      	beq.n	800501c <mem_cmp+0x4>

	return r;
}
 8005030:	4618      	mov	r0, r3
 8005032:	bd10      	pop	{r4, pc}

08005034 <clst2sect>:
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;		/* Cluster number is origin from 2 */
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8005034:	69c3      	ldr	r3, [r0, #28]
	clst -= 2;		/* Cluster number is origin from 2 */
 8005036:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8005038:	3b02      	subs	r3, #2
 800503a:	428b      	cmp	r3, r1
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 800503c:	bf83      	ittte	hi
 800503e:	8943      	ldrhhi	r3, [r0, #10]
 8005040:	6b00      	ldrhi	r0, [r0, #48]	; 0x30
 8005042:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8005046:	2000      	movls	r0, #0
}
 8005048:	4770      	bx	lr

0800504a <sum_sfn>:
/*-----------------------------------------------------------------------*/

static BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800504a:	4602      	mov	r2, r0
 800504c:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
 8005050:	2000      	movs	r0, #0
	UINT n = 11;

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005052:	01c3      	lsls	r3, r0, #7
 8005054:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 8005058:	f812 0b01 	ldrb.w	r0, [r2], #1
 800505c:	4403      	add	r3, r0
	} while (--n);
 800505e:	428a      	cmp	r2, r1
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005060:	f003 00ff 	and.w	r0, r3, #255	; 0xff
	} while (--n);
 8005064:	d1f5      	bne.n	8005052 <sum_sfn+0x8>
	return sum;
}
 8005066:	4770      	bx	lr

08005068 <xdir_sum>:
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
	for (i = sum = 0; i < szblk; i++) {
 8005068:	2300      	movs	r3, #0
 800506a:	461a      	mov	r2, r3
{
 800506c:	b510      	push	{r4, lr}
	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
 800506e:	7841      	ldrb	r1, [r0, #1]
 8005070:	3101      	adds	r1, #1
 8005072:	0149      	lsls	r1, r1, #5
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
 8005074:	2a02      	cmp	r2, #2
			i++;
 8005076:	bf0c      	ite	eq
 8005078:	2203      	moveq	r2, #3
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800507a:	5c84      	ldrbne	r4, [r0, r2]
	for (i = sum = 0; i < szblk; i++) {
 800507c:	f102 0201 	add.w	r2, r2, #1
 8005080:	bf1f      	itttt	ne
 8005082:	eb04 34c3 	addne.w	r4, r4, r3, lsl #15
 8005086:	b2a4      	uxthne	r4, r4
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8005088:	eb04 0353 	addne.w	r3, r4, r3, lsr #1
 800508c:	b29b      	uxthne	r3, r3
	for (i = sum = 0; i < szblk; i++) {
 800508e:	4291      	cmp	r1, r2
 8005090:	d8f0      	bhi.n	8005074 <xdir_sum+0xc>
		}
	}
	return sum;
}
 8005092:	4618      	mov	r0, r3
 8005094:	bd10      	pop	{r4, pc}

08005096 <get_ldnumber>:
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8005096:	6803      	ldr	r3, [r0, #0]
{
 8005098:	b510      	push	{r4, lr}
	if (!tp) return vol;	/* Invalid path name? */
 800509a:	b15b      	cbz	r3, 80050b4 <get_ldnumber+0x1e>
 800509c:	461a      	mov	r2, r3
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
 800509e:	f812 1b01 	ldrb.w	r1, [r2], #1
 80050a2:	291f      	cmp	r1, #31
 80050a4:	d90f      	bls.n	80050c6 <get_ldnumber+0x30>
 80050a6:	293a      	cmp	r1, #58	; 0x3a
 80050a8:	d1f9      	bne.n	800509e <get_ldnumber+0x8>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
		i = FF_VOLUMES;
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 80050aa:	7819      	ldrb	r1, [r3, #0]
 80050ac:	f1a1 0430 	sub.w	r4, r1, #48	; 0x30
 80050b0:	2c09      	cmp	r4, #9
 80050b2:	d902      	bls.n	80050ba <get_ldnumber+0x24>
	if (!tp) return vol;	/* Invalid path name? */
 80050b4:	f04f 30ff 	mov.w	r0, #4294967295
 80050b8:	e006      	b.n	80050c8 <get_ldnumber+0x32>
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 80050ba:	3302      	adds	r3, #2
 80050bc:	429a      	cmp	r2, r3
 80050be:	d1f9      	bne.n	80050b4 <get_ldnumber+0x1e>
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 80050c0:	2930      	cmp	r1, #48	; 0x30
 80050c2:	d1f7      	bne.n	80050b4 <get_ldnumber+0x1e>
			vol = i;		/* Drive number */
			*path = tt;		/* Snip the drive prefix off */
 80050c4:	6002      	str	r2, [r0, #0]
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
 80050c6:	2000      	movs	r0, #0
}
 80050c8:	bd10      	pop	{r4, pc}

080050ca <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 80050ca:	b538      	push	{r3, r4, r5, lr}
 80050cc:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80050ce:	4604      	mov	r4, r0
 80050d0:	b918      	cbnz	r0, 80050da <validate+0x10>
	FRESULT res = FR_INVALID_OBJECT;
 80050d2:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80050d4:	2300      	movs	r3, #0
 80050d6:	602b      	str	r3, [r5, #0]
	return res;
}
 80050d8:	bd38      	pop	{r3, r4, r5, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80050da:	6803      	ldr	r3, [r0, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d0f8      	beq.n	80050d2 <validate+0x8>
 80050e0:	781a      	ldrb	r2, [r3, #0]
 80050e2:	2a00      	cmp	r2, #0
 80050e4:	d0f5      	beq.n	80050d2 <validate+0x8>
 80050e6:	8881      	ldrh	r1, [r0, #4]
 80050e8:	88da      	ldrh	r2, [r3, #6]
 80050ea:	4291      	cmp	r1, r2
 80050ec:	d1f1      	bne.n	80050d2 <validate+0x8>
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80050ee:	7858      	ldrb	r0, [r3, #1]
 80050f0:	f7ff fe78 	bl	8004de4 <disk_status>
 80050f4:	f010 0001 	ands.w	r0, r0, #1
 80050f8:	d1eb      	bne.n	80050d2 <validate+0x8>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80050fa:	6823      	ldr	r3, [r4, #0]
 80050fc:	e7eb      	b.n	80050d6 <validate+0xc>

080050fe <xname_sum>:
{
 80050fe:	b538      	push	{r3, r4, r5, lr}
 8005100:	4605      	mov	r5, r0
	WORD sum = 0;
 8005102:	2400      	movs	r4, #0
	while ((chr = *name++) != 0) {
 8005104:	f835 0b02 	ldrh.w	r0, [r5], #2
 8005108:	b908      	cbnz	r0, 800510e <xname_sum+0x10>
}
 800510a:	4620      	mov	r0, r4
 800510c:	bd38      	pop	{r3, r4, r5, pc}
		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
 800510e:	f002 fb27 	bl	8007760 <ff_wtoupper>
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8005112:	0863      	lsrs	r3, r4, #1
		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
 8005114:	b280      	uxth	r0, r0
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8005116:	eb03 33c4 	add.w	r3, r3, r4, lsl #15
 800511a:	b2c2      	uxtb	r2, r0
 800511c:	4413      	add	r3, r2
 800511e:	b29b      	uxth	r3, r3
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8005120:	0a00      	lsrs	r0, r0, #8
 8005122:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8005126:	eb00 30c3 	add.w	r0, r0, r3, lsl #15
 800512a:	b284      	uxth	r4, r0
 800512c:	e7ea      	b.n	8005104 <xname_sum+0x6>

0800512e <mem_cpy.part.0>:
static void mem_cpy (void* dst, const void* src, UINT cnt)
 800512e:	3801      	subs	r0, #1
 8005130:	440a      	add	r2, r1
			*d++ = *s++;
 8005132:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
 8005136:	4291      	cmp	r1, r2
			*d++ = *s++;
 8005138:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 800513c:	d1f9      	bne.n	8005132 <mem_cpy.part.0+0x4>
}
 800513e:	4770      	bx	lr

08005140 <put_utf>:
	if (chr < 0x80) {	/* Single byte code? */
 8005140:	287f      	cmp	r0, #127	; 0x7f
 8005142:	d804      	bhi.n	800514e <put_utf+0xe>
		if (szb < 1) return 0;	/* Buffer overflow? */
 8005144:	2a00      	cmp	r2, #0
 8005146:	d054      	beq.n	80051f2 <put_utf+0xb2>
		*buf = (TCHAR)chr;
 8005148:	7008      	strb	r0, [r1, #0]
		return 1;
 800514a:	2001      	movs	r0, #1
 800514c:	4770      	bx	lr
	if (chr < 0x800) {	/* 2-byte sequence? */
 800514e:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8005152:	d20c      	bcs.n	800516e <put_utf+0x2e>
		if (szb < 2) return 0;	/* Buffer overflow? */
 8005154:	2a01      	cmp	r2, #1
 8005156:	d94c      	bls.n	80051f2 <put_utf+0xb2>
		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
 8005158:	0983      	lsrs	r3, r0, #6
		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
 800515a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
 800515e:	f063 033f 	orn	r3, r3, #63	; 0x3f
		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
 8005162:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8005166:	7048      	strb	r0, [r1, #1]
		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
 8005168:	700b      	strb	r3, [r1, #0]
		return 2;
 800516a:	2002      	movs	r0, #2
 800516c:	4770      	bx	lr
	if (chr < 0x10000) {	/* 3-byte sequence? */
 800516e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8005172:	d216      	bcs.n	80051a2 <put_utf+0x62>
		if (szb < 3 || IsSurrogate(chr)) return 0;	/* Buffer overflow or wrong code? */
 8005174:	2a02      	cmp	r2, #2
 8005176:	d93c      	bls.n	80051f2 <put_utf+0xb2>
 8005178:	f5a0 4358 	sub.w	r3, r0, #55296	; 0xd800
 800517c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005180:	d337      	bcc.n	80051f2 <put_utf+0xb2>
		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
 8005182:	0b03      	lsrs	r3, r0, #12
 8005184:	f063 031f 	orn	r3, r3, #31
 8005188:	700b      	strb	r3, [r1, #0]
		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
 800518a:	f3c0 1385 	ubfx	r3, r0, #6, #6
		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
 800518e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
 8005192:	f063 037f 	orn	r3, r3, #127	; 0x7f
		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
 8005196:	f060 007f 	orn	r0, r0, #127	; 0x7f
 800519a:	7088      	strb	r0, [r1, #2]
		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
 800519c:	704b      	strb	r3, [r1, #1]
		return 3;
 800519e:	2003      	movs	r0, #3
 80051a0:	4770      	bx	lr
	if (szb < 4) return 0;	/* Buffer overflow? */
 80051a2:	2a03      	cmp	r2, #3
 80051a4:	d925      	bls.n	80051f2 <put_utf+0xb2>
	hc = ((chr & 0xFFFF0000) - 0xD8000000) >> 6;	/* Get high 10 bits */
 80051a6:	0c03      	lsrs	r3, r0, #16
 80051a8:	041b      	lsls	r3, r3, #16
 80051aa:	f103 5320 	add.w	r3, r3, #671088640	; 0x28000000
 80051ae:	099b      	lsrs	r3, r3, #6
	if (hc >= 0x100000 || chr >= 0x400) return 0;	/* Wrong surrogate? */
 80051b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051b4:	d21d      	bcs.n	80051f2 <put_utf+0xb2>
	chr = (chr & 0xFFFF) - 0xDC00;					/* Get low 10 bits */
 80051b6:	b280      	uxth	r0, r0
 80051b8:	f5a0 405c 	sub.w	r0, r0, #56320	; 0xdc00
	if (hc >= 0x100000 || chr >= 0x400) return 0;	/* Wrong surrogate? */
 80051bc:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80051c0:	d217      	bcs.n	80051f2 <put_utf+0xb2>
	chr = (hc | chr) + 0x10000;
 80051c2:	4318      	orrs	r0, r3
 80051c4:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
 80051c8:	0c83      	lsrs	r3, r0, #18
 80051ca:	f063 030f 	orn	r3, r3, #15
 80051ce:	700b      	strb	r3, [r1, #0]
	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
 80051d0:	f3c0 3305 	ubfx	r3, r0, #12, #6
 80051d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80051d8:	704b      	strb	r3, [r1, #1]
	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
 80051da:	f3c0 1385 	ubfx	r3, r0, #6, #6
	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
 80051de:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
 80051e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
 80051e6:	f060 007f 	orn	r0, r0, #127	; 0x7f
 80051ea:	70c8      	strb	r0, [r1, #3]
	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
 80051ec:	708b      	strb	r3, [r1, #2]
	return 4;
 80051ee:	2004      	movs	r0, #4
 80051f0:	4770      	bx	lr
		if (szb < 1) return 0;	/* Buffer overflow? */
 80051f2:	2000      	movs	r0, #0
}
 80051f4:	4770      	bx	lr

080051f6 <get_fileinfo>:
{
 80051f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	fno->fname[0] = 0;			/* Invaidate file info */
 80051fa:	2500      	movs	r5, #0
	FATFS *fs = dp->obj.fs;
 80051fc:	f8d0 9000 	ldr.w	r9, [r0]
	fno->fname[0] = 0;			/* Invaidate file info */
 8005200:	768d      	strb	r5, [r1, #26]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 8005202:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
 8005204:	4607      	mov	r7, r0
 8005206:	460c      	mov	r4, r1
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 8005208:	b373      	cbz	r3, 8005268 <get_fileinfo+0x72>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800520a:	f899 3000 	ldrb.w	r3, [r9]
 800520e:	2b04      	cmp	r3, #4
 8005210:	d154      	bne.n	80052bc <get_fileinfo+0xc6>
	si = SZDIRE * 2;	/* 1st C1 entry */
 8005212:	f04f 0840 	mov.w	r8, #64	; 0x40
	nc = 0; hs = 0; di = 0;
 8005216:	462f      	mov	r7, r5
 8005218:	4628      	mov	r0, r5
		get_xfileinfo(fs->dirbuf, fno);
 800521a:	f8d9 6010 	ldr.w	r6, [r9, #16]
	while (nc < dirb[XDIR_NumName]) {
 800521e:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
 8005222:	429d      	cmp	r5, r3
 8005224:	d302      	bcc.n	800522c <get_fileinfo+0x36>
	if (hs != 0) di = 0;					/* Broken surrogate pair? */
 8005226:	b920      	cbnz	r0, 8005232 <get_fileinfo+0x3c>
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 8005228:	b937      	cbnz	r7, 8005238 <get_fileinfo+0x42>
 800522a:	e002      	b.n	8005232 <get_fileinfo+0x3c>
		if (si >= MAXDIRB(FF_MAX_LFN)) { di = 0; break; }	/* Truncated directory block? */
 800522c:	f5b8 7f18 	cmp.w	r8, #608	; 0x260
 8005230:	d31c      	bcc.n	800526c <get_fileinfo+0x76>
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 8005232:	233f      	movs	r3, #63	; 0x3f
 8005234:	2701      	movs	r7, #1
 8005236:	76a3      	strb	r3, [r4, #26]
	fno->fname[di] = 0;						/* Terminate the name */
 8005238:	2300      	movs	r3, #0
 800523a:	4427      	add	r7, r4
 800523c:	76bb      	strb	r3, [r7, #26]
	fno->altname[0] = 0;					/* exFAT does not support SFN */
 800523e:	7363      	strb	r3, [r4, #13]
	fno->fattrib = dirb[XDIR_Attr];			/* Attribute */
 8005240:	7933      	ldrb	r3, [r6, #4]
 8005242:	7323      	strb	r3, [r4, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 8005244:	06db      	lsls	r3, r3, #27
 8005246:	d436      	bmi.n	80052b6 <get_fileinfo+0xc0>
 8005248:	f106 0038 	add.w	r0, r6, #56	; 0x38
 800524c:	f7ff fe96 	bl	8004f7c <ld_qword>
 8005250:	e9c4 0100 	strd	r0, r1, [r4]
	rv = rv << 8 | ptr[0];
 8005254:	7b72      	ldrb	r2, [r6, #13]
 8005256:	7b33      	ldrb	r3, [r6, #12]
 8005258:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 800525c:	8163      	strh	r3, [r4, #10]
	rv = rv << 8 | ptr[0];
 800525e:	7bf2      	ldrb	r2, [r6, #15]
 8005260:	7bb3      	ldrb	r3, [r6, #14]
 8005262:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
 8005266:	8123      	strh	r3, [r4, #8]
}
 8005268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 800526c:	f018 0f1f 	tst.w	r8, #31
 8005270:	bf08      	it	eq
 8005272:	f108 0802 	addeq.w	r8, r8, #2
		wc = ld_word(dirb + si); si += 2; nc++;	/* Get a character */
 8005276:	eb06 0308 	add.w	r3, r6, r8
	rv = rv << 8 | ptr[0];
 800527a:	785a      	ldrb	r2, [r3, #1]
 800527c:	f816 3008 	ldrb.w	r3, [r6, r8]
		wc = ld_word(dirb + si); si += 2; nc++;	/* Get a character */
 8005280:	3501      	adds	r5, #1
	rv = rv << 8 | ptr[0];
 8005282:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		wc = ld_word(dirb + si); si += 2; nc++;	/* Get a character */
 8005286:	f108 0802 	add.w	r8, r8, #2
		if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
 800528a:	b928      	cbnz	r0, 8005298 <get_fileinfo+0xa2>
 800528c:	f503 5220 	add.w	r2, r3, #10240	; 0x2800
 8005290:	b292      	uxth	r2, r2
 8005292:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8005296:	d30c      	bcc.n	80052b2 <get_fileinfo+0xbc>
		wc = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding */
 8005298:	f107 011a 	add.w	r1, r7, #26
 800529c:	f1c7 02ff 	rsb	r2, r7, #255	; 0xff
 80052a0:	4421      	add	r1, r4
 80052a2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80052a6:	f7ff ff4b 	bl	8005140 <put_utf>
		if (wc == 0) { di = 0; break; }	/* Buffer overflow or wrong encoding? */
 80052aa:	2800      	cmp	r0, #0
 80052ac:	d0c1      	beq.n	8005232 <get_fileinfo+0x3c>
		hs = 0;
 80052ae:	2300      	movs	r3, #0
		di += wc;
 80052b0:	4407      	add	r7, r0
		hs = 0;
 80052b2:	4618      	mov	r0, r3
 80052b4:	e7b3      	b.n	800521e <get_fileinfo+0x28>
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 80052b6:	2000      	movs	r0, #0
 80052b8:	2100      	movs	r1, #0
 80052ba:	e7c9      	b.n	8005250 <get_fileinfo+0x5a>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 80052bc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80052be:	3301      	adds	r3, #1
 80052c0:	d169      	bne.n	8005396 <get_fileinfo+0x1a0>
			if (hs != 0) di = 0;	/* Broken surrogate pair? */
 80052c2:	2500      	movs	r5, #0
		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
 80052c4:	f04f 082e 	mov.w	r8, #46	; 0x2e
			if (hs != 0) di = 0;	/* Broken surrogate pair? */
 80052c8:	462b      	mov	r3, r5
		wc = dp->dir[si++];			/* Get a char */
 80052ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80052cc:	1c5e      	adds	r6, r3, #1
 80052ce:	5cd0      	ldrb	r0, [r2, r3]
		if (wc == ' ') continue;	/* Skip padding spaces */
 80052d0:	2820      	cmp	r0, #32
 80052d2:	d01a      	beq.n	800530a <get_fileinfo+0x114>
		if (wc == RDDEM) wc = DDEM;	/* Restore replaced DDEM character */
 80052d4:	2805      	cmp	r0, #5
 80052d6:	bf08      	it	eq
 80052d8:	20e5      	moveq	r0, #229	; 0xe5
		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
 80052da:	2e09      	cmp	r6, #9
 80052dc:	d105      	bne.n	80052ea <get_fileinfo+0xf4>
 80052de:	2d0b      	cmp	r5, #11
 80052e0:	bf9e      	ittt	ls
 80052e2:	1963      	addls	r3, r4, r5
 80052e4:	f883 800d 	strbls.w	r8, [r3, #13]
 80052e8:	3501      	addls	r5, #1
		wc = ff_oem2uni(wc, CODEPAGE);		/* ANSI/OEM -> Unicode */
 80052ea:	f240 3162 	movw	r1, #866	; 0x362
 80052ee:	f002 fa23 	bl	8007738 <ff_oem2uni>
		if (wc == 0) { di = 0; break; }		/* Wrong char in the current code page? */
 80052f2:	2800      	cmp	r0, #0
 80052f4:	d054      	beq.n	80053a0 <get_fileinfo+0x1aa>
		wc = put_utf(wc, &fno->altname[di], FF_SFN_BUF - di);	/* Store it in Unicode */
 80052f6:	f105 010d 	add.w	r1, r5, #13
 80052fa:	f1c5 020c 	rsb	r2, r5, #12
 80052fe:	4421      	add	r1, r4
 8005300:	f7ff ff1e 	bl	8005140 <put_utf>
		if (wc == 0) { di = 0; break; }		/* Buffer overflow? */
 8005304:	2800      	cmp	r0, #0
 8005306:	d04b      	beq.n	80053a0 <get_fileinfo+0x1aa>
		di += wc;
 8005308:	4405      	add	r5, r0
	while (si < 11) {		/* Get SFN from SFN entry */
 800530a:	2e0b      	cmp	r6, #11
 800530c:	4633      	mov	r3, r6
 800530e:	d1dc      	bne.n	80052ca <get_fileinfo+0xd4>
	fno->altname[di] = 0;	/* Terminate the SFN  (null string means SFN is invalid) */
 8005310:	2200      	movs	r2, #0
 8005312:	1963      	adds	r3, r4, r5
 8005314:	735a      	strb	r2, [r3, #13]
	if (fno->fname[0] == 0) {	/* If LFN is invalid, altname[] needs to be copied to fname[] */
 8005316:	7ea3      	ldrb	r3, [r4, #26]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d14d      	bne.n	80053b8 <get_fileinfo+0x1c2>
		if (di == 0) {	/* If LFN and SFN both are invalid, this object is inaccesible */
 800531c:	2d00      	cmp	r5, #0
 800531e:	d041      	beq.n	80053a4 <get_fileinfo+0x1ae>
			for (si = di = 0, lcf = NS_BODY; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
 8005320:	2008      	movs	r0, #8
 8005322:	f104 010d 	add.w	r1, r4, #13
 8005326:	f811 2b01 	ldrb.w	r2, [r1], #1
 800532a:	2a00      	cmp	r2, #0
 800532c:	d03d      	beq.n	80053aa <get_fileinfo+0x1b4>
				wc = (WCHAR)fno->altname[si];
 800532e:	b292      	uxth	r2, r2
				if (wc == '.') lcf = NS_EXT;
 8005330:	2a2e      	cmp	r2, #46	; 0x2e
				if (IsUpper(wc) && (dp->dir[DIR_NTres] & lcf)) wc += 0x20;
 8005332:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
				if (wc == '.') lcf = NS_EXT;
 8005336:	bf08      	it	eq
 8005338:	2010      	moveq	r0, #16
				if (IsUpper(wc) && (dp->dir[DIR_NTres] & lcf)) wc += 0x20;
 800533a:	2d19      	cmp	r5, #25
 800533c:	d804      	bhi.n	8005348 <get_fileinfo+0x152>
 800533e:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
 8005340:	7b2d      	ldrb	r5, [r5, #12]
 8005342:	4228      	tst	r0, r5
 8005344:	bf18      	it	ne
 8005346:	3220      	addne	r2, #32
				fno->fname[di] = (TCHAR)wc;
 8005348:	730a      	strb	r2, [r1, #12]
			for (si = di = 0, lcf = NS_BODY; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
 800534a:	3301      	adds	r3, #1
 800534c:	e7eb      	b.n	8005326 <get_fileinfo+0x130>
				if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
 800534e:	f1b8 0f00 	cmp.w	r8, #0
 8005352:	d105      	bne.n	8005360 <get_fileinfo+0x16a>
 8005354:	f500 5320 	add.w	r3, r0, #10240	; 0x2800
 8005358:	b29b      	uxth	r3, r3
 800535a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800535e:	d30b      	bcc.n	8005378 <get_fileinfo+0x182>
				wc = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in UTF-16 or UTF-8 encoding */
 8005360:	f106 011a 	add.w	r1, r6, #26
 8005364:	f1c6 02ff 	rsb	r2, r6, #255	; 0xff
 8005368:	4421      	add	r1, r4
 800536a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800536e:	f7ff fee7 	bl	8005140 <put_utf>
				if (wc == 0) { di = 0; break; }	/* Invalid char or buffer overflow? */
 8005372:	b198      	cbz	r0, 800539c <get_fileinfo+0x1a6>
				di += wc;
 8005374:	4406      	add	r6, r0
				hs = 0;
 8005376:	2000      	movs	r0, #0
 8005378:	4680      	mov	r8, r0
 800537a:	3502      	adds	r5, #2
			while (fs->lfnbuf[si] != 0) {
 800537c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8005380:	5b58      	ldrh	r0, [r3, r5]
 8005382:	2800      	cmp	r0, #0
 8005384:	d1e3      	bne.n	800534e <get_fileinfo+0x158>
			if (hs != 0) di = 0;	/* Broken surrogate pair? */
 8005386:	f1b8 0f00 	cmp.w	r8, #0
 800538a:	bf18      	it	ne
 800538c:	2600      	movne	r6, #0
			fno->fname[di] = 0;		/* Terminate the LFN (null string means LFN is invalid) */
 800538e:	2300      	movs	r3, #0
 8005390:	4426      	add	r6, r4
 8005392:	76b3      	strb	r3, [r6, #26]
 8005394:	e795      	b.n	80052c2 <get_fileinfo+0xcc>
			si = di = hs = 0;
 8005396:	46a8      	mov	r8, r5
 8005398:	462e      	mov	r6, r5
 800539a:	e7ef      	b.n	800537c <get_fileinfo+0x186>
				if (wc == 0) { di = 0; break; }	/* Invalid char or buffer overflow? */
 800539c:	4606      	mov	r6, r0
 800539e:	e7f2      	b.n	8005386 <get_fileinfo+0x190>
		if (wc == 0) { di = 0; break; }		/* Wrong char in the current code page? */
 80053a0:	2500      	movs	r5, #0
 80053a2:	e7b5      	b.n	8005310 <get_fileinfo+0x11a>
			fno->fname[di++] = '?';
 80053a4:	233f      	movs	r3, #63	; 0x3f
 80053a6:	76a3      	strb	r3, [r4, #26]
 80053a8:	2301      	movs	r3, #1
		fno->fname[di] = 0;	/* Terminate the LFN */
 80053aa:	2200      	movs	r2, #0
 80053ac:	4423      	add	r3, r4
 80053ae:	769a      	strb	r2, [r3, #26]
		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case info is exist. */
 80053b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053b2:	7b1b      	ldrb	r3, [r3, #12]
 80053b4:	b903      	cbnz	r3, 80053b8 <get_fileinfo+0x1c2>
 80053b6:	7363      	strb	r3, [r4, #13]
	fno->fattrib = dp->dir[DIR_Attr];					/* Attribute */
 80053b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053ba:	7acb      	ldrb	r3, [r1, #11]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 80053bc:	f101 001c 	add.w	r0, r1, #28
	fno->fattrib = dp->dir[DIR_Attr];					/* Attribute */
 80053c0:	7323      	strb	r3, [r4, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 80053c2:	f7ff fdd3 	bl	8004f6c <ld_dword>
 80053c6:	2300      	movs	r3, #0
 80053c8:	6020      	str	r0, [r4, #0]
 80053ca:	6063      	str	r3, [r4, #4]
	rv = rv << 8 | ptr[0];
 80053cc:	7dca      	ldrb	r2, [r1, #23]
 80053ce:	7d8b      	ldrb	r3, [r1, #22]
 80053d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
 80053d4:	8163      	strh	r3, [r4, #10]
	rv = rv << 8 | ptr[0];
 80053d6:	7e4a      	ldrb	r2, [r1, #25]
 80053d8:	7e0b      	ldrb	r3, [r1, #24]
 80053da:	e742      	b.n	8005262 <get_fileinfo+0x6c>

080053dc <ld_clust.isra.4>:
 80053dc:	7eca      	ldrb	r2, [r1, #27]
 80053de:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 80053e0:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 80053e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 80053e6:	bf01      	itttt	eq
 80053e8:	7d48      	ldrbeq	r0, [r1, #21]
 80053ea:	7d0a      	ldrbeq	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80053ec:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 80053f0:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	4770      	bx	lr

080053f8 <st_clust.isra.5>:
	*ptr++ = (BYTE)val; val >>= 8;
 80053f8:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80053fc:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 80053fe:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8005400:	7803      	ldrb	r3, [r0, #0]
 8005402:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005404:	bf01      	itttt	eq
 8005406:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8005408:	750a      	strbeq	r2, [r1, #20]
 800540a:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 800540c:	754a      	strbeq	r2, [r1, #21]
}
 800540e:	4770      	bx	lr

08005410 <init_alloc_info.isra.6>:
static void init_alloc_info (
 8005410:	b538      	push	{r3, r4, r5, lr}
 8005412:	4605      	mov	r5, r0
	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
 8005414:	3034      	adds	r0, #52	; 0x34
static void init_alloc_info (
 8005416:	460c      	mov	r4, r1
	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
 8005418:	f7ff fda8 	bl	8004f6c <ld_dword>
 800541c:	6088      	str	r0, [r1, #8]
	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
 800541e:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8005422:	f7ff fdab 	bl	8004f7c <ld_qword>
 8005426:	e9c4 0104 	strd	r0, r1, [r4, #16]
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
 800542a:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	71e3      	strb	r3, [r4, #7]
	obj->n_frag = 0;										/* No last fragment info */
 8005434:	2300      	movs	r3, #0
 8005436:	61e3      	str	r3, [r4, #28]
}
 8005438:	bd38      	pop	{r3, r4, r5, pc}

0800543a <sync_window.part.7>:
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
 800543a:	b570      	push	{r4, r5, r6, lr}
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 800543c:	f100 063c 	add.w	r6, r0, #60	; 0x3c
 8005440:	6b82      	ldr	r2, [r0, #56]	; 0x38
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
 8005442:	4605      	mov	r5, r0
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 8005444:	2301      	movs	r3, #1
 8005446:	4631      	mov	r1, r6
 8005448:	7840      	ldrb	r0, [r0, #1]
 800544a:	f7ff fd15 	bl	8004e78 <disk_write>
 800544e:	4604      	mov	r4, r0
 8005450:	b988      	cbnz	r0, 8005476 <sync_window.part.7+0x3c>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8005452:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8005454:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005456:	6a2a      	ldr	r2, [r5, #32]
 8005458:	1acb      	subs	r3, r1, r3
 800545a:	4293      	cmp	r3, r2
			fs->wflag = 0;	/* Clear window dirty flag */
 800545c:	70e8      	strb	r0, [r5, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800545e:	d208      	bcs.n	8005472 <sync_window.part.7+0x38>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8005460:	78ab      	ldrb	r3, [r5, #2]
 8005462:	2b02      	cmp	r3, #2
 8005464:	d105      	bne.n	8005472 <sync_window.part.7+0x38>
 8005466:	440a      	add	r2, r1
 8005468:	2301      	movs	r3, #1
 800546a:	4631      	mov	r1, r6
 800546c:	7868      	ldrb	r0, [r5, #1]
 800546e:	f7ff fd03 	bl	8004e78 <disk_write>
}
 8005472:	4620      	mov	r0, r4
 8005474:	bd70      	pop	{r4, r5, r6, pc}
			res = FR_DISK_ERR;
 8005476:	2401      	movs	r4, #1
 8005478:	e7fb      	b.n	8005472 <sync_window.part.7+0x38>

0800547a <move_window>:
{
 800547a:	b538      	push	{r3, r4, r5, lr}
	if (sect != fs->winsect) {	/* Window offset changed? */
 800547c:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
 800547e:	4604      	mov	r4, r0
	if (sect != fs->winsect) {	/* Window offset changed? */
 8005480:	428b      	cmp	r3, r1
{
 8005482:	460d      	mov	r5, r1
	if (sect != fs->winsect) {	/* Window offset changed? */
 8005484:	d015      	beq.n	80054b2 <move_window+0x38>
	if (fs->wflag) {	/* Is the disk access window dirty? */
 8005486:	78c3      	ldrb	r3, [r0, #3]
 8005488:	b973      	cbnz	r3, 80054a8 <move_window+0x2e>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 800548a:	462a      	mov	r2, r5
 800548c:	2301      	movs	r3, #1
 800548e:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8005492:	7860      	ldrb	r0, [r4, #1]
 8005494:	f7ff fcb2 	bl	8004dfc <disk_read>
				res = FR_DISK_ERR;
 8005498:	2800      	cmp	r0, #0
 800549a:	bf16      	itet	ne
 800549c:	f04f 35ff 	movne.w	r5, #4294967295
 80054a0:	2000      	moveq	r0, #0
 80054a2:	2001      	movne	r0, #1
			fs->winsect = sect;
 80054a4:	63a5      	str	r5, [r4, #56]	; 0x38
}
 80054a6:	bd38      	pop	{r3, r4, r5, pc}
 80054a8:	f7ff ffc7 	bl	800543a <sync_window.part.7>
		if (res == FR_OK) {			/* Fill sector window with new data */
 80054ac:	2800      	cmp	r0, #0
 80054ae:	d1fa      	bne.n	80054a6 <move_window+0x2c>
 80054b0:	e7eb      	b.n	800548a <move_window+0x10>
	FRESULT res = FR_OK;
 80054b2:	2000      	movs	r0, #0
 80054b4:	e7f7      	b.n	80054a6 <move_window+0x2c>

080054b6 <change_bitmap>:
{
 80054b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 80054ba:	f04f 0901 	mov.w	r9, #1
{
 80054be:	4605      	mov	r5, r0
 80054c0:	4616      	mov	r6, r2
 80054c2:	461f      	mov	r7, r3
	clst -= 2;	/* The first bit corresponds to cluster #2 */
 80054c4:	1e8c      	subs	r4, r1, #2
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
 80054c6:	6b41      	ldr	r1, [r0, #52]	; 0x34
	i = clst / 8 % SS(fs);					/* Byte offset in the sector */
 80054c8:	f3c4 08c8 	ubfx	r8, r4, #3, #9
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
 80054cc:	eb01 3114 	add.w	r1, r1, r4, lsr #12
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 80054d0:	f004 0407 	and.w	r4, r4, #7
 80054d4:	fa09 f404 	lsl.w	r4, r9, r4
 80054d8:	b2e4      	uxtb	r4, r4
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 80054da:	4628      	mov	r0, r5
 80054dc:	f101 0a01 	add.w	sl, r1, #1
 80054e0:	f7ff ffcb 	bl	800547a <move_window>
 80054e4:	b118      	cbz	r0, 80054ee <change_bitmap+0x38>
 80054e6:	2001      	movs	r0, #1
}
 80054e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054ec:	4698      	mov	r8, r3
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 80054ee:	eb05 0208 	add.w	r2, r5, r8
 80054f2:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 80054f6:	4223      	tst	r3, r4
 80054f8:	bf14      	ite	ne
 80054fa:	2101      	movne	r1, #1
 80054fc:	2100      	moveq	r1, #0
 80054fe:	42b9      	cmp	r1, r7
 8005500:	d015      	beq.n	800552e <change_bitmap+0x78>
				fs->win[i] ^= bm;	/* Flip the bit */
 8005502:	4063      	eors	r3, r4
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8005504:	3e01      	subs	r6, #1
				fs->win[i] ^= bm;	/* Flip the bit */
 8005506:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
				fs->wflag = 1;
 800550a:	f885 9003 	strb.w	r9, [r5, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800550e:	d0eb      	beq.n	80054e8 <change_bitmap+0x32>
			} while (bm <<= 1);		/* Next bit */
 8005510:	0064      	lsls	r4, r4, #1
 8005512:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8005516:	d1ea      	bne.n	80054ee <change_bitmap+0x38>
		} while (++i < SS(fs));		/* Next byte */
 8005518:	f108 0301 	add.w	r3, r8, #1
 800551c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
			bm = 1;
 8005520:	f04f 0401 	mov.w	r4, #1
		i = 0;
 8005524:	f04f 0800 	mov.w	r8, #0
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8005528:	4651      	mov	r1, sl
		} while (++i < SS(fs));		/* Next byte */
 800552a:	d1df      	bne.n	80054ec <change_bitmap+0x36>
 800552c:	e7d5      	b.n	80054da <change_bitmap+0x24>
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800552e:	2002      	movs	r0, #2
 8005530:	e7da      	b.n	80054e8 <change_bitmap+0x32>

08005532 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005532:	2901      	cmp	r1, #1
{
 8005534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005536:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005538:	f240 8090 	bls.w	800565c <get_fat+0x12a>
	FATFS *fs = obj->fs;
 800553c:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800553e:	69eb      	ldr	r3, [r5, #28]
 8005540:	428b      	cmp	r3, r1
 8005542:	f240 808b 	bls.w	800565c <get_fat+0x12a>
		switch (fs->fs_type) {
 8005546:	782b      	ldrb	r3, [r5, #0]
 8005548:	3b01      	subs	r3, #1
 800554a:	2b03      	cmp	r3, #3
 800554c:	f200 8086 	bhi.w	800565c <get_fat+0x12a>
 8005550:	e8df f003 	tbb	[pc, r3]
 8005554:	4e3b2902 	.word	0x4e3b2902
			bc = (UINT)clst; bc += bc / 2;
 8005558:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800555c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800555e:	4628      	mov	r0, r5
 8005560:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 8005564:	f7ff ff89 	bl	800547a <move_window>
 8005568:	b110      	cbz	r0, 8005570 <get_fat+0x3e>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800556a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800556e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005570:	6aa9      	ldr	r1, [r5, #40]	; 0x28
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8005572:	1c77      	adds	r7, r6, #1
 8005574:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8005578:	442e      	add	r6, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800557a:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800557e:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8005580:	f896 603c 	ldrb.w	r6, [r6, #60]	; 0x3c
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005584:	f7ff ff79 	bl	800547a <move_window>
 8005588:	2800      	cmp	r0, #0
 800558a:	d1ee      	bne.n	800556a <get_fat+0x38>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 800558c:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8005590:	443d      	add	r5, r7
 8005592:	f895 003c 	ldrb.w	r0, [r5, #60]	; 0x3c
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8005596:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8005598:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 800559c:	bf4c      	ite	mi
 800559e:	0900      	lsrmi	r0, r0, #4
 80055a0:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 80055a4:	e7e3      	b.n	800556e <get_fat+0x3c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80055a6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80055a8:	4628      	mov	r0, r5
 80055aa:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80055ae:	f7ff ff64 	bl	800547a <move_window>
 80055b2:	2800      	cmp	r0, #0
 80055b4:	d1d9      	bne.n	800556a <get_fat+0x38>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 80055b6:	0064      	lsls	r4, r4, #1
 80055b8:	f404 73ff 	and.w	r3, r4, #510	; 0x1fe
 80055bc:	353c      	adds	r5, #60	; 0x3c
 80055be:	18ea      	adds	r2, r5, r3
	rv = rv << 8 | ptr[0];
 80055c0:	7854      	ldrb	r4, [r2, #1]
 80055c2:	5ce8      	ldrb	r0, [r5, r3]
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 80055c4:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
			break;
 80055c8:	e7d1      	b.n	800556e <get_fat+0x3c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80055ca:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80055cc:	4628      	mov	r0, r5
 80055ce:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80055d2:	f7ff ff52 	bl	800547a <move_window>
 80055d6:	2800      	cmp	r0, #0
 80055d8:	d1c7      	bne.n	800556a <get_fat+0x38>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 80055da:	00a4      	lsls	r4, r4, #2
 80055dc:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 80055e0:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 80055e4:	4420      	add	r0, r4
 80055e6:	f7ff fcc1 	bl	8004f6c <ld_dword>
 80055ea:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 80055ee:	e7be      	b.n	800556e <get_fat+0x3c>
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
 80055f0:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 80055f4:	ea52 0103 	orrs.w	r1, r2, r3
 80055f8:	79c1      	ldrb	r1, [r0, #7]
 80055fa:	d001      	beq.n	8005600 <get_fat+0xce>
 80055fc:	6886      	ldr	r6, [r0, #8]
 80055fe:	b906      	cbnz	r6, 8005602 <get_fat+0xd0>
 8005600:	bb61      	cbnz	r1, 800565c <get_fat+0x12a>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8005602:	6886      	ldr	r6, [r0, #8]
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 8005604:	2902      	cmp	r1, #2
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8005606:	eba4 0606 	sub.w	r6, r4, r6
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 800560a:	896f      	ldrh	r7, [r5, #10]
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800560c:	d10d      	bne.n	800562a <get_fat+0xf8>
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 800560e:	f112 30ff 	adds.w	r0, r2, #4294967295
 8005612:	f143 31ff 	adc.w	r1, r3, #4294967295
 8005616:	0a43      	lsrs	r3, r0, #9
 8005618:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800561c:	fbb3 f3f7 	udiv	r3, r3, r7
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 8005620:	429e      	cmp	r6, r3
 8005622:	d81b      	bhi.n	800565c <get_fat+0x12a>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 8005624:	d01c      	beq.n	8005660 <get_fat+0x12e>
 8005626:	1c60      	adds	r0, r4, #1
 8005628:	e7a1      	b.n	800556e <get_fat+0x3c>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800562a:	2903      	cmp	r1, #3
 800562c:	d102      	bne.n	8005634 <get_fat+0x102>
 800562e:	6983      	ldr	r3, [r0, #24]
 8005630:	42b3      	cmp	r3, r6
 8005632:	d8f8      	bhi.n	8005626 <get_fat+0xf4>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8005634:	69c3      	ldr	r3, [r0, #28]
 8005636:	b99b      	cbnz	r3, 8005660 <get_fat+0x12e>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005638:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800563a:	4628      	mov	r0, r5
 800563c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8005640:	f7ff ff1b 	bl	800547a <move_window>
 8005644:	2800      	cmp	r0, #0
 8005646:	d190      	bne.n	800556a <get_fat+0x38>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8005648:	00a0      	lsls	r0, r4, #2
 800564a:	353c      	adds	r5, #60	; 0x3c
 800564c:	f400 70fe 	and.w	r0, r0, #508	; 0x1fc
 8005650:	4428      	add	r0, r5
 8005652:	f7ff fc8b 	bl	8004f6c <ld_dword>
 8005656:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800565a:	e788      	b.n	800556e <get_fat+0x3c>
		val = 1;	/* Internal error */
 800565c:	2001      	movs	r0, #1
 800565e:	e786      	b.n	800556e <get_fat+0x3c>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 8005660:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	return val;
 8005664:	e783      	b.n	800556e <get_fat+0x3c>

08005666 <dir_sdi>:
{
 8005666:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = dp->obj.fs;
 8005668:	6804      	ldr	r4, [r0, #0]
{
 800566a:	4605      	mov	r5, r0
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800566c:	7823      	ldrb	r3, [r4, #0]
{
 800566e:	460e      	mov	r6, r1
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005670:	2b04      	cmp	r3, #4
 8005672:	bf0c      	ite	eq
 8005674:	f04f 5280 	moveq.w	r2, #268435456	; 0x10000000
 8005678:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
 800567c:	428a      	cmp	r2, r1
 800567e:	d801      	bhi.n	8005684 <dir_sdi+0x1e>
		return FR_INT_ERR;
 8005680:	2002      	movs	r0, #2
}
 8005682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005684:	06ca      	lsls	r2, r1, #27
 8005686:	d1fb      	bne.n	8005680 <dir_sdi+0x1a>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005688:	6882      	ldr	r2, [r0, #8]
	dp->dptr = ofs;				/* Set current offset */
 800568a:	6329      	str	r1, [r5, #48]	; 0x30
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800568c:	bb22      	cbnz	r2, 80056d8 <dir_sdi+0x72>
 800568e:	2b02      	cmp	r3, #2
 8005690:	d813      	bhi.n	80056ba <dir_sdi+0x54>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8005692:	8923      	ldrh	r3, [r4, #8]
 8005694:	ebb3 1f56 	cmp.w	r3, r6, lsr #5
 8005698:	d9f2      	bls.n	8005680 <dir_sdi+0x1a>
		dp->sect = fs->dirbase;
 800569a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800569c:	63ab      	str	r3, [r5, #56]	; 0x38
	if (dp->sect == 0) return FR_INT_ERR;
 800569e:	6bab      	ldr	r3, [r5, #56]	; 0x38
	dp->clust = clst;					/* Current cluster# */
 80056a0:	636a      	str	r2, [r5, #52]	; 0x34
	if (dp->sect == 0) return FR_INT_ERR;
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d0ec      	beq.n	8005680 <dir_sdi+0x1a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80056a6:	eb03 2356 	add.w	r3, r3, r6, lsr #9
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80056aa:	343c      	adds	r4, #60	; 0x3c
 80056ac:	f3c6 0608 	ubfx	r6, r6, #0, #9
 80056b0:	4434      	add	r4, r6
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80056b2:	63ab      	str	r3, [r5, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80056b4:	63ec      	str	r4, [r5, #60]	; 0x3c
	return FR_OK;
 80056b6:	2000      	movs	r0, #0
 80056b8:	e7e3      	b.n	8005682 <dir_sdi+0x1c>
		clst = (DWORD)fs->dirbase;
 80056ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 80056bc:	71c2      	strb	r2, [r0, #7]
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d0e7      	beq.n	8005692 <dir_sdi+0x2c>
		while (ofs >= csz) {				/* Follow cluster chain */
 80056c2:	461a      	mov	r2, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80056c4:	8967      	ldrh	r7, [r4, #10]
 80056c6:	027f      	lsls	r7, r7, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 80056c8:	42be      	cmp	r6, r7
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80056ca:	4611      	mov	r1, r2
		while (ofs >= csz) {				/* Follow cluster chain */
 80056cc:	d206      	bcs.n	80056dc <dir_sdi+0x76>
		dp->sect = clst2sect(fs, clst);
 80056ce:	4620      	mov	r0, r4
 80056d0:	f7ff fcb0 	bl	8005034 <clst2sect>
 80056d4:	63a8      	str	r0, [r5, #56]	; 0x38
 80056d6:	e7e2      	b.n	800569e <dir_sdi+0x38>
 80056d8:	4613      	mov	r3, r2
 80056da:	e7f2      	b.n	80056c2 <dir_sdi+0x5c>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80056dc:	4628      	mov	r0, r5
 80056de:	f7ff ff28 	bl	8005532 <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80056e2:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80056e4:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80056e6:	d006      	beq.n	80056f6 <dir_sdi+0x90>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80056e8:	2801      	cmp	r0, #1
 80056ea:	d9c9      	bls.n	8005680 <dir_sdi+0x1a>
 80056ec:	69e3      	ldr	r3, [r4, #28]
 80056ee:	4283      	cmp	r3, r0
 80056f0:	d9c6      	bls.n	8005680 <dir_sdi+0x1a>
			ofs -= csz;
 80056f2:	1bf6      	subs	r6, r6, r7
 80056f4:	e7e8      	b.n	80056c8 <dir_sdi+0x62>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80056f6:	2001      	movs	r0, #1
 80056f8:	e7c3      	b.n	8005682 <dir_sdi+0x1c>
	...

080056fc <check_fs>:
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 80056fc:	2300      	movs	r3, #0
{
 80056fe:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 8005700:	70c3      	strb	r3, [r0, #3]
 8005702:	f04f 33ff 	mov.w	r3, #4294967295
 8005706:	6383      	str	r3, [r0, #56]	; 0x38
{
 8005708:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 800570a:	f7ff feb6 	bl	800547a <move_window>
 800570e:	bb50      	cbnz	r0, 8005766 <check_fs+0x6a>
	rv = rv << 8 | ptr[0];
 8005710:	f894 223b 	ldrb.w	r2, [r4, #571]	; 0x23b
 8005714:	f894 323a 	ldrb.w	r3, [r4, #570]	; 0x23a
 8005718:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot signature (always here regardless of the sector size) */
 800571c:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8005720:	4293      	cmp	r3, r2
 8005722:	d122      	bne.n	800576a <check_fs+0x6e>
	if (FF_FS_EXFAT && !mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
 8005724:	220b      	movs	r2, #11
 8005726:	4914      	ldr	r1, [pc, #80]	; (8005778 <check_fs+0x7c>)
 8005728:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 800572c:	f7ff fc74 	bl	8005018 <mem_cmp>
 8005730:	b1e8      	cbz	r0, 800576e <check_fs+0x72>
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 8005732:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005736:	2beb      	cmp	r3, #235	; 0xeb
 8005738:	d003      	beq.n	8005742 <check_fs+0x46>
 800573a:	3318      	adds	r3, #24
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b01      	cmp	r3, #1
 8005740:	d817      	bhi.n	8005772 <check_fs+0x76>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 8005742:	2203      	movs	r2, #3
 8005744:	490d      	ldr	r1, [pc, #52]	; (800577c <check_fs+0x80>)
 8005746:	f104 0072 	add.w	r0, r4, #114	; 0x72
 800574a:	f7ff fc65 	bl	8005018 <mem_cmp>
 800574e:	b148      	cbz	r0, 8005764 <check_fs+0x68>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 8005750:	2205      	movs	r2, #5
 8005752:	490b      	ldr	r1, [pc, #44]	; (8005780 <check_fs+0x84>)
 8005754:	f104 008e 	add.w	r0, r4, #142	; 0x8e
 8005758:	f7ff fc5e 	bl	8005018 <mem_cmp>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 800575c:	2800      	cmp	r0, #0
 800575e:	bf14      	ite	ne
 8005760:	2002      	movne	r0, #2
 8005762:	2000      	moveq	r0, #0
}
 8005764:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 8005766:	2004      	movs	r0, #4
 8005768:	e7fc      	b.n	8005764 <check_fs+0x68>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot signature (always here regardless of the sector size) */
 800576a:	2003      	movs	r0, #3
 800576c:	e7fa      	b.n	8005764 <check_fs+0x68>
	if (FF_FS_EXFAT && !mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
 800576e:	2001      	movs	r0, #1
 8005770:	e7f8      	b.n	8005764 <check_fs+0x68>
	return 2;	/* Valid BS but not FAT */
 8005772:	2002      	movs	r0, #2
 8005774:	e7f6      	b.n	8005764 <check_fs+0x68>
 8005776:	bf00      	nop
 8005778:	0800c6fb 	.word	0x0800c6fb
 800577c:	0800c707 	.word	0x0800c707
 8005780:	0800c70b 	.word	0x0800c70b

08005784 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005784:	2901      	cmp	r1, #1
{
 8005786:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800578a:	4605      	mov	r5, r0
 800578c:	460c      	mov	r4, r1
 800578e:	4616      	mov	r6, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005790:	d977      	bls.n	8005882 <put_fat+0xfe>
 8005792:	69c3      	ldr	r3, [r0, #28]
 8005794:	428b      	cmp	r3, r1
 8005796:	d974      	bls.n	8005882 <put_fat+0xfe>
		switch (fs->fs_type) {
 8005798:	7803      	ldrb	r3, [r0, #0]
 800579a:	3b01      	subs	r3, #1
 800579c:	2b03      	cmp	r3, #3
 800579e:	d870      	bhi.n	8005882 <put_fat+0xfe>
 80057a0:	e8df f003 	tbb	[pc, r3]
 80057a4:	51513e02 	.word	0x51513e02
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 80057a8:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80057ac:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80057ae:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 80057b2:	f7ff fe62 	bl	800547a <move_window>
			if (res != FR_OK) break;
 80057b6:	4607      	mov	r7, r0
 80057b8:	bb38      	cbnz	r0, 800580a <put_fat+0x86>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Update 1st byte */
 80057ba:	f014 0401 	ands.w	r4, r4, #1
			p = fs->win + bc++ % SS(fs);
 80057be:	f105 093c 	add.w	r9, r5, #60	; 0x3c
 80057c2:	f108 0a01 	add.w	sl, r8, #1
 80057c6:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Update 1st byte */
 80057ca:	bf17      	itett	ne
 80057cc:	f819 3008 	ldrbne.w	r3, [r9, r8]
 80057d0:	b2f3      	uxtbeq	r3, r6
 80057d2:	f003 020f 	andne.w	r2, r3, #15
 80057d6:	0133      	lslne	r3, r6, #4
 80057d8:	bf1c      	itt	ne
 80057da:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 80057de:	4313      	orrne	r3, r2
 80057e0:	f809 3008 	strb.w	r3, [r9, r8]
			fs->wflag = 1;
 80057e4:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80057e6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
			fs->wflag = 1;
 80057e8:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80057ea:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 80057ee:	4628      	mov	r0, r5
 80057f0:	f7ff fe43 	bl	800547a <move_window>
			if (res != FR_OK) break;
 80057f4:	4607      	mov	r7, r0
 80057f6:	b940      	cbnz	r0, 800580a <put_fat+0x86>
			p = fs->win + bc % SS(fs);
 80057f8:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 80057fc:	b144      	cbz	r4, 8005810 <put_fat+0x8c>
 80057fe:	f3c6 1607 	ubfx	r6, r6, #4, #8
 8005802:	f809 600a 	strb.w	r6, [r9, sl]
			fs->wflag = 1;
 8005806:	2301      	movs	r3, #1
 8005808:	70eb      	strb	r3, [r5, #3]
}
 800580a:	4638      	mov	r0, r7
 800580c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 8005810:	f819 200a 	ldrb.w	r2, [r9, sl]
 8005814:	f3c6 2603 	ubfx	r6, r6, #8, #4
 8005818:	f022 020f 	bic.w	r2, r2, #15
 800581c:	4316      	orrs	r6, r2
 800581e:	e7f0      	b.n	8005802 <put_fat+0x7e>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005820:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8005822:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8005826:	f7ff fe28 	bl	800547a <move_window>
			if (res != FR_OK) break;
 800582a:	4607      	mov	r7, r0
 800582c:	2800      	cmp	r0, #0
 800582e:	d1ec      	bne.n	800580a <put_fat+0x86>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8005830:	0064      	lsls	r4, r4, #1
 8005832:	f105 033c 	add.w	r3, r5, #60	; 0x3c
 8005836:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 800583a:	551e      	strb	r6, [r3, r4]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 800583c:	1919      	adds	r1, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 800583e:	f3c6 2607 	ubfx	r6, r6, #8, #8
	*ptr++ = (BYTE)val;
 8005842:	704e      	strb	r6, [r1, #1]
 8005844:	e7df      	b.n	8005806 <put_fat+0x82>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005846:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8005848:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800584c:	f7ff fe15 	bl	800547a <move_window>
			if (res != FR_OK) break;
 8005850:	4607      	mov	r7, r0
 8005852:	2800      	cmp	r0, #0
 8005854:	d1d9      	bne.n	800580a <put_fat+0x86>
 8005856:	00a4      	lsls	r4, r4, #2
 8005858:	f105 033c 	add.w	r3, r5, #60	; 0x3c
 800585c:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8005860:	441c      	add	r4, r3
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8005862:	782b      	ldrb	r3, [r5, #0]
 8005864:	2b04      	cmp	r3, #4
 8005866:	d007      	beq.n	8005878 <put_fat+0xf4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005868:	4620      	mov	r0, r4
 800586a:	f7ff fb7f 	bl	8004f6c <ld_dword>
 800586e:	f026 4670 	bic.w	r6, r6, #4026531840	; 0xf0000000
 8005872:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8005876:	4306      	orrs	r6, r0
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005878:	4631      	mov	r1, r6
 800587a:	4620      	mov	r0, r4
 800587c:	f7ff fbaf 	bl	8004fde <st_dword>
 8005880:	e7c1      	b.n	8005806 <put_fat+0x82>
	FRESULT res = FR_INT_ERR;
 8005882:	2702      	movs	r7, #2
 8005884:	e7c1      	b.n	800580a <put_fat+0x86>

08005886 <fill_last_frag>:
{
 8005886:	b570      	push	{r4, r5, r6, lr}
 8005888:	4604      	mov	r4, r0
 800588a:	460d      	mov	r5, r1
 800588c:	4616      	mov	r6, r2
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 800588e:	69e3      	ldr	r3, [r4, #28]
 8005890:	b90b      	cbnz	r3, 8005896 <fill_last_frag+0x10>
	return FR_OK;
 8005892:	4618      	mov	r0, r3
}
 8005894:	bd70      	pop	{r4, r5, r6, pc}
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8005896:	1aea      	subs	r2, r5, r3
 8005898:	2b01      	cmp	r3, #1
 800589a:	f102 0101 	add.w	r1, r2, #1
 800589e:	6820      	ldr	r0, [r4, #0]
 80058a0:	bf8c      	ite	hi
 80058a2:	3202      	addhi	r2, #2
 80058a4:	4632      	movls	r2, r6
 80058a6:	f7ff ff6d 	bl	8005784 <put_fat>
		if (res != FR_OK) return res;
 80058aa:	2800      	cmp	r0, #0
 80058ac:	d1f2      	bne.n	8005894 <fill_last_frag+0xe>
		obj->n_frag--;
 80058ae:	69e3      	ldr	r3, [r4, #28]
 80058b0:	3b01      	subs	r3, #1
 80058b2:	61e3      	str	r3, [r4, #28]
 80058b4:	e7eb      	b.n	800588e <fill_last_frag+0x8>

080058b6 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80058b6:	2901      	cmp	r1, #1
{
 80058b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058bc:	4606      	mov	r6, r0
 80058be:	460d      	mov	r5, r1
 80058c0:	4617      	mov	r7, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80058c2:	d802      	bhi.n	80058ca <remove_chain+0x14>
 80058c4:	2002      	movs	r0, #2
}
 80058c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	FATFS *fs = obj->fs;
 80058ca:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80058cc:	69e3      	ldr	r3, [r4, #28]
 80058ce:	428b      	cmp	r3, r1
 80058d0:	d9f8      	bls.n	80058c4 <remove_chain+0xe>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80058d2:	b96a      	cbnz	r2, 80058f0 <remove_chain+0x3a>
{
 80058d4:	46a9      	mov	r9, r5
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80058d6:	4629      	mov	r1, r5
 80058d8:	4630      	mov	r0, r6
 80058da:	f7ff fe2a 	bl	8005532 <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 80058de:	4680      	mov	r8, r0
 80058e0:	b388      	cbz	r0, 8005946 <remove_chain+0x90>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80058e2:	2801      	cmp	r0, #1
 80058e4:	d0ee      	beq.n	80058c4 <remove_chain+0xe>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80058e6:	f1b0 3fff 	cmp.w	r0, #4294967295
 80058ea:	d110      	bne.n	800590e <remove_chain+0x58>
 80058ec:	2001      	movs	r0, #1
 80058ee:	e7ea      	b.n	80058c6 <remove_chain+0x10>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80058f0:	7823      	ldrb	r3, [r4, #0]
 80058f2:	2b04      	cmp	r3, #4
 80058f4:	d102      	bne.n	80058fc <remove_chain+0x46>
 80058f6:	79c3      	ldrb	r3, [r0, #7]
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d0eb      	beq.n	80058d4 <remove_chain+0x1e>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80058fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005900:	4639      	mov	r1, r7
 8005902:	4620      	mov	r0, r4
 8005904:	f7ff ff3e 	bl	8005784 <put_fat>
		if (res != FR_OK) return res;
 8005908:	2800      	cmp	r0, #0
 800590a:	d0e3      	beq.n	80058d4 <remove_chain+0x1e>
 800590c:	e7db      	b.n	80058c6 <remove_chain+0x10>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800590e:	7823      	ldrb	r3, [r4, #0]
 8005910:	2b04      	cmp	r3, #4
 8005912:	d11d      	bne.n	8005950 <remove_chain+0x9a>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005914:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
 8005918:	3a02      	subs	r2, #2
 800591a:	4293      	cmp	r3, r2
 800591c:	d320      	bcc.n	8005960 <remove_chain+0xaa>
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800591e:	1c6a      	adds	r2, r5, #1
 8005920:	4542      	cmp	r2, r8
 8005922:	d00c      	beq.n	800593e <remove_chain+0x88>
			if (fs->fs_type == FS_EXFAT) {
 8005924:	7823      	ldrb	r3, [r4, #0]
 8005926:	2b04      	cmp	r3, #4
 8005928:	d108      	bne.n	800593c <remove_chain+0x86>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800592a:	2300      	movs	r3, #0
 800592c:	eba2 0209 	sub.w	r2, r2, r9
 8005930:	4649      	mov	r1, r9
 8005932:	4620      	mov	r0, r4
 8005934:	f7ff fdbf 	bl	80054b6 <change_bitmap>
				if (res != FR_OK) return res;
 8005938:	2800      	cmp	r0, #0
 800593a:	d1c4      	bne.n	80058c6 <remove_chain+0x10>
 800593c:	46c1      	mov	r9, r8
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800593e:	69e3      	ldr	r3, [r4, #28]
 8005940:	4645      	mov	r5, r8
 8005942:	4543      	cmp	r3, r8
 8005944:	d8c7      	bhi.n	80058d6 <remove_chain+0x20>
	if (fs->fs_type == FS_EXFAT) {
 8005946:	7823      	ldrb	r3, [r4, #0]
 8005948:	2b04      	cmp	r3, #4
 800594a:	d010      	beq.n	800596e <remove_chain+0xb8>
	return FR_OK;
 800594c:	2000      	movs	r0, #0
 800594e:	e7ba      	b.n	80058c6 <remove_chain+0x10>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005950:	2200      	movs	r2, #0
 8005952:	4629      	mov	r1, r5
 8005954:	4620      	mov	r0, r4
 8005956:	f7ff ff15 	bl	8005784 <put_fat>
			if (res != FR_OK) return res;
 800595a:	2800      	cmp	r0, #0
 800595c:	d0da      	beq.n	8005914 <remove_chain+0x5e>
 800595e:	e7b2      	b.n	80058c6 <remove_chain+0x10>
			fs->free_clst++;
 8005960:	3301      	adds	r3, #1
 8005962:	61a3      	str	r3, [r4, #24]
			fs->fsi_flag |= 1;
 8005964:	7923      	ldrb	r3, [r4, #4]
 8005966:	f043 0301 	orr.w	r3, r3, #1
 800596a:	7123      	strb	r3, [r4, #4]
 800596c:	e7d7      	b.n	800591e <remove_chain+0x68>
		if (pclst == 0) {	/* Has the entire chain been removed? */
 800596e:	b90f      	cbnz	r7, 8005974 <remove_chain+0xbe>
			obj->stat = 0;		/* Change the chain status 'initial' */
 8005970:	71f7      	strb	r7, [r6, #7]
 8005972:	e7eb      	b.n	800594c <remove_chain+0x96>
			if (obj->stat == 0) {	/* Is it a fragmented chain from the beginning of this session? */
 8005974:	79f3      	ldrb	r3, [r6, #7]
 8005976:	b98b      	cbnz	r3, 800599c <remove_chain+0xe6>
				clst = obj->sclust;		/* Follow the chain to check if it gets contiguous */
 8005978:	68b4      	ldr	r4, [r6, #8]
				while (clst != pclst) {
 800597a:	42bc      	cmp	r4, r7
 800597c:	d102      	bne.n	8005984 <remove_chain+0xce>
					obj->stat = 2;	/* Change the chain status 'contiguous' */
 800597e:	2302      	movs	r3, #2
 8005980:	71f3      	strb	r3, [r6, #7]
 8005982:	e7e3      	b.n	800594c <remove_chain+0x96>
					nxt = get_fat(obj, clst);
 8005984:	4621      	mov	r1, r4
 8005986:	4630      	mov	r0, r6
 8005988:	f7ff fdd3 	bl	8005532 <get_fat>
					if (nxt < 2) return FR_INT_ERR;
 800598c:	2801      	cmp	r0, #1
 800598e:	d999      	bls.n	80058c4 <remove_chain+0xe>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
 8005990:	1c43      	adds	r3, r0, #1
 8005992:	d0ab      	beq.n	80058ec <remove_chain+0x36>
					if (nxt != clst + 1) break;	/* Not contiguous? */
 8005994:	3401      	adds	r4, #1
 8005996:	4284      	cmp	r4, r0
 8005998:	d0ef      	beq.n	800597a <remove_chain+0xc4>
 800599a:	e7d7      	b.n	800594c <remove_chain+0x96>
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
 800599c:	2b03      	cmp	r3, #3
 800599e:	d1d5      	bne.n	800594c <remove_chain+0x96>
 80059a0:	68b3      	ldr	r3, [r6, #8]
 80059a2:	42bb      	cmp	r3, r7
 80059a4:	d8d2      	bhi.n	800594c <remove_chain+0x96>
 80059a6:	69b2      	ldr	r2, [r6, #24]
 80059a8:	4413      	add	r3, r2
 80059aa:	42bb      	cmp	r3, r7
 80059ac:	d2e7      	bcs.n	800597e <remove_chain+0xc8>
 80059ae:	e7cd      	b.n	800594c <remove_chain+0x96>

080059b0 <fill_first_frag>:
{
 80059b0:	b570      	push	{r4, r5, r6, lr}
	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
 80059b2:	79c3      	ldrb	r3, [r0, #7]
{
 80059b4:	4604      	mov	r4, r0
	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
 80059b6:	2b03      	cmp	r3, #3
 80059b8:	d110      	bne.n	80059dc <fill_first_frag+0x2c>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 80059ba:	6881      	ldr	r1, [r0, #8]
 80059bc:	6983      	ldr	r3, [r0, #24]
 80059be:	18cd      	adds	r5, r1, r3
 80059c0:	42a9      	cmp	r1, r5
 80059c2:	d102      	bne.n	80059ca <fill_first_frag+0x1a>
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 80059c4:	2000      	movs	r0, #0
 80059c6:	71e0      	strb	r0, [r4, #7]
 80059c8:	e007      	b.n	80059da <fill_first_frag+0x2a>
			res = put_fat(obj->fs, cl, cl + 1);
 80059ca:	1c4e      	adds	r6, r1, #1
 80059cc:	4632      	mov	r2, r6
 80059ce:	6820      	ldr	r0, [r4, #0]
 80059d0:	f7ff fed8 	bl	8005784 <put_fat>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 80059d4:	4631      	mov	r1, r6
			if (res != FR_OK) return res;
 80059d6:	2800      	cmp	r0, #0
 80059d8:	d0f2      	beq.n	80059c0 <fill_first_frag+0x10>
}
 80059da:	bd70      	pop	{r4, r5, r6, pc}
	return FR_OK;
 80059dc:	2000      	movs	r0, #0
 80059de:	e7fc      	b.n	80059da <fill_first_frag+0x2a>

080059e0 <mount_volume>:
{
 80059e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	*rfs = 0;
 80059e4:	2300      	movs	r3, #0
 80059e6:	600b      	str	r3, [r1, #0]
{
 80059e8:	460f      	mov	r7, r1
 80059ea:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 80059ec:	f7ff fb53 	bl	8005096 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80059f0:	1e06      	subs	r6, r0, #0
 80059f2:	f2c0 8175 	blt.w	8005ce0 <mount_volume+0x300>
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 80059f6:	4bbd      	ldr	r3, [pc, #756]	; (8005cec <mount_volume+0x30c>)
 80059f8:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 80059fc:	2c00      	cmp	r4, #0
 80059fe:	f000 8171 	beq.w	8005ce4 <mount_volume+0x304>
	*rfs = fs;							/* Return pointer to the filesystem object */
 8005a02:	603c      	str	r4, [r7, #0]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8005a04:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005a06:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8005a0a:	b173      	cbz	r3, 8005a2a <mount_volume+0x4a>
		stat = disk_status(fs->pdrv);
 8005a0c:	7860      	ldrb	r0, [r4, #1]
 8005a0e:	f7ff f9e9 	bl	8004de4 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005a12:	07c7      	lsls	r7, r0, #31
 8005a14:	d409      	bmi.n	8005a2a <mount_volume+0x4a>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005a16:	2d00      	cmp	r5, #0
 8005a18:	f000 80f1 	beq.w	8005bfe <mount_volume+0x21e>
 8005a1c:	f010 0004 	ands.w	r0, r0, #4
 8005a20:	d000      	beq.n	8005a24 <mount_volume+0x44>
				return FR_WRITE_PROTECTED;
 8005a22:	200a      	movs	r0, #10
}
 8005a24:	b004      	add	sp, #16
 8005a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	fs->fs_type = 0;					/* Clear the filesystem object */
 8005a2a:	2300      	movs	r3, #0
	fs->pdrv = LD2PD(vol);				/* Volume hosting physical drive */
 8005a2c:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the filesystem object */
 8005a2e:	7023      	strb	r3, [r4, #0]
	fs->pdrv = LD2PD(vol);				/* Volume hosting physical drive */
 8005a30:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 8005a32:	f7ff f9d9 	bl	8004de8 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005a36:	07c1      	lsls	r1, r0, #31
 8005a38:	f100 8156 	bmi.w	8005ce8 <mount_volume+0x308>
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005a3c:	b10d      	cbz	r5, 8005a42 <mount_volume+0x62>
 8005a3e:	0742      	lsls	r2, r0, #29
 8005a40:	d4ef      	bmi.n	8005a22 <mount_volume+0x42>
	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD */
 8005a42:	2100      	movs	r1, #0
 8005a44:	4620      	mov	r0, r4
 8005a46:	f7ff fe59 	bl	80056fc <check_fs>
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is a FAT VBR as auto scan, not a BS or disk error */
 8005a4a:	2802      	cmp	r0, #2
 8005a4c:	f040 809c 	bne.w	8005b88 <mount_volume+0x1a8>
 8005a50:	2100      	movs	r1, #0
 8005a52:	f204 2502 	addw	r5, r4, #514	; 0x202
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 8005a56:	4628      	mov	r0, r5
 8005a58:	f7ff fa88 	bl	8004f6c <ld_dword>
 8005a5c:	f84d 0021 	str.w	r0, [sp, r1, lsl #2]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 8005a60:	3101      	adds	r1, #1
 8005a62:	2904      	cmp	r1, #4
 8005a64:	f105 0510 	add.w	r5, r5, #16
 8005a68:	d1f5      	bne.n	8005a56 <mount_volume+0x76>
 8005a6a:	2500      	movs	r5, #0
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 8005a6c:	f85d 1025 	ldr.w	r1, [sp, r5, lsl #2]
 8005a70:	2900      	cmp	r1, #0
 8005a72:	f000 8081 	beq.w	8005b78 <mount_volume+0x198>
 8005a76:	4620      	mov	r0, r4
 8005a78:	f7ff fe40 	bl	80056fc <check_fs>
	} while (part == 0 && fmt >= 2 && ++i < 4);
 8005a7c:	2801      	cmp	r0, #1
 8005a7e:	d87c      	bhi.n	8005b7a <mount_volume+0x19a>
	if (fmt == 1) {
 8005a80:	2801      	cmp	r0, #1
	bsect = fs->winsect;					/* Volume location */
 8005a82:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	if (fmt == 1) {
 8005a84:	f040 80bd 	bne.w	8005c02 <mount_volume+0x222>
 8005a88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005a8c:	f104 027c 	add.w	r2, r4, #124	; 0x7c
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8005a90:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005a94:	2e00      	cmp	r6, #0
 8005a96:	d17e      	bne.n	8005b96 <mount_volume+0x1b6>
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d1f9      	bne.n	8005a90 <mount_volume+0xb0>
	rv = rv << 8 | ptr[0];
 8005a9c:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
 8005aa0:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 8005aa4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
 8005aa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005aac:	d173      	bne.n	8005b96 <mount_volume+0x1b6>
		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 8005aae:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 8005ab2:	2b09      	cmp	r3, #9
 8005ab4:	d16f      	bne.n	8005b96 <mount_volume+0x1b6>
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 8005ab6:	f104 0084 	add.w	r0, r4, #132	; 0x84
 8005aba:	f7ff fa5f 	bl	8004f7c <ld_qword>
 8005abe:	eb10 0805 	adds.w	r8, r0, r5
 8005ac2:	f141 0900 	adc.w	r9, r1, #0
		if (!FF_LBA64 && maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 8005ac6:	f1b9 0f01 	cmp.w	r9, #1
 8005aca:	bf08      	it	eq
 8005acc:	f1b8 0f00 	cmpeq.w	r8, #0
 8005ad0:	d261      	bcs.n	8005b96 <mount_volume+0x1b6>
		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 8005ad2:	f104 0090 	add.w	r0, r4, #144	; 0x90
 8005ad6:	f7ff fa49 	bl	8004f6c <ld_dword>
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8005ada:	f894 70aa 	ldrb.w	r7, [r4, #170]	; 0xaa
		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 8005ade:	6220      	str	r0, [r4, #32]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8005ae0:	2f01      	cmp	r7, #1
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8005ae2:	70a7      	strb	r7, [r4, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8005ae4:	d157      	bne.n	8005b96 <mount_volume+0x1b6>
		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 8005ae6:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
 8005aea:	fa07 fa03 	lsl.w	sl, r7, r3
 8005aee:	fa1f f38a 	uxth.w	r3, sl
 8005af2:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d04e      	beq.n	8005b96 <mount_volume+0x1b6>
		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 8005af8:	f104 0098 	add.w	r0, r4, #152	; 0x98
 8005afc:	f7ff fa36 	bl	8004f6c <ld_dword>
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8005b00:	4b7b      	ldr	r3, [pc, #492]	; (8005cf0 <mount_volume+0x310>)
		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 8005b02:	4607      	mov	r7, r0
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8005b04:	4298      	cmp	r0, r3
 8005b06:	d846      	bhi.n	8005b96 <mount_volume+0x1b6>
		fs->n_fatent = nclst + 2;
 8005b08:	1c83      	adds	r3, r0, #2
 8005b0a:	61e3      	str	r3, [r4, #28]
		fs->volbase = bsect;
 8005b0c:	6265      	str	r5, [r4, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 8005b0e:	f104 0094 	add.w	r0, r4, #148	; 0x94
 8005b12:	f7ff fa2b 	bl	8004f6c <ld_dword>
 8005b16:	1941      	adds	r1, r0, r5
 8005b18:	6321      	str	r1, [r4, #48]	; 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8005b1a:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 8005b1e:	f7ff fa25 	bl	8004f6c <ld_dword>
 8005b22:	4428      	add	r0, r5
 8005b24:	62a0      	str	r0, [r4, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 8005b26:	4608      	mov	r0, r1
 8005b28:	2100      	movs	r1, #0
 8005b2a:	fa1f f38a 	uxth.w	r3, sl
 8005b2e:	435f      	muls	r7, r3
 8005b30:	19c2      	adds	r2, r0, r7
 8005b32:	f141 0300 	adc.w	r3, r1, #0
 8005b36:	4599      	cmp	r9, r3
 8005b38:	bf08      	it	eq
 8005b3a:	4590      	cmpeq	r8, r2
 8005b3c:	d32b      	bcc.n	8005b96 <mount_volume+0x1b6>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 8005b3e:	f104 009c 	add.w	r0, r4, #156	; 0x9c
 8005b42:	f7ff fa13 	bl	8004f6c <ld_dword>
		so = i = 0;
 8005b46:	4635      	mov	r5, r6
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 8005b48:	62e0      	str	r0, [r4, #44]	; 0x2c
			if (i == 0) {
 8005b4a:	b965      	cbnz	r5, 8005b66 <mount_volume+0x186>
				if (so >= fs->csize) return FR_NO_FILESYSTEM;	/* Not found? */
 8005b4c:	8963      	ldrh	r3, [r4, #10]
 8005b4e:	42b3      	cmp	r3, r6
 8005b50:	d921      	bls.n	8005b96 <mount_volume+0x1b6>
				if (move_window(fs, clst2sect(fs, (DWORD)fs->dirbase) + so) != FR_OK) return FR_DISK_ERR;
 8005b52:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005b54:	4620      	mov	r0, r4
 8005b56:	f7ff fa6d 	bl	8005034 <clst2sect>
 8005b5a:	1981      	adds	r1, r0, r6
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	f7ff fc8c 	bl	800547a <move_window>
 8005b62:	b998      	cbnz	r0, 8005b8c <mount_volume+0x1ac>
				so++;
 8005b64:	3601      	adds	r6, #1
			if (fs->win[i] == ET_BITMAP) break;				/* Is it a bitmap entry? */
 8005b66:	1963      	adds	r3, r4, r5
 8005b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b6c:	2b81      	cmp	r3, #129	; 0x81
 8005b6e:	d014      	beq.n	8005b9a <mount_volume+0x1ba>
			i = (i + SZDIRE) % SS(fs);	/* Next entry */
 8005b70:	3520      	adds	r5, #32
 8005b72:	f3c5 0508 	ubfx	r5, r5, #0, #9
			if (i == 0) {
 8005b76:	e7e8      	b.n	8005b4a <mount_volume+0x16a>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 8005b78:	2003      	movs	r0, #3
	} while (part == 0 && fmt >= 2 && ++i < 4);
 8005b7a:	3501      	adds	r5, #1
 8005b7c:	2d04      	cmp	r5, #4
 8005b7e:	f47f af75 	bne.w	8005a6c <mount_volume+0x8c>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005b82:	2804      	cmp	r0, #4
 8005b84:	d107      	bne.n	8005b96 <mount_volume+0x1b6>
 8005b86:	e001      	b.n	8005b8c <mount_volume+0x1ac>
 8005b88:	2804      	cmp	r0, #4
 8005b8a:	d101      	bne.n	8005b90 <mount_volume+0x1b0>
 8005b8c:	2001      	movs	r0, #1
 8005b8e:	e749      	b.n	8005a24 <mount_volume+0x44>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005b90:	2801      	cmp	r0, #1
 8005b92:	f67f af75 	bls.w	8005a80 <mount_volume+0xa0>
 8005b96:	200d      	movs	r0, #13
 8005b98:	e744      	b.n	8005a24 <mount_volume+0x44>
		bcl = ld_dword(fs->win + i + 20);					/* Bitmap cluster */
 8005b9a:	f105 0014 	add.w	r0, r5, #20
 8005b9e:	f104 063c 	add.w	r6, r4, #60	; 0x3c
 8005ba2:	4430      	add	r0, r6
 8005ba4:	f7ff f9e2 	bl	8004f6c <ld_dword>
		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;
 8005ba8:	2801      	cmp	r0, #1
		bcl = ld_dword(fs->win + i + 20);					/* Bitmap cluster */
 8005baa:	4605      	mov	r5, r0
		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;
 8005bac:	d9f3      	bls.n	8005b96 <mount_volume+0x1b6>
 8005bae:	69e3      	ldr	r3, [r4, #28]
 8005bb0:	4283      	cmp	r3, r0
 8005bb2:	d9f0      	bls.n	8005b96 <mount_volume+0x1b6>
		fs->bitbase = fs->database + fs->csize * (bcl - 2);	/* Bitmap sector */
 8005bb4:	8962      	ldrh	r2, [r4, #10]
 8005bb6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005bb8:	1e83      	subs	r3, r0, #2
 8005bba:	fb03 1302 	mla	r3, r3, r2, r1
 8005bbe:	6363      	str	r3, [r4, #52]	; 0x34
			if (move_window(fs, fs->fatbase + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
 8005bc0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005bc2:	4620      	mov	r0, r4
 8005bc4:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 8005bc8:	f7ff fc57 	bl	800547a <move_window>
 8005bcc:	2800      	cmp	r0, #0
 8005bce:	d1dd      	bne.n	8005b8c <mount_volume+0x1ac>
			cv = ld_dword(fs->win + bcl % (SS(fs) / 4) * 4);
 8005bd0:	f005 007f 	and.w	r0, r5, #127	; 0x7f
 8005bd4:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8005bd8:	f7ff f9c8 	bl	8004f6c <ld_dword>
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
 8005bdc:	1c43      	adds	r3, r0, #1
 8005bde:	d004      	beq.n	8005bea <mount_volume+0x20a>
			if (cv != ++bcl) return FR_NO_FILESYSTEM;	/* Fragmented? */
 8005be0:	1c6b      	adds	r3, r5, #1
 8005be2:	4298      	cmp	r0, r3
 8005be4:	4605      	mov	r5, r0
 8005be6:	d0eb      	beq.n	8005bc0 <mount_volume+0x1e0>
 8005be8:	e7d5      	b.n	8005b96 <mount_volume+0x1b6>
		fmt = FS_EXFAT;			/* FAT sub-type */
 8005bea:	2704      	movs	r7, #4
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005bec:	e9c4 0005 	strd	r0, r0, [r4, #20]
	fs->id = ++Fsid;		/* Volume mount ID */
 8005bf0:	4a40      	ldr	r2, [pc, #256]	; (8005cf4 <mount_volume+0x314>)
	fs->fs_type = (BYTE)fmt;/* FAT sub-type */
 8005bf2:	7027      	strb	r7, [r4, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 8005bf4:	8813      	ldrh	r3, [r2, #0]
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	8013      	strh	r3, [r2, #0]
 8005bfc:	80e3      	strh	r3, [r4, #6]
	return FR_OK;
 8005bfe:	2000      	movs	r0, #0
 8005c00:	e710      	b.n	8005a24 <mount_volume+0x44>
	rv = rv << 8 | ptr[0];
 8005c02:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8005c06:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 8005c0a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005c0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c12:	d1c0      	bne.n	8005b96 <mount_volume+0x1b6>
	rv = rv << 8 | ptr[0];
 8005c14:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 8005c18:	f894 6052 	ldrb.w	r6, [r4, #82]	; 0x52
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005c1c:	ea56 2603 	orrs.w	r6, r6, r3, lsl #8
 8005c20:	d104      	bne.n	8005c2c <mount_volume+0x24c>
 8005c22:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8005c26:	f7ff f9a1 	bl	8004f6c <ld_dword>
 8005c2a:	4606      	mov	r6, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005c2c:	f894 904c 	ldrb.w	r9, [r4, #76]	; 0x4c
		fs->fsize = fasize;
 8005c30:	6226      	str	r6, [r4, #32]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005c32:	f109 33ff 	add.w	r3, r9, #4294967295
 8005c36:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005c38:	f884 9002 	strb.w	r9, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005c3c:	d8ab      	bhi.n	8005b96 <mount_volume+0x1b6>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005c3e:	f894 7049 	ldrb.w	r7, [r4, #73]	; 0x49
 8005c42:	b2bb      	uxth	r3, r7
 8005c44:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d0a5      	beq.n	8005b96 <mount_volume+0x1b6>
 8005c4a:	1e7b      	subs	r3, r7, #1
 8005c4c:	423b      	tst	r3, r7
 8005c4e:	d1a2      	bne.n	8005b96 <mount_volume+0x1b6>
	rv = rv << 8 | ptr[0];
 8005c50:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
 8005c54:	f894 804d 	ldrb.w	r8, [r4, #77]	; 0x4d
 8005c58:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005c5c:	f018 0f0f 	tst.w	r8, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005c60:	f8a4 8008 	strh.w	r8, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005c64:	d197      	bne.n	8005b96 <mount_volume+0x1b6>
	rv = rv << 8 | ptr[0];
 8005c66:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
 8005c6a:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005c6e:	ea50 2001 	orrs.w	r0, r0, r1, lsl #8
 8005c72:	d103      	bne.n	8005c7c <mount_volume+0x29c>
 8005c74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005c78:	f7ff f978 	bl	8004f6c <ld_dword>
	rv = rv << 8 | ptr[0];
 8005c7c:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
 8005c80:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005c84:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8005c88:	d085      	beq.n	8005b96 <mount_volume+0x1b6>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005c8a:	fb06 f909 	mul.w	r9, r6, r9
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005c8e:	eb03 1218 	add.w	r2, r3, r8, lsr #4
 8005c92:	444a      	add	r2, r9
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005c94:	4290      	cmp	r0, r2
 8005c96:	f4ff af7e 	bcc.w	8005b96 <mount_volume+0x1b6>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005c9a:	1a81      	subs	r1, r0, r2
 8005c9c:	fbb1 f1f7 	udiv	r1, r1, r7
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005ca0:	2900      	cmp	r1, #0
 8005ca2:	f43f af78 	beq.w	8005b96 <mount_volume+0x1b6>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8005ca6:	4814      	ldr	r0, [pc, #80]	; (8005cf8 <mount_volume+0x318>)
 8005ca8:	4281      	cmp	r1, r0
 8005caa:	f63f af74 	bhi.w	8005b96 <mount_volume+0x1b6>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005cae:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 8005cb2:	4281      	cmp	r1, r0
 8005cb4:	d922      	bls.n	8005cfc <mount_volume+0x31c>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8005cb6:	2703      	movs	r7, #3
 8005cb8:	e026      	b.n	8005d08 <mount_volume+0x328>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8005cba:	f1b8 0f00 	cmp.w	r8, #0
 8005cbe:	f43f af6a 	beq.w	8005b96 <mount_volume+0x1b6>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005cc2:	2f02      	cmp	r7, #2
 8005cc4:	ea4f 0041 	mov.w	r0, r1, lsl #1
 8005cc8:	bf18      	it	ne
 8005cca:	1840      	addne	r0, r0, r1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005ccc:	444b      	add	r3, r9
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005cce:	bf18      	it	ne
 8005cd0:	f001 0101 	andne.w	r1, r1, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005cd4:	62e3      	str	r3, [r4, #44]	; 0x2c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005cd6:	bf0c      	ite	eq
 8005cd8:	4601      	moveq	r1, r0
 8005cda:	eb01 0150 	addne.w	r1, r1, r0, lsr #1
 8005cde:	e02e      	b.n	8005d3e <mount_volume+0x35e>
	if (vol < 0) return FR_INVALID_DRIVE;
 8005ce0:	200b      	movs	r0, #11
 8005ce2:	e69f      	b.n	8005a24 <mount_volume+0x44>
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8005ce4:	200c      	movs	r0, #12
 8005ce6:	e69d      	b.n	8005a24 <mount_volume+0x44>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005ce8:	2003      	movs	r0, #3
 8005cea:	e69b      	b.n	8005a24 <mount_volume+0x44>
 8005cec:	200008f0 	.word	0x200008f0
 8005cf0:	7ffffffd 	.word	0x7ffffffd
 8005cf4:	200008f4 	.word	0x200008f4
 8005cf8:	0ffffff5 	.word	0x0ffffff5
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005cfc:	f640 77f5 	movw	r7, #4085	; 0xff5
 8005d00:	42b9      	cmp	r1, r7
 8005d02:	bf94      	ite	ls
 8005d04:	2701      	movls	r7, #1
 8005d06:	2702      	movhi	r7, #2
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005d08:	3102      	adds	r1, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005d0a:	442b      	add	r3, r5
		fs->database = bsect + sysect;					/* Data start sector */
 8005d0c:	442a      	add	r2, r5
		if (fmt == FS_FAT32) {
 8005d0e:	2f03      	cmp	r7, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005d10:	61e1      	str	r1, [r4, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8005d12:	6265      	str	r5, [r4, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005d14:	62a3      	str	r3, [r4, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8005d16:	6322      	str	r2, [r4, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8005d18:	d1cf      	bne.n	8005cba <mount_volume+0x2da>
	rv = rv << 8 | ptr[0];
 8005d1a:	f894 2067 	ldrb.w	r2, [r4, #103]	; 0x67
 8005d1e:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005d22:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8005d26:	f47f af36 	bne.w	8005b96 <mount_volume+0x1b6>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005d2a:	f1b8 0f00 	cmp.w	r8, #0
 8005d2e:	f47f af32 	bne.w	8005b96 <mount_volume+0x1b6>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005d32:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005d36:	f7ff f919 	bl	8004f6c <ld_dword>
 8005d3a:	62e0      	str	r0, [r4, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005d3c:	0089      	lsls	r1, r1, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005d3e:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
 8005d42:	ebb6 2f51 	cmp.w	r6, r1, lsr #9
 8005d46:	f4ff af26 	bcc.w	8005b96 <mount_volume+0x1b6>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d4e:	e9c4 3305 	strd	r3, r3, [r4, #20]
		fs->fsi_flag = 0x80;
 8005d52:	2380      	movs	r3, #128	; 0x80
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 8005d54:	2f03      	cmp	r7, #3
		fs->fsi_flag = 0x80;
 8005d56:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 8005d58:	f47f af4a 	bne.w	8005bf0 <mount_volume+0x210>
	rv = rv << 8 | ptr[0];
 8005d5c:	f894 206d 	ldrb.w	r2, [r4, #109]	; 0x6d
 8005d60:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8005d64:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	f47f af41 	bne.w	8005bf0 <mount_volume+0x210>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005d6e:	1c69      	adds	r1, r5, #1
 8005d70:	4620      	mov	r0, r4
 8005d72:	f7ff fb82 	bl	800547a <move_window>
 8005d76:	2800      	cmp	r0, #0
 8005d78:	f47f af3a 	bne.w	8005bf0 <mount_volume+0x210>
	rv = rv << 8 | ptr[0];
 8005d7c:	f894 223b 	ldrb.w	r2, [r4, #571]	; 0x23b
 8005d80:	f894 323a 	ldrb.w	r3, [r4, #570]	; 0x23a
			fs->fsi_flag = 0;
 8005d84:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 8005d86:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 8005d8a:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	f47f af2e 	bne.w	8005bf0 <mount_volume+0x210>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005d94:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8005d98:	f7ff f8e8 	bl	8004f6c <ld_dword>
 8005d9c:	4b0b      	ldr	r3, [pc, #44]	; (8005dcc <mount_volume+0x3ec>)
 8005d9e:	4298      	cmp	r0, r3
 8005da0:	f47f af26 	bne.w	8005bf0 <mount_volume+0x210>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005da4:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8005da8:	f7ff f8e0 	bl	8004f6c <ld_dword>
 8005dac:	4b08      	ldr	r3, [pc, #32]	; (8005dd0 <mount_volume+0x3f0>)
 8005dae:	4298      	cmp	r0, r3
 8005db0:	f47f af1e 	bne.w	8005bf0 <mount_volume+0x210>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005db4:	f504 7009 	add.w	r0, r4, #548	; 0x224
 8005db8:	f7ff f8d8 	bl	8004f6c <ld_dword>
 8005dbc:	61a0      	str	r0, [r4, #24]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005dbe:	f504 700a 	add.w	r0, r4, #552	; 0x228
 8005dc2:	f7ff f8d3 	bl	8004f6c <ld_dword>
 8005dc6:	6160      	str	r0, [r4, #20]
 8005dc8:	e712      	b.n	8005bf0 <mount_volume+0x210>
 8005dca:	bf00      	nop
 8005dcc:	41615252 	.word	0x41615252
 8005dd0:	61417272 	.word	0x61417272

08005dd4 <create_chain>:
{
 8005dd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dd8:	4607      	mov	r7, r0
	FATFS *fs = obj->fs;
 8005dda:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8005ddc:	4689      	mov	r9, r1
 8005dde:	b949      	cbnz	r1, 8005df4 <create_chain+0x20>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 8005de0:	696e      	ldr	r6, [r5, #20]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005de2:	b1ce      	cbz	r6, 8005e18 <create_chain+0x44>
 8005de4:	69eb      	ldr	r3, [r5, #28]
 8005de6:	42b3      	cmp	r3, r6
 8005de8:	bf98      	it	ls
 8005dea:	2601      	movls	r6, #1
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 8005dec:	69ab      	ldr	r3, [r5, #24]
 8005dee:	b9ab      	cbnz	r3, 8005e1c <create_chain+0x48>
 8005df0:	2400      	movs	r4, #0
 8005df2:	e009      	b.n	8005e08 <create_chain+0x34>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005df4:	f7ff fb9d 	bl	8005532 <get_fat>
		if (cs < 2) return 1;				/* Test for insanity */
 8005df8:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005dfa:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Test for insanity */
 8005dfc:	f240 80de 	bls.w	8005fbc <create_chain+0x1e8>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8005e00:	1c42      	adds	r2, r0, #1
 8005e02:	d104      	bne.n	8005e0e <create_chain+0x3a>
					ncl = 2;
 8005e04:	f04f 34ff 	mov.w	r4, #4294967295
}
 8005e08:	4620      	mov	r0, r4
 8005e0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005e0e:	69eb      	ldr	r3, [r5, #28]
 8005e10:	4283      	cmp	r3, r0
 8005e12:	d8f9      	bhi.n	8005e08 <create_chain+0x34>
 8005e14:	464e      	mov	r6, r9
 8005e16:	e7e9      	b.n	8005dec <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005e18:	2601      	movs	r6, #1
 8005e1a:	e7e7      	b.n	8005dec <create_chain+0x18>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8005e1c:	782a      	ldrb	r2, [r5, #0]
 8005e1e:	69eb      	ldr	r3, [r5, #28]
 8005e20:	2a04      	cmp	r2, #4
 8005e22:	f040 8088 	bne.w	8005f36 <create_chain+0x162>
	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8005e26:	f1a6 0a02 	sub.w	sl, r6, #2
	if (clst >= fs->n_fatent - 2) clst = 0;
 8005e2a:	3b02      	subs	r3, #2
 8005e2c:	459a      	cmp	sl, r3
 8005e2e:	bf28      	it	cs
 8005e30:	f04f 0a00 	movcs.w	sl, #0
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8005e34:	f04f 0b01 	mov.w	fp, #1
	scl = val = clst; ctr = 0;
 8005e38:	46d0      	mov	r8, sl
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 8005e3a:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8005e3c:	4628      	mov	r0, r5
 8005e3e:	eb01 3118 	add.w	r1, r1, r8, lsr #12
 8005e42:	f7ff fb1a 	bl	800547a <move_window>
 8005e46:	2800      	cmp	r0, #0
 8005e48:	d149      	bne.n	8005ede <create_chain+0x10a>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8005e4a:	f008 0307 	and.w	r3, r8, #7
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8005e4e:	69ea      	ldr	r2, [r5, #28]
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8005e50:	fa0b f303 	lsl.w	r3, fp, r3
 8005e54:	f3c8 01c8 	ubfx	r1, r8, #3, #9
 8005e58:	b2db      	uxtb	r3, r3
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8005e5a:	1e90      	subs	r0, r2, #2
			bm = 1;
 8005e5c:	4644      	mov	r4, r8
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8005e5e:	f108 0801 	add.w	r8, r8, #1
 8005e62:	4580      	cmp	r8, r0
					val = 0; bm = 0; i = SS(fs);
 8005e64:	bf28      	it	cs
 8005e66:	f04f 0800 	movcs.w	r8, #0
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8005e6a:	eb05 0201 	add.w	r2, r5, r1
 8005e6e:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
					val = 0; bm = 0; i = SS(fs);
 8005e72:	bf28      	it	cs
 8005e74:	f44f 7100 	movcs.w	r1, #512	; 0x200
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8005e78:	ea02 0203 	and.w	r2, r2, r3
 8005e7c:	bf3a      	itte	cc
 8005e7e:	005b      	lslcc	r3, r3, #1
 8005e80:	b2db      	uxtbcc	r3, r3
					val = 0; bm = 0; i = SS(fs);
 8005e82:	4643      	movcs	r3, r8
				if (bv == 0) {	/* Is it a free cluster? */
 8005e84:	bb0a      	cbnz	r2, 8005eca <create_chain+0xf6>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8005e86:	3402      	adds	r4, #2
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8005e88:	1e63      	subs	r3, r4, #1
 8005e8a:	3303      	adds	r3, #3
 8005e8c:	d8bc      	bhi.n	8005e08 <create_chain+0x34>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 8005e8e:	2301      	movs	r3, #1
 8005e90:	4621      	mov	r1, r4
 8005e92:	461a      	mov	r2, r3
 8005e94:	4628      	mov	r0, r5
 8005e96:	f7ff fb0e 	bl	80054b6 <change_bitmap>
		if (res == FR_INT_ERR) return 1;
 8005e9a:	2802      	cmp	r0, #2
 8005e9c:	f000 808e 	beq.w	8005fbc <create_chain+0x1e8>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8005ea0:	2801      	cmp	r0, #1
 8005ea2:	d0af      	beq.n	8005e04 <create_chain+0x30>
		if (clst == 0) {							/* Is it a new chain? */
 8005ea4:	f1b9 0f00 	cmp.w	r9, #0
 8005ea8:	d11e      	bne.n	8005ee8 <create_chain+0x114>
			obj->stat = 2;							/* Set status 'contiguous' */
 8005eaa:	2302      	movs	r3, #2
				obj->stat = 3;						/* Change status 'just fragmented' */
 8005eac:	71fb      	strb	r3, [r7, #7]
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 8005eae:	79fb      	ldrb	r3, [r7, #7]
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d007      	beq.n	8005ec4 <create_chain+0xf0>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8005eb4:	f109 0201 	add.w	r2, r9, #1
 8005eb8:	42a2      	cmp	r2, r4
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	d121      	bne.n	8005f02 <create_chain+0x12e>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8005ebe:	b1f3      	cbz	r3, 8005efe <create_chain+0x12a>
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005ec4:	2800      	cmp	r0, #0
 8005ec6:	d179      	bne.n	8005fbc <create_chain+0x1e8>
 8005ec8:	e027      	b.n	8005f1a <create_chain+0x146>
				if (val == clst) return 0;	/* All cluster scanned? */
 8005eca:	45c2      	cmp	sl, r8
 8005ecc:	d00a      	beq.n	8005ee4 <create_chain+0x110>
			} while (bm != 0);
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1c4      	bne.n	8005e5c <create_chain+0x88>
		} while (++i < SS(fs));
 8005ed2:	3101      	adds	r1, #1
 8005ed4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005ed8:	d2af      	bcs.n	8005e3a <create_chain+0x66>
			bm = 1;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e7be      	b.n	8005e5c <create_chain+0x88>
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 8005ede:	f04f 34ff 	mov.w	r4, #4294967295
 8005ee2:	e7d1      	b.n	8005e88 <create_chain+0xb4>
				if (val == clst) return 0;	/* All cluster scanned? */
 8005ee4:	2400      	movs	r4, #0
 8005ee6:	e7cf      	b.n	8005e88 <create_chain+0xb4>
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8005ee8:	79fb      	ldrb	r3, [r7, #7]
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d1df      	bne.n	8005eae <create_chain+0xda>
 8005eee:	1c73      	adds	r3, r6, #1
 8005ef0:	42a3      	cmp	r3, r4
 8005ef2:	d0dc      	beq.n	8005eae <create_chain+0xda>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	1af6      	subs	r6, r6, r3
 8005ef8:	61be      	str	r6, [r7, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8005efa:	2303      	movs	r3, #3
 8005efc:	e7d6      	b.n	8005eac <create_chain+0xd8>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8005efe:	2302      	movs	r3, #2
 8005f00:	e7df      	b.n	8005ec2 <create_chain+0xee>
				if (obj->n_frag == 0) obj->n_frag = 1;
 8005f02:	b90b      	cbnz	r3, 8005f08 <create_chain+0x134>
 8005f04:	2301      	movs	r3, #1
 8005f06:	61fb      	str	r3, [r7, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 8005f08:	4622      	mov	r2, r4
 8005f0a:	4649      	mov	r1, r9
 8005f0c:	4638      	mov	r0, r7
 8005f0e:	f7ff fcba 	bl	8005886 <fill_last_frag>
				if (res == FR_OK) obj->n_frag = 1;
 8005f12:	2800      	cmp	r0, #0
 8005f14:	d14f      	bne.n	8005fb6 <create_chain+0x1e2>
 8005f16:	2301      	movs	r3, #1
 8005f18:	61fb      	str	r3, [r7, #28]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005f1a:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
 8005f1e:	3a02      	subs	r2, #2
 8005f20:	4293      	cmp	r3, r2
 8005f22:	bf9c      	itt	ls
 8005f24:	f103 33ff 	addls.w	r3, r3, #4294967295
 8005f28:	61ab      	strls	r3, [r5, #24]
		fs->fsi_flag |= 1;
 8005f2a:	792b      	ldrb	r3, [r5, #4]
		fs->last_clst = ncl;
 8005f2c:	616c      	str	r4, [r5, #20]
		fs->fsi_flag |= 1;
 8005f2e:	f043 0301 	orr.w	r3, r3, #1
 8005f32:	712b      	strb	r3, [r5, #4]
 8005f34:	e768      	b.n	8005e08 <create_chain+0x34>
		if (scl == clst) {						/* Stretching an existing chain? */
 8005f36:	454e      	cmp	r6, r9
 8005f38:	d114      	bne.n	8005f64 <create_chain+0x190>
			ncl = scl + 1;						/* Test if next cluster is free */
 8005f3a:	1c74      	adds	r4, r6, #1
			if (ncl >= fs->n_fatent) ncl = 2;
 8005f3c:	429c      	cmp	r4, r3
 8005f3e:	bf28      	it	cs
 8005f40:	2402      	movcs	r4, #2
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 8005f42:	4638      	mov	r0, r7
 8005f44:	4621      	mov	r1, r4
 8005f46:	f7ff faf4 	bl	8005532 <get_fat>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8005f4a:	2801      	cmp	r0, #1
 8005f4c:	d036      	beq.n	8005fbc <create_chain+0x1e8>
 8005f4e:	1c43      	adds	r3, r0, #1
 8005f50:	f43f af58 	beq.w	8005e04 <create_chain+0x30>
			if (cs != 0) {						/* Not free? */
 8005f54:	b1e0      	cbz	r0, 8005f90 <create_chain+0x1bc>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 8005f56:	696b      	ldr	r3, [r5, #20]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d903      	bls.n	8005f64 <create_chain+0x190>
 8005f5c:	69ea      	ldr	r2, [r5, #28]
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	bf38      	it	cc
 8005f62:	461e      	movcc	r6, r3
 8005f64:	4634      	mov	r4, r6
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005f66:	69eb      	ldr	r3, [r5, #28]
				ncl++;							/* Next cluster */
 8005f68:	3401      	adds	r4, #1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005f6a:	42a3      	cmp	r3, r4
 8005f6c:	d803      	bhi.n	8005f76 <create_chain+0x1a2>
					if (ncl > scl) return 0;	/* No free cluster found? */
 8005f6e:	2e01      	cmp	r6, #1
 8005f70:	f67f af3e 	bls.w	8005df0 <create_chain+0x1c>
					ncl = 2;
 8005f74:	2402      	movs	r4, #2
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005f76:	4621      	mov	r1, r4
 8005f78:	4638      	mov	r0, r7
 8005f7a:	f7ff fada 	bl	8005532 <get_fat>
				if (cs == 0) break;				/* Found a free cluster? */
 8005f7e:	b148      	cbz	r0, 8005f94 <create_chain+0x1c0>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8005f80:	2801      	cmp	r0, #1
 8005f82:	d01b      	beq.n	8005fbc <create_chain+0x1e8>
 8005f84:	3001      	adds	r0, #1
 8005f86:	f43f af3d 	beq.w	8005e04 <create_chain+0x30>
				if (ncl == scl) return 0;		/* No free cluster found? */
 8005f8a:	42b4      	cmp	r4, r6
 8005f8c:	d1eb      	bne.n	8005f66 <create_chain+0x192>
 8005f8e:	e72f      	b.n	8005df0 <create_chain+0x1c>
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 8005f90:	2c00      	cmp	r4, #0
 8005f92:	d0e7      	beq.n	8005f64 <create_chain+0x190>
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 8005f94:	f04f 32ff 	mov.w	r2, #4294967295
 8005f98:	4621      	mov	r1, r4
 8005f9a:	4628      	mov	r0, r5
 8005f9c:	f7ff fbf2 	bl	8005784 <put_fat>
		if (res == FR_OK && clst != 0) {
 8005fa0:	b948      	cbnz	r0, 8005fb6 <create_chain+0x1e2>
 8005fa2:	f1b9 0f00 	cmp.w	r9, #0
 8005fa6:	d0b8      	beq.n	8005f1a <create_chain+0x146>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 8005fa8:	4622      	mov	r2, r4
 8005faa:	4649      	mov	r1, r9
 8005fac:	4628      	mov	r0, r5
 8005fae:	f7ff fbe9 	bl	8005784 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005fb2:	2800      	cmp	r0, #0
 8005fb4:	d0b1      	beq.n	8005f1a <create_chain+0x146>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005fb6:	2801      	cmp	r0, #1
 8005fb8:	f43f af24 	beq.w	8005e04 <create_chain+0x30>
 8005fbc:	2401      	movs	r4, #1
 8005fbe:	e723      	b.n	8005e08 <create_chain+0x34>

08005fc0 <sync_fs>:
{
 8005fc0:	b570      	push	{r4, r5, r6, lr}
	if (fs->wflag) {	/* Is the disk access window dirty? */
 8005fc2:	78c3      	ldrb	r3, [r0, #3]
{
 8005fc4:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Is the disk access window dirty? */
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d144      	bne.n	8006054 <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 8005fca:	7823      	ldrb	r3, [r4, #0]
 8005fcc:	2b03      	cmp	r3, #3
 8005fce:	d138      	bne.n	8006042 <sync_fs+0x82>
 8005fd0:	7926      	ldrb	r6, [r4, #4]
 8005fd2:	2e01      	cmp	r6, #1
 8005fd4:	d135      	bne.n	8006042 <sync_fs+0x82>
			mem_set(fs->win, 0, sizeof fs->win);
 8005fd6:	f104 053c 	add.w	r5, r4, #60	; 0x3c
 8005fda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fde:	2100      	movs	r1, #0
 8005fe0:	4628      	mov	r0, r5
 8005fe2:	f7ff f813 	bl	800500c <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 8005fe6:	2355      	movs	r3, #85	; 0x55
 8005fe8:	f884 323a 	strb.w	r3, [r4, #570]	; 0x23a
	*ptr++ = (BYTE)val;
 8005fec:	23aa      	movs	r3, #170	; 0xaa
 8005fee:	f884 323b 	strb.w	r3, [r4, #571]	; 0x23b
	*ptr++ = (BYTE)val; val >>= 8;
 8005ff2:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
 8005ff4:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8005ff6:	2172      	movs	r1, #114	; 0x72
 8005ff8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	*ptr++ = (BYTE)val; val >>= 8;
 8005ffc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	*ptr++ = (BYTE)val; val >>= 8;
 8006000:	2361      	movs	r3, #97	; 0x61
	*ptr++ = (BYTE)val;
 8006002:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
	*ptr++ = (BYTE)val; val >>= 8;
 8006006:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800600a:	f884 2222 	strb.w	r2, [r4, #546]	; 0x222
	*ptr++ = (BYTE)val;
 800600e:	f884 3223 	strb.w	r3, [r4, #547]	; 0x223
	*ptr++ = (BYTE)val; val >>= 8;
 8006012:	f884 1220 	strb.w	r1, [r4, #544]	; 0x220
	*ptr++ = (BYTE)val; val >>= 8;
 8006016:	f884 1221 	strb.w	r1, [r4, #545]	; 0x221
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800601a:	f504 7009 	add.w	r0, r4, #548	; 0x224
 800601e:	69a1      	ldr	r1, [r4, #24]
 8006020:	f7fe ffdd 	bl	8004fde <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006024:	6961      	ldr	r1, [r4, #20]
 8006026:	f504 700a 	add.w	r0, r4, #552	; 0x228
 800602a:	f7fe ffd8 	bl	8004fde <st_dword>
			fs->winsect = fs->volbase + 1;
 800602e:	6a62      	ldr	r2, [r4, #36]	; 0x24
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8006030:	4633      	mov	r3, r6
			fs->winsect = fs->volbase + 1;
 8006032:	3201      	adds	r2, #1
 8006034:	63a2      	str	r2, [r4, #56]	; 0x38
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8006036:	4629      	mov	r1, r5
 8006038:	7860      	ldrb	r0, [r4, #1]
 800603a:	f7fe ff1d 	bl	8004e78 <disk_write>
			fs->fsi_flag = 0;
 800603e:	2300      	movs	r3, #0
 8006040:	7123      	strb	r3, [r4, #4]
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006042:	2200      	movs	r2, #0
 8006044:	7860      	ldrb	r0, [r4, #1]
 8006046:	4611      	mov	r1, r2
 8006048:	f7fe ff50 	bl	8004eec <disk_ioctl>
 800604c:	3000      	adds	r0, #0
 800604e:	bf18      	it	ne
 8006050:	2001      	movne	r0, #1
 8006052:	e003      	b.n	800605c <sync_fs+0x9c>
 8006054:	f7ff f9f1 	bl	800543a <sync_window.part.7>
	if (res == FR_OK) {
 8006058:	2800      	cmp	r0, #0
 800605a:	d0b6      	beq.n	8005fca <sync_fs+0xa>
}
 800605c:	bd70      	pop	{r4, r5, r6, pc}

0800605e <dir_clear>:
{
 800605e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Is the disk access window dirty? */
 8006060:	78c3      	ldrb	r3, [r0, #3]
{
 8006062:	4604      	mov	r4, r0
 8006064:	460d      	mov	r5, r1
	if (fs->wflag) {	/* Is the disk access window dirty? */
 8006066:	b9b3      	cbnz	r3, 8006096 <dir_clear+0x38>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8006068:	4629      	mov	r1, r5
 800606a:	4620      	mov	r0, r4
 800606c:	f7fe ffe2 	bl	8005034 <clst2sect>
	mem_set(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8006070:	f104 063c 	add.w	r6, r4, #60	; 0x3c
	fs->winsect = sect;				/* Set window to top of the cluster */
 8006074:	63a0      	str	r0, [r4, #56]	; 0x38
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8006076:	4607      	mov	r7, r0
	mem_set(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8006078:	f44f 7200 	mov.w	r2, #512	; 0x200
 800607c:	2100      	movs	r1, #0
 800607e:	4630      	mov	r0, r6
 8006080:	f7fe ffc4 	bl	800500c <mem_set>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8006084:	2500      	movs	r5, #0
 8006086:	8963      	ldrh	r3, [r4, #10]
 8006088:	429d      	cmp	r5, r3
 800608a:	d30a      	bcc.n	80060a2 <dir_clear+0x44>
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 800608c:	8960      	ldrh	r0, [r4, #10]
 800608e:	1b40      	subs	r0, r0, r5
 8006090:	bf18      	it	ne
 8006092:	2001      	movne	r0, #1
}
 8006094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006096:	f7ff f9d0 	bl	800543a <sync_window.part.7>
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800609a:	2800      	cmp	r0, #0
 800609c:	d0e4      	beq.n	8006068 <dir_clear+0xa>
 800609e:	2001      	movs	r0, #1
 80060a0:	e7f8      	b.n	8006094 <dir_clear+0x36>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 80060a2:	2301      	movs	r3, #1
 80060a4:	197a      	adds	r2, r7, r5
 80060a6:	4631      	mov	r1, r6
 80060a8:	7860      	ldrb	r0, [r4, #1]
 80060aa:	f7fe fee5 	bl	8004e78 <disk_write>
 80060ae:	2800      	cmp	r0, #0
 80060b0:	d1ec      	bne.n	800608c <dir_clear+0x2e>
 80060b2:	3501      	adds	r5, #1
 80060b4:	e7e7      	b.n	8006086 <dir_clear+0x28>

080060b6 <dir_next>:
{
 80060b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = dp->obj.fs;
 80060ba:	6805      	ldr	r5, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80060bc:	6b07      	ldr	r7, [r0, #48]	; 0x30
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 80060be:	782b      	ldrb	r3, [r5, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80060c0:	3720      	adds	r7, #32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 80060c2:	2b04      	cmp	r3, #4
 80060c4:	bf0c      	ite	eq
 80060c6:	f04f 5380 	moveq.w	r3, #268435456	; 0x10000000
 80060ca:	f44f 1300 	movne.w	r3, #2097152	; 0x200000
 80060ce:	42bb      	cmp	r3, r7
 80060d0:	bf9c      	itt	ls
 80060d2:	2300      	movls	r3, #0
 80060d4:	6383      	strls	r3, [r0, #56]	; 0x38
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 80060d6:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
 80060d8:	4604      	mov	r4, r0
 80060da:	4689      	mov	r9, r1
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 80060dc:	b173      	cbz	r3, 80060fc <dir_next+0x46>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80060de:	f3c7 0808 	ubfx	r8, r7, #0, #9
 80060e2:	f1b8 0f00 	cmp.w	r8, #0
 80060e6:	d13c      	bne.n	8006162 <dir_next+0xac>
		if (dp->clust == 0) {	/* Static table */
 80060e8:	6b41      	ldr	r1, [r0, #52]	; 0x34
		dp->sect++;				/* Next sector */
 80060ea:	3301      	adds	r3, #1
 80060ec:	6383      	str	r3, [r0, #56]	; 0x38
		if (dp->clust == 0) {	/* Static table */
 80060ee:	b939      	cbnz	r1, 8006100 <dir_next+0x4a>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80060f0:	892b      	ldrh	r3, [r5, #8]
 80060f2:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
 80060f6:	d834      	bhi.n	8006162 <dir_next+0xac>
				dp->sect = 0; return FR_NO_FILE;
 80060f8:	2300      	movs	r3, #0
 80060fa:	63a3      	str	r3, [r4, #56]	; 0x38
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 80060fc:	2004      	movs	r0, #4
 80060fe:	e00a      	b.n	8006116 <dir_next+0x60>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 8006100:	896b      	ldrh	r3, [r5, #10]
 8006102:	3b01      	subs	r3, #1
 8006104:	ea13 2357 	ands.w	r3, r3, r7, lsr #9
 8006108:	d12b      	bne.n	8006162 <dir_next+0xac>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 800610a:	f7ff fa12 	bl	8005532 <get_fat>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800610e:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8006110:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8006112:	d802      	bhi.n	800611a <dir_next+0x64>
 8006114:	2002      	movs	r0, #2
}
 8006116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800611a:	1c42      	adds	r2, r0, #1
 800611c:	d101      	bne.n	8006122 <dir_next+0x6c>
 800611e:	2001      	movs	r0, #1
 8006120:	e7f9      	b.n	8006116 <dir_next+0x60>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8006122:	69eb      	ldr	r3, [r5, #28]
 8006124:	4283      	cmp	r3, r0
 8006126:	d816      	bhi.n	8006156 <dir_next+0xa0>
					if (!stretch) {								/* If no stretch, report EOT */
 8006128:	f1b9 0f00 	cmp.w	r9, #0
 800612c:	d0e4      	beq.n	80060f8 <dir_next+0x42>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800612e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006130:	4620      	mov	r0, r4
 8006132:	f7ff fe4f 	bl	8005dd4 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006136:	4606      	mov	r6, r0
 8006138:	b1c8      	cbz	r0, 800616e <dir_next+0xb8>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800613a:	2801      	cmp	r0, #1
 800613c:	d0ea      	beq.n	8006114 <dir_next+0x5e>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800613e:	1c43      	adds	r3, r0, #1
 8006140:	d0ed      	beq.n	800611e <dir_next+0x68>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8006142:	4601      	mov	r1, r0
 8006144:	4628      	mov	r0, r5
 8006146:	f7ff ff8a 	bl	800605e <dir_clear>
 800614a:	2800      	cmp	r0, #0
 800614c:	d1e7      	bne.n	800611e <dir_next+0x68>
					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
 800614e:	79e3      	ldrb	r3, [r4, #7]
 8006150:	f043 0304 	orr.w	r3, r3, #4
 8006154:	71e3      	strb	r3, [r4, #7]
				dp->clust = clst;		/* Initialize data for new cluster */
 8006156:	6366      	str	r6, [r4, #52]	; 0x34
				dp->sect = clst2sect(fs, clst);
 8006158:	4631      	mov	r1, r6
 800615a:	4628      	mov	r0, r5
 800615c:	f7fe ff6a 	bl	8005034 <clst2sect>
 8006160:	63a0      	str	r0, [r4, #56]	; 0x38
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006162:	353c      	adds	r5, #60	; 0x3c
 8006164:	4445      	add	r5, r8
	dp->dptr = ofs;						/* Current entry */
 8006166:	6327      	str	r7, [r4, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006168:	63e5      	str	r5, [r4, #60]	; 0x3c
	return FR_OK;
 800616a:	2000      	movs	r0, #0
 800616c:	e7d3      	b.n	8006116 <dir_next+0x60>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800616e:	2007      	movs	r0, #7
 8006170:	e7d1      	b.n	8006116 <dir_next+0x60>

08006172 <load_xdir>:
{
 8006172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006176:	4605      	mov	r5, r0
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 8006178:	6800      	ldr	r0, [r0, #0]
	res = move_window(dp->obj.fs, dp->sect);
 800617a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800617c:	6906      	ldr	r6, [r0, #16]
	res = move_window(dp->obj.fs, dp->sect);
 800617e:	f7ff f97c 	bl	800547a <move_window>
	if (res != FR_OK) return res;
 8006182:	4604      	mov	r4, r0
 8006184:	b920      	cbnz	r0, 8006190 <load_xdir+0x1e>
	if (dp->dir[XDIR_Type] != ET_FILEDIR) return FR_INT_ERR;	/* Invalid order */
 8006186:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8006188:	780b      	ldrb	r3, [r1, #0]
 800618a:	2b85      	cmp	r3, #133	; 0x85
 800618c:	d003      	beq.n	8006196 <load_xdir+0x24>
 800618e:	2402      	movs	r4, #2
}
 8006190:	4620      	mov	r0, r4
 8006192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006196:	2220      	movs	r2, #32
 8006198:	4630      	mov	r0, r6
 800619a:	f7fe ffc8 	bl	800512e <mem_cpy.part.0>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800619e:	7877      	ldrb	r7, [r6, #1]
 80061a0:	3701      	adds	r7, #1
 80061a2:	017f      	lsls	r7, r7, #5
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 80061a4:	f1a7 0360 	sub.w	r3, r7, #96	; 0x60
 80061a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061ac:	d8ef      	bhi.n	800618e <load_xdir+0x1c>
	res = dir_next(dp, 0);
 80061ae:	4621      	mov	r1, r4
 80061b0:	4628      	mov	r0, r5
 80061b2:	f7ff ff80 	bl	80060b6 <dir_next>
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 80061b6:	2804      	cmp	r0, #4
	res = dir_next(dp, 0);
 80061b8:	4604      	mov	r4, r0
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 80061ba:	d0e8      	beq.n	800618e <load_xdir+0x1c>
	if (res != FR_OK) return res;
 80061bc:	2800      	cmp	r0, #0
 80061be:	d1e7      	bne.n	8006190 <load_xdir+0x1e>
	res = move_window(dp->obj.fs, dp->sect);
 80061c0:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80061c2:	6828      	ldr	r0, [r5, #0]
 80061c4:	f7ff f959 	bl	800547a <move_window>
	if (res != FR_OK) return res;
 80061c8:	4604      	mov	r4, r0
 80061ca:	2800      	cmp	r0, #0
 80061cc:	d1e0      	bne.n	8006190 <load_xdir+0x1e>
	if (dp->dir[XDIR_Type] != ET_STREAM) return FR_INT_ERR;	/* Invalid order */
 80061ce:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 80061d0:	780b      	ldrb	r3, [r1, #0]
 80061d2:	2bc0      	cmp	r3, #192	; 0xc0
 80061d4:	d1db      	bne.n	800618e <load_xdir+0x1c>
 80061d6:	2220      	movs	r2, #32
 80061d8:	18b0      	adds	r0, r6, r2
 80061da:	f7fe ffa8 	bl	800512e <mem_cpy.part.0>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 80061de:	220f      	movs	r2, #15
 80061e0:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
 80061e4:	332c      	adds	r3, #44	; 0x2c
 80061e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80061ea:	ebb7 1f43 	cmp.w	r7, r3, lsl #5
 80061ee:	d3ce      	bcc.n	800618e <load_xdir+0x1c>
	i = 2 * SZDIRE;	/* Name offset to load */
 80061f0:	f04f 0840 	mov.w	r8, #64	; 0x40
		res = dir_next(dp, 0);
 80061f4:	2100      	movs	r1, #0
 80061f6:	4628      	mov	r0, r5
 80061f8:	f7ff ff5d 	bl	80060b6 <dir_next>
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 80061fc:	2804      	cmp	r0, #4
		res = dir_next(dp, 0);
 80061fe:	4604      	mov	r4, r0
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 8006200:	d0c5      	beq.n	800618e <load_xdir+0x1c>
		if (res != FR_OK) return res;
 8006202:	2800      	cmp	r0, #0
 8006204:	d1c4      	bne.n	8006190 <load_xdir+0x1e>
		res = move_window(dp->obj.fs, dp->sect);
 8006206:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8006208:	6828      	ldr	r0, [r5, #0]
 800620a:	f7ff f936 	bl	800547a <move_window>
		if (res != FR_OK) return res;
 800620e:	4604      	mov	r4, r0
 8006210:	2800      	cmp	r0, #0
 8006212:	d1bd      	bne.n	8006190 <load_xdir+0x1e>
		if (dp->dir[XDIR_Type] != ET_FILENAME) return FR_INT_ERR;	/* Invalid order */
 8006214:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8006216:	780b      	ldrb	r3, [r1, #0]
 8006218:	2bc1      	cmp	r3, #193	; 0xc1
 800621a:	d1b8      	bne.n	800618e <load_xdir+0x1c>
		if (i < MAXDIRB(FF_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800621c:	f5b8 7f18 	cmp.w	r8, #608	; 0x260
 8006220:	d204      	bcs.n	800622c <load_xdir+0xba>
 8006222:	2220      	movs	r2, #32
 8006224:	eb06 0008 	add.w	r0, r6, r8
 8006228:	f7fe ff81 	bl	800512e <mem_cpy.part.0>
	} while ((i += SZDIRE) < sz_ent);
 800622c:	f108 0820 	add.w	r8, r8, #32
 8006230:	4547      	cmp	r7, r8
 8006232:	d8df      	bhi.n	80061f4 <load_xdir+0x82>
	if (i <= MAXDIRB(FF_MAX_LFN)) {
 8006234:	f5b8 7f18 	cmp.w	r8, #608	; 0x260
 8006238:	d8aa      	bhi.n	8006190 <load_xdir+0x1e>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800623a:	4630      	mov	r0, r6
 800623c:	f7fe ff14 	bl	8005068 <xdir_sum>
	rv = rv << 8 | ptr[0];
 8006240:	78f2      	ldrb	r2, [r6, #3]
 8006242:	78b3      	ldrb	r3, [r6, #2]
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 8006244:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006248:	4298      	cmp	r0, r3
 800624a:	d0a1      	beq.n	8006190 <load_xdir+0x1e>
 800624c:	e79f      	b.n	800618e <load_xdir+0x1c>

0800624e <dir_alloc>:
{
 800624e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006250:	460e      	mov	r6, r1
	res = dir_sdi(dp, 0);
 8006252:	2100      	movs	r1, #0
{
 8006254:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8006256:	6805      	ldr	r5, [r0, #0]
	res = dir_sdi(dp, 0);
 8006258:	f7ff fa05 	bl	8005666 <dir_sdi>
	if (res == FR_OK) {
 800625c:	bb00      	cbnz	r0, 80062a0 <dir_alloc+0x52>
		n = 0;
 800625e:	4607      	mov	r7, r0
			res = move_window(fs, dp->sect);
 8006260:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006262:	4628      	mov	r0, r5
 8006264:	f7ff f909 	bl	800547a <move_window>
			if (res != FR_OK) break;
 8006268:	b9d0      	cbnz	r0, 80062a0 <dir_alloc+0x52>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800626a:	782a      	ldrb	r2, [r5, #0]
 800626c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800626e:	2a04      	cmp	r2, #4
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	d107      	bne.n	8006284 <dir_alloc+0x36>
 8006274:	43db      	mvns	r3, r3
 8006276:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800627a:	b153      	cbz	r3, 8006292 <dir_alloc+0x44>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800627c:	3701      	adds	r7, #1
 800627e:	42b7      	cmp	r7, r6
 8006280:	d108      	bne.n	8006294 <dir_alloc+0x46>
}
 8006282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8006284:	2be5      	cmp	r3, #229	; 0xe5
 8006286:	bf16      	itet	ne
 8006288:	fab3 f383 	clzne	r3, r3
 800628c:	2301      	moveq	r3, #1
 800628e:	095b      	lsrne	r3, r3, #5
 8006290:	e7f3      	b.n	800627a <dir_alloc+0x2c>
				n = 0;					/* Not a blank entry. Restart to search */
 8006292:	461f      	mov	r7, r3
			res = dir_next(dp, 1);
 8006294:	2101      	movs	r1, #1
 8006296:	4620      	mov	r0, r4
 8006298:	f7ff ff0d 	bl	80060b6 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800629c:	2800      	cmp	r0, #0
 800629e:	d0df      	beq.n	8006260 <dir_alloc+0x12>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80062a0:	2804      	cmp	r0, #4
 80062a2:	bf08      	it	eq
 80062a4:	2007      	moveq	r0, #7
 80062a6:	e7ec      	b.n	8006282 <dir_alloc+0x34>

080062a8 <store_xdir>:
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 80062a8:	6803      	ldr	r3, [r0, #0]
{
 80062aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 80062ae:	691e      	ldr	r6, [r3, #16]
{
 80062b0:	4605      	mov	r5, r0
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 80062b2:	4630      	mov	r0, r6
 80062b4:	f7fe fed8 	bl	8005068 <xdir_sum>
	*ptr++ = (BYTE)val; val >>= 8;
 80062b8:	70b0      	strb	r0, [r6, #2]
 80062ba:	0a00      	lsrs	r0, r0, #8
	*ptr++ = (BYTE)val;
 80062bc:	70f0      	strb	r0, [r6, #3]
	res = dir_sdi(dp, dp->blk_ofs);
 80062be:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 80062c0:	4628      	mov	r0, r5
	nent = dirb[XDIR_NumSec] + 1;
 80062c2:	7877      	ldrb	r7, [r6, #1]
	res = dir_sdi(dp, dp->blk_ofs);
 80062c4:	f7ff f9cf 	bl	8005666 <dir_sdi>
		dp->obj.fs->wflag = 1;
 80062c8:	f04f 0801 	mov.w	r8, #1
	res = dir_sdi(dp, dp->blk_ofs);
 80062cc:	4604      	mov	r4, r0
	while (res == FR_OK) {
 80062ce:	b12c      	cbz	r4, 80062dc <store_xdir+0x34>
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 80062d0:	2c02      	cmp	r4, #2
 80062d2:	bf28      	it	cs
 80062d4:	2402      	movcs	r4, #2
}
 80062d6:	b2e0      	uxtb	r0, r4
 80062d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		res = move_window(dp->obj.fs, dp->sect);
 80062dc:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80062de:	6828      	ldr	r0, [r5, #0]
 80062e0:	f7ff f8cb 	bl	800547a <move_window>
		if (res != FR_OK) break;
 80062e4:	4604      	mov	r4, r0
 80062e6:	2800      	cmp	r0, #0
 80062e8:	d1f2      	bne.n	80062d0 <store_xdir+0x28>
 80062ea:	2220      	movs	r2, #32
 80062ec:	4631      	mov	r1, r6
 80062ee:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 80062f0:	f7fe ff1d 	bl	800512e <mem_cpy.part.0>
		dp->obj.fs->wflag = 1;
 80062f4:	682b      	ldr	r3, [r5, #0]
 80062f6:	f883 8003 	strb.w	r8, [r3, #3]
		if (--nent == 0) break;
 80062fa:	2f00      	cmp	r7, #0
 80062fc:	d0e8      	beq.n	80062d0 <store_xdir+0x28>
		res = dir_next(dp, 0);
 80062fe:	4621      	mov	r1, r4
 8006300:	4628      	mov	r0, r5
 8006302:	f7ff fed8 	bl	80060b6 <dir_next>
		dirb += SZDIRE;
 8006306:	3620      	adds	r6, #32
		res = dir_next(dp, 0);
 8006308:	4604      	mov	r4, r0
 800630a:	3f01      	subs	r7, #1
 800630c:	e7df      	b.n	80062ce <store_xdir+0x26>
	...

08006310 <dir_read.constprop.15>:
static FRESULT dir_read (
 8006310:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BYTE ord = 0xFF, sum = 0xFF;
 8006314:	27ff      	movs	r7, #255	; 0xff
static FRESULT dir_read (
 8006316:	4605      	mov	r5, r0
	BYTE ord = 0xFF, sum = 0xFF;
 8006318:	463c      	mov	r4, r7
	FRESULT res = FR_NO_FILE;
 800631a:	f04f 0a04 	mov.w	sl, #4
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800631e:	f64f 79ff 	movw	r9, #65535	; 0xffff
	FATFS *fs = dp->obj.fs;
 8006322:	6806      	ldr	r6, [r0, #0]
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006324:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8006458 <dir_read.constprop.15+0x148>
	while (dp->sect) {
 8006328:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800632a:	b921      	cbnz	r1, 8006336 <dir_read.constprop.15+0x26>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800632c:	f1ba 0f00 	cmp.w	sl, #0
 8006330:	f000 8087 	beq.w	8006442 <dir_read.constprop.15+0x132>
 8006334:	e076      	b.n	8006424 <dir_read.constprop.15+0x114>
		res = move_window(fs, dp->sect);
 8006336:	4630      	mov	r0, r6
 8006338:	f7ff f89f 	bl	800547a <move_window>
		if (res != FR_OK) break;
 800633c:	4682      	mov	sl, r0
 800633e:	2800      	cmp	r0, #0
 8006340:	d170      	bne.n	8006424 <dir_read.constprop.15+0x114>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
 8006342:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8006344:	7803      	ldrb	r3, [r0, #0]
		if (b == 0) {
 8006346:	2b00      	cmp	r3, #0
 8006348:	f000 8082 	beq.w	8006450 <dir_read.constprop.15+0x140>
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800634c:	7832      	ldrb	r2, [r6, #0]
 800634e:	2a04      	cmp	r2, #4
 8006350:	d111      	bne.n	8006376 <dir_read.constprop.15+0x66>
				if (b == ET_FILEDIR) {		/* Start of the file entry block? */
 8006352:	2b85      	cmp	r3, #133	; 0x85
 8006354:	d15f      	bne.n	8006416 <dir_read.constprop.15+0x106>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8006356:	6b2b      	ldr	r3, [r5, #48]	; 0x30
					res = load_xdir(dp);	/* Load the entry block */
 8006358:	4628      	mov	r0, r5
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800635a:	64eb      	str	r3, [r5, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800635c:	f7ff ff09 	bl	8006172 <load_xdir>
					if (res == FR_OK) {
 8006360:	4682      	mov	sl, r0
 8006362:	2800      	cmp	r0, #0
 8006364:	d15e      	bne.n	8006424 <dir_read.constprop.15+0x114>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 8006366:	6933      	ldr	r3, [r6, #16]
 8006368:	791b      	ldrb	r3, [r3, #4]
 800636a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800636e:	71ab      	strb	r3, [r5, #6]
}
 8006370:	4650      	mov	r0, sl
 8006372:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8006376:	7ac2      	ldrb	r2, [r0, #11]
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8006378:	2be5      	cmp	r3, #229	; 0xe5
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800637a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800637e:	71aa      	strb	r2, [r5, #6]
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8006380:	d055      	beq.n	800642e <dir_read.constprop.15+0x11e>
 8006382:	2b2e      	cmp	r3, #46	; 0x2e
 8006384:	d053      	beq.n	800642e <dir_read.constprop.15+0x11e>
 8006386:	f022 0120 	bic.w	r1, r2, #32
 800638a:	2908      	cmp	r1, #8
 800638c:	d04f      	beq.n	800642e <dir_read.constprop.15+0x11e>
				if (attr == AM_LFN) {			/* An LFN entry is found */
 800638e:	2a0f      	cmp	r2, #15
 8006390:	d152      	bne.n	8006438 <dir_read.constprop.15+0x128>
					if (b & LLEF) {			/* Is it start of an LFN sequence? */
 8006392:	065a      	lsls	r2, r3, #25
 8006394:	d549      	bpl.n	800642a <dir_read.constprop.15+0x11a>
						b &= (BYTE)~LLEF; ord = b;
 8006396:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
 800639a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
						sum = dp->dir[LDIR_Chksum];
 800639c:	7b47      	ldrb	r7, [r0, #13]
						dp->blk_ofs = dp->dptr;
 800639e:	64eb      	str	r3, [r5, #76]	; 0x4c
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80063a0:	7b43      	ldrb	r3, [r0, #13]
 80063a2:	42bb      	cmp	r3, r7
 80063a4:	d143      	bne.n	800642e <dir_read.constprop.15+0x11e>
	rv = rv << 8 | ptr[0];
 80063a6:	7ec2      	ldrb	r2, [r0, #27]
 80063a8:	7e83      	ldrb	r3, [r0, #26]
 80063aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80063ae:	b21b      	sxth	r3, r3
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d13c      	bne.n	800642e <dir_read.constprop.15+0x11e>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80063b4:	f04f 0c0d 	mov.w	ip, #13
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80063b8:	f04f 0e01 	mov.w	lr, #1
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80063bc:	7802      	ldrb	r2, [r0, #0]
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80063be:	68f1      	ldr	r1, [r6, #12]
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80063c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063c4:	3a01      	subs	r2, #1
 80063c6:	fb0c fc02 	mul.w	ip, ip, r2
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80063ca:	f813 a008 	ldrb.w	sl, [r3, r8]
 80063ce:	eb00 020a 	add.w	r2, r0, sl
	rv = rv << 8 | ptr[0];
 80063d2:	f892 b001 	ldrb.w	fp, [r2, #1]
 80063d6:	f810 200a 	ldrb.w	r2, [r0, sl]
 80063da:	ea42 220b 	orr.w	r2, r2, fp, lsl #8
		if (wc != 0) {
 80063de:	f1be 0f00 	cmp.w	lr, #0
 80063e2:	d026      	beq.n	8006432 <dir_read.constprop.15+0x122>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 80063e4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80063e8:	d821      	bhi.n	800642e <dir_read.constprop.15+0x11e>
	rv = rv << 8 | ptr[0];
 80063ea:	4696      	mov	lr, r2
			lfnbuf[i++] = wc = uc;			/* Store it */
 80063ec:	f821 201c 	strh.w	r2, [r1, ip, lsl #1]
 80063f0:	f10c 0c01 	add.w	ip, ip, #1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80063f4:	3301      	adds	r3, #1
 80063f6:	2b0d      	cmp	r3, #13
 80063f8:	d1e7      	bne.n	80063ca <dir_read.constprop.15+0xba>
	if (dir[LDIR_Ord] & LLEF && wc != 0) {	/* Put terminator if it is the last LFN part and not terminated */
 80063fa:	7803      	ldrb	r3, [r0, #0]
 80063fc:	065b      	lsls	r3, r3, #25
 80063fe:	d508      	bpl.n	8006412 <dir_read.constprop.15+0x102>
 8006400:	f1be 0f00 	cmp.w	lr, #0
 8006404:	d005      	beq.n	8006412 <dir_read.constprop.15+0x102>
		if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 8006406:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 800640a:	d810      	bhi.n	800642e <dir_read.constprop.15+0x11e>
		lfnbuf[i] = 0;
 800640c:	2300      	movs	r3, #0
 800640e:	f821 301c 	strh.w	r3, [r1, ip, lsl #1]
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006412:	3c01      	subs	r4, #1
 8006414:	b2e4      	uxtb	r4, r4
		res = dir_next(dp, 0);		/* Next entry */
 8006416:	2100      	movs	r1, #0
 8006418:	4628      	mov	r0, r5
 800641a:	f7ff fe4c 	bl	80060b6 <dir_next>
		if (res != FR_OK) break;
 800641e:	4682      	mov	sl, r0
 8006420:	2800      	cmp	r0, #0
 8006422:	d081      	beq.n	8006328 <dir_read.constprop.15+0x18>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8006424:	2300      	movs	r3, #0
 8006426:	63ab      	str	r3, [r5, #56]	; 0x38
 8006428:	e7a2      	b.n	8006370 <dir_read.constprop.15+0x60>
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800642a:	42a3      	cmp	r3, r4
 800642c:	d0b8      	beq.n	80063a0 <dir_read.constprop.15+0x90>
 800642e:	24ff      	movs	r4, #255	; 0xff
 8006430:	e7f1      	b.n	8006416 <dir_read.constprop.15+0x106>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006432:	454a      	cmp	r2, r9
 8006434:	d0de      	beq.n	80063f4 <dir_read.constprop.15+0xe4>
 8006436:	e7fa      	b.n	800642e <dir_read.constprop.15+0x11e>
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8006438:	b934      	cbnz	r4, 8006448 <dir_read.constprop.15+0x138>
 800643a:	f7fe fe06 	bl	800504a <sum_sfn>
 800643e:	42b8      	cmp	r0, r7
 8006440:	d102      	bne.n	8006448 <dir_read.constprop.15+0x138>
		res = move_window(fs, dp->sect);
 8006442:	f04f 0a00 	mov.w	sl, #0
 8006446:	e793      	b.n	8006370 <dir_read.constprop.15+0x60>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8006448:	f04f 33ff 	mov.w	r3, #4294967295
 800644c:	64eb      	str	r3, [r5, #76]	; 0x4c
 800644e:	e78f      	b.n	8006370 <dir_read.constprop.15+0x60>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8006450:	f04f 0a04 	mov.w	sl, #4
 8006454:	e7e6      	b.n	8006424 <dir_read.constprop.15+0x114>
 8006456:	bf00      	nop
 8006458:	0800c6ee 	.word	0x0800c6ee

0800645c <dir_find>:
{
 800645c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006460:	2100      	movs	r1, #0
{
 8006462:	b085      	sub	sp, #20
 8006464:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8006466:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800646a:	f7ff f8fc 	bl	8005666 <dir_sdi>
	if (res != FR_OK) return res;
 800646e:	4682      	mov	sl, r0
 8006470:	2800      	cmp	r0, #0
 8006472:	f040 80d1 	bne.w	8006618 <dir_find+0x1bc>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8006476:	f898 3000 	ldrb.w	r3, [r8]
 800647a:	2b04      	cmp	r3, #4
 800647c:	d139      	bne.n	80064f2 <dir_find+0x96>
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800647e:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8006482:	f7fe fe3c 	bl	80050fe <xname_sum>
 8006486:	4607      	mov	r7, r0
		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
 8006488:	4620      	mov	r0, r4
 800648a:	f7ff ff41 	bl	8006310 <dir_read.constprop.15>
 800648e:	b108      	cbz	r0, 8006494 <dir_find+0x38>
 8006490:	4682      	mov	sl, r0
 8006492:	e0c1      	b.n	8006618 <dir_find+0x1bc>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8006494:	f8d8 3010 	ldr.w	r3, [r8, #16]
	rv = rv << 8 | ptr[0];
 8006498:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
 800649c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 80064a0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80064a4:	4297      	cmp	r7, r2
 80064a6:	d1ef      	bne.n	8006488 <dir_find+0x2c>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 80064a8:	4605      	mov	r5, r0
 80064aa:	2640      	movs	r6, #64	; 0x40
 80064ac:	f893 9023 	ldrb.w	r9, [r3, #35]	; 0x23
 80064b0:	454d      	cmp	r5, r9
 80064b2:	d106      	bne.n	80064c2 <dir_find+0x66>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 80064b4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80064b8:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1e3      	bne.n	8006488 <dir_find+0x2c>
 80064c0:	e0aa      	b.n	8006618 <dir_find+0x1bc>
				if ((di % SZDIRE) == 0) di += 2;
 80064c2:	06f1      	lsls	r1, r6, #27
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 80064c4:	f8d8 3010 	ldr.w	r3, [r8, #16]
				if ((di % SZDIRE) == 0) di += 2;
 80064c8:	bf08      	it	eq
 80064ca:	3602      	addeq	r6, #2
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 80064cc:	199a      	adds	r2, r3, r6
	rv = rv << 8 | ptr[0];
 80064ce:	7850      	ldrb	r0, [r2, #1]
 80064d0:	5d9b      	ldrb	r3, [r3, r6]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 80064d2:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80064d6:	f001 f943 	bl	8007760 <ff_wtoupper>
 80064da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80064de:	4683      	mov	fp, r0
 80064e0:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
 80064e4:	f001 f93c 	bl	8007760 <ff_wtoupper>
 80064e8:	4583      	cmp	fp, r0
 80064ea:	d1cd      	bne.n	8006488 <dir_find+0x2c>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 80064ec:	3602      	adds	r6, #2
 80064ee:	3501      	adds	r5, #1
 80064f0:	e7de      	b.n	80064b0 <dir_find+0x54>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80064f2:	f04f 0bff 	mov.w	fp, #255	; 0xff
 80064f6:	f04f 33ff 	mov.w	r3, #4294967295
 80064fa:	465e      	mov	r6, fp
 80064fc:	64e3      	str	r3, [r4, #76]	; 0x4c
		res = move_window(fs, dp->sect);
 80064fe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006500:	4640      	mov	r0, r8
 8006502:	f7fe ffba 	bl	800547a <move_window>
		if (res != FR_OK) break;
 8006506:	2800      	cmp	r0, #0
 8006508:	d1c2      	bne.n	8006490 <dir_find+0x34>
		c = dp->dir[DIR_Name];
 800650a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800650c:	782f      	ldrb	r7, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800650e:	2f00      	cmp	r7, #0
 8006510:	f000 8086 	beq.w	8006620 <dir_find+0x1c4>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006514:	7aea      	ldrb	r2, [r5, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006516:	2fe5      	cmp	r7, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006518:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 800651c:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800651e:	d003      	beq.n	8006528 <dir_find+0xcc>
 8006520:	0712      	lsls	r2, r2, #28
 8006522:	d505      	bpl.n	8006530 <dir_find+0xd4>
 8006524:	2b0f      	cmp	r3, #15
 8006526:	d005      	beq.n	8006534 <dir_find+0xd8>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006528:	f04f 33ff 	mov.w	r3, #4294967295
 800652c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800652e:	e05a      	b.n	80065e6 <dir_find+0x18a>
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006530:	2b0f      	cmp	r3, #15
 8006532:	d15f      	bne.n	80065f4 <dir_find+0x198>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006534:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8006538:	0658      	lsls	r0, r3, #25
 800653a:	d44b      	bmi.n	80065d4 <dir_find+0x178>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800653c:	0679      	lsls	r1, r7, #25
 800653e:	d550      	bpl.n	80065e2 <dir_find+0x186>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006540:	6b23      	ldr	r3, [r4, #48]	; 0x30
						sum = dp->dir[LDIR_Chksum];
 8006542:	f895 b00d 	ldrb.w	fp, [r5, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006546:	f007 07bf 	and.w	r7, r7, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800654a:	64e3      	str	r3, [r4, #76]	; 0x4c
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800654c:	7b6b      	ldrb	r3, [r5, #13]
 800654e:	455b      	cmp	r3, fp
 8006550:	d149      	bne.n	80065e6 <dir_find+0x18a>
	rv = rv << 8 | ptr[0];
 8006552:	7eeb      	ldrb	r3, [r5, #27]
 8006554:	7eae      	ldrb	r6, [r5, #26]
 8006556:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800655a:	b236      	sxth	r6, r6
 800655c:	2e00      	cmp	r6, #0
 800655e:	d142      	bne.n	80065e6 <dir_find+0x18a>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006560:	f895 9000 	ldrb.w	r9, [r5]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006564:	f8d8 300c 	ldr.w	r3, [r8, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006568:	f009 093f 	and.w	r9, r9, #63	; 0x3f
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800656c:	9300      	str	r3, [sp, #0]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800656e:	f109 33ff 	add.w	r3, r9, #4294967295
 8006572:	f04f 090d 	mov.w	r9, #13
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006576:	2101      	movs	r1, #1
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006578:	fb09 f903 	mul.w	r9, r9, r3
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800657c:	4b2a      	ldr	r3, [pc, #168]	; (8006628 <dir_find+0x1cc>)
 800657e:	5cf2      	ldrb	r2, [r6, r3]
 8006580:	18ab      	adds	r3, r5, r2
	rv = rv << 8 | ptr[0];
 8006582:	785b      	ldrb	r3, [r3, #1]
 8006584:	5caa      	ldrb	r2, [r5, r2]
 8006586:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
		if (wc != 0) {
 800658a:	b371      	cbz	r1, 80065ea <dir_find+0x18e>
			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800658c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8006590:	d829      	bhi.n	80065e6 <dir_find+0x18a>
 8006592:	4618      	mov	r0, r3
 8006594:	9303      	str	r3, [sp, #12]
 8006596:	f001 f8e3 	bl	8007760 <ff_wtoupper>
 800659a:	9b00      	ldr	r3, [sp, #0]
 800659c:	9002      	str	r0, [sp, #8]
 800659e:	f109 0201 	add.w	r2, r9, #1
 80065a2:	f833 0019 	ldrh.w	r0, [r3, r9, lsl #1]
 80065a6:	9201      	str	r2, [sp, #4]
 80065a8:	f001 f8da 	bl	8007760 <ff_wtoupper>
 80065ac:	9902      	ldr	r1, [sp, #8]
 80065ae:	4281      	cmp	r1, r0
 80065b0:	d119      	bne.n	80065e6 <dir_find+0x18a>
	rv = rv << 8 | ptr[0];
 80065b2:	9b03      	ldr	r3, [sp, #12]
			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80065b4:	9a01      	ldr	r2, [sp, #4]
	rv = rv << 8 | ptr[0];
 80065b6:	4619      	mov	r1, r3
			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80065b8:	4691      	mov	r9, r2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80065ba:	3601      	adds	r6, #1
 80065bc:	2e0d      	cmp	r6, #13
 80065be:	d1dd      	bne.n	800657c <dir_find+0x120>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80065c0:	782b      	ldrb	r3, [r5, #0]
 80065c2:	065a      	lsls	r2, r3, #25
 80065c4:	d504      	bpl.n	80065d0 <dir_find+0x174>
 80065c6:	b119      	cbz	r1, 80065d0 <dir_find+0x174>
 80065c8:	9b00      	ldr	r3, [sp, #0]
 80065ca:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
 80065ce:	b953      	cbnz	r3, 80065e6 <dir_find+0x18a>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80065d0:	3f01      	subs	r7, #1
 80065d2:	b2fe      	uxtb	r6, r7
		res = dir_next(dp, 0);	/* Next entry */
 80065d4:	2100      	movs	r1, #0
 80065d6:	4620      	mov	r0, r4
 80065d8:	f7ff fd6d 	bl	80060b6 <dir_next>
	} while (res == FR_OK);
 80065dc:	2800      	cmp	r0, #0
 80065de:	d08e      	beq.n	80064fe <dir_find+0xa2>
 80065e0:	e756      	b.n	8006490 <dir_find+0x34>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80065e2:	42be      	cmp	r6, r7
 80065e4:	d0b2      	beq.n	800654c <dir_find+0xf0>
 80065e6:	26ff      	movs	r6, #255	; 0xff
 80065e8:	e7f4      	b.n	80065d4 <dir_find+0x178>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80065ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d0e3      	beq.n	80065ba <dir_find+0x15e>
 80065f2:	e7f8      	b.n	80065e6 <dir_find+0x18a>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80065f4:	b926      	cbnz	r6, 8006600 <dir_find+0x1a4>
 80065f6:	4628      	mov	r0, r5
 80065f8:	f7fe fd27 	bl	800504a <sum_sfn>
 80065fc:	4558      	cmp	r0, fp
 80065fe:	d00b      	beq.n	8006618 <dir_find+0x1bc>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006600:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8006604:	07db      	lsls	r3, r3, #31
 8006606:	d48f      	bmi.n	8006528 <dir_find+0xcc>
 8006608:	220b      	movs	r2, #11
 800660a:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800660e:	4628      	mov	r0, r5
 8006610:	f7fe fd02 	bl	8005018 <mem_cmp>
 8006614:	2800      	cmp	r0, #0
 8006616:	d187      	bne.n	8006528 <dir_find+0xcc>
}
 8006618:	4650      	mov	r0, sl
 800661a:	b005      	add	sp, #20
 800661c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006620:	f04f 0a04 	mov.w	sl, #4
 8006624:	e7f8      	b.n	8006618 <dir_find+0x1bc>
 8006626:	bf00      	nop
 8006628:	0800c6ee 	.word	0x0800c6ee

0800662c <dir_register>:
{
 800662c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006630:	f890 504b 	ldrb.w	r5, [r0, #75]	; 0x4b
{
 8006634:	b099      	sub	sp, #100	; 0x64
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006636:	f015 05a0 	ands.w	r5, r5, #160	; 0xa0
{
 800663a:	4604      	mov	r4, r0
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800663c:	f040 8114 	bne.w	8006868 <dir_register+0x23c>
	FATFS *fs = dp->obj.fs;
 8006640:	6806      	ldr	r6, [r0, #0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006642:	68f2      	ldr	r2, [r6, #12]
 8006644:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d162      	bne.n	8006712 <dir_register+0xe6>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800664c:	7833      	ldrb	r3, [r6, #0]
 800664e:	2b04      	cmp	r3, #4
 8006650:	f040 809f 	bne.w	8006792 <dir_register+0x166>
		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8006654:	230f      	movs	r3, #15
 8006656:	350e      	adds	r5, #14
 8006658:	fbb5 f5f3 	udiv	r5, r5, r3
		res = dir_alloc(dp, nent);		/* Allocate directory entries */
 800665c:	4620      	mov	r0, r4
 800665e:	1ca9      	adds	r1, r5, #2
 8006660:	f7ff fdf5 	bl	800624e <dir_alloc>
		if (res != FR_OK) return res;
 8006664:	4682      	mov	sl, r0
 8006666:	2800      	cmp	r0, #0
 8006668:	f040 808f 	bne.w	800678a <dir_register+0x15e>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800666c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800666e:	f105 6500 	add.w	r5, r5, #134217728	; 0x8000000
 8006672:	3501      	adds	r5, #1
 8006674:	eba3 1545 	sub.w	r5, r3, r5, lsl #5
		if (dp->obj.stat & 4) {			/* Has the directory been stretched by new allocation? */
 8006678:	79e3      	ldrb	r3, [r4, #7]
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800667a:	64e5      	str	r5, [r4, #76]	; 0x4c
		if (dp->obj.stat & 4) {			/* Has the directory been stretched by new allocation? */
 800667c:	075a      	lsls	r2, r3, #29
 800667e:	d54a      	bpl.n	8006716 <dir_register+0xea>
			dp->obj.stat &= ~4;
 8006680:	f023 0304 	bic.w	r3, r3, #4
 8006684:	71e3      	strb	r3, [r4, #7]
			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
 8006686:	4620      	mov	r0, r4
 8006688:	f7ff f992 	bl	80059b0 <fill_first_frag>
			if (res != FR_OK) return res;
 800668c:	2800      	cmp	r0, #0
 800668e:	d13e      	bne.n	800670e <dir_register+0xe2>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill the last fragment on the FAT if needed */
 8006690:	f04f 32ff 	mov.w	r2, #4294967295
 8006694:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006696:	4620      	mov	r0, r4
 8006698:	f7ff f8f5 	bl	8005886 <fill_last_frag>
			if (res != FR_OK) return res;
 800669c:	2800      	cmp	r0, #0
 800669e:	d136      	bne.n	800670e <dir_register+0xe2>
			if (dp->obj.sclust != 0) {		/* Is it a sub-directory? */
 80066a0:	68a3      	ldr	r3, [r4, #8]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d037      	beq.n	8006716 <dir_register+0xea>
	dp->obj.fs = obj->fs;
 80066a6:	6823      	ldr	r3, [r4, #0]
	dp->blk_ofs = obj->c_ofs;
 80066a8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	dp->obj.fs = obj->fs;
 80066aa:	9304      	str	r3, [sp, #16]
	dp->obj.sclust = obj->c_scl;
 80066ac:	6a23      	ldr	r3, [r4, #32]
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 80066ae:	a804      	add	r0, sp, #16
	dp->obj.sclust = obj->c_scl;
 80066b0:	9306      	str	r3, [sp, #24]
	dp->obj.stat = (BYTE)obj->c_size;
 80066b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
	dp->obj.n_frag = 0;
 80066b4:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
	dp->obj.stat = (BYTE)obj->c_size;
 80066b8:	f88d 3017 	strb.w	r3, [sp, #23]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 80066bc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80066c0:	e9cd 3a08 	strd	r3, sl, [sp, #32]
	dp->blk_ofs = obj->c_ofs;
 80066c4:	9117      	str	r1, [sp, #92]	; 0x5c
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 80066c6:	f7fe ffce 	bl	8005666 <dir_sdi>
	if (res == FR_OK) {
 80066ca:	bb00      	cbnz	r0, 800670e <dir_register+0xe2>
		res = load_xdir(dp);		/* Load the object's entry block */
 80066cc:	a804      	add	r0, sp, #16
 80066ce:	f7ff fd50 	bl	8006172 <load_xdir>
				if (res != FR_OK) return res;
 80066d2:	b9e0      	cbnz	r0, 800670e <dir_register+0xe2>
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);			/* Increase the directory size by cluster size */
 80066d4:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80066d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066dc:	8970      	ldrh	r0, [r6, #10]
 80066de:	fbe1 2300 	umlal	r2, r3, r1, r0
				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);
 80066e2:	6930      	ldr	r0, [r6, #16]
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);			/* Increase the directory size by cluster size */
 80066e4:	e9c4 2304 	strd	r2, r3, [r4, #16]
				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);
 80066e8:	3038      	adds	r0, #56	; 0x38
 80066ea:	f7fe fc80 	bl	8004fee <st_qword>
				st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 80066ee:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80066f2:	6930      	ldr	r0, [r6, #16]
 80066f4:	3028      	adds	r0, #40	; 0x28
 80066f6:	f7fe fc7a 	bl	8004fee <st_qword>
				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;			/* Update the allocation status */
 80066fa:	79e3      	ldrb	r3, [r4, #7]
 80066fc:	6932      	ldr	r2, [r6, #16]
 80066fe:	f043 0301 	orr.w	r3, r3, #1
 8006702:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
				res = store_xdir(&dj);				/* Store the object status */
 8006706:	a804      	add	r0, sp, #16
 8006708:	f7ff fdce 	bl	80062a8 <store_xdir>
				if (res != FR_OK) return res;
 800670c:	b118      	cbz	r0, 8006716 <dir_register+0xea>
 800670e:	4682      	mov	sl, r0
 8006710:	e03b      	b.n	800678a <dir_register+0x15e>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006712:	3501      	adds	r5, #1
 8006714:	e796      	b.n	8006644 <dir_register+0x18>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 8006716:	e9d6 5403 	ldrd	r5, r4, [r6, #12]
	mem_set(dirb, 0, 2 * SZDIRE);
 800671a:	2240      	movs	r2, #64	; 0x40
 800671c:	2100      	movs	r1, #0
 800671e:	4620      	mov	r0, r4
 8006720:	f7fe fc74 	bl	800500c <mem_set>
	dirb[0 * SZDIRE + XDIR_Type] = ET_FILEDIR;
 8006724:	2385      	movs	r3, #133	; 0x85
	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
 8006726:	2100      	movs	r1, #0
	dirb[0 * SZDIRE + XDIR_Type] = ET_FILEDIR;
 8006728:	7023      	strb	r3, [r4, #0]
	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
 800672a:	23c0      	movs	r3, #192	; 0xc0
	nlen = nc1 = 0; wc = 1;
 800672c:	2001      	movs	r0, #1
	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
 800672e:	f884 3020 	strb.w	r3, [r4, #32]
	nlen = nc1 = 0; wc = 1;
 8006732:	460a      	mov	r2, r1
	i = SZDIRE * 2;	/* Top of file_name entries */
 8006734:	2340      	movs	r3, #64	; 0x40
		dirb[i++] = ET_FILENAME; dirb[i++] = 0;
 8006736:	f04f 0cc1 	mov.w	ip, #193	; 0xc1
 800673a:	468e      	mov	lr, r1
 800673c:	1c5f      	adds	r7, r3, #1
 800673e:	f804 c003 	strb.w	ip, [r4, r3]
 8006742:	b2ce      	uxtb	r6, r1
 8006744:	f804 e007 	strb.w	lr, [r4, r7]
 8006748:	3302      	adds	r3, #2
			if (wc != 0 && (wc = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
 800674a:	b120      	cbz	r0, 8006756 <dir_register+0x12a>
 800674c:	f835 0012 	ldrh.w	r0, [r5, r2, lsl #1]
 8006750:	b108      	cbz	r0, 8006756 <dir_register+0x12a>
 8006752:	3201      	adds	r2, #1
 8006754:	b2d2      	uxtb	r2, r2
	*ptr++ = (BYTE)val;
 8006756:	18e7      	adds	r7, r4, r3
	*ptr++ = (BYTE)val; val >>= 8;
 8006758:	54e0      	strb	r0, [r4, r3]
 800675a:	ea4f 2810 	mov.w	r8, r0, lsr #8
			i += 2;
 800675e:	3302      	adds	r3, #2
	*ptr++ = (BYTE)val;
 8006760:	f887 8001 	strb.w	r8, [r7, #1]
		} while (i % SZDIRE != 0);
 8006764:	06df      	lsls	r7, r3, #27
 8006766:	d1f0      	bne.n	800674a <dir_register+0x11e>
	} while (lfn[nlen]);	/* Fill next entry if any char follows */
 8006768:	f835 7012 	ldrh.w	r7, [r5, r2, lsl #1]
 800676c:	3101      	adds	r1, #1
 800676e:	2f00      	cmp	r7, #0
 8006770:	d1e4      	bne.n	800673c <dir_register+0x110>
	dirb[XDIR_NumSec] = 1 + nc1;	/* Set secondary count (C0 + C1s) */
 8006772:	1cb3      	adds	r3, r6, #2
	dirb[XDIR_NumName] = nlen;		/* Set name length */
 8006774:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	dirb[XDIR_NumSec] = 1 + nc1;	/* Set secondary count (C0 + C1s) */
 8006778:	7063      	strb	r3, [r4, #1]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800677a:	4628      	mov	r0, r5
 800677c:	f7fe fcbf 	bl	80050fe <xname_sum>
	*ptr++ = (BYTE)val; val >>= 8;
 8006780:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
 8006784:	0a00      	lsrs	r0, r0, #8
	*ptr++ = (BYTE)val;
 8006786:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
}
 800678a:	4650      	mov	r0, sl
 800678c:	b019      	add	sp, #100	; 0x64
 800678e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	mem_cpy(sn, dp->fn, 12);
 8006792:	f104 0740 	add.w	r7, r4, #64	; 0x40
 8006796:	220c      	movs	r2, #12
 8006798:	4639      	mov	r1, r7
 800679a:	a804      	add	r0, sp, #16
 800679c:	f7fe fcc7 	bl	800512e <mem_cpy.part.0>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80067a0:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80067a4:	07db      	lsls	r3, r3, #31
 80067a6:	d568      	bpl.n	800687a <dir_register+0x24e>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80067a8:	2340      	movs	r3, #64	; 0x40
		for (n = 1; n < 100; n++) {
 80067aa:	f04f 0901 	mov.w	r9, #1
				if (sreg & 0x10000) sreg ^= 0x11021;
 80067ae:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 8006990 <dir_register+0x364>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80067b2:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
 80067b6:	220b      	movs	r2, #11
 80067b8:	a904      	add	r1, sp, #16
 80067ba:	4638      	mov	r0, r7
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80067bc:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 80067c0:	f7fe fcb5 	bl	800512e <mem_cpy.part.0>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80067c4:	f1b9 0f05 	cmp.w	r9, #5
 80067c8:	d94a      	bls.n	8006860 <dir_register+0x234>
 80067ca:	464b      	mov	r3, r9
 80067cc:	f1aa 0102 	sub.w	r1, sl, #2
		while (*lfn) {	/* Create a CRC as hash value */
 80067d0:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 80067d4:	bbaa      	cbnz	r2, 8006842 <dir_register+0x216>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80067d6:	2207      	movs	r2, #7
		c = (BYTE)((seq % 16) + '0');
 80067d8:	f003 000f 	and.w	r0, r3, #15
 80067dc:	f100 0130 	add.w	r1, r0, #48	; 0x30
		if (c > '9') c += 7;
 80067e0:	2939      	cmp	r1, #57	; 0x39
 80067e2:	bf88      	it	hi
 80067e4:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
		ns[i--] = c;
 80067e8:	3a01      	subs	r2, #1
 80067ea:	a802      	add	r0, sp, #8
 80067ec:	4410      	add	r0, r2
	} while (seq);
 80067ee:	091b      	lsrs	r3, r3, #4
		ns[i--] = c;
 80067f0:	7041      	strb	r1, [r0, #1]
	} while (seq);
 80067f2:	d1f1      	bne.n	80067d8 <dir_register+0x1ac>
	ns[i] = '~';
 80067f4:	207e      	movs	r0, #126	; 0x7e
 80067f6:	a918      	add	r1, sp, #96	; 0x60
 80067f8:	4411      	add	r1, r2
 80067fa:	f801 0c58 	strb.w	r0, [r1, #-88]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80067fe:	4293      	cmp	r3, r2
 8006800:	d003      	beq.n	800680a <dir_register+0x1de>
 8006802:	5cf9      	ldrb	r1, [r7, r3]
 8006804:	1c58      	adds	r0, r3, #1
 8006806:	2920      	cmp	r1, #32
 8006808:	d12c      	bne.n	8006864 <dir_register+0x238>
 800680a:	443b      	add	r3, r7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800680c:	2a07      	cmp	r2, #7
 800680e:	bf8f      	iteee	hi
 8006810:	2120      	movhi	r1, #32
 8006812:	a918      	addls	r1, sp, #96	; 0x60
 8006814:	1889      	addls	r1, r1, r2
 8006816:	f811 1c58 	ldrbls.w	r1, [r1, #-88]
 800681a:	bf98      	it	ls
 800681c:	3201      	addls	r2, #1
 800681e:	f803 1b01 	strb.w	r1, [r3], #1
	} while (j < 8);
 8006822:	1bd9      	subs	r1, r3, r7
 8006824:	2907      	cmp	r1, #7
 8006826:	d9f1      	bls.n	800680c <dir_register+0x1e0>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006828:	4620      	mov	r0, r4
 800682a:	f7ff fe17 	bl	800645c <dir_find>
			if (res != FR_OK) break;
 800682e:	4682      	mov	sl, r0
 8006830:	b9e8      	cbnz	r0, 800686e <dir_register+0x242>
		for (n = 1; n < 100; n++) {
 8006832:	f109 0901 	add.w	r9, r9, #1
 8006836:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 800683a:	d1bc      	bne.n	80067b6 <dir_register+0x18a>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800683c:	f04f 0a07 	mov.w	sl, #7
 8006840:	e7a3      	b.n	800678a <dir_register+0x15e>
		while (*lfn) {	/* Create a CRC as hash value */
 8006842:	2010      	movs	r0, #16
				sreg = (sreg << 1) + (wc & 1);
 8006844:	f002 0c01 	and.w	ip, r2, #1
 8006848:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
				if (sreg & 0x10000) sreg ^= 0x11021;
 800684c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006850:	bf18      	it	ne
 8006852:	ea83 0308 	eorne.w	r3, r3, r8
			for (i = 0; i < 16; i++) {
 8006856:	3801      	subs	r0, #1
				wc >>= 1;
 8006858:	ea4f 0252 	mov.w	r2, r2, lsr #1
			for (i = 0; i < 16; i++) {
 800685c:	d1f2      	bne.n	8006844 <dir_register+0x218>
 800685e:	e7b7      	b.n	80067d0 <dir_register+0x1a4>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006860:	464b      	mov	r3, r9
 8006862:	e7b8      	b.n	80067d6 <dir_register+0x1aa>
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006864:	4603      	mov	r3, r0
 8006866:	e7ca      	b.n	80067fe <dir_register+0x1d2>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006868:	f04f 0a06 	mov.w	sl, #6
 800686c:	e78d      	b.n	800678a <dir_register+0x15e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800686e:	2804      	cmp	r0, #4
 8006870:	d18b      	bne.n	800678a <dir_register+0x15e>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006872:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8006876:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800687a:	f89d 301b 	ldrb.w	r3, [sp, #27]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800687e:	4620      	mov	r0, r4
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006880:	079b      	lsls	r3, r3, #30
 8006882:	bf43      	ittte	mi
 8006884:	230d      	movmi	r3, #13
 8006886:	350c      	addmi	r5, #12
 8006888:	fbb5 f5f3 	udivmi	r5, r5, r3
 800688c:	2501      	movpl	r5, #1
 800688e:	bf48      	it	mi
 8006890:	3501      	addmi	r5, #1
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006892:	4629      	mov	r1, r5
 8006894:	f7ff fcdb 	bl	800624e <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006898:	4682      	mov	sl, r0
 800689a:	2800      	cmp	r0, #0
 800689c:	f47f af75 	bne.w	800678a <dir_register+0x15e>
 80068a0:	3d01      	subs	r5, #1
 80068a2:	d058      	beq.n	8006956 <dir_register+0x32a>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80068a4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80068a6:	4620      	mov	r0, r4
 80068a8:	eba1 1145 	sub.w	r1, r1, r5, lsl #5
 80068ac:	f7fe fedb 	bl	8005666 <dir_sdi>
		if (res == FR_OK) {
 80068b0:	4682      	mov	sl, r0
 80068b2:	2800      	cmp	r0, #0
 80068b4:	f47f af69 	bne.w	800678a <dir_register+0x15e>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80068b8:	4638      	mov	r0, r7
 80068ba:	f7fe fbc6 	bl	800504a <sum_sfn>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80068be:	f64f 79ff 	movw	r9, #65535	; 0xffff
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80068c2:	4680      	mov	r8, r0
				res = move_window(fs, dp->sect);
 80068c4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80068c6:	4630      	mov	r0, r6
 80068c8:	f7fe fdd7 	bl	800547a <move_window>
 80068cc:	4682      	mov	sl, r0
				if (res != FR_OK) break;
 80068ce:	2800      	cmp	r0, #0
 80068d0:	f47f af5b 	bne.w	800678a <dir_register+0x15e>
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80068d4:	220f      	movs	r2, #15
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80068d6:	f04f 0c0d 	mov.w	ip, #13
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80068da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80068dc:	b2e9      	uxtb	r1, r5
 80068de:	f8d6 e00c 	ldr.w	lr, [r6, #12]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80068e2:	72da      	strb	r2, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80068e4:	1e4a      	subs	r2, r1, #1
 80068e6:	fb0c f202 	mul.w	r2, ip, r2
	s = wc = 0;
 80068ea:	4684      	mov	ip, r0
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80068ec:	f883 800d 	strb.w	r8, [r3, #13]
	dir[LDIR_Type] = 0;
 80068f0:	7318      	strb	r0, [r3, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 80068f2:	7698      	strb	r0, [r3, #26]
	*ptr++ = (BYTE)val;
 80068f4:	76d8      	strb	r0, [r3, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80068f6:	9201      	str	r2, [sp, #4]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80068f8:	4548      	cmp	r0, r9
 80068fa:	bf1f      	itttt	ne
 80068fc:	9a01      	ldrne	r2, [sp, #4]
 80068fe:	f83e 0012 	ldrhne.w	r0, [lr, r2, lsl #1]
 8006902:	3201      	addne	r2, #1
 8006904:	9201      	strne	r2, [sp, #4]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006906:	4a21      	ldr	r2, [pc, #132]	; (800698c <dir_register+0x360>)
 8006908:	f81c a002 	ldrb.w	sl, [ip, r2]
	} while (++s < 13);
 800690c:	f10c 0c01 	add.w	ip, ip, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8006910:	f803 000a 	strb.w	r0, [r3, sl]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006914:	eb03 0b0a 	add.w	fp, r3, sl
	*ptr++ = (BYTE)val; val >>= 8;
 8006918:	ea4f 2a10 	mov.w	sl, r0, lsr #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
 800691c:	2800      	cmp	r0, #0
 800691e:	bf08      	it	eq
 8006920:	4648      	moveq	r0, r9
	} while (++s < 13);
 8006922:	f1bc 0f0d 	cmp.w	ip, #13
	*ptr++ = (BYTE)val;
 8006926:	f88b a001 	strb.w	sl, [fp, #1]
	} while (++s < 13);
 800692a:	d1e5      	bne.n	80068f8 <dir_register+0x2cc>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800692c:	4548      	cmp	r0, r9
 800692e:	d003      	beq.n	8006938 <dir_register+0x30c>
 8006930:	9a01      	ldr	r2, [sp, #4]
 8006932:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 8006936:	b90a      	cbnz	r2, 800693c <dir_register+0x310>
 8006938:	f041 0140 	orr.w	r1, r1, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800693c:	7019      	strb	r1, [r3, #0]
				fs->wflag = 1;
 800693e:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
 8006940:	2100      	movs	r1, #0
				fs->wflag = 1;
 8006942:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006944:	4620      	mov	r0, r4
 8006946:	f7ff fbb6 	bl	80060b6 <dir_next>
			} while (res == FR_OK && --nent);
 800694a:	4682      	mov	sl, r0
 800694c:	2800      	cmp	r0, #0
 800694e:	f47f af1c 	bne.w	800678a <dir_register+0x15e>
 8006952:	3d01      	subs	r5, #1
 8006954:	d1b6      	bne.n	80068c4 <dir_register+0x298>
		res = move_window(fs, dp->sect);
 8006956:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006958:	4630      	mov	r0, r6
 800695a:	f7fe fd8e 	bl	800547a <move_window>
		if (res == FR_OK) {
 800695e:	4682      	mov	sl, r0
 8006960:	2800      	cmp	r0, #0
 8006962:	f47f af12 	bne.w	800678a <dir_register+0x15e>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006966:	4601      	mov	r1, r0
 8006968:	2220      	movs	r2, #32
 800696a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800696c:	f7fe fb4e 	bl	800500c <mem_set>
 8006970:	220b      	movs	r2, #11
 8006972:	4639      	mov	r1, r7
 8006974:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006976:	f7fe fbda 	bl	800512e <mem_cpy.part.0>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800697a:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 800697e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006980:	f003 0318 	and.w	r3, r3, #24
 8006984:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 8006986:	2301      	movs	r3, #1
 8006988:	70f3      	strb	r3, [r6, #3]
 800698a:	e6fe      	b.n	800678a <dir_register+0x15e>
 800698c:	0800c6ee 	.word	0x0800c6ee
 8006990:	00011021 	.word	0x00011021

08006994 <follow_path>:
{
 8006994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006998:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 800699a:	6803      	ldr	r3, [r0, #0]
{
 800699c:	b085      	sub	sp, #20
	FATFS *fs = dp->obj.fs;
 800699e:	9301      	str	r3, [sp, #4]
 80069a0:	4689      	mov	r9, r1
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80069a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069a6:	2b2f      	cmp	r3, #47	; 0x2f
 80069a8:	d0fa      	beq.n	80069a0 <follow_path+0xc>
 80069aa:	2b5c      	cmp	r3, #92	; 0x5c
 80069ac:	d0f8      	beq.n	80069a0 <follow_path+0xc>
		dp->obj.sclust = 0;					/* Start from root directory */
 80069ae:	2100      	movs	r1, #0
 80069b0:	60a9      	str	r1, [r5, #8]
	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
 80069b2:	61e9      	str	r1, [r5, #28]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80069b4:	f899 3000 	ldrb.w	r3, [r9]
 80069b8:	2b1f      	cmp	r3, #31
 80069ba:	f200 80e4 	bhi.w	8006b86 <follow_path+0x1f2>
		dp->fn[NSFLAG] = NS_NONAME;
 80069be:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 80069c0:	4628      	mov	r0, r5
		dp->fn[NSFLAG] = NS_NONAME;
 80069c2:	f885 304b 	strb.w	r3, [r5, #75]	; 0x4b
}
 80069c6:	b005      	add	sp, #20
 80069c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 80069cc:	f7fe be4b 	b.w	8005666 <dir_sdi>
			if ((uc & 0xF0) == 0xE0) {	/* 3-byte sequence? */
 80069d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80069d4:	2ae0      	cmp	r2, #224	; 0xe0
 80069d6:	d103      	bne.n	80069e0 <follow_path+0x4c>
				uc &= 0x0F; nf = 2;
 80069d8:	f003 030f 	and.w	r3, r3, #15
 80069dc:	2202      	movs	r2, #2
 80069de:	e0e6      	b.n	8006bae <follow_path+0x21a>
				if ((uc & 0xF8) == 0xF0) {	/* 4-byte sequence? */
 80069e0:	f003 02f8 	and.w	r2, r3, #248	; 0xf8
 80069e4:	2af0      	cmp	r2, #240	; 0xf0
 80069e6:	d10e      	bne.n	8006a06 <follow_path+0x72>
					uc &= 0x07; nf = 3;
 80069e8:	f003 0307 	and.w	r3, r3, #7
 80069ec:	2203      	movs	r2, #3
 80069ee:	e0de      	b.n	8006bae <follow_path+0x21a>
	uc = (BYTE)*p++;	/* Get an encoding unit */
 80069f0:	4689      	mov	r9, r1
 80069f2:	e106      	b.n	8006c02 <follow_path+0x26e>
		if (wc < 0x80 && chk_chr("\"*:<>\?|\x7F", wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80069f4:	2a7f      	cmp	r2, #127	; 0x7f
 80069f6:	d808      	bhi.n	8006a0a <follow_path+0x76>
 80069f8:	4cb9      	ldr	r4, [pc, #740]	; (8006ce0 <follow_path+0x34c>)
 80069fa:	b29b      	uxth	r3, r3
	while (*str && *str != chr) str++;
 80069fc:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8006a00:	b119      	cbz	r1, 8006a0a <follow_path+0x76>
 8006a02:	428b      	cmp	r3, r1
 8006a04:	d1fa      	bne.n	80069fc <follow_path+0x68>
				cf |= NS_LOSS | NS_LFN;
 8006a06:	2006      	movs	r0, #6
 8006a08:	e054      	b.n	8006ab4 <follow_path+0x120>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006a0a:	2efe      	cmp	r6, #254	; 0xfe
 8006a0c:	d8fb      	bhi.n	8006a06 <follow_path+0x72>
		lfn[di++] = wc;					/* Store the Unicode character */
 8006a0e:	f82b 2016 	strh.w	r2, [fp, r6, lsl #1]
 8006a12:	3601      	adds	r6, #1
 8006a14:	e0bc      	b.n	8006b90 <follow_path+0x1fc>
		cf = NS_LAST;			/* Set last segment flag */
 8006a16:	2404      	movs	r4, #4
 8006a18:	e106      	b.n	8006c28 <follow_path+0x294>
		wc = lfn[di - 1];
 8006a1a:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
		if (wc != ' ' && wc != '.') break;
 8006a1e:	2a20      	cmp	r2, #32
 8006a20:	d002      	beq.n	8006a28 <follow_path+0x94>
 8006a22:	2a2e      	cmp	r2, #46	; 0x2e
 8006a24:	f040 8105 	bne.w	8006c32 <follow_path+0x29e>
		di--;
 8006a28:	3e01      	subs	r6, #1
 8006a2a:	e0ff      	b.n	8006c2c <follow_path+0x298>
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	e108      	b.n	8006c42 <follow_path+0x2ae>
		if (i >= ni || si == di) {		/* End of field? */
 8006a30:	45d0      	cmp	r8, sl
 8006a32:	d205      	bcs.n	8006a40 <follow_path+0xac>
 8006a34:	4296      	cmp	r6, r2
 8006a36:	d14e      	bne.n	8006ad6 <follow_path+0x142>
			if (ni == 11) {				/* Name extension overflow? */
 8006a38:	f1ba 0f0b 	cmp.w	sl, #11
 8006a3c:	d143      	bne.n	8006ac6 <follow_path+0x132>
 8006a3e:	e002      	b.n	8006a46 <follow_path+0xb2>
 8006a40:	f1ba 0f0b 	cmp.w	sl, #11
 8006a44:	d139      	bne.n	8006aba <follow_path+0x126>
				cf |= NS_LOSS | NS_LFN;
 8006a46:	f04f 0a0b 	mov.w	sl, #11
 8006a4a:	f044 0403 	orr.w	r4, r4, #3
 8006a4e:	b2e4      	uxtb	r4, r4
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006a50:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 8006a54:	2be5      	cmp	r3, #229	; 0xe5
 8006a56:	bf04      	itt	eq
 8006a58:	2305      	moveq	r3, #5
 8006a5a:	f885 3040 	strbeq.w	r3, [r5, #64]	; 0x40
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 8006a5e:	f1ba 0f08 	cmp.w	sl, #8
 8006a62:	bf04      	itt	eq
 8006a64:	00bf      	lsleq	r7, r7, #2
 8006a66:	b2ff      	uxtbeq	r7, r7
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 8006a68:	f007 030c 	and.w	r3, r7, #12
 8006a6c:	2b0c      	cmp	r3, #12
 8006a6e:	d003      	beq.n	8006a78 <follow_path+0xe4>
 8006a70:	f007 0303 	and.w	r3, r7, #3
 8006a74:	2b03      	cmp	r3, #3
 8006a76:	d102      	bne.n	8006a7e <follow_path+0xea>
 8006a78:	f044 0402 	orr.w	r4, r4, #2
 8006a7c:	b2e4      	uxtb	r4, r4
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006a7e:	07a6      	lsls	r6, r4, #30
 8006a80:	d409      	bmi.n	8006a96 <follow_path+0x102>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
 8006a82:	07f8      	lsls	r0, r7, #31
 8006a84:	bf44      	itt	mi
 8006a86:	f044 0410 	orrmi.w	r4, r4, #16
 8006a8a:	b2e4      	uxtbmi	r4, r4
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
 8006a8c:	0779      	lsls	r1, r7, #29
 8006a8e:	bf44      	itt	mi
 8006a90:	f044 0408 	orrmi.w	r4, r4, #8
 8006a94:	b2e4      	uxtbmi	r4, r4
	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
 8006a96:	f885 404b 	strb.w	r4, [r5, #75]	; 0x4b
			res = dir_find(dp);				/* Find an object with the segment name */
 8006a9a:	4628      	mov	r0, r5
 8006a9c:	f7ff fcde 	bl	800645c <dir_find>
			ns = dp->fn[NSFLAG];
 8006aa0:	f895 304b 	ldrb.w	r3, [r5, #75]	; 0x4b
			if (res != FR_OK) {				/* Failed to find the object */
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	d054      	beq.n	8006b52 <follow_path+0x1be>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006aa8:	2804      	cmp	r0, #4
 8006aaa:	d103      	bne.n	8006ab4 <follow_path+0x120>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006aac:	f013 0f04 	tst.w	r3, #4
 8006ab0:	bf08      	it	eq
 8006ab2:	2005      	moveq	r0, #5
}
 8006ab4:	b005      	add	sp, #20
 8006ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
 8006aba:	4296      	cmp	r6, r2
 8006abc:	d003      	beq.n	8006ac6 <follow_path+0x132>
 8006abe:	f044 0403 	orr.w	r4, r4, #3
 8006ac2:	b2e4      	uxtb	r4, r4
			if (si > di) break;						/* No name extension? */
 8006ac4:	d3c4      	bcc.n	8006a50 <follow_path+0xbc>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 8006ac6:	00bf      	lsls	r7, r7, #2
 8006ac8:	b2ff      	uxtb	r7, r7
 8006aca:	4632      	mov	r2, r6
 8006acc:	f04f 0a0b 	mov.w	sl, #11
 8006ad0:	f04f 0808 	mov.w	r8, #8
 8006ad4:	e0e3      	b.n	8006c9e <follow_path+0x30a>
		if (wc >= 0x80) {	/* Is this a non-ASCII character? */
 8006ad6:	287f      	cmp	r0, #127	; 0x7f
 8006ad8:	d939      	bls.n	8006b4e <follow_path+0x1ba>
			cf |= NS_LFN;	/* LFN entry needs to be created */
 8006ada:	f044 0302 	orr.w	r3, r4, #2
 8006ade:	b2db      	uxtb	r3, r3
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
 8006ae0:	f240 3162 	movw	r1, #866	; 0x362
 8006ae4:	9203      	str	r2, [sp, #12]
			cf |= NS_LFN;	/* LFN entry needs to be created */
 8006ae6:	9302      	str	r3, [sp, #8]
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
 8006ae8:	f000 fe06 	bl	80076f8 <ff_uni2oem>
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
 8006aec:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006af0:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006af4:	d011      	beq.n	8006b1a <follow_path+0x186>
 8006af6:	497b      	ldr	r1, [pc, #492]	; (8006ce4 <follow_path+0x350>)
 8006af8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8006afc:	5c08      	ldrb	r0, [r1, r0]
			if (wc == 0 || chk_chr("+,;=[]", wc)) {	/* Replace illegal characters for SFN if needed */
 8006afe:	b138      	cbz	r0, 8006b10 <follow_path+0x17c>
 8006b00:	4c79      	ldr	r4, [pc, #484]	; (8006ce8 <follow_path+0x354>)
	while (*str && *str != chr) str++;
 8006b02:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8006b06:	2900      	cmp	r1, #0
 8006b08:	f000 80d8 	beq.w	8006cbc <follow_path+0x328>
 8006b0c:	4281      	cmp	r1, r0
 8006b0e:	d1f8      	bne.n	8006b02 <follow_path+0x16e>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006b10:	f043 0303 	orr.w	r3, r3, #3
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	205f      	movs	r0, #95	; 0x5f
 8006b18:	e011      	b.n	8006b3e <follow_path+0x1aa>
		if (wc >= 0x100) {				/* Is this a DBC? */
 8006b1a:	28ff      	cmp	r0, #255	; 0xff
 8006b1c:	d9ef      	bls.n	8006afe <follow_path+0x16a>
			if (i >= ni - 1) {			/* Field overflow? */
 8006b1e:	f10a 31ff 	add.w	r1, sl, #4294967295
 8006b22:	4588      	cmp	r8, r1
 8006b24:	d304      	bcc.n	8006b30 <follow_path+0x19c>
				cf |= NS_LOSS | NS_LFN;
 8006b26:	f044 0403 	orr.w	r4, r4, #3
 8006b2a:	b2e4      	uxtb	r4, r4
 8006b2c:	46d0      	mov	r8, sl
 8006b2e:	e0b6      	b.n	8006c9e <follow_path+0x30a>
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
 8006b30:	eb05 0108 	add.w	r1, r5, r8
 8006b34:	0a04      	lsrs	r4, r0, #8
 8006b36:	f881 4040 	strb.w	r4, [r1, #64]	; 0x40
 8006b3a:	f108 0801 	add.w	r8, r8, #1
		dp->fn[i++] = (BYTE)wc;
 8006b3e:	eb05 0108 	add.w	r1, r5, r8
 8006b42:	f881 0040 	strb.w	r0, [r1, #64]	; 0x40
 8006b46:	f108 0801 	add.w	r8, r8, #1
 8006b4a:	461c      	mov	r4, r3
 8006b4c:	e0a7      	b.n	8006c9e <follow_path+0x30a>
		if (wc >= 0x80) {	/* Is this a non-ASCII character? */
 8006b4e:	4623      	mov	r3, r4
 8006b50:	e7d6      	b.n	8006b00 <follow_path+0x16c>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006b52:	075a      	lsls	r2, r3, #29
 8006b54:	d4ae      	bmi.n	8006ab4 <follow_path+0x120>
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006b56:	79ab      	ldrb	r3, [r5, #6]
 8006b58:	06db      	lsls	r3, r3, #27
 8006b5a:	f140 80ad 	bpl.w	8006cb8 <follow_path+0x324>
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 8006b5e:	9b01      	ldr	r3, [sp, #4]
 8006b60:	7818      	ldrb	r0, [r3, #0]
 8006b62:	2804      	cmp	r0, #4
 8006b64:	f040 809d 	bne.w	8006ca2 <follow_path+0x30e>
				dp->obj.c_scl = dp->obj.sclust;
 8006b68:	68ab      	ldr	r3, [r5, #8]
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 8006b6a:	79ea      	ldrb	r2, [r5, #7]
				dp->obj.c_scl = dp->obj.sclust;
 8006b6c:	622b      	str	r3, [r5, #32]
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 8006b6e:	692b      	ldr	r3, [r5, #16]
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
 8006b70:	4629      	mov	r1, r5
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 8006b72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006b76:	4313      	orrs	r3, r2
 8006b78:	626b      	str	r3, [r5, #36]	; 0x24
				dp->obj.c_ofs = dp->blk_ofs;
 8006b7a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8006b7c:	62ab      	str	r3, [r5, #40]	; 0x28
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
 8006b7e:	9b01      	ldr	r3, [sp, #4]
 8006b80:	6918      	ldr	r0, [r3, #16]
 8006b82:	f7fe fc45 	bl	8005410 <init_alloc_info.isra.6>
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
 8006b86:	2600      	movs	r6, #0
 8006b88:	682b      	ldr	r3, [r5, #0]
 8006b8a:	4858      	ldr	r0, [pc, #352]	; (8006cec <follow_path+0x358>)
 8006b8c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	uc = (BYTE)*p++;	/* Get an encoding unit */
 8006b90:	f899 3000 	ldrb.w	r3, [r9]
 8006b94:	f109 0101 	add.w	r1, r9, #1
	if (uc & 0x80) {	/* Multiple byte code? */
 8006b98:	061f      	lsls	r7, r3, #24
 8006b9a:	f57f af29 	bpl.w	80069f0 <follow_path+0x5c>
		if ((uc & 0xE0) == 0xC0) {	/* 2-byte sequence? */
 8006b9e:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
 8006ba2:	2ac0      	cmp	r2, #192	; 0xc0
 8006ba4:	f47f af14 	bne.w	80069d0 <follow_path+0x3c>
			uc &= 0x1F; nf = 1;
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f003 031f 	and.w	r3, r3, #31
				uc &= 0x0F; nf = 2;
 8006bae:	4689      	mov	r9, r1
			b = (BYTE)*p++;
 8006bb0:	f819 1b01 	ldrb.w	r1, [r9], #1
			if ((b & 0xC0) != 0x80) return 0xFFFFFFFF;	/* Wrong sequence? */
 8006bb4:	f001 04c0 	and.w	r4, r1, #192	; 0xc0
 8006bb8:	2c80      	cmp	r4, #128	; 0x80
 8006bba:	f47f af24 	bne.w	8006a06 <follow_path+0x72>
			uc = uc << 6 | (b & 0x3F);
 8006bbe:	f001 013f 	and.w	r1, r1, #63	; 0x3f
		} while (--nf != 0);
 8006bc2:	3a01      	subs	r2, #1
			uc = uc << 6 | (b & 0x3F);
 8006bc4:	ea41 1383 	orr.w	r3, r1, r3, lsl #6
		} while (--nf != 0);
 8006bc8:	d1f2      	bne.n	8006bb0 <follow_path+0x21c>
		if (uc < 0x80 || IsSurrogate(uc) || uc >= 0x110000) return 0xFFFFFFFF;	/* Wrong code? */
 8006bca:	4949      	ldr	r1, [pc, #292]	; (8006cf0 <follow_path+0x35c>)
 8006bcc:	f1a3 0280 	sub.w	r2, r3, #128	; 0x80
 8006bd0:	428a      	cmp	r2, r1
 8006bd2:	f63f af18 	bhi.w	8006a06 <follow_path+0x72>
 8006bd6:	f5a3 4258 	sub.w	r2, r3, #55296	; 0xd800
 8006bda:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8006bde:	f4ff af12 	bcc.w	8006a06 <follow_path+0x72>
		if (uc >= 0x010000) uc = 0xD800DC00 | ((uc - 0x10000) << 6 & 0x3FF0000) | (uc & 0x3FF);	/* Make a surrogate pair if needed */
 8006be2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006be6:	d30c      	bcc.n	8006c02 <follow_path+0x26e>
 8006be8:	4942      	ldr	r1, [pc, #264]	; (8006cf4 <follow_path+0x360>)
 8006bea:	f5a3 3280 	sub.w	r2, r3, #65536	; 0x10000
 8006bee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bf2:	ea01 1282 	and.w	r2, r1, r2, lsl #6
 8006bf6:	4303      	orrs	r3, r0
 8006bf8:	4313      	orrs	r3, r2
		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
 8006bfa:	0c1a      	lsrs	r2, r3, #16
 8006bfc:	f82b 2016 	strh.w	r2, [fp, r6, lsl #1]
 8006c00:	3601      	adds	r6, #1
		wc = (WCHAR)uc;
 8006c02:	b29a      	uxth	r2, r3
		if (wc < ' ' || wc == '/' || wc == '\\') break;	/* Break if end of the path or a separator is found */
 8006c04:	2a1f      	cmp	r2, #31
 8006c06:	f67f af06 	bls.w	8006a16 <follow_path+0x82>
 8006c0a:	2a2f      	cmp	r2, #47	; 0x2f
 8006c0c:	d002      	beq.n	8006c14 <follow_path+0x280>
 8006c0e:	2a5c      	cmp	r2, #92	; 0x5c
 8006c10:	f47f aef0 	bne.w	80069f4 <follow_path+0x60>
 8006c14:	464a      	mov	r2, r9
		while (*p == '/' || *p == '\\') p++;	/* Skip duplicated separators if exist */
 8006c16:	7813      	ldrb	r3, [r2, #0]
 8006c18:	4691      	mov	r9, r2
 8006c1a:	2b2f      	cmp	r3, #47	; 0x2f
 8006c1c:	f102 0201 	add.w	r2, r2, #1
 8006c20:	d0f9      	beq.n	8006c16 <follow_path+0x282>
 8006c22:	2b5c      	cmp	r3, #92	; 0x5c
 8006c24:	d0f7      	beq.n	8006c16 <follow_path+0x282>
		cf = 0;					/* Next segment follows */
 8006c26:	2400      	movs	r4, #0
 8006c28:	eb0b 0346 	add.w	r3, fp, r6, lsl #1
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006c2c:	2e00      	cmp	r6, #0
 8006c2e:	f47f aef4 	bne.w	8006a1a <follow_path+0x86>
	lfn[di] = 0;							/* LFN is created into the working buffer */
 8006c32:	2300      	movs	r3, #0
 8006c34:	eb0b 0246 	add.w	r2, fp, r6, lsl #1
 8006c38:	f82b 3016 	strh.w	r3, [fp, r6, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
 8006c3c:	2e00      	cmp	r6, #0
 8006c3e:	f43f aee2 	beq.w	8006a06 <follow_path+0x72>
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
 8006c42:	f83b 1013 	ldrh.w	r1, [fp, r3, lsl #1]
 8006c46:	1c58      	adds	r0, r3, #1
 8006c48:	2920      	cmp	r1, #32
 8006c4a:	f43f aeef 	beq.w	8006a2c <follow_path+0x98>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 8006c4e:	b90b      	cbnz	r3, 8006c54 <follow_path+0x2c0>
 8006c50:	292e      	cmp	r1, #46	; 0x2e
 8006c52:	d102      	bne.n	8006c5a <follow_path+0x2c6>
 8006c54:	f044 0403 	orr.w	r4, r4, #3
 8006c58:	b2e4      	uxtb	r4, r4
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
 8006c5a:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
 8006c5e:	292e      	cmp	r1, #46	; 0x2e
 8006c60:	d001      	beq.n	8006c66 <follow_path+0x2d2>
 8006c62:	3e01      	subs	r6, #1
 8006c64:	d1f9      	bne.n	8006c5a <follow_path+0x2c6>
	i = b = 0; ni = 8;
 8006c66:	f04f 0800 	mov.w	r8, #0
	mem_set(dp->fn, ' ', 11);
 8006c6a:	220b      	movs	r2, #11
 8006c6c:	2120      	movs	r1, #32
 8006c6e:	f105 0040 	add.w	r0, r5, #64	; 0x40
 8006c72:	f7fe f9cb 	bl	800500c <mem_set>
	i = b = 0; ni = 8;
 8006c76:	f04f 0a08 	mov.w	sl, #8
 8006c7a:	4647      	mov	r7, r8
		wc = lfn[si++];					/* Get an LFN character */
 8006c7c:	f83b 0013 	ldrh.w	r0, [fp, r3, lsl #1]
 8006c80:	1c5a      	adds	r2, r3, #1
		if (wc == 0) break;				/* Break on end of the LFN */
 8006c82:	2800      	cmp	r0, #0
 8006c84:	f43f aee4 	beq.w	8006a50 <follow_path+0xbc>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
 8006c88:	2820      	cmp	r0, #32
 8006c8a:	d005      	beq.n	8006c98 <follow_path+0x304>
 8006c8c:	282e      	cmp	r0, #46	; 0x2e
 8006c8e:	f47f aecf 	bne.w	8006a30 <follow_path+0x9c>
 8006c92:	4296      	cmp	r6, r2
 8006c94:	f43f aed0 	beq.w	8006a38 <follow_path+0xa4>
			cf |= NS_LOSS | NS_LFN;
 8006c98:	f044 0403 	orr.w	r4, r4, #3
 8006c9c:	b2e4      	uxtb	r4, r4
		dp->fn[i++] = (BYTE)wc;
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	e7ec      	b.n	8006c7c <follow_path+0x2e8>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006ca2:	9b01      	ldr	r3, [sp, #4]
 8006ca4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006ca8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cae:	4419      	add	r1, r3
 8006cb0:	f7fe fb94 	bl	80053dc <ld_clust.isra.4>
 8006cb4:	60a8      	str	r0, [r5, #8]
 8006cb6:	e766      	b.n	8006b86 <follow_path+0x1f2>
				res = FR_NO_PATH; break;
 8006cb8:	2005      	movs	r0, #5
	return res;
 8006cba:	e6fb      	b.n	8006ab4 <follow_path+0x120>
				if (IsUpper(wc)) {		/* ASCII upper case? */
 8006cbc:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 8006cc0:	b289      	uxth	r1, r1
 8006cc2:	2919      	cmp	r1, #25
 8006cc4:	d801      	bhi.n	8006cca <follow_path+0x336>
					b |= 2;
 8006cc6:	f047 0702 	orr.w	r7, r7, #2
				if (IsLower(wc)) {		/* ASCII lower case? */
 8006cca:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 8006cce:	b289      	uxth	r1, r1
 8006cd0:	2919      	cmp	r1, #25
					b |= 1; wc -= 0x20;
 8006cd2:	bf9e      	ittt	ls
 8006cd4:	3820      	subls	r0, #32
 8006cd6:	f047 0701 	orrls.w	r7, r7, #1
 8006cda:	b280      	uxthls	r0, r0
 8006cdc:	e72f      	b.n	8006b3e <follow_path+0x1aa>
 8006cde:	bf00      	nop
 8006ce0:	0800c710 	.word	0x0800c710
 8006ce4:	0800c66e 	.word	0x0800c66e
 8006ce8:	0800c719 	.word	0x0800c719
 8006cec:	d800dc00 	.word	0xd800dc00
 8006cf0:	0010ff7f 	.word	0x0010ff7f
 8006cf4:	03ff0000 	.word	0x03ff0000

08006cf8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006cf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006cfa:	e9cd 1000 	strd	r1, r0, [sp]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006cfe:	a804      	add	r0, sp, #16
 8006d00:	f840 1d04 	str.w	r1, [r0, #-4]!
{
 8006d04:	4614      	mov	r4, r2


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006d06:	f7fe f9c6 	bl	8005096 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8006d0a:	2800      	cmp	r0, #0
 8006d0c:	db13      	blt.n	8006d36 <f_mount+0x3e>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006d0e:	4b0c      	ldr	r3, [pc, #48]	; (8006d40 <f_mount+0x48>)
 8006d10:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]

	if (cfs) {
 8006d14:	b10a      	cbz	r2, 8006d1a <f_mount+0x22>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006d16:	2100      	movs	r1, #0
 8006d18:	7011      	strb	r1, [r2, #0]
	}

	if (fs) {
 8006d1a:	9a01      	ldr	r2, [sp, #4]
 8006d1c:	b10a      	cbz	r2, 8006d22 <f_mount+0x2a>
		fs->fs_type = 0;				/* Clear new fs object */
 8006d1e:	2100      	movs	r1, #0
 8006d20:	7011      	strb	r1, [r2, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006d22:	f843 2020 	str.w	r2, [r3, r0, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 8006d26:	b144      	cbz	r4, 8006d3a <f_mount+0x42>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006d28:	2200      	movs	r2, #0
 8006d2a:	a901      	add	r1, sp, #4
 8006d2c:	4668      	mov	r0, sp
 8006d2e:	f7fe fe57 	bl	80059e0 <mount_volume>
	LEAVE_FF(fs, res);
}
 8006d32:	b004      	add	sp, #16
 8006d34:	bd10      	pop	{r4, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8006d36:	200b      	movs	r0, #11
 8006d38:	e7fb      	b.n	8006d32 <f_mount+0x3a>
	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	e7f9      	b.n	8006d32 <f_mount+0x3a>
 8006d3e:	bf00      	nop
 8006d40:	200008f0 	.word	0x200008f0

08006d44 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d48:	f5ad 6d98 	sub.w	sp, sp, #1216	; 0x4c0
 8006d4c:	9101      	str	r1, [sp, #4]
 8006d4e:	4617      	mov	r7, r2
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006d50:	4604      	mov	r4, r0
 8006d52:	2800      	cmp	r0, #0
 8006d54:	f000 814c 	beq.w	8006ff0 <f_open+0x2ac>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8006d58:	f002 063f 	and.w	r6, r2, #63	; 0x3f
	res = mount_volume(&path, &fs, mode);
 8006d5c:	4632      	mov	r2, r6
 8006d5e:	a903      	add	r1, sp, #12
 8006d60:	a801      	add	r0, sp, #4
 8006d62:	f7fe fe3d 	bl	80059e0 <mount_volume>
	if (res == FR_OK) {
 8006d66:	4605      	mov	r5, r0
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	f040 80ca 	bne.w	8006f02 <f_open+0x1be>
		dj.obj.fs = fs;
 8006d6e:	9b03      	ldr	r3, [sp, #12]
		INIT_NAMBUF(fs);
 8006d70:	aa18      	add	r2, sp, #96	; 0x60
 8006d72:	60da      	str	r2, [r3, #12]
 8006d74:	aa98      	add	r2, sp, #608	; 0x260
 8006d76:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8006d78:	9901      	ldr	r1, [sp, #4]
 8006d7a:	a804      	add	r0, sp, #16
		dj.obj.fs = fs;
 8006d7c:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8006d7e:	f7ff fe09 	bl	8006994 <follow_path>
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8006d82:	b920      	cbnz	r0, 8006d8e <f_open+0x4a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006d84:	f99d 305b 	ldrsb.w	r3, [sp, #91]	; 0x5b
				res = FR_INVALID_NAME;
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	bfb8      	it	lt
 8006d8c:	2006      	movlt	r0, #6
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006d8e:	f017 0f1c 	tst.w	r7, #28
 8006d92:	f000 80fe 	beq.w	8006f92 <f_open+0x24e>
			if (res != FR_OK) {					/* No file, create new */
 8006d96:	2800      	cmp	r0, #0
 8006d98:	f000 80bb 	beq.w	8006f12 <f_open+0x1ce>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006d9c:	2804      	cmp	r0, #4
 8006d9e:	f040 80b0 	bne.w	8006f02 <f_open+0x1be>
#if FF_FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8006da2:	a804      	add	r0, sp, #16
 8006da4:	f7ff fc42 	bl	800662c <dir_register>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8006da8:	2800      	cmp	r0, #0
 8006daa:	f040 80aa 	bne.w	8006f02 <f_open+0x1be>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006dae:	f046 0608 	orr.w	r6, r6, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8006db2:	0731      	lsls	r1, r6, #28
 8006db4:	d53c      	bpl.n	8006e30 <f_open+0xec>
 8006db6:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8006dba:	f89a 0000 	ldrb.w	r0, [sl]
#if FF_FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 8006dbe:	2804      	cmp	r0, #4
 8006dc0:	f040 80b1 	bne.w	8006f26 <f_open+0x1e2>
					/* Get current allocation info */
					fp->obj.fs = fs;
					init_alloc_info(fs, &fp->obj);
 8006dc4:	4621      	mov	r1, r4
 8006dc6:	f8da 0010 	ldr.w	r0, [sl, #16]
					fp->obj.fs = fs;
 8006dca:	f8c4 a000 	str.w	sl, [r4]
					init_alloc_info(fs, &fp->obj);
 8006dce:	f7fe fb1f 	bl	8005410 <init_alloc_info.isra.6>
					/* Set directory entry block initial state */
					mem_set(fs->dirbuf + 2, 0, 30);		/* Clear 85 entry except for NumSec */
 8006dd2:	9b03      	ldr	r3, [sp, #12]
 8006dd4:	221e      	movs	r2, #30
 8006dd6:	6918      	ldr	r0, [r3, #16]
 8006dd8:	2100      	movs	r1, #0
 8006dda:	3002      	adds	r0, #2
 8006ddc:	f7fe f916 	bl	800500c <mem_set>
					mem_set(fs->dirbuf + 38, 0, 26);	/* Clear C0 entry except for NumName and NameHash */
 8006de0:	9b03      	ldr	r3, [sp, #12]
 8006de2:	221a      	movs	r2, #26
 8006de4:	6918      	ldr	r0, [r3, #16]
 8006de6:	2100      	movs	r1, #0
 8006de8:	3026      	adds	r0, #38	; 0x26
 8006dea:	f7fe f90f 	bl	800500c <mem_set>
					fs->dirbuf[XDIR_Attr] = AM_ARC;
 8006dee:	2120      	movs	r1, #32
 8006df0:	9a03      	ldr	r2, [sp, #12]
					st_dword(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());
					fs->dirbuf[XDIR_GenFlags] = 1;
					res = store_xdir(&dj);
 8006df2:	a804      	add	r0, sp, #16
					fs->dirbuf[XDIR_Attr] = AM_ARC;
 8006df4:	6913      	ldr	r3, [r2, #16]
 8006df6:	7119      	strb	r1, [r3, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8006df8:	2100      	movs	r1, #0
					st_dword(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());
 8006dfa:	6913      	ldr	r3, [r2, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8006dfc:	7219      	strb	r1, [r3, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 8006dfe:	7259      	strb	r1, [r3, #9]
	*ptr++ = (BYTE)val; val >>= 8;
 8006e00:	2121      	movs	r1, #33	; 0x21
 8006e02:	7299      	strb	r1, [r3, #10]
	*ptr++ = (BYTE)val;
 8006e04:	214e      	movs	r1, #78	; 0x4e
 8006e06:	72d9      	strb	r1, [r3, #11]
					fs->dirbuf[XDIR_GenFlags] = 1;
 8006e08:	6913      	ldr	r3, [r2, #16]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					res = store_xdir(&dj);
 8006e10:	f7ff fa4a 	bl	80062a8 <store_xdir>
					if (res == FR_OK && fp->obj.sclust != 0) {	/* Remove the cluster chain if exist */
 8006e14:	2800      	cmp	r0, #0
 8006e16:	d174      	bne.n	8006f02 <f_open+0x1be>
 8006e18:	68a1      	ldr	r1, [r4, #8]
 8006e1a:	b149      	cbz	r1, 8006e30 <f_open+0xec>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	4620      	mov	r0, r4
 8006e20:	f7fe fd49 	bl	80058b6 <remove_chain>
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 8006e24:	68a3      	ldr	r3, [r4, #8]
 8006e26:	9a03      	ldr	r2, [sp, #12]
 8006e28:	3b01      	subs	r3, #1
					if (cl != 0) {						/* Remove the cluster chain if exist */
						sc = fs->winsect;
						res = remove_chain(&dj.obj, cl, 0);
						if (res == FR_OK) {
							res = move_window(fs, sc);
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006e2a:	6153      	str	r3, [r2, #20]
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
 8006e2c:	2800      	cmp	r0, #0
 8006e2e:	d168      	bne.n	8006f02 <f_open+0x1be>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006e30:	9a03      	ldr	r2, [sp, #12]
			fp->dir_ptr = dj.dir;
 8006e32:	9f13      	ldr	r7, [sp, #76]	; 0x4c
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006e34:	6b93      	ldr	r3, [r2, #56]	; 0x38
			fp->dir_ptr = dj.dir;
 8006e36:	64e7      	str	r7, [r4, #76]	; 0x4c
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006e38:	64a3      	str	r3, [r4, #72]	; 0x48
		}
#endif

		if (res == FR_OK) {
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8006e3a:	7810      	ldrb	r0, [r2, #0]
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 8006e3c:	0731      	lsls	r1, r6, #28
 8006e3e:	bf48      	it	mi
 8006e40:	f046 0640 	orrmi.w	r6, r6, #64	; 0x40
			if (fs->fs_type == FS_EXFAT) {
 8006e44:	2804      	cmp	r0, #4
 8006e46:	f040 80b2 	bne.w	8006fae <f_open+0x26a>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 8006e4a:	9b06      	ldr	r3, [sp, #24]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 8006e4c:	f89d 1017 	ldrb.w	r1, [sp, #23]
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 8006e50:	6223      	str	r3, [r4, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 8006e52:	9b08      	ldr	r3, [sp, #32]
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
 8006e54:	6910      	ldr	r0, [r2, #16]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 8006e56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006e5a:	430b      	orrs	r3, r1
 8006e5c:	6263      	str	r3, [r4, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 8006e5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
				init_alloc_info(fs, &fp->obj);
 8006e60:	4621      	mov	r1, r4
				fp->obj.c_ofs = dj.blk_ofs;
 8006e62:	62a3      	str	r3, [r4, #40]	; 0x28
				init_alloc_info(fs, &fp->obj);
 8006e64:	f7fe fad4 	bl	8005410 <init_alloc_info.isra.6>
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006e68:	9b03      	ldr	r3, [sp, #12]
			fp->obj.id = fs->id;
			fp->flag = mode;		/* Set file access mode */
			fp->err = 0;			/* Clear error flag */
 8006e6a:	2100      	movs	r1, #0
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006e6c:	6023      	str	r3, [r4, #0]
			fp->obj.id = fs->id;
 8006e6e:	88db      	ldrh	r3, [r3, #6]
			fp->sect = 0;			/* Invalidate current data sector */
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006e70:	2200      	movs	r2, #0
			fp->obj.id = fs->id;
 8006e72:	80a3      	strh	r3, [r4, #4]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006e74:	2300      	movs	r3, #0
#if !FF_FS_READONLY
#if !FF_FS_TINY
			mem_set(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 8006e76:	f104 0a50 	add.w	sl, r4, #80	; 0x50
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006e7a:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
			fp->flag = mode;		/* Set file access mode */
 8006e7e:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
			mem_set(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 8006e82:	f44f 7200 	mov.w	r2, #512	; 0x200
			fp->err = 0;			/* Clear error flag */
 8006e86:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 8006e8a:	6461      	str	r1, [r4, #68]	; 0x44
			mem_set(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 8006e8c:	4650      	mov	r0, sl
 8006e8e:	f7fe f8bd 	bl	800500c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006e92:	06b2      	lsls	r2, r6, #26
 8006e94:	d538      	bpl.n	8006f08 <f_open+0x1c4>
 8006e96:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
 8006e9a:	ea56 0307 	orrs.w	r3, r6, r7
 8006e9e:	d033      	beq.n	8006f08 <f_open+0x1c4>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006ea0:	f04f 0900 	mov.w	r9, #0
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006ea4:	9b03      	ldr	r3, [sp, #12]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006ea6:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006eaa:	f8b3 800a 	ldrh.w	r8, [r3, #10]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006eae:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006eb0:	ea4f 2848 	mov.w	r8, r8, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006eb4:	45b9      	cmp	r9, r7
 8006eb6:	bf08      	it	eq
 8006eb8:	45b0      	cmpeq	r8, r6
 8006eba:	f0c0 8084 	bcc.w	8006fc6 <f_open+0x282>
 8006ebe:	2000      	movs	r0, #0
					clst = get_fat(&fp->obj, clst);
					if (clst <= 1) res = FR_INT_ERR;
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
 8006ec0:	6421      	str	r1, [r4, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006ec2:	b9f0      	cbnz	r0, 8006f02 <f_open+0x1be>
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006eca:	ea03 0907 	and.w	r9, r3, r7
 8006ece:	ea02 0806 	and.w	r8, r2, r6
 8006ed2:	ea58 0309 	orrs.w	r3, r8, r9
 8006ed6:	d017      	beq.n	8006f08 <f_open+0x1c4>
					sc = clst2sect(fs, clst);
 8006ed8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006edc:	4640      	mov	r0, r8
 8006ede:	f7fe f8a9 	bl	8005034 <clst2sect>
					if (sc == 0) {
 8006ee2:	2800      	cmp	r0, #0
 8006ee4:	f000 8082 	beq.w	8006fec <f_open+0x2a8>
						res = FR_INT_ERR;
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006ee8:	0a72      	lsrs	r2, r6, #9
 8006eea:	ea42 52c7 	orr.w	r2, r2, r7, lsl #23
 8006eee:	4402      	add	r2, r0
 8006ef0:	6462      	str	r2, [r4, #68]	; 0x44
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	4651      	mov	r1, sl
 8006ef6:	f898 0001 	ldrb.w	r0, [r8, #1]
 8006efa:	f7fd ff7f 	bl	8004dfc <disk_read>
 8006efe:	b118      	cbz	r0, 8006f08 <f_open+0x1c4>
 8006f00:	2001      	movs	r0, #1
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006f02:	2300      	movs	r3, #0
 8006f04:	4605      	mov	r5, r0
 8006f06:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 8006f08:	4628      	mov	r0, r5
 8006f0a:	f50d 6d98 	add.w	sp, sp, #1216	; 0x4c0
 8006f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006f12:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8006f16:	f013 0f11 	tst.w	r3, #17
 8006f1a:	d146      	bne.n	8006faa <f_open+0x266>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006f1c:	0778      	lsls	r0, r7, #29
 8006f1e:	f57f af48 	bpl.w	8006db2 <f_open+0x6e>
 8006f22:	2008      	movs	r0, #8
 8006f24:	e7ed      	b.n	8006f02 <f_open+0x1be>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8006f26:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
	*ptr++ = (BYTE)val; val >>= 8;
 8006f2a:	2700      	movs	r7, #0
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8006f2c:	4649      	mov	r1, r9
 8006f2e:	f7fe fa55 	bl	80053dc <ld_clust.isra.4>
	*ptr++ = (BYTE)val; val >>= 8;
 8006f32:	2321      	movs	r3, #33	; 0x21
 8006f34:	f889 3010 	strb.w	r3, [r9, #16]
	*ptr++ = (BYTE)val;
 8006f38:	234e      	movs	r3, #78	; 0x4e
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006f3a:	2220      	movs	r2, #32
	*ptr++ = (BYTE)val; val >>= 8;
 8006f3c:	f889 700e 	strb.w	r7, [r9, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 8006f40:	f889 700f 	strb.w	r7, [r9, #15]
	*ptr++ = (BYTE)val;
 8006f44:	f889 3011 	strb.w	r3, [r9, #17]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006f48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8006f4a:	4680      	mov	r8, r0
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006f4c:	72da      	strb	r2, [r3, #11]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006f4e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006f50:	463a      	mov	r2, r7
 8006f52:	4650      	mov	r0, sl
 8006f54:	f7fe fa50 	bl	80053f8 <st_clust.isra.5>
					fs->wflag = 1;
 8006f58:	2201      	movs	r2, #1
					st_dword(dj.dir + DIR_FileSize, 0);
 8006f5a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	*ptr++ = (BYTE)val; val >>= 8;
 8006f5c:	771f      	strb	r7, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8006f5e:	775f      	strb	r7, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 8006f60:	779f      	strb	r7, [r3, #30]
	*ptr++ = (BYTE)val;
 8006f62:	77df      	strb	r7, [r3, #31]
					fs->wflag = 1;
 8006f64:	9b03      	ldr	r3, [sp, #12]
 8006f66:	70da      	strb	r2, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8006f68:	f1b8 0f00 	cmp.w	r8, #0
 8006f6c:	f43f af60 	beq.w	8006e30 <f_open+0xec>
						res = remove_chain(&dj.obj, cl, 0);
 8006f70:	463a      	mov	r2, r7
 8006f72:	4641      	mov	r1, r8
 8006f74:	a804      	add	r0, sp, #16
						sc = fs->winsect;
 8006f76:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
						res = remove_chain(&dj.obj, cl, 0);
 8006f7a:	f7fe fc9c 	bl	80058b6 <remove_chain>
						if (res == FR_OK) {
 8006f7e:	2800      	cmp	r0, #0
 8006f80:	d1bf      	bne.n	8006f02 <f_open+0x1be>
							res = move_window(fs, sc);
 8006f82:	4649      	mov	r1, r9
 8006f84:	9803      	ldr	r0, [sp, #12]
 8006f86:	f7fe fa78 	bl	800547a <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006f8a:	9a03      	ldr	r2, [sp, #12]
 8006f8c:	f108 33ff 	add.w	r3, r8, #4294967295
 8006f90:	e74b      	b.n	8006e2a <f_open+0xe6>
			if (res == FR_OK) {					/* Is the object exsiting? */
 8006f92:	2800      	cmp	r0, #0
 8006f94:	d1b5      	bne.n	8006f02 <f_open+0x1be>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8006f96:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8006f9a:	06da      	lsls	r2, r3, #27
 8006f9c:	d424      	bmi.n	8006fe8 <f_open+0x2a4>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 8006f9e:	07bf      	lsls	r7, r7, #30
 8006fa0:	f57f af46 	bpl.w	8006e30 <f_open+0xec>
 8006fa4:	07d8      	lsls	r0, r3, #31
 8006fa6:	f57f af43 	bpl.w	8006e30 <f_open+0xec>
					res = FR_DENIED;
 8006faa:	2007      	movs	r0, #7
 8006fac:	e7a9      	b.n	8006f02 <f_open+0x1be>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006fae:	4639      	mov	r1, r7
 8006fb0:	f7fe fa14 	bl	80053dc <ld_clust.isra.4>
 8006fb4:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006fb6:	f107 001c 	add.w	r0, r7, #28
 8006fba:	f7fd ffd7 	bl	8004f6c <ld_dword>
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	6120      	str	r0, [r4, #16]
 8006fc2:	6163      	str	r3, [r4, #20]
 8006fc4:	e750      	b.n	8006e68 <f_open+0x124>
					clst = get_fat(&fp->obj, clst);
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	f7fe fab3 	bl	8005532 <get_fat>
 8006fcc:	ebb6 0608 	subs.w	r6, r6, r8
 8006fd0:	eb67 0709 	sbc.w	r7, r7, r9
					if (clst <= 1) res = FR_INT_ERR;
 8006fd4:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 8006fd6:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 8006fd8:	d904      	bls.n	8006fe4 <f_open+0x2a0>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006fda:	1c43      	adds	r3, r0, #1
 8006fdc:	f47f af6a 	bne.w	8006eb4 <f_open+0x170>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006fe0:	2001      	movs	r0, #1
 8006fe2:	e76d      	b.n	8006ec0 <f_open+0x17c>
					if (clst <= 1) res = FR_INT_ERR;
 8006fe4:	2002      	movs	r0, #2
 8006fe6:	e76b      	b.n	8006ec0 <f_open+0x17c>
					res = FR_NO_FILE;
 8006fe8:	2004      	movs	r0, #4
 8006fea:	e78a      	b.n	8006f02 <f_open+0x1be>
						res = FR_INT_ERR;
 8006fec:	2002      	movs	r0, #2
 8006fee:	e788      	b.n	8006f02 <f_open+0x1be>
	if (!fp) return FR_INVALID_OBJECT;
 8006ff0:	2509      	movs	r5, #9
 8006ff2:	e789      	b.n	8006f08 <f_open+0x1c4>

08006ff4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ff8:	4698      	mov	r8, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8006ffa:	2300      	movs	r3, #0
{
 8006ffc:	b085      	sub	sp, #20
 8006ffe:	460f      	mov	r7, r1
	*br = 0;	/* Clear read byte counter */
 8007000:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007004:	a903      	add	r1, sp, #12
{
 8007006:	4604      	mov	r4, r0
 8007008:	4616      	mov	r6, r2
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800700a:	f7fe f85e 	bl	80050ca <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800700e:	4605      	mov	r5, r0
 8007010:	bb90      	cbnz	r0, 8007078 <f_read+0x84>
 8007012:	f894 5031 	ldrb.w	r5, [r4, #49]	; 0x31
 8007016:	bb7d      	cbnz	r5, 8007078 <f_read+0x84>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007018:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800701c:	07d9      	lsls	r1, r3, #31
 800701e:	f140 80ac 	bpl.w	800717a <f_read+0x186>
	remain = fp->obj.objsize - fp->fptr;
 8007022:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
 8007026:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800702a:	1a12      	subs	r2, r2, r0
 800702c:	eb63 0301 	sbc.w	r3, r3, r1
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007030:	2100      	movs	r1, #0
 8007032:	428b      	cmp	r3, r1
 8007034:	bf08      	it	eq
 8007036:	42b2      	cmpeq	r2, r6
 8007038:	bf38      	it	cc
 800703a:	4616      	movcc	r6, r2
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800703c:	f104 0b50 	add.w	fp, r4, #80	; 0x50
	for ( ;  btr;								/* Repeat until btr bytes read */
 8007040:	b1d6      	cbz	r6, 8007078 <f_read+0x84>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007042:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
 8007046:	f240 12ff 	movw	r2, #511	; 0x1ff
 800704a:	2300      	movs	r3, #0
 800704c:	4002      	ands	r2, r0
 800704e:	400b      	ands	r3, r1
 8007050:	4313      	orrs	r3, r2
 8007052:	f040 8084 	bne.w	800715e <f_read+0x16a>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007056:	9b03      	ldr	r3, [sp, #12]
 8007058:	895b      	ldrh	r3, [r3, #10]
 800705a:	1e5a      	subs	r2, r3, #1
 800705c:	0a43      	lsrs	r3, r0, #9
 800705e:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
			if (csect == 0) {					/* On the cluster boundary? */
 8007062:	4013      	ands	r3, r2
 8007064:	d118      	bne.n	8007098 <f_read+0xa4>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007066:	ea50 0201 	orrs.w	r2, r0, r1
 800706a:	d109      	bne.n	8007080 <f_read+0x8c>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800706c:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800706e:	2801      	cmp	r0, #1
 8007070:	d80d      	bhi.n	800708e <f_read+0x9a>
 8007072:	2502      	movs	r5, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007074:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8007078:	4628      	mov	r0, r5
 800707a:	b005      	add	sp, #20
 800707c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007080:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007082:	4620      	mov	r0, r4
 8007084:	9300      	str	r3, [sp, #0]
 8007086:	f7fe fa54 	bl	8005532 <get_fat>
 800708a:	9b00      	ldr	r3, [sp, #0]
 800708c:	e7ef      	b.n	800706e <f_read+0x7a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800708e:	1c42      	adds	r2, r0, #1
 8007090:	d101      	bne.n	8007096 <f_read+0xa2>
 8007092:	2501      	movs	r5, #1
 8007094:	e7ee      	b.n	8007074 <f_read+0x80>
				fp->clust = clst;				/* Update current cluster */
 8007096:	6420      	str	r0, [r4, #64]	; 0x40
 8007098:	9301      	str	r3, [sp, #4]
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 800709a:	9b03      	ldr	r3, [sp, #12]
 800709c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800709e:	4618      	mov	r0, r3
 80070a0:	9300      	str	r3, [sp, #0]
 80070a2:	f7fd ffc7 	bl	8005034 <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 80070a6:	2800      	cmp	r0, #0
 80070a8:	d0e3      	beq.n	8007072 <f_read+0x7e>
			sect += csect;
 80070aa:	9b01      	ldr	r3, [sp, #4]
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 80070ac:	ea5f 2956 	movs.w	r9, r6, lsr #9
			sect += csect;
 80070b0:	eb03 0a00 	add.w	sl, r3, r0
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 80070b4:	d033      	beq.n	800711e <f_read+0x12a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80070b6:	9a00      	ldr	r2, [sp, #0]
 80070b8:	eb03 0109 	add.w	r1, r3, r9
 80070bc:	8952      	ldrh	r2, [r2, #10]
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80070be:	9800      	ldr	r0, [sp, #0]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80070c0:	4291      	cmp	r1, r2
					cc = fs->csize - csect;
 80070c2:	bf88      	it	hi
 80070c4:	eba2 0903 	subhi.w	r9, r2, r3
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80070c8:	464b      	mov	r3, r9
 80070ca:	4652      	mov	r2, sl
 80070cc:	4639      	mov	r1, r7
 80070ce:	7840      	ldrb	r0, [r0, #1]
 80070d0:	f7fd fe94 	bl	8004dfc <disk_read>
 80070d4:	2800      	cmp	r0, #0
 80070d6:	d1dc      	bne.n	8007092 <f_read+0x9e>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80070d8:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 80070dc:	2b00      	cmp	r3, #0
 80070de:	da0b      	bge.n	80070f8 <f_read+0x104>
 80070e0:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80070e2:	eba0 000a 	sub.w	r0, r0, sl
 80070e6:	4548      	cmp	r0, r9
 80070e8:	d206      	bcs.n	80070f8 <f_read+0x104>
 80070ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070ee:	4659      	mov	r1, fp
 80070f0:	eb07 2040 	add.w	r0, r7, r0, lsl #9
 80070f4:	f7fe f81b 	bl	800512e <mem_cpy.part.0>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80070f8:	ea4f 2949 	mov.w	r9, r9, lsl #9
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
 80070fc:	f8d8 3000 	ldr.w	r3, [r8]
 8007100:	eba6 0609 	sub.w	r6, r6, r9
 8007104:	444b      	add	r3, r9
 8007106:	f8c8 3000 	str.w	r3, [r8]
 800710a:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800710e:	eb12 0009 	adds.w	r0, r2, r9
 8007112:	f143 0100 	adc.w	r1, r3, #0
 8007116:	444f      	add	r7, r9
 8007118:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
 800711c:	e790      	b.n	8007040 <f_read+0x4c>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800711e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007120:	4552      	cmp	r2, sl
 8007122:	d01a      	beq.n	800715a <f_read+0x166>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007124:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 8007128:	2b00      	cmp	r3, #0
 800712a:	da0d      	bge.n	8007148 <f_read+0x154>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800712c:	9800      	ldr	r0, [sp, #0]
 800712e:	2301      	movs	r3, #1
 8007130:	4659      	mov	r1, fp
 8007132:	7840      	ldrb	r0, [r0, #1]
 8007134:	f7fd fea0 	bl	8004e78 <disk_write>
 8007138:	2800      	cmp	r0, #0
 800713a:	d1aa      	bne.n	8007092 <f_read+0x9e>
					fp->flag &= (BYTE)~FA_DIRTY;
 800713c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8007140:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007144:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007148:	9803      	ldr	r0, [sp, #12]
 800714a:	2301      	movs	r3, #1
 800714c:	4652      	mov	r2, sl
 800714e:	4659      	mov	r1, fp
 8007150:	7840      	ldrb	r0, [r0, #1]
 8007152:	f7fd fe53 	bl	8004dfc <disk_read>
 8007156:	2800      	cmp	r0, #0
 8007158:	d19b      	bne.n	8007092 <f_read+0x9e>
			fp->sect = sect;
 800715a:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 800715e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007160:	4638      	mov	r0, r7
 8007162:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8007166:	f5c1 7900 	rsb	r9, r1, #512	; 0x200
 800716a:	45b1      	cmp	r9, r6
 800716c:	bf28      	it	cs
 800716e:	46b1      	movcs	r9, r6
 8007170:	4459      	add	r1, fp
 8007172:	464a      	mov	r2, r9
 8007174:	f7fd ffdb 	bl	800512e <mem_cpy.part.0>
 8007178:	e7c0      	b.n	80070fc <f_read+0x108>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800717a:	2507      	movs	r5, #7
 800717c:	e77c      	b.n	8007078 <f_read+0x84>

0800717e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800717e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007182:	b085      	sub	sp, #20
 8007184:	9301      	str	r3, [sp, #4]
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8007186:	2300      	movs	r3, #0
{
 8007188:	4616      	mov	r6, r2
	*bw = 0;	/* Clear write byte counter */
 800718a:	9a01      	ldr	r2, [sp, #4]
{
 800718c:	4689      	mov	r9, r1
	*bw = 0;	/* Clear write byte counter */
 800718e:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007190:	a903      	add	r1, sp, #12
{
 8007192:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007194:	f7fd ff99 	bl	80050ca <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007198:	4605      	mov	r5, r0
 800719a:	2800      	cmp	r0, #0
 800719c:	f040 80ab 	bne.w	80072f6 <f_write+0x178>
 80071a0:	f894 5031 	ldrb.w	r5, [r4, #49]	; 0x31
 80071a4:	2d00      	cmp	r5, #0
 80071a6:	f040 80a6 	bne.w	80072f6 <f_write+0x178>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80071aa:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80071ae:	079a      	lsls	r2, r3, #30
 80071b0:	f140 80d0 	bpl.w	8007354 <f_write+0x1d6>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80071b4:	9b03      	ldr	r3, [sp, #12]
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	2b04      	cmp	r3, #4
 80071ba:	d003      	beq.n	80071c4 <f_write+0x46>
 80071bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80071be:	42f3      	cmn	r3, r6
 80071c0:	d300      	bcc.n	80071c4 <f_write+0x46>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80071c2:	43de      	mvns	r6, r3
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80071c4:	f104 0350 	add.w	r3, r4, #80	; 0x50
 80071c8:	9300      	str	r3, [sp, #0]
 80071ca:	e06b      	b.n	80072a4 <f_write+0x126>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80071cc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80071ce:	e086      	b.n	80072de <f_write+0x160>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80071d0:	2801      	cmp	r0, #1
 80071d2:	d103      	bne.n	80071dc <f_write+0x5e>
 80071d4:	2502      	movs	r5, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80071d6:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31
 80071da:	e08c      	b.n	80072f6 <f_write+0x178>
 80071dc:	1c43      	adds	r3, r0, #1
 80071de:	d101      	bne.n	80071e4 <f_write+0x66>
 80071e0:	2501      	movs	r5, #1
 80071e2:	e7f8      	b.n	80071d6 <f_write+0x58>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80071e4:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 80071e6:	6420      	str	r0, [r4, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80071e8:	b903      	cbnz	r3, 80071ec <f_write+0x6e>
 80071ea:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80071ec:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	da0e      	bge.n	8007212 <f_write+0x94>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80071f4:	9803      	ldr	r0, [sp, #12]
 80071f6:	2301      	movs	r3, #1
 80071f8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80071fa:	9900      	ldr	r1, [sp, #0]
 80071fc:	7840      	ldrb	r0, [r0, #1]
 80071fe:	f7fd fe3b 	bl	8004e78 <disk_write>
 8007202:	2800      	cmp	r0, #0
 8007204:	d1ec      	bne.n	80071e0 <f_write+0x62>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007206:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800720a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800720e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8007212:	9f03      	ldr	r7, [sp, #12]
 8007214:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007216:	4638      	mov	r0, r7
 8007218:	f7fd ff0c 	bl	8005034 <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800721c:	2800      	cmp	r0, #0
 800721e:	d0d9      	beq.n	80071d4 <f_write+0x56>
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 8007220:	ea5f 2a56 	movs.w	sl, r6, lsr #9
			sect += csect;
 8007224:	eb0b 0800 	add.w	r8, fp, r0
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 8007228:	d069      	beq.n	80072fe <f_write+0x180>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800722a:	897b      	ldrh	r3, [r7, #10]
 800722c:	eb0b 020a 	add.w	r2, fp, sl
 8007230:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 8007232:	bf88      	it	hi
 8007234:	eba3 0a0b 	subhi.w	sl, r3, fp
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007238:	4653      	mov	r3, sl
 800723a:	4642      	mov	r2, r8
 800723c:	4649      	mov	r1, r9
 800723e:	7878      	ldrb	r0, [r7, #1]
 8007240:	f7fd fe1a 	bl	8004e78 <disk_write>
 8007244:	2800      	cmp	r0, #0
 8007246:	d1cb      	bne.n	80071e0 <f_write+0x62>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007248:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800724a:	eba1 0108 	sub.w	r1, r1, r8
 800724e:	4551      	cmp	r1, sl
 8007250:	d20c      	bcs.n	800726c <f_write+0xee>
 8007252:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007256:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 800725a:	9800      	ldr	r0, [sp, #0]
 800725c:	f7fd ff67 	bl	800512e <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007260:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8007264:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007268:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800726c:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
 8007270:	9b01      	ldr	r3, [sp, #4]
 8007272:	9a01      	ldr	r2, [sp, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 800727a:	4453      	add	r3, sl
 800727c:	6013      	str	r3, [r2, #0]
 800727e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8007282:	eb12 070a 	adds.w	r7, r2, sl
 8007286:	f143 0800 	adc.w	r8, r3, #0
 800728a:	4541      	cmp	r1, r8
 800728c:	bf08      	it	eq
 800728e:	42b8      	cmpeq	r0, r7
 8007290:	bf3c      	itt	cc
 8007292:	4638      	movcc	r0, r7
 8007294:	4641      	movcc	r1, r8
 8007296:	e9c4 780e 	strd	r7, r8, [r4, #56]	; 0x38
 800729a:	e9c4 0104 	strd	r0, r1, [r4, #16]
 800729e:	eba6 060a 	sub.w	r6, r6, sl
 80072a2:	44d1      	add	r9, sl
	for ( ;  btw;							/* Repeat until all data written */
 80072a4:	b30e      	cbz	r6, 80072ea <f_write+0x16c>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80072a6:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 80072aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80072ae:	2100      	movs	r1, #0
 80072b0:	4010      	ands	r0, r2
 80072b2:	4019      	ands	r1, r3
 80072b4:	4301      	orrs	r1, r0
 80072b6:	d138      	bne.n	800732a <f_write+0x1ac>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80072b8:	9903      	ldr	r1, [sp, #12]
 80072ba:	f8b1 b00a 	ldrh.w	fp, [r1, #10]
 80072be:	0a51      	lsrs	r1, r2, #9
 80072c0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80072c4:	ea41 51c3 	orr.w	r1, r1, r3, lsl #23
			if (csect == 0) {				/* On the cluster boundary? */
 80072c8:	ea1b 0b01 	ands.w	fp, fp, r1
 80072cc:	d18e      	bne.n	80071ec <f_write+0x6e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80072ce:	4313      	orrs	r3, r2
 80072d0:	f47f af7c 	bne.w	80071cc <f_write+0x4e>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80072d4:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 80072d6:	2800      	cmp	r0, #0
 80072d8:	f47f af7a 	bne.w	80071d0 <f_write+0x52>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80072dc:	4601      	mov	r1, r0
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80072de:	4620      	mov	r0, r4
 80072e0:	f7fe fd78 	bl	8005dd4 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80072e4:	2800      	cmp	r0, #0
 80072e6:	f47f af73 	bne.w	80071d0 <f_write+0x52>
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80072ea:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80072ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072f2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
}
 80072f6:	4628      	mov	r0, r5
 80072f8:	b005      	add	sp, #20
 80072fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80072fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007300:	4543      	cmp	r3, r8
 8007302:	d010      	beq.n	8007326 <f_write+0x1a8>
 8007304:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8007308:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
 800730c:	4299      	cmp	r1, r3
 800730e:	bf08      	it	eq
 8007310:	4290      	cmpeq	r0, r2
 8007312:	d208      	bcs.n	8007326 <f_write+0x1a8>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 8007314:	2301      	movs	r3, #1
 8007316:	4642      	mov	r2, r8
 8007318:	9900      	ldr	r1, [sp, #0]
 800731a:	7878      	ldrb	r0, [r7, #1]
 800731c:	f7fd fd6e 	bl	8004dfc <disk_read>
				fp->fptr < fp->obj.objsize &&
 8007320:	2800      	cmp	r0, #0
 8007322:	f47f af5d 	bne.w	80071e0 <f_write+0x62>
			fp->sect = sect;
 8007326:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 800732a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800732c:	9b00      	ldr	r3, [sp, #0]
 800732e:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8007332:	f5c0 7a00 	rsb	sl, r0, #512	; 0x200
 8007336:	45b2      	cmp	sl, r6
 8007338:	bf28      	it	cs
 800733a:	46b2      	movcs	sl, r6
 800733c:	4418      	add	r0, r3
 800733e:	4652      	mov	r2, sl
 8007340:	4649      	mov	r1, r9
 8007342:	f7fd fef4 	bl	800512e <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
 8007346:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800734a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800734e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8007352:	e78d      	b.n	8007270 <f_write+0xf2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007354:	2507      	movs	r5, #7
 8007356:	e7ce      	b.n	80072f6 <f_write+0x178>

08007358 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007358:	b570      	push	{r4, r5, r6, lr}
 800735a:	f5ad 6d97 	sub.w	sp, sp, #1208	; 0x4b8
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800735e:	a901      	add	r1, sp, #4
{
 8007360:	4605      	mov	r5, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007362:	f7fd feb2 	bl	80050ca <validate>
	if (res == FR_OK) {
 8007366:	4604      	mov	r4, r0
 8007368:	2800      	cmp	r0, #0
 800736a:	f040 8087 	bne.w	800747c <f_sync+0x124>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800736e:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8007372:	065a      	lsls	r2, r3, #25
 8007374:	f140 8082 	bpl.w	800747c <f_sync+0x124>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007378:	061b      	lsls	r3, r3, #24
 800737a:	d510      	bpl.n	800739e <f_sync+0x46>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800737c:	9801      	ldr	r0, [sp, #4]
 800737e:	2301      	movs	r3, #1
 8007380:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8007382:	f105 0150 	add.w	r1, r5, #80	; 0x50
 8007386:	7840      	ldrb	r0, [r0, #1]
 8007388:	f7fd fd76 	bl	8004e78 <disk_write>
 800738c:	2800      	cmp	r0, #0
 800738e:	f040 809a 	bne.w	80074c6 <f_sync+0x16e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007392:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8007396:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800739a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800739e:	9801      	ldr	r0, [sp, #4]
 80073a0:	7803      	ldrb	r3, [r0, #0]
 80073a2:	2b04      	cmp	r3, #4
 80073a4:	d16e      	bne.n	8007484 <f_sync+0x12c>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 80073a6:	4628      	mov	r0, r5
 80073a8:	f7fe fb02 	bl	80059b0 <fill_first_frag>
				if (res == FR_OK) {
 80073ac:	4604      	mov	r4, r0
 80073ae:	2800      	cmp	r0, #0
 80073b0:	d164      	bne.n	800747c <f_sync+0x124>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 80073b2:	f04f 32ff 	mov.w	r2, #4294967295
 80073b6:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80073b8:	4628      	mov	r0, r5
 80073ba:	f7fe fa64 	bl	8005886 <fill_last_frag>
				}
				if (res == FR_OK) {
 80073be:	4604      	mov	r4, r0
 80073c0:	2800      	cmp	r0, #0
 80073c2:	d15b      	bne.n	800747c <f_sync+0x124>
					DIR dj;
					DEF_NAMBUF

					INIT_NAMBUF(fs);
 80073c4:	9b01      	ldr	r3, [sp, #4]
 80073c6:	aa16      	add	r2, sp, #88	; 0x58
 80073c8:	60da      	str	r2, [r3, #12]
 80073ca:	aa96      	add	r2, sp, #600	; 0x258
 80073cc:	611a      	str	r2, [r3, #16]
	dp->obj.fs = obj->fs;
 80073ce:	682b      	ldr	r3, [r5, #0]
	dp->blk_ofs = obj->c_ofs;
 80073d0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
	dp->obj.fs = obj->fs;
 80073d2:	9302      	str	r3, [sp, #8]
	dp->obj.sclust = obj->c_scl;
 80073d4:	6a2b      	ldr	r3, [r5, #32]
	dp->obj.n_frag = 0;
 80073d6:	9009      	str	r0, [sp, #36]	; 0x24
	dp->obj.sclust = obj->c_scl;
 80073d8:	9304      	str	r3, [sp, #16]
	dp->obj.stat = (BYTE)obj->c_size;
 80073da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	dp->blk_ofs = obj->c_ofs;
 80073dc:	9115      	str	r1, [sp, #84]	; 0x54
	dp->obj.stat = (BYTE)obj->c_size;
 80073de:	f88d 300f 	strb.w	r3, [sp, #15]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 80073e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80073e6:	e9cd 3006 	strd	r3, r0, [sp, #24]
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 80073ea:	a802      	add	r0, sp, #8
 80073ec:	f7fe f93b 	bl	8005666 <dir_sdi>
	if (res == FR_OK) {
 80073f0:	4604      	mov	r4, r0
 80073f2:	2800      	cmp	r0, #0
 80073f4:	d142      	bne.n	800747c <f_sync+0x124>
		res = load_xdir(dp);		/* Load the object's entry block */
 80073f6:	a802      	add	r0, sp, #8
 80073f8:	f7fe febb 	bl	8006172 <load_xdir>
					res = load_obj_xdir(&dj, &fp->obj);	/* Load directory entry block */
					if (res == FR_OK) {
 80073fc:	4604      	mov	r4, r0
 80073fe:	2800      	cmp	r0, #0
 8007400:	d13c      	bne.n	800747c <f_sync+0x124>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive attribute to indicate that the file has been changed */
 8007402:	9b01      	ldr	r3, [sp, #4]
 8007404:	6919      	ldr	r1, [r3, #16]
 8007406:	790a      	ldrb	r2, [r1, #4]
 8007408:	f042 0220 	orr.w	r2, r2, #32
 800740c:	710a      	strb	r2, [r1, #4]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation information */
 800740e:	79ea      	ldrb	r2, [r5, #7]
 8007410:	6919      	ldr	r1, [r3, #16]
 8007412:	f042 0201 	orr.w	r2, r2, #1
 8007416:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);		/* Update start cluster */
 800741a:	6918      	ldr	r0, [r3, #16]
 800741c:	68a9      	ldr	r1, [r5, #8]
 800741e:	3034      	adds	r0, #52	; 0x34
 8007420:	f7fd fddd 	bl	8004fde <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);		/* Update file size */
 8007424:	9b01      	ldr	r3, [sp, #4]
 8007426:	6918      	ldr	r0, [r3, #16]
 8007428:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800742c:	3038      	adds	r0, #56	; 0x38
 800742e:	f7fd fdde 	bl	8004fee <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);	/* (FatFs does not support Valid File Size feature) */
 8007432:	9b01      	ldr	r3, [sp, #4]
 8007434:	6918      	ldr	r0, [r3, #16]
 8007436:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800743a:	3028      	adds	r0, #40	; 0x28
 800743c:	f7fd fdd7 	bl	8004fee <st_qword>
	*ptr++ = (BYTE)val; val >>= 8;
 8007440:	2121      	movs	r1, #33	; 0x21
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 8007442:	9a01      	ldr	r2, [sp, #4]
						fs->dirbuf[XDIR_ModTime10] = 0;
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
						res = store_xdir(&dj);	/* Restore it to the directory */
 8007444:	a802      	add	r0, sp, #8
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 8007446:	6913      	ldr	r3, [r2, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8007448:	7399      	strb	r1, [r3, #14]
	*ptr++ = (BYTE)val;
 800744a:	214e      	movs	r1, #78	; 0x4e
	*ptr++ = (BYTE)val; val >>= 8;
 800744c:	731c      	strb	r4, [r3, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 800744e:	735c      	strb	r4, [r3, #13]
	*ptr++ = (BYTE)val;
 8007450:	73d9      	strb	r1, [r3, #15]
						fs->dirbuf[XDIR_ModTime10] = 0;
 8007452:	6913      	ldr	r3, [r2, #16]
 8007454:	755c      	strb	r4, [r3, #21]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 8007456:	6913      	ldr	r3, [r2, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8007458:	741c      	strb	r4, [r3, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 800745a:	745c      	strb	r4, [r3, #17]
	*ptr++ = (BYTE)val; val >>= 8;
 800745c:	749c      	strb	r4, [r3, #18]
	*ptr++ = (BYTE)val;
 800745e:	74dc      	strb	r4, [r3, #19]
						res = store_xdir(&dj);	/* Restore it to the directory */
 8007460:	f7fe ff22 	bl	80062a8 <store_xdir>
						if (res == FR_OK) {
 8007464:	4604      	mov	r4, r0
 8007466:	b948      	cbnz	r0, 800747c <f_sync+0x124>
							res = sync_fs(fs);
 8007468:	9801      	ldr	r0, [sp, #4]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
					res = sync_fs(fs);					/* Restore it to the directory */
 800746a:	f7fe fda9 	bl	8005fc0 <sync_fs>
 800746e:	4604      	mov	r4, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007470:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8007474:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007478:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
			}
		}
	}

	LEAVE_FF(fs, res);
}
 800747c:	4620      	mov	r0, r4
 800747e:	f50d 6d97 	add.w	sp, sp, #1208	; 0x4b8
 8007482:	bd70      	pop	{r4, r5, r6, pc}
				res = move_window(fs, fp->dir_sect);
 8007484:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8007486:	f7fd fff8 	bl	800547a <move_window>
				if (res == FR_OK) {
 800748a:	4604      	mov	r4, r0
 800748c:	2800      	cmp	r0, #0
 800748e:	d1f5      	bne.n	800747c <f_sync+0x124>
					dir = fp->dir_ptr;
 8007490:	6cee      	ldr	r6, [r5, #76]	; 0x4c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 8007492:	7af3      	ldrb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 8007494:	4631      	mov	r1, r6
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 8007496:	f043 0320 	orr.w	r3, r3, #32
 800749a:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 800749c:	68aa      	ldr	r2, [r5, #8]
 800749e:	6828      	ldr	r0, [r5, #0]
 80074a0:	f7fd ffaa 	bl	80053f8 <st_clust.isra.5>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80074a4:	f106 001c 	add.w	r0, r6, #28
 80074a8:	6929      	ldr	r1, [r5, #16]
 80074aa:	f7fd fd98 	bl	8004fde <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 80074ae:	2321      	movs	r3, #33	; 0x21
 80074b0:	7633      	strb	r3, [r6, #24]
	*ptr++ = (BYTE)val;
 80074b2:	234e      	movs	r3, #78	; 0x4e
 80074b4:	7673      	strb	r3, [r6, #25]
					fs->wflag = 1;
 80074b6:	2301      	movs	r3, #1
 80074b8:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 80074ba:	75b4      	strb	r4, [r6, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 80074bc:	75f4      	strb	r4, [r6, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 80074be:	74b4      	strb	r4, [r6, #18]
	*ptr++ = (BYTE)val;
 80074c0:	74f4      	strb	r4, [r6, #19]
					fs->wflag = 1;
 80074c2:	70c3      	strb	r3, [r0, #3]
 80074c4:	e7d1      	b.n	800746a <f_sync+0x112>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80074c6:	2401      	movs	r4, #1
 80074c8:	e7d8      	b.n	800747c <f_sync+0x124>

080074ca <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80074ca:	b513      	push	{r0, r1, r4, lr}
 80074cc:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80074ce:	f7ff ff43 	bl	8007358 <f_sync>
	if (res == FR_OK)
 80074d2:	b928      	cbnz	r0, 80074e0 <f_close+0x16>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80074d4:	a901      	add	r1, sp, #4
 80074d6:	4620      	mov	r0, r4
 80074d8:	f7fd fdf7 	bl	80050ca <validate>
		if (res == FR_OK) {
 80074dc:	b900      	cbnz	r0, 80074e0 <f_close+0x16>
#if FF_FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 80074de:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 80074e0:	b002      	add	sp, #8
 80074e2:	bd10      	pop	{r4, pc}

080074e4 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80074e4:	b510      	push	{r4, lr}
 80074e6:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 80074ea:	9101      	str	r1, [sp, #4]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80074ec:	4604      	mov	r4, r0
 80074ee:	2800      	cmp	r0, #0
 80074f0:	d041      	beq.n	8007576 <f_opendir+0x92>

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
 80074f2:	2200      	movs	r2, #0
 80074f4:	a903      	add	r1, sp, #12
 80074f6:	a801      	add	r0, sp, #4
 80074f8:	f7fe fa72 	bl	80059e0 <mount_volume>
	if (res == FR_OK) {
 80074fc:	b998      	cbnz	r0, 8007526 <f_opendir+0x42>
		dp->obj.fs = fs;
 80074fe:	9b03      	ldr	r3, [sp, #12]
		INIT_NAMBUF(fs);
 8007500:	aa04      	add	r2, sp, #16
		dp->obj.fs = fs;
 8007502:	6023      	str	r3, [r4, #0]
		INIT_NAMBUF(fs);
 8007504:	60da      	str	r2, [r3, #12]
 8007506:	aa84      	add	r2, sp, #528	; 0x210
 8007508:	611a      	str	r2, [r3, #16]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800750a:	9901      	ldr	r1, [sp, #4]
 800750c:	4620      	mov	r0, r4
 800750e:	f7ff fa41 	bl	8006994 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 8007512:	2800      	cmp	r0, #0
 8007514:	d131      	bne.n	800757a <f_opendir+0x96>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8007516:	f994 304b 	ldrsb.w	r3, [r4, #75]	; 0x4b
 800751a:	2b00      	cmp	r3, #0
 800751c:	db18      	blt.n	8007550 <f_opendir+0x6c>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
 800751e:	79a3      	ldrb	r3, [r4, #6]
 8007520:	06db      	lsls	r3, r3, #27
 8007522:	d403      	bmi.n	800752c <f_opendir+0x48>
#endif
					{
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8007524:	2005      	movs	r0, #5
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
 8007526:	2300      	movs	r3, #0
 8007528:	6023      	str	r3, [r4, #0]
 800752a:	e01c      	b.n	8007566 <f_opendir+0x82>
					if (fs->fs_type == FS_EXFAT) {
 800752c:	9a03      	ldr	r2, [sp, #12]
 800752e:	7810      	ldrb	r0, [r2, #0]
 8007530:	2804      	cmp	r0, #4
 8007532:	d11b      	bne.n	800756c <f_opendir+0x88>
						dp->obj.c_scl = dp->obj.sclust;							/* Get containing directory inforamation */
 8007534:	68a3      	ldr	r3, [r4, #8]
						dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 8007536:	79e1      	ldrb	r1, [r4, #7]
						dp->obj.c_scl = dp->obj.sclust;							/* Get containing directory inforamation */
 8007538:	6223      	str	r3, [r4, #32]
						dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 800753a:	6923      	ldr	r3, [r4, #16]
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
 800753c:	6910      	ldr	r0, [r2, #16]
						dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 800753e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007542:	430b      	orrs	r3, r1
 8007544:	6263      	str	r3, [r4, #36]	; 0x24
						dp->obj.c_ofs = dp->blk_ofs;
 8007546:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
 8007548:	4621      	mov	r1, r4
						dp->obj.c_ofs = dp->blk_ofs;
 800754a:	62a3      	str	r3, [r4, #40]	; 0x28
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
 800754c:	f7fd ff60 	bl	8005410 <init_alloc_info.isra.6>
				dp->obj.id = fs->id;
 8007550:	9b03      	ldr	r3, [sp, #12]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8007552:	2100      	movs	r1, #0
				dp->obj.id = fs->id;
 8007554:	88db      	ldrh	r3, [r3, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8007556:	4620      	mov	r0, r4
				dp->obj.id = fs->id;
 8007558:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800755a:	f7fe f884 	bl	8005666 <dir_sdi>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800755e:	2804      	cmp	r0, #4
 8007560:	d0e0      	beq.n	8007524 <f_opendir+0x40>
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
 8007562:	2800      	cmp	r0, #0
 8007564:	d1df      	bne.n	8007526 <f_opendir+0x42>

	LEAVE_FF(fs, res);
}
 8007566:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 800756a:	bd10      	pop	{r4, pc}
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800756c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800756e:	f7fd ff35 	bl	80053dc <ld_clust.isra.4>
 8007572:	60a0      	str	r0, [r4, #8]
 8007574:	e7ec      	b.n	8007550 <f_opendir+0x6c>
	if (!dp) return FR_INVALID_OBJECT;
 8007576:	2009      	movs	r0, #9
 8007578:	e7f5      	b.n	8007566 <f_opendir+0x82>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800757a:	2804      	cmp	r0, #4
 800757c:	d0d2      	beq.n	8007524 <f_opendir+0x40>
 800757e:	e7d2      	b.n	8007526 <f_opendir+0x42>

08007580 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8007580:	b513      	push	{r0, r1, r4, lr}
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
 8007582:	a901      	add	r1, sp, #4
{
 8007584:	4604      	mov	r4, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
 8007586:	f7fd fda0 	bl	80050ca <validate>
	if (res == FR_OK) {
 800758a:	b900      	cbnz	r0, 800758e <f_closedir+0xe>
#if FF_FS_LOCK != 0
		if (dp->obj.lockid) res = dec_lock(dp->obj.lockid);	/* Decrement sub-directory open counter */
		if (res == FR_OK) dp->obj.fs = 0;	/* Invalidate directory object */
#else
		dp->obj.fs = 0;	/* Invalidate directory object */
 800758c:	6020      	str	r0, [r4, #0]
#if FF_FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
 800758e:	b002      	add	sp, #8
 8007590:	bd10      	pop	{r4, pc}

08007592 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8007592:	b570      	push	{r4, r5, r6, lr}
 8007594:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 8007598:	460d      	mov	r5, r1
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800759a:	a901      	add	r1, sp, #4
{
 800759c:	4604      	mov	r4, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800759e:	f7fd fd94 	bl	80050ca <validate>
	if (res == FR_OK) {
 80075a2:	b920      	cbnz	r0, 80075ae <f_readdir+0x1c>
		if (!fno) {
 80075a4:	b935      	cbnz	r5, 80075b4 <f_readdir+0x22>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80075a6:	4601      	mov	r1, r0
 80075a8:	4620      	mov	r0, r4
 80075aa:	f7fe f85c 	bl	8005666 <dir_sdi>
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
 80075ae:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 80075b2:	bd70      	pop	{r4, r5, r6, pc}
			INIT_NAMBUF(fs);
 80075b4:	9b01      	ldr	r3, [sp, #4]
 80075b6:	aa02      	add	r2, sp, #8
 80075b8:	60da      	str	r2, [r3, #12]
 80075ba:	aa82      	add	r2, sp, #520	; 0x208
 80075bc:	611a      	str	r2, [r3, #16]
			res = DIR_READ_FILE(dp);		/* Read an item */
 80075be:	4620      	mov	r0, r4
 80075c0:	f7fe fea6 	bl	8006310 <dir_read.constprop.15>
			if (res == FR_OK) {				/* A valid entry is found */
 80075c4:	f010 06fb 	ands.w	r6, r0, #251	; 0xfb
 80075c8:	d1f1      	bne.n	80075ae <f_readdir+0x1c>
				get_fileinfo(dp, fno);		/* Get the object information */
 80075ca:	4629      	mov	r1, r5
 80075cc:	4620      	mov	r0, r4
 80075ce:	f7fd fe12 	bl	80051f6 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80075d2:	4631      	mov	r1, r6
 80075d4:	4620      	mov	r0, r4
 80075d6:	f7fe fd6e 	bl	80060b6 <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80075da:	2804      	cmp	r0, #4
 80075dc:	bf08      	it	eq
 80075de:	2000      	moveq	r0, #0
 80075e0:	e7e5      	b.n	80075ae <f_readdir+0x1c>

080075e2 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding filesystem object */
)
{
 80075e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80075e6:	b091      	sub	sp, #68	; 0x44
 80075e8:	9001      	str	r0, [sp, #4]
 80075ea:	4688      	mov	r8, r1
 80075ec:	4614      	mov	r4, r2
	UINT i;
	FFOBJID obj;


	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
 80075ee:	a903      	add	r1, sp, #12
 80075f0:	2200      	movs	r2, #0
 80075f2:	a801      	add	r0, sp, #4
 80075f4:	f7fe f9f4 	bl	80059e0 <mount_volume>
	if (res == FR_OK) {
 80075f8:	4605      	mov	r5, r0
 80075fa:	b940      	cbnz	r0, 800760e <f_getfree+0x2c>
		*fatfs = fs;				/* Return ptr to the fs object */
 80075fc:	9b03      	ldr	r3, [sp, #12]
		/* If free_clst is valid, return it without full FAT scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80075fe:	e9d3 2706 	ldrd	r2, r7, [r3, #24]
 8007602:	1ebe      	subs	r6, r7, #2
 8007604:	42b2      	cmp	r2, r6
		*fatfs = fs;				/* Return ptr to the fs object */
 8007606:	6023      	str	r3, [r4, #0]
		if (fs->free_clst <= fs->n_fatent - 2) {
 8007608:	d805      	bhi.n	8007616 <f_getfree+0x34>
			*nclst = fs->free_clst;
 800760a:	f8c8 2000 	str.w	r2, [r8]
			fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
		}
	}

	LEAVE_FF(fs, res);
}
 800760e:	4628      	mov	r0, r5
 8007610:	b011      	add	sp, #68	; 0x44
 8007612:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
 8007616:	781a      	ldrb	r2, [r3, #0]
 8007618:	2a01      	cmp	r2, #1
 800761a:	d11c      	bne.n	8007656 <f_getfree+0x74>
				clst = 2; obj.fs = fs;
 800761c:	2602      	movs	r6, #2
			nfree = 0;
 800761e:	4604      	mov	r4, r0
				clst = 2; obj.fs = fs;
 8007620:	af10      	add	r7, sp, #64	; 0x40
 8007622:	f847 3d30 	str.w	r3, [r7, #-48]!
					stat = get_fat(&obj, clst);
 8007626:	4631      	mov	r1, r6
 8007628:	4638      	mov	r0, r7
 800762a:	f7fd ff82 	bl	8005532 <get_fat>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800762e:	1c43      	adds	r3, r0, #1
 8007630:	d05b      	beq.n	80076ea <f_getfree+0x108>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8007632:	2801      	cmp	r0, #1
 8007634:	d05b      	beq.n	80076ee <f_getfree+0x10c>
					if (stat == 0) nfree++;
 8007636:	b900      	cbnz	r0, 800763a <f_getfree+0x58>
 8007638:	3401      	adds	r4, #1
				} while (++clst < fs->n_fatent);
 800763a:	9b03      	ldr	r3, [sp, #12]
 800763c:	3601      	adds	r6, #1
 800763e:	69db      	ldr	r3, [r3, #28]
 8007640:	42b3      	cmp	r3, r6
 8007642:	d8f0      	bhi.n	8007626 <f_getfree+0x44>
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8007644:	9b03      	ldr	r3, [sp, #12]
			*nclst = nfree;			/* Return the free clusters */
 8007646:	f8c8 4000 	str.w	r4, [r8]
			fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
 800764a:	791a      	ldrb	r2, [r3, #4]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800764c:	619c      	str	r4, [r3, #24]
			fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
 800764e:	f042 0201 	orr.w	r2, r2, #1
 8007652:	711a      	strb	r2, [r3, #4]
 8007654:	e7db      	b.n	800760e <f_getfree+0x2c>
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan allocation bitmap */
 8007656:	2a04      	cmp	r2, #4
 8007658:	d121      	bne.n	800769e <f_getfree+0xbc>
					i = 0;						/* Offset in the sector */
 800765a:	4607      	mov	r7, r0
			nfree = 0;
 800765c:	4604      	mov	r4, r0
					sect = fs->bitbase;			/* Bitmap sector */
 800765e:	6b59      	ldr	r1, [r3, #52]	; 0x34
						if (i == 0) {
 8007660:	b93f      	cbnz	r7, 8007672 <f_getfree+0x90>
							res = move_window(fs, sect++);
 8007662:	9803      	ldr	r0, [sp, #12]
 8007664:	f101 0901 	add.w	r9, r1, #1
 8007668:	f7fd ff07 	bl	800547a <move_window>
							if (res != FR_OK) break;
 800766c:	2800      	cmp	r0, #0
 800766e:	d140      	bne.n	80076f2 <f_getfree+0x110>
							res = move_window(fs, sect++);
 8007670:	4649      	mov	r1, r9
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 8007672:	9b03      	ldr	r3, [sp, #12]
 8007674:	f1a6 0208 	sub.w	r2, r6, #8
 8007678:	443b      	add	r3, r7
 800767a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800767e:	b146      	cbz	r6, 8007692 <f_getfree+0xb0>
							if (!(bm & 1)) nfree++;
 8007680:	07d8      	lsls	r0, r3, #31
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 8007682:	f106 36ff 	add.w	r6, r6, #4294967295
							if (!(bm & 1)) nfree++;
 8007686:	bf58      	it	pl
 8007688:	3401      	addpl	r4, #1
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800768a:	4296      	cmp	r6, r2
							bm >>= 1;
 800768c:	ea4f 0353 	mov.w	r3, r3, lsr #1
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 8007690:	d1f5      	bne.n	800767e <f_getfree+0x9c>
						i = (i + 1) % SS(fs);
 8007692:	3701      	adds	r7, #1
 8007694:	f3c7 0708 	ubfx	r7, r7, #0, #9
					} while (clst);
 8007698:	2e00      	cmp	r6, #0
 800769a:	d1e1      	bne.n	8007660 <f_getfree+0x7e>
 800769c:	e7d2      	b.n	8007644 <f_getfree+0x62>
					i = 0;					/* Offset in the sector */
 800769e:	4606      	mov	r6, r0
			nfree = 0;
 80076a0:	4604      	mov	r4, r0
					sect = fs->fatbase;		/* Top of the FAT */
 80076a2:	6a99      	ldr	r1, [r3, #40]	; 0x28
						if (i == 0) {
 80076a4:	b936      	cbnz	r6, 80076b4 <f_getfree+0xd2>
							res = move_window(fs, sect++);
 80076a6:	9803      	ldr	r0, [sp, #12]
 80076a8:	f101 0901 	add.w	r9, r1, #1
 80076ac:	f7fd fee5 	bl	800547a <move_window>
							if (res != FR_OK) break;
 80076b0:	b9f8      	cbnz	r0, 80076f2 <f_getfree+0x110>
							res = move_window(fs, sect++);
 80076b2:	4649      	mov	r1, r9
						if (fs->fs_type == FS_FAT16) {
 80076b4:	9a03      	ldr	r2, [sp, #12]
 80076b6:	f102 033c 	add.w	r3, r2, #60	; 0x3c
 80076ba:	7812      	ldrb	r2, [r2, #0]
 80076bc:	1998      	adds	r0, r3, r6
 80076be:	2a02      	cmp	r2, #2
 80076c0:	d10b      	bne.n	80076da <f_getfree+0xf8>
	rv = rv << 8 | ptr[0];
 80076c2:	5d9b      	ldrb	r3, [r3, r6]
 80076c4:	7842      	ldrb	r2, [r0, #1]
							i += 2;
 80076c6:	3602      	adds	r6, #2
							if (ld_word(fs->win + i) == 0) nfree++;
 80076c8:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 80076cc:	bf08      	it	eq
 80076ce:	3401      	addeq	r4, #1
					} while (--clst);
 80076d0:	3f01      	subs	r7, #1
						i %= SS(fs);
 80076d2:	f3c6 0608 	ubfx	r6, r6, #0, #9
					} while (--clst);
 80076d6:	d1e5      	bne.n	80076a4 <f_getfree+0xc2>
 80076d8:	e7b4      	b.n	8007644 <f_getfree+0x62>
							if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0) nfree++;
 80076da:	f7fd fc47 	bl	8004f6c <ld_dword>
 80076de:	f030 4370 	bics.w	r3, r0, #4026531840	; 0xf0000000
 80076e2:	bf08      	it	eq
 80076e4:	3401      	addeq	r4, #1
							i += 4;
 80076e6:	3604      	adds	r6, #4
 80076e8:	e7f2      	b.n	80076d0 <f_getfree+0xee>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80076ea:	2501      	movs	r5, #1
 80076ec:	e7aa      	b.n	8007644 <f_getfree+0x62>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80076ee:	2502      	movs	r5, #2
 80076f0:	e7a8      	b.n	8007644 <f_getfree+0x62>
							res = move_window(fs, sect++);
 80076f2:	4605      	mov	r5, r0
 80076f4:	e7a6      	b.n	8007644 <f_getfree+0x62>
	...

080076f8 <ff_uni2oem>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
 80076f8:	287f      	cmp	r0, #127	; 0x7f
{
 80076fa:	b510      	push	{r4, lr}
	if (uni < 0x80) {	/* ASCII? */
 80076fc:	d801      	bhi.n	8007702 <ff_uni2oem+0xa>
		c = (WCHAR)uni;
 80076fe:	b280      	uxth	r0, r0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
 8007700:	bd10      	pop	{r4, pc}
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
 8007702:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8007706:	d203      	bcs.n	8007710 <ff_uni2oem+0x18>
 8007708:	f240 3362 	movw	r3, #866	; 0x362
 800770c:	4299      	cmp	r1, r3
 800770e:	d006      	beq.n	800771e <ff_uni2oem+0x26>
	WCHAR c = 0;
 8007710:	2000      	movs	r0, #0
 8007712:	e7f5      	b.n	8007700 <ff_uni2oem+0x8>
 8007714:	3201      	adds	r2, #1
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
 8007716:	2a80      	cmp	r2, #128	; 0x80
 8007718:	d103      	bne.n	8007722 <ff_uni2oem+0x2a>
 800771a:	4613      	mov	r3, r2
 800771c:	e006      	b.n	800772c <ff_uni2oem+0x34>
 800771e:	2200      	movs	r2, #0
 8007720:	4c04      	ldr	r4, [pc, #16]	; (8007734 <ff_uni2oem+0x3c>)
 8007722:	f834 1012 	ldrh.w	r1, [r4, r2, lsl #1]
 8007726:	b293      	uxth	r3, r2
 8007728:	4281      	cmp	r1, r0
 800772a:	d1f3      	bne.n	8007714 <ff_uni2oem+0x1c>
			c = (c + 0x80) & 0xFF;
 800772c:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8007730:	b2c0      	uxtb	r0, r0
 8007732:	e7e5      	b.n	8007700 <ff_uni2oem+0x8>
 8007734:	0800c9d0 	.word	0x0800c9d0

08007738 <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII? */
 8007738:	287f      	cmp	r0, #127	; 0x7f
 800773a:	d90d      	bls.n	8007758 <ff_oem2uni+0x20>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
 800773c:	f240 3362 	movw	r3, #866	; 0x362
 8007740:	4299      	cmp	r1, r3
 8007742:	d108      	bne.n	8007756 <ff_oem2uni+0x1e>
			if (oem < 0x100) c = p[oem - 0x80];
 8007744:	28ff      	cmp	r0, #255	; 0xff
 8007746:	d806      	bhi.n	8007756 <ff_oem2uni+0x1e>
 8007748:	4b04      	ldr	r3, [pc, #16]	; (800775c <ff_oem2uni+0x24>)
 800774a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800774e:	3880      	subs	r0, #128	; 0x80
 8007750:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8007754:	4770      	bx	lr
	WCHAR c = 0;
 8007756:	2000      	movs	r0, #0
		}
	}

	return c;
}
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	0800c9d0 	.word	0x0800c9d0

08007760 <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
 8007760:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
{
 8007764:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (uni < 0x10000) {	/* Is it in BMP? */
 8007766:	d221      	bcs.n	80077ac <ff_wtoupper+0x4c>
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
 8007768:	4a1e      	ldr	r2, [pc, #120]	; (80077e4 <ff_wtoupper+0x84>)
 800776a:	491f      	ldr	r1, [pc, #124]	; (80077e8 <ff_wtoupper+0x88>)
		uc = (WORD)uni;
 800776c:	b283      	uxth	r3, r0
		p = uc < 0x1000 ? cvt1 : cvt2;
 800776e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8007772:	bf28      	it	cs
 8007774:	460a      	movcs	r2, r1
 8007776:	1d14      	adds	r4, r2, #4
		for (;;) {
			bc = *p++;								/* Get the block base */
 8007778:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 800777c:	4621      	mov	r1, r4
			if (bc == 0 || uc < bc) break;			/* Not matched? */
 800777e:	b1a2      	cbz	r2, 80077aa <ff_wtoupper+0x4a>
 8007780:	4293      	cmp	r3, r2
 8007782:	d312      	bcc.n	80077aa <ff_wtoupper+0x4a>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007784:	f834 5c02 	ldrh.w	r5, [r4, #-2]
 8007788:	0a2e      	lsrs	r6, r5, #8
 800778a:	b2ed      	uxtb	r5, r5
			if (uc < bc + nc) {	/* In the block? */
 800778c:	18af      	adds	r7, r5, r2
 800778e:	42b8      	cmp	r0, r7
 8007790:	da22      	bge.n	80077d8 <ff_wtoupper+0x78>
				switch (cmd) {
 8007792:	2e08      	cmp	r6, #8
 8007794:	d809      	bhi.n	80077aa <ff_wtoupper+0x4a>
 8007796:	e8df f006 	tbb	[pc, r6]
 800779a:	0a05      	.short	0x0a05
 800779c:	16141210 	.word	0x16141210
 80077a0:	1a18      	.short	0x1a18
 80077a2:	1c          	.byte	0x1c
 80077a3:	00          	.byte	0x00
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
 80077a4:	1a80      	subs	r0, r0, r2
 80077a6:	f834 3010 	ldrh.w	r3, [r4, r0, lsl #1]
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
		}
		uni = uc;
 80077aa:	4618      	mov	r0, r3
	}

	return uni;
}
 80077ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
 80077ae:	1a98      	subs	r0, r3, r2
 80077b0:	f000 0001 	and.w	r0, r0, #1
 80077b4:	1a1b      	subs	r3, r3, r0
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	e7f7      	b.n	80077aa <ff_wtoupper+0x4a>
				case 2: uc -= 16; break;			/* Shift -16 */
 80077ba:	3b10      	subs	r3, #16
 80077bc:	e7fb      	b.n	80077b6 <ff_wtoupper+0x56>
				case 3:	uc -= 32; break;			/* Shift -32 */
 80077be:	3b20      	subs	r3, #32
 80077c0:	e7f9      	b.n	80077b6 <ff_wtoupper+0x56>
				case 4:	uc -= 48; break;			/* Shift -48 */
 80077c2:	3b30      	subs	r3, #48	; 0x30
 80077c4:	e7f7      	b.n	80077b6 <ff_wtoupper+0x56>
				case 5:	uc -= 26; break;			/* Shift -26 */
 80077c6:	3b1a      	subs	r3, #26
 80077c8:	e7f5      	b.n	80077b6 <ff_wtoupper+0x56>
				case 6:	uc += 8; break;				/* Shift +8 */
 80077ca:	3308      	adds	r3, #8
 80077cc:	e7f3      	b.n	80077b6 <ff_wtoupper+0x56>
				case 7: uc -= 80; break;			/* Shift -80 */
 80077ce:	3b50      	subs	r3, #80	; 0x50
 80077d0:	e7f1      	b.n	80077b6 <ff_wtoupper+0x56>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
 80077d2:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80077d6:	e7ee      	b.n	80077b6 <ff_wtoupper+0x56>
 80077d8:	3404      	adds	r4, #4
			if (cmd == 0) p += nc;	/* Skip table if needed */
 80077da:	2e00      	cmp	r6, #0
 80077dc:	d1cc      	bne.n	8007778 <ff_wtoupper+0x18>
 80077de:	eb01 0245 	add.w	r2, r1, r5, lsl #1
 80077e2:	e7c8      	b.n	8007776 <ff_wtoupper+0x16>
 80077e4:	0800c722 	.word	0x0800c722
 80077e8:	0800c914 	.word	0x0800c914

080077ec <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077ec:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80077f0:	b113      	cbz	r3, 80077f8 <osKernelInitialize+0xc>
    stat = osErrorISR;
 80077f2:	f06f 0005 	mvn.w	r0, #5
 80077f6:	4770      	bx	lr
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077f8:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d1f8      	bne.n	80077f2 <osKernelInitialize+0x6>
 8007800:	4b07      	ldr	r3, [pc, #28]	; (8007820 <osKernelInitialize+0x34>)
 8007802:	6818      	ldr	r0, [r3, #0]
 8007804:	2802      	cmp	r0, #2
 8007806:	d106      	bne.n	8007816 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007808:	f3ef 8311 	mrs	r3, BASEPRI
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1f0      	bne.n	80077f2 <osKernelInitialize+0x6>
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
      stat = osOK;
    } else {
      stat = osError;
 8007810:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8007814:	4770      	bx	lr
    if (KernelState == osKernelInactive) {
 8007816:	2800      	cmp	r0, #0
 8007818:	d1fa      	bne.n	8007810 <osKernelInitialize+0x24>
      KernelState = osKernelReady;
 800781a:	2201      	movs	r2, #1
 800781c:	601a      	str	r2, [r3, #0]
 800781e:	4770      	bx	lr
 8007820:	200008f8 	.word	0x200008f8

08007824 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007824:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007826:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800782a:	b113      	cbz	r3, 8007832 <osKernelStart+0xe>
    stat = osErrorISR;
 800782c:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 8007830:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007832:	f3ef 8410 	mrs	r4, PRIMASK
  if (IS_IRQ()) {
 8007836:	2c00      	cmp	r4, #0
 8007838:	d1f8      	bne.n	800782c <osKernelStart+0x8>
 800783a:	4b09      	ldr	r3, [pc, #36]	; (8007860 <osKernelStart+0x3c>)
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	2a02      	cmp	r2, #2
 8007840:	d106      	bne.n	8007850 <osKernelStart+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007842:	f3ef 8311 	mrs	r3, BASEPRI
 8007846:	2b00      	cmp	r3, #0
 8007848:	d1f0      	bne.n	800782c <osKernelStart+0x8>
      stat = osError;
 800784a:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800784e:	e7ef      	b.n	8007830 <osKernelStart+0xc>
    if (KernelState == osKernelReady) {
 8007850:	2a01      	cmp	r2, #1
 8007852:	d1fa      	bne.n	800784a <osKernelStart+0x26>
      KernelState = osKernelRunning;
 8007854:	2202      	movs	r2, #2
 8007856:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8007858:	f001 f812 	bl	8008880 <vTaskStartScheduler>
      stat = osOK;
 800785c:	4620      	mov	r0, r4
 800785e:	e7e7      	b.n	8007830 <osKernelStart+0xc>
 8007860:	200008f8 	.word	0x200008f8

08007864 <osKernelGetTickCount>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007864:	f3ef 8305 	mrs	r3, IPSR
}

uint32_t osKernelGetTickCount (void) {
  TickType_t ticks;

  if (IS_IRQ()) {
 8007868:	b10b      	cbz	r3, 800786e <osKernelGetTickCount+0xa>
    ticks = xTaskGetTickCountFromISR();
 800786a:	f001 b859 	b.w	8008920 <xTaskGetTickCountFromISR>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800786e:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8007872:	2b00      	cmp	r3, #0
 8007874:	d1f9      	bne.n	800786a <osKernelGetTickCount+0x6>
 8007876:	4b05      	ldr	r3, [pc, #20]	; (800788c <osKernelGetTickCount+0x28>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2b02      	cmp	r3, #2
 800787c:	d103      	bne.n	8007886 <osKernelGetTickCount+0x22>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800787e:	f3ef 8311 	mrs	r3, BASEPRI
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1f1      	bne.n	800786a <osKernelGetTickCount+0x6>
  } else {
    ticks = xTaskGetTickCount();
 8007886:	f001 b845 	b.w	8008914 <xTaskGetTickCount>
 800788a:	bf00      	nop
 800788c:	200008f8 	.word	0x200008f8

08007890 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007890:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007892:	460b      	mov	r3, r1
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007894:	2100      	movs	r1, #0
 8007896:	9103      	str	r1, [sp, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007898:	f3ef 8105 	mrs	r1, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800789c:	bb29      	cbnz	r1, 80078ea <osThreadNew+0x5a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800789e:	f3ef 8110 	mrs	r1, PRIMASK
 80078a2:	bb11      	cbnz	r1, 80078ea <osThreadNew+0x5a>
 80078a4:	491c      	ldr	r1, [pc, #112]	; (8007918 <osThreadNew+0x88>)
 80078a6:	6809      	ldr	r1, [r1, #0]
 80078a8:	2902      	cmp	r1, #2
 80078aa:	d102      	bne.n	80078b2 <osThreadNew+0x22>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80078ac:	f3ef 8111 	mrs	r1, BASEPRI
 80078b0:	b9d9      	cbnz	r1, 80078ea <osThreadNew+0x5a>
 80078b2:	b1d0      	cbz	r0, 80078ea <osThreadNew+0x5a>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 80078b4:	2100      	movs	r1, #0
 80078b6:	f88d 100b 	strb.w	r1, [sp, #11]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 80078ba:	b1da      	cbz	r2, 80078f4 <osThreadNew+0x64>
      if (attr->name != NULL) {
 80078bc:	6811      	ldr	r1, [r2, #0]
 80078be:	b909      	cbnz	r1, 80078c4 <osThreadNew+0x34>
    name  = &empty;
 80078c0:	f10d 010b 	add.w	r1, sp, #11
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80078c4:	6995      	ldr	r5, [r2, #24]
 80078c6:	2d00      	cmp	r5, #0
 80078c8:	bf08      	it	eq
 80078ca:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80078cc:	1e6c      	subs	r4, r5, #1
 80078ce:	2c37      	cmp	r4, #55	; 0x37
 80078d0:	d81f      	bhi.n	8007912 <osThreadNew+0x82>
 80078d2:	6854      	ldr	r4, [r2, #4]
 80078d4:	07e4      	lsls	r4, r4, #31
 80078d6:	d41c      	bmi.n	8007912 <osThreadNew+0x82>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 80078d8:	6954      	ldr	r4, [r2, #20]
 80078da:	b14c      	cbz	r4, 80078f0 <osThreadNew+0x60>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80078dc:	08a4      	lsrs	r4, r4, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80078de:	6896      	ldr	r6, [r2, #8]
 80078e0:	b91e      	cbnz	r6, 80078ea <osThreadNew+0x5a>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80078e2:	68d6      	ldr	r6, [r2, #12]
 80078e4:	b90e      	cbnz	r6, 80078ea <osThreadNew+0x5a>
    if (mem == 1) {
     // hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
    //                                                                                (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
 80078e6:	6912      	ldr	r2, [r2, #16]
 80078e8:	b142      	cbz	r2, 80078fc <osThreadNew+0x6c>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80078ea:	9803      	ldr	r0, [sp, #12]
}
 80078ec:	b004      	add	sp, #16
 80078ee:	bd70      	pop	{r4, r5, r6, pc}
    stack = configMINIMAL_STACK_SIZE;
 80078f0:	2440      	movs	r4, #64	; 0x40
 80078f2:	e7f4      	b.n	80078de <osThreadNew+0x4e>
    prio  = (UBaseType_t)osPriorityNormal;
 80078f4:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 80078f6:	2440      	movs	r4, #64	; 0x40
    name  = &empty;
 80078f8:	f10d 010b 	add.w	r1, sp, #11
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80078fc:	aa03      	add	r2, sp, #12
 80078fe:	e9cd 5200 	strd	r5, r2, [sp]
 8007902:	b2a2      	uxth	r2, r4
 8007904:	f000 fee2 	bl	80086cc <xTaskCreate>
 8007908:	2801      	cmp	r0, #1
          hTask = NULL;
 800790a:	bf1c      	itt	ne
 800790c:	2300      	movne	r3, #0
 800790e:	9303      	strne	r3, [sp, #12]
 8007910:	e7eb      	b.n	80078ea <osThreadNew+0x5a>
        return (NULL);
 8007912:	2000      	movs	r0, #0
 8007914:	e7ea      	b.n	80078ec <osThreadNew+0x5c>
 8007916:	bf00      	nop
 8007918:	200008f8 	.word	0x200008f8

0800791c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800791c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800791e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8007922:	b113      	cbz	r3, 800792a <osDelay+0xe>
    stat = osErrorISR;
 8007924:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8007928:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800792a:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800792e:	2b00      	cmp	r3, #0
 8007930:	d1f8      	bne.n	8007924 <osDelay+0x8>
 8007932:	4b07      	ldr	r3, [pc, #28]	; (8007950 <osDelay+0x34>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2b02      	cmp	r3, #2
 8007938:	d103      	bne.n	8007942 <osDelay+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800793a:	f3ef 8311 	mrs	r3, BASEPRI
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1f0      	bne.n	8007924 <osDelay+0x8>
    if (ticks != 0U) {
 8007942:	2800      	cmp	r0, #0
 8007944:	d0f0      	beq.n	8007928 <osDelay+0xc>
      vTaskDelay(ticks);
 8007946:	f001 f8f7 	bl	8008b38 <vTaskDelay>
    stat = osOK;
 800794a:	2000      	movs	r0, #0
 800794c:	e7ec      	b.n	8007928 <osDelay+0xc>
 800794e:	bf00      	nop
 8007950:	200008f8 	.word	0x200008f8

08007954 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007954:	b570      	push	{r4, r5, r6, lr}
 8007956:	460e      	mov	r6, r1
 8007958:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800795a:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800795e:	b113      	cbz	r3, 8007966 <osSemaphoreNew+0x12>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 8007960:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8007962:	4628      	mov	r0, r5
 8007964:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007966:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800796a:	2b00      	cmp	r3, #0
 800796c:	d1f8      	bne.n	8007960 <osSemaphoreNew+0xc>
 800796e:	4b1b      	ldr	r3, [pc, #108]	; (80079dc <osSemaphoreNew+0x88>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	2b02      	cmp	r3, #2
 8007974:	d103      	bne.n	800797e <osSemaphoreNew+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007976:	f3ef 8311 	mrs	r3, BASEPRI
 800797a:	2b00      	cmp	r3, #0
 800797c:	d1f0      	bne.n	8007960 <osSemaphoreNew+0xc>
 800797e:	2800      	cmp	r0, #0
 8007980:	d0ee      	beq.n	8007960 <osSemaphoreNew+0xc>
 8007982:	42b0      	cmp	r0, r6
 8007984:	d3ec      	bcc.n	8007960 <osSemaphoreNew+0xc>
    if (attr != NULL) {
 8007986:	b12c      	cbz	r4, 8007994 <osSemaphoreNew+0x40>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007988:	68a3      	ldr	r3, [r4, #8]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1e8      	bne.n	8007960 <osSemaphoreNew+0xc>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800798e:	68e3      	ldr	r3, [r4, #12]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d1e5      	bne.n	8007960 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 8007994:	2801      	cmp	r0, #1
 8007996:	d112      	bne.n	80079be <osSemaphoreNew+0x6a>
          hSemaphore = xSemaphoreCreateBinary();
 8007998:	2203      	movs	r2, #3
 800799a:	2100      	movs	r1, #0
 800799c:	f000 fa5c 	bl	8007e58 <xQueueGenericCreate>
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80079a0:	4605      	mov	r5, r0
 80079a2:	2800      	cmp	r0, #0
 80079a4:	d0dc      	beq.n	8007960 <osSemaphoreNew+0xc>
 80079a6:	b186      	cbz	r6, 80079ca <osSemaphoreNew+0x76>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80079a8:	2300      	movs	r3, #0
 80079aa:	461a      	mov	r2, r3
 80079ac:	4619      	mov	r1, r3
 80079ae:	f000 fa95 	bl	8007edc <xQueueGenericSend>
 80079b2:	2801      	cmp	r0, #1
 80079b4:	d009      	beq.n	80079ca <osSemaphoreNew+0x76>
            vSemaphoreDelete (hSemaphore);
 80079b6:	4628      	mov	r0, r5
 80079b8:	f000 fdd0 	bl	800855c <vQueueDelete>
 80079bc:	e7d0      	b.n	8007960 <osSemaphoreNew+0xc>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80079be:	4631      	mov	r1, r6
 80079c0:	f000 fa6e 	bl	8007ea0 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 80079c4:	4605      	mov	r5, r0
 80079c6:	2800      	cmp	r0, #0
 80079c8:	d0ca      	beq.n	8007960 <osSemaphoreNew+0xc>
        if (attr != NULL) {
 80079ca:	b124      	cbz	r4, 80079d6 <osSemaphoreNew+0x82>
          name = attr->name;
 80079cc:	6821      	ldr	r1, [r4, #0]
        vQueueAddToRegistry (hSemaphore, name);
 80079ce:	4628      	mov	r0, r5
 80079d0:	f000 fd9e 	bl	8008510 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 80079d4:	e7c5      	b.n	8007962 <osSemaphoreNew+0xe>
          name = NULL;
 80079d6:	4621      	mov	r1, r4
 80079d8:	e7f9      	b.n	80079ce <osSemaphoreNew+0x7a>
 80079da:	bf00      	nop
 80079dc:	200008f8 	.word	0x200008f8

080079e0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80079e0:	b513      	push	{r0, r1, r4, lr}
 80079e2:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80079e4:	b918      	cbnz	r0, 80079ee <osSemaphoreAcquire+0xe>
    stat = osErrorParameter;
 80079e6:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 80079ea:	b002      	add	sp, #8
 80079ec:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079ee:	f3ef 8305 	mrs	r3, IPSR
  else if (IS_IRQ()) {
 80079f2:	b16b      	cbz	r3, 8007a10 <osSemaphoreAcquire+0x30>
    if (timeout != 0U) {
 80079f4:	2c00      	cmp	r4, #0
 80079f6:	d1f6      	bne.n	80079e6 <osSemaphoreAcquire+0x6>
      yield = pdFALSE;
 80079f8:	aa02      	add	r2, sp, #8
 80079fa:	f842 4d04 	str.w	r4, [r2, #-4]!
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80079fe:	4621      	mov	r1, r4
 8007a00:	f000 fd36 	bl	8008470 <xQueueReceiveFromISR>
 8007a04:	2801      	cmp	r0, #1
 8007a06:	d115      	bne.n	8007a34 <osSemaphoreAcquire+0x54>
        portYIELD_FROM_ISR (yield);
 8007a08:	9b01      	ldr	r3, [sp, #4]
 8007a0a:	b9b3      	cbnz	r3, 8007a3a <osSemaphoreAcquire+0x5a>
  stat = osOK;
 8007a0c:	2000      	movs	r0, #0
 8007a0e:	e7ec      	b.n	80079ea <osSemaphoreAcquire+0xa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a10:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1ed      	bne.n	80079f4 <osSemaphoreAcquire+0x14>
 8007a18:	4b0e      	ldr	r3, [pc, #56]	; (8007a54 <osSemaphoreAcquire+0x74>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2b02      	cmp	r3, #2
 8007a1e:	d103      	bne.n	8007a28 <osSemaphoreAcquire+0x48>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007a20:	f3ef 8311 	mrs	r3, BASEPRI
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d1e5      	bne.n	80079f4 <osSemaphoreAcquire+0x14>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8007a28:	4621      	mov	r1, r4
 8007a2a:	f000 fc5f 	bl	80082ec <xQueueSemaphoreTake>
 8007a2e:	2801      	cmp	r0, #1
 8007a30:	d0ec      	beq.n	8007a0c <osSemaphoreAcquire+0x2c>
      if (timeout != 0U) {
 8007a32:	b95c      	cbnz	r4, 8007a4c <osSemaphoreAcquire+0x6c>
        stat = osErrorResource;
 8007a34:	f06f 0002 	mvn.w	r0, #2
 8007a38:	e7d7      	b.n	80079ea <osSemaphoreAcquire+0xa>
        portYIELD_FROM_ISR (yield);
 8007a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a3e:	4b06      	ldr	r3, [pc, #24]	; (8007a58 <osSemaphoreAcquire+0x78>)
 8007a40:	601a      	str	r2, [r3, #0]
 8007a42:	f3bf 8f4f 	dsb	sy
 8007a46:	f3bf 8f6f 	isb	sy
 8007a4a:	e7df      	b.n	8007a0c <osSemaphoreAcquire+0x2c>
        stat = osErrorTimeout;
 8007a4c:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8007a50:	e7cb      	b.n	80079ea <osSemaphoreAcquire+0xa>
 8007a52:	bf00      	nop
 8007a54:	200008f8 	.word	0x200008f8
 8007a58:	e000ed04 	.word	0xe000ed04

08007a5c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007a5c:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8007a5e:	b378      	cbz	r0, 8007ac0 <osSemaphoreRelease+0x64>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a60:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8007a64:	b153      	cbz	r3, 8007a7c <osSemaphoreRelease+0x20>
    yield = pdFALSE;
 8007a66:	2400      	movs	r4, #0
 8007a68:	a902      	add	r1, sp, #8
 8007a6a:	f841 4d04 	str.w	r4, [r1, #-4]!

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007a6e:	f000 fb48 	bl	8008102 <xQueueGiveFromISR>
 8007a72:	2801      	cmp	r0, #1
 8007a74:	d016      	beq.n	8007aa4 <osSemaphoreRelease+0x48>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 8007a76:	f06f 0002 	mvn.w	r0, #2
 8007a7a:	e016      	b.n	8007aaa <osSemaphoreRelease+0x4e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a7c:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d1f0      	bne.n	8007a66 <osSemaphoreRelease+0xa>
 8007a84:	4b10      	ldr	r3, [pc, #64]	; (8007ac8 <osSemaphoreRelease+0x6c>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	2b02      	cmp	r3, #2
 8007a8a:	d103      	bne.n	8007a94 <osSemaphoreRelease+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007a8c:	f3ef 8311 	mrs	r3, BASEPRI
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1e8      	bne.n	8007a66 <osSemaphoreRelease+0xa>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007a94:	2300      	movs	r3, #0
 8007a96:	461a      	mov	r2, r3
 8007a98:	4619      	mov	r1, r3
 8007a9a:	f000 fa1f 	bl	8007edc <xQueueGenericSend>
 8007a9e:	2801      	cmp	r0, #1
 8007aa0:	d002      	beq.n	8007aa8 <osSemaphoreRelease+0x4c>
 8007aa2:	e7e8      	b.n	8007a76 <osSemaphoreRelease+0x1a>
      portYIELD_FROM_ISR (yield);
 8007aa4:	9b01      	ldr	r3, [sp, #4]
 8007aa6:	b913      	cbnz	r3, 8007aae <osSemaphoreRelease+0x52>
  stat = osOK;
 8007aa8:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 8007aaa:	b002      	add	sp, #8
 8007aac:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 8007aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ab2:	4b06      	ldr	r3, [pc, #24]	; (8007acc <osSemaphoreRelease+0x70>)
 8007ab4:	601a      	str	r2, [r3, #0]
 8007ab6:	f3bf 8f4f 	dsb	sy
 8007aba:	f3bf 8f6f 	isb	sy
 8007abe:	e7f3      	b.n	8007aa8 <osSemaphoreRelease+0x4c>
    stat = osErrorParameter;
 8007ac0:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8007ac4:	e7f1      	b.n	8007aaa <osSemaphoreRelease+0x4e>
 8007ac6:	bf00      	nop
 8007ac8:	200008f8 	.word	0x200008f8
 8007acc:	e000ed04 	.word	0xe000ed04

08007ad0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007ad0:	b538      	push	{r3, r4, r5, lr}
 8007ad2:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ad4:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007ad8:	b973      	cbnz	r3, 8007af8 <osMessageQueueNew+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ada:	f3ef 8310 	mrs	r3, PRIMASK
 8007ade:	b95b      	cbnz	r3, 8007af8 <osMessageQueueNew+0x28>
 8007ae0:	4b12      	ldr	r3, [pc, #72]	; (8007b2c <osMessageQueueNew+0x5c>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2b02      	cmp	r3, #2
 8007ae6:	d102      	bne.n	8007aee <osMessageQueueNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007ae8:	f3ef 8311 	mrs	r3, BASEPRI
 8007aec:	b923      	cbnz	r3, 8007af8 <osMessageQueueNew+0x28>
 8007aee:	b118      	cbz	r0, 8007af8 <osMessageQueueNew+0x28>
 8007af0:	b111      	cbz	r1, 8007af8 <osMessageQueueNew+0x28>
    mem = -1;

    if (attr != NULL) {
 8007af2:	b16c      	cbz	r4, 8007b10 <osMessageQueueNew+0x40>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007af4:	68a3      	ldr	r3, [r4, #8]
 8007af6:	b113      	cbz	r3, 8007afe <osMessageQueueNew+0x2e>
  hQueue = NULL;
 8007af8:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8007afa:	4628      	mov	r0, r5
 8007afc:	bd38      	pop	{r3, r4, r5, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007afe:	68e3      	ldr	r3, [r4, #12]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1f9      	bne.n	8007af8 <osMessageQueueNew+0x28>
 8007b04:	6923      	ldr	r3, [r4, #16]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d1f6      	bne.n	8007af8 <osMessageQueueNew+0x28>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007b0a:	6963      	ldr	r3, [r4, #20]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d1f3      	bne.n	8007af8 <osMessageQueueNew+0x28>
        hQueue = xQueueCreate (msg_count, msg_size);
 8007b10:	2200      	movs	r2, #0
 8007b12:	f000 f9a1 	bl	8007e58 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8007b16:	4605      	mov	r5, r0
 8007b18:	2800      	cmp	r0, #0
 8007b1a:	d0ed      	beq.n	8007af8 <osMessageQueueNew+0x28>
      if (attr != NULL) {
 8007b1c:	b124      	cbz	r4, 8007b28 <osMessageQueueNew+0x58>
        name = attr->name;
 8007b1e:	6821      	ldr	r1, [r4, #0]
      vQueueAddToRegistry (hQueue, name);
 8007b20:	4628      	mov	r0, r5
 8007b22:	f000 fcf5 	bl	8008510 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8007b26:	e7e8      	b.n	8007afa <osMessageQueueNew+0x2a>
        name = NULL;
 8007b28:	4621      	mov	r1, r4
 8007b2a:	e7f9      	b.n	8007b20 <osMessageQueueNew+0x50>
 8007b2c:	200008f8 	.word	0x200008f8

08007b30 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007b30:	b513      	push	{r0, r1, r4, lr}
 8007b32:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b34:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8007b38:	b123      	cbz	r3, 8007b44 <osMessageQueuePut+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007b3a:	b9e8      	cbnz	r0, 8007b78 <osMessageQueuePut+0x48>
      stat = osErrorParameter;
 8007b3c:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8007b40:	b002      	add	sp, #8
 8007b42:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b44:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d1f6      	bne.n	8007b3a <osMessageQueuePut+0xa>
 8007b4c:	4b18      	ldr	r3, [pc, #96]	; (8007bb0 <osMessageQueuePut+0x80>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2b02      	cmp	r3, #2
 8007b52:	d103      	bne.n	8007b5c <osMessageQueuePut+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007b54:	f3ef 8311 	mrs	r3, BASEPRI
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d1ee      	bne.n	8007b3a <osMessageQueuePut+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007b5c:	2800      	cmp	r0, #0
 8007b5e:	d0ed      	beq.n	8007b3c <osMessageQueuePut+0xc>
 8007b60:	2900      	cmp	r1, #0
 8007b62:	d0eb      	beq.n	8007b3c <osMessageQueuePut+0xc>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007b64:	2300      	movs	r3, #0
 8007b66:	4622      	mov	r2, r4
 8007b68:	f000 f9b8 	bl	8007edc <xQueueGenericSend>
 8007b6c:	2801      	cmp	r0, #1
 8007b6e:	d011      	beq.n	8007b94 <osMessageQueuePut+0x64>
        if (timeout != 0U) {
 8007b70:	b9dc      	cbnz	r4, 8007baa <osMessageQueuePut+0x7a>
          stat = osErrorResource;
 8007b72:	f06f 0002 	mvn.w	r0, #2
 8007b76:	e7e3      	b.n	8007b40 <osMessageQueuePut+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007b78:	2900      	cmp	r1, #0
 8007b7a:	d0df      	beq.n	8007b3c <osMessageQueuePut+0xc>
 8007b7c:	2c00      	cmp	r4, #0
 8007b7e:	d1dd      	bne.n	8007b3c <osMessageQueuePut+0xc>
      yield = pdFALSE;
 8007b80:	aa02      	add	r2, sp, #8
 8007b82:	f842 4d04 	str.w	r4, [r2, #-4]!
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007b86:	4623      	mov	r3, r4
 8007b88:	f000 fa5a 	bl	8008040 <xQueueGenericSendFromISR>
 8007b8c:	2801      	cmp	r0, #1
 8007b8e:	d1f0      	bne.n	8007b72 <osMessageQueuePut+0x42>
        portYIELD_FROM_ISR (yield);
 8007b90:	9b01      	ldr	r3, [sp, #4]
 8007b92:	b90b      	cbnz	r3, 8007b98 <osMessageQueuePut+0x68>
  stat = osOK;
 8007b94:	2000      	movs	r0, #0
 8007b96:	e7d3      	b.n	8007b40 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 8007b98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b9c:	4b05      	ldr	r3, [pc, #20]	; (8007bb4 <osMessageQueuePut+0x84>)
 8007b9e:	601a      	str	r2, [r3, #0]
 8007ba0:	f3bf 8f4f 	dsb	sy
 8007ba4:	f3bf 8f6f 	isb	sy
 8007ba8:	e7f4      	b.n	8007b94 <osMessageQueuePut+0x64>
          stat = osErrorTimeout;
 8007baa:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8007bae:	e7c7      	b.n	8007b40 <osMessageQueuePut+0x10>
 8007bb0:	200008f8 	.word	0x200008f8
 8007bb4:	e000ed04 	.word	0xe000ed04

08007bb8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007bb8:	b513      	push	{r0, r1, r4, lr}
 8007bba:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bbc:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8007bc0:	b123      	cbz	r3, 8007bcc <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007bc2:	b9e0      	cbnz	r0, 8007bfe <osMessageQueueGet+0x46>
      stat = osErrorParameter;
 8007bc4:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8007bc8:	b002      	add	sp, #8
 8007bca:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bcc:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d1f6      	bne.n	8007bc2 <osMessageQueueGet+0xa>
 8007bd4:	4b17      	ldr	r3, [pc, #92]	; (8007c34 <osMessageQueueGet+0x7c>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	d103      	bne.n	8007be4 <osMessageQueueGet+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007bdc:	f3ef 8311 	mrs	r3, BASEPRI
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d1ee      	bne.n	8007bc2 <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007be4:	2800      	cmp	r0, #0
 8007be6:	d0ed      	beq.n	8007bc4 <osMessageQueueGet+0xc>
 8007be8:	2900      	cmp	r1, #0
 8007bea:	d0eb      	beq.n	8007bc4 <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007bec:	4622      	mov	r2, r4
 8007bee:	f000 fadd 	bl	80081ac <xQueueReceive>
 8007bf2:	2801      	cmp	r0, #1
 8007bf4:	d010      	beq.n	8007c18 <osMessageQueueGet+0x60>
        if (timeout != 0U) {
 8007bf6:	b9d4      	cbnz	r4, 8007c2e <osMessageQueueGet+0x76>
          stat = osErrorResource;
 8007bf8:	f06f 0002 	mvn.w	r0, #2
 8007bfc:	e7e4      	b.n	8007bc8 <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007bfe:	2900      	cmp	r1, #0
 8007c00:	d0e0      	beq.n	8007bc4 <osMessageQueueGet+0xc>
 8007c02:	2c00      	cmp	r4, #0
 8007c04:	d1de      	bne.n	8007bc4 <osMessageQueueGet+0xc>
      yield = pdFALSE;
 8007c06:	aa02      	add	r2, sp, #8
 8007c08:	f842 4d04 	str.w	r4, [r2, #-4]!
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007c0c:	f000 fc30 	bl	8008470 <xQueueReceiveFromISR>
 8007c10:	2801      	cmp	r0, #1
 8007c12:	d1f1      	bne.n	8007bf8 <osMessageQueueGet+0x40>
        portYIELD_FROM_ISR (yield);
 8007c14:	9b01      	ldr	r3, [sp, #4]
 8007c16:	b90b      	cbnz	r3, 8007c1c <osMessageQueueGet+0x64>
  stat = osOK;
 8007c18:	2000      	movs	r0, #0
 8007c1a:	e7d5      	b.n	8007bc8 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 8007c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c20:	4b05      	ldr	r3, [pc, #20]	; (8007c38 <osMessageQueueGet+0x80>)
 8007c22:	601a      	str	r2, [r3, #0]
 8007c24:	f3bf 8f4f 	dsb	sy
 8007c28:	f3bf 8f6f 	isb	sy
 8007c2c:	e7f4      	b.n	8007c18 <osMessageQueueGet+0x60>
          stat = osErrorTimeout;
 8007c2e:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8007c32:	e7c9      	b.n	8007bc8 <osMessageQueueGet+0x10>
 8007c34:	200008f8 	.word	0x200008f8
 8007c38:	e000ed04 	.word	0xe000ed04

08007c3c <vApplicationStackOverflowHook>:
*/
#if (configCHECK_FOR_STACK_OVERFLOW > 0)
__WEAK void vApplicationStackOverflowHook (TaskHandle_t xTask, signed char *pcTaskName) {
  (void)xTask;
  (void)pcTaskName;
}
 8007c3c:	4770      	bx	lr

08007c3e <vListInitialise>:
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007c3e:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c42:	f100 0308 	add.w	r3, r0, #8
 8007c46:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c48:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c4c:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007c52:	4770      	bx	lr

08007c54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007c54:	2300      	movs	r3, #0
 8007c56:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007c58:	4770      	bx	lr

08007c5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8007c5a:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007c5c:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8007c5e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007c60:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007c62:	689a      	ldr	r2, [r3, #8]
 8007c64:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007c66:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8007c68:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007c6a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	6003      	str	r3, [r0, #0]
}
 8007c70:	4770      	bx	lr

08007c72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007c72:	680a      	ldr	r2, [r1, #0]
{
 8007c74:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007c76:	1c53      	adds	r3, r2, #1
 8007c78:	d10a      	bne.n	8007c90 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007c7a:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c7c:	685a      	ldr	r2, [r3, #4]
 8007c7e:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007c80:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007c82:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c84:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8007c86:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007c88:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	6003      	str	r3, [r0, #0]
}
 8007c8e:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c90:	f100 0308 	add.w	r3, r0, #8
 8007c94:	685c      	ldr	r4, [r3, #4]
 8007c96:	6825      	ldr	r5, [r4, #0]
 8007c98:	4295      	cmp	r5, r2
 8007c9a:	d8ef      	bhi.n	8007c7c <vListInsert+0xa>
 8007c9c:	4623      	mov	r3, r4
 8007c9e:	e7f9      	b.n	8007c94 <vListInsert+0x22>

08007ca0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007ca0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007ca2:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8007ca6:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007ca8:	6882      	ldr	r2, [r0, #8]
 8007caa:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007cac:	6859      	ldr	r1, [r3, #4]
 8007cae:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007cb0:	bf08      	it	eq
 8007cb2:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	3a01      	subs	r2, #1
 8007cbc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007cbe:	6818      	ldr	r0, [r3, #0]
}
 8007cc0:	4770      	bx	lr

08007cc2 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007cc2:	b510      	push	{r4, lr}
 8007cc4:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007cc6:	f001 fb7d 	bl	80093c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007cca:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007ccc:	f001 fb9c 	bl	8009408 <vPortExitCritical>

	return xReturn;
}
 8007cd0:	fab4 f084 	clz	r0, r4
 8007cd4:	0940      	lsrs	r0, r0, #5
 8007cd6:	bd10      	pop	{r4, pc}

08007cd8 <prvCopyDataToQueue>:
{
 8007cd8:	b570      	push	{r4, r5, r6, lr}
 8007cda:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007cdc:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8007cde:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ce0:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007ce2:	b942      	cbnz	r2, 8007cf6 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ce4:	6805      	ldr	r5, [r0, #0]
 8007ce6:	b99d      	cbnz	r5, 8007d10 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007ce8:	6840      	ldr	r0, [r0, #4]
 8007cea:	f001 f8b9 	bl	8008e60 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8007cee:	6065      	str	r5, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007cf0:	3601      	adds	r6, #1
 8007cf2:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8007cf4:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8007cf6:	b96d      	cbnz	r5, 8007d14 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007cf8:	6880      	ldr	r0, [r0, #8]
 8007cfa:	f001 fd99 	bl	8009830 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007cfe:	68a3      	ldr	r3, [r4, #8]
 8007d00:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007d02:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d04:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007d06:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d301      	bcc.n	8007d10 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d0c:	6823      	ldr	r3, [r4, #0]
 8007d0e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8007d10:	2000      	movs	r0, #0
 8007d12:	e7ed      	b.n	8007cf0 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d14:	68c0      	ldr	r0, [r0, #12]
 8007d16:	f001 fd8b 	bl	8009830 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007d1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d1c:	68e2      	ldr	r2, [r4, #12]
 8007d1e:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d20:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007d22:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d24:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007d26:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007d28:	bf3e      	ittt	cc
 8007d2a:	6862      	ldrcc	r2, [r4, #4]
 8007d2c:	189b      	addcc	r3, r3, r2
 8007d2e:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8007d30:	2d02      	cmp	r5, #2
 8007d32:	d1ed      	bne.n	8007d10 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d34:	b10e      	cbz	r6, 8007d3a <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8007d36:	3e01      	subs	r6, #1
 8007d38:	e7ea      	b.n	8007d10 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8007d3a:	4630      	mov	r0, r6
 8007d3c:	e7d8      	b.n	8007cf0 <prvCopyDataToQueue+0x18>

08007d3e <prvCopyDataFromQueue>:
{
 8007d3e:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007d40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8007d42:	b410      	push	{r4}
 8007d44:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007d46:	b162      	cbz	r2, 8007d62 <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007d48:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007d4a:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007d4c:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007d4e:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007d50:	60d9      	str	r1, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007d52:	bf28      	it	cs
 8007d54:	6819      	ldrcs	r1, [r3, #0]
}
 8007d56:	bc10      	pop	{r4}
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007d58:	bf28      	it	cs
 8007d5a:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007d5c:	68d9      	ldr	r1, [r3, #12]
 8007d5e:	f001 bd67 	b.w	8009830 <memcpy>
}
 8007d62:	bc10      	pop	{r4}
 8007d64:	4770      	bx	lr

08007d66 <prvUnlockQueue>:
{
 8007d66:	b570      	push	{r4, r5, r6, lr}
 8007d68:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007d6a:	f001 fb2b 	bl	80093c4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8007d6e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d72:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8007d76:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d78:	2d00      	cmp	r5, #0
 8007d7a:	dc14      	bgt.n	8007da6 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8007d7c:	23ff      	movs	r3, #255	; 0xff
 8007d7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8007d82:	f001 fb41 	bl	8009408 <vPortExitCritical>
	taskENTER_CRITICAL();
 8007d86:	f001 fb1d 	bl	80093c4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8007d8a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d8e:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8007d92:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d94:	2d00      	cmp	r5, #0
 8007d96:	dc12      	bgt.n	8007dbe <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8007d98:	23ff      	movs	r3, #255	; 0xff
 8007d9a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8007d9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8007da2:	f001 bb31 	b.w	8009408 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007da6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d0e7      	beq.n	8007d7c <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007dac:	4630      	mov	r0, r6
 8007dae:	f000 ff77 	bl	8008ca0 <xTaskRemoveFromEventList>
 8007db2:	b108      	cbz	r0, 8007db8 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8007db4:	f000 fffc 	bl	8008db0 <vTaskMissedYield>
 8007db8:	3d01      	subs	r5, #1
 8007dba:	b26d      	sxtb	r5, r5
 8007dbc:	e7dc      	b.n	8007d78 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007dbe:	6923      	ldr	r3, [r4, #16]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d0e9      	beq.n	8007d98 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007dc4:	4630      	mov	r0, r6
 8007dc6:	f000 ff6b 	bl	8008ca0 <xTaskRemoveFromEventList>
 8007dca:	b108      	cbz	r0, 8007dd0 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8007dcc:	f000 fff0 	bl	8008db0 <vTaskMissedYield>
 8007dd0:	3d01      	subs	r5, #1
 8007dd2:	b26d      	sxtb	r5, r5
 8007dd4:	e7de      	b.n	8007d94 <prvUnlockQueue+0x2e>
	...

08007dd8 <xQueueGenericReset>:
{
 8007dd8:	b538      	push	{r3, r4, r5, lr}
 8007dda:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8007ddc:	4604      	mov	r4, r0
 8007dde:	b940      	cbnz	r0, 8007df2 <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de4:	f383 8811 	msr	BASEPRI, r3
 8007de8:	f3bf 8f6f 	isb	sy
 8007dec:	f3bf 8f4f 	dsb	sy
 8007df0:	e7fe      	b.n	8007df0 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8007df2:	f001 fae7 	bl	80093c4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007df6:	e9d4 300f 	ldrd	r3, r0, [r4, #60]	; 0x3c
 8007dfa:	4343      	muls	r3, r0
 8007dfc:	6822      	ldr	r2, [r4, #0]
 8007dfe:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007e00:	1a1b      	subs	r3, r3, r0
 8007e02:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007e04:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007e06:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007e08:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8007e0a:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007e0c:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e0e:	60a2      	str	r2, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 8007e10:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007e14:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8007e18:	b995      	cbnz	r5, 8007e40 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e1a:	6923      	ldr	r3, [r4, #16]
 8007e1c:	b163      	cbz	r3, 8007e38 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e1e:	f104 0010 	add.w	r0, r4, #16
 8007e22:	f000 ff3d 	bl	8008ca0 <xTaskRemoveFromEventList>
 8007e26:	b138      	cbz	r0, 8007e38 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8007e28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e2c:	4b09      	ldr	r3, [pc, #36]	; (8007e54 <xQueueGenericReset+0x7c>)
 8007e2e:	601a      	str	r2, [r3, #0]
 8007e30:	f3bf 8f4f 	dsb	sy
 8007e34:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8007e38:	f001 fae6 	bl	8009408 <vPortExitCritical>
}
 8007e3c:	2001      	movs	r0, #1
 8007e3e:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007e40:	f104 0010 	add.w	r0, r4, #16
 8007e44:	f7ff fefb 	bl	8007c3e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007e48:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007e4c:	f7ff fef7 	bl	8007c3e <vListInitialise>
 8007e50:	e7f2      	b.n	8007e38 <xQueueGenericReset+0x60>
 8007e52:	bf00      	nop
 8007e54:	e000ed04 	.word	0xe000ed04

08007e58 <xQueueGenericCreate>:
	{
 8007e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e5a:	460d      	mov	r5, r1
 8007e5c:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e5e:	4606      	mov	r6, r0
 8007e60:	b940      	cbnz	r0, 8007e74 <xQueueGenericCreate+0x1c>
 8007e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e66:	f383 8811 	msr	BASEPRI, r3
 8007e6a:	f3bf 8f6f 	isb	sy
 8007e6e:	f3bf 8f4f 	dsb	sy
 8007e72:	e7fe      	b.n	8007e72 <xQueueGenericCreate+0x1a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e74:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007e76:	3050      	adds	r0, #80	; 0x50
 8007e78:	f001 fbd8 	bl	800962c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8007e7c:	4604      	mov	r4, r0
 8007e7e:	b148      	cbz	r0, 8007e94 <xQueueGenericCreate+0x3c>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8007e80:	b955      	cbnz	r5, 8007e98 <xQueueGenericCreate+0x40>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007e82:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8007e84:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007e88:	2101      	movs	r1, #1
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	f7ff ffa4 	bl	8007dd8 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8007e90:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 8007e94:	4620      	mov	r0, r4
 8007e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007e98:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007e9c:	6003      	str	r3, [r0, #0]
 8007e9e:	e7f1      	b.n	8007e84 <xQueueGenericCreate+0x2c>

08007ea0 <xQueueCreateCountingSemaphore>:
	{
 8007ea0:	b510      	push	{r4, lr}
 8007ea2:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8007ea4:	b940      	cbnz	r0, 8007eb8 <xQueueCreateCountingSemaphore+0x18>
 8007ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eaa:	f383 8811 	msr	BASEPRI, r3
 8007eae:	f3bf 8f6f 	isb	sy
 8007eb2:	f3bf 8f4f 	dsb	sy
 8007eb6:	e7fe      	b.n	8007eb6 <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007eb8:	4288      	cmp	r0, r1
 8007eba:	d208      	bcs.n	8007ece <xQueueCreateCountingSemaphore+0x2e>
 8007ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec0:	f383 8811 	msr	BASEPRI, r3
 8007ec4:	f3bf 8f6f 	isb	sy
 8007ec8:	f3bf 8f4f 	dsb	sy
 8007ecc:	e7fe      	b.n	8007ecc <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007ece:	2202      	movs	r2, #2
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	f7ff ffc1 	bl	8007e58 <xQueueGenericCreate>
		if( xHandle != NULL )
 8007ed6:	b100      	cbz	r0, 8007eda <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007ed8:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8007eda:	bd10      	pop	{r4, pc}

08007edc <xQueueGenericSend>:
{
 8007edc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ee0:	4688      	mov	r8, r1
 8007ee2:	9201      	str	r2, [sp, #4]
 8007ee4:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8007ee6:	4604      	mov	r4, r0
 8007ee8:	b940      	cbnz	r0, 8007efc <xQueueGenericSend+0x20>
 8007eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eee:	f383 8811 	msr	BASEPRI, r3
 8007ef2:	f3bf 8f6f 	isb	sy
 8007ef6:	f3bf 8f4f 	dsb	sy
 8007efa:	e7fe      	b.n	8007efa <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007efc:	b951      	cbnz	r1, 8007f14 <xQueueGenericSend+0x38>
 8007efe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007f00:	b143      	cbz	r3, 8007f14 <xQueueGenericSend+0x38>
 8007f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f06:	f383 8811 	msr	BASEPRI, r3
 8007f0a:	f3bf 8f6f 	isb	sy
 8007f0e:	f3bf 8f4f 	dsb	sy
 8007f12:	e7fe      	b.n	8007f12 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f14:	2f02      	cmp	r7, #2
 8007f16:	d10b      	bne.n	8007f30 <xQueueGenericSend+0x54>
 8007f18:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d008      	beq.n	8007f30 <xQueueGenericSend+0x54>
 8007f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f22:	f383 8811 	msr	BASEPRI, r3
 8007f26:	f3bf 8f6f 	isb	sy
 8007f2a:	f3bf 8f4f 	dsb	sy
 8007f2e:	e7fe      	b.n	8007f2e <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f30:	f000 ff44 	bl	8008dbc <xTaskGetSchedulerState>
 8007f34:	b950      	cbnz	r0, 8007f4c <xQueueGenericSend+0x70>
 8007f36:	9e01      	ldr	r6, [sp, #4]
 8007f38:	b14e      	cbz	r6, 8007f4e <xQueueGenericSend+0x72>
 8007f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3e:	f383 8811 	msr	BASEPRI, r3
 8007f42:	f3bf 8f6f 	isb	sy
 8007f46:	f3bf 8f4f 	dsb	sy
 8007f4a:	e7fe      	b.n	8007f4a <xQueueGenericSend+0x6e>
 8007f4c:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8007f4e:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 8007f52:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 800803c <xQueueGenericSend+0x160>
 8007f56:	e037      	b.n	8007fc8 <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f58:	9d01      	ldr	r5, [sp, #4]
 8007f5a:	b91d      	cbnz	r5, 8007f64 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 8007f5c:	f001 fa54 	bl	8009408 <vPortExitCritical>
			return errQUEUE_FULL;
 8007f60:	2000      	movs	r0, #0
 8007f62:	e050      	b.n	8008006 <xQueueGenericSend+0x12a>
				else if( xEntryTimeSet == pdFALSE )
 8007f64:	b916      	cbnz	r6, 8007f6c <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f66:	a802      	add	r0, sp, #8
 8007f68:	f000 feda 	bl	8008d20 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007f6c:	f001 fa4c 	bl	8009408 <vPortExitCritical>
		vTaskSuspendAll();
 8007f70:	f000 fcc8 	bl	8008904 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f74:	f001 fa26 	bl	80093c4 <vPortEnterCritical>
 8007f78:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007f7c:	2bff      	cmp	r3, #255	; 0xff
 8007f7e:	bf08      	it	eq
 8007f80:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 8007f84:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007f88:	2bff      	cmp	r3, #255	; 0xff
 8007f8a:	bf08      	it	eq
 8007f8c:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 8007f90:	f001 fa3a 	bl	8009408 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f94:	a901      	add	r1, sp, #4
 8007f96:	a802      	add	r0, sp, #8
 8007f98:	f000 fece 	bl	8008d38 <xTaskCheckForTimeOut>
 8007f9c:	2800      	cmp	r0, #0
 8007f9e:	d146      	bne.n	800802e <xQueueGenericSend+0x152>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007fa0:	f001 fa10 	bl	80093c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007fa4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007fa6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d12f      	bne.n	800800c <xQueueGenericSend+0x130>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007fac:	f001 fa2c 	bl	8009408 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007fb0:	9901      	ldr	r1, [sp, #4]
 8007fb2:	f104 0010 	add.w	r0, r4, #16
 8007fb6:	f000 fe39 	bl	8008c2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007fba:	4620      	mov	r0, r4
 8007fbc:	f7ff fed3 	bl	8007d66 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007fc0:	f000 fd46 	bl	8008a50 <xTaskResumeAll>
 8007fc4:	b350      	cbz	r0, 800801c <xQueueGenericSend+0x140>
 8007fc6:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8007fc8:	f001 f9fc 	bl	80093c4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007fcc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007fce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d301      	bcc.n	8007fd8 <xQueueGenericSend+0xfc>
 8007fd4:	2f02      	cmp	r7, #2
 8007fd6:	d1bf      	bne.n	8007f58 <xQueueGenericSend+0x7c>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007fd8:	463a      	mov	r2, r7
 8007fda:	4641      	mov	r1, r8
 8007fdc:	4620      	mov	r0, r4
 8007fde:	f7ff fe7b 	bl	8007cd8 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fe4:	b11b      	cbz	r3, 8007fee <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fe6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007fea:	f000 fe59 	bl	8008ca0 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8007fee:	b138      	cbz	r0, 8008000 <xQueueGenericSend+0x124>
						queueYIELD_IF_USING_PREEMPTION();
 8007ff0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ff4:	4b11      	ldr	r3, [pc, #68]	; (800803c <xQueueGenericSend+0x160>)
 8007ff6:	601a      	str	r2, [r3, #0]
 8007ff8:	f3bf 8f4f 	dsb	sy
 8007ffc:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008000:	f001 fa02 	bl	8009408 <vPortExitCritical>
				return pdPASS;
 8008004:	2001      	movs	r0, #1
}
 8008006:	b004      	add	sp, #16
 8008008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 800800c:	f001 f9fc 	bl	8009408 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8008010:	4620      	mov	r0, r4
 8008012:	f7ff fea8 	bl	8007d66 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008016:	f000 fd1b 	bl	8008a50 <xTaskResumeAll>
 800801a:	e7d4      	b.n	8007fc6 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 800801c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008020:	f8ca 3000 	str.w	r3, [sl]
 8008024:	f3bf 8f4f 	dsb	sy
 8008028:	f3bf 8f6f 	isb	sy
 800802c:	e7cb      	b.n	8007fc6 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 800802e:	4620      	mov	r0, r4
 8008030:	f7ff fe99 	bl	8007d66 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008034:	f000 fd0c 	bl	8008a50 <xTaskResumeAll>
 8008038:	e792      	b.n	8007f60 <xQueueGenericSend+0x84>
 800803a:	bf00      	nop
 800803c:	e000ed04 	.word	0xe000ed04

08008040 <xQueueGenericSendFromISR>:
{
 8008040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008044:	4689      	mov	r9, r1
 8008046:	4690      	mov	r8, r2
 8008048:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800804a:	4604      	mov	r4, r0
 800804c:	b940      	cbnz	r0, 8008060 <xQueueGenericSendFromISR+0x20>
 800804e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008052:	f383 8811 	msr	BASEPRI, r3
 8008056:	f3bf 8f6f 	isb	sy
 800805a:	f3bf 8f4f 	dsb	sy
 800805e:	e7fe      	b.n	800805e <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008060:	b951      	cbnz	r1, 8008078 <xQueueGenericSendFromISR+0x38>
 8008062:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008064:	b143      	cbz	r3, 8008078 <xQueueGenericSendFromISR+0x38>
 8008066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800806a:	f383 8811 	msr	BASEPRI, r3
 800806e:	f3bf 8f6f 	isb	sy
 8008072:	f3bf 8f4f 	dsb	sy
 8008076:	e7fe      	b.n	8008076 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008078:	2f02      	cmp	r7, #2
 800807a:	d10b      	bne.n	8008094 <xQueueGenericSendFromISR+0x54>
 800807c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800807e:	2b01      	cmp	r3, #1
 8008080:	d008      	beq.n	8008094 <xQueueGenericSendFromISR+0x54>
 8008082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008086:	f383 8811 	msr	BASEPRI, r3
 800808a:	f3bf 8f6f 	isb	sy
 800808e:	f3bf 8f4f 	dsb	sy
 8008092:	e7fe      	b.n	8008092 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008094:	f001 fa78 	bl	8009588 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008098:	f3ef 8611 	mrs	r6, BASEPRI
 800809c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a0:	f383 8811 	msr	BASEPRI, r3
 80080a4:	f3bf 8f6f 	isb	sy
 80080a8:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80080ac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80080ae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d301      	bcc.n	80080b8 <xQueueGenericSendFromISR+0x78>
 80080b4:	2f02      	cmp	r7, #2
 80080b6:	d122      	bne.n	80080fe <xQueueGenericSendFromISR+0xbe>
			const int8_t cTxLock = pxQueue->cTxLock;
 80080b8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80080bc:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 80080be:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80080c0:	4649      	mov	r1, r9
 80080c2:	4620      	mov	r0, r4
 80080c4:	f7ff fe08 	bl	8007cd8 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80080c8:	1c6b      	adds	r3, r5, #1
 80080ca:	d113      	bne.n	80080f4 <xQueueGenericSendFromISR+0xb4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080ce:	b90b      	cbnz	r3, 80080d4 <xQueueGenericSendFromISR+0x94>
			xReturn = pdPASS;
 80080d0:	2001      	movs	r0, #1
 80080d2:	e00b      	b.n	80080ec <xQueueGenericSendFromISR+0xac>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080d4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80080d8:	f000 fde2 	bl	8008ca0 <xTaskRemoveFromEventList>
 80080dc:	2800      	cmp	r0, #0
 80080de:	d0f7      	beq.n	80080d0 <xQueueGenericSendFromISR+0x90>
							if( pxHigherPriorityTaskWoken != NULL )
 80080e0:	f1b8 0f00 	cmp.w	r8, #0
 80080e4:	d0f4      	beq.n	80080d0 <xQueueGenericSendFromISR+0x90>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80080e6:	2001      	movs	r0, #1
 80080e8:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80080ec:	f386 8811 	msr	BASEPRI, r6
}
 80080f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80080f4:	3501      	adds	r5, #1
 80080f6:	b26d      	sxtb	r5, r5
 80080f8:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 80080fc:	e7e8      	b.n	80080d0 <xQueueGenericSendFromISR+0x90>
			xReturn = errQUEUE_FULL;
 80080fe:	2000      	movs	r0, #0
 8008100:	e7f4      	b.n	80080ec <xQueueGenericSendFromISR+0xac>

08008102 <xQueueGiveFromISR>:
{
 8008102:	b570      	push	{r4, r5, r6, lr}
 8008104:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8008106:	4604      	mov	r4, r0
 8008108:	b940      	cbnz	r0, 800811c <xQueueGiveFromISR+0x1a>
	__asm volatile
 800810a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810e:	f383 8811 	msr	BASEPRI, r3
 8008112:	f3bf 8f6f 	isb	sy
 8008116:	f3bf 8f4f 	dsb	sy
 800811a:	e7fe      	b.n	800811a <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 800811c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800811e:	b143      	cbz	r3, 8008132 <xQueueGiveFromISR+0x30>
 8008120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008124:	f383 8811 	msr	BASEPRI, r3
 8008128:	f3bf 8f6f 	isb	sy
 800812c:	f3bf 8f4f 	dsb	sy
 8008130:	e7fe      	b.n	8008130 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8008132:	6803      	ldr	r3, [r0, #0]
 8008134:	b953      	cbnz	r3, 800814c <xQueueGiveFromISR+0x4a>
 8008136:	6843      	ldr	r3, [r0, #4]
 8008138:	b143      	cbz	r3, 800814c <xQueueGiveFromISR+0x4a>
 800813a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813e:	f383 8811 	msr	BASEPRI, r3
 8008142:	f3bf 8f6f 	isb	sy
 8008146:	f3bf 8f4f 	dsb	sy
 800814a:	e7fe      	b.n	800814a <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800814c:	f001 fa1c 	bl	8009588 <vPortValidateInterruptPriority>
	__asm volatile
 8008150:	f3ef 8611 	mrs	r6, BASEPRI
 8008154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008158:	f383 8811 	msr	BASEPRI, r3
 800815c:	f3bf 8f6f 	isb	sy
 8008160:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008164:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008166:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008168:	4293      	cmp	r3, r2
 800816a:	d91c      	bls.n	80081a6 <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 800816c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008170:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 8008172:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008174:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8008176:	1c5a      	adds	r2, r3, #1
 8008178:	d110      	bne.n	800819c <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800817a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800817c:	b90b      	cbnz	r3, 8008182 <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 800817e:	2001      	movs	r0, #1
 8008180:	e009      	b.n	8008196 <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008182:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008186:	f000 fd8b 	bl	8008ca0 <xTaskRemoveFromEventList>
 800818a:	2800      	cmp	r0, #0
 800818c:	d0f7      	beq.n	800817e <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 800818e:	2d00      	cmp	r5, #0
 8008190:	d0f5      	beq.n	800817e <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008192:	2001      	movs	r0, #1
 8008194:	6028      	str	r0, [r5, #0]
	__asm volatile
 8008196:	f386 8811 	msr	BASEPRI, r6
}
 800819a:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800819c:	3301      	adds	r3, #1
 800819e:	b25b      	sxtb	r3, r3
 80081a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80081a4:	e7eb      	b.n	800817e <xQueueGiveFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 80081a6:	2000      	movs	r0, #0
 80081a8:	e7f5      	b.n	8008196 <xQueueGiveFromISR+0x94>
	...

080081ac <xQueueReceive>:
{
 80081ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80081b0:	b085      	sub	sp, #20
 80081b2:	460f      	mov	r7, r1
 80081b4:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80081b6:	4604      	mov	r4, r0
 80081b8:	b940      	cbnz	r0, 80081cc <xQueueReceive+0x20>
	__asm volatile
 80081ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081be:	f383 8811 	msr	BASEPRI, r3
 80081c2:	f3bf 8f6f 	isb	sy
 80081c6:	f3bf 8f4f 	dsb	sy
 80081ca:	e7fe      	b.n	80081ca <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081cc:	b951      	cbnz	r1, 80081e4 <xQueueReceive+0x38>
 80081ce:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80081d0:	b143      	cbz	r3, 80081e4 <xQueueReceive+0x38>
 80081d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d6:	f383 8811 	msr	BASEPRI, r3
 80081da:	f3bf 8f6f 	isb	sy
 80081de:	f3bf 8f4f 	dsb	sy
 80081e2:	e7fe      	b.n	80081e2 <xQueueReceive+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80081e4:	f000 fdea 	bl	8008dbc <xTaskGetSchedulerState>
 80081e8:	b950      	cbnz	r0, 8008200 <xQueueReceive+0x54>
 80081ea:	9e01      	ldr	r6, [sp, #4]
 80081ec:	b14e      	cbz	r6, 8008202 <xQueueReceive+0x56>
 80081ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f2:	f383 8811 	msr	BASEPRI, r3
 80081f6:	f3bf 8f6f 	isb	sy
 80081fa:	f3bf 8f4f 	dsb	sy
 80081fe:	e7fe      	b.n	80081fe <xQueueReceive+0x52>
 8008200:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8008202:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8008206:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 80082e8 <xQueueReceive+0x13c>
 800820a:	e03b      	b.n	8008284 <xQueueReceive+0xd8>
				if( xTicksToWait == ( TickType_t ) 0 )
 800820c:	9d01      	ldr	r5, [sp, #4]
 800820e:	b91d      	cbnz	r5, 8008218 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 8008210:	f001 f8fa 	bl	8009408 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8008214:	2000      	movs	r0, #0
 8008216:	e052      	b.n	80082be <xQueueReceive+0x112>
				else if( xEntryTimeSet == pdFALSE )
 8008218:	b916      	cbnz	r6, 8008220 <xQueueReceive+0x74>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800821a:	a802      	add	r0, sp, #8
 800821c:	f000 fd80 	bl	8008d20 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8008220:	f001 f8f2 	bl	8009408 <vPortExitCritical>
		vTaskSuspendAll();
 8008224:	f000 fb6e 	bl	8008904 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008228:	f001 f8cc 	bl	80093c4 <vPortEnterCritical>
 800822c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008230:	2bff      	cmp	r3, #255	; 0xff
 8008232:	bf08      	it	eq
 8008234:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8008238:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800823c:	2bff      	cmp	r3, #255	; 0xff
 800823e:	bf08      	it	eq
 8008240:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8008244:	f001 f8e0 	bl	8009408 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008248:	a901      	add	r1, sp, #4
 800824a:	a802      	add	r0, sp, #8
 800824c:	f000 fd74 	bl	8008d38 <xTaskCheckForTimeOut>
 8008250:	2800      	cmp	r0, #0
 8008252:	d13d      	bne.n	80082d0 <xQueueReceive+0x124>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008254:	4620      	mov	r0, r4
 8008256:	f7ff fd34 	bl	8007cc2 <prvIsQueueEmpty>
 800825a:	b398      	cbz	r0, 80082c4 <xQueueReceive+0x118>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800825c:	9901      	ldr	r1, [sp, #4]
 800825e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008262:	f000 fce3 	bl	8008c2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008266:	4620      	mov	r0, r4
 8008268:	f7ff fd7d 	bl	8007d66 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800826c:	f000 fbf0 	bl	8008a50 <xTaskResumeAll>
 8008270:	b938      	cbnz	r0, 8008282 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 8008272:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008276:	f8c9 3000 	str.w	r3, [r9]
 800827a:	f3bf 8f4f 	dsb	sy
 800827e:	f3bf 8f6f 	isb	sy
 8008282:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8008284:	f001 f89e 	bl	80093c4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008288:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800828a:	2d00      	cmp	r5, #0
 800828c:	d0be      	beq.n	800820c <xQueueReceive+0x60>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800828e:	4639      	mov	r1, r7
 8008290:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008292:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008294:	f7ff fd53 	bl	8007d3e <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008298:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800829a:	6923      	ldr	r3, [r4, #16]
 800829c:	b163      	cbz	r3, 80082b8 <xQueueReceive+0x10c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800829e:	f104 0010 	add.w	r0, r4, #16
 80082a2:	f000 fcfd 	bl	8008ca0 <xTaskRemoveFromEventList>
 80082a6:	b138      	cbz	r0, 80082b8 <xQueueReceive+0x10c>
						queueYIELD_IF_USING_PREEMPTION();
 80082a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082ac:	4b0e      	ldr	r3, [pc, #56]	; (80082e8 <xQueueReceive+0x13c>)
 80082ae:	601a      	str	r2, [r3, #0]
 80082b0:	f3bf 8f4f 	dsb	sy
 80082b4:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80082b8:	f001 f8a6 	bl	8009408 <vPortExitCritical>
				return pdPASS;
 80082bc:	2001      	movs	r0, #1
}
 80082be:	b005      	add	sp, #20
 80082c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 80082c4:	4620      	mov	r0, r4
 80082c6:	f7ff fd4e 	bl	8007d66 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80082ca:	f000 fbc1 	bl	8008a50 <xTaskResumeAll>
 80082ce:	e7d8      	b.n	8008282 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 80082d0:	4620      	mov	r0, r4
 80082d2:	f7ff fd48 	bl	8007d66 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80082d6:	f000 fbbb 	bl	8008a50 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80082da:	4620      	mov	r0, r4
 80082dc:	f7ff fcf1 	bl	8007cc2 <prvIsQueueEmpty>
 80082e0:	2800      	cmp	r0, #0
 80082e2:	d0ce      	beq.n	8008282 <xQueueReceive+0xd6>
 80082e4:	e796      	b.n	8008214 <xQueueReceive+0x68>
 80082e6:	bf00      	nop
 80082e8:	e000ed04 	.word	0xe000ed04

080082ec <xQueueSemaphoreTake>:
{
 80082ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 80082f0:	4604      	mov	r4, r0
{
 80082f2:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80082f4:	b940      	cbnz	r0, 8008308 <xQueueSemaphoreTake+0x1c>
 80082f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082fa:	f383 8811 	msr	BASEPRI, r3
 80082fe:	f3bf 8f6f 	isb	sy
 8008302:	f3bf 8f4f 	dsb	sy
 8008306:	e7fe      	b.n	8008306 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8008308:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800830a:	b145      	cbz	r5, 800831e <xQueueSemaphoreTake+0x32>
 800830c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008310:	f383 8811 	msr	BASEPRI, r3
 8008314:	f3bf 8f6f 	isb	sy
 8008318:	f3bf 8f4f 	dsb	sy
 800831c:	e7fe      	b.n	800831c <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800831e:	f000 fd4d 	bl	8008dbc <xTaskGetSchedulerState>
 8008322:	b950      	cbnz	r0, 800833a <xQueueSemaphoreTake+0x4e>
 8008324:	9d01      	ldr	r5, [sp, #4]
 8008326:	b145      	cbz	r5, 800833a <xQueueSemaphoreTake+0x4e>
 8008328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832c:	f383 8811 	msr	BASEPRI, r3
 8008330:	f3bf 8f6f 	isb	sy
 8008334:	f3bf 8f4f 	dsb	sy
 8008338:	e7fe      	b.n	8008338 <xQueueSemaphoreTake+0x4c>
 800833a:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800833c:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 800833e:	f8df 812c 	ldr.w	r8, [pc, #300]	; 800846c <xQueueSemaphoreTake+0x180>
 8008342:	e04f      	b.n	80083e4 <xQueueSemaphoreTake+0xf8>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008344:	9b01      	ldr	r3, [sp, #4]
 8008346:	b963      	cbnz	r3, 8008362 <xQueueSemaphoreTake+0x76>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008348:	b145      	cbz	r5, 800835c <xQueueSemaphoreTake+0x70>
 800834a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800834e:	f383 8811 	msr	BASEPRI, r3
 8008352:	f3bf 8f6f 	isb	sy
 8008356:	f3bf 8f4f 	dsb	sy
 800835a:	e7fe      	b.n	800835a <xQueueSemaphoreTake+0x6e>
					taskEXIT_CRITICAL();
 800835c:	f001 f854 	bl	8009408 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8008360:	e05e      	b.n	8008420 <xQueueSemaphoreTake+0x134>
				else if( xEntryTimeSet == pdFALSE )
 8008362:	b916      	cbnz	r6, 800836a <xQueueSemaphoreTake+0x7e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008364:	a802      	add	r0, sp, #8
 8008366:	f000 fcdb 	bl	8008d20 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800836a:	f001 f84d 	bl	8009408 <vPortExitCritical>
		vTaskSuspendAll();
 800836e:	f000 fac9 	bl	8008904 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008372:	f001 f827 	bl	80093c4 <vPortEnterCritical>
 8008376:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800837a:	2bff      	cmp	r3, #255	; 0xff
 800837c:	bf08      	it	eq
 800837e:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8008382:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008386:	2bff      	cmp	r3, #255	; 0xff
 8008388:	bf08      	it	eq
 800838a:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 800838e:	f001 f83b 	bl	8009408 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008392:	a901      	add	r1, sp, #4
 8008394:	a802      	add	r0, sp, #8
 8008396:	f000 fccf 	bl	8008d38 <xTaskCheckForTimeOut>
 800839a:	2800      	cmp	r0, #0
 800839c:	d14a      	bne.n	8008434 <xQueueSemaphoreTake+0x148>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800839e:	4620      	mov	r0, r4
 80083a0:	f7ff fc8f 	bl	8007cc2 <prvIsQueueEmpty>
 80083a4:	2800      	cmp	r0, #0
 80083a6:	d03f      	beq.n	8008428 <xQueueSemaphoreTake+0x13c>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80083a8:	6823      	ldr	r3, [r4, #0]
 80083aa:	b93b      	cbnz	r3, 80083bc <xQueueSemaphoreTake+0xd0>
						taskENTER_CRITICAL();
 80083ac:	f001 f80a 	bl	80093c4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80083b0:	6860      	ldr	r0, [r4, #4]
 80083b2:	f000 fd13 	bl	8008ddc <xTaskPriorityInherit>
 80083b6:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 80083b8:	f001 f826 	bl	8009408 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80083bc:	9901      	ldr	r1, [sp, #4]
 80083be:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80083c2:	f000 fc33 	bl	8008c2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80083c6:	4620      	mov	r0, r4
 80083c8:	f7ff fccd 	bl	8007d66 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80083cc:	f000 fb40 	bl	8008a50 <xTaskResumeAll>
 80083d0:	b938      	cbnz	r0, 80083e2 <xQueueSemaphoreTake+0xf6>
					portYIELD_WITHIN_API();
 80083d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80083d6:	f8c8 3000 	str.w	r3, [r8]
 80083da:	f3bf 8f4f 	dsb	sy
 80083de:	f3bf 8f6f 	isb	sy
 80083e2:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80083e4:	f000 ffee 	bl	80093c4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80083e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d0aa      	beq.n	8008344 <xQueueSemaphoreTake+0x58>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80083ee:	3b01      	subs	r3, #1
 80083f0:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80083f2:	6823      	ldr	r3, [r4, #0]
 80083f4:	b913      	cbnz	r3, 80083fc <xQueueSemaphoreTake+0x110>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80083f6:	f000 fdc3 	bl	8008f80 <pvTaskIncrementMutexHeldCount>
 80083fa:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083fc:	6923      	ldr	r3, [r4, #16]
 80083fe:	b163      	cbz	r3, 800841a <xQueueSemaphoreTake+0x12e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008400:	f104 0010 	add.w	r0, r4, #16
 8008404:	f000 fc4c 	bl	8008ca0 <xTaskRemoveFromEventList>
 8008408:	b138      	cbz	r0, 800841a <xQueueSemaphoreTake+0x12e>
						queueYIELD_IF_USING_PREEMPTION();
 800840a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800840e:	4b17      	ldr	r3, [pc, #92]	; (800846c <xQueueSemaphoreTake+0x180>)
 8008410:	601a      	str	r2, [r3, #0]
 8008412:	f3bf 8f4f 	dsb	sy
 8008416:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800841a:	f000 fff5 	bl	8009408 <vPortExitCritical>
				return pdPASS;
 800841e:	2501      	movs	r5, #1
}
 8008420:	4628      	mov	r0, r5
 8008422:	b004      	add	sp, #16
 8008424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 8008428:	4620      	mov	r0, r4
 800842a:	f7ff fc9c 	bl	8007d66 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800842e:	f000 fb0f 	bl	8008a50 <xTaskResumeAll>
 8008432:	e7d6      	b.n	80083e2 <xQueueSemaphoreTake+0xf6>
			prvUnlockQueue( pxQueue );
 8008434:	4620      	mov	r0, r4
 8008436:	f7ff fc96 	bl	8007d66 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800843a:	f000 fb09 	bl	8008a50 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800843e:	4620      	mov	r0, r4
 8008440:	f7ff fc3f 	bl	8007cc2 <prvIsQueueEmpty>
 8008444:	2800      	cmp	r0, #0
 8008446:	d0cc      	beq.n	80083e2 <xQueueSemaphoreTake+0xf6>
					if( xInheritanceOccurred != pdFALSE )
 8008448:	2d00      	cmp	r5, #0
 800844a:	d0e9      	beq.n	8008420 <xQueueSemaphoreTake+0x134>
						taskENTER_CRITICAL();
 800844c:	f000 ffba 	bl	80093c4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8008450:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008452:	b119      	cbz	r1, 800845c <xQueueSemaphoreTake+0x170>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008454:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008456:	6819      	ldr	r1, [r3, #0]
 8008458:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800845c:	6860      	ldr	r0, [r4, #4]
 800845e:	f000 fd41 	bl	8008ee4 <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 8008462:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 8008464:	f000 ffd0 	bl	8009408 <vPortExitCritical>
 8008468:	e7da      	b.n	8008420 <xQueueSemaphoreTake+0x134>
 800846a:	bf00      	nop
 800846c:	e000ed04 	.word	0xe000ed04

08008470 <xQueueReceiveFromISR>:
{
 8008470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008474:	4689      	mov	r9, r1
 8008476:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8008478:	4605      	mov	r5, r0
 800847a:	b940      	cbnz	r0, 800848e <xQueueReceiveFromISR+0x1e>
 800847c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008480:	f383 8811 	msr	BASEPRI, r3
 8008484:	f3bf 8f6f 	isb	sy
 8008488:	f3bf 8f4f 	dsb	sy
 800848c:	e7fe      	b.n	800848c <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800848e:	b951      	cbnz	r1, 80084a6 <xQueueReceiveFromISR+0x36>
 8008490:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008492:	b143      	cbz	r3, 80084a6 <xQueueReceiveFromISR+0x36>
 8008494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008498:	f383 8811 	msr	BASEPRI, r3
 800849c:	f3bf 8f6f 	isb	sy
 80084a0:	f3bf 8f4f 	dsb	sy
 80084a4:	e7fe      	b.n	80084a4 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80084a6:	f001 f86f 	bl	8009588 <vPortValidateInterruptPriority>
	__asm volatile
 80084aa:	f3ef 8711 	mrs	r7, BASEPRI
 80084ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b2:	f383 8811 	msr	BASEPRI, r3
 80084b6:	f3bf 8f6f 	isb	sy
 80084ba:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084be:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80084c0:	b31c      	cbz	r4, 800850a <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 80084c2:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80084c6:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 80084c8:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80084ca:	4628      	mov	r0, r5
 80084cc:	f7ff fc37 	bl	8007d3e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80084d0:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 80084d2:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80084d4:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 80084d6:	d113      	bne.n	8008500 <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084d8:	692b      	ldr	r3, [r5, #16]
 80084da:	b90b      	cbnz	r3, 80084e0 <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 80084dc:	2001      	movs	r0, #1
 80084de:	e00b      	b.n	80084f8 <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084e0:	f105 0010 	add.w	r0, r5, #16
 80084e4:	f000 fbdc 	bl	8008ca0 <xTaskRemoveFromEventList>
 80084e8:	2800      	cmp	r0, #0
 80084ea:	d0f7      	beq.n	80084dc <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 80084ec:	f1b8 0f00 	cmp.w	r8, #0
 80084f0:	d0f4      	beq.n	80084dc <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80084f2:	2001      	movs	r0, #1
 80084f4:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 80084f8:	f387 8811 	msr	BASEPRI, r7
}
 80084fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008500:	3601      	adds	r6, #1
 8008502:	b276      	sxtb	r6, r6
 8008504:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8008508:	e7e8      	b.n	80084dc <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 800850a:	4620      	mov	r0, r4
 800850c:	e7f4      	b.n	80084f8 <xQueueReceiveFromISR+0x88>
	...

08008510 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008510:	2300      	movs	r3, #0
	{
 8008512:	b530      	push	{r4, r5, lr}
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008514:	4a06      	ldr	r2, [pc, #24]	; (8008530 <vQueueAddToRegistry+0x20>)
 8008516:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800851a:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800851e:	b91d      	cbnz	r5, 8008528 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008520:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008524:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008526:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008528:	3301      	adds	r3, #1
 800852a:	2b08      	cmp	r3, #8
 800852c:	d1f3      	bne.n	8008516 <vQueueAddToRegistry+0x6>
 800852e:	e7fa      	b.n	8008526 <vQueueAddToRegistry+0x16>
 8008530:	20004668 	.word	0x20004668

08008534 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008534:	2300      	movs	r3, #0
	{
 8008536:	b510      	push	{r4, lr}
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008538:	4a07      	ldr	r2, [pc, #28]	; (8008558 <vQueueUnregisterQueue+0x24>)
 800853a:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800853e:	684c      	ldr	r4, [r1, #4]
 8008540:	4284      	cmp	r4, r0
 8008542:	d104      	bne.n	800854e <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008544:	2000      	movs	r0, #0
 8008546:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800854a:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800854c:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800854e:	3301      	adds	r3, #1
 8008550:	2b08      	cmp	r3, #8
 8008552:	d1f2      	bne.n	800853a <vQueueUnregisterQueue+0x6>
 8008554:	e7fa      	b.n	800854c <vQueueUnregisterQueue+0x18>
 8008556:	bf00      	nop
 8008558:	20004668 	.word	0x20004668

0800855c <vQueueDelete>:
{
 800855c:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800855e:	4604      	mov	r4, r0
 8008560:	b940      	cbnz	r0, 8008574 <vQueueDelete+0x18>
	__asm volatile
 8008562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008566:	f383 8811 	msr	BASEPRI, r3
 800856a:	f3bf 8f6f 	isb	sy
 800856e:	f3bf 8f4f 	dsb	sy
 8008572:	e7fe      	b.n	8008572 <vQueueDelete+0x16>
		vQueueUnregisterQueue( pxQueue );
 8008574:	f7ff ffde 	bl	8008534 <vQueueUnregisterQueue>
		vPortFree( pxQueue );
 8008578:	4620      	mov	r0, r4
}
 800857a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		vPortFree( pxQueue );
 800857e:	f001 b8e1 	b.w	8009744 <vPortFree>

08008582 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008582:	b570      	push	{r4, r5, r6, lr}
 8008584:	4604      	mov	r4, r0
 8008586:	460d      	mov	r5, r1
 8008588:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800858a:	f000 ff1b 	bl	80093c4 <vPortEnterCritical>
 800858e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008592:	2bff      	cmp	r3, #255	; 0xff
 8008594:	bf04      	itt	eq
 8008596:	2300      	moveq	r3, #0
 8008598:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 800859c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80085a0:	2bff      	cmp	r3, #255	; 0xff
 80085a2:	bf04      	itt	eq
 80085a4:	2300      	moveq	r3, #0
 80085a6:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 80085aa:	f000 ff2d 	bl	8009408 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80085ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80085b0:	b92b      	cbnz	r3, 80085be <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80085b2:	4632      	mov	r2, r6
 80085b4:	4629      	mov	r1, r5
 80085b6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80085ba:	f000 fb51 	bl	8008c60 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80085be:	4620      	mov	r0, r4
	}
 80085c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80085c4:	f7ff bbcf 	b.w	8007d66 <prvUnlockQueue>

080085c8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085c8:	4a06      	ldr	r2, [pc, #24]	; (80085e4 <prvResetNextTaskUnblockTime+0x1c>)
 80085ca:	6813      	ldr	r3, [r2, #0]
 80085cc:	6819      	ldr	r1, [r3, #0]
 80085ce:	4b06      	ldr	r3, [pc, #24]	; (80085e8 <prvResetNextTaskUnblockTime+0x20>)
 80085d0:	b919      	cbnz	r1, 80085da <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80085d2:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80085d6:	601a      	str	r2, [r3, #0]
	}
}
 80085d8:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80085da:	6812      	ldr	r2, [r2, #0]
 80085dc:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80085de:	68d2      	ldr	r2, [r2, #12]
 80085e0:	6852      	ldr	r2, [r2, #4]
 80085e2:	e7f8      	b.n	80085d6 <prvResetNextTaskUnblockTime+0xe>
 80085e4:	20000900 	.word	0x20000900
 80085e8:	20000db0 	.word	0x20000db0

080085ec <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80085ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ee:	4605      	mov	r5, r0
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80085f0:	4b15      	ldr	r3, [pc, #84]	; (8008648 <prvAddCurrentTaskToDelayedList+0x5c>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085f2:	4e16      	ldr	r6, [pc, #88]	; (800864c <prvAddCurrentTaskToDelayedList+0x60>)
const TickType_t xConstTickCount = xTickCount;
 80085f4:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085f6:	6830      	ldr	r0, [r6, #0]
{
 80085f8:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085fa:	3004      	adds	r0, #4
 80085fc:	f7ff fb50 	bl	8007ca0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008600:	1c6b      	adds	r3, r5, #1
 8008602:	4633      	mov	r3, r6
 8008604:	d107      	bne.n	8008616 <prvAddCurrentTaskToDelayedList+0x2a>
 8008606:	b137      	cbz	r7, 8008616 <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008608:	6831      	ldr	r1, [r6, #0]
 800860a:	4811      	ldr	r0, [pc, #68]	; (8008650 <prvAddCurrentTaskToDelayedList+0x64>)
 800860c:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800860e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008612:	f7ff bb22 	b.w	8007c5a <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	1964      	adds	r4, r4, r5
 800861a:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800861c:	d307      	bcc.n	800862e <prvAddCurrentTaskToDelayedList+0x42>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800861e:	4a0d      	ldr	r2, [pc, #52]	; (8008654 <prvAddCurrentTaskToDelayedList+0x68>)
 8008620:	6810      	ldr	r0, [r2, #0]
 8008622:	6819      	ldr	r1, [r3, #0]
}
 8008624:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008628:	3104      	adds	r1, #4
 800862a:	f7ff bb22 	b.w	8007c72 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800862e:	4a0a      	ldr	r2, [pc, #40]	; (8008658 <prvAddCurrentTaskToDelayedList+0x6c>)
 8008630:	6810      	ldr	r0, [r2, #0]
 8008632:	6819      	ldr	r1, [r3, #0]
 8008634:	3104      	adds	r1, #4
 8008636:	f7ff fb1c 	bl	8007c72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800863a:	4b08      	ldr	r3, [pc, #32]	; (800865c <prvAddCurrentTaskToDelayedList+0x70>)
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8008640:	bf88      	it	hi
 8008642:	601c      	strhi	r4, [r3, #0]
}
 8008644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008646:	bf00      	nop
 8008648:	20000df8 	.word	0x20000df8
 800864c:	200008fc 	.word	0x200008fc
 8008650:	20000dd0 	.word	0x20000dd0
 8008654:	20000904 	.word	0x20000904
 8008658:	20000900 	.word	0x20000900
 800865c:	20000db0 	.word	0x20000db0

08008660 <prvIdleTask>:
{
 8008660:	b580      	push	{r7, lr}
				taskYIELD();
 8008662:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80086c8 <prvIdleTask+0x68>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008666:	4f14      	ldr	r7, [pc, #80]	; (80086b8 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008668:	4c14      	ldr	r4, [pc, #80]	; (80086bc <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 800866a:	4e15      	ldr	r6, [pc, #84]	; (80086c0 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800866c:	6823      	ldr	r3, [r4, #0]
 800866e:	b963      	cbnz	r3, 800868a <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008670:	4b14      	ldr	r3, [pc, #80]	; (80086c4 <prvIdleTask+0x64>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2b01      	cmp	r3, #1
 8008676:	d9f8      	bls.n	800866a <prvIdleTask+0xa>
				taskYIELD();
 8008678:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800867c:	f8c8 3000 	str.w	r3, [r8]
 8008680:	f3bf 8f4f 	dsb	sy
 8008684:	f3bf 8f6f 	isb	sy
 8008688:	e7ee      	b.n	8008668 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 800868a:	f000 fe9b 	bl	80093c4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008692:	1d28      	adds	r0, r5, #4
 8008694:	f7ff fb04 	bl	8007ca0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008698:	6833      	ldr	r3, [r6, #0]
 800869a:	3b01      	subs	r3, #1
 800869c:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 800869e:	6823      	ldr	r3, [r4, #0]
 80086a0:	3b01      	subs	r3, #1
 80086a2:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80086a4:	f000 feb0 	bl	8009408 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 80086a8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80086aa:	f001 f84b 	bl	8009744 <vPortFree>
			vPortFree( pxTCB );
 80086ae:	4628      	mov	r0, r5
 80086b0:	f001 f848 	bl	8009744 <vPortFree>
 80086b4:	e7da      	b.n	800866c <prvIdleTask+0xc>
 80086b6:	bf00      	nop
 80086b8:	20000de4 	.word	0x20000de4
 80086bc:	20000d70 	.word	0x20000d70
 80086c0:	20000d6c 	.word	0x20000d6c
 80086c4:	20000908 	.word	0x20000908
 80086c8:	e000ed04 	.word	0xe000ed04

080086cc <xTaskCreate>:
	{
 80086cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086d0:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 80086d4:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086d6:	4650      	mov	r0, sl
	{
 80086d8:	460d      	mov	r5, r1
 80086da:	4699      	mov	r9, r3
 80086dc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086de:	f000 ffa5 	bl	800962c <pvPortMalloc>
			if( pxStack != NULL )
 80086e2:	4607      	mov	r7, r0
 80086e4:	2800      	cmp	r0, #0
 80086e6:	f000 809f 	beq.w	8008828 <xTaskCreate+0x15c>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80086ea:	2064      	movs	r0, #100	; 0x64
 80086ec:	f000 ff9e 	bl	800962c <pvPortMalloc>
				if( pxNewTCB != NULL )
 80086f0:	4604      	mov	r4, r0
 80086f2:	2800      	cmp	r0, #0
 80086f4:	f000 8095 	beq.w	8008822 <xTaskCreate+0x156>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80086f8:	4652      	mov	r2, sl
					pxNewTCB->pxStack = pxStack;
 80086fa:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80086fc:	21a5      	movs	r1, #165	; 0xa5
 80086fe:	4638      	mov	r0, r7
 8008700:	f001 f8a1 	bl	8009846 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008704:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008706:	f1aa 0a04 	sub.w	sl, sl, #4
 800870a:	449a      	add	sl, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800870c:	f02a 0a07 	bic.w	sl, sl, #7
 8008710:	1e6b      	subs	r3, r5, #1
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8008712:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
 8008716:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800871a:	350f      	adds	r5, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800871c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8008720:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8008724:	7819      	ldrb	r1, [r3, #0]
 8008726:	b109      	cbz	r1, 800872c <xTaskCreate+0x60>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008728:	42ab      	cmp	r3, r5
 800872a:	d1f7      	bne.n	800871c <xTaskCreate+0x50>
 800872c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800872e:	f04f 0b00 	mov.w	fp, #0
 8008732:	2d37      	cmp	r5, #55	; 0x37
 8008734:	bf28      	it	cs
 8008736:	2537      	movcs	r5, #55	; 0x37
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008738:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 800873a:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 800873c:	e9c4 5b14 	strd	r5, fp, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008740:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008742:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008746:	f7ff fa85 	bl	8007c54 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800874a:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800874e:	f104 0018 	add.w	r0, r4, #24
 8008752:	f7ff fa7f 	bl	8007c54 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8008756:	f8c4 b05c 	str.w	fp, [r4, #92]	; 0x5c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800875a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800875c:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800875e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulRunTimeCounter = 0UL;
 8008760:	f8c4 b058 	str.w	fp, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008764:	f884 b060 	strb.w	fp, [r4, #96]	; 0x60
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008768:	464a      	mov	r2, r9
 800876a:	4641      	mov	r1, r8
 800876c:	4650      	mov	r0, sl
 800876e:	f000 fe01 	bl	8009374 <pxPortInitialiseStack>
 8008772:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8008774:	b106      	cbz	r6, 8008778 <xTaskCreate+0xac>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008776:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8008778:	f000 fe24 	bl	80093c4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800877c:	4b32      	ldr	r3, [pc, #200]	; (8008848 <xTaskCreate+0x17c>)
		if( pxCurrentTCB == NULL )
 800877e:	4d33      	ldr	r5, [pc, #204]	; (800884c <xTaskCreate+0x180>)
		uxCurrentNumberOfTasks++;
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8008878 <xTaskCreate+0x1ac>
 8008786:	3201      	adds	r2, #1
 8008788:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800878a:	682e      	ldr	r6, [r5, #0]
 800878c:	2e00      	cmp	r6, #0
 800878e:	d14f      	bne.n	8008830 <xTaskCreate+0x164>
			pxCurrentTCB = pxNewTCB;
 8008790:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2b01      	cmp	r3, #1
 8008796:	d11f      	bne.n	80087d8 <xTaskCreate+0x10c>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008798:	f04f 0914 	mov.w	r9, #20
 800879c:	fb09 8006 	mla	r0, r9, r6, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80087a0:	3601      	adds	r6, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80087a2:	f7ff fa4c 	bl	8007c3e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80087a6:	2e38      	cmp	r6, #56	; 0x38
 80087a8:	d1f8      	bne.n	800879c <xTaskCreate+0xd0>
	vListInitialise( &xDelayedTaskList1 );
 80087aa:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 800887c <xTaskCreate+0x1b0>
	vListInitialise( &xDelayedTaskList2 );
 80087ae:	4e28      	ldr	r6, [pc, #160]	; (8008850 <xTaskCreate+0x184>)
	vListInitialise( &xDelayedTaskList1 );
 80087b0:	4648      	mov	r0, r9
 80087b2:	f7ff fa44 	bl	8007c3e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80087b6:	4630      	mov	r0, r6
 80087b8:	f7ff fa41 	bl	8007c3e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80087bc:	4825      	ldr	r0, [pc, #148]	; (8008854 <xTaskCreate+0x188>)
 80087be:	f7ff fa3e 	bl	8007c3e <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80087c2:	4825      	ldr	r0, [pc, #148]	; (8008858 <xTaskCreate+0x18c>)
 80087c4:	f7ff fa3b 	bl	8007c3e <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80087c8:	4824      	ldr	r0, [pc, #144]	; (800885c <xTaskCreate+0x190>)
 80087ca:	f7ff fa38 	bl	8007c3e <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80087ce:	4b24      	ldr	r3, [pc, #144]	; (8008860 <xTaskCreate+0x194>)
 80087d0:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80087d4:	4b23      	ldr	r3, [pc, #140]	; (8008864 <xTaskCreate+0x198>)
 80087d6:	601e      	str	r6, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80087d8:	2014      	movs	r0, #20
		uxTaskNumber++;
 80087da:	4a23      	ldr	r2, [pc, #140]	; (8008868 <xTaskCreate+0x19c>)
 80087dc:	6813      	ldr	r3, [r2, #0]
 80087de:	3301      	adds	r3, #1
 80087e0:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80087e2:	4a22      	ldr	r2, [pc, #136]	; (800886c <xTaskCreate+0x1a0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80087e4:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
 80087e6:	6811      	ldr	r1, [r2, #0]
 80087e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80087ea:	428b      	cmp	r3, r1
 80087ec:	fb00 8003 	mla	r0, r0, r3, r8
 80087f0:	4639      	mov	r1, r7
 80087f2:	bf88      	it	hi
 80087f4:	6013      	strhi	r3, [r2, #0]
 80087f6:	f7ff fa30 	bl	8007c5a <vListInsertEnd>
	taskEXIT_CRITICAL();
 80087fa:	f000 fe05 	bl	8009408 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80087fe:	4b1c      	ldr	r3, [pc, #112]	; (8008870 <xTaskCreate+0x1a4>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	b163      	cbz	r3, 800881e <xTaskCreate+0x152>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008804:	682b      	ldr	r3, [r5, #0]
 8008806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008808:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800880a:	429a      	cmp	r2, r3
 800880c:	d207      	bcs.n	800881e <xTaskCreate+0x152>
			taskYIELD_IF_USING_PREEMPTION();
 800880e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008812:	4b18      	ldr	r3, [pc, #96]	; (8008874 <xTaskCreate+0x1a8>)
 8008814:	601a      	str	r2, [r3, #0]
 8008816:	f3bf 8f4f 	dsb	sy
 800881a:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
 800881e:	2001      	movs	r0, #1
		return xReturn;
 8008820:	e004      	b.n	800882c <xTaskCreate+0x160>
					vPortFree( pxStack );
 8008822:	4638      	mov	r0, r7
 8008824:	f000 ff8e 	bl	8009744 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008828:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800882c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if( xSchedulerRunning == pdFALSE )
 8008830:	4b0f      	ldr	r3, [pc, #60]	; (8008870 <xTaskCreate+0x1a4>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d1cf      	bne.n	80087d8 <xTaskCreate+0x10c>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008838:	682b      	ldr	r3, [r5, #0]
 800883a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800883c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800883e:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8008840:	bf98      	it	ls
 8008842:	602c      	strls	r4, [r5, #0]
 8008844:	e7c8      	b.n	80087d8 <xTaskCreate+0x10c>
 8008846:	bf00      	nop
 8008848:	20000d6c 	.word	0x20000d6c
 800884c:	200008fc 	.word	0x200008fc
 8008850:	20000d98 	.word	0x20000d98
 8008854:	20000db8 	.word	0x20000db8
 8008858:	20000de4 	.word	0x20000de4
 800885c:	20000dd0 	.word	0x20000dd0
 8008860:	20000900 	.word	0x20000900
 8008864:	20000904 	.word	0x20000904
 8008868:	20000d7c 	.word	0x20000d7c
 800886c:	20000d80 	.word	0x20000d80
 8008870:	20000dcc 	.word	0x20000dcc
 8008874:	e000ed04 	.word	0xe000ed04
 8008878:	20000908 	.word	0x20000908
 800887c:	20000d84 	.word	0x20000d84

08008880 <vTaskStartScheduler>:
{
 8008880:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8008882:	2400      	movs	r4, #0
 8008884:	4b19      	ldr	r3, [pc, #100]	; (80088ec <vTaskStartScheduler+0x6c>)
 8008886:	9400      	str	r4, [sp, #0]
 8008888:	9301      	str	r3, [sp, #4]
 800888a:	2240      	movs	r2, #64	; 0x40
 800888c:	4623      	mov	r3, r4
 800888e:	4918      	ldr	r1, [pc, #96]	; (80088f0 <vTaskStartScheduler+0x70>)
 8008890:	4818      	ldr	r0, [pc, #96]	; (80088f4 <vTaskStartScheduler+0x74>)
 8008892:	f7ff ff1b 	bl	80086cc <xTaskCreate>
		if( xReturn == pdPASS )
 8008896:	2801      	cmp	r0, #1
 8008898:	d11a      	bne.n	80088d0 <vTaskStartScheduler+0x50>
			xReturn = xTimerCreateTimerTask();
 800889a:	f000 fbc7 	bl	800902c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800889e:	2801      	cmp	r0, #1
 80088a0:	d116      	bne.n	80088d0 <vTaskStartScheduler+0x50>
 80088a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a6:	f383 8811 	msr	BASEPRI, r3
 80088aa:	f3bf 8f6f 	isb	sy
 80088ae:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80088b2:	f04f 32ff 	mov.w	r2, #4294967295
 80088b6:	4b10      	ldr	r3, [pc, #64]	; (80088f8 <vTaskStartScheduler+0x78>)
 80088b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80088ba:	4b10      	ldr	r3, [pc, #64]	; (80088fc <vTaskStartScheduler+0x7c>)
 80088bc:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80088be:	4b10      	ldr	r3, [pc, #64]	; (8008900 <vTaskStartScheduler+0x80>)
 80088c0:	601c      	str	r4, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80088c2:	f7f8 fd1f 	bl	8001304 <configureTimerForRunTimeStats>
}
 80088c6:	b002      	add	sp, #8
 80088c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80088cc:	f000 be02 	b.w	80094d4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80088d0:	3001      	adds	r0, #1
 80088d2:	d108      	bne.n	80088e6 <vTaskStartScheduler+0x66>
 80088d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d8:	f383 8811 	msr	BASEPRI, r3
 80088dc:	f3bf 8f6f 	isb	sy
 80088e0:	f3bf 8f4f 	dsb	sy
 80088e4:	e7fe      	b.n	80088e4 <vTaskStartScheduler+0x64>
}
 80088e6:	b002      	add	sp, #8
 80088e8:	bd10      	pop	{r4, pc}
 80088ea:	bf00      	nop
 80088ec:	20000dac 	.word	0x20000dac
 80088f0:	0800cad0 	.word	0x0800cad0
 80088f4:	08008661 	.word	0x08008661
 80088f8:	20000db0 	.word	0x20000db0
 80088fc:	20000dcc 	.word	0x20000dcc
 8008900:	20000df8 	.word	0x20000df8

08008904 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8008904:	4a02      	ldr	r2, [pc, #8]	; (8008910 <vTaskSuspendAll+0xc>)
 8008906:	6813      	ldr	r3, [r2, #0]
 8008908:	3301      	adds	r3, #1
 800890a:	6013      	str	r3, [r2, #0]
}
 800890c:	4770      	bx	lr
 800890e:	bf00      	nop
 8008910:	20000d78 	.word	0x20000d78

08008914 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8008914:	4b01      	ldr	r3, [pc, #4]	; (800891c <xTaskGetTickCount+0x8>)
 8008916:	6818      	ldr	r0, [r3, #0]
}
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop
 800891c:	20000df8 	.word	0x20000df8

08008920 <xTaskGetTickCountFromISR>:
{
 8008920:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008922:	f000 fe31 	bl	8009588 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8008926:	4b01      	ldr	r3, [pc, #4]	; (800892c <xTaskGetTickCountFromISR+0xc>)
 8008928:	6818      	ldr	r0, [r3, #0]
}
 800892a:	bd08      	pop	{r3, pc}
 800892c:	20000df8 	.word	0x20000df8

08008930 <xTaskIncrementTick>:
{
 8008930:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008934:	4b3b      	ldr	r3, [pc, #236]	; (8008a24 <xTaskIncrementTick+0xf4>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d16b      	bne.n	8008a14 <xTaskIncrementTick+0xe4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800893c:	4b3a      	ldr	r3, [pc, #232]	; (8008a28 <xTaskIncrementTick+0xf8>)
 800893e:	681c      	ldr	r4, [r3, #0]
 8008940:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8008942:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008944:	b9bc      	cbnz	r4, 8008976 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8008946:	4b39      	ldr	r3, [pc, #228]	; (8008a2c <xTaskIncrementTick+0xfc>)
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	6812      	ldr	r2, [r2, #0]
 800894c:	b142      	cbz	r2, 8008960 <xTaskIncrementTick+0x30>
 800894e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008952:	f383 8811 	msr	BASEPRI, r3
 8008956:	f3bf 8f6f 	isb	sy
 800895a:	f3bf 8f4f 	dsb	sy
 800895e:	e7fe      	b.n	800895e <xTaskIncrementTick+0x2e>
 8008960:	4a33      	ldr	r2, [pc, #204]	; (8008a30 <xTaskIncrementTick+0x100>)
 8008962:	6819      	ldr	r1, [r3, #0]
 8008964:	6810      	ldr	r0, [r2, #0]
 8008966:	6018      	str	r0, [r3, #0]
 8008968:	6011      	str	r1, [r2, #0]
 800896a:	4a32      	ldr	r2, [pc, #200]	; (8008a34 <xTaskIncrementTick+0x104>)
 800896c:	6813      	ldr	r3, [r2, #0]
 800896e:	3301      	adds	r3, #1
 8008970:	6013      	str	r3, [r2, #0]
 8008972:	f7ff fe29 	bl	80085c8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008976:	4d30      	ldr	r5, [pc, #192]	; (8008a38 <xTaskIncrementTick+0x108>)
BaseType_t xSwitchRequired = pdFALSE;
 8008978:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 800897c:	682b      	ldr	r3, [r5, #0]
 800897e:	4f2f      	ldr	r7, [pc, #188]	; (8008a3c <xTaskIncrementTick+0x10c>)
 8008980:	42a3      	cmp	r3, r4
 8008982:	d911      	bls.n	80089a8 <xTaskIncrementTick+0x78>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008984:	683a      	ldr	r2, [r7, #0]
 8008986:	4b2e      	ldr	r3, [pc, #184]	; (8008a40 <xTaskIncrementTick+0x110>)
 8008988:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800898a:	2214      	movs	r2, #20
 800898c:	434a      	muls	r2, r1
 800898e:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8008990:	2a02      	cmp	r2, #2
 8008992:	bf28      	it	cs
 8008994:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8008998:	4a2a      	ldr	r2, [pc, #168]	; (8008a44 <xTaskIncrementTick+0x114>)
 800899a:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800899c:	2a00      	cmp	r2, #0
}
 800899e:	bf0c      	ite	eq
 80089a0:	4658      	moveq	r0, fp
 80089a2:	2001      	movne	r0, #1
 80089a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089a8:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8008a2c <xTaskIncrementTick+0xfc>
					prvAddTaskToReadyList( pxTCB );
 80089ac:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8008a4c <xTaskIncrementTick+0x11c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089b0:	f8d9 2000 	ldr.w	r2, [r9]
 80089b4:	6812      	ldr	r2, [r2, #0]
 80089b6:	b91a      	cbnz	r2, 80089c0 <xTaskIncrementTick+0x90>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089b8:	f04f 32ff 	mov.w	r2, #4294967295
 80089bc:	602a      	str	r2, [r5, #0]
					break;
 80089be:	e7e1      	b.n	8008984 <xTaskIncrementTick+0x54>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80089c0:	f8d9 2000 	ldr.w	r2, [r9]
 80089c4:	68d2      	ldr	r2, [r2, #12]
 80089c6:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80089c8:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 80089ca:	428c      	cmp	r4, r1
 80089cc:	d201      	bcs.n	80089d2 <xTaskIncrementTick+0xa2>
						xNextTaskUnblockTime = xItemValue;
 80089ce:	6029      	str	r1, [r5, #0]
						break;
 80089d0:	e7d8      	b.n	8008984 <xTaskIncrementTick+0x54>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089d2:	f106 0804 	add.w	r8, r6, #4
 80089d6:	4640      	mov	r0, r8
 80089d8:	f7ff f962 	bl	8007ca0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80089dc:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80089de:	b119      	cbz	r1, 80089e8 <xTaskIncrementTick+0xb8>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089e0:	f106 0018 	add.w	r0, r6, #24
 80089e4:	f7ff f95c 	bl	8007ca0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80089e8:	2214      	movs	r2, #20
 80089ea:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80089ec:	f8da 1000 	ldr.w	r1, [sl]
 80089f0:	4b13      	ldr	r3, [pc, #76]	; (8008a40 <xTaskIncrementTick+0x110>)
 80089f2:	4288      	cmp	r0, r1
 80089f4:	bf88      	it	hi
 80089f6:	f8ca 0000 	strhi.w	r0, [sl]
 80089fa:	4641      	mov	r1, r8
 80089fc:	fb02 3000 	mla	r0, r2, r0, r3
 8008a00:	f7ff f92b 	bl	8007c5a <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a04:	6838      	ldr	r0, [r7, #0]
 8008a06:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8008a08:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8008a0a:	4291      	cmp	r1, r2
 8008a0c:	bf28      	it	cs
 8008a0e:	f04f 0b01 	movcs.w	fp, #1
 8008a12:	e7cd      	b.n	80089b0 <xTaskIncrementTick+0x80>
		++uxPendedTicks;
 8008a14:	4a0c      	ldr	r2, [pc, #48]	; (8008a48 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 8008a16:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 8008a1a:	6813      	ldr	r3, [r2, #0]
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	6013      	str	r3, [r2, #0]
 8008a20:	e7ba      	b.n	8008998 <xTaskIncrementTick+0x68>
 8008a22:	bf00      	nop
 8008a24:	20000d78 	.word	0x20000d78
 8008a28:	20000df8 	.word	0x20000df8
 8008a2c:	20000900 	.word	0x20000900
 8008a30:	20000904 	.word	0x20000904
 8008a34:	20000db4 	.word	0x20000db4
 8008a38:	20000db0 	.word	0x20000db0
 8008a3c:	200008fc 	.word	0x200008fc
 8008a40:	20000908 	.word	0x20000908
 8008a44:	20000dfc 	.word	0x20000dfc
 8008a48:	20000d74 	.word	0x20000d74
 8008a4c:	20000d80 	.word	0x20000d80

08008a50 <xTaskResumeAll>:
{
 8008a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8008a54:	4c2f      	ldr	r4, [pc, #188]	; (8008b14 <xTaskResumeAll+0xc4>)
 8008a56:	6823      	ldr	r3, [r4, #0]
 8008a58:	b943      	cbnz	r3, 8008a6c <xTaskResumeAll+0x1c>
 8008a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5e:	f383 8811 	msr	BASEPRI, r3
 8008a62:	f3bf 8f6f 	isb	sy
 8008a66:	f3bf 8f4f 	dsb	sy
 8008a6a:	e7fe      	b.n	8008a6a <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8008a6c:	f000 fcaa 	bl	80093c4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8008a70:	6823      	ldr	r3, [r4, #0]
 8008a72:	3b01      	subs	r3, #1
 8008a74:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a76:	6824      	ldr	r4, [r4, #0]
 8008a78:	b12c      	cbz	r4, 8008a86 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8008a7a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008a7c:	f000 fcc4 	bl	8009408 <vPortExitCritical>
}
 8008a80:	4620      	mov	r0, r4
 8008a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008a86:	4b24      	ldr	r3, [pc, #144]	; (8008b18 <xTaskResumeAll+0xc8>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d0f5      	beq.n	8008a7a <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a8e:	4d23      	ldr	r5, [pc, #140]	; (8008b1c <xTaskResumeAll+0xcc>)
					prvAddTaskToReadyList( pxTCB );
 8008a90:	4e23      	ldr	r6, [pc, #140]	; (8008b20 <xTaskResumeAll+0xd0>)
 8008a92:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8008b34 <xTaskResumeAll+0xe4>
 8008a96:	e01d      	b.n	8008ad4 <xTaskResumeAll+0x84>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008a98:	68eb      	ldr	r3, [r5, #12]
 8008a9a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a9c:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a9e:	f104 0018 	add.w	r0, r4, #24
 8008aa2:	f7ff f8fd 	bl	8007ca0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008aa6:	4638      	mov	r0, r7
 8008aa8:	f7ff f8fa 	bl	8007ca0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008aac:	2014      	movs	r0, #20
 8008aae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008ab0:	6832      	ldr	r2, [r6, #0]
 8008ab2:	fb00 8003 	mla	r0, r0, r3, r8
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	4639      	mov	r1, r7
 8008aba:	bf88      	it	hi
 8008abc:	6033      	strhi	r3, [r6, #0]
 8008abe:	f7ff f8cc 	bl	8007c5a <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ac2:	4b18      	ldr	r3, [pc, #96]	; (8008b24 <xTaskResumeAll+0xd4>)
 8008ac4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d302      	bcc.n	8008ad4 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 8008ace:	2201      	movs	r2, #1
 8008ad0:	4b15      	ldr	r3, [pc, #84]	; (8008b28 <xTaskResumeAll+0xd8>)
 8008ad2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ad4:	682b      	ldr	r3, [r5, #0]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d1de      	bne.n	8008a98 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8008ada:	b10c      	cbz	r4, 8008ae0 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 8008adc:	f7ff fd74 	bl	80085c8 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008ae0:	4d12      	ldr	r5, [pc, #72]	; (8008b2c <xTaskResumeAll+0xdc>)
 8008ae2:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008ae4:	b144      	cbz	r4, 8008af8 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 8008ae6:	2701      	movs	r7, #1
 8008ae8:	4e0f      	ldr	r6, [pc, #60]	; (8008b28 <xTaskResumeAll+0xd8>)
							if( xTaskIncrementTick() != pdFALSE )
 8008aea:	f7ff ff21 	bl	8008930 <xTaskIncrementTick>
 8008aee:	b100      	cbz	r0, 8008af2 <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 8008af0:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008af2:	3c01      	subs	r4, #1
 8008af4:	d1f9      	bne.n	8008aea <xTaskResumeAll+0x9a>
						uxPendedTicks = 0;
 8008af6:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8008af8:	4b0b      	ldr	r3, [pc, #44]	; (8008b28 <xTaskResumeAll+0xd8>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d0bc      	beq.n	8008a7a <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8008b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b04:	4b0a      	ldr	r3, [pc, #40]	; (8008b30 <xTaskResumeAll+0xe0>)
 8008b06:	601a      	str	r2, [r3, #0]
 8008b08:	f3bf 8f4f 	dsb	sy
 8008b0c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8008b10:	2401      	movs	r4, #1
 8008b12:	e7b3      	b.n	8008a7c <xTaskResumeAll+0x2c>
 8008b14:	20000d78 	.word	0x20000d78
 8008b18:	20000d6c 	.word	0x20000d6c
 8008b1c:	20000db8 	.word	0x20000db8
 8008b20:	20000d80 	.word	0x20000d80
 8008b24:	200008fc 	.word	0x200008fc
 8008b28:	20000dfc 	.word	0x20000dfc
 8008b2c:	20000d74 	.word	0x20000d74
 8008b30:	e000ed04 	.word	0xe000ed04
 8008b34:	20000908 	.word	0x20000908

08008b38 <vTaskDelay>:
	{
 8008b38:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008b3a:	b940      	cbnz	r0, 8008b4e <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8008b3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b40:	4b0d      	ldr	r3, [pc, #52]	; (8008b78 <vTaskDelay+0x40>)
 8008b42:	601a      	str	r2, [r3, #0]
 8008b44:	f3bf 8f4f 	dsb	sy
 8008b48:	f3bf 8f6f 	isb	sy
	}
 8008b4c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8008b4e:	4b0b      	ldr	r3, [pc, #44]	; (8008b7c <vTaskDelay+0x44>)
 8008b50:	6819      	ldr	r1, [r3, #0]
 8008b52:	b141      	cbz	r1, 8008b66 <vTaskDelay+0x2e>
 8008b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b58:	f383 8811 	msr	BASEPRI, r3
 8008b5c:	f3bf 8f6f 	isb	sy
 8008b60:	f3bf 8f4f 	dsb	sy
 8008b64:	e7fe      	b.n	8008b64 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8008b66:	f7ff fecd 	bl	8008904 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008b6a:	f7ff fd3f 	bl	80085ec <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8008b6e:	f7ff ff6f 	bl	8008a50 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8008b72:	2800      	cmp	r0, #0
 8008b74:	d0e2      	beq.n	8008b3c <vTaskDelay+0x4>
 8008b76:	e7e9      	b.n	8008b4c <vTaskDelay+0x14>
 8008b78:	e000ed04 	.word	0xe000ed04
 8008b7c:	20000d78 	.word	0x20000d78

08008b80 <vTaskSwitchContext>:
{
 8008b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008b82:	4b24      	ldr	r3, [pc, #144]	; (8008c14 <vTaskSwitchContext+0x94>)
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	4b24      	ldr	r3, [pc, #144]	; (8008c18 <vTaskSwitchContext+0x98>)
 8008b88:	b112      	cbz	r2, 8008b90 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	601a      	str	r2, [r3, #0]
}
 8008b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		xYieldPending = pdFALSE;
 8008b90:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8008b92:	f7f8 fbb8 	bl	8001306 <getRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8008b96:	4a21      	ldr	r2, [pc, #132]	; (8008c1c <vTaskSwitchContext+0x9c>)
 8008b98:	4c21      	ldr	r4, [pc, #132]	; (8008c20 <vTaskSwitchContext+0xa0>)
 8008b9a:	6815      	ldr	r5, [r2, #0]
 8008b9c:	42a8      	cmp	r0, r5
 8008b9e:	d904      	bls.n	8008baa <vTaskSwitchContext+0x2a>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8008ba0:	6821      	ldr	r1, [r4, #0]
 8008ba2:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 8008ba4:	1b5b      	subs	r3, r3, r5
 8008ba6:	4403      	add	r3, r0
 8008ba8:	658b      	str	r3, [r1, #88]	; 0x58
				ulTaskSwitchedInTime = ulTotalRunTime;
 8008baa:	6010      	str	r0, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8008bac:	6822      	ldr	r2, [r4, #0]
 8008bae:	6823      	ldr	r3, [r4, #0]
 8008bb0:	6812      	ldr	r2, [r2, #0]
 8008bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d804      	bhi.n	8008bc2 <vTaskSwitchContext+0x42>
 8008bb8:	6820      	ldr	r0, [r4, #0]
 8008bba:	6821      	ldr	r1, [r4, #0]
 8008bbc:	3134      	adds	r1, #52	; 0x34
 8008bbe:	f7ff f83d 	bl	8007c3c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008bc2:	4a18      	ldr	r2, [pc, #96]	; (8008c24 <vTaskSwitchContext+0xa4>)
 8008bc4:	f04f 0c14 	mov.w	ip, #20
 8008bc8:	4617      	mov	r7, r2
 8008bca:	4e17      	ldr	r6, [pc, #92]	; (8008c28 <vTaskSwitchContext+0xa8>)
 8008bcc:	6833      	ldr	r3, [r6, #0]
 8008bce:	fb0c f103 	mul.w	r1, ip, r3
 8008bd2:	5855      	ldr	r5, [r2, r1]
 8008bd4:	1850      	adds	r0, r2, r1
 8008bd6:	b18d      	cbz	r5, 8008bfc <vTaskSwitchContext+0x7c>
 8008bd8:	6845      	ldr	r5, [r0, #4]
 8008bda:	3108      	adds	r1, #8
 8008bdc:	686d      	ldr	r5, [r5, #4]
 8008bde:	440a      	add	r2, r1
 8008be0:	4295      	cmp	r5, r2
 8008be2:	bf08      	it	eq
 8008be4:	686a      	ldreq	r2, [r5, #4]
 8008be6:	6045      	str	r5, [r0, #4]
 8008be8:	bf08      	it	eq
 8008bea:	6042      	streq	r2, [r0, #4]
 8008bec:	2214      	movs	r2, #20
 8008bee:	fb02 7203 	mla	r2, r2, r3, r7
 8008bf2:	6852      	ldr	r2, [r2, #4]
 8008bf4:	68d2      	ldr	r2, [r2, #12]
 8008bf6:	6022      	str	r2, [r4, #0]
 8008bf8:	6033      	str	r3, [r6, #0]
}
 8008bfa:	e7c8      	b.n	8008b8e <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008bfc:	b943      	cbnz	r3, 8008c10 <vTaskSwitchContext+0x90>
 8008bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c02:	f383 8811 	msr	BASEPRI, r3
 8008c06:	f3bf 8f6f 	isb	sy
 8008c0a:	f3bf 8f4f 	dsb	sy
 8008c0e:	e7fe      	b.n	8008c0e <vTaskSwitchContext+0x8e>
 8008c10:	3b01      	subs	r3, #1
 8008c12:	e7dc      	b.n	8008bce <vTaskSwitchContext+0x4e>
 8008c14:	20000d78 	.word	0x20000d78
 8008c18:	20000dfc 	.word	0x20000dfc
 8008c1c:	20000d68 	.word	0x20000d68
 8008c20:	200008fc 	.word	0x200008fc
 8008c24:	20000908 	.word	0x20000908
 8008c28:	20000d80 	.word	0x20000d80

08008c2c <vTaskPlaceOnEventList>:
{
 8008c2c:	b510      	push	{r4, lr}
 8008c2e:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8008c30:	b940      	cbnz	r0, 8008c44 <vTaskPlaceOnEventList+0x18>
 8008c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c36:	f383 8811 	msr	BASEPRI, r3
 8008c3a:	f3bf 8f6f 	isb	sy
 8008c3e:	f3bf 8f4f 	dsb	sy
 8008c42:	e7fe      	b.n	8008c42 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c44:	4b05      	ldr	r3, [pc, #20]	; (8008c5c <vTaskPlaceOnEventList+0x30>)
 8008c46:	6819      	ldr	r1, [r3, #0]
 8008c48:	3118      	adds	r1, #24
 8008c4a:	f7ff f812 	bl	8007c72 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008c4e:	4620      	mov	r0, r4
}
 8008c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008c54:	2101      	movs	r1, #1
 8008c56:	f7ff bcc9 	b.w	80085ec <prvAddCurrentTaskToDelayedList>
 8008c5a:	bf00      	nop
 8008c5c:	200008fc 	.word	0x200008fc

08008c60 <vTaskPlaceOnEventListRestricted>:
	{
 8008c60:	b538      	push	{r3, r4, r5, lr}
 8008c62:	460d      	mov	r5, r1
 8008c64:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8008c66:	b940      	cbnz	r0, 8008c7a <vTaskPlaceOnEventListRestricted+0x1a>
 8008c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c6c:	f383 8811 	msr	BASEPRI, r3
 8008c70:	f3bf 8f6f 	isb	sy
 8008c74:	f3bf 8f4f 	dsb	sy
 8008c78:	e7fe      	b.n	8008c78 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c7a:	4b08      	ldr	r3, [pc, #32]	; (8008c9c <vTaskPlaceOnEventListRestricted+0x3c>)
 8008c7c:	6819      	ldr	r1, [r3, #0]
 8008c7e:	3118      	adds	r1, #24
 8008c80:	f7fe ffeb 	bl	8007c5a <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8008c84:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008c86:	4621      	mov	r1, r4
 8008c88:	bf08      	it	eq
 8008c8a:	4628      	moveq	r0, r5
	}
 8008c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008c90:	bf18      	it	ne
 8008c92:	f04f 30ff 	movne.w	r0, #4294967295
 8008c96:	f7ff bca9 	b.w	80085ec <prvAddCurrentTaskToDelayedList>
 8008c9a:	bf00      	nop
 8008c9c:	200008fc 	.word	0x200008fc

08008ca0 <xTaskRemoveFromEventList>:
{
 8008ca0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008ca2:	68c3      	ldr	r3, [r0, #12]
 8008ca4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8008ca6:	b944      	cbnz	r4, 8008cba <xTaskRemoveFromEventList+0x1a>
 8008ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cac:	f383 8811 	msr	BASEPRI, r3
 8008cb0:	f3bf 8f6f 	isb	sy
 8008cb4:	f3bf 8f4f 	dsb	sy
 8008cb8:	e7fe      	b.n	8008cb8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008cba:	f104 0518 	add.w	r5, r4, #24
 8008cbe:	4628      	mov	r0, r5
 8008cc0:	f7fe ffee 	bl	8007ca0 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cc4:	4b10      	ldr	r3, [pc, #64]	; (8008d08 <xTaskRemoveFromEventList+0x68>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	b9db      	cbnz	r3, 8008d02 <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008cca:	1d25      	adds	r5, r4, #4
 8008ccc:	4628      	mov	r0, r5
 8008cce:	f7fe ffe7 	bl	8007ca0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008cd2:	4a0e      	ldr	r2, [pc, #56]	; (8008d0c <xTaskRemoveFromEventList+0x6c>)
 8008cd4:	2014      	movs	r0, #20
 8008cd6:	6811      	ldr	r1, [r2, #0]
 8008cd8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008cda:	428b      	cmp	r3, r1
 8008cdc:	4629      	mov	r1, r5
 8008cde:	bf88      	it	hi
 8008ce0:	6013      	strhi	r3, [r2, #0]
 8008ce2:	4a0b      	ldr	r2, [pc, #44]	; (8008d10 <xTaskRemoveFromEventList+0x70>)
 8008ce4:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008ce8:	f7fe ffb7 	bl	8007c5a <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008cec:	4b09      	ldr	r3, [pc, #36]	; (8008d14 <xTaskRemoveFromEventList+0x74>)
 8008cee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf4:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8008cf6:	bf85      	ittet	hi
 8008cf8:	2001      	movhi	r0, #1
 8008cfa:	4b07      	ldrhi	r3, [pc, #28]	; (8008d18 <xTaskRemoveFromEventList+0x78>)
		xReturn = pdFALSE;
 8008cfc:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 8008cfe:	6018      	strhi	r0, [r3, #0]
}
 8008d00:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008d02:	4629      	mov	r1, r5
 8008d04:	4805      	ldr	r0, [pc, #20]	; (8008d1c <xTaskRemoveFromEventList+0x7c>)
 8008d06:	e7ef      	b.n	8008ce8 <xTaskRemoveFromEventList+0x48>
 8008d08:	20000d78 	.word	0x20000d78
 8008d0c:	20000d80 	.word	0x20000d80
 8008d10:	20000908 	.word	0x20000908
 8008d14:	200008fc 	.word	0x200008fc
 8008d18:	20000dfc 	.word	0x20000dfc
 8008d1c:	20000db8 	.word	0x20000db8

08008d20 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008d20:	4b03      	ldr	r3, [pc, #12]	; (8008d30 <vTaskInternalSetTimeOutState+0x10>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008d26:	4b03      	ldr	r3, [pc, #12]	; (8008d34 <vTaskInternalSetTimeOutState+0x14>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	6043      	str	r3, [r0, #4]
}
 8008d2c:	4770      	bx	lr
 8008d2e:	bf00      	nop
 8008d30:	20000db4 	.word	0x20000db4
 8008d34:	20000df8 	.word	0x20000df8

08008d38 <xTaskCheckForTimeOut>:
{
 8008d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d3a:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8008d3c:	4605      	mov	r5, r0
 8008d3e:	b940      	cbnz	r0, 8008d52 <xTaskCheckForTimeOut+0x1a>
 8008d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d44:	f383 8811 	msr	BASEPRI, r3
 8008d48:	f3bf 8f6f 	isb	sy
 8008d4c:	f3bf 8f4f 	dsb	sy
 8008d50:	e7fe      	b.n	8008d50 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8008d52:	b941      	cbnz	r1, 8008d66 <xTaskCheckForTimeOut+0x2e>
 8008d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d58:	f383 8811 	msr	BASEPRI, r3
 8008d5c:	f3bf 8f6f 	isb	sy
 8008d60:	f3bf 8f4f 	dsb	sy
 8008d64:	e7fe      	b.n	8008d64 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8008d66:	f000 fb2d 	bl	80093c4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8008d6a:	4b0f      	ldr	r3, [pc, #60]	; (8008da8 <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008d6c:	6868      	ldr	r0, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 8008d6e:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8008d70:	6823      	ldr	r3, [r4, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008d72:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 8008d74:	1c5e      	adds	r6, r3, #1
 8008d76:	d00d      	beq.n	8008d94 <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008d78:	4e0c      	ldr	r6, [pc, #48]	; (8008dac <xTaskCheckForTimeOut+0x74>)
 8008d7a:	682f      	ldr	r7, [r5, #0]
 8008d7c:	6836      	ldr	r6, [r6, #0]
 8008d7e:	42b7      	cmp	r7, r6
 8008d80:	d001      	beq.n	8008d86 <xTaskCheckForTimeOut+0x4e>
 8008d82:	4288      	cmp	r0, r1
 8008d84:	d90d      	bls.n	8008da2 <xTaskCheckForTimeOut+0x6a>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d909      	bls.n	8008d9e <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 8008d8a:	1a9b      	subs	r3, r3, r2
 8008d8c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008d8e:	4628      	mov	r0, r5
 8008d90:	f7ff ffc6 	bl	8008d20 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8008d94:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008d96:	f000 fb37 	bl	8009408 <vPortExitCritical>
}
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*pxTicksToWait = 0;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8008da2:	2401      	movs	r4, #1
 8008da4:	e7f7      	b.n	8008d96 <xTaskCheckForTimeOut+0x5e>
 8008da6:	bf00      	nop
 8008da8:	20000df8 	.word	0x20000df8
 8008dac:	20000db4 	.word	0x20000db4

08008db0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8008db0:	2201      	movs	r2, #1
 8008db2:	4b01      	ldr	r3, [pc, #4]	; (8008db8 <vTaskMissedYield+0x8>)
 8008db4:	601a      	str	r2, [r3, #0]
}
 8008db6:	4770      	bx	lr
 8008db8:	20000dfc 	.word	0x20000dfc

08008dbc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8008dbc:	4b05      	ldr	r3, [pc, #20]	; (8008dd4 <xTaskGetSchedulerState+0x18>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	b133      	cbz	r3, 8008dd0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008dc2:	4b05      	ldr	r3, [pc, #20]	; (8008dd8 <xTaskGetSchedulerState+0x1c>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8008dc8:	bf0c      	ite	eq
 8008dca:	2002      	moveq	r0, #2
 8008dcc:	2000      	movne	r0, #0
 8008dce:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008dd0:	2001      	movs	r0, #1
	}
 8008dd2:	4770      	bx	lr
 8008dd4:	20000dcc 	.word	0x20000dcc
 8008dd8:	20000d78 	.word	0x20000d78

08008ddc <xTaskPriorityInherit>:
	{
 8008ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8008dde:	4604      	mov	r4, r0
 8008de0:	2800      	cmp	r0, #0
 8008de2:	d02b      	beq.n	8008e3c <xTaskPriorityInherit+0x60>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008de4:	4a1b      	ldr	r2, [pc, #108]	; (8008e54 <xTaskPriorityInherit+0x78>)
 8008de6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008de8:	6811      	ldr	r1, [r2, #0]
 8008dea:	4616      	mov	r6, r2
 8008dec:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8008dee:	428b      	cmp	r3, r1
 8008df0:	d227      	bcs.n	8008e42 <xTaskPriorityInherit+0x66>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008df2:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008df4:	4d18      	ldr	r5, [pc, #96]	; (8008e58 <xTaskPriorityInherit+0x7c>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008df6:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008df8:	bfa1      	itttt	ge
 8008dfa:	6832      	ldrge	r2, [r6, #0]
 8008dfc:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8008dfe:	f1c2 0238 	rsbge	r2, r2, #56	; 0x38
 8008e02:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008e04:	2214      	movs	r2, #20
 8008e06:	fb02 5303 	mla	r3, r2, r3, r5
 8008e0a:	6942      	ldr	r2, [r0, #20]
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d111      	bne.n	8008e34 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e10:	1d07      	adds	r7, r0, #4
 8008e12:	4638      	mov	r0, r7
 8008e14:	f7fe ff44 	bl	8007ca0 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008e18:	6833      	ldr	r3, [r6, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008e1a:	4a10      	ldr	r2, [pc, #64]	; (8008e5c <xTaskPriorityInherit+0x80>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008e1e:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008e20:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008e22:	428b      	cmp	r3, r1
 8008e24:	d80b      	bhi.n	8008e3e <xTaskPriorityInherit+0x62>
 8008e26:	2014      	movs	r0, #20
 8008e28:	4639      	mov	r1, r7
 8008e2a:	fb00 5003 	mla	r0, r0, r3, r5
 8008e2e:	f7fe ff14 	bl	8007c5a <vListInsertEnd>
 8008e32:	e002      	b.n	8008e3a <xTaskPriorityInherit+0x5e>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008e34:	6833      	ldr	r3, [r6, #0]
 8008e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e38:	62c3      	str	r3, [r0, #44]	; 0x2c
				xReturn = pdTRUE;
 8008e3a:	2001      	movs	r0, #1
	}
 8008e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008e3e:	6013      	str	r3, [r2, #0]
 8008e40:	e7f1      	b.n	8008e26 <xTaskPriorityInherit+0x4a>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008e42:	6813      	ldr	r3, [r2, #0]
 8008e44:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8008e46:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8008e48:	42a0      	cmp	r0, r4
 8008e4a:	bf2c      	ite	cs
 8008e4c:	2000      	movcs	r0, #0
 8008e4e:	2001      	movcc	r0, #1
 8008e50:	e7f4      	b.n	8008e3c <xTaskPriorityInherit+0x60>
 8008e52:	bf00      	nop
 8008e54:	200008fc 	.word	0x200008fc
 8008e58:	20000908 	.word	0x20000908
 8008e5c:	20000d80 	.word	0x20000d80

08008e60 <xTaskPriorityDisinherit>:
	{
 8008e60:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8008e62:	b908      	cbnz	r0, 8008e68 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 8008e64:	2000      	movs	r0, #0
	}
 8008e66:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8008e68:	4b1b      	ldr	r3, [pc, #108]	; (8008ed8 <xTaskPriorityDisinherit+0x78>)
 8008e6a:	681c      	ldr	r4, [r3, #0]
 8008e6c:	4284      	cmp	r4, r0
 8008e6e:	d008      	beq.n	8008e82 <xTaskPriorityDisinherit+0x22>
 8008e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e74:	f383 8811 	msr	BASEPRI, r3
 8008e78:	f3bf 8f6f 	isb	sy
 8008e7c:	f3bf 8f4f 	dsb	sy
 8008e80:	e7fe      	b.n	8008e80 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8008e82:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008e84:	b943      	cbnz	r3, 8008e98 <xTaskPriorityDisinherit+0x38>
 8008e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e8a:	f383 8811 	msr	BASEPRI, r3
 8008e8e:	f3bf 8f6f 	isb	sy
 8008e92:	f3bf 8f4f 	dsb	sy
 8008e96:	e7fe      	b.n	8008e96 <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008e98:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008e9a:	6d22      	ldr	r2, [r4, #80]	; 0x50
			( pxTCB->uxMutexesHeld )--;
 8008e9c:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008e9e:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8008ea0:	6563      	str	r3, [r4, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008ea2:	d0df      	beq.n	8008e64 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d1dd      	bne.n	8008e64 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ea8:	1d25      	adds	r5, r4, #4
 8008eaa:	4628      	mov	r0, r5
 8008eac:	f7fe fef8 	bl	8007ca0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008eb0:	2014      	movs	r0, #20
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008eb2:	6d23      	ldr	r3, [r4, #80]	; 0x50
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008eb4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008eb8:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8008eba:	4a08      	ldr	r2, [pc, #32]	; (8008edc <xTaskPriorityDisinherit+0x7c>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008ebc:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8008ebe:	6811      	ldr	r1, [r2, #0]
 8008ec0:	428b      	cmp	r3, r1
 8008ec2:	bf88      	it	hi
 8008ec4:	6013      	strhi	r3, [r2, #0]
 8008ec6:	4a06      	ldr	r2, [pc, #24]	; (8008ee0 <xTaskPriorityDisinherit+0x80>)
 8008ec8:	4629      	mov	r1, r5
 8008eca:	fb00 2003 	mla	r0, r0, r3, r2
 8008ece:	f7fe fec4 	bl	8007c5a <vListInsertEnd>
					xReturn = pdTRUE;
 8008ed2:	2001      	movs	r0, #1
		return xReturn;
 8008ed4:	e7c7      	b.n	8008e66 <xTaskPriorityDisinherit+0x6>
 8008ed6:	bf00      	nop
 8008ed8:	200008fc 	.word	0x200008fc
 8008edc:	20000d80 	.word	0x20000d80
 8008ee0:	20000908 	.word	0x20000908

08008ee4 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8008ee4:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8008ee6:	4604      	mov	r4, r0
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	d041      	beq.n	8008f70 <vTaskPriorityDisinheritAfterTimeout+0x8c>
			configASSERT( pxTCB->uxMutexesHeld );
 8008eec:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8008eee:	b942      	cbnz	r2, 8008f02 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8008ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef4:	f383 8811 	msr	BASEPRI, r3
 8008ef8:	f3bf 8f6f 	isb	sy
 8008efc:	f3bf 8f4f 	dsb	sy
 8008f00:	e7fe      	b.n	8008f00 <vTaskPriorityDisinheritAfterTimeout+0x1c>
 8008f02:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008f04:	4299      	cmp	r1, r3
 8008f06:	bf38      	it	cc
 8008f08:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008f0a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008f0c:	428b      	cmp	r3, r1
 8008f0e:	d02f      	beq.n	8008f70 <vTaskPriorityDisinheritAfterTimeout+0x8c>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008f10:	2a01      	cmp	r2, #1
 8008f12:	d12d      	bne.n	8008f70 <vTaskPriorityDisinheritAfterTimeout+0x8c>
					configASSERT( pxTCB != pxCurrentTCB );
 8008f14:	4a17      	ldr	r2, [pc, #92]	; (8008f74 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 8008f16:	6812      	ldr	r2, [r2, #0]
 8008f18:	4282      	cmp	r2, r0
 8008f1a:	d108      	bne.n	8008f2e <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8008f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f20:	f383 8811 	msr	BASEPRI, r3
 8008f24:	f3bf 8f6f 	isb	sy
 8008f28:	f3bf 8f4f 	dsb	sy
 8008f2c:	e7fe      	b.n	8008f2c <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008f2e:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008f30:	4d11      	ldr	r5, [pc, #68]	; (8008f78 <vTaskPriorityDisinheritAfterTimeout+0x94>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008f32:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008f34:	f04f 0214 	mov.w	r2, #20
 8008f38:	fb02 5303 	mla	r3, r2, r3, r5
 8008f3c:	6942      	ldr	r2, [r0, #20]
					pxTCB->uxPriority = uxPriorityToUse;
 8008f3e:	62c1      	str	r1, [r0, #44]	; 0x2c
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f40:	bfa4      	itt	ge
 8008f42:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
 8008f46:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d111      	bne.n	8008f70 <vTaskPriorityDisinheritAfterTimeout+0x8c>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f4c:	1d06      	adds	r6, r0, #4
 8008f4e:	4630      	mov	r0, r6
 8008f50:	f7fe fea6 	bl	8007ca0 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8008f54:	2014      	movs	r0, #20
 8008f56:	4a09      	ldr	r2, [pc, #36]	; (8008f7c <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8008f58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008f5a:	6811      	ldr	r1, [r2, #0]
 8008f5c:	fb00 5003 	mla	r0, r0, r3, r5
 8008f60:	428b      	cmp	r3, r1
 8008f62:	4631      	mov	r1, r6
	}
 8008f64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 8008f68:	bf88      	it	hi
 8008f6a:	6013      	strhi	r3, [r2, #0]
 8008f6c:	f7fe be75 	b.w	8007c5a <vListInsertEnd>
	}
 8008f70:	bd70      	pop	{r4, r5, r6, pc}
 8008f72:	bf00      	nop
 8008f74:	200008fc 	.word	0x200008fc
 8008f78:	20000908 	.word	0x20000908
 8008f7c:	20000d80 	.word	0x20000d80

08008f80 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8008f80:	4b04      	ldr	r3, [pc, #16]	; (8008f94 <pvTaskIncrementMutexHeldCount+0x14>)
 8008f82:	681a      	ldr	r2, [r3, #0]
 8008f84:	b11a      	cbz	r2, 8008f8e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8008f86:	6819      	ldr	r1, [r3, #0]
 8008f88:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8008f8a:	3201      	adds	r2, #1
 8008f8c:	654a      	str	r2, [r1, #84]	; 0x54
		return pxCurrentTCB;
 8008f8e:	6818      	ldr	r0, [r3, #0]
	}
 8008f90:	4770      	bx	lr
 8008f92:	bf00      	nop
 8008f94:	200008fc 	.word	0x200008fc

08008f98 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8008f9a:	4c0f      	ldr	r4, [pc, #60]	; (8008fd8 <prvCheckForValidListAndQueue+0x40>)
	taskENTER_CRITICAL();
 8008f9c:	f000 fa12 	bl	80093c4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8008fa0:	6825      	ldr	r5, [r4, #0]
 8008fa2:	b9ad      	cbnz	r5, 8008fd0 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 8008fa4:	4f0d      	ldr	r7, [pc, #52]	; (8008fdc <prvCheckForValidListAndQueue+0x44>)
			vListInitialise( &xActiveTimerList2 );
 8008fa6:	4e0e      	ldr	r6, [pc, #56]	; (8008fe0 <prvCheckForValidListAndQueue+0x48>)
			vListInitialise( &xActiveTimerList1 );
 8008fa8:	4638      	mov	r0, r7
 8008faa:	f7fe fe48 	bl	8007c3e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008fae:	4630      	mov	r0, r6
 8008fb0:	f7fe fe45 	bl	8007c3e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008fb4:	4b0b      	ldr	r3, [pc, #44]	; (8008fe4 <prvCheckForValidListAndQueue+0x4c>)

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8008fb6:	462a      	mov	r2, r5
			pxCurrentTimerList = &xActiveTimerList1;
 8008fb8:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008fba:	4b0b      	ldr	r3, [pc, #44]	; (8008fe8 <prvCheckForValidListAndQueue+0x50>)
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8008fbc:	2110      	movs	r1, #16
 8008fbe:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8008fc0:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8008fc2:	f7fe ff49 	bl	8007e58 <xQueueGenericCreate>
 8008fc6:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008fc8:	b110      	cbz	r0, 8008fd0 <prvCheckForValidListAndQueue+0x38>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008fca:	4908      	ldr	r1, [pc, #32]	; (8008fec <prvCheckForValidListAndQueue+0x54>)
 8008fcc:	f7ff faa0 	bl	8008510 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8008fd0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8008fd4:	f000 ba18 	b.w	8009408 <vPortExitCritical>
 8008fd8:	20000e34 	.word	0x20000e34
 8008fdc:	20000e08 	.word	0x20000e08
 8008fe0:	20000e1c 	.word	0x20000e1c
 8008fe4:	20000e00 	.word	0x20000e00
 8008fe8:	20000e04 	.word	0x20000e04
 8008fec:	0800cad5 	.word	0x0800cad5

08008ff0 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8008ff0:	4291      	cmp	r1, r2
{
 8008ff2:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008ff4:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ff6:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8008ff8:	d80a      	bhi.n	8009010 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ffa:	1ad2      	subs	r2, r2, r3
 8008ffc:	6983      	ldr	r3, [r0, #24]
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d20d      	bcs.n	800901e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009002:	4b08      	ldr	r3, [pc, #32]	; (8009024 <prvInsertTimerInActiveList+0x34>)
 8009004:	1d01      	adds	r1, r0, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009006:	6818      	ldr	r0, [r3, #0]
 8009008:	f7fe fe33 	bl	8007c72 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800900c:	2000      	movs	r0, #0
}
 800900e:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009010:	429a      	cmp	r2, r3
 8009012:	d201      	bcs.n	8009018 <prvInsertTimerInActiveList+0x28>
 8009014:	4299      	cmp	r1, r3
 8009016:	d202      	bcs.n	800901e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009018:	1d01      	adds	r1, r0, #4
 800901a:	4b03      	ldr	r3, [pc, #12]	; (8009028 <prvInsertTimerInActiveList+0x38>)
 800901c:	e7f3      	b.n	8009006 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800901e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8009020:	e7f5      	b.n	800900e <prvInsertTimerInActiveList+0x1e>
 8009022:	bf00      	nop
 8009024:	20000e04 	.word	0x20000e04
 8009028:	20000e00 	.word	0x20000e00

0800902c <xTimerCreateTimerTask>:
{
 800902c:	b507      	push	{r0, r1, r2, lr}
	prvCheckForValidListAndQueue();
 800902e:	f7ff ffb3 	bl	8008f98 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8009032:	4b0d      	ldr	r3, [pc, #52]	; (8009068 <xTimerCreateTimerTask+0x3c>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	b943      	cbnz	r3, 800904a <xTimerCreateTimerTask+0x1e>
 8009038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800903c:	f383 8811 	msr	BASEPRI, r3
 8009040:	f3bf 8f6f 	isb	sy
 8009044:	f3bf 8f4f 	dsb	sy
 8009048:	e7fe      	b.n	8009048 <xTimerCreateTimerTask+0x1c>
			xReturn = xTaskCreate(	prvTimerTask,
 800904a:	4b08      	ldr	r3, [pc, #32]	; (800906c <xTimerCreateTimerTask+0x40>)
 800904c:	2280      	movs	r2, #128	; 0x80
 800904e:	9301      	str	r3, [sp, #4]
 8009050:	2302      	movs	r3, #2
 8009052:	4907      	ldr	r1, [pc, #28]	; (8009070 <xTimerCreateTimerTask+0x44>)
 8009054:	9300      	str	r3, [sp, #0]
 8009056:	4807      	ldr	r0, [pc, #28]	; (8009074 <xTimerCreateTimerTask+0x48>)
 8009058:	2300      	movs	r3, #0
 800905a:	f7ff fb37 	bl	80086cc <xTaskCreate>
	configASSERT( xReturn );
 800905e:	2800      	cmp	r0, #0
 8009060:	d0ea      	beq.n	8009038 <xTimerCreateTimerTask+0xc>
}
 8009062:	b003      	add	sp, #12
 8009064:	f85d fb04 	ldr.w	pc, [sp], #4
 8009068:	20000e34 	.word	0x20000e34
 800906c:	20000e38 	.word	0x20000e38
 8009070:	0800cada 	.word	0x0800cada
 8009074:	0800914d 	.word	0x0800914d

08009078 <xTimerGenericCommand>:
{
 8009078:	b530      	push	{r4, r5, lr}
 800907a:	4615      	mov	r5, r2
 800907c:	b085      	sub	sp, #20
 800907e:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8009080:	4603      	mov	r3, r0
 8009082:	b940      	cbnz	r0, 8009096 <xTimerGenericCommand+0x1e>
 8009084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009088:	f383 8811 	msr	BASEPRI, r3
 800908c:	f3bf 8f6f 	isb	sy
 8009090:	f3bf 8f4f 	dsb	sy
 8009094:	e7fe      	b.n	8009094 <xTimerGenericCommand+0x1c>
	if( xTimerQueue != NULL )
 8009096:	4c0d      	ldr	r4, [pc, #52]	; (80090cc <xTimerGenericCommand+0x54>)
 8009098:	6820      	ldr	r0, [r4, #0]
 800909a:	b178      	cbz	r0, 80090bc <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800909c:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800909e:	e9cd 1500 	strd	r1, r5, [sp]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80090a2:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80090a4:	dc0c      	bgt.n	80090c0 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80090a6:	f7ff fe89 	bl	8008dbc <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80090aa:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80090ac:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80090ae:	bf0c      	ite	eq
 80090b0:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80090b2:	461a      	movne	r2, r3
 80090b4:	4669      	mov	r1, sp
 80090b6:	6820      	ldr	r0, [r4, #0]
 80090b8:	f7fe ff10 	bl	8007edc <xQueueGenericSend>
}
 80090bc:	b005      	add	sp, #20
 80090be:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80090c0:	2300      	movs	r3, #0
 80090c2:	4669      	mov	r1, sp
 80090c4:	f7fe ffbc 	bl	8008040 <xQueueGenericSendFromISR>
 80090c8:	e7f8      	b.n	80090bc <xTimerGenericCommand+0x44>
 80090ca:	bf00      	nop
 80090cc:	20000e34 	.word	0x20000e34

080090d0 <prvSwitchTimerLists>:
{
 80090d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80090d4:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80090d8:	4d1a      	ldr	r5, [pc, #104]	; (8009144 <prvSwitchTimerLists+0x74>)
 80090da:	682b      	ldr	r3, [r5, #0]
 80090dc:	681a      	ldr	r2, [r3, #0]
 80090de:	b932      	cbnz	r2, 80090ee <prvSwitchTimerLists+0x1e>
	pxCurrentTimerList = pxOverflowTimerList;
 80090e0:	4a19      	ldr	r2, [pc, #100]	; (8009148 <prvSwitchTimerLists+0x78>)
 80090e2:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80090e4:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 80090e6:	6029      	str	r1, [r5, #0]
}
 80090e8:	b002      	add	sp, #8
 80090ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80090ee:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80090f0:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80090f2:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80090f4:	1d27      	adds	r7, r4, #4
 80090f6:	4638      	mov	r0, r7
 80090f8:	f7fe fdd2 	bl	8007ca0 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80090fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090fe:	4620      	mov	r0, r4
 8009100:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009102:	69e3      	ldr	r3, [r4, #28]
 8009104:	2b01      	cmp	r3, #1
 8009106:	d1e8      	bne.n	80090da <prvSwitchTimerLists+0xa>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009108:	69a3      	ldr	r3, [r4, #24]
 800910a:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800910c:	429e      	cmp	r6, r3
 800910e:	d206      	bcs.n	800911e <prvSwitchTimerLists+0x4e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009110:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009112:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009114:	4639      	mov	r1, r7
 8009116:	6828      	ldr	r0, [r5, #0]
 8009118:	f7fe fdab 	bl	8007c72 <vListInsert>
 800911c:	e7dd      	b.n	80090da <prvSwitchTimerLists+0xa>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800911e:	2300      	movs	r3, #0
 8009120:	f8cd 8000 	str.w	r8, [sp]
 8009124:	4632      	mov	r2, r6
 8009126:	4619      	mov	r1, r3
 8009128:	4620      	mov	r0, r4
 800912a:	f7ff ffa5 	bl	8009078 <xTimerGenericCommand>
				configASSERT( xResult );
 800912e:	2800      	cmp	r0, #0
 8009130:	d1d3      	bne.n	80090da <prvSwitchTimerLists+0xa>
 8009132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009136:	f383 8811 	msr	BASEPRI, r3
 800913a:	f3bf 8f6f 	isb	sy
 800913e:	f3bf 8f4f 	dsb	sy
 8009142:	e7fe      	b.n	8009142 <prvSwitchTimerLists+0x72>
 8009144:	20000e00 	.word	0x20000e00
 8009148:	20000e04 	.word	0x20000e04

0800914c <prvTimerTask>:
{
 800914c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009150:	4d6b      	ldr	r5, [pc, #428]	; (8009300 <prvTimerTask+0x1b4>)
					portYIELD_WITHIN_API();
 8009152:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009310 <prvTimerTask+0x1c4>
 8009156:	462f      	mov	r7, r5
{
 8009158:	b087      	sub	sp, #28
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800915a:	682b      	ldr	r3, [r5, #0]
 800915c:	f8d3 b000 	ldr.w	fp, [r3]
	if( *pxListWasEmpty == pdFALSE )
 8009160:	f1bb 0f00 	cmp.w	fp, #0
 8009164:	d047      	beq.n	80091f6 <prvTimerTask+0xaa>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	f8d3 a000 	ldr.w	sl, [r3]
	vTaskSuspendAll();
 800916c:	f7ff fbca 	bl	8008904 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8009170:	f7ff fbd0 	bl	8008914 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8009174:	4c63      	ldr	r4, [pc, #396]	; (8009304 <prvTimerTask+0x1b8>)
	xTimeNow = xTaskGetTickCount();
 8009176:	4681      	mov	r9, r0
	if( xTimeNow < xLastTime )
 8009178:	6823      	ldr	r3, [r4, #0]
 800917a:	4626      	mov	r6, r4
 800917c:	4298      	cmp	r0, r3
 800917e:	d23c      	bcs.n	80091fa <prvTimerTask+0xae>
		prvSwitchTimerLists();
 8009180:	f7ff ffa6 	bl	80090d0 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8009184:	f8c4 9000 	str.w	r9, [r4]
			( void ) xTaskResumeAll();
 8009188:	f7ff fc62 	bl	8008a50 <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800918c:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800930c <prvTimerTask+0x1c0>
 8009190:	2200      	movs	r2, #0
 8009192:	a902      	add	r1, sp, #8
 8009194:	f8d9 0000 	ldr.w	r0, [r9]
 8009198:	f7ff f808 	bl	80081ac <xQueueReceive>
 800919c:	2800      	cmp	r0, #0
 800919e:	d0dc      	beq.n	800915a <prvTimerTask+0xe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80091a0:	9b02      	ldr	r3, [sp, #8]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	da03      	bge.n	80091ae <prvTimerTask+0x62>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80091a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091aa:	9b03      	ldr	r3, [sp, #12]
 80091ac:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80091ae:	9b02      	ldr	r3, [sp, #8]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	dbed      	blt.n	8009190 <prvTimerTask+0x44>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80091b4:	9c04      	ldr	r4, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80091b6:	6963      	ldr	r3, [r4, #20]
 80091b8:	b113      	cbz	r3, 80091c0 <prvTimerTask+0x74>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091ba:	1d20      	adds	r0, r4, #4
 80091bc:	f7fe fd70 	bl	8007ca0 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 80091c0:	f7ff fba8 	bl	8008914 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80091c4:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 80091c6:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 80091c8:	4298      	cmp	r0, r3
 80091ca:	d201      	bcs.n	80091d0 <prvTimerTask+0x84>
		prvSwitchTimerLists();
 80091cc:	f7ff ff80 	bl	80090d0 <prvSwitchTimerLists>
 80091d0:	9a02      	ldr	r2, [sp, #8]
	xLastTime = xTimeNow;
 80091d2:	f8c6 b000 	str.w	fp, [r6]
 80091d6:	2a09      	cmp	r2, #9
 80091d8:	d8da      	bhi.n	8009190 <prvTimerTask+0x44>
 80091da:	2301      	movs	r3, #1
 80091dc:	4093      	lsls	r3, r2
 80091de:	f413 7a04 	ands.w	sl, r3, #528	; 0x210
 80091e2:	d17a      	bne.n	80092da <prvTimerTask+0x18e>
 80091e4:	f013 0fc7 	tst.w	r3, #199	; 0xc7
 80091e8:	d150      	bne.n	800928c <prvTimerTask+0x140>
 80091ea:	069b      	lsls	r3, r3, #26
 80091ec:	d5d0      	bpl.n	8009190 <prvTimerTask+0x44>
						vPortFree( pxTimer );
 80091ee:	4620      	mov	r0, r4
 80091f0:	f000 faa8 	bl	8009744 <vPortFree>
 80091f4:	e7cc      	b.n	8009190 <prvTimerTask+0x44>
		xNextExpireTime = ( TickType_t ) 0U;
 80091f6:	46da      	mov	sl, fp
 80091f8:	e7b8      	b.n	800916c <prvTimerTask+0x20>
	xLastTime = xTimeNow;
 80091fa:	6020      	str	r0, [r4, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80091fc:	f1bb 0f00 	cmp.w	fp, #0
 8009200:	d029      	beq.n	8009256 <prvTimerTask+0x10a>
 8009202:	4582      	cmp	sl, r0
 8009204:	d840      	bhi.n	8009288 <prvTimerTask+0x13c>
				( void ) xTaskResumeAll();
 8009206:	f7ff fc23 	bl	8008a50 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	68db      	ldr	r3, [r3, #12]
 800920e:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009210:	1d20      	adds	r0, r4, #4
 8009212:	f7fe fd45 	bl	8007ca0 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009216:	69e3      	ldr	r3, [r4, #28]
 8009218:	2b01      	cmp	r3, #1
 800921a:	d118      	bne.n	800924e <prvTimerTask+0x102>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800921c:	69a1      	ldr	r1, [r4, #24]
 800921e:	4653      	mov	r3, sl
 8009220:	464a      	mov	r2, r9
 8009222:	4451      	add	r1, sl
 8009224:	4620      	mov	r0, r4
 8009226:	f7ff fee3 	bl	8008ff0 <prvInsertTimerInActiveList>
 800922a:	b180      	cbz	r0, 800924e <prvTimerTask+0x102>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800922c:	2300      	movs	r3, #0
 800922e:	4652      	mov	r2, sl
 8009230:	9300      	str	r3, [sp, #0]
 8009232:	4619      	mov	r1, r3
 8009234:	4620      	mov	r0, r4
 8009236:	f7ff ff1f 	bl	8009078 <xTimerGenericCommand>
			configASSERT( xResult );
 800923a:	b940      	cbnz	r0, 800924e <prvTimerTask+0x102>
 800923c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009240:	f383 8811 	msr	BASEPRI, r3
 8009244:	f3bf 8f6f 	isb	sy
 8009248:	f3bf 8f4f 	dsb	sy
 800924c:	e7fe      	b.n	800924c <prvTimerTask+0x100>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800924e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009250:	4620      	mov	r0, r4
 8009252:	4798      	blx	r3
 8009254:	e79a      	b.n	800918c <prvTimerTask+0x40>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009256:	4b2c      	ldr	r3, [pc, #176]	; (8009308 <prvTimerTask+0x1bc>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	fab2 f282 	clz	r2, r2
 8009260:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009262:	4b2a      	ldr	r3, [pc, #168]	; (800930c <prvTimerTask+0x1c0>)
 8009264:	ebaa 0109 	sub.w	r1, sl, r9
 8009268:	6818      	ldr	r0, [r3, #0]
 800926a:	f7ff f98a 	bl	8008582 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800926e:	f7ff fbef 	bl	8008a50 <xTaskResumeAll>
 8009272:	2800      	cmp	r0, #0
 8009274:	d18a      	bne.n	800918c <prvTimerTask+0x40>
					portYIELD_WITHIN_API();
 8009276:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800927a:	f8c8 3000 	str.w	r3, [r8]
 800927e:	f3bf 8f4f 	dsb	sy
 8009282:	f3bf 8f6f 	isb	sy
 8009286:	e781      	b.n	800918c <prvTimerTask+0x40>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009288:	2200      	movs	r2, #0
 800928a:	e7ea      	b.n	8009262 <prvTimerTask+0x116>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800928c:	69a1      	ldr	r1, [r4, #24]
 800928e:	9b03      	ldr	r3, [sp, #12]
 8009290:	465a      	mov	r2, fp
 8009292:	4419      	add	r1, r3
 8009294:	4620      	mov	r0, r4
 8009296:	f7ff feab 	bl	8008ff0 <prvInsertTimerInActiveList>
 800929a:	2800      	cmp	r0, #0
 800929c:	f43f af78 	beq.w	8009190 <prvTimerTask+0x44>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80092a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092a2:	4620      	mov	r0, r4
 80092a4:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80092a6:	69e3      	ldr	r3, [r4, #28]
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	f47f af71 	bne.w	8009190 <prvTimerTask+0x44>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80092ae:	69a2      	ldr	r2, [r4, #24]
 80092b0:	9903      	ldr	r1, [sp, #12]
 80092b2:	f8cd a000 	str.w	sl, [sp]
 80092b6:	440a      	add	r2, r1
 80092b8:	4653      	mov	r3, sl
 80092ba:	4651      	mov	r1, sl
 80092bc:	4620      	mov	r0, r4
 80092be:	f7ff fedb 	bl	8009078 <xTimerGenericCommand>
							configASSERT( xResult );
 80092c2:	2800      	cmp	r0, #0
 80092c4:	f47f af64 	bne.w	8009190 <prvTimerTask+0x44>
 80092c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092cc:	f383 8811 	msr	BASEPRI, r3
 80092d0:	f3bf 8f6f 	isb	sy
 80092d4:	f3bf 8f4f 	dsb	sy
 80092d8:	e7fe      	b.n	80092d8 <prvTimerTask+0x18c>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80092da:	9903      	ldr	r1, [sp, #12]
 80092dc:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80092de:	b941      	cbnz	r1, 80092f2 <prvTimerTask+0x1a6>
 80092e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e4:	f383 8811 	msr	BASEPRI, r3
 80092e8:	f3bf 8f6f 	isb	sy
 80092ec:	f3bf 8f4f 	dsb	sy
 80092f0:	e7fe      	b.n	80092f0 <prvTimerTask+0x1a4>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80092f2:	465b      	mov	r3, fp
 80092f4:	465a      	mov	r2, fp
 80092f6:	4459      	add	r1, fp
 80092f8:	4620      	mov	r0, r4
 80092fa:	f7ff fe79 	bl	8008ff0 <prvInsertTimerInActiveList>
 80092fe:	e747      	b.n	8009190 <prvTimerTask+0x44>
 8009300:	20000e00 	.word	0x20000e00
 8009304:	20000e30 	.word	0x20000e30
 8009308:	20000e04 	.word	0x20000e04
 800930c:	20000e34 	.word	0x20000e34
 8009310:	e000ed04 	.word	0xe000ed04

08009314 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 8009314:	2300      	movs	r3, #0
{
 8009316:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8009318:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800931a:	4b0d      	ldr	r3, [pc, #52]	; (8009350 <prvTaskExitError+0x3c>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	3301      	adds	r3, #1
 8009320:	d008      	beq.n	8009334 <prvTaskExitError+0x20>
 8009322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009326:	f383 8811 	msr	BASEPRI, r3
 800932a:	f3bf 8f6f 	isb	sy
 800932e:	f3bf 8f4f 	dsb	sy
 8009332:	e7fe      	b.n	8009332 <prvTaskExitError+0x1e>
 8009334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009338:	f383 8811 	msr	BASEPRI, r3
 800933c:	f3bf 8f6f 	isb	sy
 8009340:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009344:	9b01      	ldr	r3, [sp, #4]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d0fc      	beq.n	8009344 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800934a:	b002      	add	sp, #8
 800934c:	4770      	bx	lr
 800934e:	bf00      	nop
 8009350:	20000020 	.word	0x20000020

08009354 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009354:	4806      	ldr	r0, [pc, #24]	; (8009370 <prvPortStartFirstTask+0x1c>)
 8009356:	6800      	ldr	r0, [r0, #0]
 8009358:	6800      	ldr	r0, [r0, #0]
 800935a:	f380 8808 	msr	MSP, r0
 800935e:	b662      	cpsie	i
 8009360:	b661      	cpsie	f
 8009362:	f3bf 8f4f 	dsb	sy
 8009366:	f3bf 8f6f 	isb	sy
 800936a:	df00      	svc	0
 800936c:	bf00      	nop
 800936e:	0000      	.short	0x0000
 8009370:	e000ed08 	.word	0xe000ed08

08009374 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009374:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009378:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800937c:	4b05      	ldr	r3, [pc, #20]	; (8009394 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800937e:	f021 0101 	bic.w	r1, r1, #1
 8009382:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009386:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800938a:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800938e:	3840      	subs	r0, #64	; 0x40
 8009390:	4770      	bx	lr
 8009392:	bf00      	nop
 8009394:	08009315 	.word	0x08009315
	...

080093a0 <SVC_Handler>:
	__asm volatile (
 80093a0:	4b07      	ldr	r3, [pc, #28]	; (80093c0 <pxCurrentTCBConst2>)
 80093a2:	6819      	ldr	r1, [r3, #0]
 80093a4:	6808      	ldr	r0, [r1, #0]
 80093a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80093aa:	f380 8809 	msr	PSP, r0
 80093ae:	f3bf 8f6f 	isb	sy
 80093b2:	f04f 0000 	mov.w	r0, #0
 80093b6:	f380 8811 	msr	BASEPRI, r0
 80093ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80093be:	4770      	bx	lr

080093c0 <pxCurrentTCBConst2>:
 80093c0:	200008fc 	.word	0x200008fc

080093c4 <vPortEnterCritical>:
 80093c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c8:	f383 8811 	msr	BASEPRI, r3
 80093cc:	f3bf 8f6f 	isb	sy
 80093d0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80093d4:	4a0a      	ldr	r2, [pc, #40]	; (8009400 <vPortEnterCritical+0x3c>)
 80093d6:	6813      	ldr	r3, [r2, #0]
 80093d8:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80093da:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80093dc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80093de:	d10d      	bne.n	80093fc <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80093e0:	4b08      	ldr	r3, [pc, #32]	; (8009404 <vPortEnterCritical+0x40>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80093e8:	d008      	beq.n	80093fc <vPortEnterCritical+0x38>
 80093ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ee:	f383 8811 	msr	BASEPRI, r3
 80093f2:	f3bf 8f6f 	isb	sy
 80093f6:	f3bf 8f4f 	dsb	sy
 80093fa:	e7fe      	b.n	80093fa <vPortEnterCritical+0x36>
	}
}
 80093fc:	4770      	bx	lr
 80093fe:	bf00      	nop
 8009400:	20000020 	.word	0x20000020
 8009404:	e000ed04 	.word	0xe000ed04

08009408 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8009408:	4a08      	ldr	r2, [pc, #32]	; (800942c <vPortExitCritical+0x24>)
 800940a:	6813      	ldr	r3, [r2, #0]
 800940c:	b943      	cbnz	r3, 8009420 <vPortExitCritical+0x18>
 800940e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009412:	f383 8811 	msr	BASEPRI, r3
 8009416:	f3bf 8f6f 	isb	sy
 800941a:	f3bf 8f4f 	dsb	sy
 800941e:	e7fe      	b.n	800941e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8009420:	3b01      	subs	r3, #1
 8009422:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009424:	b90b      	cbnz	r3, 800942a <vPortExitCritical+0x22>
	__asm volatile
 8009426:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800942a:	4770      	bx	lr
 800942c:	20000020 	.word	0x20000020

08009430 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009430:	f3ef 8009 	mrs	r0, PSP
 8009434:	f3bf 8f6f 	isb	sy
 8009438:	4b0d      	ldr	r3, [pc, #52]	; (8009470 <pxCurrentTCBConst>)
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009440:	6010      	str	r0, [r2, #0]
 8009442:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009446:	f04f 0050 	mov.w	r0, #80	; 0x50
 800944a:	f380 8811 	msr	BASEPRI, r0
 800944e:	f7ff fb97 	bl	8008b80 <vTaskSwitchContext>
 8009452:	f04f 0000 	mov.w	r0, #0
 8009456:	f380 8811 	msr	BASEPRI, r0
 800945a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800945e:	6819      	ldr	r1, [r3, #0]
 8009460:	6808      	ldr	r0, [r1, #0]
 8009462:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009466:	f380 8809 	msr	PSP, r0
 800946a:	f3bf 8f6f 	isb	sy
 800946e:	4770      	bx	lr

08009470 <pxCurrentTCBConst>:
 8009470:	200008fc 	.word	0x200008fc

08009474 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009474:	b508      	push	{r3, lr}
	__asm volatile
 8009476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800947a:	f383 8811 	msr	BASEPRI, r3
 800947e:	f3bf 8f6f 	isb	sy
 8009482:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009486:	f7ff fa53 	bl	8008930 <xTaskIncrementTick>
 800948a:	b118      	cbz	r0, 8009494 <xPortSysTickHandler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800948c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009490:	4b02      	ldr	r3, [pc, #8]	; (800949c <xPortSysTickHandler+0x28>)
 8009492:	601a      	str	r2, [r3, #0]
	__asm volatile
 8009494:	2300      	movs	r3, #0
 8009496:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800949a:	bd08      	pop	{r3, pc}
 800949c:	e000ed04 	.word	0xe000ed04

080094a0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80094a0:	2300      	movs	r3, #0
 80094a2:	4a08      	ldr	r2, [pc, #32]	; (80094c4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80094a4:	4908      	ldr	r1, [pc, #32]	; (80094c8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80094a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80094a8:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80094aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80094ae:	4b07      	ldr	r3, [pc, #28]	; (80094cc <vPortSetupTimerInterrupt+0x2c>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80094b6:	4906      	ldr	r1, [pc, #24]	; (80094d0 <vPortSetupTimerInterrupt+0x30>)
 80094b8:	3b01      	subs	r3, #1
 80094ba:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80094bc:	2307      	movs	r3, #7
 80094be:	6013      	str	r3, [r2, #0]
}
 80094c0:	4770      	bx	lr
 80094c2:	bf00      	nop
 80094c4:	e000e010 	.word	0xe000e010
 80094c8:	e000e018 	.word	0xe000e018
 80094cc:	20000010 	.word	0x20000010
 80094d0:	e000e014 	.word	0xe000e014

080094d4 <xPortStartScheduler>:
{
 80094d4:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80094d6:	4b27      	ldr	r3, [pc, #156]	; (8009574 <xPortStartScheduler+0xa0>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80094d8:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80094da:	781a      	ldrb	r2, [r3, #0]
 80094dc:	b2d2      	uxtb	r2, r2
 80094de:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80094e0:	22ff      	movs	r2, #255	; 0xff
 80094e2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80094e4:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80094e6:	4a24      	ldr	r2, [pc, #144]	; (8009578 <xPortStartScheduler+0xa4>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80094ee:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80094f2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80094f6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80094f8:	2207      	movs	r2, #7
 80094fa:	4b20      	ldr	r3, [pc, #128]	; (800957c <xPortStartScheduler+0xa8>)
 80094fc:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80094fe:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8009502:	1e54      	subs	r4, r2, #1
 8009504:	0600      	lsls	r0, r0, #24
 8009506:	d40d      	bmi.n	8009524 <xPortStartScheduler+0x50>
 8009508:	b101      	cbz	r1, 800950c <xPortStartScheduler+0x38>
 800950a:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	2a03      	cmp	r2, #3
 8009510:	d011      	beq.n	8009536 <xPortStartScheduler+0x62>
	__asm volatile
 8009512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009516:	f383 8811 	msr	BASEPRI, r3
 800951a:	f3bf 8f6f 	isb	sy
 800951e:	f3bf 8f4f 	dsb	sy
 8009522:	e7fe      	b.n	8009522 <xPortStartScheduler+0x4e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009524:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8009528:	2101      	movs	r1, #1
 800952a:	0052      	lsls	r2, r2, #1
 800952c:	b2d2      	uxtb	r2, r2
 800952e:	f88d 2003 	strb.w	r2, [sp, #3]
 8009532:	4622      	mov	r2, r4
 8009534:	e7e3      	b.n	80094fe <xPortStartScheduler+0x2a>
	uxCriticalNesting = 0;
 8009536:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009538:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800953a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800953e:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009540:	9b01      	ldr	r3, [sp, #4]
 8009542:	4a0c      	ldr	r2, [pc, #48]	; (8009574 <xPortStartScheduler+0xa0>)
 8009544:	b2db      	uxtb	r3, r3
 8009546:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009548:	4b0d      	ldr	r3, [pc, #52]	; (8009580 <xPortStartScheduler+0xac>)
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8009550:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8009558:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800955a:	f7ff ffa1 	bl	80094a0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800955e:	4b09      	ldr	r3, [pc, #36]	; (8009584 <xPortStartScheduler+0xb0>)
 8009560:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8009562:	f7ff fef7 	bl	8009354 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8009566:	f7ff fb0b 	bl	8008b80 <vTaskSwitchContext>
	prvTaskExitError();
 800956a:	f7ff fed3 	bl	8009314 <prvTaskExitError>
}
 800956e:	4620      	mov	r0, r4
 8009570:	b002      	add	sp, #8
 8009572:	bd10      	pop	{r4, pc}
 8009574:	e000e400 	.word	0xe000e400
 8009578:	20000e3c 	.word	0x20000e3c
 800957c:	20000e40 	.word	0x20000e40
 8009580:	e000ed20 	.word	0xe000ed20
 8009584:	20000020 	.word	0x20000020

08009588 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009588:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800958c:	2b0f      	cmp	r3, #15
 800958e:	d90e      	bls.n	80095ae <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009590:	4a10      	ldr	r2, [pc, #64]	; (80095d4 <vPortValidateInterruptPriority+0x4c>)
 8009592:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009594:	4a10      	ldr	r2, [pc, #64]	; (80095d8 <vPortValidateInterruptPriority+0x50>)
 8009596:	7812      	ldrb	r2, [r2, #0]
 8009598:	429a      	cmp	r2, r3
 800959a:	d908      	bls.n	80095ae <vPortValidateInterruptPriority+0x26>
 800959c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a0:	f383 8811 	msr	BASEPRI, r3
 80095a4:	f3bf 8f6f 	isb	sy
 80095a8:	f3bf 8f4f 	dsb	sy
 80095ac:	e7fe      	b.n	80095ac <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80095ae:	4b0b      	ldr	r3, [pc, #44]	; (80095dc <vPortValidateInterruptPriority+0x54>)
 80095b0:	4a0b      	ldr	r2, [pc, #44]	; (80095e0 <vPortValidateInterruptPriority+0x58>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	6812      	ldr	r2, [r2, #0]
 80095b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d908      	bls.n	80095d0 <vPortValidateInterruptPriority+0x48>
 80095be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c2:	f383 8811 	msr	BASEPRI, r3
 80095c6:	f3bf 8f6f 	isb	sy
 80095ca:	f3bf 8f4f 	dsb	sy
 80095ce:	e7fe      	b.n	80095ce <vPortValidateInterruptPriority+0x46>
	}
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop
 80095d4:	e000e3f0 	.word	0xe000e3f0
 80095d8:	20000e3c 	.word	0x20000e3c
 80095dc:	e000ed0c 	.word	0xe000ed0c
 80095e0:	20000e40 	.word	0x20000e40

080095e4 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80095e4:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80095e6:	4b0f      	ldr	r3, [pc, #60]	; (8009624 <prvInsertBlockIntoFreeList+0x40>)
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	4282      	cmp	r2, r0
 80095ec:	d318      	bcc.n	8009620 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80095ee:	685c      	ldr	r4, [r3, #4]
 80095f0:	1919      	adds	r1, r3, r4
 80095f2:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80095f4:	bf01      	itttt	eq
 80095f6:	6841      	ldreq	r1, [r0, #4]
 80095f8:	4618      	moveq	r0, r3
 80095fa:	1909      	addeq	r1, r1, r4
 80095fc:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80095fe:	6844      	ldr	r4, [r0, #4]
 8009600:	1901      	adds	r1, r0, r4
 8009602:	428a      	cmp	r2, r1
 8009604:	d107      	bne.n	8009616 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009606:	4908      	ldr	r1, [pc, #32]	; (8009628 <prvInsertBlockIntoFreeList+0x44>)
 8009608:	6809      	ldr	r1, [r1, #0]
 800960a:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800960c:	bf1f      	itttt	ne
 800960e:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009610:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009612:	1909      	addne	r1, r1, r4
 8009614:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009616:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009618:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800961a:	bf18      	it	ne
 800961c:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800961e:	bd10      	pop	{r4, pc}
 8009620:	4613      	mov	r3, r2
 8009622:	e7e1      	b.n	80095e8 <prvInsertBlockIntoFreeList+0x4>
 8009624:	20004654 	.word	0x20004654
 8009628:	20000e44 	.word	0x20000e44

0800962c <pvPortMalloc>:
{
 800962c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009630:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8009632:	f7ff f967 	bl	8008904 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8009636:	493d      	ldr	r1, [pc, #244]	; (800972c <pvPortMalloc+0x100>)
 8009638:	4d3d      	ldr	r5, [pc, #244]	; (8009730 <pvPortMalloc+0x104>)
 800963a:	680b      	ldr	r3, [r1, #0]
 800963c:	b9fb      	cbnz	r3, 800967e <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 800963e:	4a3d      	ldr	r2, [pc, #244]	; (8009734 <pvPortMalloc+0x108>)
	xStart.xBlockSize = ( size_t ) 0;
 8009640:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009642:	0756      	lsls	r6, r2, #29
 8009644:	f502 5360 	add.w	r3, r2, #14336	; 0x3800
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009648:	bf0f      	iteee	eq
 800964a:	f44f 5360 	moveq.w	r3, #14336	; 0x3800
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800964e:	3207      	addne	r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009650:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009654:	1a9b      	subne	r3, r3, r2
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009656:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009658:	4e37      	ldr	r6, [pc, #220]	; (8009738 <pvPortMalloc+0x10c>)
	uxAddress -= xHeapStructSize;
 800965a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800965c:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8009660:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009662:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8009664:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009668:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800966a:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800966c:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009670:	4b32      	ldr	r3, [pc, #200]	; (800973c <pvPortMalloc+0x110>)
 8009672:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009674:	4b32      	ldr	r3, [pc, #200]	; (8009740 <pvPortMalloc+0x114>)
 8009676:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009678:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800967c:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800967e:	682f      	ldr	r7, [r5, #0]
 8009680:	4227      	tst	r7, r4
 8009682:	d14d      	bne.n	8009720 <pvPortMalloc+0xf4>
			if( xWantedSize > 0 )
 8009684:	2c00      	cmp	r4, #0
 8009686:	d03e      	beq.n	8009706 <pvPortMalloc+0xda>
				xWantedSize += xHeapStructSize;
 8009688:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800968c:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800968e:	bf1c      	itt	ne
 8009690:	f023 0307 	bicne.w	r3, r3, #7
 8009694:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009696:	2b00      	cmp	r3, #0
 8009698:	d042      	beq.n	8009720 <pvPortMalloc+0xf4>
 800969a:	4a29      	ldr	r2, [pc, #164]	; (8009740 <pvPortMalloc+0x114>)
 800969c:	6816      	ldr	r6, [r2, #0]
 800969e:	4690      	mov	r8, r2
 80096a0:	429e      	cmp	r6, r3
 80096a2:	d33d      	bcc.n	8009720 <pvPortMalloc+0xf4>
				pxBlock = xStart.pxNextFreeBlock;
 80096a4:	4a24      	ldr	r2, [pc, #144]	; (8009738 <pvPortMalloc+0x10c>)
 80096a6:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80096a8:	6868      	ldr	r0, [r5, #4]
 80096aa:	4298      	cmp	r0, r3
 80096ac:	d201      	bcs.n	80096b2 <pvPortMalloc+0x86>
 80096ae:	682c      	ldr	r4, [r5, #0]
 80096b0:	b9a4      	cbnz	r4, 80096dc <pvPortMalloc+0xb0>
				if( pxBlock != pxEnd )
 80096b2:	6809      	ldr	r1, [r1, #0]
 80096b4:	42a9      	cmp	r1, r5
 80096b6:	d033      	beq.n	8009720 <pvPortMalloc+0xf4>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80096b8:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80096ba:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80096bc:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80096be:	1ac2      	subs	r2, r0, r3
 80096c0:	2a10      	cmp	r2, #16
 80096c2:	d912      	bls.n	80096ea <pvPortMalloc+0xbe>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80096c4:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80096c6:	0741      	lsls	r1, r0, #29
 80096c8:	d00b      	beq.n	80096e2 <pvPortMalloc+0xb6>
 80096ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ce:	f383 8811 	msr	BASEPRI, r3
 80096d2:	f3bf 8f6f 	isb	sy
 80096d6:	f3bf 8f4f 	dsb	sy
 80096da:	e7fe      	b.n	80096da <pvPortMalloc+0xae>
 80096dc:	462a      	mov	r2, r5
 80096de:	4625      	mov	r5, r4
 80096e0:	e7e2      	b.n	80096a8 <pvPortMalloc+0x7c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80096e2:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80096e4:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80096e6:	f7ff ff7d 	bl	80095e4 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80096ea:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80096ec:	4913      	ldr	r1, [pc, #76]	; (800973c <pvPortMalloc+0x110>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80096ee:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80096f0:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 80096f2:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80096f4:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80096f6:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80096fa:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80096fc:	bf38      	it	cc
 80096fe:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009700:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009702:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009704:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8009706:	f7ff f9a3 	bl	8008a50 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800970a:	0763      	lsls	r3, r4, #29
 800970c:	d00a      	beq.n	8009724 <pvPortMalloc+0xf8>
 800970e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009712:	f383 8811 	msr	BASEPRI, r3
 8009716:	f3bf 8f6f 	isb	sy
 800971a:	f3bf 8f4f 	dsb	sy
 800971e:	e7fe      	b.n	800971e <pvPortMalloc+0xf2>
void *pvReturn = NULL;
 8009720:	2400      	movs	r4, #0
 8009722:	e7f0      	b.n	8009706 <pvPortMalloc+0xda>
}
 8009724:	4620      	mov	r0, r4
 8009726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800972a:	bf00      	nop
 800972c:	20000e44 	.word	0x20000e44
 8009730:	20004648 	.word	0x20004648
 8009734:	20000e48 	.word	0x20000e48
 8009738:	20004654 	.word	0x20004654
 800973c:	20004650 	.word	0x20004650
 8009740:	2000464c 	.word	0x2000464c

08009744 <vPortFree>:
{
 8009744:	b510      	push	{r4, lr}
	if( pv != NULL )
 8009746:	4604      	mov	r4, r0
 8009748:	b370      	cbz	r0, 80097a8 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800974a:	4a18      	ldr	r2, [pc, #96]	; (80097ac <vPortFree+0x68>)
 800974c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8009750:	6812      	ldr	r2, [r2, #0]
 8009752:	4213      	tst	r3, r2
 8009754:	d108      	bne.n	8009768 <vPortFree+0x24>
 8009756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800975a:	f383 8811 	msr	BASEPRI, r3
 800975e:	f3bf 8f6f 	isb	sy
 8009762:	f3bf 8f4f 	dsb	sy
 8009766:	e7fe      	b.n	8009766 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009768:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800976c:	b141      	cbz	r1, 8009780 <vPortFree+0x3c>
 800976e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009772:	f383 8811 	msr	BASEPRI, r3
 8009776:	f3bf 8f6f 	isb	sy
 800977a:	f3bf 8f4f 	dsb	sy
 800977e:	e7fe      	b.n	800977e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009780:	ea23 0302 	bic.w	r3, r3, r2
 8009784:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8009788:	f7ff f8bc 	bl	8008904 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800978c:	4a08      	ldr	r2, [pc, #32]	; (80097b0 <vPortFree+0x6c>)
 800978e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009792:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009794:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009798:	440b      	add	r3, r1
 800979a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800979c:	f7ff ff22 	bl	80095e4 <prvInsertBlockIntoFreeList>
}
 80097a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80097a4:	f7ff b954 	b.w	8008a50 <xTaskResumeAll>
}
 80097a8:	bd10      	pop	{r4, pc}
 80097aa:	bf00      	nop
 80097ac:	20004648 	.word	0x20004648
 80097b0:	2000464c 	.word	0x2000464c

080097b4 <_ZdlPvj>:
 80097b4:	f000 b800 	b.w	80097b8 <_ZdlPv>

080097b8 <_ZdlPv>:
 80097b8:	f000 b832 	b.w	8009820 <free>

080097bc <__errno>:
 80097bc:	4b01      	ldr	r3, [pc, #4]	; (80097c4 <__errno+0x8>)
 80097be:	6818      	ldr	r0, [r3, #0]
 80097c0:	4770      	bx	lr
 80097c2:	bf00      	nop
 80097c4:	20000024 	.word	0x20000024

080097c8 <__libc_init_array>:
 80097c8:	b570      	push	{r4, r5, r6, lr}
 80097ca:	2500      	movs	r5, #0
 80097cc:	4e0c      	ldr	r6, [pc, #48]	; (8009800 <__libc_init_array+0x38>)
 80097ce:	4c0d      	ldr	r4, [pc, #52]	; (8009804 <__libc_init_array+0x3c>)
 80097d0:	1ba4      	subs	r4, r4, r6
 80097d2:	10a4      	asrs	r4, r4, #2
 80097d4:	42a5      	cmp	r5, r4
 80097d6:	d109      	bne.n	80097ec <__libc_init_array+0x24>
 80097d8:	f002 f8de 	bl	800b998 <_init>
 80097dc:	2500      	movs	r5, #0
 80097de:	4e0a      	ldr	r6, [pc, #40]	; (8009808 <__libc_init_array+0x40>)
 80097e0:	4c0a      	ldr	r4, [pc, #40]	; (800980c <__libc_init_array+0x44>)
 80097e2:	1ba4      	subs	r4, r4, r6
 80097e4:	10a4      	asrs	r4, r4, #2
 80097e6:	42a5      	cmp	r5, r4
 80097e8:	d105      	bne.n	80097f6 <__libc_init_array+0x2e>
 80097ea:	bd70      	pop	{r4, r5, r6, pc}
 80097ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80097f0:	4798      	blx	r3
 80097f2:	3501      	adds	r5, #1
 80097f4:	e7ee      	b.n	80097d4 <__libc_init_array+0xc>
 80097f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80097fa:	4798      	blx	r3
 80097fc:	3501      	adds	r5, #1
 80097fe:	e7f2      	b.n	80097e6 <__libc_init_array+0x1e>
 8009800:	0800cd40 	.word	0x0800cd40
 8009804:	0800cd40 	.word	0x0800cd40
 8009808:	0800cd40 	.word	0x0800cd40
 800980c:	0800cd48 	.word	0x0800cd48

08009810 <malloc>:
 8009810:	4b02      	ldr	r3, [pc, #8]	; (800981c <malloc+0xc>)
 8009812:	4601      	mov	r1, r0
 8009814:	6818      	ldr	r0, [r3, #0]
 8009816:	f000 b86b 	b.w	80098f0 <_malloc_r>
 800981a:	bf00      	nop
 800981c:	20000024 	.word	0x20000024

08009820 <free>:
 8009820:	4b02      	ldr	r3, [pc, #8]	; (800982c <free+0xc>)
 8009822:	4601      	mov	r1, r0
 8009824:	6818      	ldr	r0, [r3, #0]
 8009826:	f000 b817 	b.w	8009858 <_free_r>
 800982a:	bf00      	nop
 800982c:	20000024 	.word	0x20000024

08009830 <memcpy>:
 8009830:	b510      	push	{r4, lr}
 8009832:	1e43      	subs	r3, r0, #1
 8009834:	440a      	add	r2, r1
 8009836:	4291      	cmp	r1, r2
 8009838:	d100      	bne.n	800983c <memcpy+0xc>
 800983a:	bd10      	pop	{r4, pc}
 800983c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009840:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009844:	e7f7      	b.n	8009836 <memcpy+0x6>

08009846 <memset>:
 8009846:	4603      	mov	r3, r0
 8009848:	4402      	add	r2, r0
 800984a:	4293      	cmp	r3, r2
 800984c:	d100      	bne.n	8009850 <memset+0xa>
 800984e:	4770      	bx	lr
 8009850:	f803 1b01 	strb.w	r1, [r3], #1
 8009854:	e7f9      	b.n	800984a <memset+0x4>
	...

08009858 <_free_r>:
 8009858:	b538      	push	{r3, r4, r5, lr}
 800985a:	4605      	mov	r5, r0
 800985c:	2900      	cmp	r1, #0
 800985e:	d043      	beq.n	80098e8 <_free_r+0x90>
 8009860:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009864:	1f0c      	subs	r4, r1, #4
 8009866:	2b00      	cmp	r3, #0
 8009868:	bfb8      	it	lt
 800986a:	18e4      	addlt	r4, r4, r3
 800986c:	f001 fbf0 	bl	800b050 <__malloc_lock>
 8009870:	4a1e      	ldr	r2, [pc, #120]	; (80098ec <_free_r+0x94>)
 8009872:	6813      	ldr	r3, [r2, #0]
 8009874:	4610      	mov	r0, r2
 8009876:	b933      	cbnz	r3, 8009886 <_free_r+0x2e>
 8009878:	6063      	str	r3, [r4, #4]
 800987a:	6014      	str	r4, [r2, #0]
 800987c:	4628      	mov	r0, r5
 800987e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009882:	f001 bbe6 	b.w	800b052 <__malloc_unlock>
 8009886:	42a3      	cmp	r3, r4
 8009888:	d90b      	bls.n	80098a2 <_free_r+0x4a>
 800988a:	6821      	ldr	r1, [r4, #0]
 800988c:	1862      	adds	r2, r4, r1
 800988e:	4293      	cmp	r3, r2
 8009890:	bf01      	itttt	eq
 8009892:	681a      	ldreq	r2, [r3, #0]
 8009894:	685b      	ldreq	r3, [r3, #4]
 8009896:	1852      	addeq	r2, r2, r1
 8009898:	6022      	streq	r2, [r4, #0]
 800989a:	6063      	str	r3, [r4, #4]
 800989c:	6004      	str	r4, [r0, #0]
 800989e:	e7ed      	b.n	800987c <_free_r+0x24>
 80098a0:	4613      	mov	r3, r2
 80098a2:	685a      	ldr	r2, [r3, #4]
 80098a4:	b10a      	cbz	r2, 80098aa <_free_r+0x52>
 80098a6:	42a2      	cmp	r2, r4
 80098a8:	d9fa      	bls.n	80098a0 <_free_r+0x48>
 80098aa:	6819      	ldr	r1, [r3, #0]
 80098ac:	1858      	adds	r0, r3, r1
 80098ae:	42a0      	cmp	r0, r4
 80098b0:	d10b      	bne.n	80098ca <_free_r+0x72>
 80098b2:	6820      	ldr	r0, [r4, #0]
 80098b4:	4401      	add	r1, r0
 80098b6:	1858      	adds	r0, r3, r1
 80098b8:	4282      	cmp	r2, r0
 80098ba:	6019      	str	r1, [r3, #0]
 80098bc:	d1de      	bne.n	800987c <_free_r+0x24>
 80098be:	6810      	ldr	r0, [r2, #0]
 80098c0:	6852      	ldr	r2, [r2, #4]
 80098c2:	4401      	add	r1, r0
 80098c4:	6019      	str	r1, [r3, #0]
 80098c6:	605a      	str	r2, [r3, #4]
 80098c8:	e7d8      	b.n	800987c <_free_r+0x24>
 80098ca:	d902      	bls.n	80098d2 <_free_r+0x7a>
 80098cc:	230c      	movs	r3, #12
 80098ce:	602b      	str	r3, [r5, #0]
 80098d0:	e7d4      	b.n	800987c <_free_r+0x24>
 80098d2:	6820      	ldr	r0, [r4, #0]
 80098d4:	1821      	adds	r1, r4, r0
 80098d6:	428a      	cmp	r2, r1
 80098d8:	bf01      	itttt	eq
 80098da:	6811      	ldreq	r1, [r2, #0]
 80098dc:	6852      	ldreq	r2, [r2, #4]
 80098de:	1809      	addeq	r1, r1, r0
 80098e0:	6021      	streq	r1, [r4, #0]
 80098e2:	6062      	str	r2, [r4, #4]
 80098e4:	605c      	str	r4, [r3, #4]
 80098e6:	e7c9      	b.n	800987c <_free_r+0x24>
 80098e8:	bd38      	pop	{r3, r4, r5, pc}
 80098ea:	bf00      	nop
 80098ec:	2000465c 	.word	0x2000465c

080098f0 <_malloc_r>:
 80098f0:	b570      	push	{r4, r5, r6, lr}
 80098f2:	1ccd      	adds	r5, r1, #3
 80098f4:	f025 0503 	bic.w	r5, r5, #3
 80098f8:	3508      	adds	r5, #8
 80098fa:	2d0c      	cmp	r5, #12
 80098fc:	bf38      	it	cc
 80098fe:	250c      	movcc	r5, #12
 8009900:	2d00      	cmp	r5, #0
 8009902:	4606      	mov	r6, r0
 8009904:	db01      	blt.n	800990a <_malloc_r+0x1a>
 8009906:	42a9      	cmp	r1, r5
 8009908:	d903      	bls.n	8009912 <_malloc_r+0x22>
 800990a:	230c      	movs	r3, #12
 800990c:	6033      	str	r3, [r6, #0]
 800990e:	2000      	movs	r0, #0
 8009910:	bd70      	pop	{r4, r5, r6, pc}
 8009912:	f001 fb9d 	bl	800b050 <__malloc_lock>
 8009916:	4a21      	ldr	r2, [pc, #132]	; (800999c <_malloc_r+0xac>)
 8009918:	6814      	ldr	r4, [r2, #0]
 800991a:	4621      	mov	r1, r4
 800991c:	b991      	cbnz	r1, 8009944 <_malloc_r+0x54>
 800991e:	4c20      	ldr	r4, [pc, #128]	; (80099a0 <_malloc_r+0xb0>)
 8009920:	6823      	ldr	r3, [r4, #0]
 8009922:	b91b      	cbnz	r3, 800992c <_malloc_r+0x3c>
 8009924:	4630      	mov	r0, r6
 8009926:	f000 fc8d 	bl	800a244 <_sbrk_r>
 800992a:	6020      	str	r0, [r4, #0]
 800992c:	4629      	mov	r1, r5
 800992e:	4630      	mov	r0, r6
 8009930:	f000 fc88 	bl	800a244 <_sbrk_r>
 8009934:	1c43      	adds	r3, r0, #1
 8009936:	d124      	bne.n	8009982 <_malloc_r+0x92>
 8009938:	230c      	movs	r3, #12
 800993a:	4630      	mov	r0, r6
 800993c:	6033      	str	r3, [r6, #0]
 800993e:	f001 fb88 	bl	800b052 <__malloc_unlock>
 8009942:	e7e4      	b.n	800990e <_malloc_r+0x1e>
 8009944:	680b      	ldr	r3, [r1, #0]
 8009946:	1b5b      	subs	r3, r3, r5
 8009948:	d418      	bmi.n	800997c <_malloc_r+0x8c>
 800994a:	2b0b      	cmp	r3, #11
 800994c:	d90f      	bls.n	800996e <_malloc_r+0x7e>
 800994e:	600b      	str	r3, [r1, #0]
 8009950:	18cc      	adds	r4, r1, r3
 8009952:	50cd      	str	r5, [r1, r3]
 8009954:	4630      	mov	r0, r6
 8009956:	f001 fb7c 	bl	800b052 <__malloc_unlock>
 800995a:	f104 000b 	add.w	r0, r4, #11
 800995e:	1d23      	adds	r3, r4, #4
 8009960:	f020 0007 	bic.w	r0, r0, #7
 8009964:	1ac3      	subs	r3, r0, r3
 8009966:	d0d3      	beq.n	8009910 <_malloc_r+0x20>
 8009968:	425a      	negs	r2, r3
 800996a:	50e2      	str	r2, [r4, r3]
 800996c:	e7d0      	b.n	8009910 <_malloc_r+0x20>
 800996e:	684b      	ldr	r3, [r1, #4]
 8009970:	428c      	cmp	r4, r1
 8009972:	bf16      	itet	ne
 8009974:	6063      	strne	r3, [r4, #4]
 8009976:	6013      	streq	r3, [r2, #0]
 8009978:	460c      	movne	r4, r1
 800997a:	e7eb      	b.n	8009954 <_malloc_r+0x64>
 800997c:	460c      	mov	r4, r1
 800997e:	6849      	ldr	r1, [r1, #4]
 8009980:	e7cc      	b.n	800991c <_malloc_r+0x2c>
 8009982:	1cc4      	adds	r4, r0, #3
 8009984:	f024 0403 	bic.w	r4, r4, #3
 8009988:	42a0      	cmp	r0, r4
 800998a:	d005      	beq.n	8009998 <_malloc_r+0xa8>
 800998c:	1a21      	subs	r1, r4, r0
 800998e:	4630      	mov	r0, r6
 8009990:	f000 fc58 	bl	800a244 <_sbrk_r>
 8009994:	3001      	adds	r0, #1
 8009996:	d0cf      	beq.n	8009938 <_malloc_r+0x48>
 8009998:	6025      	str	r5, [r4, #0]
 800999a:	e7db      	b.n	8009954 <_malloc_r+0x64>
 800999c:	2000465c 	.word	0x2000465c
 80099a0:	20004660 	.word	0x20004660

080099a4 <__cvt>:
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099aa:	461e      	mov	r6, r3
 80099ac:	bfbb      	ittet	lt
 80099ae:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80099b2:	461e      	movlt	r6, r3
 80099b4:	2300      	movge	r3, #0
 80099b6:	232d      	movlt	r3, #45	; 0x2d
 80099b8:	b088      	sub	sp, #32
 80099ba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80099bc:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80099c0:	f027 0720 	bic.w	r7, r7, #32
 80099c4:	2f46      	cmp	r7, #70	; 0x46
 80099c6:	4614      	mov	r4, r2
 80099c8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80099ca:	700b      	strb	r3, [r1, #0]
 80099cc:	d004      	beq.n	80099d8 <__cvt+0x34>
 80099ce:	2f45      	cmp	r7, #69	; 0x45
 80099d0:	d100      	bne.n	80099d4 <__cvt+0x30>
 80099d2:	3501      	adds	r5, #1
 80099d4:	2302      	movs	r3, #2
 80099d6:	e000      	b.n	80099da <__cvt+0x36>
 80099d8:	2303      	movs	r3, #3
 80099da:	aa07      	add	r2, sp, #28
 80099dc:	9204      	str	r2, [sp, #16]
 80099de:	aa06      	add	r2, sp, #24
 80099e0:	e9cd a202 	strd	sl, r2, [sp, #8]
 80099e4:	e9cd 3500 	strd	r3, r5, [sp]
 80099e8:	4622      	mov	r2, r4
 80099ea:	4633      	mov	r3, r6
 80099ec:	f000 fd60 	bl	800a4b0 <_dtoa_r>
 80099f0:	2f47      	cmp	r7, #71	; 0x47
 80099f2:	4680      	mov	r8, r0
 80099f4:	d102      	bne.n	80099fc <__cvt+0x58>
 80099f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80099f8:	07db      	lsls	r3, r3, #31
 80099fa:	d526      	bpl.n	8009a4a <__cvt+0xa6>
 80099fc:	2f46      	cmp	r7, #70	; 0x46
 80099fe:	eb08 0905 	add.w	r9, r8, r5
 8009a02:	d111      	bne.n	8009a28 <__cvt+0x84>
 8009a04:	f898 3000 	ldrb.w	r3, [r8]
 8009a08:	2b30      	cmp	r3, #48	; 0x30
 8009a0a:	d10a      	bne.n	8009a22 <__cvt+0x7e>
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	2300      	movs	r3, #0
 8009a10:	4620      	mov	r0, r4
 8009a12:	4631      	mov	r1, r6
 8009a14:	f7f6 ffc8 	bl	80009a8 <__aeabi_dcmpeq>
 8009a18:	b918      	cbnz	r0, 8009a22 <__cvt+0x7e>
 8009a1a:	f1c5 0501 	rsb	r5, r5, #1
 8009a1e:	f8ca 5000 	str.w	r5, [sl]
 8009a22:	f8da 3000 	ldr.w	r3, [sl]
 8009a26:	4499      	add	r9, r3
 8009a28:	2200      	movs	r2, #0
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	4620      	mov	r0, r4
 8009a2e:	4631      	mov	r1, r6
 8009a30:	f7f6 ffba 	bl	80009a8 <__aeabi_dcmpeq>
 8009a34:	b938      	cbnz	r0, 8009a46 <__cvt+0xa2>
 8009a36:	2230      	movs	r2, #48	; 0x30
 8009a38:	9b07      	ldr	r3, [sp, #28]
 8009a3a:	454b      	cmp	r3, r9
 8009a3c:	d205      	bcs.n	8009a4a <__cvt+0xa6>
 8009a3e:	1c59      	adds	r1, r3, #1
 8009a40:	9107      	str	r1, [sp, #28]
 8009a42:	701a      	strb	r2, [r3, #0]
 8009a44:	e7f8      	b.n	8009a38 <__cvt+0x94>
 8009a46:	f8cd 901c 	str.w	r9, [sp, #28]
 8009a4a:	4640      	mov	r0, r8
 8009a4c:	9b07      	ldr	r3, [sp, #28]
 8009a4e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009a50:	eba3 0308 	sub.w	r3, r3, r8
 8009a54:	6013      	str	r3, [r2, #0]
 8009a56:	b008      	add	sp, #32
 8009a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009a5c <__exponent>:
 8009a5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a5e:	2900      	cmp	r1, #0
 8009a60:	bfb4      	ite	lt
 8009a62:	232d      	movlt	r3, #45	; 0x2d
 8009a64:	232b      	movge	r3, #43	; 0x2b
 8009a66:	4604      	mov	r4, r0
 8009a68:	bfb8      	it	lt
 8009a6a:	4249      	neglt	r1, r1
 8009a6c:	2909      	cmp	r1, #9
 8009a6e:	f804 2b02 	strb.w	r2, [r4], #2
 8009a72:	7043      	strb	r3, [r0, #1]
 8009a74:	dd21      	ble.n	8009aba <__exponent+0x5e>
 8009a76:	f10d 0307 	add.w	r3, sp, #7
 8009a7a:	461f      	mov	r7, r3
 8009a7c:	260a      	movs	r6, #10
 8009a7e:	fb91 f5f6 	sdiv	r5, r1, r6
 8009a82:	fb06 1115 	mls	r1, r6, r5, r1
 8009a86:	2d09      	cmp	r5, #9
 8009a88:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8009a8c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009a90:	f103 32ff 	add.w	r2, r3, #4294967295
 8009a94:	4629      	mov	r1, r5
 8009a96:	dc09      	bgt.n	8009aac <__exponent+0x50>
 8009a98:	3130      	adds	r1, #48	; 0x30
 8009a9a:	3b02      	subs	r3, #2
 8009a9c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009aa0:	42bb      	cmp	r3, r7
 8009aa2:	4622      	mov	r2, r4
 8009aa4:	d304      	bcc.n	8009ab0 <__exponent+0x54>
 8009aa6:	1a10      	subs	r0, r2, r0
 8009aa8:	b003      	add	sp, #12
 8009aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009aac:	4613      	mov	r3, r2
 8009aae:	e7e6      	b.n	8009a7e <__exponent+0x22>
 8009ab0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ab4:	f804 2b01 	strb.w	r2, [r4], #1
 8009ab8:	e7f2      	b.n	8009aa0 <__exponent+0x44>
 8009aba:	2330      	movs	r3, #48	; 0x30
 8009abc:	4419      	add	r1, r3
 8009abe:	7083      	strb	r3, [r0, #2]
 8009ac0:	1d02      	adds	r2, r0, #4
 8009ac2:	70c1      	strb	r1, [r0, #3]
 8009ac4:	e7ef      	b.n	8009aa6 <__exponent+0x4a>
	...

08009ac8 <_printf_float>:
 8009ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009acc:	b091      	sub	sp, #68	; 0x44
 8009ace:	460c      	mov	r4, r1
 8009ad0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8009ad2:	4693      	mov	fp, r2
 8009ad4:	461e      	mov	r6, r3
 8009ad6:	4605      	mov	r5, r0
 8009ad8:	f001 fa9e 	bl	800b018 <_localeconv_r>
 8009adc:	6803      	ldr	r3, [r0, #0]
 8009ade:	4618      	mov	r0, r3
 8009ae0:	9309      	str	r3, [sp, #36]	; 0x24
 8009ae2:	f7f6 fb35 	bl	8000150 <strlen>
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	930e      	str	r3, [sp, #56]	; 0x38
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	900a      	str	r0, [sp, #40]	; 0x28
 8009aee:	3307      	adds	r3, #7
 8009af0:	f023 0307 	bic.w	r3, r3, #7
 8009af4:	f103 0208 	add.w	r2, r3, #8
 8009af8:	f894 8018 	ldrb.w	r8, [r4, #24]
 8009afc:	f8d4 a000 	ldr.w	sl, [r4]
 8009b00:	603a      	str	r2, [r7, #0]
 8009b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b06:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009b0a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8009b0e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009b12:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b14:	f04f 32ff 	mov.w	r2, #4294967295
 8009b18:	4ba6      	ldr	r3, [pc, #664]	; (8009db4 <_printf_float+0x2ec>)
 8009b1a:	4638      	mov	r0, r7
 8009b1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009b1e:	f7f6 ff75 	bl	8000a0c <__aeabi_dcmpun>
 8009b22:	bb68      	cbnz	r0, 8009b80 <_printf_float+0xb8>
 8009b24:	f04f 32ff 	mov.w	r2, #4294967295
 8009b28:	4ba2      	ldr	r3, [pc, #648]	; (8009db4 <_printf_float+0x2ec>)
 8009b2a:	4638      	mov	r0, r7
 8009b2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009b2e:	f7f6 ff4f 	bl	80009d0 <__aeabi_dcmple>
 8009b32:	bb28      	cbnz	r0, 8009b80 <_printf_float+0xb8>
 8009b34:	2200      	movs	r2, #0
 8009b36:	2300      	movs	r3, #0
 8009b38:	4638      	mov	r0, r7
 8009b3a:	4649      	mov	r1, r9
 8009b3c:	f7f6 ff3e 	bl	80009bc <__aeabi_dcmplt>
 8009b40:	b110      	cbz	r0, 8009b48 <_printf_float+0x80>
 8009b42:	232d      	movs	r3, #45	; 0x2d
 8009b44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b48:	4f9b      	ldr	r7, [pc, #620]	; (8009db8 <_printf_float+0x2f0>)
 8009b4a:	4b9c      	ldr	r3, [pc, #624]	; (8009dbc <_printf_float+0x2f4>)
 8009b4c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009b50:	bf98      	it	ls
 8009b52:	461f      	movls	r7, r3
 8009b54:	2303      	movs	r3, #3
 8009b56:	f04f 0900 	mov.w	r9, #0
 8009b5a:	6123      	str	r3, [r4, #16]
 8009b5c:	f02a 0304 	bic.w	r3, sl, #4
 8009b60:	6023      	str	r3, [r4, #0]
 8009b62:	9600      	str	r6, [sp, #0]
 8009b64:	465b      	mov	r3, fp
 8009b66:	aa0f      	add	r2, sp, #60	; 0x3c
 8009b68:	4621      	mov	r1, r4
 8009b6a:	4628      	mov	r0, r5
 8009b6c:	f000 f9e2 	bl	8009f34 <_printf_common>
 8009b70:	3001      	adds	r0, #1
 8009b72:	f040 8090 	bne.w	8009c96 <_printf_float+0x1ce>
 8009b76:	f04f 30ff 	mov.w	r0, #4294967295
 8009b7a:	b011      	add	sp, #68	; 0x44
 8009b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b80:	463a      	mov	r2, r7
 8009b82:	464b      	mov	r3, r9
 8009b84:	4638      	mov	r0, r7
 8009b86:	4649      	mov	r1, r9
 8009b88:	f7f6 ff40 	bl	8000a0c <__aeabi_dcmpun>
 8009b8c:	b110      	cbz	r0, 8009b94 <_printf_float+0xcc>
 8009b8e:	4f8c      	ldr	r7, [pc, #560]	; (8009dc0 <_printf_float+0x2f8>)
 8009b90:	4b8c      	ldr	r3, [pc, #560]	; (8009dc4 <_printf_float+0x2fc>)
 8009b92:	e7db      	b.n	8009b4c <_printf_float+0x84>
 8009b94:	6863      	ldr	r3, [r4, #4]
 8009b96:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8009b9a:	1c59      	adds	r1, r3, #1
 8009b9c:	a80d      	add	r0, sp, #52	; 0x34
 8009b9e:	a90e      	add	r1, sp, #56	; 0x38
 8009ba0:	d140      	bne.n	8009c24 <_printf_float+0x15c>
 8009ba2:	2306      	movs	r3, #6
 8009ba4:	6063      	str	r3, [r4, #4]
 8009ba6:	f04f 0c00 	mov.w	ip, #0
 8009baa:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8009bae:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8009bb2:	6863      	ldr	r3, [r4, #4]
 8009bb4:	6022      	str	r2, [r4, #0]
 8009bb6:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8009bba:	9300      	str	r3, [sp, #0]
 8009bbc:	463a      	mov	r2, r7
 8009bbe:	464b      	mov	r3, r9
 8009bc0:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8009bc4:	4628      	mov	r0, r5
 8009bc6:	f7ff feed 	bl	80099a4 <__cvt>
 8009bca:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8009bce:	2b47      	cmp	r3, #71	; 0x47
 8009bd0:	4607      	mov	r7, r0
 8009bd2:	d109      	bne.n	8009be8 <_printf_float+0x120>
 8009bd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bd6:	1cd8      	adds	r0, r3, #3
 8009bd8:	db02      	blt.n	8009be0 <_printf_float+0x118>
 8009bda:	6862      	ldr	r2, [r4, #4]
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	dd47      	ble.n	8009c70 <_printf_float+0x1a8>
 8009be0:	f1a8 0802 	sub.w	r8, r8, #2
 8009be4:	fa5f f888 	uxtb.w	r8, r8
 8009be8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8009bec:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009bee:	d824      	bhi.n	8009c3a <_printf_float+0x172>
 8009bf0:	3901      	subs	r1, #1
 8009bf2:	4642      	mov	r2, r8
 8009bf4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009bf8:	910d      	str	r1, [sp, #52]	; 0x34
 8009bfa:	f7ff ff2f 	bl	8009a5c <__exponent>
 8009bfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c00:	4681      	mov	r9, r0
 8009c02:	1813      	adds	r3, r2, r0
 8009c04:	2a01      	cmp	r2, #1
 8009c06:	6123      	str	r3, [r4, #16]
 8009c08:	dc02      	bgt.n	8009c10 <_printf_float+0x148>
 8009c0a:	6822      	ldr	r2, [r4, #0]
 8009c0c:	07d1      	lsls	r1, r2, #31
 8009c0e:	d501      	bpl.n	8009c14 <_printf_float+0x14c>
 8009c10:	3301      	adds	r3, #1
 8009c12:	6123      	str	r3, [r4, #16]
 8009c14:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d0a2      	beq.n	8009b62 <_printf_float+0x9a>
 8009c1c:	232d      	movs	r3, #45	; 0x2d
 8009c1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c22:	e79e      	b.n	8009b62 <_printf_float+0x9a>
 8009c24:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8009c28:	f000 816e 	beq.w	8009f08 <_printf_float+0x440>
 8009c2c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009c30:	d1b9      	bne.n	8009ba6 <_printf_float+0xde>
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d1b7      	bne.n	8009ba6 <_printf_float+0xde>
 8009c36:	2301      	movs	r3, #1
 8009c38:	e7b4      	b.n	8009ba4 <_printf_float+0xdc>
 8009c3a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8009c3e:	d119      	bne.n	8009c74 <_printf_float+0x1ac>
 8009c40:	2900      	cmp	r1, #0
 8009c42:	6863      	ldr	r3, [r4, #4]
 8009c44:	dd0c      	ble.n	8009c60 <_printf_float+0x198>
 8009c46:	6121      	str	r1, [r4, #16]
 8009c48:	b913      	cbnz	r3, 8009c50 <_printf_float+0x188>
 8009c4a:	6822      	ldr	r2, [r4, #0]
 8009c4c:	07d2      	lsls	r2, r2, #31
 8009c4e:	d502      	bpl.n	8009c56 <_printf_float+0x18e>
 8009c50:	3301      	adds	r3, #1
 8009c52:	440b      	add	r3, r1
 8009c54:	6123      	str	r3, [r4, #16]
 8009c56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c58:	f04f 0900 	mov.w	r9, #0
 8009c5c:	65a3      	str	r3, [r4, #88]	; 0x58
 8009c5e:	e7d9      	b.n	8009c14 <_printf_float+0x14c>
 8009c60:	b913      	cbnz	r3, 8009c68 <_printf_float+0x1a0>
 8009c62:	6822      	ldr	r2, [r4, #0]
 8009c64:	07d0      	lsls	r0, r2, #31
 8009c66:	d501      	bpl.n	8009c6c <_printf_float+0x1a4>
 8009c68:	3302      	adds	r3, #2
 8009c6a:	e7f3      	b.n	8009c54 <_printf_float+0x18c>
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	e7f1      	b.n	8009c54 <_printf_float+0x18c>
 8009c70:	f04f 0867 	mov.w	r8, #103	; 0x67
 8009c74:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	db05      	blt.n	8009c88 <_printf_float+0x1c0>
 8009c7c:	6822      	ldr	r2, [r4, #0]
 8009c7e:	6123      	str	r3, [r4, #16]
 8009c80:	07d1      	lsls	r1, r2, #31
 8009c82:	d5e8      	bpl.n	8009c56 <_printf_float+0x18e>
 8009c84:	3301      	adds	r3, #1
 8009c86:	e7e5      	b.n	8009c54 <_printf_float+0x18c>
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	bfcc      	ite	gt
 8009c8c:	2301      	movgt	r3, #1
 8009c8e:	f1c3 0302 	rsble	r3, r3, #2
 8009c92:	4413      	add	r3, r2
 8009c94:	e7de      	b.n	8009c54 <_printf_float+0x18c>
 8009c96:	6823      	ldr	r3, [r4, #0]
 8009c98:	055a      	lsls	r2, r3, #21
 8009c9a:	d407      	bmi.n	8009cac <_printf_float+0x1e4>
 8009c9c:	6923      	ldr	r3, [r4, #16]
 8009c9e:	463a      	mov	r2, r7
 8009ca0:	4659      	mov	r1, fp
 8009ca2:	4628      	mov	r0, r5
 8009ca4:	47b0      	blx	r6
 8009ca6:	3001      	adds	r0, #1
 8009ca8:	d129      	bne.n	8009cfe <_printf_float+0x236>
 8009caa:	e764      	b.n	8009b76 <_printf_float+0xae>
 8009cac:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8009cb0:	f240 80d7 	bls.w	8009e62 <_printf_float+0x39a>
 8009cb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009cb8:	2200      	movs	r2, #0
 8009cba:	2300      	movs	r3, #0
 8009cbc:	f7f6 fe74 	bl	80009a8 <__aeabi_dcmpeq>
 8009cc0:	b388      	cbz	r0, 8009d26 <_printf_float+0x25e>
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	4a40      	ldr	r2, [pc, #256]	; (8009dc8 <_printf_float+0x300>)
 8009cc6:	4659      	mov	r1, fp
 8009cc8:	4628      	mov	r0, r5
 8009cca:	47b0      	blx	r6
 8009ccc:	3001      	adds	r0, #1
 8009cce:	f43f af52 	beq.w	8009b76 <_printf_float+0xae>
 8009cd2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	db02      	blt.n	8009ce0 <_printf_float+0x218>
 8009cda:	6823      	ldr	r3, [r4, #0]
 8009cdc:	07d8      	lsls	r0, r3, #31
 8009cde:	d50e      	bpl.n	8009cfe <_printf_float+0x236>
 8009ce0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ce4:	4659      	mov	r1, fp
 8009ce6:	4628      	mov	r0, r5
 8009ce8:	47b0      	blx	r6
 8009cea:	3001      	adds	r0, #1
 8009cec:	f43f af43 	beq.w	8009b76 <_printf_float+0xae>
 8009cf0:	2700      	movs	r7, #0
 8009cf2:	f104 081a 	add.w	r8, r4, #26
 8009cf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009cf8:	3b01      	subs	r3, #1
 8009cfa:	42bb      	cmp	r3, r7
 8009cfc:	dc09      	bgt.n	8009d12 <_printf_float+0x24a>
 8009cfe:	6823      	ldr	r3, [r4, #0]
 8009d00:	079f      	lsls	r7, r3, #30
 8009d02:	f100 80fd 	bmi.w	8009f00 <_printf_float+0x438>
 8009d06:	68e0      	ldr	r0, [r4, #12]
 8009d08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d0a:	4298      	cmp	r0, r3
 8009d0c:	bfb8      	it	lt
 8009d0e:	4618      	movlt	r0, r3
 8009d10:	e733      	b.n	8009b7a <_printf_float+0xb2>
 8009d12:	2301      	movs	r3, #1
 8009d14:	4642      	mov	r2, r8
 8009d16:	4659      	mov	r1, fp
 8009d18:	4628      	mov	r0, r5
 8009d1a:	47b0      	blx	r6
 8009d1c:	3001      	adds	r0, #1
 8009d1e:	f43f af2a 	beq.w	8009b76 <_printf_float+0xae>
 8009d22:	3701      	adds	r7, #1
 8009d24:	e7e7      	b.n	8009cf6 <_printf_float+0x22e>
 8009d26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	dc2b      	bgt.n	8009d84 <_printf_float+0x2bc>
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	4a26      	ldr	r2, [pc, #152]	; (8009dc8 <_printf_float+0x300>)
 8009d30:	4659      	mov	r1, fp
 8009d32:	4628      	mov	r0, r5
 8009d34:	47b0      	blx	r6
 8009d36:	3001      	adds	r0, #1
 8009d38:	f43f af1d 	beq.w	8009b76 <_printf_float+0xae>
 8009d3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d3e:	b923      	cbnz	r3, 8009d4a <_printf_float+0x282>
 8009d40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d42:	b913      	cbnz	r3, 8009d4a <_printf_float+0x282>
 8009d44:	6823      	ldr	r3, [r4, #0]
 8009d46:	07d9      	lsls	r1, r3, #31
 8009d48:	d5d9      	bpl.n	8009cfe <_printf_float+0x236>
 8009d4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d4e:	4659      	mov	r1, fp
 8009d50:	4628      	mov	r0, r5
 8009d52:	47b0      	blx	r6
 8009d54:	3001      	adds	r0, #1
 8009d56:	f43f af0e 	beq.w	8009b76 <_printf_float+0xae>
 8009d5a:	f04f 0800 	mov.w	r8, #0
 8009d5e:	f104 091a 	add.w	r9, r4, #26
 8009d62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d64:	425b      	negs	r3, r3
 8009d66:	4543      	cmp	r3, r8
 8009d68:	dc01      	bgt.n	8009d6e <_printf_float+0x2a6>
 8009d6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d6c:	e797      	b.n	8009c9e <_printf_float+0x1d6>
 8009d6e:	2301      	movs	r3, #1
 8009d70:	464a      	mov	r2, r9
 8009d72:	4659      	mov	r1, fp
 8009d74:	4628      	mov	r0, r5
 8009d76:	47b0      	blx	r6
 8009d78:	3001      	adds	r0, #1
 8009d7a:	f43f aefc 	beq.w	8009b76 <_printf_float+0xae>
 8009d7e:	f108 0801 	add.w	r8, r8, #1
 8009d82:	e7ee      	b.n	8009d62 <_printf_float+0x29a>
 8009d84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	bfa8      	it	ge
 8009d8c:	461a      	movge	r2, r3
 8009d8e:	2a00      	cmp	r2, #0
 8009d90:	4690      	mov	r8, r2
 8009d92:	dd07      	ble.n	8009da4 <_printf_float+0x2dc>
 8009d94:	4613      	mov	r3, r2
 8009d96:	4659      	mov	r1, fp
 8009d98:	463a      	mov	r2, r7
 8009d9a:	4628      	mov	r0, r5
 8009d9c:	47b0      	blx	r6
 8009d9e:	3001      	adds	r0, #1
 8009da0:	f43f aee9 	beq.w	8009b76 <_printf_float+0xae>
 8009da4:	f104 031a 	add.w	r3, r4, #26
 8009da8:	f04f 0a00 	mov.w	sl, #0
 8009dac:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8009db0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009db2:	e015      	b.n	8009de0 <_printf_float+0x318>
 8009db4:	7fefffff 	.word	0x7fefffff
 8009db8:	0800cae6 	.word	0x0800cae6
 8009dbc:	0800cae2 	.word	0x0800cae2
 8009dc0:	0800caee 	.word	0x0800caee
 8009dc4:	0800caea 	.word	0x0800caea
 8009dc8:	0800caf2 	.word	0x0800caf2
 8009dcc:	2301      	movs	r3, #1
 8009dce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009dd0:	4659      	mov	r1, fp
 8009dd2:	4628      	mov	r0, r5
 8009dd4:	47b0      	blx	r6
 8009dd6:	3001      	adds	r0, #1
 8009dd8:	f43f aecd 	beq.w	8009b76 <_printf_float+0xae>
 8009ddc:	f10a 0a01 	add.w	sl, sl, #1
 8009de0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8009de4:	eba9 0308 	sub.w	r3, r9, r8
 8009de8:	4553      	cmp	r3, sl
 8009dea:	dcef      	bgt.n	8009dcc <_printf_float+0x304>
 8009dec:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009df0:	429a      	cmp	r2, r3
 8009df2:	444f      	add	r7, r9
 8009df4:	db14      	blt.n	8009e20 <_printf_float+0x358>
 8009df6:	6823      	ldr	r3, [r4, #0]
 8009df8:	07da      	lsls	r2, r3, #31
 8009dfa:	d411      	bmi.n	8009e20 <_printf_float+0x358>
 8009dfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009dfe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009e00:	eba3 0209 	sub.w	r2, r3, r9
 8009e04:	eba3 0901 	sub.w	r9, r3, r1
 8009e08:	4591      	cmp	r9, r2
 8009e0a:	bfa8      	it	ge
 8009e0c:	4691      	movge	r9, r2
 8009e0e:	f1b9 0f00 	cmp.w	r9, #0
 8009e12:	dc0d      	bgt.n	8009e30 <_printf_float+0x368>
 8009e14:	2700      	movs	r7, #0
 8009e16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e1a:	f104 081a 	add.w	r8, r4, #26
 8009e1e:	e018      	b.n	8009e52 <_printf_float+0x38a>
 8009e20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e24:	4659      	mov	r1, fp
 8009e26:	4628      	mov	r0, r5
 8009e28:	47b0      	blx	r6
 8009e2a:	3001      	adds	r0, #1
 8009e2c:	d1e6      	bne.n	8009dfc <_printf_float+0x334>
 8009e2e:	e6a2      	b.n	8009b76 <_printf_float+0xae>
 8009e30:	464b      	mov	r3, r9
 8009e32:	463a      	mov	r2, r7
 8009e34:	4659      	mov	r1, fp
 8009e36:	4628      	mov	r0, r5
 8009e38:	47b0      	blx	r6
 8009e3a:	3001      	adds	r0, #1
 8009e3c:	d1ea      	bne.n	8009e14 <_printf_float+0x34c>
 8009e3e:	e69a      	b.n	8009b76 <_printf_float+0xae>
 8009e40:	2301      	movs	r3, #1
 8009e42:	4642      	mov	r2, r8
 8009e44:	4659      	mov	r1, fp
 8009e46:	4628      	mov	r0, r5
 8009e48:	47b0      	blx	r6
 8009e4a:	3001      	adds	r0, #1
 8009e4c:	f43f ae93 	beq.w	8009b76 <_printf_float+0xae>
 8009e50:	3701      	adds	r7, #1
 8009e52:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009e56:	1a9b      	subs	r3, r3, r2
 8009e58:	eba3 0309 	sub.w	r3, r3, r9
 8009e5c:	42bb      	cmp	r3, r7
 8009e5e:	dcef      	bgt.n	8009e40 <_printf_float+0x378>
 8009e60:	e74d      	b.n	8009cfe <_printf_float+0x236>
 8009e62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e64:	2a01      	cmp	r2, #1
 8009e66:	dc01      	bgt.n	8009e6c <_printf_float+0x3a4>
 8009e68:	07db      	lsls	r3, r3, #31
 8009e6a:	d538      	bpl.n	8009ede <_printf_float+0x416>
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	463a      	mov	r2, r7
 8009e70:	4659      	mov	r1, fp
 8009e72:	4628      	mov	r0, r5
 8009e74:	47b0      	blx	r6
 8009e76:	3001      	adds	r0, #1
 8009e78:	f43f ae7d 	beq.w	8009b76 <_printf_float+0xae>
 8009e7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e80:	4659      	mov	r1, fp
 8009e82:	4628      	mov	r0, r5
 8009e84:	47b0      	blx	r6
 8009e86:	3001      	adds	r0, #1
 8009e88:	f107 0701 	add.w	r7, r7, #1
 8009e8c:	f43f ae73 	beq.w	8009b76 <_printf_float+0xae>
 8009e90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009e94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e96:	2200      	movs	r2, #0
 8009e98:	f103 38ff 	add.w	r8, r3, #4294967295
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	f7f6 fd83 	bl	80009a8 <__aeabi_dcmpeq>
 8009ea2:	b9c0      	cbnz	r0, 8009ed6 <_printf_float+0x40e>
 8009ea4:	4643      	mov	r3, r8
 8009ea6:	463a      	mov	r2, r7
 8009ea8:	4659      	mov	r1, fp
 8009eaa:	4628      	mov	r0, r5
 8009eac:	47b0      	blx	r6
 8009eae:	3001      	adds	r0, #1
 8009eb0:	d10d      	bne.n	8009ece <_printf_float+0x406>
 8009eb2:	e660      	b.n	8009b76 <_printf_float+0xae>
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	4642      	mov	r2, r8
 8009eb8:	4659      	mov	r1, fp
 8009eba:	4628      	mov	r0, r5
 8009ebc:	47b0      	blx	r6
 8009ebe:	3001      	adds	r0, #1
 8009ec0:	f43f ae59 	beq.w	8009b76 <_printf_float+0xae>
 8009ec4:	3701      	adds	r7, #1
 8009ec6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ec8:	3b01      	subs	r3, #1
 8009eca:	42bb      	cmp	r3, r7
 8009ecc:	dcf2      	bgt.n	8009eb4 <_printf_float+0x3ec>
 8009ece:	464b      	mov	r3, r9
 8009ed0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009ed4:	e6e4      	b.n	8009ca0 <_printf_float+0x1d8>
 8009ed6:	2700      	movs	r7, #0
 8009ed8:	f104 081a 	add.w	r8, r4, #26
 8009edc:	e7f3      	b.n	8009ec6 <_printf_float+0x3fe>
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e7e1      	b.n	8009ea6 <_printf_float+0x3de>
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	4642      	mov	r2, r8
 8009ee6:	4659      	mov	r1, fp
 8009ee8:	4628      	mov	r0, r5
 8009eea:	47b0      	blx	r6
 8009eec:	3001      	adds	r0, #1
 8009eee:	f43f ae42 	beq.w	8009b76 <_printf_float+0xae>
 8009ef2:	3701      	adds	r7, #1
 8009ef4:	68e3      	ldr	r3, [r4, #12]
 8009ef6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009ef8:	1a9b      	subs	r3, r3, r2
 8009efa:	42bb      	cmp	r3, r7
 8009efc:	dcf1      	bgt.n	8009ee2 <_printf_float+0x41a>
 8009efe:	e702      	b.n	8009d06 <_printf_float+0x23e>
 8009f00:	2700      	movs	r7, #0
 8009f02:	f104 0819 	add.w	r8, r4, #25
 8009f06:	e7f5      	b.n	8009ef4 <_printf_float+0x42c>
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	f43f ae94 	beq.w	8009c36 <_printf_float+0x16e>
 8009f0e:	f04f 0c00 	mov.w	ip, #0
 8009f12:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8009f16:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8009f1a:	6022      	str	r2, [r4, #0]
 8009f1c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8009f20:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8009f24:	9300      	str	r3, [sp, #0]
 8009f26:	463a      	mov	r2, r7
 8009f28:	464b      	mov	r3, r9
 8009f2a:	4628      	mov	r0, r5
 8009f2c:	f7ff fd3a 	bl	80099a4 <__cvt>
 8009f30:	4607      	mov	r7, r0
 8009f32:	e64f      	b.n	8009bd4 <_printf_float+0x10c>

08009f34 <_printf_common>:
 8009f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f38:	4691      	mov	r9, r2
 8009f3a:	461f      	mov	r7, r3
 8009f3c:	688a      	ldr	r2, [r1, #8]
 8009f3e:	690b      	ldr	r3, [r1, #16]
 8009f40:	4606      	mov	r6, r0
 8009f42:	4293      	cmp	r3, r2
 8009f44:	bfb8      	it	lt
 8009f46:	4613      	movlt	r3, r2
 8009f48:	f8c9 3000 	str.w	r3, [r9]
 8009f4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f50:	460c      	mov	r4, r1
 8009f52:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f56:	b112      	cbz	r2, 8009f5e <_printf_common+0x2a>
 8009f58:	3301      	adds	r3, #1
 8009f5a:	f8c9 3000 	str.w	r3, [r9]
 8009f5e:	6823      	ldr	r3, [r4, #0]
 8009f60:	0699      	lsls	r1, r3, #26
 8009f62:	bf42      	ittt	mi
 8009f64:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009f68:	3302      	addmi	r3, #2
 8009f6a:	f8c9 3000 	strmi.w	r3, [r9]
 8009f6e:	6825      	ldr	r5, [r4, #0]
 8009f70:	f015 0506 	ands.w	r5, r5, #6
 8009f74:	d107      	bne.n	8009f86 <_printf_common+0x52>
 8009f76:	f104 0a19 	add.w	sl, r4, #25
 8009f7a:	68e3      	ldr	r3, [r4, #12]
 8009f7c:	f8d9 2000 	ldr.w	r2, [r9]
 8009f80:	1a9b      	subs	r3, r3, r2
 8009f82:	42ab      	cmp	r3, r5
 8009f84:	dc29      	bgt.n	8009fda <_printf_common+0xa6>
 8009f86:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009f8a:	6822      	ldr	r2, [r4, #0]
 8009f8c:	3300      	adds	r3, #0
 8009f8e:	bf18      	it	ne
 8009f90:	2301      	movne	r3, #1
 8009f92:	0692      	lsls	r2, r2, #26
 8009f94:	d42e      	bmi.n	8009ff4 <_printf_common+0xc0>
 8009f96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f9a:	4639      	mov	r1, r7
 8009f9c:	4630      	mov	r0, r6
 8009f9e:	47c0      	blx	r8
 8009fa0:	3001      	adds	r0, #1
 8009fa2:	d021      	beq.n	8009fe8 <_printf_common+0xb4>
 8009fa4:	6823      	ldr	r3, [r4, #0]
 8009fa6:	68e5      	ldr	r5, [r4, #12]
 8009fa8:	f003 0306 	and.w	r3, r3, #6
 8009fac:	2b04      	cmp	r3, #4
 8009fae:	bf18      	it	ne
 8009fb0:	2500      	movne	r5, #0
 8009fb2:	f8d9 2000 	ldr.w	r2, [r9]
 8009fb6:	f04f 0900 	mov.w	r9, #0
 8009fba:	bf08      	it	eq
 8009fbc:	1aad      	subeq	r5, r5, r2
 8009fbe:	68a3      	ldr	r3, [r4, #8]
 8009fc0:	6922      	ldr	r2, [r4, #16]
 8009fc2:	bf08      	it	eq
 8009fc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	bfc4      	itt	gt
 8009fcc:	1a9b      	subgt	r3, r3, r2
 8009fce:	18ed      	addgt	r5, r5, r3
 8009fd0:	341a      	adds	r4, #26
 8009fd2:	454d      	cmp	r5, r9
 8009fd4:	d11a      	bne.n	800a00c <_printf_common+0xd8>
 8009fd6:	2000      	movs	r0, #0
 8009fd8:	e008      	b.n	8009fec <_printf_common+0xb8>
 8009fda:	2301      	movs	r3, #1
 8009fdc:	4652      	mov	r2, sl
 8009fde:	4639      	mov	r1, r7
 8009fe0:	4630      	mov	r0, r6
 8009fe2:	47c0      	blx	r8
 8009fe4:	3001      	adds	r0, #1
 8009fe6:	d103      	bne.n	8009ff0 <_printf_common+0xbc>
 8009fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8009fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ff0:	3501      	adds	r5, #1
 8009ff2:	e7c2      	b.n	8009f7a <_printf_common+0x46>
 8009ff4:	2030      	movs	r0, #48	; 0x30
 8009ff6:	18e1      	adds	r1, r4, r3
 8009ff8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ffc:	1c5a      	adds	r2, r3, #1
 8009ffe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a002:	4422      	add	r2, r4
 800a004:	3302      	adds	r3, #2
 800a006:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a00a:	e7c4      	b.n	8009f96 <_printf_common+0x62>
 800a00c:	2301      	movs	r3, #1
 800a00e:	4622      	mov	r2, r4
 800a010:	4639      	mov	r1, r7
 800a012:	4630      	mov	r0, r6
 800a014:	47c0      	blx	r8
 800a016:	3001      	adds	r0, #1
 800a018:	d0e6      	beq.n	8009fe8 <_printf_common+0xb4>
 800a01a:	f109 0901 	add.w	r9, r9, #1
 800a01e:	e7d8      	b.n	8009fd2 <_printf_common+0x9e>

0800a020 <_printf_i>:
 800a020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a024:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a028:	460c      	mov	r4, r1
 800a02a:	7e09      	ldrb	r1, [r1, #24]
 800a02c:	b085      	sub	sp, #20
 800a02e:	296e      	cmp	r1, #110	; 0x6e
 800a030:	4617      	mov	r7, r2
 800a032:	4606      	mov	r6, r0
 800a034:	4698      	mov	r8, r3
 800a036:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a038:	f000 80b3 	beq.w	800a1a2 <_printf_i+0x182>
 800a03c:	d822      	bhi.n	800a084 <_printf_i+0x64>
 800a03e:	2963      	cmp	r1, #99	; 0x63
 800a040:	d036      	beq.n	800a0b0 <_printf_i+0x90>
 800a042:	d80a      	bhi.n	800a05a <_printf_i+0x3a>
 800a044:	2900      	cmp	r1, #0
 800a046:	f000 80b9 	beq.w	800a1bc <_printf_i+0x19c>
 800a04a:	2958      	cmp	r1, #88	; 0x58
 800a04c:	f000 8083 	beq.w	800a156 <_printf_i+0x136>
 800a050:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a054:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a058:	e032      	b.n	800a0c0 <_printf_i+0xa0>
 800a05a:	2964      	cmp	r1, #100	; 0x64
 800a05c:	d001      	beq.n	800a062 <_printf_i+0x42>
 800a05e:	2969      	cmp	r1, #105	; 0x69
 800a060:	d1f6      	bne.n	800a050 <_printf_i+0x30>
 800a062:	6820      	ldr	r0, [r4, #0]
 800a064:	6813      	ldr	r3, [r2, #0]
 800a066:	0605      	lsls	r5, r0, #24
 800a068:	f103 0104 	add.w	r1, r3, #4
 800a06c:	d52a      	bpl.n	800a0c4 <_printf_i+0xa4>
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	6011      	str	r1, [r2, #0]
 800a072:	2b00      	cmp	r3, #0
 800a074:	da03      	bge.n	800a07e <_printf_i+0x5e>
 800a076:	222d      	movs	r2, #45	; 0x2d
 800a078:	425b      	negs	r3, r3
 800a07a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a07e:	486f      	ldr	r0, [pc, #444]	; (800a23c <_printf_i+0x21c>)
 800a080:	220a      	movs	r2, #10
 800a082:	e039      	b.n	800a0f8 <_printf_i+0xd8>
 800a084:	2973      	cmp	r1, #115	; 0x73
 800a086:	f000 809d 	beq.w	800a1c4 <_printf_i+0x1a4>
 800a08a:	d808      	bhi.n	800a09e <_printf_i+0x7e>
 800a08c:	296f      	cmp	r1, #111	; 0x6f
 800a08e:	d020      	beq.n	800a0d2 <_printf_i+0xb2>
 800a090:	2970      	cmp	r1, #112	; 0x70
 800a092:	d1dd      	bne.n	800a050 <_printf_i+0x30>
 800a094:	6823      	ldr	r3, [r4, #0]
 800a096:	f043 0320 	orr.w	r3, r3, #32
 800a09a:	6023      	str	r3, [r4, #0]
 800a09c:	e003      	b.n	800a0a6 <_printf_i+0x86>
 800a09e:	2975      	cmp	r1, #117	; 0x75
 800a0a0:	d017      	beq.n	800a0d2 <_printf_i+0xb2>
 800a0a2:	2978      	cmp	r1, #120	; 0x78
 800a0a4:	d1d4      	bne.n	800a050 <_printf_i+0x30>
 800a0a6:	2378      	movs	r3, #120	; 0x78
 800a0a8:	4865      	ldr	r0, [pc, #404]	; (800a240 <_printf_i+0x220>)
 800a0aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a0ae:	e055      	b.n	800a15c <_printf_i+0x13c>
 800a0b0:	6813      	ldr	r3, [r2, #0]
 800a0b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0b6:	1d19      	adds	r1, r3, #4
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	6011      	str	r1, [r2, #0]
 800a0bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	e08c      	b.n	800a1de <_printf_i+0x1be>
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a0ca:	6011      	str	r1, [r2, #0]
 800a0cc:	bf18      	it	ne
 800a0ce:	b21b      	sxthne	r3, r3
 800a0d0:	e7cf      	b.n	800a072 <_printf_i+0x52>
 800a0d2:	6813      	ldr	r3, [r2, #0]
 800a0d4:	6825      	ldr	r5, [r4, #0]
 800a0d6:	1d18      	adds	r0, r3, #4
 800a0d8:	6010      	str	r0, [r2, #0]
 800a0da:	0628      	lsls	r0, r5, #24
 800a0dc:	d501      	bpl.n	800a0e2 <_printf_i+0xc2>
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	e002      	b.n	800a0e8 <_printf_i+0xc8>
 800a0e2:	0668      	lsls	r0, r5, #25
 800a0e4:	d5fb      	bpl.n	800a0de <_printf_i+0xbe>
 800a0e6:	881b      	ldrh	r3, [r3, #0]
 800a0e8:	296f      	cmp	r1, #111	; 0x6f
 800a0ea:	bf14      	ite	ne
 800a0ec:	220a      	movne	r2, #10
 800a0ee:	2208      	moveq	r2, #8
 800a0f0:	4852      	ldr	r0, [pc, #328]	; (800a23c <_printf_i+0x21c>)
 800a0f2:	2100      	movs	r1, #0
 800a0f4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a0f8:	6865      	ldr	r5, [r4, #4]
 800a0fa:	2d00      	cmp	r5, #0
 800a0fc:	60a5      	str	r5, [r4, #8]
 800a0fe:	f2c0 8095 	blt.w	800a22c <_printf_i+0x20c>
 800a102:	6821      	ldr	r1, [r4, #0]
 800a104:	f021 0104 	bic.w	r1, r1, #4
 800a108:	6021      	str	r1, [r4, #0]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d13d      	bne.n	800a18a <_printf_i+0x16a>
 800a10e:	2d00      	cmp	r5, #0
 800a110:	f040 808e 	bne.w	800a230 <_printf_i+0x210>
 800a114:	4665      	mov	r5, ip
 800a116:	2a08      	cmp	r2, #8
 800a118:	d10b      	bne.n	800a132 <_printf_i+0x112>
 800a11a:	6823      	ldr	r3, [r4, #0]
 800a11c:	07db      	lsls	r3, r3, #31
 800a11e:	d508      	bpl.n	800a132 <_printf_i+0x112>
 800a120:	6923      	ldr	r3, [r4, #16]
 800a122:	6862      	ldr	r2, [r4, #4]
 800a124:	429a      	cmp	r2, r3
 800a126:	bfde      	ittt	le
 800a128:	2330      	movle	r3, #48	; 0x30
 800a12a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a12e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a132:	ebac 0305 	sub.w	r3, ip, r5
 800a136:	6123      	str	r3, [r4, #16]
 800a138:	f8cd 8000 	str.w	r8, [sp]
 800a13c:	463b      	mov	r3, r7
 800a13e:	aa03      	add	r2, sp, #12
 800a140:	4621      	mov	r1, r4
 800a142:	4630      	mov	r0, r6
 800a144:	f7ff fef6 	bl	8009f34 <_printf_common>
 800a148:	3001      	adds	r0, #1
 800a14a:	d14d      	bne.n	800a1e8 <_printf_i+0x1c8>
 800a14c:	f04f 30ff 	mov.w	r0, #4294967295
 800a150:	b005      	add	sp, #20
 800a152:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a156:	4839      	ldr	r0, [pc, #228]	; (800a23c <_printf_i+0x21c>)
 800a158:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a15c:	6813      	ldr	r3, [r2, #0]
 800a15e:	6821      	ldr	r1, [r4, #0]
 800a160:	1d1d      	adds	r5, r3, #4
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	6015      	str	r5, [r2, #0]
 800a166:	060a      	lsls	r2, r1, #24
 800a168:	d50b      	bpl.n	800a182 <_printf_i+0x162>
 800a16a:	07ca      	lsls	r2, r1, #31
 800a16c:	bf44      	itt	mi
 800a16e:	f041 0120 	orrmi.w	r1, r1, #32
 800a172:	6021      	strmi	r1, [r4, #0]
 800a174:	b91b      	cbnz	r3, 800a17e <_printf_i+0x15e>
 800a176:	6822      	ldr	r2, [r4, #0]
 800a178:	f022 0220 	bic.w	r2, r2, #32
 800a17c:	6022      	str	r2, [r4, #0]
 800a17e:	2210      	movs	r2, #16
 800a180:	e7b7      	b.n	800a0f2 <_printf_i+0xd2>
 800a182:	064d      	lsls	r5, r1, #25
 800a184:	bf48      	it	mi
 800a186:	b29b      	uxthmi	r3, r3
 800a188:	e7ef      	b.n	800a16a <_printf_i+0x14a>
 800a18a:	4665      	mov	r5, ip
 800a18c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a190:	fb02 3311 	mls	r3, r2, r1, r3
 800a194:	5cc3      	ldrb	r3, [r0, r3]
 800a196:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a19a:	460b      	mov	r3, r1
 800a19c:	2900      	cmp	r1, #0
 800a19e:	d1f5      	bne.n	800a18c <_printf_i+0x16c>
 800a1a0:	e7b9      	b.n	800a116 <_printf_i+0xf6>
 800a1a2:	6813      	ldr	r3, [r2, #0]
 800a1a4:	6825      	ldr	r5, [r4, #0]
 800a1a6:	1d18      	adds	r0, r3, #4
 800a1a8:	6961      	ldr	r1, [r4, #20]
 800a1aa:	6010      	str	r0, [r2, #0]
 800a1ac:	0628      	lsls	r0, r5, #24
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	d501      	bpl.n	800a1b6 <_printf_i+0x196>
 800a1b2:	6019      	str	r1, [r3, #0]
 800a1b4:	e002      	b.n	800a1bc <_printf_i+0x19c>
 800a1b6:	066a      	lsls	r2, r5, #25
 800a1b8:	d5fb      	bpl.n	800a1b2 <_printf_i+0x192>
 800a1ba:	8019      	strh	r1, [r3, #0]
 800a1bc:	2300      	movs	r3, #0
 800a1be:	4665      	mov	r5, ip
 800a1c0:	6123      	str	r3, [r4, #16]
 800a1c2:	e7b9      	b.n	800a138 <_printf_i+0x118>
 800a1c4:	6813      	ldr	r3, [r2, #0]
 800a1c6:	1d19      	adds	r1, r3, #4
 800a1c8:	6011      	str	r1, [r2, #0]
 800a1ca:	681d      	ldr	r5, [r3, #0]
 800a1cc:	6862      	ldr	r2, [r4, #4]
 800a1ce:	2100      	movs	r1, #0
 800a1d0:	4628      	mov	r0, r5
 800a1d2:	f000 ff2f 	bl	800b034 <memchr>
 800a1d6:	b108      	cbz	r0, 800a1dc <_printf_i+0x1bc>
 800a1d8:	1b40      	subs	r0, r0, r5
 800a1da:	6060      	str	r0, [r4, #4]
 800a1dc:	6863      	ldr	r3, [r4, #4]
 800a1de:	6123      	str	r3, [r4, #16]
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1e6:	e7a7      	b.n	800a138 <_printf_i+0x118>
 800a1e8:	6923      	ldr	r3, [r4, #16]
 800a1ea:	462a      	mov	r2, r5
 800a1ec:	4639      	mov	r1, r7
 800a1ee:	4630      	mov	r0, r6
 800a1f0:	47c0      	blx	r8
 800a1f2:	3001      	adds	r0, #1
 800a1f4:	d0aa      	beq.n	800a14c <_printf_i+0x12c>
 800a1f6:	6823      	ldr	r3, [r4, #0]
 800a1f8:	079b      	lsls	r3, r3, #30
 800a1fa:	d413      	bmi.n	800a224 <_printf_i+0x204>
 800a1fc:	68e0      	ldr	r0, [r4, #12]
 800a1fe:	9b03      	ldr	r3, [sp, #12]
 800a200:	4298      	cmp	r0, r3
 800a202:	bfb8      	it	lt
 800a204:	4618      	movlt	r0, r3
 800a206:	e7a3      	b.n	800a150 <_printf_i+0x130>
 800a208:	2301      	movs	r3, #1
 800a20a:	464a      	mov	r2, r9
 800a20c:	4639      	mov	r1, r7
 800a20e:	4630      	mov	r0, r6
 800a210:	47c0      	blx	r8
 800a212:	3001      	adds	r0, #1
 800a214:	d09a      	beq.n	800a14c <_printf_i+0x12c>
 800a216:	3501      	adds	r5, #1
 800a218:	68e3      	ldr	r3, [r4, #12]
 800a21a:	9a03      	ldr	r2, [sp, #12]
 800a21c:	1a9b      	subs	r3, r3, r2
 800a21e:	42ab      	cmp	r3, r5
 800a220:	dcf2      	bgt.n	800a208 <_printf_i+0x1e8>
 800a222:	e7eb      	b.n	800a1fc <_printf_i+0x1dc>
 800a224:	2500      	movs	r5, #0
 800a226:	f104 0919 	add.w	r9, r4, #25
 800a22a:	e7f5      	b.n	800a218 <_printf_i+0x1f8>
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d1ac      	bne.n	800a18a <_printf_i+0x16a>
 800a230:	7803      	ldrb	r3, [r0, #0]
 800a232:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a236:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a23a:	e76c      	b.n	800a116 <_printf_i+0xf6>
 800a23c:	0800caf4 	.word	0x0800caf4
 800a240:	0800cb05 	.word	0x0800cb05

0800a244 <_sbrk_r>:
 800a244:	b538      	push	{r3, r4, r5, lr}
 800a246:	2300      	movs	r3, #0
 800a248:	4c05      	ldr	r4, [pc, #20]	; (800a260 <_sbrk_r+0x1c>)
 800a24a:	4605      	mov	r5, r0
 800a24c:	4608      	mov	r0, r1
 800a24e:	6023      	str	r3, [r4, #0]
 800a250:	f7f8 fdd6 	bl	8002e00 <_sbrk>
 800a254:	1c43      	adds	r3, r0, #1
 800a256:	d102      	bne.n	800a25e <_sbrk_r+0x1a>
 800a258:	6823      	ldr	r3, [r4, #0]
 800a25a:	b103      	cbz	r3, 800a25e <_sbrk_r+0x1a>
 800a25c:	602b      	str	r3, [r5, #0]
 800a25e:	bd38      	pop	{r3, r4, r5, pc}
 800a260:	200046a8 	.word	0x200046a8

0800a264 <sniprintf>:
 800a264:	b40c      	push	{r2, r3}
 800a266:	b530      	push	{r4, r5, lr}
 800a268:	4b17      	ldr	r3, [pc, #92]	; (800a2c8 <sniprintf+0x64>)
 800a26a:	1e0c      	subs	r4, r1, #0
 800a26c:	b09d      	sub	sp, #116	; 0x74
 800a26e:	681d      	ldr	r5, [r3, #0]
 800a270:	da08      	bge.n	800a284 <sniprintf+0x20>
 800a272:	238b      	movs	r3, #139	; 0x8b
 800a274:	f04f 30ff 	mov.w	r0, #4294967295
 800a278:	602b      	str	r3, [r5, #0]
 800a27a:	b01d      	add	sp, #116	; 0x74
 800a27c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a280:	b002      	add	sp, #8
 800a282:	4770      	bx	lr
 800a284:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a288:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a28c:	bf0c      	ite	eq
 800a28e:	4623      	moveq	r3, r4
 800a290:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a294:	9304      	str	r3, [sp, #16]
 800a296:	9307      	str	r3, [sp, #28]
 800a298:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a29c:	9002      	str	r0, [sp, #8]
 800a29e:	9006      	str	r0, [sp, #24]
 800a2a0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a2a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a2a6:	ab21      	add	r3, sp, #132	; 0x84
 800a2a8:	a902      	add	r1, sp, #8
 800a2aa:	4628      	mov	r0, r5
 800a2ac:	9301      	str	r3, [sp, #4]
 800a2ae:	f001 fa15 	bl	800b6dc <_svfiprintf_r>
 800a2b2:	1c43      	adds	r3, r0, #1
 800a2b4:	bfbc      	itt	lt
 800a2b6:	238b      	movlt	r3, #139	; 0x8b
 800a2b8:	602b      	strlt	r3, [r5, #0]
 800a2ba:	2c00      	cmp	r4, #0
 800a2bc:	d0dd      	beq.n	800a27a <sniprintf+0x16>
 800a2be:	2200      	movs	r2, #0
 800a2c0:	9b02      	ldr	r3, [sp, #8]
 800a2c2:	701a      	strb	r2, [r3, #0]
 800a2c4:	e7d9      	b.n	800a27a <sniprintf+0x16>
 800a2c6:	bf00      	nop
 800a2c8:	20000024 	.word	0x20000024

0800a2cc <siprintf>:
 800a2cc:	b40e      	push	{r1, r2, r3}
 800a2ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a2d2:	b500      	push	{lr}
 800a2d4:	b09c      	sub	sp, #112	; 0x70
 800a2d6:	ab1d      	add	r3, sp, #116	; 0x74
 800a2d8:	9002      	str	r0, [sp, #8]
 800a2da:	9006      	str	r0, [sp, #24]
 800a2dc:	9107      	str	r1, [sp, #28]
 800a2de:	9104      	str	r1, [sp, #16]
 800a2e0:	4808      	ldr	r0, [pc, #32]	; (800a304 <siprintf+0x38>)
 800a2e2:	4909      	ldr	r1, [pc, #36]	; (800a308 <siprintf+0x3c>)
 800a2e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2e8:	9105      	str	r1, [sp, #20]
 800a2ea:	6800      	ldr	r0, [r0, #0]
 800a2ec:	a902      	add	r1, sp, #8
 800a2ee:	9301      	str	r3, [sp, #4]
 800a2f0:	f001 f9f4 	bl	800b6dc <_svfiprintf_r>
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	9b02      	ldr	r3, [sp, #8]
 800a2f8:	701a      	strb	r2, [r3, #0]
 800a2fa:	b01c      	add	sp, #112	; 0x70
 800a2fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a300:	b003      	add	sp, #12
 800a302:	4770      	bx	lr
 800a304:	20000024 	.word	0x20000024
 800a308:	ffff0208 	.word	0xffff0208

0800a30c <strcpy>:
 800a30c:	4603      	mov	r3, r0
 800a30e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a312:	f803 2b01 	strb.w	r2, [r3], #1
 800a316:	2a00      	cmp	r2, #0
 800a318:	d1f9      	bne.n	800a30e <strcpy+0x2>
 800a31a:	4770      	bx	lr

0800a31c <_vsniprintf_r>:
 800a31c:	b530      	push	{r4, r5, lr}
 800a31e:	1e14      	subs	r4, r2, #0
 800a320:	4605      	mov	r5, r0
 800a322:	b09b      	sub	sp, #108	; 0x6c
 800a324:	4618      	mov	r0, r3
 800a326:	da05      	bge.n	800a334 <_vsniprintf_r+0x18>
 800a328:	238b      	movs	r3, #139	; 0x8b
 800a32a:	f04f 30ff 	mov.w	r0, #4294967295
 800a32e:	602b      	str	r3, [r5, #0]
 800a330:	b01b      	add	sp, #108	; 0x6c
 800a332:	bd30      	pop	{r4, r5, pc}
 800a334:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a338:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a33c:	bf0c      	ite	eq
 800a33e:	4623      	moveq	r3, r4
 800a340:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a344:	9302      	str	r3, [sp, #8]
 800a346:	9305      	str	r3, [sp, #20]
 800a348:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a34c:	9100      	str	r1, [sp, #0]
 800a34e:	9104      	str	r1, [sp, #16]
 800a350:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a354:	4602      	mov	r2, r0
 800a356:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a358:	4669      	mov	r1, sp
 800a35a:	4628      	mov	r0, r5
 800a35c:	f001 f9be 	bl	800b6dc <_svfiprintf_r>
 800a360:	1c43      	adds	r3, r0, #1
 800a362:	bfbc      	itt	lt
 800a364:	238b      	movlt	r3, #139	; 0x8b
 800a366:	602b      	strlt	r3, [r5, #0]
 800a368:	2c00      	cmp	r4, #0
 800a36a:	d0e1      	beq.n	800a330 <_vsniprintf_r+0x14>
 800a36c:	2200      	movs	r2, #0
 800a36e:	9b00      	ldr	r3, [sp, #0]
 800a370:	701a      	strb	r2, [r3, #0]
 800a372:	e7dd      	b.n	800a330 <_vsniprintf_r+0x14>

0800a374 <vsniprintf>:
 800a374:	b507      	push	{r0, r1, r2, lr}
 800a376:	9300      	str	r3, [sp, #0]
 800a378:	4613      	mov	r3, r2
 800a37a:	460a      	mov	r2, r1
 800a37c:	4601      	mov	r1, r0
 800a37e:	4803      	ldr	r0, [pc, #12]	; (800a38c <vsniprintf+0x18>)
 800a380:	6800      	ldr	r0, [r0, #0]
 800a382:	f7ff ffcb 	bl	800a31c <_vsniprintf_r>
 800a386:	b003      	add	sp, #12
 800a388:	f85d fb04 	ldr.w	pc, [sp], #4
 800a38c:	20000024 	.word	0x20000024

0800a390 <quorem>:
 800a390:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a394:	6903      	ldr	r3, [r0, #16]
 800a396:	690c      	ldr	r4, [r1, #16]
 800a398:	4680      	mov	r8, r0
 800a39a:	42a3      	cmp	r3, r4
 800a39c:	f2c0 8084 	blt.w	800a4a8 <quorem+0x118>
 800a3a0:	3c01      	subs	r4, #1
 800a3a2:	f101 0714 	add.w	r7, r1, #20
 800a3a6:	f100 0614 	add.w	r6, r0, #20
 800a3aa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a3ae:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a3b2:	3501      	adds	r5, #1
 800a3b4:	fbb0 f5f5 	udiv	r5, r0, r5
 800a3b8:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a3bc:	eb06 030c 	add.w	r3, r6, ip
 800a3c0:	eb07 090c 	add.w	r9, r7, ip
 800a3c4:	9301      	str	r3, [sp, #4]
 800a3c6:	b39d      	cbz	r5, 800a430 <quorem+0xa0>
 800a3c8:	f04f 0a00 	mov.w	sl, #0
 800a3cc:	4638      	mov	r0, r7
 800a3ce:	46b6      	mov	lr, r6
 800a3d0:	46d3      	mov	fp, sl
 800a3d2:	f850 2b04 	ldr.w	r2, [r0], #4
 800a3d6:	b293      	uxth	r3, r2
 800a3d8:	fb05 a303 	mla	r3, r5, r3, sl
 800a3dc:	0c12      	lsrs	r2, r2, #16
 800a3de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a3e2:	fb05 a202 	mla	r2, r5, r2, sl
 800a3e6:	b29b      	uxth	r3, r3
 800a3e8:	ebab 0303 	sub.w	r3, fp, r3
 800a3ec:	f8de b000 	ldr.w	fp, [lr]
 800a3f0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a3f4:	fa1f fb8b 	uxth.w	fp, fp
 800a3f8:	445b      	add	r3, fp
 800a3fa:	fa1f fb82 	uxth.w	fp, r2
 800a3fe:	f8de 2000 	ldr.w	r2, [lr]
 800a402:	4581      	cmp	r9, r0
 800a404:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a408:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a412:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a416:	f84e 3b04 	str.w	r3, [lr], #4
 800a41a:	d2da      	bcs.n	800a3d2 <quorem+0x42>
 800a41c:	f856 300c 	ldr.w	r3, [r6, ip]
 800a420:	b933      	cbnz	r3, 800a430 <quorem+0xa0>
 800a422:	9b01      	ldr	r3, [sp, #4]
 800a424:	3b04      	subs	r3, #4
 800a426:	429e      	cmp	r6, r3
 800a428:	461a      	mov	r2, r3
 800a42a:	d331      	bcc.n	800a490 <quorem+0x100>
 800a42c:	f8c8 4010 	str.w	r4, [r8, #16]
 800a430:	4640      	mov	r0, r8
 800a432:	f001 f823 	bl	800b47c <__mcmp>
 800a436:	2800      	cmp	r0, #0
 800a438:	db26      	blt.n	800a488 <quorem+0xf8>
 800a43a:	4630      	mov	r0, r6
 800a43c:	f04f 0c00 	mov.w	ip, #0
 800a440:	3501      	adds	r5, #1
 800a442:	f857 1b04 	ldr.w	r1, [r7], #4
 800a446:	f8d0 e000 	ldr.w	lr, [r0]
 800a44a:	b28b      	uxth	r3, r1
 800a44c:	ebac 0303 	sub.w	r3, ip, r3
 800a450:	fa1f f28e 	uxth.w	r2, lr
 800a454:	4413      	add	r3, r2
 800a456:	0c0a      	lsrs	r2, r1, #16
 800a458:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a45c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a460:	b29b      	uxth	r3, r3
 800a462:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a466:	45b9      	cmp	r9, r7
 800a468:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a46c:	f840 3b04 	str.w	r3, [r0], #4
 800a470:	d2e7      	bcs.n	800a442 <quorem+0xb2>
 800a472:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a476:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a47a:	b92a      	cbnz	r2, 800a488 <quorem+0xf8>
 800a47c:	3b04      	subs	r3, #4
 800a47e:	429e      	cmp	r6, r3
 800a480:	461a      	mov	r2, r3
 800a482:	d30b      	bcc.n	800a49c <quorem+0x10c>
 800a484:	f8c8 4010 	str.w	r4, [r8, #16]
 800a488:	4628      	mov	r0, r5
 800a48a:	b003      	add	sp, #12
 800a48c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a490:	6812      	ldr	r2, [r2, #0]
 800a492:	3b04      	subs	r3, #4
 800a494:	2a00      	cmp	r2, #0
 800a496:	d1c9      	bne.n	800a42c <quorem+0x9c>
 800a498:	3c01      	subs	r4, #1
 800a49a:	e7c4      	b.n	800a426 <quorem+0x96>
 800a49c:	6812      	ldr	r2, [r2, #0]
 800a49e:	3b04      	subs	r3, #4
 800a4a0:	2a00      	cmp	r2, #0
 800a4a2:	d1ef      	bne.n	800a484 <quorem+0xf4>
 800a4a4:	3c01      	subs	r4, #1
 800a4a6:	e7ea      	b.n	800a47e <quorem+0xee>
 800a4a8:	2000      	movs	r0, #0
 800a4aa:	e7ee      	b.n	800a48a <quorem+0xfa>
 800a4ac:	0000      	movs	r0, r0
	...

0800a4b0 <_dtoa_r>:
 800a4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4b4:	4616      	mov	r6, r2
 800a4b6:	461f      	mov	r7, r3
 800a4b8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a4ba:	b095      	sub	sp, #84	; 0x54
 800a4bc:	4604      	mov	r4, r0
 800a4be:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800a4c2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a4c6:	b93d      	cbnz	r5, 800a4d8 <_dtoa_r+0x28>
 800a4c8:	2010      	movs	r0, #16
 800a4ca:	f7ff f9a1 	bl	8009810 <malloc>
 800a4ce:	6260      	str	r0, [r4, #36]	; 0x24
 800a4d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a4d4:	6005      	str	r5, [r0, #0]
 800a4d6:	60c5      	str	r5, [r0, #12]
 800a4d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4da:	6819      	ldr	r1, [r3, #0]
 800a4dc:	b151      	cbz	r1, 800a4f4 <_dtoa_r+0x44>
 800a4de:	685a      	ldr	r2, [r3, #4]
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	4093      	lsls	r3, r2
 800a4e4:	604a      	str	r2, [r1, #4]
 800a4e6:	608b      	str	r3, [r1, #8]
 800a4e8:	4620      	mov	r0, r4
 800a4ea:	f000 fde7 	bl	800b0bc <_Bfree>
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4f2:	601a      	str	r2, [r3, #0]
 800a4f4:	1e3b      	subs	r3, r7, #0
 800a4f6:	bfaf      	iteee	ge
 800a4f8:	2300      	movge	r3, #0
 800a4fa:	2201      	movlt	r2, #1
 800a4fc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a500:	9303      	strlt	r3, [sp, #12]
 800a502:	bfac      	ite	ge
 800a504:	f8c8 3000 	strge.w	r3, [r8]
 800a508:	f8c8 2000 	strlt.w	r2, [r8]
 800a50c:	4bae      	ldr	r3, [pc, #696]	; (800a7c8 <_dtoa_r+0x318>)
 800a50e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a512:	ea33 0308 	bics.w	r3, r3, r8
 800a516:	d11b      	bne.n	800a550 <_dtoa_r+0xa0>
 800a518:	f242 730f 	movw	r3, #9999	; 0x270f
 800a51c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a51e:	6013      	str	r3, [r2, #0]
 800a520:	9b02      	ldr	r3, [sp, #8]
 800a522:	b923      	cbnz	r3, 800a52e <_dtoa_r+0x7e>
 800a524:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a528:	2800      	cmp	r0, #0
 800a52a:	f000 8545 	beq.w	800afb8 <_dtoa_r+0xb08>
 800a52e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a530:	b953      	cbnz	r3, 800a548 <_dtoa_r+0x98>
 800a532:	4ba6      	ldr	r3, [pc, #664]	; (800a7cc <_dtoa_r+0x31c>)
 800a534:	e021      	b.n	800a57a <_dtoa_r+0xca>
 800a536:	4ba6      	ldr	r3, [pc, #664]	; (800a7d0 <_dtoa_r+0x320>)
 800a538:	9306      	str	r3, [sp, #24]
 800a53a:	3308      	adds	r3, #8
 800a53c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a53e:	6013      	str	r3, [r2, #0]
 800a540:	9806      	ldr	r0, [sp, #24]
 800a542:	b015      	add	sp, #84	; 0x54
 800a544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a548:	4ba0      	ldr	r3, [pc, #640]	; (800a7cc <_dtoa_r+0x31c>)
 800a54a:	9306      	str	r3, [sp, #24]
 800a54c:	3303      	adds	r3, #3
 800a54e:	e7f5      	b.n	800a53c <_dtoa_r+0x8c>
 800a550:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a554:	2200      	movs	r2, #0
 800a556:	2300      	movs	r3, #0
 800a558:	4630      	mov	r0, r6
 800a55a:	4639      	mov	r1, r7
 800a55c:	f7f6 fa24 	bl	80009a8 <__aeabi_dcmpeq>
 800a560:	4682      	mov	sl, r0
 800a562:	b160      	cbz	r0, 800a57e <_dtoa_r+0xce>
 800a564:	2301      	movs	r3, #1
 800a566:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a568:	6013      	str	r3, [r2, #0]
 800a56a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	f000 8520 	beq.w	800afb2 <_dtoa_r+0xb02>
 800a572:	4b98      	ldr	r3, [pc, #608]	; (800a7d4 <_dtoa_r+0x324>)
 800a574:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a576:	6013      	str	r3, [r2, #0]
 800a578:	3b01      	subs	r3, #1
 800a57a:	9306      	str	r3, [sp, #24]
 800a57c:	e7e0      	b.n	800a540 <_dtoa_r+0x90>
 800a57e:	ab12      	add	r3, sp, #72	; 0x48
 800a580:	9301      	str	r3, [sp, #4]
 800a582:	ab13      	add	r3, sp, #76	; 0x4c
 800a584:	9300      	str	r3, [sp, #0]
 800a586:	4632      	mov	r2, r6
 800a588:	463b      	mov	r3, r7
 800a58a:	4620      	mov	r0, r4
 800a58c:	f000 ffee 	bl	800b56c <__d2b>
 800a590:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a594:	4683      	mov	fp, r0
 800a596:	2d00      	cmp	r5, #0
 800a598:	d07d      	beq.n	800a696 <_dtoa_r+0x1e6>
 800a59a:	46b0      	mov	r8, r6
 800a59c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a5a0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800a5a4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 800a5a8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a5ac:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	4b89      	ldr	r3, [pc, #548]	; (800a7d8 <_dtoa_r+0x328>)
 800a5b4:	4640      	mov	r0, r8
 800a5b6:	4649      	mov	r1, r9
 800a5b8:	f7f5 fdd6 	bl	8000168 <__aeabi_dsub>
 800a5bc:	a37c      	add	r3, pc, #496	; (adr r3, 800a7b0 <_dtoa_r+0x300>)
 800a5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c2:	f7f5 ff89 	bl	80004d8 <__aeabi_dmul>
 800a5c6:	a37c      	add	r3, pc, #496	; (adr r3, 800a7b8 <_dtoa_r+0x308>)
 800a5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5cc:	f7f5 fdce 	bl	800016c <__adddf3>
 800a5d0:	4606      	mov	r6, r0
 800a5d2:	4628      	mov	r0, r5
 800a5d4:	460f      	mov	r7, r1
 800a5d6:	f7f5 ff15 	bl	8000404 <__aeabi_i2d>
 800a5da:	a379      	add	r3, pc, #484	; (adr r3, 800a7c0 <_dtoa_r+0x310>)
 800a5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e0:	f7f5 ff7a 	bl	80004d8 <__aeabi_dmul>
 800a5e4:	4602      	mov	r2, r0
 800a5e6:	460b      	mov	r3, r1
 800a5e8:	4630      	mov	r0, r6
 800a5ea:	4639      	mov	r1, r7
 800a5ec:	f7f5 fdbe 	bl	800016c <__adddf3>
 800a5f0:	4606      	mov	r6, r0
 800a5f2:	460f      	mov	r7, r1
 800a5f4:	f7f6 fa20 	bl	8000a38 <__aeabi_d2iz>
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	4682      	mov	sl, r0
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	4630      	mov	r0, r6
 800a600:	4639      	mov	r1, r7
 800a602:	f7f6 f9db 	bl	80009bc <__aeabi_dcmplt>
 800a606:	b148      	cbz	r0, 800a61c <_dtoa_r+0x16c>
 800a608:	4650      	mov	r0, sl
 800a60a:	f7f5 fefb 	bl	8000404 <__aeabi_i2d>
 800a60e:	4632      	mov	r2, r6
 800a610:	463b      	mov	r3, r7
 800a612:	f7f6 f9c9 	bl	80009a8 <__aeabi_dcmpeq>
 800a616:	b908      	cbnz	r0, 800a61c <_dtoa_r+0x16c>
 800a618:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a61c:	f1ba 0f16 	cmp.w	sl, #22
 800a620:	d85a      	bhi.n	800a6d8 <_dtoa_r+0x228>
 800a622:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a626:	496d      	ldr	r1, [pc, #436]	; (800a7dc <_dtoa_r+0x32c>)
 800a628:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a62c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a630:	f7f6 f9e2 	bl	80009f8 <__aeabi_dcmpgt>
 800a634:	2800      	cmp	r0, #0
 800a636:	d051      	beq.n	800a6dc <_dtoa_r+0x22c>
 800a638:	2300      	movs	r3, #0
 800a63a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a63e:	930d      	str	r3, [sp, #52]	; 0x34
 800a640:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a642:	1b5d      	subs	r5, r3, r5
 800a644:	1e6b      	subs	r3, r5, #1
 800a646:	9307      	str	r3, [sp, #28]
 800a648:	bf43      	ittte	mi
 800a64a:	2300      	movmi	r3, #0
 800a64c:	f1c5 0901 	rsbmi	r9, r5, #1
 800a650:	9307      	strmi	r3, [sp, #28]
 800a652:	f04f 0900 	movpl.w	r9, #0
 800a656:	f1ba 0f00 	cmp.w	sl, #0
 800a65a:	db41      	blt.n	800a6e0 <_dtoa_r+0x230>
 800a65c:	9b07      	ldr	r3, [sp, #28]
 800a65e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800a662:	4453      	add	r3, sl
 800a664:	9307      	str	r3, [sp, #28]
 800a666:	2300      	movs	r3, #0
 800a668:	9308      	str	r3, [sp, #32]
 800a66a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a66c:	2b09      	cmp	r3, #9
 800a66e:	f200 808f 	bhi.w	800a790 <_dtoa_r+0x2e0>
 800a672:	2b05      	cmp	r3, #5
 800a674:	bfc4      	itt	gt
 800a676:	3b04      	subgt	r3, #4
 800a678:	931e      	strgt	r3, [sp, #120]	; 0x78
 800a67a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a67c:	bfc8      	it	gt
 800a67e:	2500      	movgt	r5, #0
 800a680:	f1a3 0302 	sub.w	r3, r3, #2
 800a684:	bfd8      	it	le
 800a686:	2501      	movle	r5, #1
 800a688:	2b03      	cmp	r3, #3
 800a68a:	f200 808d 	bhi.w	800a7a8 <_dtoa_r+0x2f8>
 800a68e:	e8df f003 	tbb	[pc, r3]
 800a692:	7d7b      	.short	0x7d7b
 800a694:	6f2f      	.short	0x6f2f
 800a696:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a69a:	441d      	add	r5, r3
 800a69c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a6a0:	2820      	cmp	r0, #32
 800a6a2:	dd13      	ble.n	800a6cc <_dtoa_r+0x21c>
 800a6a4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a6a8:	9b02      	ldr	r3, [sp, #8]
 800a6aa:	fa08 f800 	lsl.w	r8, r8, r0
 800a6ae:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a6b2:	fa23 f000 	lsr.w	r0, r3, r0
 800a6b6:	ea48 0000 	orr.w	r0, r8, r0
 800a6ba:	f7f5 fe93 	bl	80003e4 <__aeabi_ui2d>
 800a6be:	2301      	movs	r3, #1
 800a6c0:	4680      	mov	r8, r0
 800a6c2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800a6c6:	3d01      	subs	r5, #1
 800a6c8:	9310      	str	r3, [sp, #64]	; 0x40
 800a6ca:	e771      	b.n	800a5b0 <_dtoa_r+0x100>
 800a6cc:	9b02      	ldr	r3, [sp, #8]
 800a6ce:	f1c0 0020 	rsb	r0, r0, #32
 800a6d2:	fa03 f000 	lsl.w	r0, r3, r0
 800a6d6:	e7f0      	b.n	800a6ba <_dtoa_r+0x20a>
 800a6d8:	2301      	movs	r3, #1
 800a6da:	e7b0      	b.n	800a63e <_dtoa_r+0x18e>
 800a6dc:	900d      	str	r0, [sp, #52]	; 0x34
 800a6de:	e7af      	b.n	800a640 <_dtoa_r+0x190>
 800a6e0:	f1ca 0300 	rsb	r3, sl, #0
 800a6e4:	9308      	str	r3, [sp, #32]
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	eba9 090a 	sub.w	r9, r9, sl
 800a6ec:	930c      	str	r3, [sp, #48]	; 0x30
 800a6ee:	e7bc      	b.n	800a66a <_dtoa_r+0x1ba>
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	9309      	str	r3, [sp, #36]	; 0x24
 800a6f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	dd74      	ble.n	800a7e4 <_dtoa_r+0x334>
 800a6fa:	4698      	mov	r8, r3
 800a6fc:	9304      	str	r3, [sp, #16]
 800a6fe:	2200      	movs	r2, #0
 800a700:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a702:	6072      	str	r2, [r6, #4]
 800a704:	2204      	movs	r2, #4
 800a706:	f102 0014 	add.w	r0, r2, #20
 800a70a:	4298      	cmp	r0, r3
 800a70c:	6871      	ldr	r1, [r6, #4]
 800a70e:	d96e      	bls.n	800a7ee <_dtoa_r+0x33e>
 800a710:	4620      	mov	r0, r4
 800a712:	f000 fc9f 	bl	800b054 <_Balloc>
 800a716:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a718:	6030      	str	r0, [r6, #0]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f1b8 0f0e 	cmp.w	r8, #14
 800a720:	9306      	str	r3, [sp, #24]
 800a722:	f200 80ed 	bhi.w	800a900 <_dtoa_r+0x450>
 800a726:	2d00      	cmp	r5, #0
 800a728:	f000 80ea 	beq.w	800a900 <_dtoa_r+0x450>
 800a72c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a730:	f1ba 0f00 	cmp.w	sl, #0
 800a734:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a738:	dd77      	ble.n	800a82a <_dtoa_r+0x37a>
 800a73a:	4a28      	ldr	r2, [pc, #160]	; (800a7dc <_dtoa_r+0x32c>)
 800a73c:	f00a 030f 	and.w	r3, sl, #15
 800a740:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a744:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a748:	06f0      	lsls	r0, r6, #27
 800a74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a74e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a752:	d568      	bpl.n	800a826 <_dtoa_r+0x376>
 800a754:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a758:	4b21      	ldr	r3, [pc, #132]	; (800a7e0 <_dtoa_r+0x330>)
 800a75a:	2503      	movs	r5, #3
 800a75c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a760:	f7f5 ffe4 	bl	800072c <__aeabi_ddiv>
 800a764:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a768:	f006 060f 	and.w	r6, r6, #15
 800a76c:	4f1c      	ldr	r7, [pc, #112]	; (800a7e0 <_dtoa_r+0x330>)
 800a76e:	e04f      	b.n	800a810 <_dtoa_r+0x360>
 800a770:	2301      	movs	r3, #1
 800a772:	9309      	str	r3, [sp, #36]	; 0x24
 800a774:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a776:	4453      	add	r3, sl
 800a778:	f103 0801 	add.w	r8, r3, #1
 800a77c:	9304      	str	r3, [sp, #16]
 800a77e:	4643      	mov	r3, r8
 800a780:	2b01      	cmp	r3, #1
 800a782:	bfb8      	it	lt
 800a784:	2301      	movlt	r3, #1
 800a786:	e7ba      	b.n	800a6fe <_dtoa_r+0x24e>
 800a788:	2300      	movs	r3, #0
 800a78a:	e7b2      	b.n	800a6f2 <_dtoa_r+0x242>
 800a78c:	2300      	movs	r3, #0
 800a78e:	e7f0      	b.n	800a772 <_dtoa_r+0x2c2>
 800a790:	2501      	movs	r5, #1
 800a792:	2300      	movs	r3, #0
 800a794:	9509      	str	r5, [sp, #36]	; 0x24
 800a796:	931e      	str	r3, [sp, #120]	; 0x78
 800a798:	f04f 33ff 	mov.w	r3, #4294967295
 800a79c:	2200      	movs	r2, #0
 800a79e:	9304      	str	r3, [sp, #16]
 800a7a0:	4698      	mov	r8, r3
 800a7a2:	2312      	movs	r3, #18
 800a7a4:	921f      	str	r2, [sp, #124]	; 0x7c
 800a7a6:	e7aa      	b.n	800a6fe <_dtoa_r+0x24e>
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	9309      	str	r3, [sp, #36]	; 0x24
 800a7ac:	e7f4      	b.n	800a798 <_dtoa_r+0x2e8>
 800a7ae:	bf00      	nop
 800a7b0:	636f4361 	.word	0x636f4361
 800a7b4:	3fd287a7 	.word	0x3fd287a7
 800a7b8:	8b60c8b3 	.word	0x8b60c8b3
 800a7bc:	3fc68a28 	.word	0x3fc68a28
 800a7c0:	509f79fb 	.word	0x509f79fb
 800a7c4:	3fd34413 	.word	0x3fd34413
 800a7c8:	7ff00000 	.word	0x7ff00000
 800a7cc:	0800cb1f 	.word	0x0800cb1f
 800a7d0:	0800cb16 	.word	0x0800cb16
 800a7d4:	0800caf3 	.word	0x0800caf3
 800a7d8:	3ff80000 	.word	0x3ff80000
 800a7dc:	0800cb50 	.word	0x0800cb50
 800a7e0:	0800cb28 	.word	0x0800cb28
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	9304      	str	r3, [sp, #16]
 800a7e8:	4698      	mov	r8, r3
 800a7ea:	461a      	mov	r2, r3
 800a7ec:	e7da      	b.n	800a7a4 <_dtoa_r+0x2f4>
 800a7ee:	3101      	adds	r1, #1
 800a7f0:	6071      	str	r1, [r6, #4]
 800a7f2:	0052      	lsls	r2, r2, #1
 800a7f4:	e787      	b.n	800a706 <_dtoa_r+0x256>
 800a7f6:	07f1      	lsls	r1, r6, #31
 800a7f8:	d508      	bpl.n	800a80c <_dtoa_r+0x35c>
 800a7fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a7fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a802:	f7f5 fe69 	bl	80004d8 <__aeabi_dmul>
 800a806:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a80a:	3501      	adds	r5, #1
 800a80c:	1076      	asrs	r6, r6, #1
 800a80e:	3708      	adds	r7, #8
 800a810:	2e00      	cmp	r6, #0
 800a812:	d1f0      	bne.n	800a7f6 <_dtoa_r+0x346>
 800a814:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a818:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a81c:	f7f5 ff86 	bl	800072c <__aeabi_ddiv>
 800a820:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a824:	e01b      	b.n	800a85e <_dtoa_r+0x3ae>
 800a826:	2502      	movs	r5, #2
 800a828:	e7a0      	b.n	800a76c <_dtoa_r+0x2bc>
 800a82a:	f000 80a4 	beq.w	800a976 <_dtoa_r+0x4c6>
 800a82e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a832:	f1ca 0600 	rsb	r6, sl, #0
 800a836:	4ba0      	ldr	r3, [pc, #640]	; (800aab8 <_dtoa_r+0x608>)
 800a838:	f006 020f 	and.w	r2, r6, #15
 800a83c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a844:	f7f5 fe48 	bl	80004d8 <__aeabi_dmul>
 800a848:	2502      	movs	r5, #2
 800a84a:	2300      	movs	r3, #0
 800a84c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a850:	4f9a      	ldr	r7, [pc, #616]	; (800aabc <_dtoa_r+0x60c>)
 800a852:	1136      	asrs	r6, r6, #4
 800a854:	2e00      	cmp	r6, #0
 800a856:	f040 8083 	bne.w	800a960 <_dtoa_r+0x4b0>
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d1e0      	bne.n	800a820 <_dtoa_r+0x370>
 800a85e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a860:	2b00      	cmp	r3, #0
 800a862:	f000 808a 	beq.w	800a97a <_dtoa_r+0x4ca>
 800a866:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a86a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a86e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a872:	2200      	movs	r2, #0
 800a874:	4b92      	ldr	r3, [pc, #584]	; (800aac0 <_dtoa_r+0x610>)
 800a876:	f7f6 f8a1 	bl	80009bc <__aeabi_dcmplt>
 800a87a:	2800      	cmp	r0, #0
 800a87c:	d07d      	beq.n	800a97a <_dtoa_r+0x4ca>
 800a87e:	f1b8 0f00 	cmp.w	r8, #0
 800a882:	d07a      	beq.n	800a97a <_dtoa_r+0x4ca>
 800a884:	9b04      	ldr	r3, [sp, #16]
 800a886:	2b00      	cmp	r3, #0
 800a888:	dd36      	ble.n	800a8f8 <_dtoa_r+0x448>
 800a88a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a88e:	2200      	movs	r2, #0
 800a890:	4b8c      	ldr	r3, [pc, #560]	; (800aac4 <_dtoa_r+0x614>)
 800a892:	f7f5 fe21 	bl	80004d8 <__aeabi_dmul>
 800a896:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a89a:	9e04      	ldr	r6, [sp, #16]
 800a89c:	f10a 37ff 	add.w	r7, sl, #4294967295
 800a8a0:	3501      	adds	r5, #1
 800a8a2:	4628      	mov	r0, r5
 800a8a4:	f7f5 fdae 	bl	8000404 <__aeabi_i2d>
 800a8a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a8ac:	f7f5 fe14 	bl	80004d8 <__aeabi_dmul>
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	4b85      	ldr	r3, [pc, #532]	; (800aac8 <_dtoa_r+0x618>)
 800a8b4:	f7f5 fc5a 	bl	800016c <__adddf3>
 800a8b8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800a8bc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a8c0:	950b      	str	r5, [sp, #44]	; 0x2c
 800a8c2:	2e00      	cmp	r6, #0
 800a8c4:	d15c      	bne.n	800a980 <_dtoa_r+0x4d0>
 800a8c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	4b7f      	ldr	r3, [pc, #508]	; (800aacc <_dtoa_r+0x61c>)
 800a8ce:	f7f5 fc4b 	bl	8000168 <__aeabi_dsub>
 800a8d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8d4:	462b      	mov	r3, r5
 800a8d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8da:	f7f6 f88d 	bl	80009f8 <__aeabi_dcmpgt>
 800a8de:	2800      	cmp	r0, #0
 800a8e0:	f040 8281 	bne.w	800ade6 <_dtoa_r+0x936>
 800a8e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8ea:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a8ee:	f7f6 f865 	bl	80009bc <__aeabi_dcmplt>
 800a8f2:	2800      	cmp	r0, #0
 800a8f4:	f040 8275 	bne.w	800ade2 <_dtoa_r+0x932>
 800a8f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a8fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a900:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a902:	2b00      	cmp	r3, #0
 800a904:	f2c0 814b 	blt.w	800ab9e <_dtoa_r+0x6ee>
 800a908:	f1ba 0f0e 	cmp.w	sl, #14
 800a90c:	f300 8147 	bgt.w	800ab9e <_dtoa_r+0x6ee>
 800a910:	4b69      	ldr	r3, [pc, #420]	; (800aab8 <_dtoa_r+0x608>)
 800a912:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a91e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a920:	2b00      	cmp	r3, #0
 800a922:	f280 80d7 	bge.w	800aad4 <_dtoa_r+0x624>
 800a926:	f1b8 0f00 	cmp.w	r8, #0
 800a92a:	f300 80d3 	bgt.w	800aad4 <_dtoa_r+0x624>
 800a92e:	f040 8257 	bne.w	800ade0 <_dtoa_r+0x930>
 800a932:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a936:	2200      	movs	r2, #0
 800a938:	4b64      	ldr	r3, [pc, #400]	; (800aacc <_dtoa_r+0x61c>)
 800a93a:	f7f5 fdcd 	bl	80004d8 <__aeabi_dmul>
 800a93e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a942:	f7f6 f84f 	bl	80009e4 <__aeabi_dcmpge>
 800a946:	4646      	mov	r6, r8
 800a948:	4647      	mov	r7, r8
 800a94a:	2800      	cmp	r0, #0
 800a94c:	f040 822d 	bne.w	800adaa <_dtoa_r+0x8fa>
 800a950:	9b06      	ldr	r3, [sp, #24]
 800a952:	9a06      	ldr	r2, [sp, #24]
 800a954:	1c5d      	adds	r5, r3, #1
 800a956:	2331      	movs	r3, #49	; 0x31
 800a958:	f10a 0a01 	add.w	sl, sl, #1
 800a95c:	7013      	strb	r3, [r2, #0]
 800a95e:	e228      	b.n	800adb2 <_dtoa_r+0x902>
 800a960:	07f2      	lsls	r2, r6, #31
 800a962:	d505      	bpl.n	800a970 <_dtoa_r+0x4c0>
 800a964:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a968:	f7f5 fdb6 	bl	80004d8 <__aeabi_dmul>
 800a96c:	2301      	movs	r3, #1
 800a96e:	3501      	adds	r5, #1
 800a970:	1076      	asrs	r6, r6, #1
 800a972:	3708      	adds	r7, #8
 800a974:	e76e      	b.n	800a854 <_dtoa_r+0x3a4>
 800a976:	2502      	movs	r5, #2
 800a978:	e771      	b.n	800a85e <_dtoa_r+0x3ae>
 800a97a:	4657      	mov	r7, sl
 800a97c:	4646      	mov	r6, r8
 800a97e:	e790      	b.n	800a8a2 <_dtoa_r+0x3f2>
 800a980:	4b4d      	ldr	r3, [pc, #308]	; (800aab8 <_dtoa_r+0x608>)
 800a982:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a986:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a98a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d048      	beq.n	800aa22 <_dtoa_r+0x572>
 800a990:	4602      	mov	r2, r0
 800a992:	460b      	mov	r3, r1
 800a994:	2000      	movs	r0, #0
 800a996:	494e      	ldr	r1, [pc, #312]	; (800aad0 <_dtoa_r+0x620>)
 800a998:	f7f5 fec8 	bl	800072c <__aeabi_ddiv>
 800a99c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a9a0:	f7f5 fbe2 	bl	8000168 <__aeabi_dsub>
 800a9a4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a9a8:	9d06      	ldr	r5, [sp, #24]
 800a9aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9ae:	f7f6 f843 	bl	8000a38 <__aeabi_d2iz>
 800a9b2:	9011      	str	r0, [sp, #68]	; 0x44
 800a9b4:	f7f5 fd26 	bl	8000404 <__aeabi_i2d>
 800a9b8:	4602      	mov	r2, r0
 800a9ba:	460b      	mov	r3, r1
 800a9bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9c0:	f7f5 fbd2 	bl	8000168 <__aeabi_dsub>
 800a9c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a9c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9ca:	3330      	adds	r3, #48	; 0x30
 800a9cc:	f805 3b01 	strb.w	r3, [r5], #1
 800a9d0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a9d4:	f7f5 fff2 	bl	80009bc <__aeabi_dcmplt>
 800a9d8:	2800      	cmp	r0, #0
 800a9da:	d163      	bne.n	800aaa4 <_dtoa_r+0x5f4>
 800a9dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a9e0:	2000      	movs	r0, #0
 800a9e2:	4937      	ldr	r1, [pc, #220]	; (800aac0 <_dtoa_r+0x610>)
 800a9e4:	f7f5 fbc0 	bl	8000168 <__aeabi_dsub>
 800a9e8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a9ec:	f7f5 ffe6 	bl	80009bc <__aeabi_dcmplt>
 800a9f0:	2800      	cmp	r0, #0
 800a9f2:	f040 80b5 	bne.w	800ab60 <_dtoa_r+0x6b0>
 800a9f6:	9b06      	ldr	r3, [sp, #24]
 800a9f8:	1aeb      	subs	r3, r5, r3
 800a9fa:	429e      	cmp	r6, r3
 800a9fc:	f77f af7c 	ble.w	800a8f8 <_dtoa_r+0x448>
 800aa00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aa04:	2200      	movs	r2, #0
 800aa06:	4b2f      	ldr	r3, [pc, #188]	; (800aac4 <_dtoa_r+0x614>)
 800aa08:	f7f5 fd66 	bl	80004d8 <__aeabi_dmul>
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800aa12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa16:	4b2b      	ldr	r3, [pc, #172]	; (800aac4 <_dtoa_r+0x614>)
 800aa18:	f7f5 fd5e 	bl	80004d8 <__aeabi_dmul>
 800aa1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa20:	e7c3      	b.n	800a9aa <_dtoa_r+0x4fa>
 800aa22:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800aa26:	f7f5 fd57 	bl	80004d8 <__aeabi_dmul>
 800aa2a:	9b06      	ldr	r3, [sp, #24]
 800aa2c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800aa30:	199d      	adds	r5, r3, r6
 800aa32:	461e      	mov	r6, r3
 800aa34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa38:	f7f5 fffe 	bl	8000a38 <__aeabi_d2iz>
 800aa3c:	9011      	str	r0, [sp, #68]	; 0x44
 800aa3e:	f7f5 fce1 	bl	8000404 <__aeabi_i2d>
 800aa42:	4602      	mov	r2, r0
 800aa44:	460b      	mov	r3, r1
 800aa46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa4a:	f7f5 fb8d 	bl	8000168 <__aeabi_dsub>
 800aa4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa54:	3330      	adds	r3, #48	; 0x30
 800aa56:	f806 3b01 	strb.w	r3, [r6], #1
 800aa5a:	42ae      	cmp	r6, r5
 800aa5c:	f04f 0200 	mov.w	r2, #0
 800aa60:	d124      	bne.n	800aaac <_dtoa_r+0x5fc>
 800aa62:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aa66:	4b1a      	ldr	r3, [pc, #104]	; (800aad0 <_dtoa_r+0x620>)
 800aa68:	f7f5 fb80 	bl	800016c <__adddf3>
 800aa6c:	4602      	mov	r2, r0
 800aa6e:	460b      	mov	r3, r1
 800aa70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa74:	f7f5 ffc0 	bl	80009f8 <__aeabi_dcmpgt>
 800aa78:	2800      	cmp	r0, #0
 800aa7a:	d171      	bne.n	800ab60 <_dtoa_r+0x6b0>
 800aa7c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800aa80:	2000      	movs	r0, #0
 800aa82:	4913      	ldr	r1, [pc, #76]	; (800aad0 <_dtoa_r+0x620>)
 800aa84:	f7f5 fb70 	bl	8000168 <__aeabi_dsub>
 800aa88:	4602      	mov	r2, r0
 800aa8a:	460b      	mov	r3, r1
 800aa8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa90:	f7f5 ff94 	bl	80009bc <__aeabi_dcmplt>
 800aa94:	2800      	cmp	r0, #0
 800aa96:	f43f af2f 	beq.w	800a8f8 <_dtoa_r+0x448>
 800aa9a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aa9e:	1e6a      	subs	r2, r5, #1
 800aaa0:	2b30      	cmp	r3, #48	; 0x30
 800aaa2:	d001      	beq.n	800aaa8 <_dtoa_r+0x5f8>
 800aaa4:	46ba      	mov	sl, r7
 800aaa6:	e04a      	b.n	800ab3e <_dtoa_r+0x68e>
 800aaa8:	4615      	mov	r5, r2
 800aaaa:	e7f6      	b.n	800aa9a <_dtoa_r+0x5ea>
 800aaac:	4b05      	ldr	r3, [pc, #20]	; (800aac4 <_dtoa_r+0x614>)
 800aaae:	f7f5 fd13 	bl	80004d8 <__aeabi_dmul>
 800aab2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aab6:	e7bd      	b.n	800aa34 <_dtoa_r+0x584>
 800aab8:	0800cb50 	.word	0x0800cb50
 800aabc:	0800cb28 	.word	0x0800cb28
 800aac0:	3ff00000 	.word	0x3ff00000
 800aac4:	40240000 	.word	0x40240000
 800aac8:	401c0000 	.word	0x401c0000
 800aacc:	40140000 	.word	0x40140000
 800aad0:	3fe00000 	.word	0x3fe00000
 800aad4:	9d06      	ldr	r5, [sp, #24]
 800aad6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800aada:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aade:	4630      	mov	r0, r6
 800aae0:	4639      	mov	r1, r7
 800aae2:	f7f5 fe23 	bl	800072c <__aeabi_ddiv>
 800aae6:	f7f5 ffa7 	bl	8000a38 <__aeabi_d2iz>
 800aaea:	4681      	mov	r9, r0
 800aaec:	f7f5 fc8a 	bl	8000404 <__aeabi_i2d>
 800aaf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aaf4:	f7f5 fcf0 	bl	80004d8 <__aeabi_dmul>
 800aaf8:	4602      	mov	r2, r0
 800aafa:	460b      	mov	r3, r1
 800aafc:	4630      	mov	r0, r6
 800aafe:	4639      	mov	r1, r7
 800ab00:	f7f5 fb32 	bl	8000168 <__aeabi_dsub>
 800ab04:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800ab08:	f805 6b01 	strb.w	r6, [r5], #1
 800ab0c:	9e06      	ldr	r6, [sp, #24]
 800ab0e:	4602      	mov	r2, r0
 800ab10:	1bae      	subs	r6, r5, r6
 800ab12:	45b0      	cmp	r8, r6
 800ab14:	460b      	mov	r3, r1
 800ab16:	d135      	bne.n	800ab84 <_dtoa_r+0x6d4>
 800ab18:	f7f5 fb28 	bl	800016c <__adddf3>
 800ab1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab20:	4606      	mov	r6, r0
 800ab22:	460f      	mov	r7, r1
 800ab24:	f7f5 ff68 	bl	80009f8 <__aeabi_dcmpgt>
 800ab28:	b9c8      	cbnz	r0, 800ab5e <_dtoa_r+0x6ae>
 800ab2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab2e:	4630      	mov	r0, r6
 800ab30:	4639      	mov	r1, r7
 800ab32:	f7f5 ff39 	bl	80009a8 <__aeabi_dcmpeq>
 800ab36:	b110      	cbz	r0, 800ab3e <_dtoa_r+0x68e>
 800ab38:	f019 0f01 	tst.w	r9, #1
 800ab3c:	d10f      	bne.n	800ab5e <_dtoa_r+0x6ae>
 800ab3e:	4659      	mov	r1, fp
 800ab40:	4620      	mov	r0, r4
 800ab42:	f000 fabb 	bl	800b0bc <_Bfree>
 800ab46:	2300      	movs	r3, #0
 800ab48:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ab4a:	702b      	strb	r3, [r5, #0]
 800ab4c:	f10a 0301 	add.w	r3, sl, #1
 800ab50:	6013      	str	r3, [r2, #0]
 800ab52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	f43f acf3 	beq.w	800a540 <_dtoa_r+0x90>
 800ab5a:	601d      	str	r5, [r3, #0]
 800ab5c:	e4f0      	b.n	800a540 <_dtoa_r+0x90>
 800ab5e:	4657      	mov	r7, sl
 800ab60:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ab64:	1e6b      	subs	r3, r5, #1
 800ab66:	2a39      	cmp	r2, #57	; 0x39
 800ab68:	d106      	bne.n	800ab78 <_dtoa_r+0x6c8>
 800ab6a:	9a06      	ldr	r2, [sp, #24]
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	d107      	bne.n	800ab80 <_dtoa_r+0x6d0>
 800ab70:	2330      	movs	r3, #48	; 0x30
 800ab72:	7013      	strb	r3, [r2, #0]
 800ab74:	4613      	mov	r3, r2
 800ab76:	3701      	adds	r7, #1
 800ab78:	781a      	ldrb	r2, [r3, #0]
 800ab7a:	3201      	adds	r2, #1
 800ab7c:	701a      	strb	r2, [r3, #0]
 800ab7e:	e791      	b.n	800aaa4 <_dtoa_r+0x5f4>
 800ab80:	461d      	mov	r5, r3
 800ab82:	e7ed      	b.n	800ab60 <_dtoa_r+0x6b0>
 800ab84:	2200      	movs	r2, #0
 800ab86:	4b99      	ldr	r3, [pc, #612]	; (800adec <_dtoa_r+0x93c>)
 800ab88:	f7f5 fca6 	bl	80004d8 <__aeabi_dmul>
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	2300      	movs	r3, #0
 800ab90:	4606      	mov	r6, r0
 800ab92:	460f      	mov	r7, r1
 800ab94:	f7f5 ff08 	bl	80009a8 <__aeabi_dcmpeq>
 800ab98:	2800      	cmp	r0, #0
 800ab9a:	d09e      	beq.n	800aada <_dtoa_r+0x62a>
 800ab9c:	e7cf      	b.n	800ab3e <_dtoa_r+0x68e>
 800ab9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aba0:	2a00      	cmp	r2, #0
 800aba2:	f000 8088 	beq.w	800acb6 <_dtoa_r+0x806>
 800aba6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800aba8:	2a01      	cmp	r2, #1
 800abaa:	dc6d      	bgt.n	800ac88 <_dtoa_r+0x7d8>
 800abac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800abae:	2a00      	cmp	r2, #0
 800abb0:	d066      	beq.n	800ac80 <_dtoa_r+0x7d0>
 800abb2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800abb6:	464d      	mov	r5, r9
 800abb8:	9e08      	ldr	r6, [sp, #32]
 800abba:	9a07      	ldr	r2, [sp, #28]
 800abbc:	2101      	movs	r1, #1
 800abbe:	441a      	add	r2, r3
 800abc0:	4620      	mov	r0, r4
 800abc2:	4499      	add	r9, r3
 800abc4:	9207      	str	r2, [sp, #28]
 800abc6:	f000 fb19 	bl	800b1fc <__i2b>
 800abca:	4607      	mov	r7, r0
 800abcc:	2d00      	cmp	r5, #0
 800abce:	dd0b      	ble.n	800abe8 <_dtoa_r+0x738>
 800abd0:	9b07      	ldr	r3, [sp, #28]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	dd08      	ble.n	800abe8 <_dtoa_r+0x738>
 800abd6:	42ab      	cmp	r3, r5
 800abd8:	bfa8      	it	ge
 800abda:	462b      	movge	r3, r5
 800abdc:	9a07      	ldr	r2, [sp, #28]
 800abde:	eba9 0903 	sub.w	r9, r9, r3
 800abe2:	1aed      	subs	r5, r5, r3
 800abe4:	1ad3      	subs	r3, r2, r3
 800abe6:	9307      	str	r3, [sp, #28]
 800abe8:	9b08      	ldr	r3, [sp, #32]
 800abea:	b1eb      	cbz	r3, 800ac28 <_dtoa_r+0x778>
 800abec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d065      	beq.n	800acbe <_dtoa_r+0x80e>
 800abf2:	b18e      	cbz	r6, 800ac18 <_dtoa_r+0x768>
 800abf4:	4639      	mov	r1, r7
 800abf6:	4632      	mov	r2, r6
 800abf8:	4620      	mov	r0, r4
 800abfa:	f000 fb9d 	bl	800b338 <__pow5mult>
 800abfe:	465a      	mov	r2, fp
 800ac00:	4601      	mov	r1, r0
 800ac02:	4607      	mov	r7, r0
 800ac04:	4620      	mov	r0, r4
 800ac06:	f000 fb02 	bl	800b20e <__multiply>
 800ac0a:	4659      	mov	r1, fp
 800ac0c:	900a      	str	r0, [sp, #40]	; 0x28
 800ac0e:	4620      	mov	r0, r4
 800ac10:	f000 fa54 	bl	800b0bc <_Bfree>
 800ac14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac16:	469b      	mov	fp, r3
 800ac18:	9b08      	ldr	r3, [sp, #32]
 800ac1a:	1b9a      	subs	r2, r3, r6
 800ac1c:	d004      	beq.n	800ac28 <_dtoa_r+0x778>
 800ac1e:	4659      	mov	r1, fp
 800ac20:	4620      	mov	r0, r4
 800ac22:	f000 fb89 	bl	800b338 <__pow5mult>
 800ac26:	4683      	mov	fp, r0
 800ac28:	2101      	movs	r1, #1
 800ac2a:	4620      	mov	r0, r4
 800ac2c:	f000 fae6 	bl	800b1fc <__i2b>
 800ac30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac32:	4606      	mov	r6, r0
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	f000 81c6 	beq.w	800afc6 <_dtoa_r+0xb16>
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	4601      	mov	r1, r0
 800ac3e:	4620      	mov	r0, r4
 800ac40:	f000 fb7a 	bl	800b338 <__pow5mult>
 800ac44:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ac46:	4606      	mov	r6, r0
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	dc3e      	bgt.n	800acca <_dtoa_r+0x81a>
 800ac4c:	9b02      	ldr	r3, [sp, #8]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d137      	bne.n	800acc2 <_dtoa_r+0x812>
 800ac52:	9b03      	ldr	r3, [sp, #12]
 800ac54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d134      	bne.n	800acc6 <_dtoa_r+0x816>
 800ac5c:	9b03      	ldr	r3, [sp, #12]
 800ac5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac62:	0d1b      	lsrs	r3, r3, #20
 800ac64:	051b      	lsls	r3, r3, #20
 800ac66:	b12b      	cbz	r3, 800ac74 <_dtoa_r+0x7c4>
 800ac68:	9b07      	ldr	r3, [sp, #28]
 800ac6a:	f109 0901 	add.w	r9, r9, #1
 800ac6e:	3301      	adds	r3, #1
 800ac70:	9307      	str	r3, [sp, #28]
 800ac72:	2301      	movs	r3, #1
 800ac74:	9308      	str	r3, [sp, #32]
 800ac76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d128      	bne.n	800acce <_dtoa_r+0x81e>
 800ac7c:	2001      	movs	r0, #1
 800ac7e:	e02e      	b.n	800acde <_dtoa_r+0x82e>
 800ac80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac82:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ac86:	e796      	b.n	800abb6 <_dtoa_r+0x706>
 800ac88:	9b08      	ldr	r3, [sp, #32]
 800ac8a:	f108 36ff 	add.w	r6, r8, #4294967295
 800ac8e:	42b3      	cmp	r3, r6
 800ac90:	bfb7      	itett	lt
 800ac92:	9b08      	ldrlt	r3, [sp, #32]
 800ac94:	1b9e      	subge	r6, r3, r6
 800ac96:	1af2      	sublt	r2, r6, r3
 800ac98:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800ac9a:	bfbf      	itttt	lt
 800ac9c:	9608      	strlt	r6, [sp, #32]
 800ac9e:	189b      	addlt	r3, r3, r2
 800aca0:	930c      	strlt	r3, [sp, #48]	; 0x30
 800aca2:	2600      	movlt	r6, #0
 800aca4:	f1b8 0f00 	cmp.w	r8, #0
 800aca8:	bfb9      	ittee	lt
 800acaa:	eba9 0508 	sublt.w	r5, r9, r8
 800acae:	2300      	movlt	r3, #0
 800acb0:	464d      	movge	r5, r9
 800acb2:	4643      	movge	r3, r8
 800acb4:	e781      	b.n	800abba <_dtoa_r+0x70a>
 800acb6:	9e08      	ldr	r6, [sp, #32]
 800acb8:	464d      	mov	r5, r9
 800acba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800acbc:	e786      	b.n	800abcc <_dtoa_r+0x71c>
 800acbe:	9a08      	ldr	r2, [sp, #32]
 800acc0:	e7ad      	b.n	800ac1e <_dtoa_r+0x76e>
 800acc2:	2300      	movs	r3, #0
 800acc4:	e7d6      	b.n	800ac74 <_dtoa_r+0x7c4>
 800acc6:	9b02      	ldr	r3, [sp, #8]
 800acc8:	e7d4      	b.n	800ac74 <_dtoa_r+0x7c4>
 800acca:	2300      	movs	r3, #0
 800accc:	9308      	str	r3, [sp, #32]
 800acce:	6933      	ldr	r3, [r6, #16]
 800acd0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800acd4:	6918      	ldr	r0, [r3, #16]
 800acd6:	f000 fa43 	bl	800b160 <__hi0bits>
 800acda:	f1c0 0020 	rsb	r0, r0, #32
 800acde:	9b07      	ldr	r3, [sp, #28]
 800ace0:	4418      	add	r0, r3
 800ace2:	f010 001f 	ands.w	r0, r0, #31
 800ace6:	d047      	beq.n	800ad78 <_dtoa_r+0x8c8>
 800ace8:	f1c0 0320 	rsb	r3, r0, #32
 800acec:	2b04      	cmp	r3, #4
 800acee:	dd3b      	ble.n	800ad68 <_dtoa_r+0x8b8>
 800acf0:	9b07      	ldr	r3, [sp, #28]
 800acf2:	f1c0 001c 	rsb	r0, r0, #28
 800acf6:	4481      	add	r9, r0
 800acf8:	4405      	add	r5, r0
 800acfa:	4403      	add	r3, r0
 800acfc:	9307      	str	r3, [sp, #28]
 800acfe:	f1b9 0f00 	cmp.w	r9, #0
 800ad02:	dd05      	ble.n	800ad10 <_dtoa_r+0x860>
 800ad04:	4659      	mov	r1, fp
 800ad06:	464a      	mov	r2, r9
 800ad08:	4620      	mov	r0, r4
 800ad0a:	f000 fb63 	bl	800b3d4 <__lshift>
 800ad0e:	4683      	mov	fp, r0
 800ad10:	9b07      	ldr	r3, [sp, #28]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	dd05      	ble.n	800ad22 <_dtoa_r+0x872>
 800ad16:	4631      	mov	r1, r6
 800ad18:	461a      	mov	r2, r3
 800ad1a:	4620      	mov	r0, r4
 800ad1c:	f000 fb5a 	bl	800b3d4 <__lshift>
 800ad20:	4606      	mov	r6, r0
 800ad22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad24:	b353      	cbz	r3, 800ad7c <_dtoa_r+0x8cc>
 800ad26:	4631      	mov	r1, r6
 800ad28:	4658      	mov	r0, fp
 800ad2a:	f000 fba7 	bl	800b47c <__mcmp>
 800ad2e:	2800      	cmp	r0, #0
 800ad30:	da24      	bge.n	800ad7c <_dtoa_r+0x8cc>
 800ad32:	2300      	movs	r3, #0
 800ad34:	4659      	mov	r1, fp
 800ad36:	220a      	movs	r2, #10
 800ad38:	4620      	mov	r0, r4
 800ad3a:	f000 f9d6 	bl	800b0ea <__multadd>
 800ad3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad40:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad44:	4683      	mov	fp, r0
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	f000 8144 	beq.w	800afd4 <_dtoa_r+0xb24>
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	4639      	mov	r1, r7
 800ad50:	220a      	movs	r2, #10
 800ad52:	4620      	mov	r0, r4
 800ad54:	f000 f9c9 	bl	800b0ea <__multadd>
 800ad58:	9b04      	ldr	r3, [sp, #16]
 800ad5a:	4607      	mov	r7, r0
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	dc4d      	bgt.n	800adfc <_dtoa_r+0x94c>
 800ad60:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ad62:	2b02      	cmp	r3, #2
 800ad64:	dd4a      	ble.n	800adfc <_dtoa_r+0x94c>
 800ad66:	e011      	b.n	800ad8c <_dtoa_r+0x8dc>
 800ad68:	d0c9      	beq.n	800acfe <_dtoa_r+0x84e>
 800ad6a:	9a07      	ldr	r2, [sp, #28]
 800ad6c:	331c      	adds	r3, #28
 800ad6e:	441a      	add	r2, r3
 800ad70:	4499      	add	r9, r3
 800ad72:	441d      	add	r5, r3
 800ad74:	4613      	mov	r3, r2
 800ad76:	e7c1      	b.n	800acfc <_dtoa_r+0x84c>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	e7f6      	b.n	800ad6a <_dtoa_r+0x8ba>
 800ad7c:	f1b8 0f00 	cmp.w	r8, #0
 800ad80:	dc36      	bgt.n	800adf0 <_dtoa_r+0x940>
 800ad82:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ad84:	2b02      	cmp	r3, #2
 800ad86:	dd33      	ble.n	800adf0 <_dtoa_r+0x940>
 800ad88:	f8cd 8010 	str.w	r8, [sp, #16]
 800ad8c:	9b04      	ldr	r3, [sp, #16]
 800ad8e:	b963      	cbnz	r3, 800adaa <_dtoa_r+0x8fa>
 800ad90:	4631      	mov	r1, r6
 800ad92:	2205      	movs	r2, #5
 800ad94:	4620      	mov	r0, r4
 800ad96:	f000 f9a8 	bl	800b0ea <__multadd>
 800ad9a:	4601      	mov	r1, r0
 800ad9c:	4606      	mov	r6, r0
 800ad9e:	4658      	mov	r0, fp
 800ada0:	f000 fb6c 	bl	800b47c <__mcmp>
 800ada4:	2800      	cmp	r0, #0
 800ada6:	f73f add3 	bgt.w	800a950 <_dtoa_r+0x4a0>
 800adaa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800adac:	9d06      	ldr	r5, [sp, #24]
 800adae:	ea6f 0a03 	mvn.w	sl, r3
 800adb2:	f04f 0900 	mov.w	r9, #0
 800adb6:	4631      	mov	r1, r6
 800adb8:	4620      	mov	r0, r4
 800adba:	f000 f97f 	bl	800b0bc <_Bfree>
 800adbe:	2f00      	cmp	r7, #0
 800adc0:	f43f aebd 	beq.w	800ab3e <_dtoa_r+0x68e>
 800adc4:	f1b9 0f00 	cmp.w	r9, #0
 800adc8:	d005      	beq.n	800add6 <_dtoa_r+0x926>
 800adca:	45b9      	cmp	r9, r7
 800adcc:	d003      	beq.n	800add6 <_dtoa_r+0x926>
 800adce:	4649      	mov	r1, r9
 800add0:	4620      	mov	r0, r4
 800add2:	f000 f973 	bl	800b0bc <_Bfree>
 800add6:	4639      	mov	r1, r7
 800add8:	4620      	mov	r0, r4
 800adda:	f000 f96f 	bl	800b0bc <_Bfree>
 800adde:	e6ae      	b.n	800ab3e <_dtoa_r+0x68e>
 800ade0:	2600      	movs	r6, #0
 800ade2:	4637      	mov	r7, r6
 800ade4:	e7e1      	b.n	800adaa <_dtoa_r+0x8fa>
 800ade6:	46ba      	mov	sl, r7
 800ade8:	4637      	mov	r7, r6
 800adea:	e5b1      	b.n	800a950 <_dtoa_r+0x4a0>
 800adec:	40240000 	.word	0x40240000
 800adf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adf2:	f8cd 8010 	str.w	r8, [sp, #16]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	f000 80f3 	beq.w	800afe2 <_dtoa_r+0xb32>
 800adfc:	2d00      	cmp	r5, #0
 800adfe:	dd05      	ble.n	800ae0c <_dtoa_r+0x95c>
 800ae00:	4639      	mov	r1, r7
 800ae02:	462a      	mov	r2, r5
 800ae04:	4620      	mov	r0, r4
 800ae06:	f000 fae5 	bl	800b3d4 <__lshift>
 800ae0a:	4607      	mov	r7, r0
 800ae0c:	9b08      	ldr	r3, [sp, #32]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d04c      	beq.n	800aeac <_dtoa_r+0x9fc>
 800ae12:	6879      	ldr	r1, [r7, #4]
 800ae14:	4620      	mov	r0, r4
 800ae16:	f000 f91d 	bl	800b054 <_Balloc>
 800ae1a:	4605      	mov	r5, r0
 800ae1c:	693a      	ldr	r2, [r7, #16]
 800ae1e:	f107 010c 	add.w	r1, r7, #12
 800ae22:	3202      	adds	r2, #2
 800ae24:	0092      	lsls	r2, r2, #2
 800ae26:	300c      	adds	r0, #12
 800ae28:	f7fe fd02 	bl	8009830 <memcpy>
 800ae2c:	2201      	movs	r2, #1
 800ae2e:	4629      	mov	r1, r5
 800ae30:	4620      	mov	r0, r4
 800ae32:	f000 facf 	bl	800b3d4 <__lshift>
 800ae36:	46b9      	mov	r9, r7
 800ae38:	4607      	mov	r7, r0
 800ae3a:	9b06      	ldr	r3, [sp, #24]
 800ae3c:	9307      	str	r3, [sp, #28]
 800ae3e:	9b02      	ldr	r3, [sp, #8]
 800ae40:	f003 0301 	and.w	r3, r3, #1
 800ae44:	9308      	str	r3, [sp, #32]
 800ae46:	4631      	mov	r1, r6
 800ae48:	4658      	mov	r0, fp
 800ae4a:	f7ff faa1 	bl	800a390 <quorem>
 800ae4e:	4649      	mov	r1, r9
 800ae50:	4605      	mov	r5, r0
 800ae52:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ae56:	4658      	mov	r0, fp
 800ae58:	f000 fb10 	bl	800b47c <__mcmp>
 800ae5c:	463a      	mov	r2, r7
 800ae5e:	9002      	str	r0, [sp, #8]
 800ae60:	4631      	mov	r1, r6
 800ae62:	4620      	mov	r0, r4
 800ae64:	f000 fb24 	bl	800b4b0 <__mdiff>
 800ae68:	68c3      	ldr	r3, [r0, #12]
 800ae6a:	4602      	mov	r2, r0
 800ae6c:	bb03      	cbnz	r3, 800aeb0 <_dtoa_r+0xa00>
 800ae6e:	4601      	mov	r1, r0
 800ae70:	9009      	str	r0, [sp, #36]	; 0x24
 800ae72:	4658      	mov	r0, fp
 800ae74:	f000 fb02 	bl	800b47c <__mcmp>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae7c:	4611      	mov	r1, r2
 800ae7e:	4620      	mov	r0, r4
 800ae80:	9309      	str	r3, [sp, #36]	; 0x24
 800ae82:	f000 f91b 	bl	800b0bc <_Bfree>
 800ae86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae88:	b9a3      	cbnz	r3, 800aeb4 <_dtoa_r+0xa04>
 800ae8a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ae8c:	b992      	cbnz	r2, 800aeb4 <_dtoa_r+0xa04>
 800ae8e:	9a08      	ldr	r2, [sp, #32]
 800ae90:	b982      	cbnz	r2, 800aeb4 <_dtoa_r+0xa04>
 800ae92:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ae96:	d029      	beq.n	800aeec <_dtoa_r+0xa3c>
 800ae98:	9b02      	ldr	r3, [sp, #8]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	dd01      	ble.n	800aea2 <_dtoa_r+0x9f2>
 800ae9e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800aea2:	9b07      	ldr	r3, [sp, #28]
 800aea4:	1c5d      	adds	r5, r3, #1
 800aea6:	f883 8000 	strb.w	r8, [r3]
 800aeaa:	e784      	b.n	800adb6 <_dtoa_r+0x906>
 800aeac:	4638      	mov	r0, r7
 800aeae:	e7c2      	b.n	800ae36 <_dtoa_r+0x986>
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	e7e3      	b.n	800ae7c <_dtoa_r+0x9cc>
 800aeb4:	9a02      	ldr	r2, [sp, #8]
 800aeb6:	2a00      	cmp	r2, #0
 800aeb8:	db04      	blt.n	800aec4 <_dtoa_r+0xa14>
 800aeba:	d123      	bne.n	800af04 <_dtoa_r+0xa54>
 800aebc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800aebe:	bb0a      	cbnz	r2, 800af04 <_dtoa_r+0xa54>
 800aec0:	9a08      	ldr	r2, [sp, #32]
 800aec2:	b9fa      	cbnz	r2, 800af04 <_dtoa_r+0xa54>
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	ddec      	ble.n	800aea2 <_dtoa_r+0x9f2>
 800aec8:	4659      	mov	r1, fp
 800aeca:	2201      	movs	r2, #1
 800aecc:	4620      	mov	r0, r4
 800aece:	f000 fa81 	bl	800b3d4 <__lshift>
 800aed2:	4631      	mov	r1, r6
 800aed4:	4683      	mov	fp, r0
 800aed6:	f000 fad1 	bl	800b47c <__mcmp>
 800aeda:	2800      	cmp	r0, #0
 800aedc:	dc03      	bgt.n	800aee6 <_dtoa_r+0xa36>
 800aede:	d1e0      	bne.n	800aea2 <_dtoa_r+0x9f2>
 800aee0:	f018 0f01 	tst.w	r8, #1
 800aee4:	d0dd      	beq.n	800aea2 <_dtoa_r+0x9f2>
 800aee6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800aeea:	d1d8      	bne.n	800ae9e <_dtoa_r+0x9ee>
 800aeec:	9b07      	ldr	r3, [sp, #28]
 800aeee:	9a07      	ldr	r2, [sp, #28]
 800aef0:	1c5d      	adds	r5, r3, #1
 800aef2:	2339      	movs	r3, #57	; 0x39
 800aef4:	7013      	strb	r3, [r2, #0]
 800aef6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aefa:	1e6a      	subs	r2, r5, #1
 800aefc:	2b39      	cmp	r3, #57	; 0x39
 800aefe:	d04d      	beq.n	800af9c <_dtoa_r+0xaec>
 800af00:	3301      	adds	r3, #1
 800af02:	e052      	b.n	800afaa <_dtoa_r+0xafa>
 800af04:	9a07      	ldr	r2, [sp, #28]
 800af06:	2b00      	cmp	r3, #0
 800af08:	f102 0501 	add.w	r5, r2, #1
 800af0c:	dd06      	ble.n	800af1c <_dtoa_r+0xa6c>
 800af0e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800af12:	d0eb      	beq.n	800aeec <_dtoa_r+0xa3c>
 800af14:	f108 0801 	add.w	r8, r8, #1
 800af18:	9b07      	ldr	r3, [sp, #28]
 800af1a:	e7c4      	b.n	800aea6 <_dtoa_r+0x9f6>
 800af1c:	9b06      	ldr	r3, [sp, #24]
 800af1e:	9a04      	ldr	r2, [sp, #16]
 800af20:	1aeb      	subs	r3, r5, r3
 800af22:	4293      	cmp	r3, r2
 800af24:	f805 8c01 	strb.w	r8, [r5, #-1]
 800af28:	d021      	beq.n	800af6e <_dtoa_r+0xabe>
 800af2a:	4659      	mov	r1, fp
 800af2c:	2300      	movs	r3, #0
 800af2e:	220a      	movs	r2, #10
 800af30:	4620      	mov	r0, r4
 800af32:	f000 f8da 	bl	800b0ea <__multadd>
 800af36:	45b9      	cmp	r9, r7
 800af38:	4683      	mov	fp, r0
 800af3a:	f04f 0300 	mov.w	r3, #0
 800af3e:	f04f 020a 	mov.w	r2, #10
 800af42:	4649      	mov	r1, r9
 800af44:	4620      	mov	r0, r4
 800af46:	d105      	bne.n	800af54 <_dtoa_r+0xaa4>
 800af48:	f000 f8cf 	bl	800b0ea <__multadd>
 800af4c:	4681      	mov	r9, r0
 800af4e:	4607      	mov	r7, r0
 800af50:	9507      	str	r5, [sp, #28]
 800af52:	e778      	b.n	800ae46 <_dtoa_r+0x996>
 800af54:	f000 f8c9 	bl	800b0ea <__multadd>
 800af58:	4639      	mov	r1, r7
 800af5a:	4681      	mov	r9, r0
 800af5c:	2300      	movs	r3, #0
 800af5e:	220a      	movs	r2, #10
 800af60:	4620      	mov	r0, r4
 800af62:	f000 f8c2 	bl	800b0ea <__multadd>
 800af66:	4607      	mov	r7, r0
 800af68:	e7f2      	b.n	800af50 <_dtoa_r+0xaa0>
 800af6a:	f04f 0900 	mov.w	r9, #0
 800af6e:	4659      	mov	r1, fp
 800af70:	2201      	movs	r2, #1
 800af72:	4620      	mov	r0, r4
 800af74:	f000 fa2e 	bl	800b3d4 <__lshift>
 800af78:	4631      	mov	r1, r6
 800af7a:	4683      	mov	fp, r0
 800af7c:	f000 fa7e 	bl	800b47c <__mcmp>
 800af80:	2800      	cmp	r0, #0
 800af82:	dcb8      	bgt.n	800aef6 <_dtoa_r+0xa46>
 800af84:	d102      	bne.n	800af8c <_dtoa_r+0xadc>
 800af86:	f018 0f01 	tst.w	r8, #1
 800af8a:	d1b4      	bne.n	800aef6 <_dtoa_r+0xa46>
 800af8c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800af90:	1e6a      	subs	r2, r5, #1
 800af92:	2b30      	cmp	r3, #48	; 0x30
 800af94:	f47f af0f 	bne.w	800adb6 <_dtoa_r+0x906>
 800af98:	4615      	mov	r5, r2
 800af9a:	e7f7      	b.n	800af8c <_dtoa_r+0xadc>
 800af9c:	9b06      	ldr	r3, [sp, #24]
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d105      	bne.n	800afae <_dtoa_r+0xafe>
 800afa2:	2331      	movs	r3, #49	; 0x31
 800afa4:	9a06      	ldr	r2, [sp, #24]
 800afa6:	f10a 0a01 	add.w	sl, sl, #1
 800afaa:	7013      	strb	r3, [r2, #0]
 800afac:	e703      	b.n	800adb6 <_dtoa_r+0x906>
 800afae:	4615      	mov	r5, r2
 800afb0:	e7a1      	b.n	800aef6 <_dtoa_r+0xa46>
 800afb2:	4b17      	ldr	r3, [pc, #92]	; (800b010 <_dtoa_r+0xb60>)
 800afb4:	f7ff bae1 	b.w	800a57a <_dtoa_r+0xca>
 800afb8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800afba:	2b00      	cmp	r3, #0
 800afbc:	f47f aabb 	bne.w	800a536 <_dtoa_r+0x86>
 800afc0:	4b14      	ldr	r3, [pc, #80]	; (800b014 <_dtoa_r+0xb64>)
 800afc2:	f7ff bada 	b.w	800a57a <_dtoa_r+0xca>
 800afc6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800afc8:	2b01      	cmp	r3, #1
 800afca:	f77f ae3f 	ble.w	800ac4c <_dtoa_r+0x79c>
 800afce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afd0:	9308      	str	r3, [sp, #32]
 800afd2:	e653      	b.n	800ac7c <_dtoa_r+0x7cc>
 800afd4:	9b04      	ldr	r3, [sp, #16]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	dc03      	bgt.n	800afe2 <_dtoa_r+0xb32>
 800afda:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800afdc:	2b02      	cmp	r3, #2
 800afde:	f73f aed5 	bgt.w	800ad8c <_dtoa_r+0x8dc>
 800afe2:	9d06      	ldr	r5, [sp, #24]
 800afe4:	4631      	mov	r1, r6
 800afe6:	4658      	mov	r0, fp
 800afe8:	f7ff f9d2 	bl	800a390 <quorem>
 800afec:	9b06      	ldr	r3, [sp, #24]
 800afee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800aff2:	f805 8b01 	strb.w	r8, [r5], #1
 800aff6:	9a04      	ldr	r2, [sp, #16]
 800aff8:	1aeb      	subs	r3, r5, r3
 800affa:	429a      	cmp	r2, r3
 800affc:	ddb5      	ble.n	800af6a <_dtoa_r+0xaba>
 800affe:	4659      	mov	r1, fp
 800b000:	2300      	movs	r3, #0
 800b002:	220a      	movs	r2, #10
 800b004:	4620      	mov	r0, r4
 800b006:	f000 f870 	bl	800b0ea <__multadd>
 800b00a:	4683      	mov	fp, r0
 800b00c:	e7ea      	b.n	800afe4 <_dtoa_r+0xb34>
 800b00e:	bf00      	nop
 800b010:	0800caf2 	.word	0x0800caf2
 800b014:	0800cb16 	.word	0x0800cb16

0800b018 <_localeconv_r>:
 800b018:	4b04      	ldr	r3, [pc, #16]	; (800b02c <_localeconv_r+0x14>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	6a18      	ldr	r0, [r3, #32]
 800b01e:	4b04      	ldr	r3, [pc, #16]	; (800b030 <_localeconv_r+0x18>)
 800b020:	2800      	cmp	r0, #0
 800b022:	bf08      	it	eq
 800b024:	4618      	moveq	r0, r3
 800b026:	30f0      	adds	r0, #240	; 0xf0
 800b028:	4770      	bx	lr
 800b02a:	bf00      	nop
 800b02c:	20000024 	.word	0x20000024
 800b030:	20000088 	.word	0x20000088

0800b034 <memchr>:
 800b034:	b510      	push	{r4, lr}
 800b036:	b2c9      	uxtb	r1, r1
 800b038:	4402      	add	r2, r0
 800b03a:	4290      	cmp	r0, r2
 800b03c:	4603      	mov	r3, r0
 800b03e:	d101      	bne.n	800b044 <memchr+0x10>
 800b040:	2300      	movs	r3, #0
 800b042:	e003      	b.n	800b04c <memchr+0x18>
 800b044:	781c      	ldrb	r4, [r3, #0]
 800b046:	3001      	adds	r0, #1
 800b048:	428c      	cmp	r4, r1
 800b04a:	d1f6      	bne.n	800b03a <memchr+0x6>
 800b04c:	4618      	mov	r0, r3
 800b04e:	bd10      	pop	{r4, pc}

0800b050 <__malloc_lock>:
 800b050:	4770      	bx	lr

0800b052 <__malloc_unlock>:
 800b052:	4770      	bx	lr

0800b054 <_Balloc>:
 800b054:	b570      	push	{r4, r5, r6, lr}
 800b056:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b058:	4604      	mov	r4, r0
 800b05a:	460e      	mov	r6, r1
 800b05c:	b93d      	cbnz	r5, 800b06e <_Balloc+0x1a>
 800b05e:	2010      	movs	r0, #16
 800b060:	f7fe fbd6 	bl	8009810 <malloc>
 800b064:	6260      	str	r0, [r4, #36]	; 0x24
 800b066:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b06a:	6005      	str	r5, [r0, #0]
 800b06c:	60c5      	str	r5, [r0, #12]
 800b06e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b070:	68eb      	ldr	r3, [r5, #12]
 800b072:	b183      	cbz	r3, 800b096 <_Balloc+0x42>
 800b074:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b076:	68db      	ldr	r3, [r3, #12]
 800b078:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b07c:	b9b8      	cbnz	r0, 800b0ae <_Balloc+0x5a>
 800b07e:	2101      	movs	r1, #1
 800b080:	fa01 f506 	lsl.w	r5, r1, r6
 800b084:	1d6a      	adds	r2, r5, #5
 800b086:	0092      	lsls	r2, r2, #2
 800b088:	4620      	mov	r0, r4
 800b08a:	f000 fabe 	bl	800b60a <_calloc_r>
 800b08e:	b160      	cbz	r0, 800b0aa <_Balloc+0x56>
 800b090:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b094:	e00e      	b.n	800b0b4 <_Balloc+0x60>
 800b096:	2221      	movs	r2, #33	; 0x21
 800b098:	2104      	movs	r1, #4
 800b09a:	4620      	mov	r0, r4
 800b09c:	f000 fab5 	bl	800b60a <_calloc_r>
 800b0a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0a2:	60e8      	str	r0, [r5, #12]
 800b0a4:	68db      	ldr	r3, [r3, #12]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d1e4      	bne.n	800b074 <_Balloc+0x20>
 800b0aa:	2000      	movs	r0, #0
 800b0ac:	bd70      	pop	{r4, r5, r6, pc}
 800b0ae:	6802      	ldr	r2, [r0, #0]
 800b0b0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b0ba:	e7f7      	b.n	800b0ac <_Balloc+0x58>

0800b0bc <_Bfree>:
 800b0bc:	b570      	push	{r4, r5, r6, lr}
 800b0be:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b0c0:	4606      	mov	r6, r0
 800b0c2:	460d      	mov	r5, r1
 800b0c4:	b93c      	cbnz	r4, 800b0d6 <_Bfree+0x1a>
 800b0c6:	2010      	movs	r0, #16
 800b0c8:	f7fe fba2 	bl	8009810 <malloc>
 800b0cc:	6270      	str	r0, [r6, #36]	; 0x24
 800b0ce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b0d2:	6004      	str	r4, [r0, #0]
 800b0d4:	60c4      	str	r4, [r0, #12]
 800b0d6:	b13d      	cbz	r5, 800b0e8 <_Bfree+0x2c>
 800b0d8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b0da:	686a      	ldr	r2, [r5, #4]
 800b0dc:	68db      	ldr	r3, [r3, #12]
 800b0de:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b0e2:	6029      	str	r1, [r5, #0]
 800b0e4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b0e8:	bd70      	pop	{r4, r5, r6, pc}

0800b0ea <__multadd>:
 800b0ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0ee:	461f      	mov	r7, r3
 800b0f0:	4606      	mov	r6, r0
 800b0f2:	460c      	mov	r4, r1
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	690d      	ldr	r5, [r1, #16]
 800b0f8:	f101 0c14 	add.w	ip, r1, #20
 800b0fc:	f8dc 0000 	ldr.w	r0, [ip]
 800b100:	3301      	adds	r3, #1
 800b102:	b281      	uxth	r1, r0
 800b104:	fb02 7101 	mla	r1, r2, r1, r7
 800b108:	0c00      	lsrs	r0, r0, #16
 800b10a:	0c0f      	lsrs	r7, r1, #16
 800b10c:	fb02 7000 	mla	r0, r2, r0, r7
 800b110:	b289      	uxth	r1, r1
 800b112:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b116:	429d      	cmp	r5, r3
 800b118:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b11c:	f84c 1b04 	str.w	r1, [ip], #4
 800b120:	dcec      	bgt.n	800b0fc <__multadd+0x12>
 800b122:	b1d7      	cbz	r7, 800b15a <__multadd+0x70>
 800b124:	68a3      	ldr	r3, [r4, #8]
 800b126:	42ab      	cmp	r3, r5
 800b128:	dc12      	bgt.n	800b150 <__multadd+0x66>
 800b12a:	6861      	ldr	r1, [r4, #4]
 800b12c:	4630      	mov	r0, r6
 800b12e:	3101      	adds	r1, #1
 800b130:	f7ff ff90 	bl	800b054 <_Balloc>
 800b134:	4680      	mov	r8, r0
 800b136:	6922      	ldr	r2, [r4, #16]
 800b138:	f104 010c 	add.w	r1, r4, #12
 800b13c:	3202      	adds	r2, #2
 800b13e:	0092      	lsls	r2, r2, #2
 800b140:	300c      	adds	r0, #12
 800b142:	f7fe fb75 	bl	8009830 <memcpy>
 800b146:	4621      	mov	r1, r4
 800b148:	4630      	mov	r0, r6
 800b14a:	f7ff ffb7 	bl	800b0bc <_Bfree>
 800b14e:	4644      	mov	r4, r8
 800b150:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b154:	3501      	adds	r5, #1
 800b156:	615f      	str	r7, [r3, #20]
 800b158:	6125      	str	r5, [r4, #16]
 800b15a:	4620      	mov	r0, r4
 800b15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b160 <__hi0bits>:
 800b160:	0c02      	lsrs	r2, r0, #16
 800b162:	0412      	lsls	r2, r2, #16
 800b164:	4603      	mov	r3, r0
 800b166:	b9b2      	cbnz	r2, 800b196 <__hi0bits+0x36>
 800b168:	0403      	lsls	r3, r0, #16
 800b16a:	2010      	movs	r0, #16
 800b16c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b170:	bf04      	itt	eq
 800b172:	021b      	lsleq	r3, r3, #8
 800b174:	3008      	addeq	r0, #8
 800b176:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b17a:	bf04      	itt	eq
 800b17c:	011b      	lsleq	r3, r3, #4
 800b17e:	3004      	addeq	r0, #4
 800b180:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b184:	bf04      	itt	eq
 800b186:	009b      	lsleq	r3, r3, #2
 800b188:	3002      	addeq	r0, #2
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	db06      	blt.n	800b19c <__hi0bits+0x3c>
 800b18e:	005b      	lsls	r3, r3, #1
 800b190:	d503      	bpl.n	800b19a <__hi0bits+0x3a>
 800b192:	3001      	adds	r0, #1
 800b194:	4770      	bx	lr
 800b196:	2000      	movs	r0, #0
 800b198:	e7e8      	b.n	800b16c <__hi0bits+0xc>
 800b19a:	2020      	movs	r0, #32
 800b19c:	4770      	bx	lr

0800b19e <__lo0bits>:
 800b19e:	6803      	ldr	r3, [r0, #0]
 800b1a0:	4601      	mov	r1, r0
 800b1a2:	f013 0207 	ands.w	r2, r3, #7
 800b1a6:	d00b      	beq.n	800b1c0 <__lo0bits+0x22>
 800b1a8:	07da      	lsls	r2, r3, #31
 800b1aa:	d423      	bmi.n	800b1f4 <__lo0bits+0x56>
 800b1ac:	0798      	lsls	r0, r3, #30
 800b1ae:	bf49      	itett	mi
 800b1b0:	085b      	lsrmi	r3, r3, #1
 800b1b2:	089b      	lsrpl	r3, r3, #2
 800b1b4:	2001      	movmi	r0, #1
 800b1b6:	600b      	strmi	r3, [r1, #0]
 800b1b8:	bf5c      	itt	pl
 800b1ba:	600b      	strpl	r3, [r1, #0]
 800b1bc:	2002      	movpl	r0, #2
 800b1be:	4770      	bx	lr
 800b1c0:	b298      	uxth	r0, r3
 800b1c2:	b9a8      	cbnz	r0, 800b1f0 <__lo0bits+0x52>
 800b1c4:	2010      	movs	r0, #16
 800b1c6:	0c1b      	lsrs	r3, r3, #16
 800b1c8:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b1cc:	bf04      	itt	eq
 800b1ce:	0a1b      	lsreq	r3, r3, #8
 800b1d0:	3008      	addeq	r0, #8
 800b1d2:	071a      	lsls	r2, r3, #28
 800b1d4:	bf04      	itt	eq
 800b1d6:	091b      	lsreq	r3, r3, #4
 800b1d8:	3004      	addeq	r0, #4
 800b1da:	079a      	lsls	r2, r3, #30
 800b1dc:	bf04      	itt	eq
 800b1de:	089b      	lsreq	r3, r3, #2
 800b1e0:	3002      	addeq	r0, #2
 800b1e2:	07da      	lsls	r2, r3, #31
 800b1e4:	d402      	bmi.n	800b1ec <__lo0bits+0x4e>
 800b1e6:	085b      	lsrs	r3, r3, #1
 800b1e8:	d006      	beq.n	800b1f8 <__lo0bits+0x5a>
 800b1ea:	3001      	adds	r0, #1
 800b1ec:	600b      	str	r3, [r1, #0]
 800b1ee:	4770      	bx	lr
 800b1f0:	4610      	mov	r0, r2
 800b1f2:	e7e9      	b.n	800b1c8 <__lo0bits+0x2a>
 800b1f4:	2000      	movs	r0, #0
 800b1f6:	4770      	bx	lr
 800b1f8:	2020      	movs	r0, #32
 800b1fa:	4770      	bx	lr

0800b1fc <__i2b>:
 800b1fc:	b510      	push	{r4, lr}
 800b1fe:	460c      	mov	r4, r1
 800b200:	2101      	movs	r1, #1
 800b202:	f7ff ff27 	bl	800b054 <_Balloc>
 800b206:	2201      	movs	r2, #1
 800b208:	6144      	str	r4, [r0, #20]
 800b20a:	6102      	str	r2, [r0, #16]
 800b20c:	bd10      	pop	{r4, pc}

0800b20e <__multiply>:
 800b20e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b212:	4614      	mov	r4, r2
 800b214:	690a      	ldr	r2, [r1, #16]
 800b216:	6923      	ldr	r3, [r4, #16]
 800b218:	4688      	mov	r8, r1
 800b21a:	429a      	cmp	r2, r3
 800b21c:	bfbe      	ittt	lt
 800b21e:	460b      	movlt	r3, r1
 800b220:	46a0      	movlt	r8, r4
 800b222:	461c      	movlt	r4, r3
 800b224:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b228:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b22c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b230:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b234:	eb07 0609 	add.w	r6, r7, r9
 800b238:	42b3      	cmp	r3, r6
 800b23a:	bfb8      	it	lt
 800b23c:	3101      	addlt	r1, #1
 800b23e:	f7ff ff09 	bl	800b054 <_Balloc>
 800b242:	f100 0514 	add.w	r5, r0, #20
 800b246:	462b      	mov	r3, r5
 800b248:	2200      	movs	r2, #0
 800b24a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b24e:	4573      	cmp	r3, lr
 800b250:	d316      	bcc.n	800b280 <__multiply+0x72>
 800b252:	f104 0214 	add.w	r2, r4, #20
 800b256:	f108 0114 	add.w	r1, r8, #20
 800b25a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b25e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b262:	9300      	str	r3, [sp, #0]
 800b264:	9b00      	ldr	r3, [sp, #0]
 800b266:	9201      	str	r2, [sp, #4]
 800b268:	4293      	cmp	r3, r2
 800b26a:	d80c      	bhi.n	800b286 <__multiply+0x78>
 800b26c:	2e00      	cmp	r6, #0
 800b26e:	dd03      	ble.n	800b278 <__multiply+0x6a>
 800b270:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b274:	2b00      	cmp	r3, #0
 800b276:	d05d      	beq.n	800b334 <__multiply+0x126>
 800b278:	6106      	str	r6, [r0, #16]
 800b27a:	b003      	add	sp, #12
 800b27c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b280:	f843 2b04 	str.w	r2, [r3], #4
 800b284:	e7e3      	b.n	800b24e <__multiply+0x40>
 800b286:	f8b2 b000 	ldrh.w	fp, [r2]
 800b28a:	f1bb 0f00 	cmp.w	fp, #0
 800b28e:	d023      	beq.n	800b2d8 <__multiply+0xca>
 800b290:	4689      	mov	r9, r1
 800b292:	46ac      	mov	ip, r5
 800b294:	f04f 0800 	mov.w	r8, #0
 800b298:	f859 4b04 	ldr.w	r4, [r9], #4
 800b29c:	f8dc a000 	ldr.w	sl, [ip]
 800b2a0:	b2a3      	uxth	r3, r4
 800b2a2:	fa1f fa8a 	uxth.w	sl, sl
 800b2a6:	fb0b a303 	mla	r3, fp, r3, sl
 800b2aa:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b2ae:	f8dc 4000 	ldr.w	r4, [ip]
 800b2b2:	4443      	add	r3, r8
 800b2b4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b2b8:	fb0b 840a 	mla	r4, fp, sl, r8
 800b2bc:	46e2      	mov	sl, ip
 800b2be:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b2c2:	b29b      	uxth	r3, r3
 800b2c4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b2c8:	454f      	cmp	r7, r9
 800b2ca:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b2ce:	f84a 3b04 	str.w	r3, [sl], #4
 800b2d2:	d82b      	bhi.n	800b32c <__multiply+0x11e>
 800b2d4:	f8cc 8004 	str.w	r8, [ip, #4]
 800b2d8:	9b01      	ldr	r3, [sp, #4]
 800b2da:	3204      	adds	r2, #4
 800b2dc:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b2e0:	f1ba 0f00 	cmp.w	sl, #0
 800b2e4:	d020      	beq.n	800b328 <__multiply+0x11a>
 800b2e6:	4689      	mov	r9, r1
 800b2e8:	46a8      	mov	r8, r5
 800b2ea:	f04f 0b00 	mov.w	fp, #0
 800b2ee:	682b      	ldr	r3, [r5, #0]
 800b2f0:	f8b9 c000 	ldrh.w	ip, [r9]
 800b2f4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b2f8:	b29b      	uxth	r3, r3
 800b2fa:	fb0a 440c 	mla	r4, sl, ip, r4
 800b2fe:	46c4      	mov	ip, r8
 800b300:	445c      	add	r4, fp
 800b302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b306:	f84c 3b04 	str.w	r3, [ip], #4
 800b30a:	f859 3b04 	ldr.w	r3, [r9], #4
 800b30e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b312:	0c1b      	lsrs	r3, r3, #16
 800b314:	fb0a b303 	mla	r3, sl, r3, fp
 800b318:	454f      	cmp	r7, r9
 800b31a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b31e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b322:	d805      	bhi.n	800b330 <__multiply+0x122>
 800b324:	f8c8 3004 	str.w	r3, [r8, #4]
 800b328:	3504      	adds	r5, #4
 800b32a:	e79b      	b.n	800b264 <__multiply+0x56>
 800b32c:	46d4      	mov	ip, sl
 800b32e:	e7b3      	b.n	800b298 <__multiply+0x8a>
 800b330:	46e0      	mov	r8, ip
 800b332:	e7dd      	b.n	800b2f0 <__multiply+0xe2>
 800b334:	3e01      	subs	r6, #1
 800b336:	e799      	b.n	800b26c <__multiply+0x5e>

0800b338 <__pow5mult>:
 800b338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b33c:	4615      	mov	r5, r2
 800b33e:	f012 0203 	ands.w	r2, r2, #3
 800b342:	4606      	mov	r6, r0
 800b344:	460f      	mov	r7, r1
 800b346:	d007      	beq.n	800b358 <__pow5mult+0x20>
 800b348:	4c21      	ldr	r4, [pc, #132]	; (800b3d0 <__pow5mult+0x98>)
 800b34a:	3a01      	subs	r2, #1
 800b34c:	2300      	movs	r3, #0
 800b34e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b352:	f7ff feca 	bl	800b0ea <__multadd>
 800b356:	4607      	mov	r7, r0
 800b358:	10ad      	asrs	r5, r5, #2
 800b35a:	d035      	beq.n	800b3c8 <__pow5mult+0x90>
 800b35c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b35e:	b93c      	cbnz	r4, 800b370 <__pow5mult+0x38>
 800b360:	2010      	movs	r0, #16
 800b362:	f7fe fa55 	bl	8009810 <malloc>
 800b366:	6270      	str	r0, [r6, #36]	; 0x24
 800b368:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b36c:	6004      	str	r4, [r0, #0]
 800b36e:	60c4      	str	r4, [r0, #12]
 800b370:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b374:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b378:	b94c      	cbnz	r4, 800b38e <__pow5mult+0x56>
 800b37a:	f240 2171 	movw	r1, #625	; 0x271
 800b37e:	4630      	mov	r0, r6
 800b380:	f7ff ff3c 	bl	800b1fc <__i2b>
 800b384:	2300      	movs	r3, #0
 800b386:	4604      	mov	r4, r0
 800b388:	f8c8 0008 	str.w	r0, [r8, #8]
 800b38c:	6003      	str	r3, [r0, #0]
 800b38e:	f04f 0800 	mov.w	r8, #0
 800b392:	07eb      	lsls	r3, r5, #31
 800b394:	d50a      	bpl.n	800b3ac <__pow5mult+0x74>
 800b396:	4639      	mov	r1, r7
 800b398:	4622      	mov	r2, r4
 800b39a:	4630      	mov	r0, r6
 800b39c:	f7ff ff37 	bl	800b20e <__multiply>
 800b3a0:	4681      	mov	r9, r0
 800b3a2:	4639      	mov	r1, r7
 800b3a4:	4630      	mov	r0, r6
 800b3a6:	f7ff fe89 	bl	800b0bc <_Bfree>
 800b3aa:	464f      	mov	r7, r9
 800b3ac:	106d      	asrs	r5, r5, #1
 800b3ae:	d00b      	beq.n	800b3c8 <__pow5mult+0x90>
 800b3b0:	6820      	ldr	r0, [r4, #0]
 800b3b2:	b938      	cbnz	r0, 800b3c4 <__pow5mult+0x8c>
 800b3b4:	4622      	mov	r2, r4
 800b3b6:	4621      	mov	r1, r4
 800b3b8:	4630      	mov	r0, r6
 800b3ba:	f7ff ff28 	bl	800b20e <__multiply>
 800b3be:	6020      	str	r0, [r4, #0]
 800b3c0:	f8c0 8000 	str.w	r8, [r0]
 800b3c4:	4604      	mov	r4, r0
 800b3c6:	e7e4      	b.n	800b392 <__pow5mult+0x5a>
 800b3c8:	4638      	mov	r0, r7
 800b3ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3ce:	bf00      	nop
 800b3d0:	0800cc18 	.word	0x0800cc18

0800b3d4 <__lshift>:
 800b3d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3d8:	460c      	mov	r4, r1
 800b3da:	4607      	mov	r7, r0
 800b3dc:	4616      	mov	r6, r2
 800b3de:	6923      	ldr	r3, [r4, #16]
 800b3e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b3e4:	eb0a 0903 	add.w	r9, sl, r3
 800b3e8:	6849      	ldr	r1, [r1, #4]
 800b3ea:	68a3      	ldr	r3, [r4, #8]
 800b3ec:	f109 0501 	add.w	r5, r9, #1
 800b3f0:	42ab      	cmp	r3, r5
 800b3f2:	db32      	blt.n	800b45a <__lshift+0x86>
 800b3f4:	4638      	mov	r0, r7
 800b3f6:	f7ff fe2d 	bl	800b054 <_Balloc>
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	4680      	mov	r8, r0
 800b3fe:	461a      	mov	r2, r3
 800b400:	f100 0114 	add.w	r1, r0, #20
 800b404:	4553      	cmp	r3, sl
 800b406:	db2b      	blt.n	800b460 <__lshift+0x8c>
 800b408:	6920      	ldr	r0, [r4, #16]
 800b40a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b40e:	f104 0314 	add.w	r3, r4, #20
 800b412:	f016 021f 	ands.w	r2, r6, #31
 800b416:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b41a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b41e:	d025      	beq.n	800b46c <__lshift+0x98>
 800b420:	2000      	movs	r0, #0
 800b422:	f1c2 0e20 	rsb	lr, r2, #32
 800b426:	468a      	mov	sl, r1
 800b428:	681e      	ldr	r6, [r3, #0]
 800b42a:	4096      	lsls	r6, r2
 800b42c:	4330      	orrs	r0, r6
 800b42e:	f84a 0b04 	str.w	r0, [sl], #4
 800b432:	f853 0b04 	ldr.w	r0, [r3], #4
 800b436:	459c      	cmp	ip, r3
 800b438:	fa20 f00e 	lsr.w	r0, r0, lr
 800b43c:	d814      	bhi.n	800b468 <__lshift+0x94>
 800b43e:	6048      	str	r0, [r1, #4]
 800b440:	b108      	cbz	r0, 800b446 <__lshift+0x72>
 800b442:	f109 0502 	add.w	r5, r9, #2
 800b446:	3d01      	subs	r5, #1
 800b448:	4638      	mov	r0, r7
 800b44a:	f8c8 5010 	str.w	r5, [r8, #16]
 800b44e:	4621      	mov	r1, r4
 800b450:	f7ff fe34 	bl	800b0bc <_Bfree>
 800b454:	4640      	mov	r0, r8
 800b456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b45a:	3101      	adds	r1, #1
 800b45c:	005b      	lsls	r3, r3, #1
 800b45e:	e7c7      	b.n	800b3f0 <__lshift+0x1c>
 800b460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b464:	3301      	adds	r3, #1
 800b466:	e7cd      	b.n	800b404 <__lshift+0x30>
 800b468:	4651      	mov	r1, sl
 800b46a:	e7dc      	b.n	800b426 <__lshift+0x52>
 800b46c:	3904      	subs	r1, #4
 800b46e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b472:	459c      	cmp	ip, r3
 800b474:	f841 2f04 	str.w	r2, [r1, #4]!
 800b478:	d8f9      	bhi.n	800b46e <__lshift+0x9a>
 800b47a:	e7e4      	b.n	800b446 <__lshift+0x72>

0800b47c <__mcmp>:
 800b47c:	6903      	ldr	r3, [r0, #16]
 800b47e:	690a      	ldr	r2, [r1, #16]
 800b480:	b530      	push	{r4, r5, lr}
 800b482:	1a9b      	subs	r3, r3, r2
 800b484:	d10c      	bne.n	800b4a0 <__mcmp+0x24>
 800b486:	0092      	lsls	r2, r2, #2
 800b488:	3014      	adds	r0, #20
 800b48a:	3114      	adds	r1, #20
 800b48c:	1884      	adds	r4, r0, r2
 800b48e:	4411      	add	r1, r2
 800b490:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b494:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b498:	4295      	cmp	r5, r2
 800b49a:	d003      	beq.n	800b4a4 <__mcmp+0x28>
 800b49c:	d305      	bcc.n	800b4aa <__mcmp+0x2e>
 800b49e:	2301      	movs	r3, #1
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	bd30      	pop	{r4, r5, pc}
 800b4a4:	42a0      	cmp	r0, r4
 800b4a6:	d3f3      	bcc.n	800b490 <__mcmp+0x14>
 800b4a8:	e7fa      	b.n	800b4a0 <__mcmp+0x24>
 800b4aa:	f04f 33ff 	mov.w	r3, #4294967295
 800b4ae:	e7f7      	b.n	800b4a0 <__mcmp+0x24>

0800b4b0 <__mdiff>:
 800b4b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4b4:	460d      	mov	r5, r1
 800b4b6:	4607      	mov	r7, r0
 800b4b8:	4611      	mov	r1, r2
 800b4ba:	4628      	mov	r0, r5
 800b4bc:	4614      	mov	r4, r2
 800b4be:	f7ff ffdd 	bl	800b47c <__mcmp>
 800b4c2:	1e06      	subs	r6, r0, #0
 800b4c4:	d108      	bne.n	800b4d8 <__mdiff+0x28>
 800b4c6:	4631      	mov	r1, r6
 800b4c8:	4638      	mov	r0, r7
 800b4ca:	f7ff fdc3 	bl	800b054 <_Balloc>
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b4d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4d8:	bfa4      	itt	ge
 800b4da:	4623      	movge	r3, r4
 800b4dc:	462c      	movge	r4, r5
 800b4de:	4638      	mov	r0, r7
 800b4e0:	6861      	ldr	r1, [r4, #4]
 800b4e2:	bfa6      	itte	ge
 800b4e4:	461d      	movge	r5, r3
 800b4e6:	2600      	movge	r6, #0
 800b4e8:	2601      	movlt	r6, #1
 800b4ea:	f7ff fdb3 	bl	800b054 <_Balloc>
 800b4ee:	f04f 0e00 	mov.w	lr, #0
 800b4f2:	60c6      	str	r6, [r0, #12]
 800b4f4:	692b      	ldr	r3, [r5, #16]
 800b4f6:	6926      	ldr	r6, [r4, #16]
 800b4f8:	f104 0214 	add.w	r2, r4, #20
 800b4fc:	f105 0914 	add.w	r9, r5, #20
 800b500:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b504:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b508:	f100 0114 	add.w	r1, r0, #20
 800b50c:	f852 ab04 	ldr.w	sl, [r2], #4
 800b510:	f859 5b04 	ldr.w	r5, [r9], #4
 800b514:	fa1f f38a 	uxth.w	r3, sl
 800b518:	4473      	add	r3, lr
 800b51a:	b2ac      	uxth	r4, r5
 800b51c:	1b1b      	subs	r3, r3, r4
 800b51e:	0c2c      	lsrs	r4, r5, #16
 800b520:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800b524:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800b528:	b29b      	uxth	r3, r3
 800b52a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800b52e:	45c8      	cmp	r8, r9
 800b530:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800b534:	4694      	mov	ip, r2
 800b536:	f841 4b04 	str.w	r4, [r1], #4
 800b53a:	d8e7      	bhi.n	800b50c <__mdiff+0x5c>
 800b53c:	45bc      	cmp	ip, r7
 800b53e:	d304      	bcc.n	800b54a <__mdiff+0x9a>
 800b540:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b544:	b183      	cbz	r3, 800b568 <__mdiff+0xb8>
 800b546:	6106      	str	r6, [r0, #16]
 800b548:	e7c4      	b.n	800b4d4 <__mdiff+0x24>
 800b54a:	f85c 4b04 	ldr.w	r4, [ip], #4
 800b54e:	b2a2      	uxth	r2, r4
 800b550:	4472      	add	r2, lr
 800b552:	1413      	asrs	r3, r2, #16
 800b554:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b558:	b292      	uxth	r2, r2
 800b55a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b55e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b562:	f841 2b04 	str.w	r2, [r1], #4
 800b566:	e7e9      	b.n	800b53c <__mdiff+0x8c>
 800b568:	3e01      	subs	r6, #1
 800b56a:	e7e9      	b.n	800b540 <__mdiff+0x90>

0800b56c <__d2b>:
 800b56c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b570:	461c      	mov	r4, r3
 800b572:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800b576:	2101      	movs	r1, #1
 800b578:	4690      	mov	r8, r2
 800b57a:	f7ff fd6b 	bl	800b054 <_Balloc>
 800b57e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800b582:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800b586:	4607      	mov	r7, r0
 800b588:	bb34      	cbnz	r4, 800b5d8 <__d2b+0x6c>
 800b58a:	9201      	str	r2, [sp, #4]
 800b58c:	f1b8 0200 	subs.w	r2, r8, #0
 800b590:	d027      	beq.n	800b5e2 <__d2b+0x76>
 800b592:	a802      	add	r0, sp, #8
 800b594:	f840 2d08 	str.w	r2, [r0, #-8]!
 800b598:	f7ff fe01 	bl	800b19e <__lo0bits>
 800b59c:	9900      	ldr	r1, [sp, #0]
 800b59e:	b1f0      	cbz	r0, 800b5de <__d2b+0x72>
 800b5a0:	9a01      	ldr	r2, [sp, #4]
 800b5a2:	f1c0 0320 	rsb	r3, r0, #32
 800b5a6:	fa02 f303 	lsl.w	r3, r2, r3
 800b5aa:	430b      	orrs	r3, r1
 800b5ac:	40c2      	lsrs	r2, r0
 800b5ae:	617b      	str	r3, [r7, #20]
 800b5b0:	9201      	str	r2, [sp, #4]
 800b5b2:	9b01      	ldr	r3, [sp, #4]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	bf14      	ite	ne
 800b5b8:	2102      	movne	r1, #2
 800b5ba:	2101      	moveq	r1, #1
 800b5bc:	61bb      	str	r3, [r7, #24]
 800b5be:	6139      	str	r1, [r7, #16]
 800b5c0:	b1c4      	cbz	r4, 800b5f4 <__d2b+0x88>
 800b5c2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b5c6:	4404      	add	r4, r0
 800b5c8:	6034      	str	r4, [r6, #0]
 800b5ca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b5ce:	6028      	str	r0, [r5, #0]
 800b5d0:	4638      	mov	r0, r7
 800b5d2:	b002      	add	sp, #8
 800b5d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5d8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b5dc:	e7d5      	b.n	800b58a <__d2b+0x1e>
 800b5de:	6179      	str	r1, [r7, #20]
 800b5e0:	e7e7      	b.n	800b5b2 <__d2b+0x46>
 800b5e2:	a801      	add	r0, sp, #4
 800b5e4:	f7ff fddb 	bl	800b19e <__lo0bits>
 800b5e8:	2101      	movs	r1, #1
 800b5ea:	9b01      	ldr	r3, [sp, #4]
 800b5ec:	6139      	str	r1, [r7, #16]
 800b5ee:	617b      	str	r3, [r7, #20]
 800b5f0:	3020      	adds	r0, #32
 800b5f2:	e7e5      	b.n	800b5c0 <__d2b+0x54>
 800b5f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b5f8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b5fc:	6030      	str	r0, [r6, #0]
 800b5fe:	6918      	ldr	r0, [r3, #16]
 800b600:	f7ff fdae 	bl	800b160 <__hi0bits>
 800b604:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b608:	e7e1      	b.n	800b5ce <__d2b+0x62>

0800b60a <_calloc_r>:
 800b60a:	b538      	push	{r3, r4, r5, lr}
 800b60c:	fb02 f401 	mul.w	r4, r2, r1
 800b610:	4621      	mov	r1, r4
 800b612:	f7fe f96d 	bl	80098f0 <_malloc_r>
 800b616:	4605      	mov	r5, r0
 800b618:	b118      	cbz	r0, 800b622 <_calloc_r+0x18>
 800b61a:	4622      	mov	r2, r4
 800b61c:	2100      	movs	r1, #0
 800b61e:	f7fe f912 	bl	8009846 <memset>
 800b622:	4628      	mov	r0, r5
 800b624:	bd38      	pop	{r3, r4, r5, pc}

0800b626 <__ssputs_r>:
 800b626:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b62a:	688e      	ldr	r6, [r1, #8]
 800b62c:	4682      	mov	sl, r0
 800b62e:	429e      	cmp	r6, r3
 800b630:	460c      	mov	r4, r1
 800b632:	4690      	mov	r8, r2
 800b634:	4699      	mov	r9, r3
 800b636:	d837      	bhi.n	800b6a8 <__ssputs_r+0x82>
 800b638:	898a      	ldrh	r2, [r1, #12]
 800b63a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b63e:	d031      	beq.n	800b6a4 <__ssputs_r+0x7e>
 800b640:	2302      	movs	r3, #2
 800b642:	6825      	ldr	r5, [r4, #0]
 800b644:	6909      	ldr	r1, [r1, #16]
 800b646:	1a6f      	subs	r7, r5, r1
 800b648:	6965      	ldr	r5, [r4, #20]
 800b64a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b64e:	fb95 f5f3 	sdiv	r5, r5, r3
 800b652:	f109 0301 	add.w	r3, r9, #1
 800b656:	443b      	add	r3, r7
 800b658:	429d      	cmp	r5, r3
 800b65a:	bf38      	it	cc
 800b65c:	461d      	movcc	r5, r3
 800b65e:	0553      	lsls	r3, r2, #21
 800b660:	d530      	bpl.n	800b6c4 <__ssputs_r+0x9e>
 800b662:	4629      	mov	r1, r5
 800b664:	f7fe f944 	bl	80098f0 <_malloc_r>
 800b668:	4606      	mov	r6, r0
 800b66a:	b950      	cbnz	r0, 800b682 <__ssputs_r+0x5c>
 800b66c:	230c      	movs	r3, #12
 800b66e:	f04f 30ff 	mov.w	r0, #4294967295
 800b672:	f8ca 3000 	str.w	r3, [sl]
 800b676:	89a3      	ldrh	r3, [r4, #12]
 800b678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b67c:	81a3      	strh	r3, [r4, #12]
 800b67e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b682:	463a      	mov	r2, r7
 800b684:	6921      	ldr	r1, [r4, #16]
 800b686:	f7fe f8d3 	bl	8009830 <memcpy>
 800b68a:	89a3      	ldrh	r3, [r4, #12]
 800b68c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b694:	81a3      	strh	r3, [r4, #12]
 800b696:	6126      	str	r6, [r4, #16]
 800b698:	443e      	add	r6, r7
 800b69a:	6026      	str	r6, [r4, #0]
 800b69c:	464e      	mov	r6, r9
 800b69e:	6165      	str	r5, [r4, #20]
 800b6a0:	1bed      	subs	r5, r5, r7
 800b6a2:	60a5      	str	r5, [r4, #8]
 800b6a4:	454e      	cmp	r6, r9
 800b6a6:	d900      	bls.n	800b6aa <__ssputs_r+0x84>
 800b6a8:	464e      	mov	r6, r9
 800b6aa:	4632      	mov	r2, r6
 800b6ac:	4641      	mov	r1, r8
 800b6ae:	6820      	ldr	r0, [r4, #0]
 800b6b0:	f000 f91e 	bl	800b8f0 <memmove>
 800b6b4:	68a3      	ldr	r3, [r4, #8]
 800b6b6:	2000      	movs	r0, #0
 800b6b8:	1b9b      	subs	r3, r3, r6
 800b6ba:	60a3      	str	r3, [r4, #8]
 800b6bc:	6823      	ldr	r3, [r4, #0]
 800b6be:	441e      	add	r6, r3
 800b6c0:	6026      	str	r6, [r4, #0]
 800b6c2:	e7dc      	b.n	800b67e <__ssputs_r+0x58>
 800b6c4:	462a      	mov	r2, r5
 800b6c6:	f000 f92c 	bl	800b922 <_realloc_r>
 800b6ca:	4606      	mov	r6, r0
 800b6cc:	2800      	cmp	r0, #0
 800b6ce:	d1e2      	bne.n	800b696 <__ssputs_r+0x70>
 800b6d0:	6921      	ldr	r1, [r4, #16]
 800b6d2:	4650      	mov	r0, sl
 800b6d4:	f7fe f8c0 	bl	8009858 <_free_r>
 800b6d8:	e7c8      	b.n	800b66c <__ssputs_r+0x46>
	...

0800b6dc <_svfiprintf_r>:
 800b6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6e0:	461d      	mov	r5, r3
 800b6e2:	898b      	ldrh	r3, [r1, #12]
 800b6e4:	b09d      	sub	sp, #116	; 0x74
 800b6e6:	061f      	lsls	r7, r3, #24
 800b6e8:	4680      	mov	r8, r0
 800b6ea:	460c      	mov	r4, r1
 800b6ec:	4616      	mov	r6, r2
 800b6ee:	d50f      	bpl.n	800b710 <_svfiprintf_r+0x34>
 800b6f0:	690b      	ldr	r3, [r1, #16]
 800b6f2:	b96b      	cbnz	r3, 800b710 <_svfiprintf_r+0x34>
 800b6f4:	2140      	movs	r1, #64	; 0x40
 800b6f6:	f7fe f8fb 	bl	80098f0 <_malloc_r>
 800b6fa:	6020      	str	r0, [r4, #0]
 800b6fc:	6120      	str	r0, [r4, #16]
 800b6fe:	b928      	cbnz	r0, 800b70c <_svfiprintf_r+0x30>
 800b700:	230c      	movs	r3, #12
 800b702:	f8c8 3000 	str.w	r3, [r8]
 800b706:	f04f 30ff 	mov.w	r0, #4294967295
 800b70a:	e0c8      	b.n	800b89e <_svfiprintf_r+0x1c2>
 800b70c:	2340      	movs	r3, #64	; 0x40
 800b70e:	6163      	str	r3, [r4, #20]
 800b710:	2300      	movs	r3, #0
 800b712:	9309      	str	r3, [sp, #36]	; 0x24
 800b714:	2320      	movs	r3, #32
 800b716:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b71a:	2330      	movs	r3, #48	; 0x30
 800b71c:	f04f 0b01 	mov.w	fp, #1
 800b720:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b724:	9503      	str	r5, [sp, #12]
 800b726:	4637      	mov	r7, r6
 800b728:	463d      	mov	r5, r7
 800b72a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b72e:	b10b      	cbz	r3, 800b734 <_svfiprintf_r+0x58>
 800b730:	2b25      	cmp	r3, #37	; 0x25
 800b732:	d13e      	bne.n	800b7b2 <_svfiprintf_r+0xd6>
 800b734:	ebb7 0a06 	subs.w	sl, r7, r6
 800b738:	d00b      	beq.n	800b752 <_svfiprintf_r+0x76>
 800b73a:	4653      	mov	r3, sl
 800b73c:	4632      	mov	r2, r6
 800b73e:	4621      	mov	r1, r4
 800b740:	4640      	mov	r0, r8
 800b742:	f7ff ff70 	bl	800b626 <__ssputs_r>
 800b746:	3001      	adds	r0, #1
 800b748:	f000 80a4 	beq.w	800b894 <_svfiprintf_r+0x1b8>
 800b74c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b74e:	4453      	add	r3, sl
 800b750:	9309      	str	r3, [sp, #36]	; 0x24
 800b752:	783b      	ldrb	r3, [r7, #0]
 800b754:	2b00      	cmp	r3, #0
 800b756:	f000 809d 	beq.w	800b894 <_svfiprintf_r+0x1b8>
 800b75a:	2300      	movs	r3, #0
 800b75c:	f04f 32ff 	mov.w	r2, #4294967295
 800b760:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b764:	9304      	str	r3, [sp, #16]
 800b766:	9307      	str	r3, [sp, #28]
 800b768:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b76c:	931a      	str	r3, [sp, #104]	; 0x68
 800b76e:	462f      	mov	r7, r5
 800b770:	2205      	movs	r2, #5
 800b772:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b776:	4850      	ldr	r0, [pc, #320]	; (800b8b8 <_svfiprintf_r+0x1dc>)
 800b778:	f7ff fc5c 	bl	800b034 <memchr>
 800b77c:	9b04      	ldr	r3, [sp, #16]
 800b77e:	b9d0      	cbnz	r0, 800b7b6 <_svfiprintf_r+0xda>
 800b780:	06d9      	lsls	r1, r3, #27
 800b782:	bf44      	itt	mi
 800b784:	2220      	movmi	r2, #32
 800b786:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b78a:	071a      	lsls	r2, r3, #28
 800b78c:	bf44      	itt	mi
 800b78e:	222b      	movmi	r2, #43	; 0x2b
 800b790:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b794:	782a      	ldrb	r2, [r5, #0]
 800b796:	2a2a      	cmp	r2, #42	; 0x2a
 800b798:	d015      	beq.n	800b7c6 <_svfiprintf_r+0xea>
 800b79a:	462f      	mov	r7, r5
 800b79c:	2000      	movs	r0, #0
 800b79e:	250a      	movs	r5, #10
 800b7a0:	9a07      	ldr	r2, [sp, #28]
 800b7a2:	4639      	mov	r1, r7
 800b7a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7a8:	3b30      	subs	r3, #48	; 0x30
 800b7aa:	2b09      	cmp	r3, #9
 800b7ac:	d94d      	bls.n	800b84a <_svfiprintf_r+0x16e>
 800b7ae:	b1b8      	cbz	r0, 800b7e0 <_svfiprintf_r+0x104>
 800b7b0:	e00f      	b.n	800b7d2 <_svfiprintf_r+0xf6>
 800b7b2:	462f      	mov	r7, r5
 800b7b4:	e7b8      	b.n	800b728 <_svfiprintf_r+0x4c>
 800b7b6:	4a40      	ldr	r2, [pc, #256]	; (800b8b8 <_svfiprintf_r+0x1dc>)
 800b7b8:	463d      	mov	r5, r7
 800b7ba:	1a80      	subs	r0, r0, r2
 800b7bc:	fa0b f000 	lsl.w	r0, fp, r0
 800b7c0:	4318      	orrs	r0, r3
 800b7c2:	9004      	str	r0, [sp, #16]
 800b7c4:	e7d3      	b.n	800b76e <_svfiprintf_r+0x92>
 800b7c6:	9a03      	ldr	r2, [sp, #12]
 800b7c8:	1d11      	adds	r1, r2, #4
 800b7ca:	6812      	ldr	r2, [r2, #0]
 800b7cc:	9103      	str	r1, [sp, #12]
 800b7ce:	2a00      	cmp	r2, #0
 800b7d0:	db01      	blt.n	800b7d6 <_svfiprintf_r+0xfa>
 800b7d2:	9207      	str	r2, [sp, #28]
 800b7d4:	e004      	b.n	800b7e0 <_svfiprintf_r+0x104>
 800b7d6:	4252      	negs	r2, r2
 800b7d8:	f043 0302 	orr.w	r3, r3, #2
 800b7dc:	9207      	str	r2, [sp, #28]
 800b7de:	9304      	str	r3, [sp, #16]
 800b7e0:	783b      	ldrb	r3, [r7, #0]
 800b7e2:	2b2e      	cmp	r3, #46	; 0x2e
 800b7e4:	d10c      	bne.n	800b800 <_svfiprintf_r+0x124>
 800b7e6:	787b      	ldrb	r3, [r7, #1]
 800b7e8:	2b2a      	cmp	r3, #42	; 0x2a
 800b7ea:	d133      	bne.n	800b854 <_svfiprintf_r+0x178>
 800b7ec:	9b03      	ldr	r3, [sp, #12]
 800b7ee:	3702      	adds	r7, #2
 800b7f0:	1d1a      	adds	r2, r3, #4
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	9203      	str	r2, [sp, #12]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	bfb8      	it	lt
 800b7fa:	f04f 33ff 	movlt.w	r3, #4294967295
 800b7fe:	9305      	str	r3, [sp, #20]
 800b800:	4d2e      	ldr	r5, [pc, #184]	; (800b8bc <_svfiprintf_r+0x1e0>)
 800b802:	2203      	movs	r2, #3
 800b804:	7839      	ldrb	r1, [r7, #0]
 800b806:	4628      	mov	r0, r5
 800b808:	f7ff fc14 	bl	800b034 <memchr>
 800b80c:	b138      	cbz	r0, 800b81e <_svfiprintf_r+0x142>
 800b80e:	2340      	movs	r3, #64	; 0x40
 800b810:	1b40      	subs	r0, r0, r5
 800b812:	fa03 f000 	lsl.w	r0, r3, r0
 800b816:	9b04      	ldr	r3, [sp, #16]
 800b818:	3701      	adds	r7, #1
 800b81a:	4303      	orrs	r3, r0
 800b81c:	9304      	str	r3, [sp, #16]
 800b81e:	7839      	ldrb	r1, [r7, #0]
 800b820:	2206      	movs	r2, #6
 800b822:	4827      	ldr	r0, [pc, #156]	; (800b8c0 <_svfiprintf_r+0x1e4>)
 800b824:	1c7e      	adds	r6, r7, #1
 800b826:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b82a:	f7ff fc03 	bl	800b034 <memchr>
 800b82e:	2800      	cmp	r0, #0
 800b830:	d038      	beq.n	800b8a4 <_svfiprintf_r+0x1c8>
 800b832:	4b24      	ldr	r3, [pc, #144]	; (800b8c4 <_svfiprintf_r+0x1e8>)
 800b834:	bb13      	cbnz	r3, 800b87c <_svfiprintf_r+0x1a0>
 800b836:	9b03      	ldr	r3, [sp, #12]
 800b838:	3307      	adds	r3, #7
 800b83a:	f023 0307 	bic.w	r3, r3, #7
 800b83e:	3308      	adds	r3, #8
 800b840:	9303      	str	r3, [sp, #12]
 800b842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b844:	444b      	add	r3, r9
 800b846:	9309      	str	r3, [sp, #36]	; 0x24
 800b848:	e76d      	b.n	800b726 <_svfiprintf_r+0x4a>
 800b84a:	fb05 3202 	mla	r2, r5, r2, r3
 800b84e:	2001      	movs	r0, #1
 800b850:	460f      	mov	r7, r1
 800b852:	e7a6      	b.n	800b7a2 <_svfiprintf_r+0xc6>
 800b854:	2300      	movs	r3, #0
 800b856:	250a      	movs	r5, #10
 800b858:	4619      	mov	r1, r3
 800b85a:	3701      	adds	r7, #1
 800b85c:	9305      	str	r3, [sp, #20]
 800b85e:	4638      	mov	r0, r7
 800b860:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b864:	3a30      	subs	r2, #48	; 0x30
 800b866:	2a09      	cmp	r2, #9
 800b868:	d903      	bls.n	800b872 <_svfiprintf_r+0x196>
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d0c8      	beq.n	800b800 <_svfiprintf_r+0x124>
 800b86e:	9105      	str	r1, [sp, #20]
 800b870:	e7c6      	b.n	800b800 <_svfiprintf_r+0x124>
 800b872:	fb05 2101 	mla	r1, r5, r1, r2
 800b876:	2301      	movs	r3, #1
 800b878:	4607      	mov	r7, r0
 800b87a:	e7f0      	b.n	800b85e <_svfiprintf_r+0x182>
 800b87c:	ab03      	add	r3, sp, #12
 800b87e:	9300      	str	r3, [sp, #0]
 800b880:	4622      	mov	r2, r4
 800b882:	4b11      	ldr	r3, [pc, #68]	; (800b8c8 <_svfiprintf_r+0x1ec>)
 800b884:	a904      	add	r1, sp, #16
 800b886:	4640      	mov	r0, r8
 800b888:	f7fe f91e 	bl	8009ac8 <_printf_float>
 800b88c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b890:	4681      	mov	r9, r0
 800b892:	d1d6      	bne.n	800b842 <_svfiprintf_r+0x166>
 800b894:	89a3      	ldrh	r3, [r4, #12]
 800b896:	065b      	lsls	r3, r3, #25
 800b898:	f53f af35 	bmi.w	800b706 <_svfiprintf_r+0x2a>
 800b89c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b89e:	b01d      	add	sp, #116	; 0x74
 800b8a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8a4:	ab03      	add	r3, sp, #12
 800b8a6:	9300      	str	r3, [sp, #0]
 800b8a8:	4622      	mov	r2, r4
 800b8aa:	4b07      	ldr	r3, [pc, #28]	; (800b8c8 <_svfiprintf_r+0x1ec>)
 800b8ac:	a904      	add	r1, sp, #16
 800b8ae:	4640      	mov	r0, r8
 800b8b0:	f7fe fbb6 	bl	800a020 <_printf_i>
 800b8b4:	e7ea      	b.n	800b88c <_svfiprintf_r+0x1b0>
 800b8b6:	bf00      	nop
 800b8b8:	0800cc24 	.word	0x0800cc24
 800b8bc:	0800cc2a 	.word	0x0800cc2a
 800b8c0:	0800cc2e 	.word	0x0800cc2e
 800b8c4:	08009ac9 	.word	0x08009ac9
 800b8c8:	0800b627 	.word	0x0800b627

0800b8cc <__ascii_mbtowc>:
 800b8cc:	b082      	sub	sp, #8
 800b8ce:	b901      	cbnz	r1, 800b8d2 <__ascii_mbtowc+0x6>
 800b8d0:	a901      	add	r1, sp, #4
 800b8d2:	b142      	cbz	r2, 800b8e6 <__ascii_mbtowc+0x1a>
 800b8d4:	b14b      	cbz	r3, 800b8ea <__ascii_mbtowc+0x1e>
 800b8d6:	7813      	ldrb	r3, [r2, #0]
 800b8d8:	600b      	str	r3, [r1, #0]
 800b8da:	7812      	ldrb	r2, [r2, #0]
 800b8dc:	1c10      	adds	r0, r2, #0
 800b8de:	bf18      	it	ne
 800b8e0:	2001      	movne	r0, #1
 800b8e2:	b002      	add	sp, #8
 800b8e4:	4770      	bx	lr
 800b8e6:	4610      	mov	r0, r2
 800b8e8:	e7fb      	b.n	800b8e2 <__ascii_mbtowc+0x16>
 800b8ea:	f06f 0001 	mvn.w	r0, #1
 800b8ee:	e7f8      	b.n	800b8e2 <__ascii_mbtowc+0x16>

0800b8f0 <memmove>:
 800b8f0:	4288      	cmp	r0, r1
 800b8f2:	b510      	push	{r4, lr}
 800b8f4:	eb01 0302 	add.w	r3, r1, r2
 800b8f8:	d807      	bhi.n	800b90a <memmove+0x1a>
 800b8fa:	1e42      	subs	r2, r0, #1
 800b8fc:	4299      	cmp	r1, r3
 800b8fe:	d00a      	beq.n	800b916 <memmove+0x26>
 800b900:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b904:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b908:	e7f8      	b.n	800b8fc <memmove+0xc>
 800b90a:	4283      	cmp	r3, r0
 800b90c:	d9f5      	bls.n	800b8fa <memmove+0xa>
 800b90e:	1881      	adds	r1, r0, r2
 800b910:	1ad2      	subs	r2, r2, r3
 800b912:	42d3      	cmn	r3, r2
 800b914:	d100      	bne.n	800b918 <memmove+0x28>
 800b916:	bd10      	pop	{r4, pc}
 800b918:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b91c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b920:	e7f7      	b.n	800b912 <memmove+0x22>

0800b922 <_realloc_r>:
 800b922:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b924:	4607      	mov	r7, r0
 800b926:	4614      	mov	r4, r2
 800b928:	460e      	mov	r6, r1
 800b92a:	b921      	cbnz	r1, 800b936 <_realloc_r+0x14>
 800b92c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b930:	4611      	mov	r1, r2
 800b932:	f7fd bfdd 	b.w	80098f0 <_malloc_r>
 800b936:	b922      	cbnz	r2, 800b942 <_realloc_r+0x20>
 800b938:	f7fd ff8e 	bl	8009858 <_free_r>
 800b93c:	4625      	mov	r5, r4
 800b93e:	4628      	mov	r0, r5
 800b940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b942:	f000 f821 	bl	800b988 <_malloc_usable_size_r>
 800b946:	42a0      	cmp	r0, r4
 800b948:	d20f      	bcs.n	800b96a <_realloc_r+0x48>
 800b94a:	4621      	mov	r1, r4
 800b94c:	4638      	mov	r0, r7
 800b94e:	f7fd ffcf 	bl	80098f0 <_malloc_r>
 800b952:	4605      	mov	r5, r0
 800b954:	2800      	cmp	r0, #0
 800b956:	d0f2      	beq.n	800b93e <_realloc_r+0x1c>
 800b958:	4631      	mov	r1, r6
 800b95a:	4622      	mov	r2, r4
 800b95c:	f7fd ff68 	bl	8009830 <memcpy>
 800b960:	4631      	mov	r1, r6
 800b962:	4638      	mov	r0, r7
 800b964:	f7fd ff78 	bl	8009858 <_free_r>
 800b968:	e7e9      	b.n	800b93e <_realloc_r+0x1c>
 800b96a:	4635      	mov	r5, r6
 800b96c:	e7e7      	b.n	800b93e <_realloc_r+0x1c>

0800b96e <__ascii_wctomb>:
 800b96e:	b149      	cbz	r1, 800b984 <__ascii_wctomb+0x16>
 800b970:	2aff      	cmp	r2, #255	; 0xff
 800b972:	bf8b      	itete	hi
 800b974:	238a      	movhi	r3, #138	; 0x8a
 800b976:	700a      	strbls	r2, [r1, #0]
 800b978:	6003      	strhi	r3, [r0, #0]
 800b97a:	2001      	movls	r0, #1
 800b97c:	bf88      	it	hi
 800b97e:	f04f 30ff 	movhi.w	r0, #4294967295
 800b982:	4770      	bx	lr
 800b984:	4608      	mov	r0, r1
 800b986:	4770      	bx	lr

0800b988 <_malloc_usable_size_r>:
 800b988:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b98c:	1f18      	subs	r0, r3, #4
 800b98e:	2b00      	cmp	r3, #0
 800b990:	bfbc      	itt	lt
 800b992:	580b      	ldrlt	r3, [r1, r0]
 800b994:	18c0      	addlt	r0, r0, r3
 800b996:	4770      	bx	lr

0800b998 <_init>:
 800b998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b99a:	bf00      	nop
 800b99c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b99e:	bc08      	pop	{r3}
 800b9a0:	469e      	mov	lr, r3
 800b9a2:	4770      	bx	lr

0800b9a4 <_fini>:
 800b9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9a6:	bf00      	nop
 800b9a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9aa:	bc08      	pop	{r3}
 800b9ac:	469e      	mov	lr, r3
 800b9ae:	4770      	bx	lr
