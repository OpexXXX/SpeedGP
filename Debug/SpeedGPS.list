
SpeedGPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c88  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019d0  08009d98  08009d98  00019d98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b768  0800b768  00020378  2**0
                  CONTENTS
  4 .ARM          00000000  0800b768  0800b768  00020378  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b768  0800b768  00020378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b768  0800b768  0001b768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b76c  0800b76c  0001b76c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000378  20000000  0800b770  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003e34  20000378  0800bae8  00020378  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200041ac  0800bae8  000241ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020378  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033c6b  00000000  00000000  000203a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006d2b  00000000  00000000  0005400c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00015a47  00000000  00000000  0005ad37  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001a70  00000000  00000000  00070780  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002668  00000000  00000000  000721f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001b792  00000000  00000000  00074858  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001c78c  00000000  00000000  0008ffea  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00086d1d  00000000  00000000  000ac776  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00133493  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005878  00000000  00000000  00133510  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000378 	.word	0x20000378
 800012c:	00000000 	.word	0x00000000
 8000130:	08009d80 	.word	0x08009d80

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000037c 	.word	0x2000037c
 800014c:	08009d80 	.word	0x08009d80

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b44:	f1a2 0201 	sub.w	r2, r2, #1
 8000b48:	d1ed      	bne.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <BuzzerSetFreq>:


void BuzzerSetFreq(uint16_t freq)
{

	TIM2->PSC = (48000000  / ((BUZZER_VOLUME_MAX*2)*freq)) - 1; //prescaller
 8000f44:	23fa      	movs	r3, #250	; 0xfa
 8000f46:	4343      	muls	r3, r0
 8000f48:	4803      	ldr	r0, [pc, #12]	; (8000f58 <BuzzerSetFreq+0x14>)
 8000f4a:	fb90 f0f3 	sdiv	r0, r0, r3
 8000f4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f52:	3801      	subs	r0, #1
 8000f54:	6298      	str	r0, [r3, #40]	; 0x28
}
 8000f56:	4770      	bx	lr
 8000f58:	02dc6c00 	.word	0x02dc6c00

08000f5c <BuzzerSetVolume>:
void BuzzerSetVolume(uint16_t volume)
{
	if(volume > BUZZER_VOLUME_MAX)
		volume = BUZZER_VOLUME_MAX;

	TIM2->CCR1 = volume;
 8000f5c:	287d      	cmp	r0, #125	; 0x7d
 8000f5e:	bf28      	it	cs
 8000f60:	207d      	movcs	r0, #125	; 0x7d
 8000f62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f66:	6358      	str	r0, [r3, #52]	; 0x34
}
 8000f68:	4770      	bx	lr
	...

08000f6c <I2C_Write>:
#define YA_OFFSET_H         0x7A
#define YA_OFFSET_L         0x7B
#define ZA_OFFSET_H         0x7D
#define ZA_OFFSET_L         0x7E

IIC_Result I2C_Write(uint8_t device_address, uint8_t register_address, uint8_t data) {
 8000f6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Format array to send */
	d[0] = register_address;
	d[1] = data;

	/* Try to transmit via I2C */
	if (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)device_address, (uint8_t *)d, 2, 1000) != HAL_OK) {
 8000f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	d[0] = register_address;
 8000f72:	f88d 100c 	strb.w	r1, [sp, #12]
	d[1] = data;
 8000f76:	f88d 200d 	strb.w	r2, [sp, #13]
	if (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)device_address, (uint8_t *)d, 2, 1000) != HAL_OK) {
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	4601      	mov	r1, r0
 8000f7e:	2302      	movs	r3, #2
 8000f80:	aa03      	add	r2, sp, #12
 8000f82:	4805      	ldr	r0, [pc, #20]	; (8000f98 <I2C_Write+0x2c>)
 8000f84:	f001 fcea 	bl	800295c <HAL_I2C_Master_Transmit>
 8000f88:	b118      	cbz	r0, 8000f92 <I2C_Write+0x26>
		/* Check error */
		if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF) {
 8000f8a:	4803      	ldr	r0, [pc, #12]	; (8000f98 <I2C_Write+0x2c>)
 8000f8c:	f002 f868 	bl	8003060 <HAL_I2C_GetError>

		}

		/* Return error */

		return IIC_Result_Error;
 8000f90:	2001      	movs	r0, #1
	}

	/* Return OK */

	return IIC_Result_Ok;
}
 8000f92:	b005      	add	sp, #20
 8000f94:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f98:	20002c98 	.word	0x20002c98

08000f9c <I2C_ReadMulti>:

IIC_Result I2C_ReadMulti(uint8_t device_address, uint8_t register_address, uint8_t* data, uint16_t count) {
 8000f9c:	b5f0      	push	{r4, r5, r6, r7, lr}

	/* Send register address */
	if (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)device_address, &register_address, 1, 1000) != HAL_OK) {
 8000f9e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
IIC_Result I2C_ReadMulti(uint8_t device_address, uint8_t register_address, uint8_t* data, uint16_t count) {
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	4616      	mov	r6, r2
 8000fa6:	aa04      	add	r2, sp, #16
 8000fa8:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8000fac:	461f      	mov	r7, r3
	if (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)device_address, &register_address, 1, 1000) != HAL_OK) {
 8000fae:	4604      	mov	r4, r0
 8000fb0:	4601      	mov	r1, r0
 8000fb2:	9500      	str	r5, [sp, #0]
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	480a      	ldr	r0, [pc, #40]	; (8000fe0 <I2C_ReadMulti+0x44>)
 8000fb8:	f001 fcd0 	bl	800295c <HAL_I2C_Master_Transmit>
 8000fbc:	b128      	cbz	r0, 8000fca <I2C_ReadMulti+0x2e>
		/* Check error */
		if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF) {
 8000fbe:	4808      	ldr	r0, [pc, #32]	; (8000fe0 <I2C_ReadMulti+0x44>)
 8000fc0:	f002 f84e 	bl	8003060 <HAL_I2C_GetError>
		}
		/* Return error */

		return IIC_Result_Error;
 8000fc4:	2001      	movs	r0, #1
	}

	/* Return OK */

	return IIC_Result_Ok;
}
 8000fc6:	b005      	add	sp, #20
 8000fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (HAL_I2C_Master_Receive(&hi2c1, device_address, data, count, 1000) != HAL_OK) {
 8000fca:	9500      	str	r5, [sp, #0]
 8000fcc:	463b      	mov	r3, r7
 8000fce:	4632      	mov	r2, r6
 8000fd0:	4621      	mov	r1, r4
 8000fd2:	4803      	ldr	r0, [pc, #12]	; (8000fe0 <I2C_ReadMulti+0x44>)
 8000fd4:	f001 fd90 	bl	8002af8 <HAL_I2C_Master_Receive>
 8000fd8:	2800      	cmp	r0, #0
 8000fda:	d0f4      	beq.n	8000fc6 <I2C_ReadMulti+0x2a>
 8000fdc:	e7ef      	b.n	8000fbe <I2C_ReadMulti+0x22>
 8000fde:	bf00      	nop
 8000fe0:	20002c98 	.word	0x20002c98

08000fe4 <I2C_Read>:
IIC_Result I2C_Read(uint8_t device_address, uint8_t register_address, uint8_t* data) {
 8000fe4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

	/* Send address */

	if (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)device_address, &register_address, 1, 1000) != HAL_OK) {
 8000fe6:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
IIC_Result I2C_Read(uint8_t device_address, uint8_t register_address, uint8_t* data) {
 8000fea:	4616      	mov	r6, r2
 8000fec:	aa04      	add	r2, sp, #16
 8000fee:	f802 1d01 	strb.w	r1, [r2, #-1]!
	if (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)device_address, &register_address, 1, 1000) != HAL_OK) {
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	4601      	mov	r1, r0
 8000ff6:	9500      	str	r5, [sp, #0]
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	480a      	ldr	r0, [pc, #40]	; (8001024 <I2C_Read+0x40>)
 8000ffc:	f001 fcae 	bl	800295c <HAL_I2C_Master_Transmit>
 8001000:	b128      	cbz	r0, 800100e <I2C_Read+0x2a>
		/* Check error */
		if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF) {
 8001002:	4808      	ldr	r0, [pc, #32]	; (8001024 <I2C_Read+0x40>)
 8001004:	f002 f82c 	bl	8003060 <HAL_I2C_GetError>

		}

		/* Return error */

		return IIC_Result_Error;
 8001008:	2001      	movs	r0, #1
	}

	/* Return OK */

	return IIC_Result_Ok;
}
 800100a:	b004      	add	sp, #16
 800100c:	bd70      	pop	{r4, r5, r6, pc}
	if (HAL_I2C_Master_Receive(&hi2c1, device_address, data, 1, 1000) != HAL_OK) {
 800100e:	9500      	str	r5, [sp, #0]
 8001010:	2301      	movs	r3, #1
 8001012:	4632      	mov	r2, r6
 8001014:	4621      	mov	r1, r4
 8001016:	4803      	ldr	r0, [pc, #12]	; (8001024 <I2C_Read+0x40>)
 8001018:	f001 fd6e 	bl	8002af8 <HAL_I2C_Master_Receive>
 800101c:	2800      	cmp	r0, #0
 800101e:	d0f4      	beq.n	800100a <I2C_Read+0x26>
 8001020:	e7ef      	b.n	8001002 <I2C_Read+0x1e>
 8001022:	bf00      	nop
 8001024:	20002c98 	.word	0x20002c98

08001028 <I2C_IsDeviceConnected>:

IIC_Result I2C_IsDeviceConnected(uint8_t device_address) {
 8001028:	b508      	push	{r3, lr}

	/* Check if device is ready for communication */
	if (HAL_I2C_IsDeviceReady(&hi2c1, device_address, 2, 5) != HAL_OK) {
 800102a:	4601      	mov	r1, r0
 800102c:	2305      	movs	r3, #5
 800102e:	2202      	movs	r2, #2
 8001030:	4803      	ldr	r0, [pc, #12]	; (8001040 <I2C_IsDeviceConnected+0x18>)
 8001032:	f001 ff6b 	bl	8002f0c <HAL_I2C_IsDeviceReady>
	}

	/* Return OK */

	return IIC_Result_Ok;
}
 8001036:	3000      	adds	r0, #0
 8001038:	bf18      	it	ne
 800103a:	2001      	movne	r0, #1
 800103c:	bd08      	pop	{r3, pc}
 800103e:	bf00      	nop
 8001040:	20002c98 	.word	0x20002c98

08001044 <MPU9250_Init>:

TM_MPU9250_Result_t MPU9250_Init(TM_MPU9250_t* MPU9250, TM_MPU9250_Device_t dev) {
 8001044:	b537      	push	{r0, r1, r2, r4, r5, lr}
	 uint8_t data;

	    /* Set values */
	    MPU9250->I2C_Addr = MPU9250_I2C_ADDR | (uint8_t)dev;
	    MPU9250->I2C_Addr_Mag = MPU9250_I2C_ADDR_MAG;
 8001046:	2318      	movs	r3, #24
TM_MPU9250_Result_t MPU9250_Init(TM_MPU9250_t* MPU9250, TM_MPU9250_Device_t dev) {
 8001048:	4604      	mov	r4, r0
	    MPU9250->I2C_Addr = MPU9250_I2C_ADDR | (uint8_t)dev;
 800104a:	f041 00d0 	orr.w	r0, r1, #208	; 0xd0
 800104e:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
	    MPU9250->I2C_Addr_Mag = MPU9250_I2C_ADDR_MAG;
 8001052:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45




	    /* Check if device connected */
	    if (I2C_IsDeviceConnected(MPU9250->I2C_Addr) != IIC_Result_Ok) {
 8001056:	f7ff ffe7 	bl	8001028 <I2C_IsDeviceConnected>
 800105a:	4605      	mov	r5, r0
 800105c:	b110      	cbz	r0, 8001064 <MPU9250_Init+0x20>
	        return TM_MPU9250_Result_DeviceNotConnected;
 800105e:	2002      	movs	r0, #2
	    MPU9250->AMult = 2.0f / 32768.0f;
	    MPU9250->GMult = 250.0f / 32768.0f;
	    MPU9250->MMult = 10.0f * 4912.0f / 32768.0f;

	    return TM_MPU9250_Result_Ok;
}
 8001060:	b003      	add	sp, #12
 8001062:	bd30      	pop	{r4, r5, pc}
	    I2C_Read( MPU9250->I2C_Addr, WHO_AM_I_MPU9250, &data);
 8001064:	f10d 0207 	add.w	r2, sp, #7
 8001068:	2175      	movs	r1, #117	; 0x75
 800106a:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800106e:	f7ff ffb9 	bl	8000fe4 <I2C_Read>
	    if (data != 0x71) {
 8001072:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001076:	2b71      	cmp	r3, #113	; 0x71
 8001078:	d1f1      	bne.n	800105e <MPU9250_Init+0x1a>
	    I2C_Write( MPU9250->I2C_Addr, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 800107a:	462a      	mov	r2, r5
 800107c:	216b      	movs	r1, #107	; 0x6b
 800107e:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8001082:	f7ff ff73 	bl	8000f6c <I2C_Write>
	    HAL_Delay(100); // Wait for all registers to reset
 8001086:	2064      	movs	r0, #100	; 0x64
 8001088:	f001 f8c8 	bl	800221c <HAL_Delay>
	    I2C_Write( MPU9250->I2C_Addr, PWR_MGMT_1, 0x01);  // Auto select clock source to be PLL gyroscope reference if ready else
 800108c:	2201      	movs	r2, #1
 800108e:	216b      	movs	r1, #107	; 0x6b
 8001090:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8001094:	f7ff ff6a 	bl	8000f6c <I2C_Write>
	    HAL_Delay(200);
 8001098:	20c8      	movs	r0, #200	; 0xc8
 800109a:	f001 f8bf 	bl	800221c <HAL_Delay>
	    I2C_Write( MPU9250->I2C_Addr, CONFIG, 0x03);
 800109e:	2203      	movs	r2, #3
 80010a0:	211a      	movs	r1, #26
 80010a2:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 80010a6:	f7ff ff61 	bl	8000f6c <I2C_Write>
	    I2C_Write( MPU9250->I2C_Addr, SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; a rate consistent with the filter update rate
 80010aa:	2204      	movs	r2, #4
 80010ac:	2119      	movs	r1, #25
 80010ae:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 80010b2:	f7ff ff5b 	bl	8000f6c <I2C_Write>
	    I2C_Read( MPU9250->I2C_Addr, GYRO_CONFIG, &data); // get current GYRO_CONFIG register value
 80010b6:	f10d 0207 	add.w	r2, sp, #7
 80010ba:	211b      	movs	r1, #27
 80010bc:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 80010c0:	f7ff ff90 	bl	8000fe4 <I2C_Read>
	    data &= ~0x18; // Clear AFS bits [4:3]
 80010c4:	f89d 2007 	ldrb.w	r2, [sp, #7]
	    I2C_Write( MPU9250->I2C_Addr, GYRO_CONFIG, data); // Write new GYRO_CONFIG value to register
 80010c8:	211b      	movs	r1, #27
	    data &= ~0x18; // Clear AFS bits [4:3]
 80010ca:	f002 02e5 	and.w	r2, r2, #229	; 0xe5
	    I2C_Write( MPU9250->I2C_Addr, GYRO_CONFIG, data); // Write new GYRO_CONFIG value to register
 80010ce:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
	    data &= ~0x18; // Clear AFS bits [4:3]
 80010d2:	f88d 2007 	strb.w	r2, [sp, #7]
	    I2C_Write( MPU9250->I2C_Addr, GYRO_CONFIG, data); // Write new GYRO_CONFIG value to register
 80010d6:	f7ff ff49 	bl	8000f6c <I2C_Write>
	    I2C_Read( MPU9250->I2C_Addr, ACCEL_CONFIG, &data); // get current ACCEL_CONFIG register value
 80010da:	f10d 0207 	add.w	r2, sp, #7
 80010de:	211c      	movs	r1, #28
 80010e0:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 80010e4:	f7ff ff7e 	bl	8000fe4 <I2C_Read>
	    data &= ~0x18;  // Clear AFS bits [4:3]
 80010e8:	f89d 2007 	ldrb.w	r2, [sp, #7]
	    I2C_Write( MPU9250->I2C_Addr, ACCEL_CONFIG, data); // Write new ACCEL_CONFIG register value
 80010ec:	211c      	movs	r1, #28
	    data &= ~0x18;  // Clear AFS bits [4:3]
 80010ee:	f002 02e7 	and.w	r2, r2, #231	; 0xe7
	    I2C_Write( MPU9250->I2C_Addr, ACCEL_CONFIG, data); // Write new ACCEL_CONFIG register value
 80010f2:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
	    data &= ~0x18;  // Clear AFS bits [4:3]
 80010f6:	f88d 2007 	strb.w	r2, [sp, #7]
	    I2C_Write( MPU9250->I2C_Addr, ACCEL_CONFIG, data); // Write new ACCEL_CONFIG register value
 80010fa:	f7ff ff37 	bl	8000f6c <I2C_Write>
	    I2C_Read( MPU9250->I2C_Addr, ACCEL_CONFIG2, &data); // get current ACCEL_CONFIG2 register value
 80010fe:	f10d 0207 	add.w	r2, sp, #7
 8001102:	211d      	movs	r1, #29
 8001104:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8001108:	f7ff ff6c 	bl	8000fe4 <I2C_Read>
	    data &= ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 800110c:	f89d 2007 	ldrb.w	r2, [sp, #7]
	    I2C_Write( MPU9250->I2C_Addr, ACCEL_CONFIG2, data); // Write new ACCEL_CONFIG2 register value
 8001110:	211d      	movs	r1, #29
	    data &= ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8001112:	f022 020f 	bic.w	r2, r2, #15
	    data |= 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8001116:	f042 0203 	orr.w	r2, r2, #3
	    I2C_Write( MPU9250->I2C_Addr, ACCEL_CONFIG2, data); // Write new ACCEL_CONFIG2 register value
 800111a:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
	    data |= 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 800111e:	f88d 2007 	strb.w	r2, [sp, #7]
	    I2C_Write( MPU9250->I2C_Addr, ACCEL_CONFIG2, data); // Write new ACCEL_CONFIG2 register value
 8001122:	f7ff ff23 	bl	8000f6c <I2C_Write>
	    I2C_Write( MPU9250->I2C_Addr, INT_PIN_CFG, 0x22);
 8001126:	2222      	movs	r2, #34	; 0x22
 8001128:	2137      	movs	r1, #55	; 0x37
 800112a:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800112e:	f7ff ff1d 	bl	8000f6c <I2C_Write>
	    I2C_Write( MPU9250->I2C_Addr, INT_ENABLE, 0x01);
 8001132:	2201      	movs	r2, #1
 8001134:	2138      	movs	r1, #56	; 0x38
 8001136:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800113a:	f7ff ff17 	bl	8000f6c <I2C_Write>
	    if (I2C_IsDeviceConnected( MPU9250->I2C_Addr_Mag) !=  IIC_Result_Ok) {
 800113e:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
 8001142:	f7ff ff71 	bl	8001028 <I2C_IsDeviceConnected>
 8001146:	4605      	mov	r5, r0
 8001148:	2800      	cmp	r0, #0
 800114a:	d188      	bne.n	800105e <MPU9250_Init+0x1a>
	    I2C_Write( MPU9250->I2C_Addr_Mag, AK8963_CNTL, 0x00); // Power down magnetometer
 800114c:	4602      	mov	r2, r0
 800114e:	210a      	movs	r1, #10
 8001150:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
 8001154:	f7ff ff0a 	bl	8000f6c <I2C_Write>
	    HAL_Delay(10);
 8001158:	200a      	movs	r0, #10
 800115a:	f001 f85f 	bl	800221c <HAL_Delay>
	    I2C_Write( MPU9250->I2C_Addr_Mag, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 800115e:	220f      	movs	r2, #15
 8001160:	210a      	movs	r1, #10
 8001162:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
 8001166:	f7ff ff01 	bl	8000f6c <I2C_Write>
	    HAL_Delay(10);
 800116a:	200a      	movs	r0, #10
 800116c:	f001 f856 	bl	800221c <HAL_Delay>
	    I2C_Write( MPU9250->I2C_Addr_Mag, AK8963_CNTL, 0x00); // Power down magnetometer
 8001170:	462a      	mov	r2, r5
 8001172:	210a      	movs	r1, #10
 8001174:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
 8001178:	f7ff fef8 	bl	8000f6c <I2C_Write>
	    HAL_Delay(10);
 800117c:	200a      	movs	r0, #10
 800117e:	f001 f84d 	bl	800221c <HAL_Delay>
	    I2C_Write( MPU9250->I2C_Addr_Mag, AK8963_CNTL, 1 << 4 | 2); // Set magnetometer data resolution and sample ODR
 8001182:	2212      	movs	r2, #18
 8001184:	210a      	movs	r1, #10
 8001186:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
 800118a:	f7ff feef 	bl	8000f6c <I2C_Write>
	    HAL_Delay(10);
 800118e:	200a      	movs	r0, #10
 8001190:	f001 f844 	bl	800221c <HAL_Delay>
	    MPU9250->AMult = 2.0f / 32768.0f;
 8001194:	f04f 5362 	mov.w	r3, #947912704	; 0x38800000
 8001198:	63a3      	str	r3, [r4, #56]	; 0x38
	    MPU9250->GMult = 250.0f / 32768.0f;
 800119a:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <MPU9250_Init+0x164>)
	    return TM_MPU9250_Result_Ok;
 800119c:	4628      	mov	r0, r5
	    MPU9250->GMult = 250.0f / 32768.0f;
 800119e:	63e3      	str	r3, [r4, #60]	; 0x3c
	    MPU9250->MMult = 10.0f * 4912.0f / 32768.0f;
 80011a0:	4b02      	ldr	r3, [pc, #8]	; (80011ac <MPU9250_Init+0x168>)
 80011a2:	6423      	str	r3, [r4, #64]	; 0x40
	    return TM_MPU9250_Result_Ok;
 80011a4:	e75c      	b.n	8001060 <MPU9250_Init+0x1c>
 80011a6:	bf00      	nop
 80011a8:	3bfa0000 	.word	0x3bfa0000
 80011ac:	3fbfe000 	.word	0x3fbfe000

080011b0 <TM_MPU9250_ReadAcce>:


TM_MPU9250_Result_t TM_MPU9250_ReadAcce(TM_MPU9250_t* MPU9250) {
 80011b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80011b2:	4604      	mov	r4, r0
	uint8_t data[6];

	/* Read accelerometer data */
	I2C_ReadMulti( MPU9250->I2C_Addr, ACCEL_XOUT_H, data, 6);
 80011b4:	466a      	mov	r2, sp
 80011b6:	213b      	movs	r1, #59	; 0x3b
 80011b8:	2306      	movs	r3, #6
 80011ba:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
 80011be:	f7ff feed 	bl	8000f9c <I2C_ReadMulti>

	MPU9250->Ax_Raw = ((int16_t)data[0] << 8) | data[1];
 80011c2:	f89d 3000 	ldrb.w	r3, [sp]
 80011c6:	f89d 0001 	ldrb.w	r0, [sp, #1]
	MPU9250->Ay_Raw = ((int16_t)data[2] << 8) | data[3];
 80011ca:	f89d 6003 	ldrb.w	r6, [sp, #3]
	MPU9250->Ax_Raw = ((int16_t)data[0] << 8) | data[1];
 80011ce:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	MPU9250->Ay_Raw = ((int16_t)data[2] << 8) | data[3];
 80011d2:	f89d 3002 	ldrb.w	r3, [sp, #2]
	MPU9250->Az_Raw = ((int16_t)data[4] << 8) | data[5];
 80011d6:	f89d 5005 	ldrb.w	r5, [sp, #5]
	MPU9250->Ay_Raw = ((int16_t)data[2] << 8) | data[3];
 80011da:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
	MPU9250->Az_Raw = ((int16_t)data[4] << 8) | data[5];
 80011de:	f89d 3004 	ldrb.w	r3, [sp, #4]

	MPU9250->Ax = (float)MPU9250->Ax_Raw * MPU9250->AMult;
 80011e2:	6ba7      	ldr	r7, [r4, #56]	; 0x38
	MPU9250->Az_Raw = ((int16_t)data[4] << 8) | data[5];
 80011e4:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	MPU9250->Ay_Raw = ((int16_t)data[2] << 8) | data[3];
 80011e8:	b236      	sxth	r6, r6
	MPU9250->Az_Raw = ((int16_t)data[4] << 8) | data[5];
 80011ea:	b22d      	sxth	r5, r5
	MPU9250->Ax_Raw = ((int16_t)data[0] << 8) | data[1];
 80011ec:	b200      	sxth	r0, r0
 80011ee:	84a0      	strh	r0, [r4, #36]	; 0x24
	MPU9250->Ay_Raw = ((int16_t)data[2] << 8) | data[3];
 80011f0:	84e6      	strh	r6, [r4, #38]	; 0x26
	MPU9250->Az_Raw = ((int16_t)data[4] << 8) | data[5];
 80011f2:	8525      	strh	r5, [r4, #40]	; 0x28
	MPU9250->Ax = (float)MPU9250->Ax_Raw * MPU9250->AMult;
 80011f4:	f7ff fd02 	bl	8000bfc <__aeabi_i2f>
 80011f8:	4639      	mov	r1, r7
 80011fa:	f7ff fd53 	bl	8000ca4 <__aeabi_fmul>
 80011fe:	6020      	str	r0, [r4, #0]
	MPU9250->Ay = (float)MPU9250->Ay_Raw * MPU9250->AMult;
 8001200:	4630      	mov	r0, r6
 8001202:	f7ff fcfb 	bl	8000bfc <__aeabi_i2f>
 8001206:	4639      	mov	r1, r7
 8001208:	f7ff fd4c 	bl	8000ca4 <__aeabi_fmul>
 800120c:	6060      	str	r0, [r4, #4]
	MPU9250->Az = (float)MPU9250->Az_Raw * MPU9250->AMult;
 800120e:	4628      	mov	r0, r5
 8001210:	f7ff fcf4 	bl	8000bfc <__aeabi_i2f>
 8001214:	4639      	mov	r1, r7
 8001216:	f7ff fd45 	bl	8000ca4 <__aeabi_fmul>
 800121a:	60a0      	str	r0, [r4, #8]
}
 800121c:	b003      	add	sp, #12
 800121e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001220 <TM_MPU9250_ReadGyro>:

TM_MPU9250_Result_t TM_MPU9250_ReadGyro(TM_MPU9250_t* MPU9250) {
 8001220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001222:	4604      	mov	r4, r0
	uint8_t data[6];
	I2C_ReadMulti( MPU9250->I2C_Addr, GYRO_XOUT_H, data, 6);
 8001224:	466a      	mov	r2, sp
 8001226:	2143      	movs	r1, #67	; 0x43
 8001228:	2306      	movs	r3, #6
 800122a:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
 800122e:	f7ff feb5 	bl	8000f9c <I2C_ReadMulti>

	MPU9250->Gx_Raw = ((int16_t)data[0] << 8) | data[1];
 8001232:	f89d 3000 	ldrb.w	r3, [sp]
 8001236:	f89d 0001 	ldrb.w	r0, [sp, #1]
	MPU9250->Gy_Raw = ((int16_t)data[2] << 8) | data[3];
 800123a:	f89d 6003 	ldrb.w	r6, [sp, #3]
	MPU9250->Gx_Raw = ((int16_t)data[0] << 8) | data[1];
 800123e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
	MPU9250->Gy_Raw = ((int16_t)data[2] << 8) | data[3];
 8001242:	f89d 3002 	ldrb.w	r3, [sp, #2]
	MPU9250->Gz_Raw = ((int16_t)data[4] << 8) | data[5];
 8001246:	f89d 5005 	ldrb.w	r5, [sp, #5]
	MPU9250->Gy_Raw = ((int16_t)data[2] << 8) | data[3];
 800124a:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
	MPU9250->Gz_Raw = ((int16_t)data[4] << 8) | data[5];
 800124e:	f89d 3004 	ldrb.w	r3, [sp, #4]

	MPU9250->Gx = (float)MPU9250->Gx_Raw * MPU9250->GMult;
 8001252:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	MPU9250->Gz_Raw = ((int16_t)data[4] << 8) | data[5];
 8001254:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	MPU9250->Gy_Raw = ((int16_t)data[2] << 8) | data[3];
 8001258:	b236      	sxth	r6, r6
	MPU9250->Gz_Raw = ((int16_t)data[4] << 8) | data[5];
 800125a:	b22d      	sxth	r5, r5
	MPU9250->Gx_Raw = ((int16_t)data[0] << 8) | data[1];
 800125c:	b200      	sxth	r0, r0
 800125e:	8560      	strh	r0, [r4, #42]	; 0x2a
	MPU9250->Gy_Raw = ((int16_t)data[2] << 8) | data[3];
 8001260:	85a6      	strh	r6, [r4, #44]	; 0x2c
	MPU9250->Gz_Raw = ((int16_t)data[4] << 8) | data[5];
 8001262:	85e5      	strh	r5, [r4, #46]	; 0x2e
	MPU9250->Gx = (float)MPU9250->Gx_Raw * MPU9250->GMult;
 8001264:	f7ff fcca 	bl	8000bfc <__aeabi_i2f>
 8001268:	4639      	mov	r1, r7
 800126a:	f7ff fd1b 	bl	8000ca4 <__aeabi_fmul>
 800126e:	60e0      	str	r0, [r4, #12]
	MPU9250->Gy = (float)MPU9250->Gy_Raw * MPU9250->GMult;
 8001270:	4630      	mov	r0, r6
 8001272:	f7ff fcc3 	bl	8000bfc <__aeabi_i2f>
 8001276:	4639      	mov	r1, r7
 8001278:	f7ff fd14 	bl	8000ca4 <__aeabi_fmul>
 800127c:	6120      	str	r0, [r4, #16]
	MPU9250->Gz = (float)MPU9250->Gz_Raw * MPU9250->GMult;
 800127e:	4628      	mov	r0, r5
 8001280:	f7ff fcbc 	bl	8000bfc <__aeabi_i2f>
 8001284:	4639      	mov	r1, r7
 8001286:	f7ff fd0d 	bl	8000ca4 <__aeabi_fmul>
 800128a:	6160      	str	r0, [r4, #20]
}
 800128c:	b003      	add	sp, #12
 800128e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001290 <TM_MPU9250_ReadMag>:

TM_MPU9250_Result_t TM_MPU9250_ReadMag(TM_MPU9250_t* MPU9250) {
 8001290:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001292:	4604      	mov	r4, r0
	uint8_t data[7];
	uint8_t check;

	/* Check status */
	I2C_Read( MPU9250->I2C_Addr_Mag, AK8963_ST1, &check);
 8001294:	f10d 0207 	add.w	r2, sp, #7
 8001298:	2102      	movs	r1, #2
 800129a:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
 800129e:	f7ff fea1 	bl	8000fe4 <I2C_Read>

	if (check & 0x01) {
 80012a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80012a6:	07da      	lsls	r2, r3, #31
 80012a8:	d51f      	bpl.n	80012ea <TM_MPU9250_ReadMag+0x5a>
		I2C_ReadMulti( MPU9250->I2C_Addr_Mag, AK8963_XOUT_L, data, 7);
 80012aa:	2307      	movs	r3, #7
 80012ac:	aa02      	add	r2, sp, #8
 80012ae:	2103      	movs	r1, #3
 80012b0:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
 80012b4:	f7ff fe72 	bl	8000f9c <I2C_ReadMulti>
		if (!(data[6] & 0x08)) {
 80012b8:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80012bc:	071b      	lsls	r3, r3, #28
 80012be:	d414      	bmi.n	80012ea <TM_MPU9250_ReadMag+0x5a>
			MPU9250->Mx_Raw = ((int16_t)data[1] << 8) | data[0];
 80012c0:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80012c4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80012c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80012cc:	8623      	strh	r3, [r4, #48]	; 0x30
			MPU9250->My_Raw = ((int16_t)data[3] << 8) | data[2];
 80012ce:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80012d2:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80012d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80012da:	8663      	strh	r3, [r4, #50]	; 0x32
			MPU9250->Mz_Raw = ((int16_t)data[5] << 8) | data[4];
 80012dc:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80012e0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80012e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80012e8:	86a3      	strh	r3, [r4, #52]	; 0x34
		}
	}
}
 80012ea:	b004      	add	sp, #16
 80012ec:	bd10      	pop	{r4, pc}
	...

080012f0 <StartgpsNMEA_ParserTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartgpsNMEA_ParserTask */
void StartgpsNMEA_ParserTask(void *argument)
{
 80012f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
		buzzerPress.duration=5;
		buzzerPress.freq=5000;
		buzzerPress.volume=BUZZER_VOLUME_MAX;
  for(;;)
  {
	  uint8_t sym=0;
 80012f2:	2500      	movs	r5, #0
	  status = osMessageQueueGet(GPS_UARTQueueHandle, &sym, NULL, osWaitForever);   // wait for message
 80012f4:	4c05      	ldr	r4, [pc, #20]	; (800130c <StartgpsNMEA_ParserTask+0x1c>)
 80012f6:	f04f 33ff 	mov.w	r3, #4294967295
 80012fa:	2200      	movs	r2, #0
 80012fc:	f10d 0107 	add.w	r1, sp, #7
 8001300:	6820      	ldr	r0, [r4, #0]
	  uint8_t sym=0;
 8001302:	f88d 5007 	strb.w	r5, [sp, #7]
	  status = osMessageQueueGet(GPS_UARTQueueHandle, &sym, NULL, osWaitForever);   // wait for message
 8001306:	f004 fbf1 	bl	8005aec <osMessageQueueGet>
 800130a:	e7f4      	b.n	80012f6 <StartgpsNMEA_ParserTask+0x6>
 800130c:	20002c54 	.word	0x20002c54

08001310 <StartDefaultTask>:
{
 8001310:	b573      	push	{r0, r1, r4, r5, r6, lr}
  MX_USB_DEVICE_Init();
 8001312:	f006 fad1 	bl	80078b8 <MX_USB_DEVICE_Init>
		keyStatus = osMessageQueueGet(keyboardQueueHandle, &buttonEvent, NULL, 1U);   // wait for message
 8001316:	4d1f      	ldr	r5, [pc, #124]	; (8001394 <StartDefaultTask+0x84>)
 8001318:	4c1f      	ldr	r4, [pc, #124]	; (8001398 <StartDefaultTask+0x88>)
			ssd1306_WriteString(" ",Font_11x18,White);
 800131a:	4e20      	ldr	r6, [pc, #128]	; (800139c <StartDefaultTask+0x8c>)
		keyStatus = osMessageQueueGet(keyboardQueueHandle, &buttonEvent, NULL, 1U);   // wait for message
 800131c:	2301      	movs	r3, #1
 800131e:	2200      	movs	r2, #0
 8001320:	a901      	add	r1, sp, #4
 8001322:	6828      	ldr	r0, [r5, #0]
 8001324:	f004 fbe2 	bl	8005aec <osMessageQueueGet>
		if (keyStatus == osOK) {
 8001328:	bb00      	cbnz	r0, 800136c <StartDefaultTask+0x5c>
			ssd1306_SetCursor(2,23);
 800132a:	2117      	movs	r1, #23
 800132c:	2002      	movs	r0, #2
 800132e:	f000 fd3b 	bl	8001da8 <ssd1306_SetCursor>
			switch (buttonEvent.buttonNumber) {
 8001332:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001336:	2b02      	cmp	r3, #2
 8001338:	d01c      	beq.n	8001374 <StartDefaultTask+0x64>
 800133a:	2b03      	cmp	r3, #3
 800133c:	d01f      	beq.n	800137e <StartDefaultTask+0x6e>
 800133e:	2b01      	cmp	r3, #1
 8001340:	d104      	bne.n	800134c <StartDefaultTask+0x3c>
				ssd1306_WriteString("1",Font_11x18,White);
 8001342:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001346:	4816      	ldr	r0, [pc, #88]	; (80013a0 <StartDefaultTask+0x90>)
				ssd1306_WriteString("3",Font_11x18,White);
 8001348:	f000 fd18 	bl	8001d7c <ssd1306_WriteString>
			ssd1306_WriteString(" ",Font_11x18,White);
 800134c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001350:	2301      	movs	r3, #1
 8001352:	4630      	mov	r0, r6
 8001354:	f000 fd12 	bl	8001d7c <ssd1306_WriteString>
			switch (buttonEvent.state) {
 8001358:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800135c:	b1a3      	cbz	r3, 8001388 <StartDefaultTask+0x78>
 800135e:	2b01      	cmp	r3, #1
 8001360:	d104      	bne.n	800136c <StartDefaultTask+0x5c>
				ssd1306_WriteString("PRESS",Font_11x18,White);
 8001362:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001366:	480f      	ldr	r0, [pc, #60]	; (80013a4 <StartDefaultTask+0x94>)
				ssd1306_WriteString("RELEAS",Font_11x18,White);
 8001368:	f000 fd08 	bl	8001d7c <ssd1306_WriteString>
		osDelay(20);
 800136c:	2014      	movs	r0, #20
 800136e:	f004 fa45 	bl	80057fc <osDelay>
		keyStatus = osMessageQueueGet(keyboardQueueHandle, &buttonEvent, NULL, 1U);   // wait for message
 8001372:	e7d3      	b.n	800131c <StartDefaultTask+0xc>
				ssd1306_WriteString("2",Font_11x18,White);
 8001374:	2301      	movs	r3, #1
 8001376:	e894 0006 	ldmia.w	r4, {r1, r2}
 800137a:	480b      	ldr	r0, [pc, #44]	; (80013a8 <StartDefaultTask+0x98>)
 800137c:	e7e4      	b.n	8001348 <StartDefaultTask+0x38>
				ssd1306_WriteString("3",Font_11x18,White);
 800137e:	2301      	movs	r3, #1
 8001380:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001384:	4809      	ldr	r0, [pc, #36]	; (80013ac <StartDefaultTask+0x9c>)
 8001386:	e7df      	b.n	8001348 <StartDefaultTask+0x38>
				ssd1306_WriteString("RELEAS",Font_11x18,White);
 8001388:	2301      	movs	r3, #1
 800138a:	e894 0006 	ldmia.w	r4, {r1, r2}
 800138e:	4808      	ldr	r0, [pc, #32]	; (80013b0 <StartDefaultTask+0xa0>)
 8001390:	e7ea      	b.n	8001368 <StartDefaultTask+0x58>
 8001392:	bf00      	nop
 8001394:	20002cf8 	.word	0x20002cf8
 8001398:	20000000 	.word	0x20000000
 800139c:	0800b650 	.word	0x0800b650
 80013a0:	0800b298 	.word	0x0800b298
 80013a4:	0800b29e 	.word	0x0800b29e
 80013a8:	0800b29a 	.word	0x0800b29a
 80013ac:	0800b29c 	.word	0x0800b29c
 80013b0:	0800b2a4 	.word	0x0800b2a4

080013b4 <StartBuzzerTask>:
{
 80013b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
		status = osMessageQueueGet(buzzerQueueHandle, &buzzerParameters, NULL, osWaitForever);   // wait for message
 80013b6:	4d0d      	ldr	r5, [pc, #52]	; (80013ec <StartBuzzerTask+0x38>)
 80013b8:	f04f 33ff 	mov.w	r3, #4294967295
 80013bc:	2200      	movs	r2, #0
 80013be:	4669      	mov	r1, sp
 80013c0:	6828      	ldr	r0, [r5, #0]
 80013c2:	f004 fb93 	bl	8005aec <osMessageQueueGet>
		if (status == osOK) {
 80013c6:	4604      	mov	r4, r0
 80013c8:	2800      	cmp	r0, #0
 80013ca:	d1f5      	bne.n	80013b8 <StartBuzzerTask+0x4>
			BuzzerSetFreq(buzzerParameters.freq);
 80013cc:	f8bd 0000 	ldrh.w	r0, [sp]
 80013d0:	f7ff fdb8 	bl	8000f44 <BuzzerSetFreq>
			BuzzerSetVolume(buzzerParameters.volume);
 80013d4:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80013d8:	f7ff fdc0 	bl	8000f5c <BuzzerSetVolume>
			osDelay(buzzerParameters.duration);
 80013dc:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 80013e0:	f004 fa0c 	bl	80057fc <osDelay>
			BuzzerSetVolume(0);
 80013e4:	4620      	mov	r0, r4
 80013e6:	f7ff fdb9 	bl	8000f5c <BuzzerSetVolume>
 80013ea:	e7e5      	b.n	80013b8 <StartBuzzerTask+0x4>
 80013ec:	20002cec 	.word	0x20002cec

080013f0 <StartKeyboardTask>:
{
 80013f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t button_three_flag=1;
 80013f4:	2401      	movs	r4, #1
	buzzerPress.freq=3000;
 80013f6:	4b64      	ldr	r3, [pc, #400]	; (8001588 <StartKeyboardTask+0x198>)
{
 80013f8:	b086      	sub	sp, #24
	buzzerPress.freq=3000;
 80013fa:	9302      	str	r3, [sp, #8]
	buzzerPress.duration=5;
 80013fc:	237d      	movs	r3, #125	; 0x7d
	uint8_t button_two_flag=1;
 80013fe:	4626      	mov	r6, r4
	uint8_t button_one_flag=1;
 8001400:	4625      	mov	r5, r4
	buzzerRELESE.freq=3500;
 8001402:	4a62      	ldr	r2, [pc, #392]	; (800158c <StartKeyboardTask+0x19c>)
		if(HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin) == GPIO_PIN_RESET && button_one_flag)
 8001404:	4f62      	ldr	r7, [pc, #392]	; (8001590 <StartKeyboardTask+0x1a0>)
	buzzerPress.duration=5;
 8001406:	f8ad 300c 	strh.w	r3, [sp, #12]
	buzzerRELESE.freq=3500;
 800140a:	9204      	str	r2, [sp, #16]
	buzzerRELESE.duration=5;
 800140c:	f8ad 3014 	strh.w	r3, [sp, #20]
		if(HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin) == GPIO_PIN_RESET && button_one_flag)
 8001410:	2120      	movs	r1, #32
 8001412:	4638      	mov	r0, r7
 8001414:	f001 f8a6 	bl	8002564 <HAL_GPIO_ReadPin>
 8001418:	4680      	mov	r8, r0
 800141a:	b9a0      	cbnz	r0, 8001446 <StartKeyboardTask+0x56>
 800141c:	b19d      	cbz	r5, 8001446 <StartKeyboardTask+0x56>
			osMessageQueuePut(buzzerQueueHandle, &buzzerPress, 0U, 0U);
 800141e:	4603      	mov	r3, r0
 8001420:	4602      	mov	r2, r0
 8001422:	485c      	ldr	r0, [pc, #368]	; (8001594 <StartKeyboardTask+0x1a4>)
 8001424:	a902      	add	r1, sp, #8
 8001426:	6800      	ldr	r0, [r0, #0]
 8001428:	f004 fb1c 	bl	8005a64 <osMessageQueuePut>
			buttonEvent.buttonNumber=1;
 800142c:	2301      	movs	r3, #1
			osMessageQueuePut(keyboardQueueHandle, &buttonEvent, 0U, 0U);
 800142e:	485a      	ldr	r0, [pc, #360]	; (8001598 <StartKeyboardTask+0x1a8>)
			buttonEvent.buttonNumber=1;
 8001430:	f88d 3004 	strb.w	r3, [sp, #4]
			buttonEvent.state = BUTTON_SHORT_PRESSED;
 8001434:	f88d 3005 	strb.w	r3, [sp, #5]
			osMessageQueuePut(keyboardQueueHandle, &buttonEvent, 0U, 0U);
 8001438:	4642      	mov	r2, r8
 800143a:	4643      	mov	r3, r8
 800143c:	a901      	add	r1, sp, #4
 800143e:	6800      	ldr	r0, [r0, #0]
 8001440:	f004 fb10 	bl	8005a64 <osMessageQueuePut>
			button_one_flag=0;
 8001444:	4645      	mov	r5, r8
		if(HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin) == GPIO_PIN_SET && (!button_one_flag))
 8001446:	2120      	movs	r1, #32
 8001448:	4638      	mov	r0, r7
 800144a:	f001 f88b 	bl	8002564 <HAL_GPIO_ReadPin>
 800144e:	2801      	cmp	r0, #1
 8001450:	4680      	mov	r8, r0
 8001452:	d112      	bne.n	800147a <StartKeyboardTask+0x8a>
 8001454:	b98d      	cbnz	r5, 800147a <StartKeyboardTask+0x8a>
			osMessageQueuePut(buzzerQueueHandle, &buzzerRELESE, 0U, 0U);
 8001456:	484f      	ldr	r0, [pc, #316]	; (8001594 <StartKeyboardTask+0x1a4>)
 8001458:	462b      	mov	r3, r5
 800145a:	462a      	mov	r2, r5
 800145c:	a904      	add	r1, sp, #16
 800145e:	6800      	ldr	r0, [r0, #0]
 8001460:	f004 fb00 	bl	8005a64 <osMessageQueuePut>
			osMessageQueuePut(keyboardQueueHandle, &buttonEvent, 0U, 0U);
 8001464:	484c      	ldr	r0, [pc, #304]	; (8001598 <StartKeyboardTask+0x1a8>)
 8001466:	462b      	mov	r3, r5
 8001468:	462a      	mov	r2, r5
 800146a:	a901      	add	r1, sp, #4
 800146c:	6800      	ldr	r0, [r0, #0]
			buttonEvent.buttonNumber=1;
 800146e:	f88d 8004 	strb.w	r8, [sp, #4]
			buttonEvent.state = BUTTON_RELEASED;
 8001472:	f88d 5005 	strb.w	r5, [sp, #5]
			osMessageQueuePut(keyboardQueueHandle, &buttonEvent, 0U, 0U);
 8001476:	f004 faf5 	bl	8005a64 <osMessageQueuePut>
		if(HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin) == GPIO_PIN_SET)
 800147a:	2120      	movs	r1, #32
 800147c:	4638      	mov	r0, r7
 800147e:	f001 f871 	bl	8002564 <HAL_GPIO_ReadPin>
		if(HAL_GPIO_ReadPin(BTN_2_GPIO_Port, BTN_2_Pin) == GPIO_PIN_RESET && button_two_flag)
 8001482:	2110      	movs	r1, #16
			button_one_flag=1;
 8001484:	2801      	cmp	r0, #1
		if(HAL_GPIO_ReadPin(BTN_2_GPIO_Port, BTN_2_Pin) == GPIO_PIN_RESET && button_two_flag)
 8001486:	4638      	mov	r0, r7
			button_one_flag=1;
 8001488:	bf08      	it	eq
 800148a:	2501      	moveq	r5, #1
		if(HAL_GPIO_ReadPin(BTN_2_GPIO_Port, BTN_2_Pin) == GPIO_PIN_RESET && button_two_flag)
 800148c:	f001 f86a 	bl	8002564 <HAL_GPIO_ReadPin>
 8001490:	4680      	mov	r8, r0
 8001492:	b9a8      	cbnz	r0, 80014c0 <StartKeyboardTask+0xd0>
 8001494:	b1a6      	cbz	r6, 80014c0 <StartKeyboardTask+0xd0>
			osMessageQueuePut(buzzerQueueHandle, &buzzerPress, 0U, 0U);
 8001496:	4603      	mov	r3, r0
 8001498:	4602      	mov	r2, r0
 800149a:	483e      	ldr	r0, [pc, #248]	; (8001594 <StartKeyboardTask+0x1a4>)
 800149c:	a902      	add	r1, sp, #8
 800149e:	6800      	ldr	r0, [r0, #0]
 80014a0:	f004 fae0 	bl	8005a64 <osMessageQueuePut>
			buttonEvent.buttonNumber=2;
 80014a4:	2302      	movs	r3, #2
 80014a6:	f88d 3004 	strb.w	r3, [sp, #4]
			buttonEvent.state = BUTTON_SHORT_PRESSED;
 80014aa:	2301      	movs	r3, #1
			osMessageQueuePut(keyboardQueueHandle, &buttonEvent, 0U, 0U);
 80014ac:	483a      	ldr	r0, [pc, #232]	; (8001598 <StartKeyboardTask+0x1a8>)
			buttonEvent.state = BUTTON_SHORT_PRESSED;
 80014ae:	f88d 3005 	strb.w	r3, [sp, #5]
			osMessageQueuePut(keyboardQueueHandle, &buttonEvent, 0U, 0U);
 80014b2:	4642      	mov	r2, r8
 80014b4:	4643      	mov	r3, r8
 80014b6:	a901      	add	r1, sp, #4
 80014b8:	6800      	ldr	r0, [r0, #0]
 80014ba:	f004 fad3 	bl	8005a64 <osMessageQueuePut>
			button_two_flag=0;
 80014be:	4646      	mov	r6, r8
		if(HAL_GPIO_ReadPin(BTN_2_GPIO_Port, BTN_2_Pin) == GPIO_PIN_SET && (!button_two_flag))
 80014c0:	2110      	movs	r1, #16
 80014c2:	4638      	mov	r0, r7
 80014c4:	f001 f84e 	bl	8002564 <HAL_GPIO_ReadPin>
 80014c8:	2801      	cmp	r0, #1
 80014ca:	d113      	bne.n	80014f4 <StartKeyboardTask+0x104>
 80014cc:	b996      	cbnz	r6, 80014f4 <StartKeyboardTask+0x104>
			osMessageQueuePut(buzzerQueueHandle, &buzzerRELESE, 0U, 0U);
 80014ce:	4831      	ldr	r0, [pc, #196]	; (8001594 <StartKeyboardTask+0x1a4>)
 80014d0:	4633      	mov	r3, r6
 80014d2:	4632      	mov	r2, r6
 80014d4:	a904      	add	r1, sp, #16
 80014d6:	6800      	ldr	r0, [r0, #0]
 80014d8:	f004 fac4 	bl	8005a64 <osMessageQueuePut>
			buttonEvent.buttonNumber=2;
 80014dc:	2302      	movs	r3, #2
			osMessageQueuePut(keyboardQueueHandle, &buttonEvent, 0U, 0U);
 80014de:	482e      	ldr	r0, [pc, #184]	; (8001598 <StartKeyboardTask+0x1a8>)
			buttonEvent.buttonNumber=2;
 80014e0:	f88d 3004 	strb.w	r3, [sp, #4]
			osMessageQueuePut(keyboardQueueHandle, &buttonEvent, 0U, 0U);
 80014e4:	4632      	mov	r2, r6
 80014e6:	4633      	mov	r3, r6
 80014e8:	a901      	add	r1, sp, #4
 80014ea:	6800      	ldr	r0, [r0, #0]
			buttonEvent.state = BUTTON_RELEASED;
 80014ec:	f88d 6005 	strb.w	r6, [sp, #5]
			osMessageQueuePut(keyboardQueueHandle, &buttonEvent, 0U, 0U);
 80014f0:	f004 fab8 	bl	8005a64 <osMessageQueuePut>
		if(HAL_GPIO_ReadPin(BTN_2_GPIO_Port, BTN_2_Pin) == GPIO_PIN_SET)
 80014f4:	2110      	movs	r1, #16
 80014f6:	4638      	mov	r0, r7
 80014f8:	f001 f834 	bl	8002564 <HAL_GPIO_ReadPin>
		if(HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin) == GPIO_PIN_RESET && button_three_flag)
 80014fc:	2108      	movs	r1, #8
			button_two_flag=1;
 80014fe:	2801      	cmp	r0, #1
		if(HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin) == GPIO_PIN_RESET && button_three_flag)
 8001500:	4638      	mov	r0, r7
			button_two_flag=1;
 8001502:	bf08      	it	eq
 8001504:	2601      	moveq	r6, #1
		if(HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin) == GPIO_PIN_RESET && button_three_flag)
 8001506:	f001 f82d 	bl	8002564 <HAL_GPIO_ReadPin>
 800150a:	4680      	mov	r8, r0
 800150c:	b9a8      	cbnz	r0, 800153a <StartKeyboardTask+0x14a>
 800150e:	b1a4      	cbz	r4, 800153a <StartKeyboardTask+0x14a>
			osMessageQueuePut(buzzerQueueHandle, &buzzerPress, 0U, 0U);
 8001510:	4603      	mov	r3, r0
 8001512:	4602      	mov	r2, r0
 8001514:	481f      	ldr	r0, [pc, #124]	; (8001594 <StartKeyboardTask+0x1a4>)
 8001516:	a902      	add	r1, sp, #8
 8001518:	6800      	ldr	r0, [r0, #0]
 800151a:	f004 faa3 	bl	8005a64 <osMessageQueuePut>
			buttonEvent.buttonNumber=3;
 800151e:	2303      	movs	r3, #3
 8001520:	f88d 3004 	strb.w	r3, [sp, #4]
			buttonEvent.state = BUTTON_SHORT_PRESSED;
 8001524:	2301      	movs	r3, #1
			osMessageQueuePut(keyboardQueueHandle, &buttonEvent, 0U, 0U);
 8001526:	481c      	ldr	r0, [pc, #112]	; (8001598 <StartKeyboardTask+0x1a8>)
			buttonEvent.state = BUTTON_SHORT_PRESSED;
 8001528:	f88d 3005 	strb.w	r3, [sp, #5]
			osMessageQueuePut(keyboardQueueHandle, &buttonEvent, 0U, 0U);
 800152c:	4642      	mov	r2, r8
 800152e:	4643      	mov	r3, r8
 8001530:	a901      	add	r1, sp, #4
 8001532:	6800      	ldr	r0, [r0, #0]
 8001534:	f004 fa96 	bl	8005a64 <osMessageQueuePut>
			button_three_flag=0;
 8001538:	4644      	mov	r4, r8
		if(HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin) == GPIO_PIN_SET && (!button_three_flag))
 800153a:	2108      	movs	r1, #8
 800153c:	4638      	mov	r0, r7
 800153e:	f001 f811 	bl	8002564 <HAL_GPIO_ReadPin>
 8001542:	2801      	cmp	r0, #1
 8001544:	d113      	bne.n	800156e <StartKeyboardTask+0x17e>
 8001546:	b994      	cbnz	r4, 800156e <StartKeyboardTask+0x17e>
			osMessageQueuePut(buzzerQueueHandle, &buzzerRELESE, 0U, 0U);
 8001548:	4812      	ldr	r0, [pc, #72]	; (8001594 <StartKeyboardTask+0x1a4>)
 800154a:	4623      	mov	r3, r4
 800154c:	4622      	mov	r2, r4
 800154e:	a904      	add	r1, sp, #16
 8001550:	6800      	ldr	r0, [r0, #0]
 8001552:	f004 fa87 	bl	8005a64 <osMessageQueuePut>
			buttonEvent.buttonNumber=3;
 8001556:	2303      	movs	r3, #3
			osMessageQueuePut(keyboardQueueHandle, &buttonEvent, 0U, 0U);
 8001558:	480f      	ldr	r0, [pc, #60]	; (8001598 <StartKeyboardTask+0x1a8>)
			buttonEvent.buttonNumber=3;
 800155a:	f88d 3004 	strb.w	r3, [sp, #4]
			osMessageQueuePut(keyboardQueueHandle, &buttonEvent, 0U, 0U);
 800155e:	4622      	mov	r2, r4
 8001560:	4623      	mov	r3, r4
 8001562:	a901      	add	r1, sp, #4
 8001564:	6800      	ldr	r0, [r0, #0]
			buttonEvent.state = BUTTON_RELEASED;
 8001566:	f88d 4005 	strb.w	r4, [sp, #5]
			osMessageQueuePut(keyboardQueueHandle, &buttonEvent, 0U, 0U);
 800156a:	f004 fa7b 	bl	8005a64 <osMessageQueuePut>
		if(HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin) == GPIO_PIN_SET)
 800156e:	2108      	movs	r1, #8
 8001570:	4638      	mov	r0, r7
 8001572:	f000 fff7 	bl	8002564 <HAL_GPIO_ReadPin>
			button_three_flag=1;
 8001576:	2801      	cmp	r0, #1
		osDelay(5);
 8001578:	f04f 0005 	mov.w	r0, #5
			button_three_flag=1;
 800157c:	bf08      	it	eq
 800157e:	2401      	moveq	r4, #1
		osDelay(5);
 8001580:	f004 f93c 	bl	80057fc <osDelay>
		if(HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin) == GPIO_PIN_RESET && button_one_flag)
 8001584:	e744      	b.n	8001410 <StartKeyboardTask+0x20>
 8001586:	bf00      	nop
 8001588:	00050bb8 	.word	0x00050bb8
 800158c:	00050dac 	.word	0x00050dac
 8001590:	40010c00 	.word	0x40010c00
 8001594:	20002cec 	.word	0x20002cec
 8001598:	20002cf8 	.word	0x20002cf8

0800159c <StartDysplayTask>:
{
 800159c:	b580      	push	{r7, lr}
		sprintf(str, "%d", accelStruct.Ax_Raw);
 800159e:	4d4d      	ldr	r5, [pc, #308]	; (80016d4 <StartDysplayTask+0x138>)
{
 80015a0:	b088      	sub	sp, #32
		osSemaphoreAcquire(accelStructBinarySemHandle,osWaitForever);
 80015a2:	4f4d      	ldr	r7, [pc, #308]	; (80016d8 <StartDysplayTask+0x13c>)
 80015a4:	f04f 31ff 	mov.w	r1, #4294967295
 80015a8:	6838      	ldr	r0, [r7, #0]
 80015aa:	f004 f99b 	bl	80058e4 <osSemaphoreAcquire>
		ssd1306_Fill(Black);
 80015ae:	2000      	movs	r0, #0
 80015b0:	f000 fadc 	bl	8001b6c <ssd1306_Fill>
		ssd1306_SetCursor(2,2);
 80015b4:	2102      	movs	r1, #2
		sprintf(str, "%d", accelStruct.Ax_Raw);
 80015b6:	4e49      	ldr	r6, [pc, #292]	; (80016dc <StartDysplayTask+0x140>)
		ssd1306_WriteString("Ax:",Font_7x10,White);
 80015b8:	4c49      	ldr	r4, [pc, #292]	; (80016e0 <StartDysplayTask+0x144>)
		ssd1306_SetCursor(2,2);
 80015ba:	4608      	mov	r0, r1
 80015bc:	f000 fbf4 	bl	8001da8 <ssd1306_SetCursor>
		sprintf(str, "%d", accelStruct.Ax_Raw);
 80015c0:	f9b6 2024 	ldrsh.w	r2, [r6, #36]	; 0x24
 80015c4:	4629      	mov	r1, r5
 80015c6:	4668      	mov	r0, sp
 80015c8:	f007 f8b8 	bl	800873c <siprintf>
		ssd1306_WriteString("Ax:",Font_7x10,White);
 80015cc:	e894 0006 	ldmia.w	r4, {r1, r2}
 80015d0:	2301      	movs	r3, #1
 80015d2:	4844      	ldr	r0, [pc, #272]	; (80016e4 <StartDysplayTask+0x148>)
 80015d4:	f000 fbd2 	bl	8001d7c <ssd1306_WriteString>
		ssd1306_WriteString(str,Font_7x10,White);
 80015d8:	e894 0006 	ldmia.w	r4, {r1, r2}
 80015dc:	2301      	movs	r3, #1
 80015de:	4668      	mov	r0, sp
 80015e0:	f000 fbcc 	bl	8001d7c <ssd1306_WriteString>
		ssd1306_SetCursor(2,12);
 80015e4:	210c      	movs	r1, #12
 80015e6:	2002      	movs	r0, #2
 80015e8:	f000 fbde 	bl	8001da8 <ssd1306_SetCursor>
		sprintf(str, "%d", accelStruct.Ay_Raw);
 80015ec:	f9b6 2026 	ldrsh.w	r2, [r6, #38]	; 0x26
 80015f0:	4629      	mov	r1, r5
 80015f2:	4668      	mov	r0, sp
 80015f4:	f007 f8a2 	bl	800873c <siprintf>
		ssd1306_WriteString("Ay:",Font_7x10,White);
 80015f8:	e894 0006 	ldmia.w	r4, {r1, r2}
 80015fc:	2301      	movs	r3, #1
 80015fe:	483a      	ldr	r0, [pc, #232]	; (80016e8 <StartDysplayTask+0x14c>)
 8001600:	f000 fbbc 	bl	8001d7c <ssd1306_WriteString>
		ssd1306_WriteString(str,Font_7x10,White);
 8001604:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001608:	2301      	movs	r3, #1
 800160a:	4668      	mov	r0, sp
 800160c:	f000 fbb6 	bl	8001d7c <ssd1306_WriteString>
		ssd1306_SetCursor(2,22);
 8001610:	2116      	movs	r1, #22
 8001612:	2002      	movs	r0, #2
 8001614:	f000 fbc8 	bl	8001da8 <ssd1306_SetCursor>
		sprintf(str, "%d", accelStruct.Az_Raw);
 8001618:	f9b6 2028 	ldrsh.w	r2, [r6, #40]	; 0x28
 800161c:	4629      	mov	r1, r5
 800161e:	4668      	mov	r0, sp
 8001620:	f007 f88c 	bl	800873c <siprintf>
		ssd1306_WriteString("Az:",Font_7x10,White);
 8001624:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001628:	2301      	movs	r3, #1
 800162a:	4830      	ldr	r0, [pc, #192]	; (80016ec <StartDysplayTask+0x150>)
 800162c:	f000 fba6 	bl	8001d7c <ssd1306_WriteString>
		ssd1306_WriteString(str,Font_7x10,White);
 8001630:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001634:	2301      	movs	r3, #1
 8001636:	4668      	mov	r0, sp
 8001638:	f000 fba0 	bl	8001d7c <ssd1306_WriteString>
		ssd1306_SetCursor(60,2);
 800163c:	2102      	movs	r1, #2
 800163e:	203c      	movs	r0, #60	; 0x3c
 8001640:	f000 fbb2 	bl	8001da8 <ssd1306_SetCursor>
		sprintf(str, "%d", accelStruct.Gx_Raw);
 8001644:	f9b6 202a 	ldrsh.w	r2, [r6, #42]	; 0x2a
 8001648:	4629      	mov	r1, r5
 800164a:	4668      	mov	r0, sp
 800164c:	f007 f876 	bl	800873c <siprintf>
		ssd1306_WriteString("Gx:",Font_7x10,White);
 8001650:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001654:	2301      	movs	r3, #1
 8001656:	4826      	ldr	r0, [pc, #152]	; (80016f0 <StartDysplayTask+0x154>)
 8001658:	f000 fb90 	bl	8001d7c <ssd1306_WriteString>
		ssd1306_WriteString(str,Font_7x10,White);
 800165c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001660:	2301      	movs	r3, #1
 8001662:	4668      	mov	r0, sp
 8001664:	f000 fb8a 	bl	8001d7c <ssd1306_WriteString>
		ssd1306_SetCursor(60,12);
 8001668:	210c      	movs	r1, #12
 800166a:	203c      	movs	r0, #60	; 0x3c
 800166c:	f000 fb9c 	bl	8001da8 <ssd1306_SetCursor>
		sprintf(str, "%d", accelStruct.Gy_Raw);
 8001670:	f9b6 202c 	ldrsh.w	r2, [r6, #44]	; 0x2c
 8001674:	4629      	mov	r1, r5
 8001676:	4668      	mov	r0, sp
 8001678:	f007 f860 	bl	800873c <siprintf>
		ssd1306_WriteString("Gy:",Font_7x10,White);
 800167c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001680:	2301      	movs	r3, #1
 8001682:	481c      	ldr	r0, [pc, #112]	; (80016f4 <StartDysplayTask+0x158>)
 8001684:	f000 fb7a 	bl	8001d7c <ssd1306_WriteString>
		ssd1306_WriteString(str,Font_7x10,White);
 8001688:	e894 0006 	ldmia.w	r4, {r1, r2}
 800168c:	2301      	movs	r3, #1
 800168e:	4668      	mov	r0, sp
 8001690:	f000 fb74 	bl	8001d7c <ssd1306_WriteString>
		ssd1306_SetCursor(60,22);
 8001694:	2116      	movs	r1, #22
 8001696:	203c      	movs	r0, #60	; 0x3c
 8001698:	f000 fb86 	bl	8001da8 <ssd1306_SetCursor>
		sprintf(str, "%d", accelStruct.Gz_Raw);
 800169c:	f9b6 202e 	ldrsh.w	r2, [r6, #46]	; 0x2e
 80016a0:	4629      	mov	r1, r5
 80016a2:	4668      	mov	r0, sp
 80016a4:	f007 f84a 	bl	800873c <siprintf>
		ssd1306_WriteString("Gz:",Font_7x10,White);
 80016a8:	e894 0006 	ldmia.w	r4, {r1, r2}
 80016ac:	2301      	movs	r3, #1
 80016ae:	4812      	ldr	r0, [pc, #72]	; (80016f8 <StartDysplayTask+0x15c>)
 80016b0:	f000 fb64 	bl	8001d7c <ssd1306_WriteString>
		ssd1306_WriteString(str,Font_7x10,White);
 80016b4:	e894 0006 	ldmia.w	r4, {r1, r2}
 80016b8:	2301      	movs	r3, #1
 80016ba:	4668      	mov	r0, sp
 80016bc:	f000 fb5e 	bl	8001d7c <ssd1306_WriteString>
		osSemaphoreRelease(accelStructBinarySemHandle);
 80016c0:	6838      	ldr	r0, [r7, #0]
 80016c2:	f004 f94d 	bl	8005960 <osSemaphoreRelease>
		ssd1306_UpdateScreen();
 80016c6:	f000 fa5f 	bl	8001b88 <ssd1306_UpdateScreen>
		osDelay(10);
 80016ca:	200a      	movs	r0, #10
 80016cc:	f004 f896 	bl	80057fc <osDelay>
 80016d0:	e767      	b.n	80015a2 <StartDysplayTask+0x6>
 80016d2:	bf00      	nop
 80016d4:	0800b2ab 	.word	0x0800b2ab
 80016d8:	20002dd8 	.word	0x20002dd8
 80016dc:	20002d40 	.word	0x20002d40
 80016e0:	20000008 	.word	0x20000008
 80016e4:	0800b2ae 	.word	0x0800b2ae
 80016e8:	0800b2b2 	.word	0x0800b2b2
 80016ec:	0800b2b6 	.word	0x0800b2b6
 80016f0:	0800b2ba 	.word	0x0800b2ba
 80016f4:	0800b2be 	.word	0x0800b2be
 80016f8:	0800b2c2 	.word	0x0800b2c2

080016fc <StartAccelTask>:
{
 80016fc:	b508      	push	{r3, lr}
		osSemaphoreAcquire(accelStructBinarySemHandle, osWaitForever);
 80016fe:	4d10      	ldr	r5, [pc, #64]	; (8001740 <StartAccelTask+0x44>)
		TM_MPU9250_ReadAcce(&accelStruct);
 8001700:	4c10      	ldr	r4, [pc, #64]	; (8001744 <StartAccelTask+0x48>)
		osSemaphoreAcquire(accelStructBinarySemHandle, osWaitForever);
 8001702:	f04f 31ff 	mov.w	r1, #4294967295
 8001706:	6828      	ldr	r0, [r5, #0]
 8001708:	f004 f8ec 	bl	80058e4 <osSemaphoreAcquire>
		TM_MPU9250_ReadAcce(&accelStruct);
 800170c:	4620      	mov	r0, r4
 800170e:	f7ff fd4f 	bl	80011b0 <TM_MPU9250_ReadAcce>
		osDelay(1);
 8001712:	2001      	movs	r0, #1
 8001714:	f004 f872 	bl	80057fc <osDelay>
		TM_MPU9250_ReadGyro(&accelStruct);
 8001718:	4620      	mov	r0, r4
 800171a:	f7ff fd81 	bl	8001220 <TM_MPU9250_ReadGyro>
		osDelay(1);
 800171e:	2001      	movs	r0, #1
 8001720:	f004 f86c 	bl	80057fc <osDelay>
		TM_MPU9250_ReadMag(&accelStruct);
 8001724:	4620      	mov	r0, r4
 8001726:	f7ff fdb3 	bl	8001290 <TM_MPU9250_ReadMag>
		osDelay(1);
 800172a:	2001      	movs	r0, #1
 800172c:	f004 f866 	bl	80057fc <osDelay>
		osSemaphoreRelease(accelStructBinarySemHandle);
 8001730:	6828      	ldr	r0, [r5, #0]
 8001732:	f004 f915 	bl	8005960 <osSemaphoreRelease>
		osDelay(2);
 8001736:	2002      	movs	r0, #2
 8001738:	f004 f860 	bl	80057fc <osDelay>
 800173c:	e7e1      	b.n	8001702 <StartAccelTask+0x6>
 800173e:	bf00      	nop
 8001740:	20002dd8 	.word	0x20002dd8
 8001744:	20002d40 	.word	0x20002d40

08001748 <SystemClock_Config>:
{
 8001748:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800174a:	2414      	movs	r4, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800174c:	2610      	movs	r6, #16
{
 800174e:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001750:	4622      	mov	r2, r4
 8001752:	2100      	movs	r1, #0
 8001754:	a80c      	add	r0, sp, #48	; 0x30
 8001756:	f006 fae2 	bl	8007d1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800175a:	4622      	mov	r2, r4
 800175c:	eb0d 0004 	add.w	r0, sp, r4
 8001760:	2100      	movs	r1, #0
 8001762:	f006 fadc 	bl	8007d1e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001766:	4632      	mov	r2, r6
 8001768:	2100      	movs	r1, #0
 800176a:	a801      	add	r0, sp, #4
 800176c:	f006 fad7 	bl	8007d1e <memset>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001770:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001772:	2201      	movs	r2, #1
 8001774:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001778:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800177c:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001780:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001784:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001786:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001788:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800178a:	f002 f833 	bl	80037f4 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800178e:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001790:	2400      	movs	r4, #0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001792:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001796:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800179a:	4629      	mov	r1, r5
 800179c:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800179e:	e9cd 4307 	strd	r4, r3, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017a2:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017a4:	f002 f9fe 	bl	8003ba4 <HAL_RCC_ClockConfig>
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017a8:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80017aa:	9601      	str	r6, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80017ac:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017ae:	f002 fab5 	bl	8003d1c <HAL_RCCEx_PeriphCLKConfig>
}
 80017b2:	b014      	add	sp, #80	; 0x50
 80017b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080017b8 <main>:
{
 80017b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017bc:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 80017be:	f000 fd09 	bl	80021d4 <HAL_Init>
  SystemClock_Config();
 80017c2:	f7ff ffc1 	bl	8001748 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c6:	2210      	movs	r2, #16
 80017c8:	2100      	movs	r1, #0
 80017ca:	a807      	add	r0, sp, #28
 80017cc:	f006 faa7 	bl	8007d1e <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d0:	4bae      	ldr	r3, [pc, #696]	; (8001a8c <main+0x2d4>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017d2:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d4:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d6:	2501      	movs	r5, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d8:	f042 0210 	orr.w	r2, r2, #16
 80017dc:	619a      	str	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017de:	f04f 0940 	mov.w	r9, #64	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017e2:	2603      	movs	r6, #3
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e4:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	f04f 0802 	mov.w	r8, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ea:	f002 0210 	and.w	r2, r2, #16
 80017ee:	9201      	str	r2, [sp, #4]
 80017f0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017f2:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(SD_SPI_CS_GPIO_Port, SD_SPI_CS_Pin, GPIO_PIN_SET);
 80017f4:	2140      	movs	r1, #64	; 0x40
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017f6:	f042 0220 	orr.w	r2, r2, #32
 80017fa:	619a      	str	r2, [r3, #24]
 80017fc:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(SD_SPI_CS_GPIO_Port, SD_SPI_CS_Pin, GPIO_PIN_SET);
 80017fe:	48a4      	ldr	r0, [pc, #656]	; (8001a90 <main+0x2d8>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001800:	f002 0220 	and.w	r2, r2, #32
 8001804:	9202      	str	r2, [sp, #8]
 8001806:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001808:	699a      	ldr	r2, [r3, #24]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800180a:	270c      	movs	r7, #12
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800180c:	f042 0204 	orr.w	r2, r2, #4
 8001810:	619a      	str	r2, [r3, #24]
 8001812:	699a      	ldr	r2, [r3, #24]
  huart1.Init.BaudRate = 115200;
 8001814:	f44f 3be1 	mov.w	fp, #115200	; 0x1c200
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001818:	f002 0204 	and.w	r2, r2, #4
 800181c:	9203      	str	r2, [sp, #12]
 800181e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001820:	699a      	ldr	r2, [r3, #24]
  huart1.Init.BaudRate = 115200;
 8001822:	f8df a318 	ldr.w	sl, [pc, #792]	; 8001b3c <main+0x384>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001826:	f042 0208 	orr.w	r2, r2, #8
 800182a:	619a      	str	r2, [r3, #24]
 800182c:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(SD_SPI_CS_GPIO_Port, SD_SPI_CS_Pin, GPIO_PIN_SET);
 800182e:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001830:	f003 0308 	and.w	r3, r3, #8
 8001834:	9304      	str	r3, [sp, #16]
 8001836:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(SD_SPI_CS_GPIO_Port, SD_SPI_CS_Pin, GPIO_PIN_SET);
 8001838:	f000 fe9a 	bl	8002570 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPS_EN_GPIO_Port, GPS_EN_Pin, GPIO_PIN_RESET);
 800183c:	2200      	movs	r2, #0
 800183e:	2101      	movs	r1, #1
 8001840:	4894      	ldr	r0, [pc, #592]	; (8001a94 <main+0x2dc>)
 8001842:	f000 fe95 	bl	8002570 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_LE_GPIO_Port, LED_LE_Pin, GPIO_PIN_SET);
 8001846:	2201      	movs	r2, #1
 8001848:	2140      	movs	r1, #64	; 0x40
 800184a:	4892      	ldr	r0, [pc, #584]	; (8001a94 <main+0x2dc>)
 800184c:	f000 fe90 	bl	8002570 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(SD_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001850:	a907      	add	r1, sp, #28
 8001852:	488f      	ldr	r0, [pc, #572]	; (8001a90 <main+0x2d8>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001854:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001858:	e9cd 9507 	strd	r9, r5, [sp, #28]
  HAL_GPIO_Init(SD_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800185c:	f000 fda2 	bl	80023a4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPS_EN_GPIO_Port, &GPIO_InitStruct);
 8001860:	a907      	add	r1, sp, #28
 8001862:	488c      	ldr	r0, [pc, #560]	; (8001a94 <main+0x2dc>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001864:	e9cd 5507 	strd	r5, r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPS_EN_GPIO_Port, &GPIO_InitStruct);
 800186e:	f000 fd99 	bl	80023a4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPS_PPS_GPIO_Port, &GPIO_InitStruct);
 8001872:	a907      	add	r1, sp, #28
 8001874:	4887      	ldr	r0, [pc, #540]	; (8001a94 <main+0x2dc>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001876:	e9cd 8407 	strd	r8, r4, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPS_PPS_GPIO_Port, &GPIO_InitStruct);
 800187c:	f000 fd92 	bl	80023a4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MPU_INT_Pin;
 8001880:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(MPU_INT_GPIO_Port, &GPIO_InitStruct);
 8001884:	a907      	add	r1, sp, #28
 8001886:	4882      	ldr	r0, [pc, #520]	; (8001a90 <main+0x2d8>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001888:	e9cd 3407 	strd	r3, r4, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(MPU_INT_GPIO_Port, &GPIO_InitStruct);
 800188e:	f000 fd89 	bl	80023a4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BTN_3_Pin|BTN_2_Pin|BTN_1_Pin;
 8001892:	2338      	movs	r3, #56	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001894:	a907      	add	r1, sp, #28
 8001896:	487f      	ldr	r0, [pc, #508]	; (8001a94 <main+0x2dc>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001898:	e9cd 3407 	strd	r3, r4, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800189c:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189e:	f000 fd81 	bl	80023a4 <HAL_GPIO_Init>
  HAL_GPIO_Init(LED_LE_GPIO_Port, &GPIO_InitStruct);
 80018a2:	a907      	add	r1, sp, #28
 80018a4:	487b      	ldr	r0, [pc, #492]	; (8001a94 <main+0x2dc>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018a6:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018aa:	e9cd 9507 	strd	r9, r5, [sp, #28]
  HAL_GPIO_Init(LED_LE_GPIO_Port, &GPIO_InitStruct);
 80018ae:	f000 fd79 	bl	80023a4 <HAL_GPIO_Init>
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80018b2:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi2.Instance = SPI2;
 80018b6:	4878      	ldr	r0, [pc, #480]	; (8001a98 <main+0x2e0>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80018b8:	4a78      	ldr	r2, [pc, #480]	; (8001a9c <main+0x2e4>)
  huart1.Instance = USART1;
 80018ba:	4e79      	ldr	r6, [pc, #484]	; (8001aa0 <main+0x2e8>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80018bc:	e9c0 2300 	strd	r2, r3, [r0]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80018c0:	f44f 7300 	mov.w	r3, #512	; 0x200
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018c4:	e9c0 3406 	strd	r3, r4, [r0, #24]
  hspi2.Init.CRCPolynomial = 10;
 80018c8:	230a      	movs	r3, #10
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80018ca:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hspi2.Init.CRCPolynomial = 10;
 80018ce:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018d0:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018d4:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018d8:	6284      	str	r4, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018da:	f002 fa97 	bl	8003e0c <HAL_SPI_Init>
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018de:	4630      	mov	r0, r6
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018e0:	e9c6 7405 	strd	r7, r4, [r6, #20]
  huart1.Init.BaudRate = 115200;
 80018e4:	e9c6 ab00 	strd	sl, fp, [r6]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018e8:	e9c6 4402 	strd	r4, r4, [r6, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018ec:	6134      	str	r4, [r6, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018ee:	61f4      	str	r4, [r6, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018f0:	f002 fcac 	bl	800424c <HAL_UART_Init>
  HAL_UART_Receive_IT (&huart1, receiveBuffer, (uint8_t) 1);
 80018f4:	462a      	mov	r2, r5
 80018f6:	496b      	ldr	r1, [pc, #428]	; (8001aa4 <main+0x2ec>)
 80018f8:	4630      	mov	r0, r6
 80018fa:	f002 fcd5 	bl	80042a8 <HAL_UART_Receive_IT>
  huart3.Instance = USART3;
 80018fe:	486a      	ldr	r0, [pc, #424]	; (8001aa8 <main+0x2f0>)
 8001900:	4b6a      	ldr	r3, [pc, #424]	; (8001aac <main+0x2f4>)
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001902:	e9c0 4704 	strd	r4, r7, [r0, #16]
  huart3.Init.BaudRate = 115200;
 8001906:	e9c0 3b00 	strd	r3, fp, [r0]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800190a:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800190e:	e9c0 4406 	strd	r4, r4, [r0, #24]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001912:	f002 fc9b 	bl	800424c <HAL_UART_Init>
  MX_FATFS_Init();
 8001916:	f003 f999 	bl	8004c4c <MX_FATFS_Init>
  hi2c1.Instance = I2C1;
 800191a:	4865      	ldr	r0, [pc, #404]	; (8001ab0 <main+0x2f8>)
  hi2c1.Init.ClockSpeed = 400000;
 800191c:	4965      	ldr	r1, [pc, #404]	; (8001ab4 <main+0x2fc>)
 800191e:	4b66      	ldr	r3, [pc, #408]	; (8001ab8 <main+0x300>)
  hi2c1.Init.OwnAddress1 = 0;
 8001920:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 400000;
 8001924:	e9c0 1300 	strd	r1, r3, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001928:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800192c:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001930:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001934:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001936:	f000 ff6d 	bl	8002814 <HAL_I2C_Init>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800193a:	221c      	movs	r2, #28
 800193c:	4621      	mov	r1, r4
 800193e:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001942:	e9cd 4405 	strd	r4, r4, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001946:	f006 f9ea 	bl	8007d1e <memset>
  htim2.Init.Prescaler = 479;
 800194a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800194e:	f240 13df 	movw	r3, #479	; 0x1df
  htim2.Instance = TIM2;
 8001952:	4f5a      	ldr	r7, [pc, #360]	; (8001abc <main+0x304>)
  htim2.Init.Prescaler = 479;
 8001954:	e9c7 0300 	strd	r0, r3, [r7]
  htim2.Init.Period = 254;
 8001958:	23fe      	movs	r3, #254	; 0xfe
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800195a:	4638      	mov	r0, r7
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800195c:	e9c7 3403 	strd	r3, r4, [r7, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001960:	60bc      	str	r4, [r7, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001962:	61bc      	str	r4, [r7, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001964:	f002 fb3a 	bl	8003fdc <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001968:	a905      	add	r1, sp, #20
 800196a:	4638      	mov	r0, r7
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800196c:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001970:	f002 fc06 	bl	8004180 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.Pulse = 124;
 8001974:	f04f 0c60 	mov.w	ip, #96	; 0x60
 8001978:	237c      	movs	r3, #124	; 0x7c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800197a:	4622      	mov	r2, r4
 800197c:	a907      	add	r1, sp, #28
 800197e:	4638      	mov	r0, r7
  sConfigOC.Pulse = 124;
 8001980:	e9cd c307 	strd	ip, r3, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001984:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001986:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001988:	f002 fb6e 	bl	8004068 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim2);
 800198c:	4638      	mov	r0, r7
 800198e:	f000 fac3 	bl	8001f18 <HAL_TIM_MspPostInit>
	BuzzerSetVolume(0);
 8001992:	4620      	mov	r0, r4
 8001994:	f7ff fae2 	bl	8000f5c <BuzzerSetVolume>
	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 8001998:	4621      	mov	r1, r4
 800199a:	4638      	mov	r0, r7
 800199c:	f002 fbd4 	bl	8004148 <HAL_TIM_OC_Start>
    ssd1306_Init();
 80019a0:	f000 f918 	bl	8001bd4 <ssd1306_Init>
	ssd1306_Fill(Black);
 80019a4:	4620      	mov	r0, r4
 80019a6:	f000 f8e1 	bl	8001b6c <ssd1306_Fill>
	ssd1306_UpdateScreen();
 80019aa:	f000 f8ed 	bl	8001b88 <ssd1306_UpdateScreen>
	TM_MPU9250_Result_t res =  MPU9250_Init(&accelStruct,TM_MPU9250_Device_0);
 80019ae:	4621      	mov	r1, r4
 80019b0:	4843      	ldr	r0, [pc, #268]	; (8001ac0 <main+0x308>)
 80019b2:	f7ff fb47 	bl	8001044 <MPU9250_Init>
	  USART1->CR1 |= USART_CR1_TCIE; /*//прерывание по окончанию передачи*/
 80019b6:	f8da 300c 	ldr.w	r3, [sl, #12]
	  HAL_UART_Receive_IT (&huart1, receiveBuffer, (uint8_t) 1);
 80019ba:	462a      	mov	r2, r5
	  USART1->CR1 |= USART_CR1_TCIE; /*//прерывание по окончанию передачи*/
 80019bc:	ea43 0309 	orr.w	r3, r3, r9
 80019c0:	f8ca 300c 	str.w	r3, [sl, #12]
	  USART1->CR1 |= USART_CR1_RXNEIE; /*//прерывание по приему данных*/
 80019c4:	f8da 300c 	ldr.w	r3, [sl, #12]
	  HAL_UART_Receive_IT (&huart1, receiveBuffer, (uint8_t) 1);
 80019c8:	4936      	ldr	r1, [pc, #216]	; (8001aa4 <main+0x2ec>)
	  USART1->CR1 |= USART_CR1_RXNEIE; /*//прерывание по приему данных*/
 80019ca:	f043 0320 	orr.w	r3, r3, #32
 80019ce:	f8ca 300c 	str.w	r3, [sl, #12]
	  HAL_UART_Receive_IT (&huart1, receiveBuffer, (uint8_t) 1);
 80019d2:	4630      	mov	r0, r6
 80019d4:	f002 fc68 	bl	80042a8 <HAL_UART_Receive_IT>
  osKernelInitialize();
 80019d8:	f003 fe78 	bl	80056cc <osKernelInitialize>
  I2C_BinarySemHandle = osSemaphoreNew(1, 1, &I2C_BinarySem_attributes);
 80019dc:	4a39      	ldr	r2, [pc, #228]	; (8001ac4 <main+0x30c>)
 80019de:	4629      	mov	r1, r5
 80019e0:	4628      	mov	r0, r5
 80019e2:	f003 ff27 	bl	8005834 <osSemaphoreNew>
 80019e6:	4b38      	ldr	r3, [pc, #224]	; (8001ac8 <main+0x310>)
  accelStructBinarySemHandle = osSemaphoreNew(1, 1, &accelStructBinarySem_attributes);
 80019e8:	4a38      	ldr	r2, [pc, #224]	; (8001acc <main+0x314>)
  I2C_BinarySemHandle = osSemaphoreNew(1, 1, &I2C_BinarySem_attributes);
 80019ea:	6018      	str	r0, [r3, #0]
  accelStructBinarySemHandle = osSemaphoreNew(1, 1, &accelStructBinarySem_attributes);
 80019ec:	4629      	mov	r1, r5
 80019ee:	4628      	mov	r0, r5
 80019f0:	f003 ff20 	bl	8005834 <osSemaphoreNew>
 80019f4:	4b36      	ldr	r3, [pc, #216]	; (8001ad0 <main+0x318>)
  buzzerQueueHandle = osMessageQueueNew (2, sizeof(buzzerStruct), &buzzerQueue_attributes);
 80019f6:	4a37      	ldr	r2, [pc, #220]	; (8001ad4 <main+0x31c>)
  accelStructBinarySemHandle = osSemaphoreNew(1, 1, &accelStructBinarySem_attributes);
 80019f8:	6018      	str	r0, [r3, #0]
  buzzerQueueHandle = osMessageQueueNew (2, sizeof(buzzerStruct), &buzzerQueue_attributes);
 80019fa:	2106      	movs	r1, #6
 80019fc:	4640      	mov	r0, r8
 80019fe:	f003 ffe9 	bl	80059d4 <osMessageQueueNew>
 8001a02:	4b35      	ldr	r3, [pc, #212]	; (8001ad8 <main+0x320>)
  dysplayQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &dysplayQueue_attributes);
 8001a04:	4a35      	ldr	r2, [pc, #212]	; (8001adc <main+0x324>)
  buzzerQueueHandle = osMessageQueueNew (2, sizeof(buzzerStruct), &buzzerQueue_attributes);
 8001a06:	6018      	str	r0, [r3, #0]
  dysplayQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &dysplayQueue_attributes);
 8001a08:	4641      	mov	r1, r8
 8001a0a:	2010      	movs	r0, #16
 8001a0c:	f003 ffe2 	bl	80059d4 <osMessageQueueNew>
 8001a10:	4b33      	ldr	r3, [pc, #204]	; (8001ae0 <main+0x328>)
  keyboardQueueHandle = osMessageQueueNew (1, sizeof(buttonStruct), &keyboardQueue_attributes);
 8001a12:	4a34      	ldr	r2, [pc, #208]	; (8001ae4 <main+0x32c>)
  dysplayQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &dysplayQueue_attributes);
 8001a14:	6018      	str	r0, [r3, #0]
  keyboardQueueHandle = osMessageQueueNew (1, sizeof(buttonStruct), &keyboardQueue_attributes);
 8001a16:	4641      	mov	r1, r8
 8001a18:	4628      	mov	r0, r5
 8001a1a:	f003 ffdb 	bl	80059d4 <osMessageQueueNew>
 8001a1e:	4b32      	ldr	r3, [pc, #200]	; (8001ae8 <main+0x330>)
  GPS_UARTQueueHandle = osMessageQueueNew (64, sizeof(uint8_t), &GPS_UARTQueue_attributes);
 8001a20:	4a32      	ldr	r2, [pc, #200]	; (8001aec <main+0x334>)
  keyboardQueueHandle = osMessageQueueNew (1, sizeof(buttonStruct), &keyboardQueue_attributes);
 8001a22:	6018      	str	r0, [r3, #0]
  GPS_UARTQueueHandle = osMessageQueueNew (64, sizeof(uint8_t), &GPS_UARTQueue_attributes);
 8001a24:	4629      	mov	r1, r5
 8001a26:	4648      	mov	r0, r9
 8001a28:	f003 ffd4 	bl	80059d4 <osMessageQueueNew>
 8001a2c:	4b30      	ldr	r3, [pc, #192]	; (8001af0 <main+0x338>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001a2e:	4a31      	ldr	r2, [pc, #196]	; (8001af4 <main+0x33c>)
  GPS_UARTQueueHandle = osMessageQueueNew (64, sizeof(uint8_t), &GPS_UARTQueue_attributes);
 8001a30:	6018      	str	r0, [r3, #0]
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001a32:	4621      	mov	r1, r4
 8001a34:	4830      	ldr	r0, [pc, #192]	; (8001af8 <main+0x340>)
 8001a36:	f003 fe85 	bl	8005744 <osThreadNew>
 8001a3a:	4b30      	ldr	r3, [pc, #192]	; (8001afc <main+0x344>)
  buzzerTaskHandle = osThreadNew(StartBuzzerTask, NULL, &buzzerTask_attributes);
 8001a3c:	4a30      	ldr	r2, [pc, #192]	; (8001b00 <main+0x348>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001a3e:	6018      	str	r0, [r3, #0]
  buzzerTaskHandle = osThreadNew(StartBuzzerTask, NULL, &buzzerTask_attributes);
 8001a40:	4621      	mov	r1, r4
 8001a42:	4830      	ldr	r0, [pc, #192]	; (8001b04 <main+0x34c>)
 8001a44:	f003 fe7e 	bl	8005744 <osThreadNew>
 8001a48:	4b2f      	ldr	r3, [pc, #188]	; (8001b08 <main+0x350>)
  keyboardTaskHandle = osThreadNew(StartKeyboardTask, NULL, &keyboardTask_attributes);
 8001a4a:	4a30      	ldr	r2, [pc, #192]	; (8001b0c <main+0x354>)
  buzzerTaskHandle = osThreadNew(StartBuzzerTask, NULL, &buzzerTask_attributes);
 8001a4c:	6018      	str	r0, [r3, #0]
  keyboardTaskHandle = osThreadNew(StartKeyboardTask, NULL, &keyboardTask_attributes);
 8001a4e:	4621      	mov	r1, r4
 8001a50:	482f      	ldr	r0, [pc, #188]	; (8001b10 <main+0x358>)
 8001a52:	f003 fe77 	bl	8005744 <osThreadNew>
 8001a56:	4b2f      	ldr	r3, [pc, #188]	; (8001b14 <main+0x35c>)
  dysplayTaskHandle = osThreadNew(StartDysplayTask, NULL, &dysplayTask_attributes);
 8001a58:	4a2f      	ldr	r2, [pc, #188]	; (8001b18 <main+0x360>)
  keyboardTaskHandle = osThreadNew(StartKeyboardTask, NULL, &keyboardTask_attributes);
 8001a5a:	6018      	str	r0, [r3, #0]
  dysplayTaskHandle = osThreadNew(StartDysplayTask, NULL, &dysplayTask_attributes);
 8001a5c:	4621      	mov	r1, r4
 8001a5e:	482f      	ldr	r0, [pc, #188]	; (8001b1c <main+0x364>)
 8001a60:	f003 fe70 	bl	8005744 <osThreadNew>
 8001a64:	4b2e      	ldr	r3, [pc, #184]	; (8001b20 <main+0x368>)
  accelTaskHandle = osThreadNew(StartAccelTask, NULL, &accelTask_attributes);
 8001a66:	4a2f      	ldr	r2, [pc, #188]	; (8001b24 <main+0x36c>)
  dysplayTaskHandle = osThreadNew(StartDysplayTask, NULL, &dysplayTask_attributes);
 8001a68:	6018      	str	r0, [r3, #0]
  accelTaskHandle = osThreadNew(StartAccelTask, NULL, &accelTask_attributes);
 8001a6a:	4621      	mov	r1, r4
 8001a6c:	482e      	ldr	r0, [pc, #184]	; (8001b28 <main+0x370>)
 8001a6e:	f003 fe69 	bl	8005744 <osThreadNew>
 8001a72:	4b2e      	ldr	r3, [pc, #184]	; (8001b2c <main+0x374>)
  gpsNMEA_ParserTHandle = osThreadNew(StartgpsNMEA_ParserTask, NULL, &gpsNMEA_ParserT_attributes);
 8001a74:	4a2e      	ldr	r2, [pc, #184]	; (8001b30 <main+0x378>)
  accelTaskHandle = osThreadNew(StartAccelTask, NULL, &accelTask_attributes);
 8001a76:	6018      	str	r0, [r3, #0]
  gpsNMEA_ParserTHandle = osThreadNew(StartgpsNMEA_ParserTask, NULL, &gpsNMEA_ParserT_attributes);
 8001a78:	4621      	mov	r1, r4
 8001a7a:	482e      	ldr	r0, [pc, #184]	; (8001b34 <main+0x37c>)
 8001a7c:	f003 fe62 	bl	8005744 <osThreadNew>
 8001a80:	4b2d      	ldr	r3, [pc, #180]	; (8001b38 <main+0x380>)
 8001a82:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8001a84:	f003 fe3e 	bl	8005704 <osKernelStart>
 8001a88:	e7fe      	b.n	8001a88 <main+0x2d0>
 8001a8a:	bf00      	nop
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	40010800 	.word	0x40010800
 8001a94:	40010c00 	.word	0x40010c00
 8001a98:	20002bfc 	.word	0x20002bfc
 8001a9c:	40003800 	.word	0x40003800
 8001aa0:	20002cfc 	.word	0x20002cfc
 8001aa4:	20002ddc 	.word	0x20002ddc
 8001aa8:	20002c58 	.word	0x20002c58
 8001aac:	40004800 	.word	0x40004800
 8001ab0:	20002c98 	.word	0x20002c98
 8001ab4:	40005400 	.word	0x40005400
 8001ab8:	00061a80 	.word	0x00061a80
 8001abc:	20002d94 	.word	0x20002d94
 8001ac0:	20002d40 	.word	0x20002d40
 8001ac4:	0800b288 	.word	0x0800b288
 8001ac8:	20002dd4 	.word	0x20002dd4
 8001acc:	0800b2c8 	.word	0x0800b2c8
 8001ad0:	20002dd8 	.word	0x20002dd8
 8001ad4:	0800b2fc 	.word	0x0800b2fc
 8001ad8:	20002cec 	.word	0x20002cec
 8001adc:	0800b35c 	.word	0x0800b35c
 8001ae0:	20002cf0 	.word	0x20002cf0
 8001ae4:	0800b3bc 	.word	0x0800b3bc
 8001ae8:	20002cf8 	.word	0x20002cf8
 8001aec:	0800b270 	.word	0x0800b270
 8001af0:	20002c54 	.word	0x20002c54
 8001af4:	0800b338 	.word	0x0800b338
 8001af8:	08001311 	.word	0x08001311
 8001afc:	20002bf8 	.word	0x20002bf8
 8001b00:	0800b314 	.word	0x0800b314
 8001b04:	080013b5 	.word	0x080013b5
 8001b08:	20002d88 	.word	0x20002d88
 8001b0c:	0800b3d4 	.word	0x0800b3d4
 8001b10:	080013f1 	.word	0x080013f1
 8001b14:	20002d90 	.word	0x20002d90
 8001b18:	0800b374 	.word	0x0800b374
 8001b1c:	0800159d 	.word	0x0800159d
 8001b20:	20002d3c 	.word	0x20002d3c
 8001b24:	0800b2d8 	.word	0x0800b2d8
 8001b28:	080016fd 	.word	0x080016fd
 8001b2c:	20002cf4 	.word	0x20002cf4
 8001b30:	0800b398 	.word	0x0800b398
 8001b34:	080012f1 	.word	0x080012f1
 8001b38:	20002d8c 	.word	0x20002d8c
 8001b3c:	40013800 	.word	0x40013800

08001b40 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b40:	4770      	bx	lr
	...

08001b44 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8001b44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8001b46:	2301      	movs	r3, #1
 8001b48:	210a      	movs	r1, #10
{
 8001b4a:	aa06      	add	r2, sp, #24
 8001b4c:	f802 0d01 	strb.w	r0, [r2, #-1]!
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8001b50:	9200      	str	r2, [sp, #0]
 8001b52:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	2178      	movs	r1, #120	; 0x78
 8001b5a:	4803      	ldr	r0, [pc, #12]	; (8001b68 <ssd1306_WriteCommand+0x24>)
 8001b5c:	f001 f946 	bl	8002dec <HAL_I2C_Mem_Write>

}
 8001b60:	b007      	add	sp, #28
 8001b62:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b66:	bf00      	nop
 8001b68:	20002c98 	.word	0x20002c98

08001b6c <ssd1306_Fill>:
void ssd1306_Fill(SSD1306_COLOR color)
{
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001b6c:	2300      	movs	r3, #0
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001b6e:	4905      	ldr	r1, [pc, #20]	; (8001b84 <ssd1306_Fill+0x18>)
 8001b70:	1c02      	adds	r2, r0, #0
 8001b72:	bf18      	it	ne
 8001b74:	2201      	movne	r2, #1
 8001b76:	4252      	negs	r2, r2
 8001b78:	545a      	strb	r2, [r3, r1]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 8001b80:	d1f6      	bne.n	8001b70 <ssd1306_Fill+0x4>
	}
}
 8001b82:	4770      	bx	lr
 8001b84:	2000039a 	.word	0x2000039a

08001b88 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 8001b88:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8001b8a:	2400      	movs	r4, #0
	for (i = 0; i < 8; i++) {
		ssd1306_WriteCommand(0xB0 + i);
		ssd1306_WriteCommand(0x00);
		ssd1306_WriteCommand(0x10);

		HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100);
 8001b8c:	4e0f      	ldr	r6, [pc, #60]	; (8001bcc <ssd1306_UpdateScreen+0x44>)
 8001b8e:	4d10      	ldr	r5, [pc, #64]	; (8001bd0 <ssd1306_UpdateScreen+0x48>)
		ssd1306_WriteCommand(0xB0 + i);
 8001b90:	f1a4 0050 	sub.w	r0, r4, #80	; 0x50
 8001b94:	b2c0      	uxtb	r0, r0
 8001b96:	f7ff ffd5 	bl	8001b44 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8001b9a:	2000      	movs	r0, #0
 8001b9c:	f7ff ffd2 	bl	8001b44 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 8001ba0:	2010      	movs	r0, #16
 8001ba2:	f7ff ffcf 	bl	8001b44 <ssd1306_WriteCommand>
		HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100);
 8001ba6:	2382      	movs	r3, #130	; 0x82
 8001ba8:	2264      	movs	r2, #100	; 0x64
 8001baa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001bae:	fb03 6304 	mla	r3, r3, r4, r6
 8001bb2:	2240      	movs	r2, #64	; 0x40
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	2178      	movs	r1, #120	; 0x78
 8001bb8:	2301      	movs	r3, #1
 8001bba:	4628      	mov	r0, r5
 8001bbc:	3401      	adds	r4, #1
 8001bbe:	f001 f915 	bl	8002dec <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8001bc2:	2c08      	cmp	r4, #8
 8001bc4:	d1e4      	bne.n	8001b90 <ssd1306_UpdateScreen+0x8>

	}
}
 8001bc6:	b004      	add	sp, #16
 8001bc8:	bd70      	pop	{r4, r5, r6, pc}
 8001bca:	bf00      	nop
 8001bcc:	2000039a 	.word	0x2000039a
 8001bd0:	20002c98 	.word	0x20002c98

08001bd4 <ssd1306_Init>:
{
 8001bd4:	b508      	push	{r3, lr}
	HAL_Delay(100);
 8001bd6:	2064      	movs	r0, #100	; 0x64
 8001bd8:	f000 fb20 	bl	800221c <HAL_Delay>
	ssd1306_WriteCommand(0xAE); //display off
 8001bdc:	20ae      	movs	r0, #174	; 0xae
 8001bde:	f7ff ffb1 	bl	8001b44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001be2:	2020      	movs	r0, #32
 8001be4:	f7ff ffae 	bl	8001b44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001be8:	2010      	movs	r0, #16
 8001bea:	f7ff ffab 	bl	8001b44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001bee:	20b0      	movs	r0, #176	; 0xb0
 8001bf0:	f7ff ffa8 	bl	8001b44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001bf4:	20c8      	movs	r0, #200	; 0xc8
 8001bf6:	f7ff ffa5 	bl	8001b44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	f7ff ffa2 	bl	8001b44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 8001c00:	2010      	movs	r0, #16
 8001c02:	f7ff ff9f 	bl	8001b44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8001c06:	2040      	movs	r0, #64	; 0x40
 8001c08:	f7ff ff9c 	bl	8001b44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 8001c0c:	2081      	movs	r0, #129	; 0x81
 8001c0e:	f7ff ff99 	bl	8001b44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 8001c12:	20ff      	movs	r0, #255	; 0xff
 8001c14:	f7ff ff96 	bl	8001b44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 8001c18:	20a1      	movs	r0, #161	; 0xa1
 8001c1a:	f7ff ff93 	bl	8001b44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 8001c1e:	20a6      	movs	r0, #166	; 0xa6
 8001c20:	f7ff ff90 	bl	8001b44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8001c24:	20a8      	movs	r0, #168	; 0xa8
 8001c26:	f7ff ff8d 	bl	8001b44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 8001c2a:	203f      	movs	r0, #63	; 0x3f
 8001c2c:	f7ff ff8a 	bl	8001b44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001c30:	20a4      	movs	r0, #164	; 0xa4
 8001c32:	f7ff ff87 	bl	8001b44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8001c36:	20d3      	movs	r0, #211	; 0xd3
 8001c38:	f7ff ff84 	bl	8001b44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	f7ff ff81 	bl	8001b44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001c42:	20d5      	movs	r0, #213	; 0xd5
 8001c44:	f7ff ff7e 	bl	8001b44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001c48:	20f0      	movs	r0, #240	; 0xf0
 8001c4a:	f7ff ff7b 	bl	8001b44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001c4e:	20d9      	movs	r0, #217	; 0xd9
 8001c50:	f7ff ff78 	bl	8001b44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8001c54:	2022      	movs	r0, #34	; 0x22
 8001c56:	f7ff ff75 	bl	8001b44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8001c5a:	20da      	movs	r0, #218	; 0xda
 8001c5c:	f7ff ff72 	bl	8001b44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 8001c60:	2012      	movs	r0, #18
 8001c62:	f7ff ff6f 	bl	8001b44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8001c66:	20db      	movs	r0, #219	; 0xdb
 8001c68:	f7ff ff6c 	bl	8001b44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001c6c:	2020      	movs	r0, #32
 8001c6e:	f7ff ff69 	bl	8001b44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001c72:	208d      	movs	r0, #141	; 0x8d
 8001c74:	f7ff ff66 	bl	8001b44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8001c78:	2014      	movs	r0, #20
 8001c7a:	f7ff ff63 	bl	8001b44 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8001c7e:	20af      	movs	r0, #175	; 0xaf
 8001c80:	f7ff ff60 	bl	8001b44 <ssd1306_WriteCommand>
	ssd1306_Fill(Black);
 8001c84:	2000      	movs	r0, #0
 8001c86:	f7ff ff71 	bl	8001b6c <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8001c8a:	f7ff ff7d 	bl	8001b88 <ssd1306_UpdateScreen>
	SSD1306.Initialized = 1;
 8001c8e:	2001      	movs	r0, #1
	SSD1306.CurrentX = 0;
 8001c90:	2200      	movs	r2, #0
 8001c92:	4b02      	ldr	r3, [pc, #8]	; (8001c9c <ssd1306_Init+0xc8>)
	SSD1306.Initialized = 1;
 8001c94:	7158      	strb	r0, [r3, #5]
	SSD1306.CurrentX = 0;
 8001c96:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001c98:	805a      	strh	r2, [r3, #2]
}
 8001c9a:	bd08      	pop	{r3, pc}
 8001c9c:	20000394 	.word	0x20000394

08001ca0 <ssd1306_DrawPixel>:
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8001ca0:	2881      	cmp	r0, #129	; 0x81
{
 8001ca2:	b530      	push	{r4, r5, lr}
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8001ca4:	d817      	bhi.n	8001cd6 <ssd1306_DrawPixel+0x36>
 8001ca6:	293f      	cmp	r1, #63	; 0x3f
 8001ca8:	d815      	bhi.n	8001cd6 <ssd1306_DrawPixel+0x36>
		// Don't write outside the buffer
		return;
	}

	// Check if pixel should be inverted
	if (SSD1306.Inverted)
 8001caa:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <ssd1306_DrawPixel+0x38>)
 8001cac:	791b      	ldrb	r3, [r3, #4]
 8001cae:	b113      	cbz	r3, 8001cb6 <ssd1306_DrawPixel+0x16>
	{
		color = (SSD1306_COLOR)!color;
 8001cb0:	fab2 f282 	clz	r2, r2
 8001cb4:	0952      	lsrs	r2, r2, #5
 8001cb6:	2382      	movs	r3, #130	; 0x82
 8001cb8:	08cc      	lsrs	r4, r1, #3
 8001cba:	fb03 0004 	mla	r0, r3, r4, r0
 8001cbe:	f001 0407 	and.w	r4, r1, #7
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	4d05      	ldr	r5, [pc, #20]	; (8001cdc <ssd1306_DrawPixel+0x3c>)
 8001cc6:	40a1      	lsls	r1, r4
 8001cc8:	562b      	ldrsb	r3, [r5, r0]
 8001cca:	b249      	sxtb	r1, r1
	}

	// Draw in the right color
	if (color == White)
 8001ccc:	2a01      	cmp	r2, #1
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001cce:	bf0c      	ite	eq
 8001cd0:	430b      	orreq	r3, r1
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001cd2:	438b      	bicne	r3, r1
 8001cd4:	542b      	strb	r3, [r5, r0]
	}
}
 8001cd6:	bd30      	pop	{r4, r5, pc}
 8001cd8:	20000394 	.word	0x20000394
 8001cdc:	2000039a 	.word	0x2000039a

08001ce0 <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8001ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ce4:	b087      	sub	sp, #28
 8001ce6:	4607      	mov	r7, r0
 8001ce8:	a806      	add	r0, sp, #24
 8001cea:	e900 0006 	stmdb	r0, {r1, r2}
 8001cee:	469b      	mov	fp, r3
	uint32_t i, b, j;

	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001cf0:	4b21      	ldr	r3, [pc, #132]	; (8001d78 <ssd1306_WriteChar+0x98>)
 8001cf2:	f89d 9010 	ldrb.w	r9, [sp, #16]
 8001cf6:	881c      	ldrh	r4, [r3, #0]
 8001cf8:	9301      	str	r3, [sp, #4]
 8001cfa:	eb04 0209 	add.w	r2, r4, r9
 8001cfe:	2a81      	cmp	r2, #129	; 0x81
 8001d00:	dc37      	bgt.n	8001d72 <ssd1306_WriteChar+0x92>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8001d02:	885b      	ldrh	r3, [r3, #2]
 8001d04:	f89d a011 	ldrb.w	sl, [sp, #17]
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	eb03 020a 	add.w	r2, r3, sl
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001d0e:	2a3f      	cmp	r2, #63	; 0x3f
 8001d10:	dc2f      	bgt.n	8001d72 <ssd1306_WriteChar+0x92>
		// Not enough space on current line
		return 0;
	}

	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 8001d12:	2500      	movs	r5, #0
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001d14:	f1a7 0220 	sub.w	r2, r7, #32
 8001d18:	fb0a f302 	mul.w	r3, sl, r2
 8001d1c:	9302      	str	r3, [sp, #8]
	for (i = 0; i < Font.FontHeight; i++)
 8001d1e:	45aa      	cmp	sl, r5
 8001d20:	d806      	bhi.n	8001d30 <ssd1306_WriteChar+0x50>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 8001d22:	9b01      	ldr	r3, [sp, #4]
 8001d24:	444c      	add	r4, r9
 8001d26:	801c      	strh	r4, [r3, #0]

	// Return written char for validation
	return ch;
}
 8001d28:	4638      	mov	r0, r7
 8001d2a:	b007      	add	sp, #28
 8001d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (j = 0; j < Font.FontWidth; j++)
 8001d30:	2600      	movs	r6, #0
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001d32:	9b02      	ldr	r3, [sp, #8]
 8001d34:	9905      	ldr	r1, [sp, #20]
 8001d36:	195a      	adds	r2, r3, r5
 8001d38:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 8001d3c:	9303      	str	r3, [sp, #12]
 8001d3e:	9b00      	ldr	r3, [sp, #0]
 8001d40:	eb05 0803 	add.w	r8, r5, r3
 8001d44:	fa5f f888 	uxtb.w	r8, r8
		for (j = 0; j < Font.FontWidth; j++)
 8001d48:	45b1      	cmp	r9, r6
 8001d4a:	d801      	bhi.n	8001d50 <ssd1306_WriteChar+0x70>
	for (i = 0; i < Font.FontHeight; i++)
 8001d4c:	3501      	adds	r5, #1
 8001d4e:	e7e6      	b.n	8001d1e <ssd1306_WriteChar+0x3e>
			if ((b << j) & 0x8000)
 8001d50:	9b03      	ldr	r3, [sp, #12]
 8001d52:	1930      	adds	r0, r6, r4
 8001d54:	fa03 f206 	lsl.w	r2, r3, r6
 8001d58:	0413      	lsls	r3, r2, #16
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001d5a:	bf58      	it	pl
 8001d5c:	fabb f28b 	clzpl	r2, fp
 8001d60:	b2c0      	uxtb	r0, r0
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001d62:	bf4c      	ite	mi
 8001d64:	465a      	movmi	r2, fp
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001d66:	0952      	lsrpl	r2, r2, #5
 8001d68:	4641      	mov	r1, r8
 8001d6a:	f7ff ff99 	bl	8001ca0 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 8001d6e:	3601      	adds	r6, #1
 8001d70:	e7ea      	b.n	8001d48 <ssd1306_WriteChar+0x68>
		return 0;
 8001d72:	2700      	movs	r7, #0
 8001d74:	e7d8      	b.n	8001d28 <ssd1306_WriteChar+0x48>
 8001d76:	bf00      	nop
 8001d78:	20000394 	.word	0x20000394

08001d7c <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8001d7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001d7e:	466d      	mov	r5, sp
 8001d80:	461f      	mov	r7, r3
 8001d82:	e885 0006 	stmia.w	r5, {r1, r2}
 8001d86:	1e46      	subs	r6, r0, #1
	// Write until null-byte
	while (*str)
 8001d88:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 8001d8c:	b144      	cbz	r4, 8001da0 <ssd1306_WriteString+0x24>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 8001d8e:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001d92:	4620      	mov	r0, r4
 8001d94:	463b      	mov	r3, r7
 8001d96:	f7ff ffa3 	bl	8001ce0 <ssd1306_WriteChar>
 8001d9a:	7834      	ldrb	r4, [r6, #0]
 8001d9c:	42a0      	cmp	r0, r4
 8001d9e:	d0f3      	beq.n	8001d88 <ssd1306_WriteString+0xc>
		str++;
	}

	// Everything ok
	return *str;
}
 8001da0:	4620      	mov	r0, r4
 8001da2:	b003      	add	sp, #12
 8001da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001da8 <ssd1306_SetCursor>:
//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
	SSD1306.CurrentX = x;
 8001da8:	4b01      	ldr	r3, [pc, #4]	; (8001db0 <ssd1306_SetCursor+0x8>)
 8001daa:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8001dac:	8059      	strh	r1, [r3, #2]
}
 8001dae:	4770      	bx	lr
 8001db0:	20000394 	.word	0x20000394

08001db4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001db4:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <HAL_MspInit+0x48>)
{
 8001db6:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001db8:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001dba:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001dbc:	f042 0201 	orr.w	r2, r2, #1
 8001dc0:	619a      	str	r2, [r3, #24]
 8001dc2:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001dc4:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001dc8:	f002 0201 	and.w	r2, r2, #1
 8001dcc:	9200      	str	r2, [sp, #0]
 8001dce:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dd0:	69da      	ldr	r2, [r3, #28]
 8001dd2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001dd6:	61da      	str	r2, [r3, #28]
 8001dd8:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001dda:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de0:	9301      	str	r3, [sp, #4]
 8001de2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001de4:	f000 fa3e 	bl	8002264 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001de8:	4a05      	ldr	r2, [pc, #20]	; (8001e00 <HAL_MspInit+0x4c>)
 8001dea:	6853      	ldr	r3, [r2, #4]
 8001dec:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001df0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001df4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001df6:	b003      	add	sp, #12
 8001df8:	f85d fb04 	ldr.w	pc, [sp], #4
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40010000 	.word	0x40010000

08001e04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e04:	b510      	push	{r4, lr}
 8001e06:	4604      	mov	r4, r0
 8001e08:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0a:	2210      	movs	r2, #16
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	a802      	add	r0, sp, #8
 8001e10:	f005 ff85 	bl	8007d1e <memset>
  if(hi2c->Instance==I2C1)
 8001e14:	6822      	ldr	r2, [r4, #0]
 8001e16:	4b15      	ldr	r3, [pc, #84]	; (8001e6c <HAL_I2C_MspInit+0x68>)
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d124      	bne.n	8001e66 <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1c:	4c14      	ldr	r4, [pc, #80]	; (8001e70 <HAL_I2C_MspInit+0x6c>)
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e1e:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e22:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e24:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e26:	f043 0308 	orr.w	r3, r3, #8
 8001e2a:	61a3      	str	r3, [r4, #24]
 8001e2c:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e2e:	4811      	ldr	r0, [pc, #68]	; (8001e74 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e30:	f003 0308 	and.w	r3, r3, #8
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e38:	2312      	movs	r3, #18
 8001e3a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e42:	f000 faaf 	bl	80023a4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001e46:	4a0c      	ldr	r2, [pc, #48]	; (8001e78 <HAL_I2C_MspInit+0x74>)
 8001e48:	6853      	ldr	r3, [r2, #4]
 8001e4a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001e4e:	f043 0302 	orr.w	r3, r3, #2
 8001e52:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e54:	69e3      	ldr	r3, [r4, #28]
 8001e56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e5a:	61e3      	str	r3, [r4, #28]
 8001e5c:	69e3      	ldr	r3, [r4, #28]
 8001e5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e62:	9301      	str	r3, [sp, #4]
 8001e64:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e66:	b006      	add	sp, #24
 8001e68:	bd10      	pop	{r4, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40005400 	.word	0x40005400
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40010c00 	.word	0x40010c00
 8001e78:	40010000 	.word	0x40010000

08001e7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e7c:	b510      	push	{r4, lr}
 8001e7e:	4604      	mov	r4, r0
 8001e80:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e82:	2210      	movs	r2, #16
 8001e84:	2100      	movs	r1, #0
 8001e86:	a802      	add	r0, sp, #8
 8001e88:	f005 ff49 	bl	8007d1e <memset>
  if(hspi->Instance==SPI2)
 8001e8c:	6822      	ldr	r2, [r4, #0]
 8001e8e:	4b17      	ldr	r3, [pc, #92]	; (8001eec <HAL_SPI_MspInit+0x70>)
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d128      	bne.n	8001ee6 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e94:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 8001e98:	69da      	ldr	r2, [r3, #28]
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9a:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ea0:	61da      	str	r2, [r3, #28]
 8001ea2:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea4:	4812      	ldr	r0, [pc, #72]	; (8001ef0 <HAL_SPI_MspInit+0x74>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ea6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001eaa:	9200      	str	r2, [sp, #0]
 8001eac:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eae:	699a      	ldr	r2, [r3, #24]
 8001eb0:	f042 0208 	orr.w	r2, r2, #8
 8001eb4:	619a      	str	r2, [r3, #24]
 8001eb6:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb8:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ebc:	f003 0308 	and.w	r3, r3, #8
 8001ec0:	9301      	str	r3, [sp, #4]
 8001ec2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ece:	f000 fa69 	bl	80023a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ed2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ed6:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed8:	4805      	ldr	r0, [pc, #20]	; (8001ef0 <HAL_SPI_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eda:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ede:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee2:	f000 fa5f 	bl	80023a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001ee6:	b006      	add	sp, #24
 8001ee8:	bd10      	pop	{r4, pc}
 8001eea:	bf00      	nop
 8001eec:	40003800 	.word	0x40003800
 8001ef0:	40010c00 	.word	0x40010c00

08001ef4 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM2)
 8001ef4:	6803      	ldr	r3, [r0, #0]
{
 8001ef6:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM2)
 8001ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001efc:	d10a      	bne.n	8001f14 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001efe:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001f02:	69da      	ldr	r2, [r3, #28]
 8001f04:	f042 0201 	orr.w	r2, r2, #1
 8001f08:	61da      	str	r2, [r3, #28]
 8001f0a:	69db      	ldr	r3, [r3, #28]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	9301      	str	r3, [sp, #4]
 8001f12:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f14:	b002      	add	sp, #8
 8001f16:	4770      	bx	lr

08001f18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f18:	b510      	push	{r4, lr}
 8001f1a:	4604      	mov	r4, r0
 8001f1c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1e:	2210      	movs	r2, #16
 8001f20:	2100      	movs	r1, #0
 8001f22:	a802      	add	r0, sp, #8
 8001f24:	f005 fefb 	bl	8007d1e <memset>
  if(htim->Instance==TIM2)
 8001f28:	6823      	ldr	r3, [r4, #0]
 8001f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f2e:	d113      	bne.n	8001f58 <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f30:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001f34:	699a      	ldr	r2, [r3, #24]
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001f36:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f38:	f042 0204 	orr.w	r2, r2, #4
 8001f3c:	619a      	str	r2, [r3, #24]
 8001f3e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f40:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f42:	f003 0304 	and.w	r3, r3, #4
 8001f46:	9301      	str	r3, [sp, #4]
 8001f48:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4a:	2302      	movs	r3, #2
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001f4c:	4803      	ldr	r0, [pc, #12]	; (8001f5c <HAL_TIM_MspPostInit+0x44>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f52:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001f54:	f000 fa26 	bl	80023a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001f58:	b006      	add	sp, #24
 8001f5a:	bd10      	pop	{r4, pc}
 8001f5c:	40010800 	.word	0x40010800

08001f60 <HAL_UART_MspInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f60:	2210      	movs	r2, #16
{
 8001f62:	b510      	push	{r4, lr}
 8001f64:	4604      	mov	r4, r0
 8001f66:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f68:	eb0d 0002 	add.w	r0, sp, r2
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	f005 fed6 	bl	8007d1e <memset>
  if(huart->Instance==USART1)
 8001f72:	6823      	ldr	r3, [r4, #0]
 8001f74:	4a30      	ldr	r2, [pc, #192]	; (8002038 <HAL_UART_MspInit+0xd8>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d131      	bne.n	8001fde <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f7a:	4b30      	ldr	r3, [pc, #192]	; (800203c <HAL_UART_MspInit+0xdc>)
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7c:	f44f 7000 	mov.w	r0, #512	; 0x200
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f80:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f82:	a904      	add	r1, sp, #16
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f88:	619a      	str	r2, [r3, #24]
 8001f8a:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f8c:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f8e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001f92:	9200      	str	r2, [sp, #0]
 8001f94:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f96:	699a      	ldr	r2, [r3, #24]
 8001f98:	f042 0204 	orr.w	r2, r2, #4
 8001f9c:	619a      	str	r2, [r3, #24]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	9301      	str	r3, [sp, #4]
 8001fa6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	e9cd 0304 	strd	r0, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fae:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb0:	4823      	ldr	r0, [pc, #140]	; (8002040 <HAL_UART_MspInit+0xe0>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fb2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb4:	f000 f9f6 	bl	80023a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fbc:	a904      	add	r1, sp, #16
 8001fbe:	4820      	ldr	r0, [pc, #128]	; (8002040 <HAL_UART_MspInit+0xe0>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fc0:	e9cd 3404 	strd	r3, r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc6:	f000 f9ed 	bl	80023a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001fca:	2025      	movs	r0, #37	; 0x25
 8001fcc:	4622      	mov	r2, r4
 8001fce:	2105      	movs	r1, #5
 8001fd0:	f000 f948 	bl	8002264 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001fd4:	2025      	movs	r0, #37	; 0x25
 8001fd6:	f000 f979 	bl	80022cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001fda:	b008      	add	sp, #32
 8001fdc:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 8001fde:	4a19      	ldr	r2, [pc, #100]	; (8002044 <HAL_UART_MspInit+0xe4>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d1fa      	bne.n	8001fda <HAL_UART_MspInit+0x7a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fe4:	4b15      	ldr	r3, [pc, #84]	; (800203c <HAL_UART_MspInit+0xdc>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe6:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fe8:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fea:	4817      	ldr	r0, [pc, #92]	; (8002048 <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fec:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001ff0:	61da      	str	r2, [r3, #28]
 8001ff2:	69da      	ldr	r2, [r3, #28]
 8001ff4:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001ff8:	9202      	str	r2, [sp, #8]
 8001ffa:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffc:	699a      	ldr	r2, [r3, #24]
 8001ffe:	f042 0208 	orr.w	r2, r2, #8
 8002002:	619a      	str	r2, [r3, #24]
 8002004:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002006:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	9303      	str	r3, [sp, #12]
 8002010:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002012:	2302      	movs	r3, #2
 8002014:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002018:	2303      	movs	r3, #3
 800201a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800201c:	f000 f9c2 	bl	80023a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002020:	2300      	movs	r3, #0
 8002022:	f44f 6100 	mov.w	r1, #2048	; 0x800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002026:	4808      	ldr	r0, [pc, #32]	; (8002048 <HAL_UART_MspInit+0xe8>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002028:	e9cd 1304 	strd	r1, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800202c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002030:	f000 f9b8 	bl	80023a4 <HAL_GPIO_Init>
}
 8002034:	e7d1      	b.n	8001fda <HAL_UART_MspInit+0x7a>
 8002036:	bf00      	nop
 8002038:	40013800 	.word	0x40013800
 800203c:	40021000 	.word	0x40021000
 8002040:	40010800 	.word	0x40010800
 8002044:	40004800 	.word	0x40004800
 8002048:	40010c00 	.word	0x40010c00

0800204c <NMI_Handler>:

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 800204c:	4770      	bx	lr

0800204e <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800204e:	e7fe      	b.n	800204e <HardFault_Handler>

08002050 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8002050:	e7fe      	b.n	8002050 <MemManage_Handler>

08002052 <BusFault_Handler>:

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8002052:	e7fe      	b.n	8002052 <BusFault_Handler>

08002054 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8002054:	e7fe      	b.n	8002054 <UsageFault_Handler>

08002056 <DebugMon_Handler>:
 8002056:	4770      	bx	lr

08002058 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8002058:	b508      	push	{r3, lr}
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 800205a:	f000 f8cd 	bl	80021f8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
	if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800205e:	f004 ff19 	bl	8006e94 <xTaskGetSchedulerState>
 8002062:	2801      	cmp	r0, #1
 8002064:	d003      	beq.n	800206e <SysTick_Handler+0x16>
	}
#endif /* INCLUDE_xTaskGetSchedulerState */
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8002066:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		xPortSysTickHandler();
 800206a:	f005 ba83 	b.w	8007574 <xPortSysTickHandler>
}
 800206e:	bd08      	pop	{r3, pc}

08002070 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
	/* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

	/* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
	HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002070:	4801      	ldr	r0, [pc, #4]	; (8002078 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8002072:	f001 b929 	b.w	80032c8 <HAL_PCD_IRQHandler>
 8002076:	bf00      	nop
 8002078:	20003f3c 	.word	0x20003f3c

0800207c <USART1_IRQHandler>:
{
	/* USER CODE BEGIN USART1_IRQn 0 */
	unsigned char tmp;


	if((USART1->SR & USART_SR_RXNE)!=0)
 800207c:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <USART1_IRQHandler+0x38>)
{
 800207e:	b507      	push	{r0, r1, r2, lr}
	if((USART1->SR & USART_SR_RXNE)!=0)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	0692      	lsls	r2, r2, #26
 8002084:	d50f      	bpl.n	80020a6 <USART1_IRQHandler+0x2a>
	{
		tmp = USART1->DR;                   //прочитать принятый байт
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	a902      	add	r1, sp, #8
 800208a:	f801 3d01 	strb.w	r3, [r1, #-1]!
		osMessageQueuePut(GPS_UARTQueueHandle, &tmp, 0U, 0U);
 800208e:	2300      	movs	r3, #0
 8002090:	4809      	ldr	r0, [pc, #36]	; (80020b8 <USART1_IRQHandler+0x3c>)
 8002092:	461a      	mov	r2, r3
 8002094:	6800      	ldr	r0, [r0, #0]
 8002096:	f003 fce5 	bl	8005a64 <osMessageQueuePut>
		HAL_UART_Receive_IT(&huart1, tmp, (uint8_t)1);
 800209a:	2201      	movs	r2, #1
 800209c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80020a0:	4806      	ldr	r0, [pc, #24]	; (80020bc <USART1_IRQHandler+0x40>)
 80020a2:	f002 f901 	bl	80042a8 <HAL_UART_Receive_IT>
	}
	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 80020a6:	4805      	ldr	r0, [pc, #20]	; (80020bc <USART1_IRQHandler+0x40>)
 80020a8:	f002 f964 	bl	8004374 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 80020ac:	b003      	add	sp, #12
 80020ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80020b2:	bf00      	nop
 80020b4:	40013800 	.word	0x40013800
 80020b8:	20002c54 	.word	0x20002c54
 80020bc:	20002cfc 	.word	0x20002cfc

080020c0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80020c0:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80020c2:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <_sbrk+0x2c>)
{
 80020c4:	4602      	mov	r2, r0
	if (heap_end == 0)
 80020c6:	6819      	ldr	r1, [r3, #0]
 80020c8:	b909      	cbnz	r1, 80020ce <_sbrk+0xe>
		heap_end = &end;
 80020ca:	4909      	ldr	r1, [pc, #36]	; (80020f0 <_sbrk+0x30>)
 80020cc:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80020ce:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 80020d0:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80020d2:	4402      	add	r2, r0
 80020d4:	428a      	cmp	r2, r1
 80020d6:	d906      	bls.n	80020e6 <_sbrk+0x26>
	{
		errno = ENOMEM;
 80020d8:	f005 fde4 	bl	8007ca4 <__errno>
 80020dc:	230c      	movs	r3, #12
 80020de:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80020e0:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 80020e4:	bd08      	pop	{r3, pc}
	heap_end += incr;
 80020e6:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 80020e8:	e7fc      	b.n	80020e4 <_sbrk+0x24>
 80020ea:	bf00      	nop
 80020ec:	200007ac 	.word	0x200007ac
 80020f0:	200041b0 	.word	0x200041b0

080020f4 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80020f4:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <SystemInit+0x40>)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	f042 0201 	orr.w	r2, r2, #1
 80020fc:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80020fe:	6859      	ldr	r1, [r3, #4]
 8002100:	4a0d      	ldr	r2, [pc, #52]	; (8002138 <SystemInit+0x44>)
 8002102:	400a      	ands	r2, r1
 8002104:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800210c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002110:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002118:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002120:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002122:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002126:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002128:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800212c:	4b03      	ldr	r3, [pc, #12]	; (800213c <SystemInit+0x48>)
 800212e:	609a      	str	r2, [r3, #8]
#endif 
}
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	40021000 	.word	0x40021000
 8002138:	f8ff0000 	.word	0xf8ff0000
 800213c:	e000ed00 	.word	0xe000ed00

08002140 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002140:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002142:	e003      	b.n	800214c <LoopCopyDataInit>

08002144 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002144:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002146:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002148:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800214a:	3104      	adds	r1, #4

0800214c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800214c:	480a      	ldr	r0, [pc, #40]	; (8002178 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800214e:	4b0b      	ldr	r3, [pc, #44]	; (800217c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002150:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002152:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002154:	d3f6      	bcc.n	8002144 <CopyDataInit>
  ldr r2, =_sbss
 8002156:	4a0a      	ldr	r2, [pc, #40]	; (8002180 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002158:	e002      	b.n	8002160 <LoopFillZerobss>

0800215a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800215a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800215c:	f842 3b04 	str.w	r3, [r2], #4

08002160 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002160:	4b08      	ldr	r3, [pc, #32]	; (8002184 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002162:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002164:	d3f9      	bcc.n	800215a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002166:	f7ff ffc5 	bl	80020f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800216a:	f005 fda1 	bl	8007cb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800216e:	f7ff fb23 	bl	80017b8 <main>
  bx lr
 8002172:	4770      	bx	lr
  ldr r3, =_sidata
 8002174:	0800b770 	.word	0x0800b770
  ldr r0, =_sdata
 8002178:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800217c:	20000378 	.word	0x20000378
  ldr r2, =_sbss
 8002180:	20000378 	.word	0x20000378
  ldr r3, = _ebss
 8002184:	200041ac 	.word	0x200041ac

08002188 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002188:	e7fe      	b.n	8002188 <ADC1_2_IRQHandler>
	...

0800218c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800218c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800218e:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <HAL_InitTick+0x3c>)
{
 8002190:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002192:	7818      	ldrb	r0, [r3, #0]
 8002194:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002198:	fbb3 f3f0 	udiv	r3, r3, r0
 800219c:	4a0b      	ldr	r2, [pc, #44]	; (80021cc <HAL_InitTick+0x40>)
 800219e:	6810      	ldr	r0, [r2, #0]
 80021a0:	fbb0 f0f3 	udiv	r0, r0, r3
 80021a4:	f000 f8a0 	bl	80022e8 <HAL_SYSTICK_Config>
 80021a8:	4604      	mov	r4, r0
 80021aa:	b958      	cbnz	r0, 80021c4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ac:	2d0f      	cmp	r5, #15
 80021ae:	d809      	bhi.n	80021c4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021b0:	4602      	mov	r2, r0
 80021b2:	4629      	mov	r1, r5
 80021b4:	f04f 30ff 	mov.w	r0, #4294967295
 80021b8:	f000 f854 	bl	8002264 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021bc:	4620      	mov	r0, r4
 80021be:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <HAL_InitTick+0x44>)
 80021c0:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80021c2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80021c4:	2001      	movs	r0, #1
 80021c6:	e7fc      	b.n	80021c2 <HAL_InitTick+0x36>
 80021c8:	20000014 	.word	0x20000014
 80021cc:	20000010 	.word	0x20000010
 80021d0:	20000018 	.word	0x20000018

080021d4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021d4:	4a07      	ldr	r2, [pc, #28]	; (80021f4 <HAL_Init+0x20>)
{
 80021d6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021d8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021da:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021dc:	f043 0310 	orr.w	r3, r3, #16
 80021e0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021e2:	f000 f82d 	bl	8002240 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80021e6:	200f      	movs	r0, #15
 80021e8:	f7ff ffd0 	bl	800218c <HAL_InitTick>
  HAL_MspInit();
 80021ec:	f7ff fde2 	bl	8001db4 <HAL_MspInit>
}
 80021f0:	2000      	movs	r0, #0
 80021f2:	bd08      	pop	{r3, pc}
 80021f4:	40022000 	.word	0x40022000

080021f8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80021f8:	4a03      	ldr	r2, [pc, #12]	; (8002208 <HAL_IncTick+0x10>)
 80021fa:	4b04      	ldr	r3, [pc, #16]	; (800220c <HAL_IncTick+0x14>)
 80021fc:	6811      	ldr	r1, [r2, #0]
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	440b      	add	r3, r1
 8002202:	6013      	str	r3, [r2, #0]
}
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	20002dfc 	.word	0x20002dfc
 800220c:	20000014 	.word	0x20000014

08002210 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002210:	4b01      	ldr	r3, [pc, #4]	; (8002218 <HAL_GetTick+0x8>)
 8002212:	6818      	ldr	r0, [r3, #0]
}
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	20002dfc 	.word	0x20002dfc

0800221c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800221c:	b538      	push	{r3, r4, r5, lr}
 800221e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002220:	f7ff fff6 	bl	8002210 <HAL_GetTick>
 8002224:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002226:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002228:	bf1e      	ittt	ne
 800222a:	4b04      	ldrne	r3, [pc, #16]	; (800223c <HAL_Delay+0x20>)
 800222c:	781b      	ldrbne	r3, [r3, #0]
 800222e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002230:	f7ff ffee 	bl	8002210 <HAL_GetTick>
 8002234:	1b40      	subs	r0, r0, r5
 8002236:	42a0      	cmp	r0, r4
 8002238:	d3fa      	bcc.n	8002230 <HAL_Delay+0x14>
  {
  }
}
 800223a:	bd38      	pop	{r3, r4, r5, pc}
 800223c:	20000014 	.word	0x20000014

08002240 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002240:	4a07      	ldr	r2, [pc, #28]	; (8002260 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002242:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002244:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002246:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800224a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800224e:	041b      	lsls	r3, r3, #16
 8002250:	0c1b      	lsrs	r3, r3, #16
 8002252:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002256:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800225a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800225c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800225e:	4770      	bx	lr
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002264:	4b17      	ldr	r3, [pc, #92]	; (80022c4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002266:	b570      	push	{r4, r5, r6, lr}
 8002268:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800226a:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800226e:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002272:	f1c4 0507 	rsb	r5, r4, #7
 8002276:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002278:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800227c:	bf28      	it	cs
 800227e:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002280:	2b06      	cmp	r3, #6
 8002282:	bf98      	it	ls
 8002284:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002286:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800228a:	bf88      	it	hi
 800228c:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800228e:	ea21 0303 	bic.w	r3, r1, r3
 8002292:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002294:	fa06 f404 	lsl.w	r4, r6, r4
 8002298:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 800229c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800229e:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a2:	bfa8      	it	ge
 80022a4:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 80022a8:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ac:	bfb8      	it	lt
 80022ae:	4a06      	ldrlt	r2, [pc, #24]	; (80022c8 <HAL_NVIC_SetPriority+0x64>)
 80022b0:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b2:	bfab      	itete	ge
 80022b4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022bc:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c0:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80022c2:	bd70      	pop	{r4, r5, r6, pc}
 80022c4:	e000ed00 	.word	0xe000ed00
 80022c8:	e000ed14 	.word	0xe000ed14

080022cc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80022cc:	2800      	cmp	r0, #0
 80022ce:	db08      	blt.n	80022e2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022d0:	2301      	movs	r3, #1
 80022d2:	0942      	lsrs	r2, r0, #5
 80022d4:	f000 001f 	and.w	r0, r0, #31
 80022d8:	fa03 f000 	lsl.w	r0, r3, r0
 80022dc:	4b01      	ldr	r3, [pc, #4]	; (80022e4 <HAL_NVIC_EnableIRQ+0x18>)
 80022de:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80022e2:	4770      	bx	lr
 80022e4:	e000e100 	.word	0xe000e100

080022e8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e8:	3801      	subs	r0, #1
 80022ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80022ee:	d20a      	bcs.n	8002306 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f0:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022f2:	4b06      	ldr	r3, [pc, #24]	; (800230c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f4:	4a06      	ldr	r2, [pc, #24]	; (8002310 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022f6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022fc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022fe:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002300:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002306:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	e000e010 	.word	0xe000e010
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002314:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8002318:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800231a:	2b02      	cmp	r3, #2
 800231c:	d003      	beq.n	8002326 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800231e:	2304      	movs	r3, #4
 8002320:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8002322:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8002324:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002326:	6803      	ldr	r3, [r0, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	f022 020e 	bic.w	r2, r2, #14
 800232e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	f022 0201 	bic.w	r2, r2, #1
 8002336:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002338:	4a18      	ldr	r2, [pc, #96]	; (800239c <HAL_DMA_Abort_IT+0x88>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d01f      	beq.n	800237e <HAL_DMA_Abort_IT+0x6a>
 800233e:	3214      	adds	r2, #20
 8002340:	4293      	cmp	r3, r2
 8002342:	d01e      	beq.n	8002382 <HAL_DMA_Abort_IT+0x6e>
 8002344:	3214      	adds	r2, #20
 8002346:	4293      	cmp	r3, r2
 8002348:	d01d      	beq.n	8002386 <HAL_DMA_Abort_IT+0x72>
 800234a:	3214      	adds	r2, #20
 800234c:	4293      	cmp	r3, r2
 800234e:	d01d      	beq.n	800238c <HAL_DMA_Abort_IT+0x78>
 8002350:	3214      	adds	r2, #20
 8002352:	4293      	cmp	r3, r2
 8002354:	d01d      	beq.n	8002392 <HAL_DMA_Abort_IT+0x7e>
 8002356:	3214      	adds	r2, #20
 8002358:	4293      	cmp	r3, r2
 800235a:	bf0c      	ite	eq
 800235c:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8002360:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8002364:	4a0e      	ldr	r2, [pc, #56]	; (80023a0 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 8002366:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002368:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800236a:	2301      	movs	r3, #1
 800236c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 8002370:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8002372:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002376:	b17b      	cbz	r3, 8002398 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 8002378:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800237a:	4620      	mov	r0, r4
 800237c:	e7d2      	b.n	8002324 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800237e:	2301      	movs	r3, #1
 8002380:	e7f0      	b.n	8002364 <HAL_DMA_Abort_IT+0x50>
 8002382:	2310      	movs	r3, #16
 8002384:	e7ee      	b.n	8002364 <HAL_DMA_Abort_IT+0x50>
 8002386:	f44f 7380 	mov.w	r3, #256	; 0x100
 800238a:	e7eb      	b.n	8002364 <HAL_DMA_Abort_IT+0x50>
 800238c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002390:	e7e8      	b.n	8002364 <HAL_DMA_Abort_IT+0x50>
 8002392:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002396:	e7e5      	b.n	8002364 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8002398:	4618      	mov	r0, r3
 800239a:	e7c3      	b.n	8002324 <HAL_DMA_Abort_IT+0x10>
 800239c:	40020008 	.word	0x40020008
 80023a0:	40020000 	.word	0x40020000

080023a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80023a8:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80023aa:	4626      	mov	r6, r4
 80023ac:	4b65      	ldr	r3, [pc, #404]	; (8002544 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023ae:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8002554 <HAL_GPIO_Init+0x1b0>
 80023b2:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8002558 <HAL_GPIO_Init+0x1b4>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023b6:	680a      	ldr	r2, [r1, #0]
 80023b8:	fa32 f506 	lsrs.w	r5, r2, r6
 80023bc:	d102      	bne.n	80023c4 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 80023be:	b003      	add	sp, #12
 80023c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80023c4:	f04f 0801 	mov.w	r8, #1
 80023c8:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023cc:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 80023d0:	4590      	cmp	r8, r2
 80023d2:	d17e      	bne.n	80024d2 <HAL_GPIO_Init+0x12e>
      switch (GPIO_Init->Mode)
 80023d4:	684d      	ldr	r5, [r1, #4]
 80023d6:	2d12      	cmp	r5, #18
 80023d8:	f000 80a9 	beq.w	800252e <HAL_GPIO_Init+0x18a>
 80023dc:	f200 8082 	bhi.w	80024e4 <HAL_GPIO_Init+0x140>
 80023e0:	2d02      	cmp	r5, #2
 80023e2:	f000 80a1 	beq.w	8002528 <HAL_GPIO_Init+0x184>
 80023e6:	d876      	bhi.n	80024d6 <HAL_GPIO_Init+0x132>
 80023e8:	2d00      	cmp	r5, #0
 80023ea:	f000 8088 	beq.w	80024fe <HAL_GPIO_Init+0x15a>
 80023ee:	2d01      	cmp	r5, #1
 80023f0:	f000 8098 	beq.w	8002524 <HAL_GPIO_Init+0x180>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023f4:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023f8:	2aff      	cmp	r2, #255	; 0xff
 80023fa:	bf93      	iteet	ls
 80023fc:	4682      	movls	sl, r0
 80023fe:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8002402:	3d08      	subhi	r5, #8
 8002404:	f8d0 b000 	ldrls.w	fp, [r0]
 8002408:	bf92      	itee	ls
 800240a:	00b5      	lslls	r5, r6, #2
 800240c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8002410:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002412:	fa09 f805 	lsl.w	r8, r9, r5
 8002416:	ea2b 0808 	bic.w	r8, fp, r8
 800241a:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800241e:	bf88      	it	hi
 8002420:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002424:	ea48 0505 	orr.w	r5, r8, r5
 8002428:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800242c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8002430:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8002434:	d04d      	beq.n	80024d2 <HAL_GPIO_Init+0x12e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002436:	4f44      	ldr	r7, [pc, #272]	; (8002548 <HAL_GPIO_Init+0x1a4>)
 8002438:	f026 0803 	bic.w	r8, r6, #3
 800243c:	69bd      	ldr	r5, [r7, #24]
 800243e:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8002442:	f045 0501 	orr.w	r5, r5, #1
 8002446:	61bd      	str	r5, [r7, #24]
 8002448:	69bd      	ldr	r5, [r7, #24]
 800244a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 800244e:	f005 0501 	and.w	r5, r5, #1
 8002452:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002454:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002458:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800245a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800245e:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002462:	fa09 f90b 	lsl.w	r9, r9, fp
 8002466:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800246a:	4d38      	ldr	r5, [pc, #224]	; (800254c <HAL_GPIO_Init+0x1a8>)
 800246c:	42a8      	cmp	r0, r5
 800246e:	d063      	beq.n	8002538 <HAL_GPIO_Init+0x194>
 8002470:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002474:	42a8      	cmp	r0, r5
 8002476:	d061      	beq.n	800253c <HAL_GPIO_Init+0x198>
 8002478:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800247c:	42a8      	cmp	r0, r5
 800247e:	d05f      	beq.n	8002540 <HAL_GPIO_Init+0x19c>
 8002480:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002484:	42a8      	cmp	r0, r5
 8002486:	bf0c      	ite	eq
 8002488:	2503      	moveq	r5, #3
 800248a:	2504      	movne	r5, #4
 800248c:	fa05 f50b 	lsl.w	r5, r5, fp
 8002490:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8002494:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8002498:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800249a:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800249e:	bf14      	ite	ne
 80024a0:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024a2:	4395      	biceq	r5, r2
 80024a4:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80024a6:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024a8:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80024ac:	bf14      	ite	ne
 80024ae:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024b0:	4395      	biceq	r5, r2
 80024b2:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80024b4:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024b6:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80024ba:	bf14      	ite	ne
 80024bc:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024be:	4395      	biceq	r5, r2
 80024c0:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80024c2:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024c4:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80024c8:	bf14      	ite	ne
 80024ca:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024cc:	ea25 0202 	biceq.w	r2, r5, r2
 80024d0:	60da      	str	r2, [r3, #12]
	position++;
 80024d2:	3601      	adds	r6, #1
 80024d4:	e76f      	b.n	80023b6 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 80024d6:	2d03      	cmp	r5, #3
 80024d8:	d022      	beq.n	8002520 <HAL_GPIO_Init+0x17c>
 80024da:	2d11      	cmp	r5, #17
 80024dc:	d18a      	bne.n	80023f4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80024de:	68cc      	ldr	r4, [r1, #12]
 80024e0:	3404      	adds	r4, #4
          break;
 80024e2:	e787      	b.n	80023f4 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80024e4:	4f1a      	ldr	r7, [pc, #104]	; (8002550 <HAL_GPIO_Init+0x1ac>)
 80024e6:	42bd      	cmp	r5, r7
 80024e8:	d009      	beq.n	80024fe <HAL_GPIO_Init+0x15a>
 80024ea:	d812      	bhi.n	8002512 <HAL_GPIO_Init+0x16e>
 80024ec:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800255c <HAL_GPIO_Init+0x1b8>
 80024f0:	454d      	cmp	r5, r9
 80024f2:	d004      	beq.n	80024fe <HAL_GPIO_Init+0x15a>
 80024f4:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80024f8:	454d      	cmp	r5, r9
 80024fa:	f47f af7b 	bne.w	80023f4 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80024fe:	688c      	ldr	r4, [r1, #8]
 8002500:	b1c4      	cbz	r4, 8002534 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002502:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8002504:	bf0c      	ite	eq
 8002506:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800250a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800250e:	2408      	movs	r4, #8
 8002510:	e770      	b.n	80023f4 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8002512:	4565      	cmp	r5, ip
 8002514:	d0f3      	beq.n	80024fe <HAL_GPIO_Init+0x15a>
 8002516:	4575      	cmp	r5, lr
 8002518:	d0f1      	beq.n	80024fe <HAL_GPIO_Init+0x15a>
 800251a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8002560 <HAL_GPIO_Init+0x1bc>
 800251e:	e7eb      	b.n	80024f8 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002520:	2400      	movs	r4, #0
 8002522:	e767      	b.n	80023f4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002524:	68cc      	ldr	r4, [r1, #12]
          break;
 8002526:	e765      	b.n	80023f4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002528:	68cc      	ldr	r4, [r1, #12]
 800252a:	3408      	adds	r4, #8
          break;
 800252c:	e762      	b.n	80023f4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800252e:	68cc      	ldr	r4, [r1, #12]
 8002530:	340c      	adds	r4, #12
          break;
 8002532:	e75f      	b.n	80023f4 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002534:	2404      	movs	r4, #4
 8002536:	e75d      	b.n	80023f4 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002538:	2500      	movs	r5, #0
 800253a:	e7a7      	b.n	800248c <HAL_GPIO_Init+0xe8>
 800253c:	2501      	movs	r5, #1
 800253e:	e7a5      	b.n	800248c <HAL_GPIO_Init+0xe8>
 8002540:	2502      	movs	r5, #2
 8002542:	e7a3      	b.n	800248c <HAL_GPIO_Init+0xe8>
 8002544:	40010400 	.word	0x40010400
 8002548:	40021000 	.word	0x40021000
 800254c:	40010800 	.word	0x40010800
 8002550:	10210000 	.word	0x10210000
 8002554:	10310000 	.word	0x10310000
 8002558:	10320000 	.word	0x10320000
 800255c:	10110000 	.word	0x10110000
 8002560:	10220000 	.word	0x10220000

08002564 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002564:	6883      	ldr	r3, [r0, #8]
 8002566:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002568:	bf14      	ite	ne
 800256a:	2001      	movne	r0, #1
 800256c:	2000      	moveq	r0, #0
 800256e:	4770      	bx	lr

08002570 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002570:	b10a      	cbz	r2, 8002576 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002572:	6101      	str	r1, [r0, #16]
  }
}
 8002574:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002576:	0409      	lsls	r1, r1, #16
 8002578:	e7fb      	b.n	8002572 <HAL_GPIO_WritePin+0x2>

0800257a <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800257a:	6801      	ldr	r1, [r0, #0]
 800257c:	2200      	movs	r2, #0
 800257e:	694b      	ldr	r3, [r1, #20]
 8002580:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8002584:	d010      	beq.n	80025a8 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002586:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800258a:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 800258c:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 800258e:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002590:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002594:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002598:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800259a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800259e:	f043 0304 	orr.w	r3, r3, #4
 80025a2:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 80025a4:	2001      	movs	r0, #1
 80025a6:	4770      	bx	lr
  }
  return HAL_OK;
 80025a8:	4618      	mov	r0, r3
}
 80025aa:	4770      	bx	lr

080025ac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80025ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025b0:	4604      	mov	r4, r0
 80025b2:	4616      	mov	r6, r2
 80025b4:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025b6:	b28f      	uxth	r7, r1
 80025b8:	6825      	ldr	r5, [r4, #0]
 80025ba:	6968      	ldr	r0, [r5, #20]
 80025bc:	ea37 0000 	bics.w	r0, r7, r0
 80025c0:	d017      	beq.n	80025f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025c2:	696b      	ldr	r3, [r5, #20]
 80025c4:	055a      	lsls	r2, r3, #21
 80025c6:	d516      	bpl.n	80025f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c8:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 80025ca:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025d0:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025d2:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80025d6:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80025d8:	2300      	movs	r3, #0
 80025da:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025dc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025e0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025e4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80025e6:	f042 0204 	orr.w	r2, r2, #4
        return HAL_ERROR;
 80025ea:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025ec:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80025ee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80025f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80025f6:	1c73      	adds	r3, r6, #1
 80025f8:	d0df      	beq.n	80025ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025fa:	f7ff fe09 	bl	8002210 <HAL_GetTick>
 80025fe:	eba0 0008 	sub.w	r0, r0, r8
 8002602:	42b0      	cmp	r0, r6
 8002604:	d801      	bhi.n	800260a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>
 8002606:	2e00      	cmp	r6, #0
 8002608:	d1d6      	bne.n	80025b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800260a:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800260c:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800260e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002610:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002614:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002618:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800261a:	f042 0220 	orr.w	r2, r2, #32
 800261e:	e7e4      	b.n	80025ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>

08002620 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8002620:	b570      	push	{r4, r5, r6, lr}
 8002622:	4604      	mov	r4, r0
 8002624:	460d      	mov	r5, r1
 8002626:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002628:	6823      	ldr	r3, [r4, #0]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	075b      	lsls	r3, r3, #29
 800262e:	d501      	bpl.n	8002634 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8002630:	2000      	movs	r0, #0
}
 8002632:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002634:	4620      	mov	r0, r4
 8002636:	f7ff ffa0 	bl	800257a <I2C_IsAcknowledgeFailed>
 800263a:	b9a8      	cbnz	r0, 8002668 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 800263c:	1c6a      	adds	r2, r5, #1
 800263e:	d0f3      	beq.n	8002628 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002640:	f7ff fde6 	bl	8002210 <HAL_GetTick>
 8002644:	1b80      	subs	r0, r0, r6
 8002646:	42a8      	cmp	r0, r5
 8002648:	d801      	bhi.n	800264e <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 800264a:	2d00      	cmp	r5, #0
 800264c:	d1ec      	bne.n	8002628 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800264e:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002650:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002652:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002654:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002658:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800265c:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800265e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002662:	f042 0220 	orr.w	r2, r2, #32
 8002666:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002668:	2001      	movs	r0, #1
 800266a:	e7e2      	b.n	8002632 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

0800266c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800266c:	b570      	push	{r4, r5, r6, lr}
 800266e:	4604      	mov	r4, r0
 8002670:	460d      	mov	r5, r1
 8002672:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002674:	6820      	ldr	r0, [r4, #0]
 8002676:	6943      	ldr	r3, [r0, #20]
 8002678:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800267c:	d001      	beq.n	8002682 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 800267e:	2000      	movs	r0, #0
 8002680:	e010      	b.n	80026a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002682:	6942      	ldr	r2, [r0, #20]
 8002684:	06d2      	lsls	r2, r2, #27
 8002686:	d50e      	bpl.n	80026a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002688:	f06f 0210 	mvn.w	r2, #16
 800268c:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 800268e:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002690:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002692:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002696:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800269a:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800269c:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800269e:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80026a0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80026a4:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026a6:	f7ff fdb3 	bl	8002210 <HAL_GetTick>
 80026aa:	1b80      	subs	r0, r0, r6
 80026ac:	42a8      	cmp	r0, r5
 80026ae:	d801      	bhi.n	80026b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 80026b0:	2d00      	cmp	r5, #0
 80026b2:	d1df      	bne.n	8002674 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80026b4:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80026b6:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80026b8:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80026ba:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80026be:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80026c2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80026c4:	f042 0220 	orr.w	r2, r2, #32
 80026c8:	e7e8      	b.n	800269c <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

080026ca <I2C_WaitOnFlagUntilTimeout>:
{
 80026ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80026ce:	4604      	mov	r4, r0
 80026d0:	4690      	mov	r8, r2
 80026d2:	461f      	mov	r7, r3
 80026d4:	9e08      	ldr	r6, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026d6:	ea4f 4911 	mov.w	r9, r1, lsr #16
 80026da:	b28d      	uxth	r5, r1
 80026dc:	6821      	ldr	r1, [r4, #0]
 80026de:	f1b9 0f01 	cmp.w	r9, #1
 80026e2:	bf0c      	ite	eq
 80026e4:	694b      	ldreq	r3, [r1, #20]
 80026e6:	698b      	ldrne	r3, [r1, #24]
 80026e8:	ea35 0303 	bics.w	r3, r5, r3
 80026ec:	bf0c      	ite	eq
 80026ee:	2301      	moveq	r3, #1
 80026f0:	2300      	movne	r3, #0
 80026f2:	4598      	cmp	r8, r3
 80026f4:	d001      	beq.n	80026fa <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 80026f6:	2000      	movs	r0, #0
 80026f8:	e016      	b.n	8002728 <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 80026fa:	1c7b      	adds	r3, r7, #1
 80026fc:	d0ef      	beq.n	80026de <I2C_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026fe:	f7ff fd87 	bl	8002210 <HAL_GetTick>
 8002702:	1b80      	subs	r0, r0, r6
 8002704:	42b8      	cmp	r0, r7
 8002706:	d801      	bhi.n	800270c <I2C_WaitOnFlagUntilTimeout+0x42>
 8002708:	2f00      	cmp	r7, #0
 800270a:	d1e7      	bne.n	80026dc <I2C_WaitOnFlagUntilTimeout+0x12>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800270c:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800270e:	2220      	movs	r2, #32
        __HAL_UNLOCK(hi2c);
 8002710:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002712:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002714:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002718:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800271c:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800271e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002722:	f042 0220 	orr.w	r2, r2, #32
 8002726:	6422      	str	r2, [r4, #64]	; 0x40
}
 8002728:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800272c <I2C_WaitOnTXEFlagUntilTimeout>:
{
 800272c:	b570      	push	{r4, r5, r6, lr}
 800272e:	4604      	mov	r4, r0
 8002730:	460d      	mov	r5, r1
 8002732:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002734:	6823      	ldr	r3, [r4, #0]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	061b      	lsls	r3, r3, #24
 800273a:	d501      	bpl.n	8002740 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 800273c:	2000      	movs	r0, #0
}
 800273e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002740:	4620      	mov	r0, r4
 8002742:	f7ff ff1a 	bl	800257a <I2C_IsAcknowledgeFailed>
 8002746:	b9a8      	cbnz	r0, 8002774 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8002748:	1c6a      	adds	r2, r5, #1
 800274a:	d0f3      	beq.n	8002734 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800274c:	f7ff fd60 	bl	8002210 <HAL_GetTick>
 8002750:	1b80      	subs	r0, r0, r6
 8002752:	42a8      	cmp	r0, r5
 8002754:	d801      	bhi.n	800275a <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8002756:	2d00      	cmp	r5, #0
 8002758:	d1ec      	bne.n	8002734 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800275a:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800275c:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800275e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002760:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002764:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002768:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800276a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800276e:	f042 0220 	orr.w	r2, r2, #32
 8002772:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002774:	2001      	movs	r0, #1
 8002776:	e7e2      	b.n	800273e <I2C_WaitOnTXEFlagUntilTimeout+0x12>

08002778 <I2C_RequestMemoryWrite>:
{
 8002778:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800277c:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800277e:	6802      	ldr	r2, [r0, #0]
{
 8002780:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002782:	6813      	ldr	r3, [r2, #0]
{
 8002784:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002786:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800278a:	6013      	str	r3, [r2, #0]
{
 800278c:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800278e:	9600      	str	r6, [sp, #0]
 8002790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002792:	2200      	movs	r2, #0
 8002794:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8002798:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800279a:	f7ff ff96 	bl	80026ca <I2C_WaitOnFlagUntilTimeout>
 800279e:	b118      	cbz	r0, 80027a8 <I2C_RequestMemoryWrite+0x30>
      return HAL_ERROR;
 80027a0:	2001      	movs	r0, #1
}
 80027a2:	b004      	add	sp, #16
 80027a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027a8:	6823      	ldr	r3, [r4, #0]
 80027aa:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 80027ae:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80027b2:	4633      	mov	r3, r6
 80027b4:	4916      	ldr	r1, [pc, #88]	; (8002810 <I2C_RequestMemoryWrite+0x98>)
 80027b6:	4620      	mov	r0, r4
 80027b8:	f7ff fef8 	bl	80025ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027bc:	2800      	cmp	r0, #0
 80027be:	d1ef      	bne.n	80027a0 <I2C_RequestMemoryWrite+0x28>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027c0:	6823      	ldr	r3, [r4, #0]
 80027c2:	9003      	str	r0, [sp, #12]
 80027c4:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027c6:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027c8:	9203      	str	r2, [sp, #12]
 80027ca:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027cc:	4632      	mov	r2, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ce:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027d0:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027d2:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027d4:	f7ff ffaa 	bl	800272c <I2C_WaitOnTXEFlagUntilTimeout>
 80027d8:	b140      	cbz	r0, 80027ec <I2C_RequestMemoryWrite+0x74>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80027dc:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027de:	bf01      	itttt	eq
 80027e0:	6822      	ldreq	r2, [r4, #0]
 80027e2:	6813      	ldreq	r3, [r2, #0]
 80027e4:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80027e8:	6013      	streq	r3, [r2, #0]
 80027ea:	e7d9      	b.n	80027a0 <I2C_RequestMemoryWrite+0x28>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027ec:	f1b8 0f01 	cmp.w	r8, #1
 80027f0:	6823      	ldr	r3, [r4, #0]
 80027f2:	d102      	bne.n	80027fa <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027f4:	b2ed      	uxtb	r5, r5
 80027f6:	611d      	str	r5, [r3, #16]
 80027f8:	e7d3      	b.n	80027a2 <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80027fa:	0a2a      	lsrs	r2, r5, #8
 80027fc:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002800:	4632      	mov	r2, r6
 8002802:	4620      	mov	r0, r4
 8002804:	f7ff ff92 	bl	800272c <I2C_WaitOnTXEFlagUntilTimeout>
 8002808:	2800      	cmp	r0, #0
 800280a:	d1e6      	bne.n	80027da <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800280c:	6823      	ldr	r3, [r4, #0]
 800280e:	e7f1      	b.n	80027f4 <I2C_RequestMemoryWrite+0x7c>
 8002810:	00010002 	.word	0x00010002

08002814 <HAL_I2C_Init>:
{
 8002814:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8002816:	4604      	mov	r4, r0
 8002818:	b908      	cbnz	r0, 800281e <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800281a:	2001      	movs	r0, #1
}
 800281c:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800281e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002822:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002826:	b91b      	cbnz	r3, 8002830 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8002828:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800282c:	f7ff faea 	bl	8001e04 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002830:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8002832:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002834:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002838:	6813      	ldr	r3, [r2, #0]
 800283a:	f023 0301 	bic.w	r3, r3, #1
 800283e:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002840:	f001 fa4c 	bl	8003cdc <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002844:	6863      	ldr	r3, [r4, #4]
 8002846:	4a41      	ldr	r2, [pc, #260]	; (800294c <HAL_I2C_Init+0x138>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d84d      	bhi.n	80028e8 <HAL_I2C_Init+0xd4>
 800284c:	4a40      	ldr	r2, [pc, #256]	; (8002950 <HAL_I2C_Init+0x13c>)
 800284e:	4290      	cmp	r0, r2
 8002850:	d9e3      	bls.n	800281a <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8002852:	4940      	ldr	r1, [pc, #256]	; (8002954 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002854:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8002856:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800285a:	6855      	ldr	r5, [r2, #4]
 800285c:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002860:	430d      	orrs	r5, r1
 8002862:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002864:	6a15      	ldr	r5, [r2, #32]
 8002866:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800286a:	3101      	adds	r1, #1
 800286c:	4329      	orrs	r1, r5
 800286e:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002870:	69d1      	ldr	r1, [r2, #28]
 8002872:	4d36      	ldr	r5, [pc, #216]	; (800294c <HAL_I2C_Init+0x138>)
 8002874:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8002878:	42ab      	cmp	r3, r5
 800287a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800287e:	f100 30ff 	add.w	r0, r0, #4294967295
 8002882:	d848      	bhi.n	8002916 <HAL_I2C_Init+0x102>
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	fbb0 f0f3 	udiv	r0, r0, r3
 800288a:	1c43      	adds	r3, r0, #1
 800288c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002890:	2b04      	cmp	r3, #4
 8002892:	bf38      	it	cc
 8002894:	2304      	movcc	r3, #4
 8002896:	430b      	orrs	r3, r1
 8002898:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800289a:	6811      	ldr	r1, [r2, #0]
 800289c:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80028a0:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80028a4:	4303      	orrs	r3, r0
 80028a6:	430b      	orrs	r3, r1
 80028a8:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028aa:	6891      	ldr	r1, [r2, #8]
 80028ac:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80028b0:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80028b4:	4303      	orrs	r3, r0
 80028b6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80028ba:	430b      	orrs	r3, r1
 80028bc:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028be:	68d1      	ldr	r1, [r2, #12]
 80028c0:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80028c4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80028c8:	4303      	orrs	r3, r0
 80028ca:	430b      	orrs	r3, r1
 80028cc:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80028ce:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028d0:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80028d8:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028da:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028dc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028e0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e2:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80028e6:	e799      	b.n	800281c <HAL_I2C_Init+0x8>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028e8:	4a1b      	ldr	r2, [pc, #108]	; (8002958 <HAL_I2C_Init+0x144>)
 80028ea:	4290      	cmp	r0, r2
 80028ec:	d995      	bls.n	800281a <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80028ee:	4e19      	ldr	r6, [pc, #100]	; (8002954 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028f0:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 80028f4:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028f8:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028fa:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028fc:	6855      	ldr	r5, [r2, #4]
 80028fe:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002902:	4335      	orrs	r5, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002904:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002908:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800290a:	6a15      	ldr	r5, [r2, #32]
 800290c:	fbb1 f1f6 	udiv	r1, r1, r6
 8002910:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002914:	e7a9      	b.n	800286a <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002916:	68a5      	ldr	r5, [r4, #8]
 8002918:	b955      	cbnz	r5, 8002930 <HAL_I2C_Init+0x11c>
 800291a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800291e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002922:	1c43      	adds	r3, r0, #1
 8002924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002928:	b16b      	cbz	r3, 8002946 <HAL_I2C_Init+0x132>
 800292a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800292e:	e7b2      	b.n	8002896 <HAL_I2C_Init+0x82>
 8002930:	2519      	movs	r5, #25
 8002932:	436b      	muls	r3, r5
 8002934:	fbb0 f0f3 	udiv	r0, r0, r3
 8002938:	1c43      	adds	r3, r0, #1
 800293a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800293e:	b113      	cbz	r3, 8002946 <HAL_I2C_Init+0x132>
 8002940:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002944:	e7a7      	b.n	8002896 <HAL_I2C_Init+0x82>
 8002946:	2301      	movs	r3, #1
 8002948:	e7a5      	b.n	8002896 <HAL_I2C_Init+0x82>
 800294a:	bf00      	nop
 800294c:	000186a0 	.word	0x000186a0
 8002950:	001e847f 	.word	0x001e847f
 8002954:	000f4240 	.word	0x000f4240
 8002958:	003d08ff 	.word	0x003d08ff

0800295c <HAL_I2C_Master_Transmit>:
{
 800295c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002960:	4604      	mov	r4, r0
 8002962:	461f      	mov	r7, r3
 8002964:	460d      	mov	r5, r1
 8002966:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8002968:	f7ff fc52 	bl	8002210 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800296c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8002970:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002972:	2b20      	cmp	r3, #32
 8002974:	d004      	beq.n	8002980 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8002976:	2502      	movs	r5, #2
}
 8002978:	4628      	mov	r0, r5
 800297a:	b004      	add	sp, #16
 800297c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002980:	9000      	str	r0, [sp, #0]
 8002982:	2319      	movs	r3, #25
 8002984:	2201      	movs	r2, #1
 8002986:	4958      	ldr	r1, [pc, #352]	; (8002ae8 <HAL_I2C_Master_Transmit+0x18c>)
 8002988:	4620      	mov	r0, r4
 800298a:	f7ff fe9e 	bl	80026ca <I2C_WaitOnFlagUntilTimeout>
 800298e:	2800      	cmp	r0, #0
 8002990:	d1f1      	bne.n	8002976 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8002992:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002996:	2b01      	cmp	r3, #1
 8002998:	d0ed      	beq.n	8002976 <HAL_I2C_Master_Transmit+0x1a>
 800299a:	2301      	movs	r3, #1
 800299c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029a0:	6823      	ldr	r3, [r4, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80029a6:	bf5e      	ittt	pl
 80029a8:	681a      	ldrpl	r2, [r3, #0]
 80029aa:	f042 0201 	orrpl.w	r2, r2, #1
 80029ae:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029b6:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80029b8:	2221      	movs	r2, #33	; 0x21
 80029ba:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80029be:	2210      	movs	r2, #16
 80029c0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80029c4:	2200      	movs	r2, #0
 80029c6:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80029c8:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029ca:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80029cc:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80029d0:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029d2:	4a46      	ldr	r2, [pc, #280]	; (8002aec <HAL_I2C_Master_Transmit+0x190>)
 80029d4:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80029d8:	2a08      	cmp	r2, #8
 80029da:	d004      	beq.n	80029e6 <HAL_I2C_Master_Transmit+0x8a>
 80029dc:	2a01      	cmp	r2, #1
 80029de:	d002      	beq.n	80029e6 <HAL_I2C_Master_Transmit+0x8a>
 80029e0:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80029e4:	d104      	bne.n	80029f0 <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	e002      	b.n	80029f6 <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80029f0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80029f2:	2a12      	cmp	r2, #18
 80029f4:	d0f7      	beq.n	80029e6 <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029f6:	9600      	str	r6, [sp, #0]
 80029f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80029fa:	2200      	movs	r2, #0
 80029fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a00:	4620      	mov	r0, r4
 8002a02:	f7ff fe62 	bl	80026ca <I2C_WaitOnFlagUntilTimeout>
 8002a06:	b108      	cbz	r0, 8002a0c <HAL_I2C_Master_Transmit+0xb0>
        return HAL_ERROR;
 8002a08:	2501      	movs	r5, #1
 8002a0a:	e7b5      	b.n	8002978 <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a0c:	6923      	ldr	r3, [r4, #16]
 8002a0e:	6822      	ldr	r2, [r4, #0]
 8002a10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a14:	d121      	bne.n	8002a5a <HAL_I2C_Master_Transmit+0xfe>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a16:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8002a1a:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a1c:	4633      	mov	r3, r6
 8002a1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002a20:	4933      	ldr	r1, [pc, #204]	; (8002af0 <HAL_I2C_Master_Transmit+0x194>)
 8002a22:	4620      	mov	r0, r4
 8002a24:	f7ff fdc2 	bl	80025ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a28:	4605      	mov	r5, r0
 8002a2a:	2800      	cmp	r0, #0
 8002a2c:	d1ec      	bne.n	8002a08 <HAL_I2C_Master_Transmit+0xac>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a2e:	6823      	ldr	r3, [r4, #0]
 8002a30:	9003      	str	r0, [sp, #12]
 8002a32:	695a      	ldr	r2, [r3, #20]
 8002a34:	9203      	str	r2, [sp, #12]
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	9303      	str	r3, [sp, #12]
 8002a3a:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8002a3c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002a3e:	b9f3      	cbnz	r3, 8002a7e <HAL_I2C_Master_Transmit+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a40:	6821      	ldr	r1, [r4, #0]
 8002a42:	680a      	ldr	r2, [r1, #0]
 8002a44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a48:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002a4a:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8002a4c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8002a50:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a54:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8002a58:	e78e      	b.n	8002978 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a5a:	11eb      	asrs	r3, r5, #7
 8002a5c:	f003 0306 	and.w	r3, r3, #6
 8002a60:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8002a64:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a66:	4923      	ldr	r1, [pc, #140]	; (8002af4 <HAL_I2C_Master_Transmit+0x198>)
 8002a68:	4633      	mov	r3, r6
 8002a6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002a6c:	4620      	mov	r0, r4
 8002a6e:	f7ff fd9d 	bl	80025ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a72:	2800      	cmp	r0, #0
 8002a74:	d1c8      	bne.n	8002a08 <HAL_I2C_Master_Transmit+0xac>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a76:	6823      	ldr	r3, [r4, #0]
 8002a78:	b2ed      	uxtb	r5, r5
 8002a7a:	611d      	str	r5, [r3, #16]
 8002a7c:	e7ce      	b.n	8002a1c <HAL_I2C_Master_Transmit+0xc0>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a7e:	4632      	mov	r2, r6
 8002a80:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002a82:	4620      	mov	r0, r4
 8002a84:	f7ff fe52 	bl	800272c <I2C_WaitOnTXEFlagUntilTimeout>
 8002a88:	b140      	cbz	r0, 8002a9c <HAL_I2C_Master_Transmit+0x140>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a8c:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a8e:	bf01      	itttt	eq
 8002a90:	6822      	ldreq	r2, [r4, #0]
 8002a92:	6813      	ldreq	r3, [r2, #0]
 8002a94:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8002a98:	6013      	streq	r3, [r2, #0]
 8002a9a:	e7b5      	b.n	8002a08 <HAL_I2C_Master_Transmit+0xac>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a9e:	6820      	ldr	r0, [r4, #0]
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002aa6:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8002aa8:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002aaa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002aac:	3a01      	subs	r2, #1
 8002aae:	b292      	uxth	r2, r2
 8002ab0:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002ab2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ab4:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8002ab6:	1e51      	subs	r1, r2, #1
 8002ab8:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002aba:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8002abc:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002abe:	d50a      	bpl.n	8002ad6 <HAL_I2C_Master_Transmit+0x17a>
 8002ac0:	b149      	cbz	r1, 8002ad6 <HAL_I2C_Master_Transmit+0x17a>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ac2:	7859      	ldrb	r1, [r3, #1]
        hi2c->pBuffPtr++;
 8002ac4:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ac6:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8002ac8:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8002aca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8002acc:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8002ad4:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ad6:	4632      	mov	r2, r6
 8002ad8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002ada:	4620      	mov	r0, r4
 8002adc:	f7ff fda0 	bl	8002620 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ae0:	2800      	cmp	r0, #0
 8002ae2:	d0ab      	beq.n	8002a3c <HAL_I2C_Master_Transmit+0xe0>
 8002ae4:	e7d1      	b.n	8002a8a <HAL_I2C_Master_Transmit+0x12e>
 8002ae6:	bf00      	nop
 8002ae8:	00100002 	.word	0x00100002
 8002aec:	ffff0000 	.word	0xffff0000
 8002af0:	00010002 	.word	0x00010002
 8002af4:	00010008 	.word	0x00010008

08002af8 <HAL_I2C_Master_Receive>:
{
 8002af8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002afc:	4604      	mov	r4, r0
 8002afe:	b089      	sub	sp, #36	; 0x24
 8002b00:	4698      	mov	r8, r3
 8002b02:	460f      	mov	r7, r1
 8002b04:	4691      	mov	r9, r2
 8002b06:	9e10      	ldr	r6, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8002b08:	f7ff fb82 	bl	8002210 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b0c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8002b10:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b12:	2b20      	cmp	r3, #32
 8002b14:	d004      	beq.n	8002b20 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 8002b16:	2702      	movs	r7, #2
}
 8002b18:	4638      	mov	r0, r7
 8002b1a:	b009      	add	sp, #36	; 0x24
 8002b1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b20:	9000      	str	r0, [sp, #0]
 8002b22:	2319      	movs	r3, #25
 8002b24:	2201      	movs	r2, #1
 8002b26:	499d      	ldr	r1, [pc, #628]	; (8002d9c <HAL_I2C_Master_Receive+0x2a4>)
 8002b28:	4620      	mov	r0, r4
 8002b2a:	f7ff fdce 	bl	80026ca <I2C_WaitOnFlagUntilTimeout>
 8002b2e:	2800      	cmp	r0, #0
 8002b30:	d1f1      	bne.n	8002b16 <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 8002b32:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d0ed      	beq.n	8002b16 <HAL_I2C_Master_Receive+0x1e>
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b40:	6823      	ldr	r3, [r4, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8002b46:	bf5e      	ittt	pl
 8002b48:	681a      	ldrpl	r2, [r3, #0]
 8002b4a:	f042 0201 	orrpl.w	r2, r2, #1
 8002b4e:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b56:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002b58:	2222      	movs	r2, #34	; 0x22
 8002b5a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b5e:	2210      	movs	r2, #16
 8002b60:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b64:	2200      	movs	r2, #0
 8002b66:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8002b68:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b6c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8002b6e:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8002b72:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b74:	4a8a      	ldr	r2, [pc, #552]	; (8002da0 <HAL_I2C_Master_Receive+0x2a8>)
 8002b76:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b78:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b7a:	6819      	ldr	r1, [r3, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b7c:	2a08      	cmp	r2, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b7e:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8002b82:	6019      	str	r1, [r3, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b84:	d004      	beq.n	8002b90 <HAL_I2C_Master_Receive+0x98>
 8002b86:	2a01      	cmp	r2, #1
 8002b88:	d002      	beq.n	8002b90 <HAL_I2C_Master_Receive+0x98>
 8002b8a:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8002b8e:	d104      	bne.n	8002b9a <HAL_I2C_Master_Receive+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	e002      	b.n	8002ba0 <HAL_I2C_Master_Receive+0xa8>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002b9a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002b9c:	2a11      	cmp	r2, #17
 8002b9e:	d0f7      	beq.n	8002b90 <HAL_I2C_Master_Receive+0x98>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ba0:	9500      	str	r5, [sp, #0]
 8002ba2:	4633      	mov	r3, r6
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002baa:	4620      	mov	r0, r4
 8002bac:	f7ff fd8d 	bl	80026ca <I2C_WaitOnFlagUntilTimeout>
 8002bb0:	b108      	cbz	r0, 8002bb6 <HAL_I2C_Master_Receive+0xbe>
      return HAL_ERROR;
 8002bb2:	2701      	movs	r7, #1
 8002bb4:	e7b0      	b.n	8002b18 <HAL_I2C_Master_Receive+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bb6:	6922      	ldr	r2, [r4, #16]
 8002bb8:	6823      	ldr	r3, [r4, #0]
 8002bba:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8002bbe:	d123      	bne.n	8002c08 <HAL_I2C_Master_Receive+0x110>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002bc0:	f047 0701 	orr.w	r7, r7, #1
 8002bc4:	b2ff      	uxtb	r7, r7
 8002bc6:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bc8:	462b      	mov	r3, r5
 8002bca:	4632      	mov	r2, r6
 8002bcc:	4975      	ldr	r1, [pc, #468]	; (8002da4 <HAL_I2C_Master_Receive+0x2ac>)
 8002bce:	4620      	mov	r0, r4
 8002bd0:	f7ff fcec 	bl	80025ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bd4:	4607      	mov	r7, r0
 8002bd6:	2800      	cmp	r0, #0
 8002bd8:	d1eb      	bne.n	8002bb2 <HAL_I2C_Master_Receive+0xba>
    if (hi2c->XferSize == 0U)
 8002bda:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002bdc:	6823      	ldr	r3, [r4, #0]
 8002bde:	2a00      	cmp	r2, #0
 8002be0:	d146      	bne.n	8002c70 <HAL_I2C_Master_Receive+0x178>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002be2:	9003      	str	r0, [sp, #12]
 8002be4:	695a      	ldr	r2, [r3, #20]
 8002be6:	9203      	str	r2, [sp, #12]
 8002be8:	699a      	ldr	r2, [r3, #24]
 8002bea:	9203      	str	r2, [sp, #12]
 8002bec:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bf4:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002bf6:	2320      	movs	r3, #32
 8002bf8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8002c02:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8002c06:	e787      	b.n	8002b18 <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c08:	ea4f 18e7 	mov.w	r8, r7, asr #7
 8002c0c:	f008 0806 	and.w	r8, r8, #6
 8002c10:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8002c14:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c16:	4964      	ldr	r1, [pc, #400]	; (8002da8 <HAL_I2C_Master_Receive+0x2b0>)
 8002c18:	462b      	mov	r3, r5
 8002c1a:	4632      	mov	r2, r6
 8002c1c:	4620      	mov	r0, r4
 8002c1e:	f7ff fcc5 	bl	80025ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c22:	2800      	cmp	r0, #0
 8002c24:	d1c5      	bne.n	8002bb2 <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c26:	6823      	ldr	r3, [r4, #0]
 8002c28:	b2ff      	uxtb	r7, r7
 8002c2a:	611f      	str	r7, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c2c:	4632      	mov	r2, r6
 8002c2e:	462b      	mov	r3, r5
 8002c30:	495c      	ldr	r1, [pc, #368]	; (8002da4 <HAL_I2C_Master_Receive+0x2ac>)
 8002c32:	4620      	mov	r0, r4
 8002c34:	f7ff fcba 	bl	80025ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	2800      	cmp	r0, #0
 8002c3c:	d1b9      	bne.n	8002bb2 <HAL_I2C_Master_Receive+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c3e:	6823      	ldr	r3, [r4, #0]
 8002c40:	9007      	str	r0, [sp, #28]
 8002c42:	6959      	ldr	r1, [r3, #20]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c44:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c46:	9107      	str	r1, [sp, #28]
 8002c48:	6999      	ldr	r1, [r3, #24]
 8002c4a:	9107      	str	r1, [sp, #28]
 8002c4c:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c4e:	6819      	ldr	r1, [r3, #0]
 8002c50:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002c54:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c56:	9500      	str	r5, [sp, #0]
 8002c58:	4633      	mov	r3, r6
 8002c5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c5e:	f7ff fd34 	bl	80026ca <I2C_WaitOnFlagUntilTimeout>
 8002c62:	2800      	cmp	r0, #0
 8002c64:	d1a5      	bne.n	8002bb2 <HAL_I2C_Master_Receive+0xba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002c66:	6822      	ldr	r2, [r4, #0]
 8002c68:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8002c6c:	6113      	str	r3, [r2, #16]
 8002c6e:	e7ab      	b.n	8002bc8 <HAL_I2C_Master_Receive+0xd0>
    else if (hi2c->XferSize == 1U)
 8002c70:	2a01      	cmp	r2, #1
 8002c72:	d131      	bne.n	8002cd8 <HAL_I2C_Master_Receive+0x1e0>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c7a:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c7c:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c7e:	6823      	ldr	r3, [r4, #0]
 8002c80:	9004      	str	r0, [sp, #16]
 8002c82:	695a      	ldr	r2, [r3, #20]
 8002c84:	9204      	str	r2, [sp, #16]
 8002c86:	699a      	ldr	r2, [r3, #24]
 8002c88:	9204      	str	r2, [sp, #16]
 8002c8a:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c92:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002c94:	b662      	cpsie	i
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c96:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8002dac <HAL_I2C_Master_Receive+0x2b4>
    while (hi2c->XferSize > 0U)
 8002c9a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0aa      	beq.n	8002bf6 <HAL_I2C_Master_Receive+0xfe>
      if (hi2c->XferSize <= 3U)
 8002ca0:	2b03      	cmp	r3, #3
 8002ca2:	f200 8085 	bhi.w	8002db0 <HAL_I2C_Master_Receive+0x2b8>
        if (hi2c->XferSize == 1U)
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d132      	bne.n	8002d10 <HAL_I2C_Master_Receive+0x218>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002caa:	462a      	mov	r2, r5
 8002cac:	4631      	mov	r1, r6
 8002cae:	4620      	mov	r0, r4
 8002cb0:	f7ff fcdc 	bl	800266c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cb4:	2800      	cmp	r0, #0
 8002cb6:	f47f af7c 	bne.w	8002bb2 <HAL_I2C_Master_Receive+0xba>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cba:	6823      	ldr	r3, [r4, #0]
 8002cbc:	691a      	ldr	r2, [r3, #16]
 8002cbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002cc0:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002cc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002cc8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002cce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002cd6:	e7e0      	b.n	8002c9a <HAL_I2C_Master_Receive+0x1a2>
    else if (hi2c->XferSize == 2U)
 8002cd8:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cda:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 8002cdc:	d10e      	bne.n	8002cfc <HAL_I2C_Master_Receive+0x204>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ce2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ce4:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ce6:	6823      	ldr	r3, [r4, #0]
 8002ce8:	9005      	str	r0, [sp, #20]
 8002cea:	695a      	ldr	r2, [r3, #20]
 8002cec:	9205      	str	r2, [sp, #20]
 8002cee:	699a      	ldr	r2, [r3, #24]
 8002cf0:	9205      	str	r2, [sp, #20]
 8002cf2:	9a05      	ldr	r2, [sp, #20]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cfa:	e7ca      	b.n	8002c92 <HAL_I2C_Master_Receive+0x19a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d00:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d02:	9006      	str	r0, [sp, #24]
 8002d04:	695a      	ldr	r2, [r3, #20]
 8002d06:	9206      	str	r2, [sp, #24]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	9306      	str	r3, [sp, #24]
 8002d0c:	9b06      	ldr	r3, [sp, #24]
 8002d0e:	e7c2      	b.n	8002c96 <HAL_I2C_Master_Receive+0x19e>
        else if (hi2c->XferSize == 2U)
 8002d10:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d12:	9500      	str	r5, [sp, #0]
 8002d14:	4633      	mov	r3, r6
 8002d16:	f04f 0200 	mov.w	r2, #0
 8002d1a:	4641      	mov	r1, r8
 8002d1c:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8002d1e:	d119      	bne.n	8002d54 <HAL_I2C_Master_Receive+0x25c>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d20:	f7ff fcd3 	bl	80026ca <I2C_WaitOnFlagUntilTimeout>
 8002d24:	2800      	cmp	r0, #0
 8002d26:	f47f af44 	bne.w	8002bb2 <HAL_I2C_Master_Receive+0xba>
 8002d2a:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d2c:	6823      	ldr	r3, [r4, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d34:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d36:	691a      	ldr	r2, [r3, #16]
 8002d38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d3a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002d3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d3e:	3301      	adds	r3, #1
 8002d40:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002d42:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002d44:	3b01      	subs	r3, #1
 8002d46:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002d48:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002d50:	b662      	cpsie	i
 8002d52:	e7b2      	b.n	8002cba <HAL_I2C_Master_Receive+0x1c2>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d54:	f7ff fcb9 	bl	80026ca <I2C_WaitOnFlagUntilTimeout>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	2800      	cmp	r0, #0
 8002d5c:	f47f af29 	bne.w	8002bb2 <HAL_I2C_Master_Receive+0xba>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d60:	6821      	ldr	r1, [r4, #0]
 8002d62:	680b      	ldr	r3, [r1, #0]
 8002d64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d68:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d6a:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d6c:	6823      	ldr	r3, [r4, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d6e:	4620      	mov	r0, r4
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d70:	6919      	ldr	r1, [r3, #16]
 8002d72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d74:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 8002d76:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d78:	9500      	str	r5, [sp, #0]
          hi2c->pBuffPtr++;
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002d7e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d80:	4641      	mov	r1, r8
          hi2c->XferSize--;
 8002d82:	3b01      	subs	r3, #1
 8002d84:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002d86:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d8e:	4633      	mov	r3, r6
 8002d90:	f7ff fc9b 	bl	80026ca <I2C_WaitOnFlagUntilTimeout>
 8002d94:	2800      	cmp	r0, #0
 8002d96:	d0c9      	beq.n	8002d2c <HAL_I2C_Master_Receive+0x234>
 8002d98:	e70b      	b.n	8002bb2 <HAL_I2C_Master_Receive+0xba>
 8002d9a:	bf00      	nop
 8002d9c:	00100002 	.word	0x00100002
 8002da0:	ffff0000 	.word	0xffff0000
 8002da4:	00010002 	.word	0x00010002
 8002da8:	00010008 	.word	0x00010008
 8002dac:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002db0:	462a      	mov	r2, r5
 8002db2:	4631      	mov	r1, r6
 8002db4:	4620      	mov	r0, r4
 8002db6:	f7ff fc59 	bl	800266c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002dba:	2800      	cmp	r0, #0
 8002dbc:	f47f aef9 	bne.w	8002bb2 <HAL_I2C_Master_Receive+0xba>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dc0:	6823      	ldr	r3, [r4, #0]
 8002dc2:	691a      	ldr	r2, [r3, #16]
 8002dc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002dc6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002dc8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002dca:	1c53      	adds	r3, r2, #1
 8002dcc:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8002dce:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8002dd4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ddc:	6823      	ldr	r3, [r4, #0]
 8002dde:	6959      	ldr	r1, [r3, #20]
 8002de0:	0749      	lsls	r1, r1, #29
 8002de2:	f57f af5a 	bpl.w	8002c9a <HAL_I2C_Master_Receive+0x1a2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	7053      	strb	r3, [r2, #1]
 8002dea:	e76a      	b.n	8002cc2 <HAL_I2C_Master_Receive+0x1ca>

08002dec <HAL_I2C_Mem_Write>:
{
 8002dec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002df0:	4604      	mov	r4, r0
 8002df2:	4699      	mov	r9, r3
 8002df4:	460f      	mov	r7, r1
 8002df6:	4690      	mov	r8, r2
 8002df8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8002dfa:	f7ff fa09 	bl	8002210 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dfe:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8002e02:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e04:	2b20      	cmp	r3, #32
 8002e06:	d003      	beq.n	8002e10 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8002e08:	2002      	movs	r0, #2
}
 8002e0a:	b003      	add	sp, #12
 8002e0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e10:	9000      	str	r0, [sp, #0]
 8002e12:	2319      	movs	r3, #25
 8002e14:	2201      	movs	r2, #1
 8002e16:	493b      	ldr	r1, [pc, #236]	; (8002f04 <HAL_I2C_Mem_Write+0x118>)
 8002e18:	4620      	mov	r0, r4
 8002e1a:	f7ff fc56 	bl	80026ca <I2C_WaitOnFlagUntilTimeout>
 8002e1e:	2800      	cmp	r0, #0
 8002e20:	d1f2      	bne.n	8002e08 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8002e22:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d0ee      	beq.n	8002e08 <HAL_I2C_Mem_Write+0x1c>
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e30:	6823      	ldr	r3, [r4, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e32:	4620      	mov	r0, r4
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	07d1      	lsls	r1, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8002e38:	bf58      	it	pl
 8002e3a:	681a      	ldrpl	r2, [r3, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e3c:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 8002e3e:	bf5c      	itt	pl
 8002e40:	f042 0201 	orrpl.w	r2, r2, #1
 8002e44:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e4c:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e4e:	2321      	movs	r3, #33	; 0x21
 8002e50:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e54:	2340      	movs	r3, #64	; 0x40
 8002e56:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8002e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e60:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->pBuffPtr    = pData;
 8002e64:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e66:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e6a:	4642      	mov	r2, r8
    hi2c->XferCount   = Size;
 8002e6c:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e6e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002e70:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e72:	4b25      	ldr	r3, [pc, #148]	; (8002f08 <HAL_I2C_Mem_Write+0x11c>)
 8002e74:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e76:	464b      	mov	r3, r9
 8002e78:	f7ff fc7e 	bl	8002778 <I2C_RequestMemoryWrite>
 8002e7c:	2800      	cmp	r0, #0
 8002e7e:	d02a      	beq.n	8002ed6 <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 8002e80:	2001      	movs	r0, #1
 8002e82:	e7c2      	b.n	8002e0a <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e84:	f7ff fc52 	bl	800272c <I2C_WaitOnTXEFlagUntilTimeout>
 8002e88:	b140      	cbz	r0, 8002e9c <HAL_I2C_Mem_Write+0xb0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e8c:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e8e:	bf01      	itttt	eq
 8002e90:	6822      	ldreq	r2, [r4, #0]
 8002e92:	6813      	ldreq	r3, [r2, #0]
 8002e94:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8002e98:	6013      	streq	r3, [r2, #0]
 8002e9a:	e7f1      	b.n	8002e80 <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e9e:	6827      	ldr	r7, [r4, #0]
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002ea6:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8002ea8:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002eaa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002eac:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002eae:	3a01      	subs	r2, #1
 8002eb0:	b292      	uxth	r2, r2
 8002eb2:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002eb4:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8002eb6:	1e48      	subs	r0, r1, #1
 8002eb8:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002eba:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8002ebc:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ebe:	d50a      	bpl.n	8002ed6 <HAL_I2C_Mem_Write+0xea>
 8002ec0:	b148      	cbz	r0, 8002ed6 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ec2:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 8002ec4:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ec6:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8002ec8:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8002eca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8002ecc:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8002ed2:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8002ed4:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ed6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ed8:	462a      	mov	r2, r5
 8002eda:	4631      	mov	r1, r6
 8002edc:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1d0      	bne.n	8002e84 <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ee2:	f7ff fb9d 	bl	8002620 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ee6:	2800      	cmp	r0, #0
 8002ee8:	d1cf      	bne.n	8002e8a <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eea:	6822      	ldr	r2, [r4, #0]
 8002eec:	6813      	ldr	r3, [r2, #0]
 8002eee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ef2:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002ef4:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8002ef6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8002efa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002efe:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8002f02:	e782      	b.n	8002e0a <HAL_I2C_Mem_Write+0x1e>
 8002f04:	00100002 	.word	0x00100002
 8002f08:	ffff0000 	.word	0xffff0000

08002f0c <HAL_I2C_IsDeviceReady>:
{
 8002f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f10:	4604      	mov	r4, r0
 8002f12:	b085      	sub	sp, #20
 8002f14:	4698      	mov	r8, r3
 8002f16:	4689      	mov	r9, r1
 8002f18:	4692      	mov	sl, r2
  uint32_t tickstart = HAL_GetTick();
 8002f1a:	f7ff f979 	bl	8002210 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f1e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8002f22:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f24:	2b20      	cmp	r3, #32
 8002f26:	d003      	beq.n	8002f30 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8002f28:	2002      	movs	r0, #2
}
 8002f2a:	b005      	add	sp, #20
 8002f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f30:	9000      	str	r0, [sp, #0]
 8002f32:	2319      	movs	r3, #25
 8002f34:	2201      	movs	r2, #1
 8002f36:	4949      	ldr	r1, [pc, #292]	; (800305c <HAL_I2C_IsDeviceReady+0x150>)
 8002f38:	4620      	mov	r0, r4
 8002f3a:	f7ff fbc6 	bl	80026ca <I2C_WaitOnFlagUntilTimeout>
 8002f3e:	2800      	cmp	r0, #0
 8002f40:	d1f2      	bne.n	8002f28 <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 8002f42:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d0ee      	beq.n	8002f28 <HAL_I2C_IsDeviceReady+0x1c>
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f50:	6823      	ldr	r3, [r4, #0]
  uint32_t I2C_Trials = 1U;
 8002f52:	2701      	movs	r7, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f54:	681a      	ldr	r2, [r3, #0]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f56:	f8df b104 	ldr.w	fp, [pc, #260]	; 800305c <HAL_I2C_IsDeviceReady+0x150>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f5a:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8002f5c:	bf58      	it	pl
 8002f5e:	681a      	ldrpl	r2, [r3, #0]
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f60:	f009 09fe 	and.w	r9, r9, #254	; 0xfe
      __HAL_I2C_ENABLE(hi2c);
 8002f64:	bf5c      	itt	pl
 8002f66:	f042 0201 	orrpl.w	r2, r2, #1
 8002f6a:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f72:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f74:	2324      	movs	r3, #36	; 0x24
 8002f76:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f7e:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8002f82:	62e3      	str	r3, [r4, #44]	; 0x2c
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f84:	6822      	ldr	r2, [r4, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002f86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f8a:	6813      	ldr	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002f8c:	4620      	mov	r0, r4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f92:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002f94:	9500      	str	r5, [sp, #0]
 8002f96:	4643      	mov	r3, r8
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f7ff fb96 	bl	80026ca <I2C_WaitOnFlagUntilTimeout>
 8002f9e:	b108      	cbz	r0, 8002fa4 <HAL_I2C_IsDeviceReady+0x98>
    return HAL_ERROR;
 8002fa0:	2001      	movs	r0, #1
 8002fa2:	e7c2      	b.n	8002f2a <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fa4:	6823      	ldr	r3, [r4, #0]
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002fa6:	26a0      	movs	r6, #160	; 0xa0
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fa8:	f8c3 9010 	str.w	r9, [r3, #16]
      tickstart = HAL_GetTick();
 8002fac:	f7ff f930 	bl	8002210 <HAL_GetTick>
 8002fb0:	4605      	mov	r5, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002fb2:	6823      	ldr	r3, [r4, #0]
 8002fb4:	695a      	ldr	r2, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002fb6:	695b      	ldr	r3, [r3, #20]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002fb8:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002fbc:	f3c3 2380 	ubfx	r3, r3, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002fc0:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8002fc4:	29a0      	cmp	r1, #160	; 0xa0
 8002fc6:	d001      	beq.n	8002fcc <HAL_I2C_IsDeviceReady+0xc0>
 8002fc8:	b902      	cbnz	r2, 8002fcc <HAL_I2C_IsDeviceReady+0xc0>
 8002fca:	b303      	cbz	r3, 800300e <HAL_I2C_IsDeviceReady+0x102>
      hi2c->State = HAL_I2C_STATE_READY;
 8002fcc:	2620      	movs	r6, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002fce:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8002fd0:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002fd4:	695a      	ldr	r2, [r3, #20]
 8002fd6:	f012 0f02 	tst.w	r2, #2
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe0:	601a      	str	r2, [r3, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002fe2:	d026      	beq.n	8003032 <HAL_I2C_IsDeviceReady+0x126>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	9203      	str	r2, [sp, #12]
 8002fe8:	695a      	ldr	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fea:	491c      	ldr	r1, [pc, #112]	; (800305c <HAL_I2C_IsDeviceReady+0x150>)
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fec:	9203      	str	r2, [sp, #12]
 8002fee:	699b      	ldr	r3, [r3, #24]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ff0:	2201      	movs	r2, #1
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ff2:	9303      	str	r3, [sp, #12]
 8002ff4:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ff6:	9500      	str	r5, [sp, #0]
 8002ff8:	2319      	movs	r3, #25
 8002ffa:	4620      	mov	r0, r4
 8002ffc:	f7ff fb65 	bl	80026ca <I2C_WaitOnFlagUntilTimeout>
 8003000:	2800      	cmp	r0, #0
 8003002:	d1cd      	bne.n	8002fa0 <HAL_I2C_IsDeviceReady+0x94>
        hi2c->State = HAL_I2C_STATE_READY;
 8003004:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8003008:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 800300c:	e78d      	b.n	8002f2a <HAL_I2C_IsDeviceReady+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800300e:	f7ff f8ff 	bl	8002210 <HAL_GetTick>
 8003012:	1b40      	subs	r0, r0, r5
 8003014:	4540      	cmp	r0, r8
 8003016:	d802      	bhi.n	800301e <HAL_I2C_IsDeviceReady+0x112>
 8003018:	f1b8 0f00 	cmp.w	r8, #0
 800301c:	d101      	bne.n	8003022 <HAL_I2C_IsDeviceReady+0x116>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800301e:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003022:	6823      	ldr	r3, [r4, #0]
 8003024:	695a      	ldr	r2, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003026:	695b      	ldr	r3, [r3, #20]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003028:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800302c:	f3c3 2380 	ubfx	r3, r3, #10, #1
 8003030:	e7c6      	b.n	8002fc0 <HAL_I2C_IsDeviceReady+0xb4>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003032:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003036:	4659      	mov	r1, fp
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003038:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800303a:	4620      	mov	r0, r4
 800303c:	9500      	str	r5, [sp, #0]
 800303e:	2319      	movs	r3, #25
 8003040:	2201      	movs	r2, #1
 8003042:	f7ff fb42 	bl	80026ca <I2C_WaitOnFlagUntilTimeout>
 8003046:	2800      	cmp	r0, #0
 8003048:	d1aa      	bne.n	8002fa0 <HAL_I2C_IsDeviceReady+0x94>
      I2C_Trials++;
 800304a:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 800304c:	4557      	cmp	r7, sl
 800304e:	d399      	bcc.n	8002f84 <HAL_I2C_IsDeviceReady+0x78>
    hi2c->State = HAL_I2C_STATE_READY;
 8003050:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8003054:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8003058:	e7a2      	b.n	8002fa0 <HAL_I2C_IsDeviceReady+0x94>
 800305a:	bf00      	nop
 800305c:	00100002 	.word	0x00100002

08003060 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8003060:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8003062:	4770      	bx	lr

08003064 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003064:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003066:	4604      	mov	r4, r0
{
 8003068:	b087      	sub	sp, #28
  if (hpcd == NULL)
 800306a:	b310      	cbz	r0, 80030b2 <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800306c:	f890 3229 	ldrb.w	r3, [r0, #553]	; 0x229
 8003070:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003074:	b91b      	cbnz	r3, 800307e <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003076:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800307a:	f004 fce5 	bl	8007a48 <HAL_PCD_MspInit>
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800307e:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8003080:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003082:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 8003084:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8003088:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  __HAL_PCD_DISABLE(hpcd);
 800308c:	f001 fa29 	bl	80044e2 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003090:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003092:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003094:	682b      	ldr	r3, [r5, #0]
 8003096:	4625      	mov	r5, r4
 8003098:	6033      	str	r3, [r6, #0]
 800309a:	1d27      	adds	r7, r4, #4
 800309c:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80030a0:	f855 0b10 	ldr.w	r0, [r5], #16
 80030a4:	f001 fa0e 	bl	80044c4 <USB_CoreInit>
 80030a8:	4606      	mov	r6, r0
 80030aa:	b120      	cbz	r0, 80030b6 <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030ac:	2302      	movs	r3, #2
 80030ae:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
    return HAL_ERROR;
 80030b2:	2501      	movs	r5, #1
 80030b4:	e048      	b.n	8003148 <HAL_PCD_Init+0xe4>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80030b6:	4601      	mov	r1, r0
 80030b8:	6820      	ldr	r0, [r4, #0]
 80030ba:	f001 fa1c 	bl	80044f6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030be:	4630      	mov	r0, r6
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80030c0:	f04f 0c01 	mov.w	ip, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030c4:	6861      	ldr	r1, [r4, #4]
 80030c6:	b2c3      	uxtb	r3, r0
 80030c8:	4299      	cmp	r1, r3
 80030ca:	f100 0001 	add.w	r0, r0, #1
 80030ce:	d817      	bhi.n	8003100 <HAL_PCD_Init+0x9c>
 80030d0:	2200      	movs	r2, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80030d2:	4610      	mov	r0, r2
 80030d4:	b2d3      	uxtb	r3, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030d6:	4299      	cmp	r1, r3
 80030d8:	f102 0201 	add.w	r2, r2, #1
 80030dc:	d81d      	bhi.n	800311a <HAL_PCD_Init+0xb6>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030e0:	466e      	mov	r6, sp
 80030e2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80030e4:	682b      	ldr	r3, [r5, #0]
 80030e6:	6033      	str	r3, [r6, #0]
 80030e8:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80030ec:	6820      	ldr	r0, [r4, #0]
 80030ee:	f001 fa04 	bl	80044fa <USB_DevInit>
 80030f2:	2301      	movs	r3, #1
 80030f4:	4605      	mov	r5, r0
 80030f6:	b300      	cbz	r0, 800313a <HAL_PCD_Init+0xd6>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030f8:	2202      	movs	r2, #2
 80030fa:	f884 2229 	strb.w	r2, [r4, #553]	; 0x229
 80030fe:	e7d8      	b.n	80030b2 <HAL_PCD_Init+0x4e>
    hpcd->IN_ep[i].is_in = 1U;
 8003100:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8003104:	f882 c029 	strb.w	ip, [r2, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8003108:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 800310c:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800310e:	f882 602b 	strb.w	r6, [r2, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003112:	e9c2 660e 	strd	r6, r6, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_len = 0U;
 8003116:	6416      	str	r6, [r2, #64]	; 0x40
 8003118:	e7d5      	b.n	80030c6 <HAL_PCD_Init+0x62>
    hpcd->OUT_ep[i].is_in = 0U;
 800311a:	eb04 1643 	add.w	r6, r4, r3, lsl #5
    hpcd->OUT_ep[i].num = i;
 800311e:	f886 3128 	strb.w	r3, [r6, #296]	; 0x128
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003122:	330a      	adds	r3, #10
 8003124:	015b      	lsls	r3, r3, #5
    hpcd->OUT_ep[i].is_in = 0U;
 8003126:	f886 0129 	strb.w	r0, [r6, #297]	; 0x129
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800312a:	f886 012b 	strb.w	r0, [r6, #299]	; 0x12b
    hpcd->OUT_ep[i].maxpacket = 0U;
 800312e:	f8c6 0138 	str.w	r0, [r6, #312]	; 0x138
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003132:	f8c6 013c 	str.w	r0, [r6, #316]	; 0x13c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003136:	50e0      	str	r0, [r4, r3]
 8003138:	e7cc      	b.n	80030d4 <HAL_PCD_Init+0x70>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 800313a:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800313e:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8003142:	6820      	ldr	r0, [r4, #0]
 8003144:	f001 fc7b 	bl	8004a3e <USB_DevDisconnect>

  return HAL_OK;
}
 8003148:	4628      	mov	r0, r5
 800314a:	b007      	add	sp, #28
 800314c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800314e <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 800314e:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
{
 8003152:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8003154:	2b01      	cmp	r3, #1
{
 8003156:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003158:	d00e      	beq.n	8003178 <HAL_PCD_Start+0x2a>
 800315a:	2101      	movs	r1, #1
 800315c:	f880 1228 	strb.w	r1, [r0, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003160:	f004 fd9f 	bl	8007ca2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8003164:	6820      	ldr	r0, [r4, #0]
 8003166:	f001 fc68 	bl	8004a3a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800316a:	6820      	ldr	r0, [r4, #0]
 800316c:	f001 f9b1 	bl	80044d2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003170:	2000      	movs	r0, #0
 8003172:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 8003176:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003178:	2002      	movs	r0, #2
 800317a:	e7fc      	b.n	8003176 <HAL_PCD_Start+0x28>

0800317c <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 800317c:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
{
 8003180:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8003182:	2a01      	cmp	r2, #1
{
 8003184:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003186:	d00b      	beq.n	80031a0 <HAL_PCD_SetAddress+0x24>
 8003188:	2201      	movs	r2, #1
 800318a:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228
  hpcd->USB_Address = address;
 800318e:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003192:	6800      	ldr	r0, [r0, #0]
 8003194:	f001 fc4b 	bl	8004a2e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003198:	2000      	movs	r0, #0
 800319a:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 800319e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80031a0:	2002      	movs	r0, #2
 80031a2:	e7fc      	b.n	800319e <HAL_PCD_SetAddress+0x22>

080031a4 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80031a4:	b570      	push	{r4, r5, r6, lr}
 80031a6:	4604      	mov	r4, r0
 80031a8:	f001 0507 	and.w	r5, r1, #7
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031ac:	f011 0f80 	tst.w	r1, #128	; 0x80
 80031b0:	ea4f 1045 	mov.w	r0, r5, lsl #5
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031b4:	bf14      	ite	ne
 80031b6:	f100 0128 	addne.w	r1, r0, #40	; 0x28
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031ba:	f500 7194 	addeq.w	r1, r0, #296	; 0x128
 80031be:	eb04 0600 	add.w	r6, r4, r0
    ep->is_in = 1U;
 80031c2:	bf17      	itett	ne
 80031c4:	2001      	movne	r0, #1
    ep->is_in = 0U;
 80031c6:	2000      	moveq	r0, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031c8:	1909      	addne	r1, r1, r4
    ep->is_in = 1U;
 80031ca:	f886 0029 	strbne.w	r0, [r6, #41]	; 0x29
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031ce:	bf04      	itt	eq
 80031d0:	1909      	addeq	r1, r1, r4
    ep->is_in = 0U;
 80031d2:	f886 0129 	strbeq.w	r0, [r6, #297]	; 0x129
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = ep_mps;
 80031d6:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;

  if (ep->is_in != 0U)
 80031d8:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031da:	700d      	strb	r5, [r1, #0]
  ep->type = ep_type;
 80031dc:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80031de:	b102      	cbz	r2, 80031e2 <HAL_PCD_EP_Open+0x3e>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80031e0:	81cd      	strh	r5, [r1, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80031e2:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 80031e4:	bf04      	itt	eq
 80031e6:	2300      	moveq	r3, #0
 80031e8:	710b      	strbeq	r3, [r1, #4]
  }

  __HAL_LOCK(hpcd);
 80031ea:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d009      	beq.n	8003206 <HAL_PCD_EP_Open+0x62>
 80031f2:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80031f4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80031f6:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80031fa:	f001 f999 	bl	8004530 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031fe:	2000      	movs	r0, #0
 8003200:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228

  return ret;
}
 8003204:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8003206:	2002      	movs	r0, #2
 8003208:	e7fc      	b.n	8003204 <HAL_PCD_EP_Open+0x60>

0800320a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800320a:	f001 0207 	and.w	r2, r1, #7
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800320e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003212:	ea4f 1342 	mov.w	r3, r2, lsl #5
{
 8003216:	b510      	push	{r4, lr}
 8003218:	4604      	mov	r4, r0
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800321a:	bf18      	it	ne
 800321c:	f103 0128 	addne.w	r1, r3, #40	; 0x28
 8003220:	4418      	add	r0, r3
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003222:	bf0b      	itete	eq
 8003224:	f503 7194 	addeq.w	r1, r3, #296	; 0x128
    ep->is_in = 1U;
 8003228:	2301      	movne	r3, #1
    ep->is_in = 0U;
 800322a:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800322c:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800322e:	bf0a      	itet	eq
 8003230:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 8003232:	f880 3029 	strbne.w	r3, [r0, #41]	; 0x29
    ep->is_in = 0U;
 8003236:	f880 3129 	strbeq.w	r3, [r0, #297]	; 0x129
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800323a:	700a      	strb	r2, [r1, #0]

  __HAL_LOCK(hpcd);
 800323c:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8003240:	2b01      	cmp	r3, #1
 8003242:	d009      	beq.n	8003258 <HAL_PCD_EP_Close+0x4e>
 8003244:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003246:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8003248:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800324c:	f001 faca 	bl	80047e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003250:	2000      	movs	r0, #0
 8003252:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 8003256:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003258:	2002      	movs	r0, #2
 800325a:	e7fc      	b.n	8003256 <HAL_PCD_EP_Close+0x4c>

0800325c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800325c:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 800325e:	2600      	movs	r6, #0
 8003260:	f001 0107 	and.w	r1, r1, #7
 8003264:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;
 8003266:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & EP_ADDR_MSK;
 8003268:	f884 1128 	strb.w	r1, [r4, #296]	; 0x128
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800326c:	f505 7194 	add.w	r1, r5, #296	; 0x128
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003270:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8003272:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
  ep->xfer_len = len;
 8003276:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
  ep->xfer_count = 0U;
 800327a:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
  ep->is_in = 0U;
 800327e:	f884 6129 	strb.w	r6, [r4, #297]	; 0x129
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003282:	6800      	ldr	r0, [r0, #0]
 8003284:	f001 fbf2 	bl	8004a6c <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8003288:	4630      	mov	r0, r6
 800328a:	bd70      	pop	{r4, r5, r6, pc}

0800328c <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800328c:	f001 0107 	and.w	r1, r1, #7
 8003290:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 8003294:	f8d1 0144 	ldr.w	r0, [r1, #324]	; 0x144
 8003298:	4770      	bx	lr

0800329a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800329a:	f001 0107 	and.w	r1, r1, #7
 800329e:	b570      	push	{r4, r5, r6, lr}
 80032a0:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032a2:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 80032a4:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 80032a8:	2600      	movs	r6, #0
  ep->is_in = 1U;
 80032aa:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80032ac:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032b0:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032b4:	4401      	add	r1, r0
  ep->xfer_count = 0U;
 80032b6:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 80032b8:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032bc:	6800      	ldr	r0, [r0, #0]
 80032be:	f001 fbd5 	bl	8004a6c <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80032c2:	4630      	mov	r0, r6
 80032c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080032c8 <HAL_PCD_IRQHandler>:
{
 80032c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032cc:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80032ce:	6800      	ldr	r0, [r0, #0]
 80032d0:	f001 fbb7 	bl	8004a42 <USB_ReadInterrupts>
 80032d4:	0402      	lsls	r2, r0, #16
 80032d6:	d50b      	bpl.n	80032f0 <HAL_PCD_IRQHandler+0x28>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80032d8:	f8df 940c 	ldr.w	r9, [pc, #1036]	; 80036e8 <HAL_PCD_IRQHandler+0x420>
 80032dc:	f8df a40c 	ldr.w	sl, [pc, #1036]	; 80036ec <HAL_PCD_IRQHandler+0x424>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80032e0:	f8df b40c 	ldr.w	fp, [pc, #1036]	; 80036f0 <HAL_PCD_IRQHandler+0x428>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80032e4:	6820      	ldr	r0, [r4, #0]
 80032e6:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80032ea:	041b      	lsls	r3, r3, #16
 80032ec:	f100 809e 	bmi.w	800342c <HAL_PCD_IRQHandler+0x164>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80032f0:	6820      	ldr	r0, [r4, #0]
 80032f2:	f001 fba6 	bl	8004a42 <USB_ReadInterrupts>
 80032f6:	0543      	lsls	r3, r0, #21
 80032f8:	d50f      	bpl.n	800331a <HAL_PCD_IRQHandler+0x52>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80032fa:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 80032fc:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80032fe:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003302:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003306:	041b      	lsls	r3, r3, #16
 8003308:	0c1b      	lsrs	r3, r3, #16
 800330a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 800330e:	f004 fbd4 	bl	8007aba <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003312:	2100      	movs	r1, #0
 8003314:	4620      	mov	r0, r4
 8003316:	f7ff ff31 	bl	800317c <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800331a:	6820      	ldr	r0, [r4, #0]
 800331c:	f001 fb91 	bl	8004a42 <USB_ReadInterrupts>
 8003320:	0447      	lsls	r7, r0, #17
 8003322:	d508      	bpl.n	8003336 <HAL_PCD_IRQHandler+0x6e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003324:	6822      	ldr	r2, [r4, #0]
 8003326:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800332a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800332e:	041b      	lsls	r3, r3, #16
 8003330:	0c1b      	lsrs	r3, r3, #16
 8003332:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003336:	6820      	ldr	r0, [r4, #0]
 8003338:	f001 fb83 	bl	8004a42 <USB_ReadInterrupts>
 800333c:	0486      	lsls	r6, r0, #18
 800333e:	d508      	bpl.n	8003352 <HAL_PCD_IRQHandler+0x8a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003340:	6822      	ldr	r2, [r4, #0]
 8003342:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003346:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800334a:	041b      	lsls	r3, r3, #16
 800334c:	0c1b      	lsrs	r3, r3, #16
 800334e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003352:	6820      	ldr	r0, [r4, #0]
 8003354:	f001 fb75 	bl	8004a42 <USB_ReadInterrupts>
 8003358:	04c5      	lsls	r5, r0, #19
 800335a:	d51c      	bpl.n	8003396 <HAL_PCD_IRQHandler+0xce>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800335c:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 800335e:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003360:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003364:	f023 0304 	bic.w	r3, r3, #4
 8003368:	041b      	lsls	r3, r3, #16
 800336a:	0c1b      	lsrs	r3, r3, #16
 800336c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003370:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8003374:	f023 0308 	bic.w	r3, r3, #8
 8003378:	041b      	lsls	r3, r3, #16
 800337a:	0c1b      	lsrs	r3, r3, #16
 800337c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8003380:	f004 fbbe 	bl	8007b00 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003384:	6822      	ldr	r2, [r4, #0]
 8003386:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800338a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800338e:	041b      	lsls	r3, r3, #16
 8003390:	0c1b      	lsrs	r3, r3, #16
 8003392:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003396:	6820      	ldr	r0, [r4, #0]
 8003398:	f001 fb53 	bl	8004a42 <USB_ReadInterrupts>
 800339c:	0500      	lsls	r0, r0, #20
 800339e:	d524      	bpl.n	80033ea <HAL_PCD_IRQHandler+0x122>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80033a0:	6820      	ldr	r0, [r4, #0]
 80033a2:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80033a6:	f043 0308 	orr.w	r3, r3, #8
 80033aa:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80033ae:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80033b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033b6:	041b      	lsls	r3, r3, #16
 80033b8:	0c1b      	lsrs	r3, r3, #16
 80033ba:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80033be:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80033c2:	f043 0304 	orr.w	r3, r3, #4
 80033c6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80033ca:	f001 fb3a 	bl	8004a42 <USB_ReadInterrupts>
 80033ce:	04c1      	lsls	r1, r0, #19
 80033d0:	d508      	bpl.n	80033e4 <HAL_PCD_IRQHandler+0x11c>
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80033d2:	6822      	ldr	r2, [r4, #0]
 80033d4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80033d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033dc:	041b      	lsls	r3, r3, #16
 80033de:	0c1b      	lsrs	r3, r3, #16
 80033e0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SuspendCallback(hpcd);
 80033e4:	4620      	mov	r0, r4
 80033e6:	f004 fb7b 	bl	8007ae0 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80033ea:	6820      	ldr	r0, [r4, #0]
 80033ec:	f001 fb29 	bl	8004a42 <USB_ReadInterrupts>
 80033f0:	0582      	lsls	r2, r0, #22
 80033f2:	d50b      	bpl.n	800340c <HAL_PCD_IRQHandler+0x144>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80033f4:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 80033f6:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80033f8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80033fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003400:	041b      	lsls	r3, r3, #16
 8003402:	0c1b      	lsrs	r3, r3, #16
 8003404:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8003408:	f004 fb53 	bl	8007ab2 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800340c:	6820      	ldr	r0, [r4, #0]
 800340e:	f001 fb18 	bl	8004a42 <USB_ReadInterrupts>
 8003412:	05c3      	lsls	r3, r0, #23
 8003414:	d508      	bpl.n	8003428 <HAL_PCD_IRQHandler+0x160>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003416:	6822      	ldr	r2, [r4, #0]
 8003418:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800341c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003420:	041b      	lsls	r3, r3, #16
 8003422:	0c1b      	lsrs	r3, r3, #16
 8003424:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8003428:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 800342c:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
 8003430:	b289      	uxth	r1, r1
    if (epindex == 0U)
 8003432:	f011 060f 	ands.w	r6, r1, #15
 8003436:	f040 80b1 	bne.w	800359c <HAL_PCD_IRQHandler+0x2d4>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800343a:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800343e:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003440:	d12a      	bne.n	8003498 <HAL_PCD_IRQHandler+0x1d0>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003442:	ea09 0303 	and.w	r3, r9, r3
 8003446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800344a:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800344c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003450:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8003454:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003458:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800345c:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8003460:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003462:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003466:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8003468:	4413      	add	r3, r2
 800346a:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800346c:	4620      	mov	r0, r4
 800346e:	f004 fb19 	bl	8007aa4 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003472:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8003476:	2b00      	cmp	r3, #0
 8003478:	f43f af34 	beq.w	80032e4 <HAL_PCD_IRQHandler+0x1c>
 800347c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800347e:	2a00      	cmp	r2, #0
 8003480:	f47f af30 	bne.w	80032e4 <HAL_PCD_IRQHandler+0x1c>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003484:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8003488:	6821      	ldr	r1, [r4, #0]
 800348a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800348e:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003492:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8003496:	e725      	b.n	80032e4 <HAL_PCD_IRQHandler+0x1c>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003498:	b29b      	uxth	r3, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800349a:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
 800349e:	d020      	beq.n	80034e2 <HAL_PCD_IRQHandler+0x21a>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80034a0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80034a4:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80034a8:	f504 710c 	add.w	r1, r4, #560	; 0x230
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80034ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80034b0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80034b4:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80034b8:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 80034bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80034c0:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80034c4:	f001 fba6 	bl	8004c14 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80034c8:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80034ca:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80034cc:	8813      	ldrh	r3, [r2, #0]
 80034ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d2:	051b      	lsls	r3, r3, #20
 80034d4:	0d1b      	lsrs	r3, r3, #20
 80034d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034da:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80034dc:	f004 fad4 	bl	8007a88 <HAL_PCD_SetupStageCallback>
 80034e0:	e700      	b.n	80032e4 <HAL_PCD_IRQHandler+0x1c>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80034e2:	041f      	lsls	r7, r3, #16
 80034e4:	f57f aefe 	bpl.w	80032e4 <HAL_PCD_IRQHandler+0x1c>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80034e8:	8803      	ldrh	r3, [r0, #0]
 80034ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ee:	051b      	lsls	r3, r3, #20
 80034f0:	0d1b      	lsrs	r3, r3, #20
 80034f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034f6:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80034f8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80034fc:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 8003500:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003504:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003508:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 800350c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003510:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003514:	b18b      	cbz	r3, 800353a <HAL_PCD_IRQHandler+0x272>
 8003516:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 800351a:	b171      	cbz	r1, 800353a <HAL_PCD_IRQHandler+0x272>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800351c:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 8003520:	f001 fb78 	bl	8004c14 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8003524:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 8003528:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800352c:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 800352e:	4413      	add	r3, r2
 8003530:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003534:	4620      	mov	r0, r4
 8003536:	f004 faad 	bl	8007a94 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800353a:	6821      	ldr	r1, [r4, #0]
 800353c:	f8d4 5138 	ldr.w	r5, [r4, #312]	; 0x138
 8003540:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8003544:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 8003548:	b29b      	uxth	r3, r3
 800354a:	b9bd      	cbnz	r5, 800357c <HAL_PCD_IRQHandler+0x2b4>
 800354c:	5ac2      	ldrh	r2, [r0, r3]
 800354e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003552:	0412      	lsls	r2, r2, #16
 8003554:	0c12      	lsrs	r2, r2, #16
 8003556:	52c2      	strh	r2, [r0, r3]
 8003558:	5ac2      	ldrh	r2, [r0, r3]
 800355a:	ea4a 0202 	orr.w	r2, sl, r2
 800355e:	b292      	uxth	r2, r2
 8003560:	52c2      	strh	r2, [r0, r3]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003562:	880b      	ldrh	r3, [r1, #0]
 8003564:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800356c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003570:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003578:	800b      	strh	r3, [r1, #0]
 800357a:	e6b3      	b.n	80032e4 <HAL_PCD_IRQHandler+0x1c>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800357c:	2d3e      	cmp	r5, #62	; 0x3e
 800357e:	d805      	bhi.n	800358c <HAL_PCD_IRQHandler+0x2c4>
 8003580:	086a      	lsrs	r2, r5, #1
 8003582:	07ee      	lsls	r6, r5, #31
 8003584:	bf48      	it	mi
 8003586:	3201      	addmi	r2, #1
 8003588:	0292      	lsls	r2, r2, #10
 800358a:	e7e8      	b.n	800355e <HAL_PCD_IRQHandler+0x296>
 800358c:	096a      	lsrs	r2, r5, #5
 800358e:	06ed      	lsls	r5, r5, #27
 8003590:	bf08      	it	eq
 8003592:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8003596:	ea4a 2282 	orr.w	r2, sl, r2, lsl #10
 800359a:	e7e0      	b.n	800355e <HAL_PCD_IRQHandler+0x296>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800359c:	f830 8026 	ldrh.w	r8, [r0, r6, lsl #2]
 80035a0:	fa1f f888 	uxth.w	r8, r8
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80035a4:	f418 4f00 	tst.w	r8, #32768	; 0x8000
 80035a8:	d03c      	beq.n	8003624 <HAL_PCD_IRQHandler+0x35c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80035aa:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 80035ae:	0177      	lsls	r7, r6, #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80035b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b4:	051b      	lsls	r3, r3, #20
 80035b6:	0d1b      	lsrs	r3, r3, #20
 80035b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035bc:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 80035c0:	19e1      	adds	r1, r4, r7
 80035c2:	f891 3134 	ldrb.w	r3, [r1, #308]	; 0x134
 80035c6:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d150      	bne.n	8003670 <HAL_PCD_IRQHandler+0x3a8>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80035ce:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80035d2:	f891 5128 	ldrb.w	r5, [r1, #296]	; 0x128
 80035d6:	3306      	adds	r3, #6
 80035d8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80035dc:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 80035e0:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 80035e4:	b135      	cbz	r5, 80035f4 <HAL_PCD_IRQHandler+0x32c>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80035e6:	f8b1 212e 	ldrh.w	r2, [r1, #302]	; 0x12e
 80035ea:	462b      	mov	r3, r5
 80035ec:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 80035f0:	f001 fb10 	bl	8004c14 <USB_ReadPMA>
 80035f4:	19e1      	adds	r1, r4, r7
        ep->xfer_count += count;
 80035f6:	f8d1 3144 	ldr.w	r3, [r1, #324]	; 0x144
        ep->xfer_buff += count;
 80035fa:	f8d1 213c 	ldr.w	r2, [r1, #316]	; 0x13c
        ep->xfer_count += count;
 80035fe:	442b      	add	r3, r5
 8003600:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003604:	f8d1 3140 	ldr.w	r3, [r1, #320]	; 0x140
        ep->xfer_buff += count;
 8003608:	442a      	add	r2, r5
 800360a:	f8c1 213c 	str.w	r2, [r1, #316]	; 0x13c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800360e:	b11b      	cbz	r3, 8003618 <HAL_PCD_IRQHandler+0x350>
 8003610:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
 8003614:	4285      	cmp	r5, r0
 8003616:	d25d      	bcs.n	80036d4 <HAL_PCD_IRQHandler+0x40c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003618:	4427      	add	r7, r4
 800361a:	f897 1128 	ldrb.w	r1, [r7, #296]	; 0x128
 800361e:	4620      	mov	r0, r4
 8003620:	f004 fa38 	bl	8007a94 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003624:	f018 0f80 	tst.w	r8, #128	; 0x80
 8003628:	f43f ae5c 	beq.w	80032e4 <HAL_PCD_IRQHandler+0x1c>
 800362c:	6823      	ldr	r3, [r4, #0]
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800362e:	4620      	mov	r0, r4
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003630:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 8003634:	ea09 0202 	and.w	r2, r9, r2
 8003638:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800363c:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003640:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8003644:	eb04 1646 	add.w	r6, r4, r6, lsl #5
 8003648:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800364c:	3202      	adds	r2, #2
 800364e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8003652:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8003656:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff += ep->xfer_count;
 800365a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800365c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003660:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8003662:	441a      	add	r2, r3
        if (ep->xfer_len == 0U)
 8003664:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 8003666:	63f2      	str	r2, [r6, #60]	; 0x3c
        if (ep->xfer_len == 0U)
 8003668:	bbd3      	cbnz	r3, 80036e0 <HAL_PCD_IRQHandler+0x418>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800366a:	f004 fa1b 	bl	8007aa4 <HAL_PCD_DataInStageCallback>
 800366e:	e639      	b.n	80032e4 <HAL_PCD_IRQHandler+0x1c>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003670:	f891 3128 	ldrb.w	r3, [r1, #296]	; 0x128
 8003674:	f830 5023 	ldrh.w	r5, [r0, r3, lsl #2]
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	f415 4f80 	tst.w	r5, #16384	; 0x4000
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800367e:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8003682:	442b      	add	r3, r5
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003684:	d01b      	beq.n	80036be <HAL_PCD_IRQHandler+0x3f6>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003686:	3302      	adds	r3, #2
 8003688:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 800368c:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8003690:	b135      	cbz	r5, 80036a0 <HAL_PCD_IRQHandler+0x3d8>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003692:	462b      	mov	r3, r5
 8003694:	f8b1 2130 	ldrh.w	r2, [r1, #304]	; 0x130
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003698:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 800369c:	f001 faba 	bl	8004c14 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80036a0:	19e3      	adds	r3, r4, r7
 80036a2:	f893 1128 	ldrb.w	r1, [r3, #296]	; 0x128
 80036a6:	6822      	ldr	r2, [r4, #0]
 80036a8:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80036ac:	ea0b 0303 	and.w	r3, fp, r3
 80036b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80036b8:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80036bc:	e79a      	b.n	80035f4 <HAL_PCD_IRQHandler+0x32c>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80036be:	3306      	adds	r3, #6
 80036c0:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 80036c4:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 80036c8:	2d00      	cmp	r5, #0
 80036ca:	d0e9      	beq.n	80036a0 <HAL_PCD_IRQHandler+0x3d8>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80036cc:	462b      	mov	r3, r5
 80036ce:	f8b1 2132 	ldrh.w	r2, [r1, #306]	; 0x132
 80036d2:	e7e1      	b.n	8003698 <HAL_PCD_IRQHandler+0x3d0>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80036d4:	f891 1128 	ldrb.w	r1, [r1, #296]	; 0x128
 80036d8:	4620      	mov	r0, r4
 80036da:	f7ff fdbf 	bl	800325c <HAL_PCD_EP_Receive>
 80036de:	e7a1      	b.n	8003624 <HAL_PCD_IRQHandler+0x35c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80036e0:	f7ff fddb 	bl	800329a <HAL_PCD_EP_Transmit>
 80036e4:	e5fe      	b.n	80032e4 <HAL_PCD_IRQHandler+0x1c>
 80036e6:	bf00      	nop
 80036e8:	ffff8f0f 	.word	0xffff8f0f
 80036ec:	ffff8000 	.word	0xffff8000
 80036f0:	ffff8f8f 	.word	0xffff8f8f

080036f4 <HAL_PCD_EP_SetStall>:
{
 80036f4:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80036f6:	6843      	ldr	r3, [r0, #4]
 80036f8:	f001 0507 	and.w	r5, r1, #7
 80036fc:	429d      	cmp	r5, r3
{
 80036fe:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003700:	d828      	bhi.n	8003754 <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 8003702:	060b      	lsls	r3, r1, #24
 8003704:	d51d      	bpl.n	8003742 <HAL_PCD_EP_SetStall+0x4e>
    ep->is_in = 1U;
 8003706:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003708:	016b      	lsls	r3, r5, #5
 800370a:	f103 0128 	add.w	r1, r3, #40	; 0x28
    ep->is_in = 1U;
 800370e:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003710:	4401      	add	r1, r0
    ep->is_in = 1U;
 8003712:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ep->is_stall = 1U;
 8003716:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8003718:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800371a:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800371c:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8003720:	429a      	cmp	r2, r3
 8003722:	d019      	beq.n	8003758 <HAL_PCD_EP_SetStall+0x64>
 8003724:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003728:	6820      	ldr	r0, [r4, #0]
 800372a:	f001 f921 	bl	8004970 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800372e:	b925      	cbnz	r5, 800373a <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003730:	f504 710c 	add.w	r1, r4, #560	; 0x230
 8003734:	6820      	ldr	r0, [r4, #0]
 8003736:	f001 f987 	bl	8004a48 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 800373a:	2000      	movs	r0, #0
 800373c:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
}
 8003740:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8003742:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8003744:	014b      	lsls	r3, r1, #5
 8003746:	f503 7194 	add.w	r1, r3, #296	; 0x128
    ep->is_in = 0U;
 800374a:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 800374c:	4401      	add	r1, r0
    ep->is_in = 0U;
 800374e:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 8003752:	e7e0      	b.n	8003716 <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 8003754:	2001      	movs	r0, #1
 8003756:	e7f3      	b.n	8003740 <HAL_PCD_EP_SetStall+0x4c>
  __HAL_LOCK(hpcd);
 8003758:	2002      	movs	r0, #2
 800375a:	e7f1      	b.n	8003740 <HAL_PCD_EP_SetStall+0x4c>

0800375c <HAL_PCD_EP_ClrStall>:
{
 800375c:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800375e:	6843      	ldr	r3, [r0, #4]
 8003760:	f001 020f 	and.w	r2, r1, #15
 8003764:	429a      	cmp	r2, r3
{
 8003766:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003768:	d827      	bhi.n	80037ba <HAL_PCD_EP_ClrStall+0x5e>
 800376a:	f001 0207 	and.w	r2, r1, #7
  if ((0x80U & ep_addr) == 0x80U)
 800376e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003772:	ea4f 1342 	mov.w	r3, r2, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003776:	bf14      	ite	ne
 8003778:	f103 0128 	addne.w	r1, r3, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800377c:	f503 7194 	addeq.w	r1, r3, #296	; 0x128
 8003780:	4418      	add	r0, r3
  ep->is_stall = 0U;
 8003782:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 8003786:	bf15      	itete	ne
 8003788:	2301      	movne	r3, #1
    ep->is_in = 0U;
 800378a:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800378c:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800378e:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 8003790:	bf14      	ite	ne
 8003792:	f880 3029 	strbne.w	r3, [r0, #41]	; 0x29
    ep->is_in = 0U;
 8003796:	f880 3129 	strbeq.w	r3, [r0, #297]	; 0x129
  ep->is_stall = 0U;
 800379a:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800379c:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800379e:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d00b      	beq.n	80037be <HAL_PCD_EP_ClrStall+0x62>
 80037a6:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80037a8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80037aa:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80037ae:	f001 f8fb 	bl	80049a8 <USB_EPClearStall>
  return HAL_OK;
 80037b2:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 80037b4:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228
}
 80037b8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80037ba:	2001      	movs	r0, #1
 80037bc:	e7fc      	b.n	80037b8 <HAL_PCD_EP_ClrStall+0x5c>
  __HAL_LOCK(hpcd);
 80037be:	2002      	movs	r0, #2
 80037c0:	e7fa      	b.n	80037b8 <HAL_PCD_EP_ClrStall+0x5c>

080037c2 <HAL_PCDEx_PMAConfig>:
                                       uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80037c2:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037c6:	bf1b      	ittet	ne
 80037c8:	f001 0107 	andne.w	r1, r1, #7
 80037cc:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80037d0:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037d4:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 80037d6:	bf08      	it	eq
 80037d8:	f500 7094 	addeq.w	r0, r0, #296	; 0x128
 80037dc:	b299      	uxth	r1, r3
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80037de:	b91a      	cbnz	r2, 80037e8 <HAL_PCDEx_PMAConfig+0x26>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80037e0:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80037e2:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 80037e4:	2000      	movs	r0, #0
 80037e6:	4770      	bx	lr
    ep->doublebuffer = 1U;
 80037e8:	2201      	movs	r2, #1
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80037ea:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 80037ec:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80037ee:	8101      	strh	r1, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80037f0:	8143      	strh	r3, [r0, #10]
 80037f2:	e7f7      	b.n	80037e4 <HAL_PCDEx_PMAConfig+0x22>

080037f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037f8:	4605      	mov	r5, r0
 80037fa:	b908      	cbnz	r0, 8003800 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 80037fc:	2001      	movs	r0, #1
 80037fe:	e03c      	b.n	800387a <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003800:	6803      	ldr	r3, [r0, #0]
 8003802:	07db      	lsls	r3, r3, #31
 8003804:	d410      	bmi.n	8003828 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003806:	682b      	ldr	r3, [r5, #0]
 8003808:	079f      	lsls	r7, r3, #30
 800380a:	d45d      	bmi.n	80038c8 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800380c:	682b      	ldr	r3, [r5, #0]
 800380e:	0719      	lsls	r1, r3, #28
 8003810:	f100 8094 	bmi.w	800393c <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003814:	682b      	ldr	r3, [r5, #0]
 8003816:	075a      	lsls	r2, r3, #29
 8003818:	f100 80be 	bmi.w	8003998 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800381c:	69e8      	ldr	r0, [r5, #28]
 800381e:	2800      	cmp	r0, #0
 8003820:	f040 812c 	bne.w	8003a7c <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8003824:	2000      	movs	r0, #0
 8003826:	e028      	b.n	800387a <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003828:	4c8f      	ldr	r4, [pc, #572]	; (8003a68 <HAL_RCC_OscConfig+0x274>)
 800382a:	6863      	ldr	r3, [r4, #4]
 800382c:	f003 030c 	and.w	r3, r3, #12
 8003830:	2b04      	cmp	r3, #4
 8003832:	d007      	beq.n	8003844 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003834:	6863      	ldr	r3, [r4, #4]
 8003836:	f003 030c 	and.w	r3, r3, #12
 800383a:	2b08      	cmp	r3, #8
 800383c:	d109      	bne.n	8003852 <HAL_RCC_OscConfig+0x5e>
 800383e:	6863      	ldr	r3, [r4, #4]
 8003840:	03de      	lsls	r6, r3, #15
 8003842:	d506      	bpl.n	8003852 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003844:	6823      	ldr	r3, [r4, #0]
 8003846:	039c      	lsls	r4, r3, #14
 8003848:	d5dd      	bpl.n	8003806 <HAL_RCC_OscConfig+0x12>
 800384a:	686b      	ldr	r3, [r5, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1da      	bne.n	8003806 <HAL_RCC_OscConfig+0x12>
 8003850:	e7d4      	b.n	80037fc <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003852:	686b      	ldr	r3, [r5, #4]
 8003854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003858:	d112      	bne.n	8003880 <HAL_RCC_OscConfig+0x8c>
 800385a:	6823      	ldr	r3, [r4, #0]
 800385c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003860:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003862:	f7fe fcd5 	bl	8002210 <HAL_GetTick>
 8003866:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003868:	6823      	ldr	r3, [r4, #0]
 800386a:	0398      	lsls	r0, r3, #14
 800386c:	d4cb      	bmi.n	8003806 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800386e:	f7fe fccf 	bl	8002210 <HAL_GetTick>
 8003872:	1b80      	subs	r0, r0, r6
 8003874:	2864      	cmp	r0, #100	; 0x64
 8003876:	d9f7      	bls.n	8003868 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8003878:	2003      	movs	r0, #3
}
 800387a:	b002      	add	sp, #8
 800387c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003880:	b99b      	cbnz	r3, 80038aa <HAL_RCC_OscConfig+0xb6>
 8003882:	6823      	ldr	r3, [r4, #0]
 8003884:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003888:	6023      	str	r3, [r4, #0]
 800388a:	6823      	ldr	r3, [r4, #0]
 800388c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003890:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003892:	f7fe fcbd 	bl	8002210 <HAL_GetTick>
 8003896:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003898:	6823      	ldr	r3, [r4, #0]
 800389a:	0399      	lsls	r1, r3, #14
 800389c:	d5b3      	bpl.n	8003806 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800389e:	f7fe fcb7 	bl	8002210 <HAL_GetTick>
 80038a2:	1b80      	subs	r0, r0, r6
 80038a4:	2864      	cmp	r0, #100	; 0x64
 80038a6:	d9f7      	bls.n	8003898 <HAL_RCC_OscConfig+0xa4>
 80038a8:	e7e6      	b.n	8003878 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038ae:	6823      	ldr	r3, [r4, #0]
 80038b0:	d103      	bne.n	80038ba <HAL_RCC_OscConfig+0xc6>
 80038b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038b6:	6023      	str	r3, [r4, #0]
 80038b8:	e7cf      	b.n	800385a <HAL_RCC_OscConfig+0x66>
 80038ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038be:	6023      	str	r3, [r4, #0]
 80038c0:	6823      	ldr	r3, [r4, #0]
 80038c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038c6:	e7cb      	b.n	8003860 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038c8:	4c67      	ldr	r4, [pc, #412]	; (8003a68 <HAL_RCC_OscConfig+0x274>)
 80038ca:	6863      	ldr	r3, [r4, #4]
 80038cc:	f013 0f0c 	tst.w	r3, #12
 80038d0:	d007      	beq.n	80038e2 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80038d2:	6863      	ldr	r3, [r4, #4]
 80038d4:	f003 030c 	and.w	r3, r3, #12
 80038d8:	2b08      	cmp	r3, #8
 80038da:	d110      	bne.n	80038fe <HAL_RCC_OscConfig+0x10a>
 80038dc:	6863      	ldr	r3, [r4, #4]
 80038de:	03da      	lsls	r2, r3, #15
 80038e0:	d40d      	bmi.n	80038fe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038e2:	6823      	ldr	r3, [r4, #0]
 80038e4:	079b      	lsls	r3, r3, #30
 80038e6:	d502      	bpl.n	80038ee <HAL_RCC_OscConfig+0xfa>
 80038e8:	692b      	ldr	r3, [r5, #16]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d186      	bne.n	80037fc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ee:	6823      	ldr	r3, [r4, #0]
 80038f0:	696a      	ldr	r2, [r5, #20]
 80038f2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80038f6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80038fa:	6023      	str	r3, [r4, #0]
 80038fc:	e786      	b.n	800380c <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038fe:	692a      	ldr	r2, [r5, #16]
 8003900:	4b5a      	ldr	r3, [pc, #360]	; (8003a6c <HAL_RCC_OscConfig+0x278>)
 8003902:	b16a      	cbz	r2, 8003920 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8003904:	2201      	movs	r2, #1
 8003906:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003908:	f7fe fc82 	bl	8002210 <HAL_GetTick>
 800390c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800390e:	6823      	ldr	r3, [r4, #0]
 8003910:	079f      	lsls	r7, r3, #30
 8003912:	d4ec      	bmi.n	80038ee <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003914:	f7fe fc7c 	bl	8002210 <HAL_GetTick>
 8003918:	1b80      	subs	r0, r0, r6
 800391a:	2802      	cmp	r0, #2
 800391c:	d9f7      	bls.n	800390e <HAL_RCC_OscConfig+0x11a>
 800391e:	e7ab      	b.n	8003878 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8003920:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003922:	f7fe fc75 	bl	8002210 <HAL_GetTick>
 8003926:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003928:	6823      	ldr	r3, [r4, #0]
 800392a:	0798      	lsls	r0, r3, #30
 800392c:	f57f af6e 	bpl.w	800380c <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003930:	f7fe fc6e 	bl	8002210 <HAL_GetTick>
 8003934:	1b80      	subs	r0, r0, r6
 8003936:	2802      	cmp	r0, #2
 8003938:	d9f6      	bls.n	8003928 <HAL_RCC_OscConfig+0x134>
 800393a:	e79d      	b.n	8003878 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800393c:	69aa      	ldr	r2, [r5, #24]
 800393e:	4c4a      	ldr	r4, [pc, #296]	; (8003a68 <HAL_RCC_OscConfig+0x274>)
 8003940:	4b4b      	ldr	r3, [pc, #300]	; (8003a70 <HAL_RCC_OscConfig+0x27c>)
 8003942:	b1da      	cbz	r2, 800397c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8003944:	2201      	movs	r2, #1
 8003946:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003948:	f7fe fc62 	bl	8002210 <HAL_GetTick>
 800394c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800394e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003950:	079b      	lsls	r3, r3, #30
 8003952:	d50d      	bpl.n	8003970 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003954:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003958:	4b46      	ldr	r3, [pc, #280]	; (8003a74 <HAL_RCC_OscConfig+0x280>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003960:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8003962:	bf00      	nop
  }
  while (Delay --);
 8003964:	9b01      	ldr	r3, [sp, #4]
 8003966:	1e5a      	subs	r2, r3, #1
 8003968:	9201      	str	r2, [sp, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1f9      	bne.n	8003962 <HAL_RCC_OscConfig+0x16e>
 800396e:	e751      	b.n	8003814 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003970:	f7fe fc4e 	bl	8002210 <HAL_GetTick>
 8003974:	1b80      	subs	r0, r0, r6
 8003976:	2802      	cmp	r0, #2
 8003978:	d9e9      	bls.n	800394e <HAL_RCC_OscConfig+0x15a>
 800397a:	e77d      	b.n	8003878 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 800397c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800397e:	f7fe fc47 	bl	8002210 <HAL_GetTick>
 8003982:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003984:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003986:	079f      	lsls	r7, r3, #30
 8003988:	f57f af44 	bpl.w	8003814 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800398c:	f7fe fc40 	bl	8002210 <HAL_GetTick>
 8003990:	1b80      	subs	r0, r0, r6
 8003992:	2802      	cmp	r0, #2
 8003994:	d9f6      	bls.n	8003984 <HAL_RCC_OscConfig+0x190>
 8003996:	e76f      	b.n	8003878 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003998:	4c33      	ldr	r4, [pc, #204]	; (8003a68 <HAL_RCC_OscConfig+0x274>)
 800399a:	69e3      	ldr	r3, [r4, #28]
 800399c:	00d8      	lsls	r0, r3, #3
 800399e:	d424      	bmi.n	80039ea <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 80039a0:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80039a2:	69e3      	ldr	r3, [r4, #28]
 80039a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a8:	61e3      	str	r3, [r4, #28]
 80039aa:	69e3      	ldr	r3, [r4, #28]
 80039ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b4:	4e30      	ldr	r6, [pc, #192]	; (8003a78 <HAL_RCC_OscConfig+0x284>)
 80039b6:	6833      	ldr	r3, [r6, #0]
 80039b8:	05d9      	lsls	r1, r3, #23
 80039ba:	d518      	bpl.n	80039ee <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039bc:	68eb      	ldr	r3, [r5, #12]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d126      	bne.n	8003a10 <HAL_RCC_OscConfig+0x21c>
 80039c2:	6a23      	ldr	r3, [r4, #32]
 80039c4:	f043 0301 	orr.w	r3, r3, #1
 80039c8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80039ca:	f7fe fc21 	bl	8002210 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ce:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80039d2:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d4:	6a23      	ldr	r3, [r4, #32]
 80039d6:	079b      	lsls	r3, r3, #30
 80039d8:	d53f      	bpl.n	8003a5a <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 80039da:	2f00      	cmp	r7, #0
 80039dc:	f43f af1e 	beq.w	800381c <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80039e0:	69e3      	ldr	r3, [r4, #28]
 80039e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039e6:	61e3      	str	r3, [r4, #28]
 80039e8:	e718      	b.n	800381c <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80039ea:	2700      	movs	r7, #0
 80039ec:	e7e2      	b.n	80039b4 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ee:	6833      	ldr	r3, [r6, #0]
 80039f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039f4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80039f6:	f7fe fc0b 	bl	8002210 <HAL_GetTick>
 80039fa:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039fc:	6833      	ldr	r3, [r6, #0]
 80039fe:	05da      	lsls	r2, r3, #23
 8003a00:	d4dc      	bmi.n	80039bc <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a02:	f7fe fc05 	bl	8002210 <HAL_GetTick>
 8003a06:	eba0 0008 	sub.w	r0, r0, r8
 8003a0a:	2864      	cmp	r0, #100	; 0x64
 8003a0c:	d9f6      	bls.n	80039fc <HAL_RCC_OscConfig+0x208>
 8003a0e:	e733      	b.n	8003878 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a10:	b9ab      	cbnz	r3, 8003a3e <HAL_RCC_OscConfig+0x24a>
 8003a12:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a14:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a18:	f023 0301 	bic.w	r3, r3, #1
 8003a1c:	6223      	str	r3, [r4, #32]
 8003a1e:	6a23      	ldr	r3, [r4, #32]
 8003a20:	f023 0304 	bic.w	r3, r3, #4
 8003a24:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8003a26:	f7fe fbf3 	bl	8002210 <HAL_GetTick>
 8003a2a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a2c:	6a23      	ldr	r3, [r4, #32]
 8003a2e:	0798      	lsls	r0, r3, #30
 8003a30:	d5d3      	bpl.n	80039da <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a32:	f7fe fbed 	bl	8002210 <HAL_GetTick>
 8003a36:	1b80      	subs	r0, r0, r6
 8003a38:	4540      	cmp	r0, r8
 8003a3a:	d9f7      	bls.n	8003a2c <HAL_RCC_OscConfig+0x238>
 8003a3c:	e71c      	b.n	8003878 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a3e:	2b05      	cmp	r3, #5
 8003a40:	6a23      	ldr	r3, [r4, #32]
 8003a42:	d103      	bne.n	8003a4c <HAL_RCC_OscConfig+0x258>
 8003a44:	f043 0304 	orr.w	r3, r3, #4
 8003a48:	6223      	str	r3, [r4, #32]
 8003a4a:	e7ba      	b.n	80039c2 <HAL_RCC_OscConfig+0x1ce>
 8003a4c:	f023 0301 	bic.w	r3, r3, #1
 8003a50:	6223      	str	r3, [r4, #32]
 8003a52:	6a23      	ldr	r3, [r4, #32]
 8003a54:	f023 0304 	bic.w	r3, r3, #4
 8003a58:	e7b6      	b.n	80039c8 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a5a:	f7fe fbd9 	bl	8002210 <HAL_GetTick>
 8003a5e:	eba0 0008 	sub.w	r0, r0, r8
 8003a62:	42b0      	cmp	r0, r6
 8003a64:	d9b6      	bls.n	80039d4 <HAL_RCC_OscConfig+0x1e0>
 8003a66:	e707      	b.n	8003878 <HAL_RCC_OscConfig+0x84>
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	42420000 	.word	0x42420000
 8003a70:	42420480 	.word	0x42420480
 8003a74:	20000010 	.word	0x20000010
 8003a78:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a7c:	4b2a      	ldr	r3, [pc, #168]	; (8003b28 <HAL_RCC_OscConfig+0x334>)
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	461c      	mov	r4, r3
 8003a82:	f002 020c 	and.w	r2, r2, #12
 8003a86:	2a08      	cmp	r2, #8
 8003a88:	d03d      	beq.n	8003b06 <HAL_RCC_OscConfig+0x312>
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	4e27      	ldr	r6, [pc, #156]	; (8003b2c <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a8e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003a90:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a92:	d12b      	bne.n	8003aec <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8003a94:	f7fe fbbc 	bl	8002210 <HAL_GetTick>
 8003a98:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a9a:	6823      	ldr	r3, [r4, #0]
 8003a9c:	0199      	lsls	r1, r3, #6
 8003a9e:	d41f      	bmi.n	8003ae0 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003aa0:	6a2b      	ldr	r3, [r5, #32]
 8003aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa6:	d105      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003aa8:	6862      	ldr	r2, [r4, #4]
 8003aaa:	68a9      	ldr	r1, [r5, #8]
 8003aac:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ab4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8003ab6:	6862      	ldr	r2, [r4, #4]
 8003ab8:	430b      	orrs	r3, r1
 8003aba:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003ac6:	f7fe fba3 	bl	8002210 <HAL_GetTick>
 8003aca:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003acc:	6823      	ldr	r3, [r4, #0]
 8003ace:	019a      	lsls	r2, r3, #6
 8003ad0:	f53f aea8 	bmi.w	8003824 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad4:	f7fe fb9c 	bl	8002210 <HAL_GetTick>
 8003ad8:	1b40      	subs	r0, r0, r5
 8003ada:	2802      	cmp	r0, #2
 8003adc:	d9f6      	bls.n	8003acc <HAL_RCC_OscConfig+0x2d8>
 8003ade:	e6cb      	b.n	8003878 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ae0:	f7fe fb96 	bl	8002210 <HAL_GetTick>
 8003ae4:	1bc0      	subs	r0, r0, r7
 8003ae6:	2802      	cmp	r0, #2
 8003ae8:	d9d7      	bls.n	8003a9a <HAL_RCC_OscConfig+0x2a6>
 8003aea:	e6c5      	b.n	8003878 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8003aec:	f7fe fb90 	bl	8002210 <HAL_GetTick>
 8003af0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003af2:	6823      	ldr	r3, [r4, #0]
 8003af4:	019b      	lsls	r3, r3, #6
 8003af6:	f57f ae95 	bpl.w	8003824 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003afa:	f7fe fb89 	bl	8002210 <HAL_GetTick>
 8003afe:	1b40      	subs	r0, r0, r5
 8003b00:	2802      	cmp	r0, #2
 8003b02:	d9f6      	bls.n	8003af2 <HAL_RCC_OscConfig+0x2fe>
 8003b04:	e6b8      	b.n	8003878 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b06:	2801      	cmp	r0, #1
 8003b08:	f43f aeb7 	beq.w	800387a <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8003b0c:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b0e:	6a2b      	ldr	r3, [r5, #32]
 8003b10:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8003b14:	429a      	cmp	r2, r3
 8003b16:	f47f ae71 	bne.w	80037fc <HAL_RCC_OscConfig+0x8>
 8003b1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b1c:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8003b20:	1ac0      	subs	r0, r0, r3
 8003b22:	bf18      	it	ne
 8003b24:	2001      	movne	r0, #1
 8003b26:	e6a8      	b.n	800387a <HAL_RCC_OscConfig+0x86>
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	42420060 	.word	0x42420060

08003b30 <HAL_RCC_GetSysClockFreq>:
{
 8003b30:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003b32:	4b18      	ldr	r3, [pc, #96]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8003b34:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003b36:	ac02      	add	r4, sp, #8
 8003b38:	f103 0510 	add.w	r5, r3, #16
 8003b3c:	4622      	mov	r2, r4
 8003b3e:	6818      	ldr	r0, [r3, #0]
 8003b40:	6859      	ldr	r1, [r3, #4]
 8003b42:	3308      	adds	r3, #8
 8003b44:	c203      	stmia	r2!, {r0, r1}
 8003b46:	42ab      	cmp	r3, r5
 8003b48:	4614      	mov	r4, r2
 8003b4a:	d1f7      	bne.n	8003b3c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003b4c:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8003b50:	4911      	ldr	r1, [pc, #68]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003b52:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8003b56:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003b58:	f003 020c 	and.w	r2, r3, #12
 8003b5c:	2a08      	cmp	r2, #8
 8003b5e:	d117      	bne.n	8003b90 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b60:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8003b64:	a806      	add	r0, sp, #24
 8003b66:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b68:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b6a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b6e:	d50c      	bpl.n	8003b8a <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b70:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b72:	480a      	ldr	r0, [pc, #40]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b74:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b78:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b7a:	aa06      	add	r2, sp, #24
 8003b7c:	4413      	add	r3, r2
 8003b7e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b82:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8003b86:	b007      	add	sp, #28
 8003b88:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b8a:	4805      	ldr	r0, [pc, #20]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x70>)
 8003b8c:	4350      	muls	r0, r2
 8003b8e:	e7fa      	b.n	8003b86 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8003b90:	4802      	ldr	r0, [pc, #8]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8003b92:	e7f8      	b.n	8003b86 <HAL_RCC_GetSysClockFreq+0x56>
 8003b94:	08009d98 	.word	0x08009d98
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	007a1200 	.word	0x007a1200
 8003ba0:	003d0900 	.word	0x003d0900

08003ba4 <HAL_RCC_ClockConfig>:
{
 8003ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ba8:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8003baa:	4604      	mov	r4, r0
 8003bac:	b910      	cbnz	r0, 8003bb4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003bae:	2001      	movs	r0, #1
}
 8003bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bb4:	4a44      	ldr	r2, [pc, #272]	; (8003cc8 <HAL_RCC_ClockConfig+0x124>)
 8003bb6:	6813      	ldr	r3, [r2, #0]
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	428b      	cmp	r3, r1
 8003bbe:	d328      	bcc.n	8003c12 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bc0:	6821      	ldr	r1, [r4, #0]
 8003bc2:	078e      	lsls	r6, r1, #30
 8003bc4:	d430      	bmi.n	8003c28 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bc6:	07ca      	lsls	r2, r1, #31
 8003bc8:	d443      	bmi.n	8003c52 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bca:	4a3f      	ldr	r2, [pc, #252]	; (8003cc8 <HAL_RCC_ClockConfig+0x124>)
 8003bcc:	6813      	ldr	r3, [r2, #0]
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	42ab      	cmp	r3, r5
 8003bd4:	d865      	bhi.n	8003ca2 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd6:	6822      	ldr	r2, [r4, #0]
 8003bd8:	4d3c      	ldr	r5, [pc, #240]	; (8003ccc <HAL_RCC_ClockConfig+0x128>)
 8003bda:	f012 0f04 	tst.w	r2, #4
 8003bde:	d16c      	bne.n	8003cba <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be0:	0713      	lsls	r3, r2, #28
 8003be2:	d506      	bpl.n	8003bf2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003be4:	686b      	ldr	r3, [r5, #4]
 8003be6:	6922      	ldr	r2, [r4, #16]
 8003be8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003bec:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003bf0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bf2:	f7ff ff9d 	bl	8003b30 <HAL_RCC_GetSysClockFreq>
 8003bf6:	686b      	ldr	r3, [r5, #4]
 8003bf8:	4a35      	ldr	r2, [pc, #212]	; (8003cd0 <HAL_RCC_ClockConfig+0x12c>)
 8003bfa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003bfe:	5cd3      	ldrb	r3, [r2, r3]
 8003c00:	40d8      	lsrs	r0, r3
 8003c02:	4b34      	ldr	r3, [pc, #208]	; (8003cd4 <HAL_RCC_ClockConfig+0x130>)
 8003c04:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003c06:	4b34      	ldr	r3, [pc, #208]	; (8003cd8 <HAL_RCC_ClockConfig+0x134>)
 8003c08:	6818      	ldr	r0, [r3, #0]
 8003c0a:	f7fe fabf 	bl	800218c <HAL_InitTick>
  return HAL_OK;
 8003c0e:	2000      	movs	r0, #0
 8003c10:	e7ce      	b.n	8003bb0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c12:	6813      	ldr	r3, [r2, #0]
 8003c14:	f023 0307 	bic.w	r3, r3, #7
 8003c18:	430b      	orrs	r3, r1
 8003c1a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c1c:	6813      	ldr	r3, [r2, #0]
 8003c1e:	f003 0307 	and.w	r3, r3, #7
 8003c22:	428b      	cmp	r3, r1
 8003c24:	d1c3      	bne.n	8003bae <HAL_RCC_ClockConfig+0xa>
 8003c26:	e7cb      	b.n	8003bc0 <HAL_RCC_ClockConfig+0x1c>
 8003c28:	4b28      	ldr	r3, [pc, #160]	; (8003ccc <HAL_RCC_ClockConfig+0x128>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c2a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c2e:	bf1e      	ittt	ne
 8003c30:	685a      	ldrne	r2, [r3, #4]
 8003c32:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8003c36:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c38:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c3a:	bf42      	ittt	mi
 8003c3c:	685a      	ldrmi	r2, [r3, #4]
 8003c3e:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8003c42:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	68a0      	ldr	r0, [r4, #8]
 8003c48:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003c4c:	4302      	orrs	r2, r0
 8003c4e:	605a      	str	r2, [r3, #4]
 8003c50:	e7b9      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c52:	6862      	ldr	r2, [r4, #4]
 8003c54:	4e1d      	ldr	r6, [pc, #116]	; (8003ccc <HAL_RCC_ClockConfig+0x128>)
 8003c56:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c58:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c5a:	d11a      	bne.n	8003c92 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c5c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c60:	d0a5      	beq.n	8003bae <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c62:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c64:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c68:	f023 0303 	bic.w	r3, r3, #3
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003c70:	f7fe face 	bl	8002210 <HAL_GetTick>
 8003c74:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c76:	6873      	ldr	r3, [r6, #4]
 8003c78:	6862      	ldr	r2, [r4, #4]
 8003c7a:	f003 030c 	and.w	r3, r3, #12
 8003c7e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003c82:	d0a2      	beq.n	8003bca <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c84:	f7fe fac4 	bl	8002210 <HAL_GetTick>
 8003c88:	1bc0      	subs	r0, r0, r7
 8003c8a:	4540      	cmp	r0, r8
 8003c8c:	d9f3      	bls.n	8003c76 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8003c8e:	2003      	movs	r0, #3
 8003c90:	e78e      	b.n	8003bb0 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c92:	2a02      	cmp	r2, #2
 8003c94:	d102      	bne.n	8003c9c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c96:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003c9a:	e7e1      	b.n	8003c60 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c9c:	f013 0f02 	tst.w	r3, #2
 8003ca0:	e7de      	b.n	8003c60 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca2:	6813      	ldr	r3, [r2, #0]
 8003ca4:	f023 0307 	bic.w	r3, r3, #7
 8003ca8:	432b      	orrs	r3, r5
 8003caa:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cac:	6813      	ldr	r3, [r2, #0]
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	42ab      	cmp	r3, r5
 8003cb4:	f47f af7b 	bne.w	8003bae <HAL_RCC_ClockConfig+0xa>
 8003cb8:	e78d      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cba:	686b      	ldr	r3, [r5, #4]
 8003cbc:	68e1      	ldr	r1, [r4, #12]
 8003cbe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003cc2:	430b      	orrs	r3, r1
 8003cc4:	606b      	str	r3, [r5, #4]
 8003cc6:	e78b      	b.n	8003be0 <HAL_RCC_ClockConfig+0x3c>
 8003cc8:	40022000 	.word	0x40022000
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	0800b49a 	.word	0x0800b49a
 8003cd4:	20000010 	.word	0x20000010
 8003cd8:	20000018 	.word	0x20000018

08003cdc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cdc:	4b04      	ldr	r3, [pc, #16]	; (8003cf0 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003cde:	4a05      	ldr	r2, [pc, #20]	; (8003cf4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003ce6:	5cd3      	ldrb	r3, [r2, r3]
 8003ce8:	4a03      	ldr	r2, [pc, #12]	; (8003cf8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003cea:	6810      	ldr	r0, [r2, #0]
}
 8003cec:	40d8      	lsrs	r0, r3
 8003cee:	4770      	bx	lr
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	0800b4aa 	.word	0x0800b4aa
 8003cf8:	20000010 	.word	0x20000010

08003cfc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cfc:	4b04      	ldr	r3, [pc, #16]	; (8003d10 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003cfe:	4a05      	ldr	r2, [pc, #20]	; (8003d14 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003d06:	5cd3      	ldrb	r3, [r2, r3]
 8003d08:	4a03      	ldr	r2, [pc, #12]	; (8003d18 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003d0a:	6810      	ldr	r0, [r2, #0]
}
 8003d0c:	40d8      	lsrs	r0, r3
 8003d0e:	4770      	bx	lr
 8003d10:	40021000 	.word	0x40021000
 8003d14:	0800b4aa 	.word	0x0800b4aa
 8003d18:	20000010 	.word	0x20000010

08003d1c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003d1c:	6803      	ldr	r3, [r0, #0]
{
 8003d1e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003d22:	07d9      	lsls	r1, r3, #31
{
 8003d24:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003d26:	d520      	bpl.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d28:	4c35      	ldr	r4, [pc, #212]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8003d2a:	69e3      	ldr	r3, [r4, #28]
 8003d2c:	00da      	lsls	r2, r3, #3
 8003d2e:	d432      	bmi.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8003d30:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d32:	69e3      	ldr	r3, [r4, #28]
 8003d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d38:	61e3      	str	r3, [r4, #28]
 8003d3a:	69e3      	ldr	r3, [r4, #28]
 8003d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d40:	9301      	str	r3, [sp, #4]
 8003d42:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d44:	4e2f      	ldr	r6, [pc, #188]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003d46:	6833      	ldr	r3, [r6, #0]
 8003d48:	05db      	lsls	r3, r3, #23
 8003d4a:	d526      	bpl.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d4c:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d4e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003d52:	d136      	bne.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d54:	6a23      	ldr	r3, [r4, #32]
 8003d56:	686a      	ldr	r2, [r5, #4]
 8003d58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d60:	b11f      	cbz	r7, 8003d6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d62:	69e3      	ldr	r3, [r4, #28]
 8003d64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d68:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d6a:	6828      	ldr	r0, [r5, #0]
 8003d6c:	0783      	lsls	r3, r0, #30
 8003d6e:	d506      	bpl.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d70:	4a23      	ldr	r2, [pc, #140]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8003d72:	68a9      	ldr	r1, [r5, #8]
 8003d74:	6853      	ldr	r3, [r2, #4]
 8003d76:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003d7a:	430b      	orrs	r3, r1
 8003d7c:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d7e:	f010 0010 	ands.w	r0, r0, #16
 8003d82:	d01b      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d84:	4a1e      	ldr	r2, [pc, #120]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8003d86:	68e9      	ldr	r1, [r5, #12]
 8003d88:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003d8a:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d8c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003d90:	430b      	orrs	r3, r1
 8003d92:	6053      	str	r3, [r2, #4]
 8003d94:	e012      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8003d96:	2700      	movs	r7, #0
 8003d98:	e7d4      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d9a:	6833      	ldr	r3, [r6, #0]
 8003d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003da2:	f7fe fa35 	bl	8002210 <HAL_GetTick>
 8003da6:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da8:	6833      	ldr	r3, [r6, #0]
 8003daa:	05d8      	lsls	r0, r3, #23
 8003dac:	d4ce      	bmi.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dae:	f7fe fa2f 	bl	8002210 <HAL_GetTick>
 8003db2:	eba0 0008 	sub.w	r0, r0, r8
 8003db6:	2864      	cmp	r0, #100	; 0x64
 8003db8:	d9f6      	bls.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8003dba:	2003      	movs	r0, #3
}
 8003dbc:	b002      	add	sp, #8
 8003dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003dc2:	686a      	ldr	r2, [r5, #4]
 8003dc4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d0c3      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dcc:	2001      	movs	r0, #1
 8003dce:	4a0e      	ldr	r2, [pc, #56]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dd0:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dd2:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003dd4:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dd6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003dda:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8003ddc:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003dde:	07d9      	lsls	r1, r3, #31
 8003de0:	d5b8      	bpl.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8003de2:	f7fe fa15 	bl	8002210 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003de6:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003dea:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dec:	6a23      	ldr	r3, [r4, #32]
 8003dee:	079a      	lsls	r2, r3, #30
 8003df0:	d4b0      	bmi.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003df2:	f7fe fa0d 	bl	8002210 <HAL_GetTick>
 8003df6:	1b80      	subs	r0, r0, r6
 8003df8:	4540      	cmp	r0, r8
 8003dfa:	d9f7      	bls.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8003dfc:	e7dd      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8003dfe:	bf00      	nop
 8003e00:	40021000 	.word	0x40021000
 8003e04:	40007000 	.word	0x40007000
 8003e08:	42420440 	.word	0x42420440

08003e0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e0c:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e0e:	4604      	mov	r4, r0
 8003e10:	2800      	cmp	r0, #0
 8003e12:	d034      	beq.n	8003e7e <HAL_SPI_Init+0x72>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e14:	2300      	movs	r3, #0
 8003e16:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e18:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8003e1c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003e20:	b91b      	cbnz	r3, 8003e2a <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e22:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e26:	f7fe f829 	bl	8001e7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e2a:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e2c:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003e2e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8003e32:	6813      	ldr	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003e34:	69a1      	ldr	r1, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 8003e36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e3a:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003e3c:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8003e40:	4303      	orrs	r3, r0
 8003e42:	68e0      	ldr	r0, [r4, #12]
 8003e44:	4303      	orrs	r3, r0
 8003e46:	6920      	ldr	r0, [r4, #16]
 8003e48:	4303      	orrs	r3, r0
 8003e4a:	6960      	ldr	r0, [r4, #20]
 8003e4c:	4303      	orrs	r3, r0
 8003e4e:	69e0      	ldr	r0, [r4, #28]
 8003e50:	4303      	orrs	r3, r0
 8003e52:	6a20      	ldr	r0, [r4, #32]
 8003e54:	4303      	orrs	r3, r0
 8003e56:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003e58:	4303      	orrs	r3, r0
 8003e5a:	f401 7000 	and.w	r0, r1, #512	; 0x200
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003e5e:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003e60:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003e62:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003e66:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003e68:	6051      	str	r1, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e6a:	69d3      	ldr	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e6c:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e72:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8003e74:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e76:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e78:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 8003e7c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003e7e:	2001      	movs	r0, #1
 8003e80:	e7fc      	b.n	8003e7c <HAL_SPI_Init+0x70>
	...

08003e84 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e84:	6a03      	ldr	r3, [r0, #32]
{
 8003e86:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e88:	f023 0301 	bic.w	r3, r3, #1
 8003e8c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e8e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e90:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e92:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e94:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e96:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003e9a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e9c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8003e9e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8003ea2:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ea4:	4d0a      	ldr	r5, [pc, #40]	; (8003ed0 <TIM_OC1_SetConfig+0x4c>)
 8003ea6:	42a8      	cmp	r0, r5
 8003ea8:	d10b      	bne.n	8003ec2 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003eaa:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8003eac:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003eb0:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003eb2:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003eb6:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8003eba:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ebc:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ec0:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ec2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ec4:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ec6:	684a      	ldr	r2, [r1, #4]
 8003ec8:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eca:	6203      	str	r3, [r0, #32]
}
 8003ecc:	bd70      	pop	{r4, r5, r6, pc}
 8003ece:	bf00      	nop
 8003ed0:	40012c00 	.word	0x40012c00

08003ed4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ed4:	6a03      	ldr	r3, [r0, #32]
{
 8003ed6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ed8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003edc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ede:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ee0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ee2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ee4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ee6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003eea:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003eec:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8003eee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ef2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ef6:	4d0b      	ldr	r5, [pc, #44]	; (8003f24 <TIM_OC3_SetConfig+0x50>)
 8003ef8:	42a8      	cmp	r0, r5
 8003efa:	d10d      	bne.n	8003f18 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003efc:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8003efe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f02:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f06:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f0a:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8003f0e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f14:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f18:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f1a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f1c:	684a      	ldr	r2, [r1, #4]
 8003f1e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f20:	6203      	str	r3, [r0, #32]
}
 8003f22:	bd70      	pop	{r4, r5, r6, pc}
 8003f24:	40012c00 	.word	0x40012c00

08003f28 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f28:	6a03      	ldr	r3, [r0, #32]
{
 8003f2a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f30:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f32:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f34:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f36:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f38:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f3a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f3e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f42:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8003f44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f48:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f4c:	4d06      	ldr	r5, [pc, #24]	; (8003f68 <TIM_OC4_SetConfig+0x40>)
 8003f4e:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f50:	bf02      	ittt	eq
 8003f52:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f54:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f58:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f5c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f5e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f60:	684a      	ldr	r2, [r1, #4]
 8003f62:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f64:	6203      	str	r3, [r0, #32]
}
 8003f66:	bd30      	pop	{r4, r5, pc}
 8003f68:	40012c00 	.word	0x40012c00

08003f6c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f6c:	4a1a      	ldr	r2, [pc, #104]	; (8003fd8 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8003f6e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f70:	4290      	cmp	r0, r2
 8003f72:	d00a      	beq.n	8003f8a <TIM_Base_SetConfig+0x1e>
 8003f74:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003f78:	d007      	beq.n	8003f8a <TIM_Base_SetConfig+0x1e>
 8003f7a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003f7e:	4290      	cmp	r0, r2
 8003f80:	d003      	beq.n	8003f8a <TIM_Base_SetConfig+0x1e>
 8003f82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f86:	4290      	cmp	r0, r2
 8003f88:	d115      	bne.n	8003fb6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8003f8a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003f90:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f92:	4a11      	ldr	r2, [pc, #68]	; (8003fd8 <TIM_Base_SetConfig+0x6c>)
 8003f94:	4290      	cmp	r0, r2
 8003f96:	d00a      	beq.n	8003fae <TIM_Base_SetConfig+0x42>
 8003f98:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003f9c:	d007      	beq.n	8003fae <TIM_Base_SetConfig+0x42>
 8003f9e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003fa2:	4290      	cmp	r0, r2
 8003fa4:	d003      	beq.n	8003fae <TIM_Base_SetConfig+0x42>
 8003fa6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003faa:	4290      	cmp	r0, r2
 8003fac:	d103      	bne.n	8003fb6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fae:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fb4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fb6:	694a      	ldr	r2, [r1, #20]
 8003fb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fbc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003fbe:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fc0:	688b      	ldr	r3, [r1, #8]
 8003fc2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003fc4:	680b      	ldr	r3, [r1, #0]
 8003fc6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fc8:	4b03      	ldr	r3, [pc, #12]	; (8003fd8 <TIM_Base_SetConfig+0x6c>)
 8003fca:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8003fcc:	bf04      	itt	eq
 8003fce:	690b      	ldreq	r3, [r1, #16]
 8003fd0:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	6143      	str	r3, [r0, #20]
}
 8003fd6:	4770      	bx	lr
 8003fd8:	40012c00 	.word	0x40012c00

08003fdc <HAL_TIM_PWM_Init>:
{
 8003fdc:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003fde:	4604      	mov	r4, r0
 8003fe0:	b1a0      	cbz	r0, 800400c <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003fe2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003fe6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003fea:	b91b      	cbnz	r3, 8003ff4 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003fec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003ff0:	f7fd ff80 	bl	8001ef4 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ff6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ffc:	1d21      	adds	r1, r4, #4
 8003ffe:	f7ff ffb5 	bl	8003f6c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8004002:	2301      	movs	r3, #1
  return HAL_OK;
 8004004:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004006:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800400a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800400c:	2001      	movs	r0, #1
 800400e:	e7fc      	b.n	800400a <HAL_TIM_PWM_Init+0x2e>

08004010 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004010:	6a03      	ldr	r3, [r0, #32]
{
 8004012:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004014:	f023 0310 	bic.w	r3, r3, #16
 8004018:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800401a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800401c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800401e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004020:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004022:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004026:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800402a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800402c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004030:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004034:	4d0b      	ldr	r5, [pc, #44]	; (8004064 <TIM_OC2_SetConfig+0x54>)
 8004036:	42a8      	cmp	r0, r5
 8004038:	d10d      	bne.n	8004056 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800403a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800403c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004040:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004044:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004048:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800404c:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800404e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004052:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8004056:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004058:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800405a:	684a      	ldr	r2, [r1, #4]
 800405c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800405e:	6203      	str	r3, [r0, #32]
}
 8004060:	bd70      	pop	{r4, r5, r6, pc}
 8004062:	bf00      	nop
 8004064:	40012c00 	.word	0x40012c00

08004068 <HAL_TIM_PWM_ConfigChannel>:
{
 8004068:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800406a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800406e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004070:	2b01      	cmp	r3, #1
 8004072:	f04f 0002 	mov.w	r0, #2
 8004076:	d025      	beq.n	80040c4 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8004078:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800407a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 800407e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8004082:	2a0c      	cmp	r2, #12
 8004084:	d818      	bhi.n	80040b8 <HAL_TIM_PWM_ConfigChannel+0x50>
 8004086:	e8df f002 	tbb	[pc, r2]
 800408a:	1707      	.short	0x1707
 800408c:	171e1717 	.word	0x171e1717
 8004090:	172f1717 	.word	0x172f1717
 8004094:	1717      	.short	0x1717
 8004096:	40          	.byte	0x40
 8004097:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004098:	6820      	ldr	r0, [r4, #0]
 800409a:	f7ff fef3 	bl	8003e84 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800409e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040a0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040a2:	699a      	ldr	r2, [r3, #24]
 80040a4:	f042 0208 	orr.w	r2, r2, #8
 80040a8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040aa:	699a      	ldr	r2, [r3, #24]
 80040ac:	f022 0204 	bic.w	r2, r2, #4
 80040b0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040b2:	699a      	ldr	r2, [r3, #24]
 80040b4:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040b6:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80040b8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80040ba:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80040bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80040c0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80040c4:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040c6:	6820      	ldr	r0, [r4, #0]
 80040c8:	f7ff ffa2 	bl	8004010 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040cc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040ce:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040d0:	699a      	ldr	r2, [r3, #24]
 80040d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040d8:	699a      	ldr	r2, [r3, #24]
 80040da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040e0:	699a      	ldr	r2, [r3, #24]
 80040e2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80040e6:	e7e6      	b.n	80040b6 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040e8:	6820      	ldr	r0, [r4, #0]
 80040ea:	f7ff fef3 	bl	8003ed4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040ee:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040f0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040f2:	69da      	ldr	r2, [r3, #28]
 80040f4:	f042 0208 	orr.w	r2, r2, #8
 80040f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040fa:	69da      	ldr	r2, [r3, #28]
 80040fc:	f022 0204 	bic.w	r2, r2, #4
 8004100:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004102:	69da      	ldr	r2, [r3, #28]
 8004104:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004106:	61da      	str	r2, [r3, #28]
      break;
 8004108:	e7d6      	b.n	80040b8 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800410a:	6820      	ldr	r0, [r4, #0]
 800410c:	f7ff ff0c 	bl	8003f28 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004110:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004112:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004114:	69da      	ldr	r2, [r3, #28]
 8004116:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800411a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800411c:	69da      	ldr	r2, [r3, #28]
 800411e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004122:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004124:	69da      	ldr	r2, [r3, #28]
 8004126:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800412a:	e7ec      	b.n	8004106 <HAL_TIM_PWM_ConfigChannel+0x9e>

0800412c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800412c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800412e:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004130:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004132:	f001 011f 	and.w	r1, r1, #31
 8004136:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8004138:	ea23 0304 	bic.w	r3, r3, r4
 800413c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800413e:	6a03      	ldr	r3, [r0, #32]
 8004140:	408a      	lsls	r2, r1
 8004142:	431a      	orrs	r2, r3
 8004144:	6202      	str	r2, [r0, #32]
}
 8004146:	bd10      	pop	{r4, pc}

08004148 <HAL_TIM_OC_Start>:
{
 8004148:	b510      	push	{r4, lr}
 800414a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800414c:	2201      	movs	r2, #1
 800414e:	6800      	ldr	r0, [r0, #0]
 8004150:	f7ff ffec 	bl	800412c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004154:	6823      	ldr	r3, [r4, #0]
 8004156:	4a09      	ldr	r2, [pc, #36]	; (800417c <HAL_TIM_OC_Start+0x34>)
}
 8004158:	2000      	movs	r0, #0
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800415a:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 800415c:	bf02      	ittt	eq
 800415e:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8004160:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8004164:	645a      	streq	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800416c:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 800416e:	bf1e      	ittt	ne
 8004170:	681a      	ldrne	r2, [r3, #0]
 8004172:	f042 0201 	orrne.w	r2, r2, #1
 8004176:	601a      	strne	r2, [r3, #0]
}
 8004178:	bd10      	pop	{r4, pc}
 800417a:	bf00      	nop
 800417c:	40012c00 	.word	0x40012c00

08004180 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004180:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8004184:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8004186:	2b01      	cmp	r3, #1
 8004188:	f04f 0302 	mov.w	r3, #2
 800418c:	d014      	beq.n	80041b8 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800418e:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004190:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8004194:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004196:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004198:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800419a:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 800419c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 80041a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041a4:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041a6:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041a8:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80041aa:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041ac:	2301      	movs	r3, #1
 80041ae:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041b2:	2300      	movs	r3, #0
 80041b4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80041b8:	4618      	mov	r0, r3

  return HAL_OK;
}
 80041ba:	bd30      	pop	{r4, r5, pc}

080041bc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041bc:	6803      	ldr	r3, [r0, #0]
 80041be:	68da      	ldr	r2, [r3, #12]
 80041c0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80041c4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041c6:	695a      	ldr	r2, [r3, #20]
 80041c8:	f022 0201 	bic.w	r2, r2, #1
 80041cc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041ce:	2320      	movs	r3, #32
 80041d0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 80041d4:	4770      	bx	lr
	...

080041d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041d8:	b538      	push	{r3, r4, r5, lr}
 80041da:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041dc:	6803      	ldr	r3, [r0, #0]
 80041de:	68c1      	ldr	r1, [r0, #12]
 80041e0:	691a      	ldr	r2, [r3, #16]
 80041e2:	2419      	movs	r4, #25
 80041e4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80041e8:	430a      	orrs	r2, r1
 80041ea:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80041ec:	6882      	ldr	r2, [r0, #8]
 80041ee:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80041f0:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80041f2:	4302      	orrs	r2, r0
 80041f4:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 80041f6:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80041fa:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80041fe:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8004200:	430a      	orrs	r2, r1
 8004202:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004204:	695a      	ldr	r2, [r3, #20]
 8004206:	69a9      	ldr	r1, [r5, #24]
 8004208:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800420c:	430a      	orrs	r2, r1
 800420e:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004210:	4a0d      	ldr	r2, [pc, #52]	; (8004248 <UART_SetConfig+0x70>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d114      	bne.n	8004240 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004216:	f7ff fd71 	bl	8003cfc <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800421a:	4360      	muls	r0, r4
 800421c:	686c      	ldr	r4, [r5, #4]
 800421e:	2264      	movs	r2, #100	; 0x64
 8004220:	00a4      	lsls	r4, r4, #2
 8004222:	fbb0 f0f4 	udiv	r0, r0, r4
 8004226:	fbb0 f1f2 	udiv	r1, r0, r2
 800422a:	fb02 0311 	mls	r3, r2, r1, r0
 800422e:	011b      	lsls	r3, r3, #4
 8004230:	3332      	adds	r3, #50	; 0x32
 8004232:	fbb3 f3f2 	udiv	r3, r3, r2
 8004236:	682c      	ldr	r4, [r5, #0]
 8004238:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800423c:	60a3      	str	r3, [r4, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 800423e:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8004240:	f7ff fd4c 	bl	8003cdc <HAL_RCC_GetPCLK1Freq>
 8004244:	e7e9      	b.n	800421a <UART_SetConfig+0x42>
 8004246:	bf00      	nop
 8004248:	40013800 	.word	0x40013800

0800424c <HAL_UART_Init>:
{
 800424c:	b510      	push	{r4, lr}
  if (huart == NULL)
 800424e:	4604      	mov	r4, r0
 8004250:	b340      	cbz	r0, 80042a4 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004252:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004256:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800425a:	b91b      	cbnz	r3, 8004264 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800425c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8004260:	f7fd fe7e 	bl	8001f60 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8004264:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8004266:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004268:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800426c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800426e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8004270:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004274:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004276:	f7ff ffaf 	bl	80041d8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800427a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800427c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800427e:	691a      	ldr	r2, [r3, #16]
 8004280:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004284:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004286:	695a      	ldr	r2, [r3, #20]
 8004288:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800428c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800428e:	68da      	ldr	r2, [r3, #12]
 8004290:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004294:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004296:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004298:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800429a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800429e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80042a2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80042a4:	2001      	movs	r0, #1
 80042a6:	e7fc      	b.n	80042a2 <HAL_UART_Init+0x56>

080042a8 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80042a8:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80042ac:	2b20      	cmp	r3, #32
 80042ae:	d120      	bne.n	80042f2 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 80042b0:	b1e9      	cbz	r1, 80042ee <HAL_UART_Receive_IT+0x46>
 80042b2:	b1e2      	cbz	r2, 80042ee <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 80042b4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d01a      	beq.n	80042f2 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 80042bc:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 80042be:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042c0:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042c2:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042c4:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042c6:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80042ca:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 80042cc:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80042ce:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 80042d0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80042d4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80042d8:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80042da:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 80042dc:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80042de:	f041 0101 	orr.w	r1, r1, #1
 80042e2:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80042e4:	68d1      	ldr	r1, [r2, #12]
 80042e6:	f041 0120 	orr.w	r1, r1, #32
 80042ea:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 80042ec:	4770      	bx	lr
      return HAL_ERROR;
 80042ee:	2001      	movs	r0, #1
 80042f0:	4770      	bx	lr
    return HAL_BUSY;
 80042f2:	2002      	movs	r0, #2
}
 80042f4:	4770      	bx	lr

080042f6 <HAL_UART_TxCpltCallback>:
 80042f6:	4770      	bx	lr

080042f8 <HAL_UART_RxCpltCallback>:
 80042f8:	4770      	bx	lr

080042fa <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042fa:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 80042fe:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004300:	2b22      	cmp	r3, #34	; 0x22
 8004302:	d133      	bne.n	800436c <UART_Receive_IT+0x72>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004304:	6881      	ldr	r1, [r0, #8]
 8004306:	6904      	ldr	r4, [r0, #16]
 8004308:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800430c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800430e:	6802      	ldr	r2, [r0, #0]
 8004310:	d123      	bne.n	800435a <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004312:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004314:	b9ec      	cbnz	r4, 8004352 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004316:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800431a:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 800431e:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8004320:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8004322:	3c01      	subs	r4, #1
 8004324:	b2a4      	uxth	r4, r4
 8004326:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8004328:	b98c      	cbnz	r4, 800434e <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800432a:	6803      	ldr	r3, [r0, #0]
 800432c:	68da      	ldr	r2, [r3, #12]
 800432e:	f022 0220 	bic.w	r2, r2, #32
 8004332:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004334:	68da      	ldr	r2, [r3, #12]
 8004336:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800433a:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800433c:	695a      	ldr	r2, [r3, #20]
 800433e:	f022 0201 	bic.w	r2, r2, #1
 8004342:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004344:	2320      	movs	r3, #32
 8004346:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 800434a:	f7ff ffd5 	bl	80042f8 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 800434e:	2000      	movs	r0, #0
 8004350:	e00d      	b.n	800436e <UART_Receive_IT+0x74>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004352:	b2d2      	uxtb	r2, r2
 8004354:	f823 2b01 	strh.w	r2, [r3], #1
 8004358:	e7e1      	b.n	800431e <UART_Receive_IT+0x24>
 800435a:	1c59      	adds	r1, r3, #1
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800435c:	6852      	ldr	r2, [r2, #4]
 800435e:	6281      	str	r1, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004360:	b90c      	cbnz	r4, 8004366 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004362:	701a      	strb	r2, [r3, #0]
 8004364:	e7dc      	b.n	8004320 <UART_Receive_IT+0x26>
 8004366:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800436a:	e7fa      	b.n	8004362 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 800436c:	2002      	movs	r0, #2
}
 800436e:	bd10      	pop	{r4, pc}

08004370 <HAL_UART_ErrorCallback>:
 8004370:	4770      	bx	lr
	...

08004374 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004374:	6803      	ldr	r3, [r0, #0]
{
 8004376:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004378:	681a      	ldr	r2, [r3, #0]
{
 800437a:	4604      	mov	r4, r0
  if (errorflags == RESET)
 800437c:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800437e:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004380:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8004382:	d107      	bne.n	8004394 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004384:	0696      	lsls	r6, r2, #26
 8004386:	d558      	bpl.n	800443a <HAL_UART_IRQHandler+0xc6>
 8004388:	068d      	lsls	r5, r1, #26
 800438a:	d556      	bpl.n	800443a <HAL_UART_IRQHandler+0xc6>
}
 800438c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8004390:	f7ff bfb3 	b.w	80042fa <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004394:	f015 0501 	ands.w	r5, r5, #1
 8004398:	d102      	bne.n	80043a0 <HAL_UART_IRQHandler+0x2c>
 800439a:	f411 7f90 	tst.w	r1, #288	; 0x120
 800439e:	d04c      	beq.n	800443a <HAL_UART_IRQHandler+0xc6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80043a0:	07d3      	lsls	r3, r2, #31
 80043a2:	d505      	bpl.n	80043b0 <HAL_UART_IRQHandler+0x3c>
 80043a4:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043a6:	bf42      	ittt	mi
 80043a8:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80043aa:	f043 0301 	orrmi.w	r3, r3, #1
 80043ae:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043b0:	0750      	lsls	r0, r2, #29
 80043b2:	d504      	bpl.n	80043be <HAL_UART_IRQHandler+0x4a>
 80043b4:	b11d      	cbz	r5, 80043be <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80043b8:	f043 0302 	orr.w	r3, r3, #2
 80043bc:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043be:	0793      	lsls	r3, r2, #30
 80043c0:	d504      	bpl.n	80043cc <HAL_UART_IRQHandler+0x58>
 80043c2:	b11d      	cbz	r5, 80043cc <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80043c6:	f043 0304 	orr.w	r3, r3, #4
 80043ca:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043cc:	0716      	lsls	r6, r2, #28
 80043ce:	d504      	bpl.n	80043da <HAL_UART_IRQHandler+0x66>
 80043d0:	b11d      	cbz	r5, 80043da <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80043d4:	f043 0308 	orr.w	r3, r3, #8
 80043d8:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80043dc:	b343      	cbz	r3, 8004430 <HAL_UART_IRQHandler+0xbc>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043de:	0695      	lsls	r5, r2, #26
 80043e0:	d504      	bpl.n	80043ec <HAL_UART_IRQHandler+0x78>
 80043e2:	0688      	lsls	r0, r1, #26
 80043e4:	d502      	bpl.n	80043ec <HAL_UART_IRQHandler+0x78>
        UART_Receive_IT(huart);
 80043e6:	4620      	mov	r0, r4
 80043e8:	f7ff ff87 	bl	80042fa <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043ec:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 80043ee:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043f0:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80043f2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80043f4:	0711      	lsls	r1, r2, #28
 80043f6:	d402      	bmi.n	80043fe <HAL_UART_IRQHandler+0x8a>
 80043f8:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80043fc:	d019      	beq.n	8004432 <HAL_UART_IRQHandler+0xbe>
        UART_EndRxTransfer(huart);
 80043fe:	f7ff fedd 	bl	80041bc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	695a      	ldr	r2, [r3, #20]
 8004406:	0652      	lsls	r2, r2, #25
 8004408:	d50f      	bpl.n	800442a <HAL_UART_IRQHandler+0xb6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800440a:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800440c:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800440e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004412:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8004414:	b148      	cbz	r0, 800442a <HAL_UART_IRQHandler+0xb6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004416:	4b26      	ldr	r3, [pc, #152]	; (80044b0 <HAL_UART_IRQHandler+0x13c>)
 8004418:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800441a:	f7fd ff7b 	bl	8002314 <HAL_DMA_Abort_IT>
 800441e:	b138      	cbz	r0, 8004430 <HAL_UART_IRQHandler+0xbc>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004420:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8004422:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004426:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004428:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800442a:	4620      	mov	r0, r4
 800442c:	f7ff ffa0 	bl	8004370 <HAL_UART_ErrorCallback>
}
 8004430:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8004432:	f7ff ff9d 	bl	8004370 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004436:	63e5      	str	r5, [r4, #60]	; 0x3c
 8004438:	e7fa      	b.n	8004430 <HAL_UART_IRQHandler+0xbc>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800443a:	0616      	lsls	r6, r2, #24
 800443c:	d528      	bpl.n	8004490 <HAL_UART_IRQHandler+0x11c>
 800443e:	060d      	lsls	r5, r1, #24
 8004440:	d526      	bpl.n	8004490 <HAL_UART_IRQHandler+0x11c>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004442:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8004446:	2a21      	cmp	r2, #33	; 0x21
 8004448:	d1f2      	bne.n	8004430 <HAL_UART_IRQHandler+0xbc>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800444a:	68a1      	ldr	r1, [r4, #8]
 800444c:	6a22      	ldr	r2, [r4, #32]
 800444e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8004452:	d118      	bne.n	8004486 <HAL_UART_IRQHandler+0x112>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004454:	8811      	ldrh	r1, [r2, #0]
 8004456:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800445a:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800445c:	6921      	ldr	r1, [r4, #16]
 800445e:	b981      	cbnz	r1, 8004482 <HAL_UART_IRQHandler+0x10e>
        huart->pTxBuffPtr += 2U;
 8004460:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8004462:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8004464:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8004466:	3a01      	subs	r2, #1
 8004468:	b292      	uxth	r2, r2
 800446a:	84e2      	strh	r2, [r4, #38]	; 0x26
 800446c:	2a00      	cmp	r2, #0
 800446e:	d1df      	bne.n	8004430 <HAL_UART_IRQHandler+0xbc>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004470:	68da      	ldr	r2, [r3, #12]
 8004472:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004476:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004478:	68da      	ldr	r2, [r3, #12]
 800447a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800447e:	60da      	str	r2, [r3, #12]
 8004480:	e7d6      	b.n	8004430 <HAL_UART_IRQHandler+0xbc>
        huart->pTxBuffPtr += 1U;
 8004482:	3201      	adds	r2, #1
 8004484:	e7ed      	b.n	8004462 <HAL_UART_IRQHandler+0xee>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004486:	1c51      	adds	r1, r2, #1
 8004488:	6221      	str	r1, [r4, #32]
 800448a:	7812      	ldrb	r2, [r2, #0]
 800448c:	605a      	str	r2, [r3, #4]
 800448e:	e7e9      	b.n	8004464 <HAL_UART_IRQHandler+0xf0>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004490:	0650      	lsls	r0, r2, #25
 8004492:	d5cd      	bpl.n	8004430 <HAL_UART_IRQHandler+0xbc>
 8004494:	064a      	lsls	r2, r1, #25
 8004496:	d5cb      	bpl.n	8004430 <HAL_UART_IRQHandler+0xbc>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004498:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 800449a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800449c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044a0:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80044a2:	2320      	movs	r3, #32
 80044a4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80044a8:	f7ff ff25 	bl	80042f6 <HAL_UART_TxCpltCallback>
 80044ac:	e7c0      	b.n	8004430 <HAL_UART_IRQHandler+0xbc>
 80044ae:	bf00      	nop
 80044b0:	080044b5 	.word	0x080044b5

080044b4 <UART_DMAAbortOnError>:
{
 80044b4:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 80044b6:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044b8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80044ba:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80044bc:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80044be:	f7ff ff57 	bl	8004370 <HAL_UART_ErrorCallback>
}
 80044c2:	bd08      	pop	{r3, pc}

080044c4 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80044c4:	b084      	sub	sp, #16
 80044c6:	a801      	add	r0, sp, #4
 80044c8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80044cc:	b004      	add	sp, #16
 80044ce:	2000      	movs	r0, #0
 80044d0:	4770      	bx	lr

080044d2 <USB_EnableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80044d2:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80044d6:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 80044da:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80044de:	2000      	movs	r0, #0
 80044e0:	4770      	bx	lr

080044e2 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80044e2:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80044e6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80044ea:	045b      	lsls	r3, r3, #17
 80044ec:	0c5b      	lsrs	r3, r3, #17
 80044ee:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80044f2:	2000      	movs	r0, #0
 80044f4:	4770      	bx	lr

080044f6 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80044f6:	2000      	movs	r0, #0
 80044f8:	4770      	bx	lr

080044fa <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80044fa:	b084      	sub	sp, #16
 80044fc:	b510      	push	{r4, lr}
 80044fe:	ac03      	add	r4, sp, #12
 8004500:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 8004504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = USB_CNTR_FRES;
 8004508:	2301      	movs	r3, #1
 800450a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 800450e:	2300      	movs	r3, #0
 8004510:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->ISTR = 0;
 8004514:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 8004518:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 800451c:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
}
 8004520:	b004      	add	sp, #16
  USBx->CNTR |= winterruptmask;
 8004522:	f442 423f 	orr.w	r2, r2, #48896	; 0xbf00
 8004526:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
}
 800452a:	4618      	mov	r0, r3
 800452c:	4770      	bx	lr
	...

08004530 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004530:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004532:	780c      	ldrb	r4, [r1, #0]
{
 8004534:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004536:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]

  /* initialize Endpoint */
  switch (ep->type)
 800453a:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800453c:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8004540:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  switch (ep->type)
 8004544:	2803      	cmp	r0, #3
 8004546:	d803      	bhi.n	8004550 <USB_ActivateEndpoint+0x20>
 8004548:	e8df f000 	tbb	[pc, r0]
 800454c:	46444942 	.word	0x46444942
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 8004550:	2001      	movs	r0, #1
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8004552:	f248 0580 	movw	r5, #32896	; 0x8080
 8004556:	432a      	orrs	r2, r5
 8004558:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800455c:	780e      	ldrb	r6, [r1, #0]
 800455e:	4a9e      	ldr	r2, [pc, #632]	; (80047d8 <USB_ActivateEndpoint+0x2a8>)
 8004560:	f833 4026 	ldrh.w	r4, [r3, r6, lsl #2]
 8004564:	4335      	orrs	r5, r6
 8004566:	4014      	ands	r4, r2
 8004568:	432c      	orrs	r4, r5
 800456a:	f823 4026 	strh.w	r4, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 800456e:	7b0d      	ldrb	r5, [r1, #12]
 8004570:	780c      	ldrb	r4, [r1, #0]
 8004572:	2d00      	cmp	r5, #0
 8004574:	f040 8082 	bne.w	800467c <USB_ActivateEndpoint+0x14c>
 8004578:	88cd      	ldrh	r5, [r1, #6]
  {
    if (ep->is_in != 0U)
 800457a:	784e      	ldrb	r6, [r1, #1]
 800457c:	086d      	lsrs	r5, r5, #1
 800457e:	006d      	lsls	r5, r5, #1
 8004580:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8004584:	b376      	cbz	r6, 80045e4 <USB_ActivateEndpoint+0xb4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004586:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 800458a:	4434      	add	r4, r6
 800458c:	f8a4 5400 	strh.w	r5, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004590:	780d      	ldrb	r5, [r1, #0]
 8004592:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8004596:	0667      	lsls	r7, r4, #25
 8004598:	d508      	bpl.n	80045ac <USB_ActivateEndpoint+0x7c>
 800459a:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 800459e:	4022      	ands	r2, r4
 80045a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045a4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80045a8:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80045ac:	78ca      	ldrb	r2, [r1, #3]
 80045ae:	780c      	ldrb	r4, [r1, #0]
 80045b0:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80045b2:	f833 1024 	ldrh.w	r1, [r3, r4, lsl #2]
 80045b6:	4a89      	ldr	r2, [pc, #548]	; (80047dc <USB_ActivateEndpoint+0x2ac>)
 80045b8:	ea02 0201 	and.w	r2, r2, r1
 80045bc:	bf18      	it	ne
 80045be:	f082 0220 	eorne.w	r2, r2, #32
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80045ca:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 80045ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_CONTROL;
 80045d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 80045d4:	2000      	movs	r0, #0
 80045d6:	e7bc      	b.n	8004552 <USB_ActivateEndpoint+0x22>
      wEpRegVal |= USB_EP_INTERRUPT;
 80045d8:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 80045dc:	e7fa      	b.n	80045d4 <USB_ActivateEndpoint+0xa4>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80045de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045e2:	e7f7      	b.n	80045d4 <USB_ActivateEndpoint+0xa4>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80045e4:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80045e8:	690e      	ldr	r6, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80045ea:	4414      	add	r4, r2
 80045ec:	f8a4 5408 	strh.w	r5, [r4, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80045f0:	780a      	ldrb	r2, [r1, #0]
 80045f2:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 80045f6:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80045fa:	b2a4      	uxth	r4, r4
 80045fc:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8004600:	bb56      	cbnz	r6, 8004658 <USB_ActivateEndpoint+0x128>
 8004602:	5b15      	ldrh	r5, [r2, r4]
 8004604:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 8004608:	042d      	lsls	r5, r5, #16
 800460a:	0c2d      	lsrs	r5, r5, #16
 800460c:	5315      	strh	r5, [r2, r4]
 800460e:	5b15      	ldrh	r5, [r2, r4]
 8004610:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 8004614:	5315      	strh	r5, [r2, r4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004616:	780c      	ldrb	r4, [r1, #0]
 8004618:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800461c:	0457      	lsls	r7, r2, #17
 800461e:	d50b      	bpl.n	8004638 <USB_ActivateEndpoint+0x108>
 8004620:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004624:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004628:	0512      	lsls	r2, r2, #20
 800462a:	0d12      	lsrs	r2, r2, #20
 800462c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004630:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004634:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004638:	7809      	ldrb	r1, [r1, #0]
 800463a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800463e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004642:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004646:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800464a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800464e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004652:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8004656:	e7ba      	b.n	80045ce <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004658:	2e3e      	cmp	r6, #62	; 0x3e
 800465a:	d806      	bhi.n	800466a <USB_ActivateEndpoint+0x13a>
 800465c:	0875      	lsrs	r5, r6, #1
 800465e:	07f6      	lsls	r6, r6, #31
 8004660:	bf48      	it	mi
 8004662:	3501      	addmi	r5, #1
 8004664:	02ad      	lsls	r5, r5, #10
 8004666:	b2ad      	uxth	r5, r5
 8004668:	e7d4      	b.n	8004614 <USB_ActivateEndpoint+0xe4>
 800466a:	0977      	lsrs	r7, r6, #5
 800466c:	06f5      	lsls	r5, r6, #27
 800466e:	4d5c      	ldr	r5, [pc, #368]	; (80047e0 <USB_ActivateEndpoint+0x2b0>)
 8004670:	bf08      	it	eq
 8004672:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8004676:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 800467a:	e7f4      	b.n	8004666 <USB_ActivateEndpoint+0x136>
    PCD_SET_EP_DBUF(USBx, ep->num);
 800467c:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 8004680:	4015      	ands	r5, r2
 8004682:	f445 4501 	orr.w	r5, r5, #33024	; 0x8100
 8004686:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800468a:	f823 5024 	strh.w	r5, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800468e:	780c      	ldrb	r4, [r1, #0]
 8004690:	890d      	ldrh	r5, [r1, #8]
 8004692:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8004696:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 800469a:	086d      	lsrs	r5, r5, #1
 800469c:	b2b6      	uxth	r6, r6
 800469e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80046a2:	006d      	lsls	r5, r5, #1
 80046a4:	53a5      	strh	r5, [r4, r6]
 80046a6:	780c      	ldrb	r4, [r1, #0]
 80046a8:	894d      	ldrh	r5, [r1, #10]
 80046aa:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 80046ae:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 80046b2:	086d      	lsrs	r5, r5, #1
 80046b4:	f504 6481 	add.w	r4, r4, #1032	; 0x408
 80046b8:	006d      	lsls	r5, r5, #1
 80046ba:	b2b6      	uxth	r6, r6
 80046bc:	53a5      	strh	r5, [r4, r6]
    if (ep->is_in == 0U)
 80046be:	784c      	ldrb	r4, [r1, #1]
 80046c0:	780d      	ldrb	r5, [r1, #0]
 80046c2:	2c00      	cmp	r4, #0
 80046c4:	d143      	bne.n	800474e <USB_ActivateEndpoint+0x21e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046c6:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 80046ca:	0466      	lsls	r6, r4, #17
 80046cc:	d508      	bpl.n	80046e0 <USB_ActivateEndpoint+0x1b0>
 80046ce:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 80046d2:	4022      	ands	r2, r4
 80046d4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80046d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80046dc:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046e0:	780c      	ldrb	r4, [r1, #0]
 80046e2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80046e6:	0655      	lsls	r5, r2, #25
 80046e8:	d50b      	bpl.n	8004702 <USB_ActivateEndpoint+0x1d2>
 80046ea:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80046ee:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80046f2:	0512      	lsls	r2, r2, #20
 80046f4:	0d12      	lsrs	r2, r2, #20
 80046f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046fa:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80046fe:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8004702:	780c      	ldrb	r4, [r1, #0]
 8004704:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004708:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800470c:	0512      	lsls	r2, r2, #20
 800470e:	0d12      	lsrs	r2, r2, #20
 8004710:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004714:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004718:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800471c:	f248 0480 	movw	r4, #32896	; 0x8080
 8004720:	780d      	ldrb	r5, [r1, #0]
 8004722:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8004726:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800472a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800472e:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8004732:	4322      	orrs	r2, r4
 8004734:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004738:	7809      	ldrb	r1, [r1, #0]
 800473a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800473e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004742:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004746:	4314      	orrs	r4, r2
 8004748:	f823 4021 	strh.w	r4, [r3, r1, lsl #2]
 800474c:	e73f      	b.n	80045ce <USB_ActivateEndpoint+0x9e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800474e:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8004752:	0464      	lsls	r4, r4, #17
 8004754:	d508      	bpl.n	8004768 <USB_ActivateEndpoint+0x238>
 8004756:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 800475a:	4022      	ands	r2, r4
 800475c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004760:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004764:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004768:	780c      	ldrb	r4, [r1, #0]
 800476a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800476e:	0652      	lsls	r2, r2, #25
 8004770:	d50b      	bpl.n	800478a <USB_ActivateEndpoint+0x25a>
 8004772:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004776:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800477a:	0512      	lsls	r2, r2, #20
 800477c:	0d12      	lsrs	r2, r2, #20
 800477e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004782:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004786:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800478a:	780c      	ldrb	r4, [r1, #0]
 800478c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004790:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004794:	0512      	lsls	r2, r2, #20
 8004796:	0d12      	lsrs	r2, r2, #20
 8004798:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800479c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80047a0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 80047a4:	78ca      	ldrb	r2, [r1, #3]
 80047a6:	780c      	ldrb	r4, [r1, #0]
 80047a8:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80047aa:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 80047ae:	4a0b      	ldr	r2, [pc, #44]	; (80047dc <USB_ActivateEndpoint+0x2ac>)
 80047b0:	ea02 0205 	and.w	r2, r2, r5
 80047b4:	bf18      	it	ne
 80047b6:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80047c2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80047c6:	7809      	ldrb	r1, [r1, #0]
 80047c8:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80047cc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80047d0:	0492      	lsls	r2, r2, #18
 80047d2:	0c92      	lsrs	r2, r2, #18
 80047d4:	e739      	b.n	800464a <USB_ActivateEndpoint+0x11a>
 80047d6:	bf00      	nop
 80047d8:	ffff8f8f 	.word	0xffff8f8f
 80047dc:	ffff8fbf 	.word	0xffff8fbf
 80047e0:	ffff8000 	.word	0xffff8000

080047e4 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80047e4:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 80047e6:	7b0c      	ldrb	r4, [r1, #12]
 80047e8:	784a      	ldrb	r2, [r1, #1]
 80047ea:	780b      	ldrb	r3, [r1, #0]
 80047ec:	bbbc      	cbnz	r4, 800485e <USB_DeactivateEndpoint+0x7a>
  {
    if (ep->is_in != 0U)
 80047ee:	b1f2      	cbz	r2, 800482e <USB_DeactivateEndpoint+0x4a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047f0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80047f4:	0652      	lsls	r2, r2, #25
 80047f6:	d50b      	bpl.n	8004810 <USB_DeactivateEndpoint+0x2c>
 80047f8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80047fc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004800:	0512      	lsls	r2, r2, #20
 8004802:	0d12      	lsrs	r2, r2, #20
 8004804:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004808:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800480c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004810:	780a      	ldrb	r2, [r1, #0]
 8004812:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004816:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800481a:	051b      	lsls	r3, r3, #20
 800481c:	0d1b      	lsrs	r3, r3, #20
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800481e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004826:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 800482a:	2000      	movs	r0, #0
 800482c:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800482e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004832:	0454      	lsls	r4, r2, #17
 8004834:	d50b      	bpl.n	800484e <USB_DeactivateEndpoint+0x6a>
 8004836:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800483a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800483e:	0512      	lsls	r2, r2, #20
 8004840:	0d12      	lsrs	r2, r2, #20
 8004842:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004846:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800484a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800484e:	780a      	ldrb	r2, [r1, #0]
 8004850:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004854:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004858:	049b      	lsls	r3, r3, #18
 800485a:	0c9b      	lsrs	r3, r3, #18
 800485c:	e7df      	b.n	800481e <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 800485e:	2a00      	cmp	r2, #0
 8004860:	d144      	bne.n	80048ec <USB_DeactivateEndpoint+0x108>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004862:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004866:	0452      	lsls	r2, r2, #17
 8004868:	d50b      	bpl.n	8004882 <USB_DeactivateEndpoint+0x9e>
 800486a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800486e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004872:	0512      	lsls	r2, r2, #20
 8004874:	0d12      	lsrs	r2, r2, #20
 8004876:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800487a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800487e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004882:	780a      	ldrb	r2, [r1, #0]
 8004884:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004888:	065c      	lsls	r4, r3, #25
 800488a:	d50b      	bpl.n	80048a4 <USB_DeactivateEndpoint+0xc0>
 800488c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004890:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004894:	051b      	lsls	r3, r3, #20
 8004896:	0d1b      	lsrs	r3, r3, #20
 8004898:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800489c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048a0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80048a4:	780a      	ldrb	r2, [r1, #0]
 80048a6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80048aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048ae:	051b      	lsls	r3, r3, #20
 80048b0:	0d1b      	lsrs	r3, r3, #20
 80048b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048ba:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80048be:	f248 0280 	movw	r2, #32896	; 0x8080
 80048c2:	780c      	ldrb	r4, [r1, #0]
 80048c4:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80048c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d0:	4313      	orrs	r3, r2
 80048d2:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048d6:	7809      	ldrb	r1, [r1, #0]
 80048d8:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80048dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80048e4:	431a      	orrs	r2, r3
 80048e6:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
 80048ea:	e79e      	b.n	800482a <USB_DeactivateEndpoint+0x46>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048ec:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80048f0:	0452      	lsls	r2, r2, #17
 80048f2:	d50b      	bpl.n	800490c <USB_DeactivateEndpoint+0x128>
 80048f4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80048f8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80048fc:	0512      	lsls	r2, r2, #20
 80048fe:	0d12      	lsrs	r2, r2, #20
 8004900:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004904:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004908:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800490c:	780a      	ldrb	r2, [r1, #0]
 800490e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004912:	065b      	lsls	r3, r3, #25
 8004914:	d50b      	bpl.n	800492e <USB_DeactivateEndpoint+0x14a>
 8004916:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800491a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800491e:	051b      	lsls	r3, r3, #20
 8004920:	0d1b      	lsrs	r3, r3, #20
 8004922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004926:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800492a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800492e:	780a      	ldrb	r2, [r1, #0]
 8004930:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004934:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004938:	051b      	lsls	r3, r3, #20
 800493a:	0d1b      	lsrs	r3, r3, #20
 800493c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004944:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004948:	f248 0280 	movw	r2, #32896	; 0x8080
 800494c:	780c      	ldrb	r4, [r1, #0]
 800494e:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8004952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004956:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800495a:	4313      	orrs	r3, r2
 800495c:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004960:	7809      	ldrb	r1, [r1, #0]
 8004962:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8004966:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800496a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800496e:	e7b9      	b.n	80048e4 <USB_DeactivateEndpoint+0x100>

08004970 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8004970:	784b      	ldrb	r3, [r1, #1]
 8004972:	780a      	ldrb	r2, [r1, #0]
 8004974:	b17b      	cbz	r3, 8004996 <USB_EPSetStall+0x26>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004976:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800497a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800497e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004982:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800498a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800498e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8004992:	2000      	movs	r0, #0
 8004994:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004996:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800499a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800499e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80049a6:	e7ee      	b.n	8004986 <USB_EPSetStall+0x16>

080049a8 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80049a8:	7b0b      	ldrb	r3, [r1, #12]
 80049aa:	bb23      	cbnz	r3, 80049f6 <USB_EPClearStall+0x4e>
  {
    if (ep->is_in != 0U)
 80049ac:	784b      	ldrb	r3, [r1, #1]
 80049ae:	780a      	ldrb	r2, [r1, #0]
 80049b0:	b31b      	cbz	r3, 80049fa <USB_EPClearStall+0x52>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049b2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80049b6:	065b      	lsls	r3, r3, #25
 80049b8:	d50b      	bpl.n	80049d2 <USB_EPClearStall+0x2a>
 80049ba:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80049be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049c2:	051b      	lsls	r3, r3, #20
 80049c4:	0d1b      	lsrs	r3, r3, #20
 80049c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049ce:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80049d2:	78cb      	ldrb	r3, [r1, #3]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d00e      	beq.n	80049f6 <USB_EPClearStall+0x4e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80049d8:	780a      	ldrb	r2, [r1, #0]
 80049da:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80049de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049e6:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80049ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049f2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 80049f6:	2000      	movs	r0, #0
 80049f8:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049fa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80049fe:	045b      	lsls	r3, r3, #17
 8004a00:	d50b      	bpl.n	8004a1a <USB_EPClearStall+0x72>
 8004a02:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004a06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a0a:	051b      	lsls	r3, r3, #20
 8004a0c:	0d1b      	lsrs	r3, r3, #20
 8004a0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a16:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a1a:	780a      	ldrb	r2, [r1, #0]
 8004a1c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004a20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a28:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8004a2c:	e7dd      	b.n	80049ea <USB_EPClearStall+0x42>

08004a2e <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8004a2e:	b911      	cbnz	r1, 8004a36 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8004a30:	2380      	movs	r3, #128	; 0x80
 8004a32:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8004a36:	2000      	movs	r0, #0
 8004a38:	4770      	bx	lr

08004a3a <USB_DevConnect>:
 8004a3a:	2000      	movs	r0, #0
 8004a3c:	4770      	bx	lr

08004a3e <USB_DevDisconnect>:
 8004a3e:	2000      	movs	r0, #0
 8004a40:	4770      	bx	lr

08004a42 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004a42:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8004a46:	4770      	bx	lr

08004a48 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8004a48:	2000      	movs	r0, #0
 8004a4a:	4770      	bx	lr

08004a4c <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004a4c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004a50:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004a52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004a56:	085b      	lsrs	r3, r3, #1
 8004a58:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d100      	bne.n	8004a62 <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8004a60:	4770      	bx	lr
 8004a62:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 8004a66:	f822 0b04 	strh.w	r0, [r2], #4
 8004a6a:	e7f7      	b.n	8004a5c <USB_WritePMA+0x10>

08004a6c <USB_EPStartXfer>:
{
 8004a6c:	b570      	push	{r4, r5, r6, lr}
 8004a6e:	460d      	mov	r5, r1
  if (ep->is_in == 1U)
 8004a70:	7849      	ldrb	r1, [r1, #1]
{
 8004a72:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 8004a74:	2901      	cmp	r1, #1
 8004a76:	69aa      	ldr	r2, [r5, #24]
 8004a78:	692b      	ldr	r3, [r5, #16]
 8004a7a:	7b28      	ldrb	r0, [r5, #12]
 8004a7c:	d15d      	bne.n	8004b3a <USB_EPStartXfer+0xce>
    if (ep->xfer_len > ep->maxpacket)
 8004a7e:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8004a80:	bf9d      	ittte	ls
 8004a82:	2300      	movls	r3, #0
 8004a84:	61ab      	strls	r3, [r5, #24]
 8004a86:	4613      	movls	r3, r2
      ep->xfer_len -= len;
 8004a88:	1ad2      	subhi	r2, r2, r3
 8004a8a:	bf88      	it	hi
 8004a8c:	61aa      	strhi	r2, [r5, #24]
 8004a8e:	6969      	ldr	r1, [r5, #20]
 8004a90:	b29e      	uxth	r6, r3
    if (ep->doublebuffer == 0U)
 8004a92:	b9e8      	cbnz	r0, 8004ad0 <USB_EPStartXfer+0x64>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004a94:	4633      	mov	r3, r6
 8004a96:	88ea      	ldrh	r2, [r5, #6]
 8004a98:	4620      	mov	r0, r4
 8004a9a:	f7ff ffd7 	bl	8004a4c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004a9e:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8004aa2:	782a      	ldrb	r2, [r5, #0]
 8004aa4:	f204 4304 	addw	r3, r4, #1028	; 0x404
 8004aa8:	0112      	lsls	r2, r2, #4
 8004aaa:	440b      	add	r3, r1
 8004aac:	52d6      	strh	r6, [r2, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004aae:	782a      	ldrb	r2, [r5, #0]
 8004ab0:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8004ab4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ab8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004abc:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ac0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ac8:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 8004acc:	2000      	movs	r0, #0
 8004ace:	bd70      	pop	{r4, r5, r6, pc}
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004ad0:	782b      	ldrb	r3, [r5, #0]
 8004ad2:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004ad6:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004ada:	0652      	lsls	r2, r2, #25
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004adc:	bf4b      	itete	mi
 8004ade:	f204 420c 	addwmi	r2, r4, #1036	; 0x40c
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004ae2:	f204 4204 	addwpl	r2, r4, #1028	; 0x404
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004ae6:	1812      	addmi	r2, r2, r0
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004ae8:	1812      	addpl	r2, r2, r0
 8004aea:	ea4f 1303 	mov.w	r3, r3, lsl #4
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004aee:	bf4b      	itete	mi
 8004af0:	52d6      	strhmi	r6, [r2, r3]
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004af2:	52d6      	strhpl	r6, [r2, r3]
        pmabuffer = ep->pmaaddr1;
 8004af4:	896a      	ldrhmi	r2, [r5, #10]
        pmabuffer = ep->pmaaddr0;
 8004af6:	892a      	ldrhpl	r2, [r5, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004af8:	4633      	mov	r3, r6
 8004afa:	4620      	mov	r0, r4
 8004afc:	f7ff ffa6 	bl	8004a4c <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004b00:	786b      	ldrb	r3, [r5, #1]
 8004b02:	782a      	ldrb	r2, [r5, #0]
 8004b04:	b963      	cbnz	r3, 8004b20 <USB_EPStartXfer+0xb4>
 8004b06:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8004b0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b0e:	051b      	lsls	r3, r3, #20
 8004b10:	0d1b      	lsrs	r3, r3, #20
 8004b12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b16:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b1a:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8004b1e:	e7c6      	b.n	8004aae <USB_EPStartXfer+0x42>
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d1c4      	bne.n	8004aae <USB_EPStartXfer+0x42>
 8004b24:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8004b28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b2c:	051b      	lsls	r3, r3, #20
 8004b2e:	0d1b      	lsrs	r3, r3, #20
 8004b30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b38:	e7ef      	b.n	8004b1a <USB_EPStartXfer+0xae>
    if (ep->xfer_len > ep->maxpacket)
 8004b3a:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8004b3c:	bf93      	iteet	ls
 8004b3e:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 8004b40:	1ad2      	subhi	r2, r2, r3
 8004b42:	61aa      	strhi	r2, [r5, #24]
      ep->xfer_len = 0U;
 8004b44:	61ab      	strls	r3, [r5, #24]
 8004b46:	bf98      	it	ls
 8004b48:	4613      	movls	r3, r2
 8004b4a:	782a      	ldrb	r2, [r5, #0]
    if (ep->doublebuffer == 0U)
 8004b4c:	b990      	cbnz	r0, 8004b74 <USB_EPStartXfer+0x108>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004b4e:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8004b52:	f204 400c 	addw	r0, r4, #1036	; 0x40c
 8004b56:	4401      	add	r1, r0
 8004b58:	0112      	lsls	r2, r2, #4
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d13b      	bne.n	8004bd6 <USB_EPStartXfer+0x16a>
 8004b5e:	5a8b      	ldrh	r3, [r1, r2]
 8004b60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b64:	041b      	lsls	r3, r3, #16
 8004b66:	0c1b      	lsrs	r3, r3, #16
 8004b68:	528b      	strh	r3, [r1, r2]
 8004b6a:	5a8b      	ldrh	r3, [r1, r2]
 8004b6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b70:	528b      	strh	r3, [r1, r2]
 8004b72:	e039      	b.n	8004be8 <USB_EPStartXfer+0x17c>
 8004b74:	b981      	cbnz	r1, 8004b98 <USB_EPStartXfer+0x12c>
 8004b76:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8004b7a:	f204 4004 	addw	r0, r4, #1028	; 0x404
 8004b7e:	4401      	add	r1, r0
 8004b80:	0112      	lsls	r2, r2, #4
 8004b82:	b9b3      	cbnz	r3, 8004bb2 <USB_EPStartXfer+0x146>
 8004b84:	5a88      	ldrh	r0, [r1, r2]
 8004b86:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8004b8a:	0400      	lsls	r0, r0, #16
 8004b8c:	0c00      	lsrs	r0, r0, #16
 8004b8e:	5288      	strh	r0, [r1, r2]
 8004b90:	5a88      	ldrh	r0, [r1, r2]
 8004b92:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8004b96:	5288      	strh	r0, [r1, r2]
 8004b98:	7869      	ldrb	r1, [r5, #1]
 8004b9a:	782a      	ldrb	r2, [r5, #0]
 8004b9c:	2900      	cmp	r1, #0
 8004b9e:	d0d6      	beq.n	8004b4e <USB_EPStartXfer+0xe2>
 8004ba0:	2901      	cmp	r1, #1
 8004ba2:	d121      	bne.n	8004be8 <USB_EPStartXfer+0x17c>
 8004ba4:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8004ba8:	f204 410c 	addw	r1, r4, #1036	; 0x40c
 8004bac:	4401      	add	r1, r0
 8004bae:	0112      	lsls	r2, r2, #4
 8004bb0:	e02c      	b.n	8004c0c <USB_EPStartXfer+0x1a0>
 8004bb2:	2b3e      	cmp	r3, #62	; 0x3e
 8004bb4:	d806      	bhi.n	8004bc4 <USB_EPStartXfer+0x158>
 8004bb6:	0858      	lsrs	r0, r3, #1
 8004bb8:	07de      	lsls	r6, r3, #31
 8004bba:	bf48      	it	mi
 8004bbc:	3001      	addmi	r0, #1
 8004bbe:	0280      	lsls	r0, r0, #10
 8004bc0:	b280      	uxth	r0, r0
 8004bc2:	e7e8      	b.n	8004b96 <USB_EPStartXfer+0x12a>
 8004bc4:	095e      	lsrs	r6, r3, #5
 8004bc6:	06d8      	lsls	r0, r3, #27
 8004bc8:	4811      	ldr	r0, [pc, #68]	; (8004c10 <USB_EPStartXfer+0x1a4>)
 8004bca:	bf08      	it	eq
 8004bcc:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8004bd0:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8004bd4:	e7f4      	b.n	8004bc0 <USB_EPStartXfer+0x154>
 8004bd6:	2b3e      	cmp	r3, #62	; 0x3e
 8004bd8:	d810      	bhi.n	8004bfc <USB_EPStartXfer+0x190>
 8004bda:	0858      	lsrs	r0, r3, #1
 8004bdc:	07de      	lsls	r6, r3, #31
 8004bde:	bf48      	it	mi
 8004be0:	3001      	addmi	r0, #1
 8004be2:	0280      	lsls	r0, r0, #10
 8004be4:	b280      	uxth	r0, r0
 8004be6:	5288      	strh	r0, [r1, r2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004be8:	782a      	ldrb	r2, [r5, #0]
 8004bea:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8004bee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8004bfa:	e761      	b.n	8004ac0 <USB_EPStartXfer+0x54>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004bfc:	0958      	lsrs	r0, r3, #5
 8004bfe:	06db      	lsls	r3, r3, #27
 8004c00:	4b03      	ldr	r3, [pc, #12]	; (8004c10 <USB_EPStartXfer+0x1a4>)
 8004c02:	bf08      	it	eq
 8004c04:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8004c08:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	e7af      	b.n	8004b70 <USB_EPStartXfer+0x104>
 8004c10:	ffff8000 	.word	0xffff8000

08004c14 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004c14:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 8004c18:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004c1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004c1e:	085d      	lsrs	r5, r3, #1
 8004c20:	4608      	mov	r0, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004c22:	4617      	mov	r7, r2

  for (i = n; i != 0U; i--)
 8004c24:	462e      	mov	r6, r5
 8004c26:	3002      	adds	r0, #2
 8004c28:	b936      	cbnz	r6, 8004c38 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004c2a:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8004c2c:	bf44      	itt	mi
 8004c2e:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004c32:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 8004c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8004c38:	f837 4b04 	ldrh.w	r4, [r7], #4
  for (i = n; i != 0U; i--)
 8004c3c:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 8004c3e:	b2a4      	uxth	r4, r4
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004c40:	f800 4c02 	strb.w	r4, [r0, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004c44:	0a24      	lsrs	r4, r4, #8
 8004c46:	f800 4c01 	strb.w	r4, [r0, #-1]
 8004c4a:	e7ec      	b.n	8004c26 <USB_ReadPMA+0x12>

08004c4c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8004c4c:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004c4e:	4903      	ldr	r1, [pc, #12]	; (8004c5c <MX_FATFS_Init+0x10>)
 8004c50:	4803      	ldr	r0, [pc, #12]	; (8004c60 <MX_FATFS_Init+0x14>)
 8004c52:	f000 fd37 	bl	80056c4 <FATFS_LinkDriver>
 8004c56:	4b03      	ldr	r3, [pc, #12]	; (8004c64 <MX_FATFS_Init+0x18>)
 8004c58:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8004c5a:	bd08      	pop	{r3, pc}
 8004c5c:	20002e00 	.word	0x20002e00
 8004c60:	20000020 	.word	0x20000020
 8004c64:	20002e04 	.word	0x20002e04

08004c68 <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8004c68:	2201      	movs	r2, #1
 8004c6a:	4b02      	ldr	r3, [pc, #8]	; (8004c74 <USER_initialize+0xc>)
 8004c6c:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004c6e:	7818      	ldrb	r0, [r3, #0]
  /* USER CODE END INIT */
}
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	2000001c 	.word	0x2000001c

08004c78 <USER_read>:
)
{
  /* USER CODE BEGIN READ */
    return RES_OK;
  /* USER CODE END READ */
}
 8004c78:	2000      	movs	r0, #0
 8004c7a:	4770      	bx	lr

08004c7c <USER_ioctl>:
{
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
    return res;
  /* USER CODE END IOCTL */
}
 8004c7c:	2001      	movs	r0, #1
 8004c7e:	4770      	bx	lr

08004c80 <USER_write>:
 8004c80:	2000      	movs	r0, #0
 8004c82:	4770      	bx	lr

08004c84 <USER_status>:
 8004c84:	2201      	movs	r2, #1
 8004c86:	4b02      	ldr	r3, [pc, #8]	; (8004c90 <USER_status+0xc>)
 8004c88:	701a      	strb	r2, [r3, #0]
 8004c8a:	7818      	ldrb	r0, [r3, #0]
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	2000001c 	.word	0x2000001c

08004c94 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004c94:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8004c98:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004c9a:	b16b      	cbz	r3, 8004cb8 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004c9c:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004ca0:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8004ca4:	28ff      	cmp	r0, #255	; 0xff
 8004ca6:	d007      	beq.n	8004cb8 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8004cae:	4621      	mov	r1, r4
 8004cb0:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8004cb2:	23ff      	movs	r3, #255	; 0xff
 8004cb4:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8004cb8:	2000      	movs	r0, #0
 8004cba:	bd10      	pop	{r4, pc}

08004cbc <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8004cbc:	2343      	movs	r3, #67	; 0x43
 8004cbe:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8004cc0:	4800      	ldr	r0, [pc, #0]	; (8004cc4 <USBD_CDC_GetFSCfgDesc+0x8>)
 8004cc2:	4770      	bx	lr
 8004cc4:	2000006c 	.word	0x2000006c

08004cc8 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8004cc8:	2343      	movs	r3, #67	; 0x43
 8004cca:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8004ccc:	4800      	ldr	r0, [pc, #0]	; (8004cd0 <USBD_CDC_GetHSCfgDesc+0x8>)
 8004cce:	4770      	bx	lr
 8004cd0:	200000b0 	.word	0x200000b0

08004cd4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004cd4:	2343      	movs	r3, #67	; 0x43
 8004cd6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8004cd8:	4800      	ldr	r0, [pc, #0]	; (8004cdc <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8004cda:	4770      	bx	lr
 8004cdc:	20000100 	.word	0x20000100

08004ce0 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8004ce0:	230a      	movs	r3, #10
 8004ce2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8004ce4:	4800      	ldr	r0, [pc, #0]	; (8004ce8 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8004ce6:	4770      	bx	lr
 8004ce8:	200000f4 	.word	0x200000f4

08004cec <USBD_CDC_DataOut>:
{
 8004cec:	b538      	push	{r3, r4, r5, lr}
 8004cee:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004cf0:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004cf4:	f002 ffcc 	bl	8007c90 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8004cf8:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004cfc:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8004d00:	b14b      	cbz	r3, 8004d16 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004d02:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
 8004d06:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8004d10:	4798      	blx	r3
    return USBD_OK;
 8004d12:	2000      	movs	r0, #0
}
 8004d14:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8004d16:	2002      	movs	r0, #2
 8004d18:	e7fc      	b.n	8004d14 <USBD_CDC_DataOut+0x28>

08004d1a <USBD_CDC_DataIn>:
{
 8004d1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004d1c:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 8004d20:	b1ce      	cbz	r6, 8004d56 <USBD_CDC_DataIn+0x3c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004d22:	2314      	movs	r3, #20
 8004d24:	fb03 0301 	mla	r3, r3, r1, r0
 8004d28:	69da      	ldr	r2, [r3, #28]
 8004d2a:	b182      	cbz	r2, 8004d4e <USBD_CDC_DataIn+0x34>
 8004d2c:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 8004d30:	eb04 1441 	add.w	r4, r4, r1, lsl #5
 8004d34:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8004d36:	fbb2 f4f5 	udiv	r4, r2, r5
 8004d3a:	fb05 2414 	mls	r4, r5, r4, r2
 8004d3e:	b934      	cbnz	r4, 8004d4e <USBD_CDC_DataIn+0x34>
      pdev->ep_in[epnum].total_length = 0U;
 8004d40:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004d42:	4622      	mov	r2, r4
 8004d44:	4623      	mov	r3, r4
 8004d46:	f002 ff87 	bl	8007c58 <USBD_LL_Transmit>
    return USBD_OK;
 8004d4a:	4620      	mov	r0, r4
}
 8004d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8004d4e:	2000      	movs	r0, #0
 8004d50:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 8004d54:	e7fa      	b.n	8004d4c <USBD_CDC_DataIn+0x32>
    return USBD_FAIL;
 8004d56:	2002      	movs	r0, #2
 8004d58:	e7f8      	b.n	8004d4c <USBD_CDC_DataIn+0x32>

08004d5a <USBD_CDC_Setup>:
{
 8004d5a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t ifalt = 0U;
 8004d5e:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d62:	780a      	ldrb	r2, [r1, #0]
{
 8004d64:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d66:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 8004d6a:	460e      	mov	r6, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004d6c:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8004d70:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 8004d74:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d78:	d028      	beq.n	8004dcc <USBD_CDC_Setup+0x72>
 8004d7a:	2c20      	cmp	r4, #32
 8004d7c:	d145      	bne.n	8004e0a <USBD_CDC_Setup+0xb0>
      if (req->wLength)
 8004d7e:	88cc      	ldrh	r4, [r1, #6]
 8004d80:	784b      	ldrb	r3, [r1, #1]
 8004d82:	b1e4      	cbz	r4, 8004dbe <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 8004d84:	0612      	lsls	r2, r2, #24
 8004d86:	d511      	bpl.n	8004dac <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004d88:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8004d8c:	4639      	mov	r1, r7
 8004d8e:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8004d92:	4618      	mov	r0, r3
 8004d94:	4622      	mov	r2, r4
 8004d96:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004d98:	88f2      	ldrh	r2, [r6, #6]
 8004d9a:	4639      	mov	r1, r7
 8004d9c:	4628      	mov	r0, r5
 8004d9e:	f000 fc2c 	bl	80055fa <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8004da2:	4644      	mov	r4, r8
}
 8004da4:	4620      	mov	r0, r4
 8004da6:	b003      	add	sp, #12
 8004da8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hcdc->CmdOpCode = req->bRequest;
 8004dac:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004db0:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004db4:	4622      	mov	r2, r4
 8004db6:	4639      	mov	r1, r7
 8004db8:	f000 fc34 	bl	8005624 <USBD_CtlPrepareRx>
 8004dbc:	e7f1      	b.n	8004da2 <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004dbe:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	6895      	ldr	r5, [r2, #8]
 8004dc6:	4622      	mov	r2, r4
 8004dc8:	47a8      	blx	r5
 8004dca:	e7eb      	b.n	8004da4 <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 8004dcc:	784f      	ldrb	r7, [r1, #1]
 8004dce:	2f0a      	cmp	r7, #10
 8004dd0:	d00d      	beq.n	8004dee <USBD_CDC_Setup+0x94>
 8004dd2:	2f0b      	cmp	r7, #11
 8004dd4:	d015      	beq.n	8004e02 <USBD_CDC_Setup+0xa8>
 8004dd6:	b9c7      	cbnz	r7, 8004e0a <USBD_CDC_Setup+0xb0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004dd8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004ddc:	2b03      	cmp	r3, #3
 8004dde:	d114      	bne.n	8004e0a <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004de0:	2202      	movs	r2, #2
 8004de2:	f10d 0106 	add.w	r1, sp, #6
 8004de6:	f000 fc08 	bl	80055fa <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8004dea:	463c      	mov	r4, r7
 8004dec:	e7da      	b.n	8004da4 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004dee:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004df2:	2b03      	cmp	r3, #3
 8004df4:	d109      	bne.n	8004e0a <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004df6:	2201      	movs	r2, #1
 8004df8:	f10d 0105 	add.w	r1, sp, #5
 8004dfc:	f000 fbfd 	bl	80055fa <USBD_CtlSendData>
 8004e00:	e7d0      	b.n	8004da4 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004e02:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004e06:	2b03      	cmp	r3, #3
 8004e08:	d0cc      	beq.n	8004da4 <USBD_CDC_Setup+0x4a>
          USBD_CtlError(pdev, req);
 8004e0a:	4631      	mov	r1, r6
 8004e0c:	4628      	mov	r0, r5
 8004e0e:	f000 fbcd 	bl	80055ac <USBD_CtlError>
          ret = USBD_FAIL;
 8004e12:	2402      	movs	r4, #2
          break;
 8004e14:	e7c6      	b.n	8004da4 <USBD_CDC_Setup+0x4a>

08004e16 <USBD_CDC_DeInit>:
{
 8004e16:	b538      	push	{r3, r4, r5, lr}
 8004e18:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004e1a:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004e1c:	2181      	movs	r1, #129	; 0x81
 8004e1e:	f002 fed3 	bl	8007bc8 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004e22:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004e24:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004e26:	4620      	mov	r0, r4
 8004e28:	f002 fece 	bl	8007bc8 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004e2c:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004e30:	2182      	movs	r1, #130	; 0x82
 8004e32:	4620      	mov	r0, r4
 8004e34:	f002 fec8 	bl	8007bc8 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8004e38:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004e3c:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8004e3e:	b14b      	cbz	r3, 8004e54 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004e40:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004e48:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8004e4c:	f002 ff28 	bl	8007ca0 <USBD_static_free>
    pdev->pClassData = NULL;
 8004e50:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8004e54:	2000      	movs	r0, #0
 8004e56:	bd38      	pop	{r3, r4, r5, pc}

08004e58 <USBD_CDC_Init>:
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e58:	7c03      	ldrb	r3, [r0, #16]
{
 8004e5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e5e:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e60:	bbcb      	cbnz	r3, 8004ed6 <USBD_CDC_Init+0x7e>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004e62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e66:	2202      	movs	r2, #2
 8004e68:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004e6a:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004e6c:	f002 fe9c 	bl	8007ba8 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004e70:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004e74:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004e76:	4629      	mov	r1, r5
 8004e78:	2202      	movs	r2, #2
 8004e7a:	4620      	mov	r0, r4
 8004e7c:	f002 fe94 	bl	8007ba8 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004e80:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004e84:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004e86:	2308      	movs	r3, #8
 8004e88:	2203      	movs	r2, #3
 8004e8a:	2182      	movs	r1, #130	; 0x82
 8004e8c:	4620      	mov	r0, r4
 8004e8e:	f002 fe8b 	bl	8007ba8 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004e92:	6425      	str	r5, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004e94:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004e98:	f002 fefe 	bl	8007c98 <USBD_static_malloc>
 8004e9c:	4606      	mov	r6, r0
 8004e9e:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8004ea2:	b350      	cbz	r0, 8004efa <USBD_CDC_Init+0xa2>
    hcdc->TxState = 0U;
 8004ea4:	2700      	movs	r7, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004ea6:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4798      	blx	r3
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004eae:	f894 8010 	ldrb.w	r8, [r4, #16]
    hcdc->TxState = 0U;
 8004eb2:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    hcdc->RxState = 0U;
 8004eb6:	f8c6 7218 	str.w	r7, [r6, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004eba:	f1b8 0f00 	cmp.w	r8, #0
 8004ebe:	d113      	bne.n	8004ee8 <USBD_CDC_Init+0x90>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004ec0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ec4:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8004ec8:	4629      	mov	r1, r5
 8004eca:	4620      	mov	r0, r4
 8004ecc:	f002 fed2 	bl	8007c74 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8004ed0:	4640      	mov	r0, r8
}
 8004ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004ed6:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004ed8:	2340      	movs	r3, #64	; 0x40
 8004eda:	2202      	movs	r2, #2
 8004edc:	2181      	movs	r1, #129	; 0x81
 8004ede:	f002 fe63 	bl	8007ba8 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004ee2:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004ee4:	2340      	movs	r3, #64	; 0x40
 8004ee6:	e7c6      	b.n	8004e76 <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004ee8:	2340      	movs	r3, #64	; 0x40
 8004eea:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8004eee:	4629      	mov	r1, r5
 8004ef0:	4620      	mov	r0, r4
 8004ef2:	f002 febf 	bl	8007c74 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8004ef6:	4638      	mov	r0, r7
 8004ef8:	e7eb      	b.n	8004ed2 <USBD_CDC_Init+0x7a>
    ret = 1U;
 8004efa:	4628      	mov	r0, r5
 8004efc:	e7e9      	b.n	8004ed2 <USBD_CDC_Init+0x7a>

08004efe <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8004efe:	b119      	cbz	r1, 8004f08 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8004f00:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8004f04:	2000      	movs	r0, #0
 8004f06:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8004f08:	2002      	movs	r0, #2
  }

  return ret;
}
 8004f0a:	4770      	bx	lr

08004f0c <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004f0c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8004f10:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8004f12:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004f16:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8004f1a:	4770      	bx	lr

08004f1c <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8004f1c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 8004f20:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8004f22:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8004f26:	4770      	bx	lr

08004f28 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004f28:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8004f2c:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8004f2e:	b162      	cbz	r2, 8004f4a <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f30:	7c04      	ldrb	r4, [r0, #16]
 8004f32:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8004f36:	b934      	cbnz	r4, 8004f46 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004f38:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004f3c:	2101      	movs	r1, #1
 8004f3e:	f002 fe99 	bl	8007c74 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004f42:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 8004f44:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8004f46:	2340      	movs	r3, #64	; 0x40
 8004f48:	e7f8      	b.n	8004f3c <USBD_CDC_ReceivePacket+0x14>
    return USBD_FAIL;
 8004f4a:	2002      	movs	r0, #2
 8004f4c:	e7fa      	b.n	8004f44 <USBD_CDC_ReceivePacket+0x1c>

08004f4e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004f4e:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004f50:	b180      	cbz	r0, 8004f74 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004f52:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004f56:	b113      	cbz	r3, 8004f5e <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004f5e:	b109      	cbz	r1, 8004f64 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8004f60:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004f64:	2301      	movs	r3, #1
  pdev->id = id;
 8004f66:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004f68:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004f6c:	f002 fdcc 	bl	8007b08 <USBD_LL_Init>

  return USBD_OK;
 8004f70:	2000      	movs	r0, #0
}
 8004f72:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8004f74:	2002      	movs	r0, #2
 8004f76:	e7fc      	b.n	8004f72 <USBD_Init+0x24>

08004f78 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8004f78:	b119      	cbz	r1, 8004f82 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004f7a:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8004f7e:	2000      	movs	r0, #0
 8004f80:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004f82:	2002      	movs	r0, #2
  }

  return status;
}
 8004f84:	4770      	bx	lr

08004f86 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004f86:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004f88:	f002 fe00 	bl	8007b8c <USBD_LL_Start>

  return USBD_OK;
}
 8004f8c:	2000      	movs	r0, #0
 8004f8e:	bd08      	pop	{r3, pc}

08004f90 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004f90:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8004f92:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004f96:	b90b      	cbnz	r3, 8004f9c <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004f98:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 8004f9a:	bd08      	pop	{r3, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4798      	blx	r3
 8004fa0:	2800      	cmp	r0, #0
 8004fa2:	d0fa      	beq.n	8004f9a <USBD_SetClassConfig+0xa>
 8004fa4:	e7f8      	b.n	8004f98 <USBD_SetClassConfig+0x8>

08004fa6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004fa6:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004fa8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	4798      	blx	r3

  return USBD_OK;
}
 8004fb0:	2000      	movs	r0, #0
 8004fb2:	bd08      	pop	{r3, pc}

08004fb4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004fb4:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004fb6:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 8004fba:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004fbc:	4628      	mov	r0, r5
 8004fbe:	f000 fae1 	bl	8005584 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004fc2:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8004fc4:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8004fc8:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8004fcc:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8004fd0:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8004fd4:	f001 031f 	and.w	r3, r1, #31
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d00e      	beq.n	8004ffa <USBD_LL_SetupStage+0x46>
 8004fdc:	d307      	bcc.n	8004fee <USBD_LL_SetupStage+0x3a>
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d010      	beq.n	8005004 <USBD_LL_SetupStage+0x50>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004fe2:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	f002 fdfc 	bl	8007be4 <USBD_LL_StallEP>
      break;
 8004fec:	e003      	b.n	8004ff6 <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 8004fee:	4629      	mov	r1, r5
 8004ff0:	4620      	mov	r0, r4
 8004ff2:	f000 f8f5 	bl	80051e0 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8004ff6:	2000      	movs	r0, #0
 8004ff8:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8004ffa:	4629      	mov	r1, r5
 8004ffc:	4620      	mov	r0, r4
 8004ffe:	f000 fa13 	bl	8005428 <USBD_StdItfReq>
      break;
 8005002:	e7f8      	b.n	8004ff6 <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 8005004:	4629      	mov	r1, r5
 8005006:	4620      	mov	r0, r4
 8005008:	f000 fa33 	bl	8005472 <USBD_StdEPReq>
      break;
 800500c:	e7f3      	b.n	8004ff6 <USBD_LL_SetupStage+0x42>

0800500e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800500e:	b570      	push	{r4, r5, r6, lr}
 8005010:	4605      	mov	r5, r0
 8005012:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005014:	bb49      	cbnz	r1, 800506a <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005016:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800501a:	2b03      	cmp	r3, #3
 800501c:	d11e      	bne.n	800505c <USBD_LL_DataOutStage+0x4e>
    {
      if (pep->rem_length > pep->maxpacket)
 800501e:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 8005022:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 8005026:	4293      	cmp	r3, r2
 8005028:	d90b      	bls.n	8005042 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -= pep->maxpacket;
 800502a:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx(pdev, pdata,
 800502c:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 800502e:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8005032:	bf8c      	ite	hi
 8005034:	b29a      	uxthhi	r2, r3
 8005036:	b292      	uxthls	r2, r2
 8005038:	4631      	mov	r1, r6
 800503a:	f000 fb02 	bl	8005642 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800503e:	2000      	movs	r0, #0
}
 8005040:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005042:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	b123      	cbz	r3, 8005054 <USBD_LL_DataOutStage+0x46>
 800504a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800504e:	2a03      	cmp	r2, #3
 8005050:	d100      	bne.n	8005054 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 8005052:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8005054:	4628      	mov	r0, r5
 8005056:	f000 fafc 	bl	8005652 <USBD_CtlSendStatus>
 800505a:	e7f0      	b.n	800503e <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800505c:	2b05      	cmp	r3, #5
 800505e:	d1ee      	bne.n	800503e <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 8005060:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005064:	f002 fdbe 	bl	8007be4 <USBD_LL_StallEP>
 8005068:	e7e9      	b.n	800503e <USBD_LL_DataOutStage+0x30>
  else if ((pdev->pClass->DataOut != NULL) &&
 800506a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	b12b      	cbz	r3, 800507e <USBD_LL_DataOutStage+0x70>
 8005072:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8005076:	2a03      	cmp	r2, #3
 8005078:	d101      	bne.n	800507e <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 800507a:	4798      	blx	r3
 800507c:	e7df      	b.n	800503e <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 800507e:	2002      	movs	r0, #2
 8005080:	e7de      	b.n	8005040 <USBD_LL_DataOutStage+0x32>

08005082 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005082:	b570      	push	{r4, r5, r6, lr}
 8005084:	4613      	mov	r3, r2
 8005086:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005088:	460e      	mov	r6, r1
 800508a:	2900      	cmp	r1, #0
 800508c:	d147      	bne.n	800511e <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800508e:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8005092:	2a02      	cmp	r2, #2
 8005094:	d13c      	bne.n	8005110 <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 8005096:	e9d0 5208 	ldrd	r5, r2, [r0, #32]
 800509a:	4295      	cmp	r5, r2
 800509c:	d913      	bls.n	80050c6 <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 800509e:	1aaa      	subs	r2, r5, r2
 80050a0:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80050a2:	4619      	mov	r1, r3
 80050a4:	b292      	uxth	r2, r2
 80050a6:	f000 fab5 	bl	8005614 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80050aa:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80050ac:	461a      	mov	r2, r3
 80050ae:	4619      	mov	r1, r3
 80050b0:	4620      	mov	r0, r4
 80050b2:	f002 fddf 	bl	8007c74 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 80050b6:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 80050ba:	2000      	movs	r0, #0
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d101      	bne.n	80050c4 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80050c0:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 80050c4:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80050c6:	69c3      	ldr	r3, [r0, #28]
 80050c8:	fbb3 f5f2 	udiv	r5, r3, r2
 80050cc:	fb02 3515 	mls	r5, r2, r5, r3
 80050d0:	b965      	cbnz	r5, 80050ec <USBD_LL_DataInStage+0x6a>
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d80a      	bhi.n	80050ec <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 80050d6:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 80050da:	4293      	cmp	r3, r2
 80050dc:	d206      	bcs.n	80050ec <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80050de:	462a      	mov	r2, r5
 80050e0:	f000 fa98 	bl	8005614 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80050e4:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80050e8:	462b      	mov	r3, r5
 80050ea:	e7df      	b.n	80050ac <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80050ec:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	b12b      	cbz	r3, 8005100 <USBD_LL_DataInStage+0x7e>
 80050f4:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 80050f8:	2a03      	cmp	r2, #3
 80050fa:	d101      	bne.n	8005100 <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 80050fc:	4620      	mov	r0, r4
 80050fe:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8005100:	2180      	movs	r1, #128	; 0x80
 8005102:	4620      	mov	r0, r4
 8005104:	f002 fd6e 	bl	8007be4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005108:	4620      	mov	r0, r4
 800510a:	f000 faad 	bl	8005668 <USBD_CtlReceiveStatus>
 800510e:	e7d2      	b.n	80050b6 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005110:	f032 0304 	bics.w	r3, r2, #4
 8005114:	d1cf      	bne.n	80050b6 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8005116:	2180      	movs	r1, #128	; 0x80
 8005118:	f002 fd64 	bl	8007be4 <USBD_LL_StallEP>
 800511c:	e7cb      	b.n	80050b6 <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 800511e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005122:	695b      	ldr	r3, [r3, #20]
 8005124:	b133      	cbz	r3, 8005134 <USBD_LL_DataInStage+0xb2>
 8005126:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800512a:	2a03      	cmp	r2, #3
 800512c:	d102      	bne.n	8005134 <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 800512e:	4798      	blx	r3
  return USBD_OK;
 8005130:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8005132:	e7c7      	b.n	80050c4 <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 8005134:	2002      	movs	r0, #2
 8005136:	e7c5      	b.n	80050c4 <USBD_LL_DataInStage+0x42>

08005138 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005138:	2200      	movs	r2, #0
{
 800513a:	b570      	push	{r4, r5, r6, lr}
 800513c:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800513e:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005140:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005142:	4611      	mov	r1, r2
 8005144:	2340      	movs	r3, #64	; 0x40
 8005146:	f002 fd2f 	bl	8007ba8 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800514a:	4633      	mov	r3, r6
 800514c:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800514e:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005152:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005156:	2200      	movs	r2, #0
 8005158:	4620      	mov	r0, r4
 800515a:	f002 fd25 	bl	8007ba8 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800515e:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8005160:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005164:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005166:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005168:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800516c:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8005170:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8005172:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 8005176:	b123      	cbz	r3, 8005182 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005178:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800517c:	4620      	mov	r0, r4
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	4798      	blx	r3
  }

  return USBD_OK;
}
 8005182:	2000      	movs	r0, #0
 8005184:	bd70      	pop	{r4, r5, r6, pc}

08005186 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8005186:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8005188:	2000      	movs	r0, #0
 800518a:	4770      	bx	lr

0800518c <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800518c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005190:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005194:	2304      	movs	r3, #4
 8005196:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800519a:	2000      	movs	r0, #0
 800519c:	4770      	bx	lr

0800519e <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800519e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80051a2:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 80051a4:	bf04      	itt	eq
 80051a6:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 80051aa:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 80051ae:	2000      	movs	r0, #0
 80051b0:	4770      	bx	lr

080051b2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80051b2:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051b4:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80051b8:	2a03      	cmp	r2, #3
 80051ba:	d104      	bne.n	80051c6 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 80051bc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80051c0:	69db      	ldr	r3, [r3, #28]
 80051c2:	b103      	cbz	r3, 80051c6 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80051c4:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 80051c6:	2000      	movs	r0, #0
 80051c8:	bd08      	pop	{r3, pc}

080051ca <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 80051ca:	b510      	push	{r4, lr}
 80051cc:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 80051ce:	2180      	movs	r1, #128	; 0x80
 80051d0:	f002 fd08 	bl	8007be4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80051d4:	4620      	mov	r0, r4
}
 80051d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 80051da:	2100      	movs	r1, #0
 80051dc:	f002 bd02 	b.w	8007be4 <USBD_LL_StallEP>

080051e0 <USBD_StdDevReq>:
{
 80051e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80051e2:	780b      	ldrb	r3, [r1, #0]
{
 80051e4:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80051e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80051ea:	2b20      	cmp	r3, #32
{
 80051ec:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80051ee:	d012      	beq.n	8005216 <USBD_StdDevReq+0x36>
 80051f0:	2b40      	cmp	r3, #64	; 0x40
 80051f2:	d010      	beq.n	8005216 <USBD_StdDevReq+0x36>
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d15b      	bne.n	80052b0 <USBD_StdDevReq+0xd0>
      switch (req->bRequest)
 80051f8:	784b      	ldrb	r3, [r1, #1]
 80051fa:	2b09      	cmp	r3, #9
 80051fc:	d858      	bhi.n	80052b0 <USBD_StdDevReq+0xd0>
 80051fe:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005202:	00e9      	.short	0x00e9
 8005204:	00570105 	.word	0x00570105
 8005208:	005700fe 	.word	0x005700fe
 800520c:	00130084 	.word	0x00130084
 8005210:	00d20057 	.word	0x00d20057
 8005214:	00a0      	.short	0x00a0
      pdev->pClass->Setup(pdev, req);
 8005216:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800521a:	4629      	mov	r1, r5
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	4620      	mov	r0, r4
 8005220:	4798      	blx	r3
}
 8005222:	2000      	movs	r0, #0
 8005224:	b003      	add	sp, #12
 8005226:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 8005228:	2300      	movs	r3, #0
 800522a:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800522e:	884b      	ldrh	r3, [r1, #2]
 8005230:	0a1a      	lsrs	r2, r3, #8
 8005232:	3a01      	subs	r2, #1
 8005234:	2a06      	cmp	r2, #6
 8005236:	d83b      	bhi.n	80052b0 <USBD_StdDevReq+0xd0>
 8005238:	e8df f002 	tbb	[pc, r2]
 800523c:	3a2d2004 	.word	0x3a2d2004
 8005240:	523a      	.short	0x523a
 8005242:	5c          	.byte	0x5c
 8005243:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005244:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005248:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800524a:	f10d 0106 	add.w	r1, sp, #6
 800524e:	7c20      	ldrb	r0, [r4, #16]
 8005250:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8005252:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8005256:	b152      	cbz	r2, 800526e <USBD_StdDevReq+0x8e>
 8005258:	88eb      	ldrh	r3, [r5, #6]
 800525a:	b143      	cbz	r3, 800526e <USBD_StdDevReq+0x8e>
      len = MIN(len, req->wLength);
 800525c:	429a      	cmp	r2, r3
 800525e:	bf28      	it	cs
 8005260:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005262:	4601      	mov	r1, r0
 8005264:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8005266:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800526a:	f000 f9c6 	bl	80055fa <USBD_CtlSendData>
    if (req->wLength == 0U)
 800526e:	88eb      	ldrh	r3, [r5, #6]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1d6      	bne.n	8005222 <USBD_StdDevReq+0x42>
        USBD_CtlSendStatus(pdev);
 8005274:	4620      	mov	r0, r4
 8005276:	f000 f9ec 	bl	8005652 <USBD_CtlSendStatus>
 800527a:	e7d2      	b.n	8005222 <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800527c:	7c02      	ldrb	r2, [r0, #16]
 800527e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005282:	b932      	cbnz	r2, 8005292 <USBD_StdDevReq+0xb2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005286:	f10d 0006 	add.w	r0, sp, #6
 800528a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800528c:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800528e:	7043      	strb	r3, [r0, #1]
 8005290:	e7df      	b.n	8005252 <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005294:	e7f7      	b.n	8005286 <USBD_StdDevReq+0xa6>
      switch ((uint8_t)(req->wValue))
 8005296:	b2db      	uxtb	r3, r3
 8005298:	2b05      	cmp	r3, #5
 800529a:	d809      	bhi.n	80052b0 <USBD_StdDevReq+0xd0>
 800529c:	e8df f003 	tbb	[pc, r3]
 80052a0:	14100c03 	.word	0x14100c03
 80052a4:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80052a6:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80052aa:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1cc      	bne.n	800524a <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 80052b0:	4620      	mov	r0, r4
 80052b2:	f7ff ff8a 	bl	80051ca <USBD_CtlError.constprop.1>
 80052b6:	e7b4      	b.n	8005222 <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80052b8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	e7f5      	b.n	80052ac <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80052c0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	e7f1      	b.n	80052ac <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80052c8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	e7ed      	b.n	80052ac <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80052d0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	e7e9      	b.n	80052ac <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80052d8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	e7e5      	b.n	80052ac <USBD_StdDevReq+0xcc>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052e0:	7c03      	ldrb	r3, [r0, #16]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1e4      	bne.n	80052b0 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80052e6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80052ea:	f10d 0006 	add.w	r0, sp, #6
 80052ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f0:	4798      	blx	r3
 80052f2:	e7ae      	b.n	8005252 <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052f4:	7c03      	ldrb	r3, [r0, #16]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1da      	bne.n	80052b0 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80052fa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80052fe:	f10d 0006 	add.w	r0, sp, #6
 8005302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005304:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005306:	2307      	movs	r3, #7
 8005308:	e7c1      	b.n	800528e <USBD_StdDevReq+0xae>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800530a:	888b      	ldrh	r3, [r1, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1cf      	bne.n	80052b0 <USBD_StdDevReq+0xd0>
 8005310:	88cb      	ldrh	r3, [r1, #6]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1cc      	bne.n	80052b0 <USBD_StdDevReq+0xd0>
 8005316:	884d      	ldrh	r5, [r1, #2]
 8005318:	2d7f      	cmp	r5, #127	; 0x7f
 800531a:	d8c9      	bhi.n	80052b0 <USBD_StdDevReq+0xd0>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800531c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005320:	2b03      	cmp	r3, #3
 8005322:	d0c5      	beq.n	80052b0 <USBD_StdDevReq+0xd0>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005324:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8005326:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800532a:	f002 fc87 	bl	8007c3c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800532e:	4620      	mov	r0, r4
 8005330:	f000 f98f 	bl	8005652 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8005334:	b11d      	cbz	r5, 800533e <USBD_StdDevReq+0x15e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005336:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005338:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800533c:	e771      	b.n	8005222 <USBD_StdDevReq+0x42>
 800533e:	2301      	movs	r3, #1
 8005340:	e7fa      	b.n	8005338 <USBD_StdDevReq+0x158>
  cfgidx = (uint8_t)(req->wValue);
 8005342:	7889      	ldrb	r1, [r1, #2]
 8005344:	4d37      	ldr	r5, [pc, #220]	; (8005424 <USBD_StdDevReq+0x244>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005346:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8005348:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800534a:	d8b1      	bhi.n	80052b0 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 800534c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005350:	2b02      	cmp	r3, #2
 8005352:	d008      	beq.n	8005366 <USBD_StdDevReq+0x186>
 8005354:	2b03      	cmp	r3, #3
 8005356:	d014      	beq.n	8005382 <USBD_StdDevReq+0x1a2>
        USBD_CtlError(pdev, req);
 8005358:	f7ff ff37 	bl	80051ca <USBD_CtlError.constprop.1>
        USBD_ClrClassConfig(pdev, cfgidx);
 800535c:	7829      	ldrb	r1, [r5, #0]
 800535e:	4620      	mov	r0, r4
 8005360:	f7ff fe21 	bl	8004fa6 <USBD_ClrClassConfig>
 8005364:	e75d      	b.n	8005222 <USBD_StdDevReq+0x42>
        if (cfgidx)
 8005366:	2900      	cmp	r1, #0
 8005368:	d084      	beq.n	8005274 <USBD_StdDevReq+0x94>
          pdev->dev_config = cfgidx;
 800536a:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800536c:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 800536e:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005370:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005374:	4620      	mov	r0, r4
 8005376:	f7ff fe0b 	bl	8004f90 <USBD_SetClassConfig>
 800537a:	2802      	cmp	r0, #2
 800537c:	f47f af7a 	bne.w	8005274 <USBD_StdDevReq+0x94>
 8005380:	e796      	b.n	80052b0 <USBD_StdDevReq+0xd0>
        if (cfgidx == 0U)
 8005382:	b931      	cbnz	r1, 8005392 <USBD_StdDevReq+0x1b2>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005384:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 8005386:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005388:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 800538c:	f7ff fe0b 	bl	8004fa6 <USBD_ClrClassConfig>
 8005390:	e770      	b.n	8005274 <USBD_StdDevReq+0x94>
        else if (cfgidx != pdev->dev_config)
 8005392:	6841      	ldr	r1, [r0, #4]
 8005394:	2901      	cmp	r1, #1
 8005396:	f43f af6d 	beq.w	8005274 <USBD_StdDevReq+0x94>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800539a:	b2c9      	uxtb	r1, r1
 800539c:	f7ff fe03 	bl	8004fa6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80053a0:	7829      	ldrb	r1, [r5, #0]
 80053a2:	6061      	str	r1, [r4, #4]
 80053a4:	e7e6      	b.n	8005374 <USBD_StdDevReq+0x194>
  if (req->wLength != 1U)
 80053a6:	88ca      	ldrh	r2, [r1, #6]
 80053a8:	2a01      	cmp	r2, #1
 80053aa:	d181      	bne.n	80052b0 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 80053ac:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f43f af7d 	beq.w	80052b0 <USBD_StdDevReq+0xd0>
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d904      	bls.n	80053c4 <USBD_StdDevReq+0x1e4>
 80053ba:	2b03      	cmp	r3, #3
 80053bc:	f47f af78 	bne.w	80052b0 <USBD_StdDevReq+0xd0>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80053c0:	1d01      	adds	r1, r0, #4
 80053c2:	e003      	b.n	80053cc <USBD_StdDevReq+0x1ec>
        pdev->dev_default_config = 0U;
 80053c4:	4601      	mov	r1, r0
 80053c6:	2300      	movs	r3, #0
 80053c8:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80053cc:	4620      	mov	r0, r4
 80053ce:	f000 f914 	bl	80055fa <USBD_CtlSendData>
 80053d2:	e726      	b.n	8005222 <USBD_StdDevReq+0x42>
  switch (pdev->dev_state)
 80053d4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80053d8:	3b01      	subs	r3, #1
 80053da:	2b02      	cmp	r3, #2
 80053dc:	f63f af68 	bhi.w	80052b0 <USBD_StdDevReq+0xd0>
      if (req->wLength != 0x2U)
 80053e0:	88cb      	ldrh	r3, [r1, #6]
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	f47f af64 	bne.w	80052b0 <USBD_StdDevReq+0xd0>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80053e8:	2301      	movs	r3, #1
 80053ea:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 80053ec:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 80053f0:	b10b      	cbz	r3, 80053f6 <USBD_StdDevReq+0x216>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80053f2:	2303      	movs	r3, #3
 80053f4:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80053f6:	2202      	movs	r2, #2
 80053f8:	f104 010c 	add.w	r1, r4, #12
 80053fc:	e7e6      	b.n	80053cc <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80053fe:	884b      	ldrh	r3, [r1, #2]
 8005400:	2b01      	cmp	r3, #1
 8005402:	f47f af0e 	bne.w	8005222 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8005406:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 800540a:	e733      	b.n	8005274 <USBD_StdDevReq+0x94>
  switch (pdev->dev_state)
 800540c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005410:	3b01      	subs	r3, #1
 8005412:	2b02      	cmp	r3, #2
 8005414:	f63f af4c 	bhi.w	80052b0 <USBD_StdDevReq+0xd0>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005418:	884b      	ldrh	r3, [r1, #2]
 800541a:	2b01      	cmp	r3, #1
 800541c:	f47f af01 	bne.w	8005222 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8005420:	2300      	movs	r3, #0
 8005422:	e7f0      	b.n	8005406 <USBD_StdDevReq+0x226>
 8005424:	200007b0 	.word	0x200007b0

08005428 <USBD_StdItfReq>:
{
 8005428:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800542a:	780b      	ldrb	r3, [r1, #0]
{
 800542c:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800542e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005432:	2b20      	cmp	r3, #32
{
 8005434:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005436:	d002      	beq.n	800543e <USBD_StdItfReq+0x16>
 8005438:	2b40      	cmp	r3, #64	; 0x40
 800543a:	d000      	beq.n	800543e <USBD_StdItfReq+0x16>
 800543c:	b9ab      	cbnz	r3, 800546a <USBD_StdItfReq+0x42>
      switch (pdev->dev_state)
 800543e:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8005442:	3b01      	subs	r3, #1
 8005444:	2b02      	cmp	r3, #2
 8005446:	d810      	bhi.n	800546a <USBD_StdItfReq+0x42>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005448:	792b      	ldrb	r3, [r5, #4]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d80d      	bhi.n	800546a <USBD_StdItfReq+0x42>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800544e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8005452:	4629      	mov	r1, r5
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	4620      	mov	r0, r4
 8005458:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800545a:	88eb      	ldrh	r3, [r5, #6]
 800545c:	b91b      	cbnz	r3, 8005466 <USBD_StdItfReq+0x3e>
 800545e:	b910      	cbnz	r0, 8005466 <USBD_StdItfReq+0x3e>
              USBD_CtlSendStatus(pdev);
 8005460:	4620      	mov	r0, r4
 8005462:	f000 f8f6 	bl	8005652 <USBD_CtlSendStatus>
}
 8005466:	2000      	movs	r0, #0
 8005468:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 800546a:	4620      	mov	r0, r4
 800546c:	f7ff fead 	bl	80051ca <USBD_CtlError.constprop.1>
          break;
 8005470:	e7f9      	b.n	8005466 <USBD_StdItfReq+0x3e>

08005472 <USBD_StdEPReq>:
{
 8005472:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005474:	780a      	ldrb	r2, [r1, #0]
{
 8005476:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005478:	f002 0260 	and.w	r2, r2, #96	; 0x60
 800547c:	2a20      	cmp	r2, #32
{
 800547e:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005480:	d014      	beq.n	80054ac <USBD_StdEPReq+0x3a>
 8005482:	2a40      	cmp	r2, #64	; 0x40
 8005484:	d012      	beq.n	80054ac <USBD_StdEPReq+0x3a>
 8005486:	b96a      	cbnz	r2, 80054a4 <USBD_StdEPReq+0x32>
      switch (req->bRequest)
 8005488:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 800548a:	888d      	ldrh	r5, [r1, #4]
      switch (req->bRequest)
 800548c:	2a01      	cmp	r2, #1
  ep_addr  = LOBYTE(req->wIndex);
 800548e:	b2e9      	uxtb	r1, r5
      switch (req->bRequest)
 8005490:	d020      	beq.n	80054d4 <USBD_StdEPReq+0x62>
 8005492:	d336      	bcc.n	8005502 <USBD_StdEPReq+0x90>
 8005494:	2a03      	cmp	r2, #3
 8005496:	d105      	bne.n	80054a4 <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 8005498:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800549c:	2a02      	cmp	r2, #2
 800549e:	d027      	beq.n	80054f0 <USBD_StdEPReq+0x7e>
 80054a0:	2a03      	cmp	r2, #3
 80054a2:	d00b      	beq.n	80054bc <USBD_StdEPReq+0x4a>
              USBD_CtlError(pdev, req);
 80054a4:	4620      	mov	r0, r4
 80054a6:	f7ff fe90 	bl	80051ca <USBD_CtlError.constprop.1>
              break;
 80054aa:	e005      	b.n	80054b8 <USBD_StdEPReq+0x46>
      pdev->pClass->Setup(pdev, req);
 80054ac:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 80054b0:	4619      	mov	r1, r3
 80054b2:	6892      	ldr	r2, [r2, #8]
 80054b4:	4620      	mov	r0, r4
 80054b6:	4790      	blx	r2
}
 80054b8:	2000      	movs	r0, #0
 80054ba:	bd38      	pop	{r3, r4, r5, pc}
              if (req->wValue == USB_FEATURE_EP_HALT)
 80054bc:	885a      	ldrh	r2, [r3, #2]
 80054be:	b92a      	cbnz	r2, 80054cc <USBD_StdEPReq+0x5a>
                if ((ep_addr != 0x00U) &&
 80054c0:	064a      	lsls	r2, r1, #25
 80054c2:	d003      	beq.n	80054cc <USBD_StdEPReq+0x5a>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80054c4:	88db      	ldrh	r3, [r3, #6]
 80054c6:	b90b      	cbnz	r3, 80054cc <USBD_StdEPReq+0x5a>
                  USBD_LL_StallEP(pdev, ep_addr);
 80054c8:	f002 fb8c 	bl	8007be4 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 80054cc:	4620      	mov	r0, r4
 80054ce:	f000 f8c0 	bl	8005652 <USBD_CtlSendStatus>
              break;
 80054d2:	e7f1      	b.n	80054b8 <USBD_StdEPReq+0x46>
          switch (pdev->dev_state)
 80054d4:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80054d8:	2a02      	cmp	r2, #2
 80054da:	d009      	beq.n	80054f0 <USBD_StdEPReq+0x7e>
 80054dc:	2a03      	cmp	r2, #3
 80054de:	d1e1      	bne.n	80054a4 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80054e0:	885b      	ldrh	r3, [r3, #2]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1e8      	bne.n	80054b8 <USBD_StdEPReq+0x46>
                if ((ep_addr & 0x7FU) != 0x00U)
 80054e6:	064d      	lsls	r5, r1, #25
 80054e8:	d0f0      	beq.n	80054cc <USBD_StdEPReq+0x5a>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80054ea:	f002 fb89 	bl	8007c00 <USBD_LL_ClearStallEP>
 80054ee:	e7ed      	b.n	80054cc <USBD_StdEPReq+0x5a>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80054f0:	064b      	lsls	r3, r1, #25
 80054f2:	d0d7      	beq.n	80054a4 <USBD_StdEPReq+0x32>
                USBD_LL_StallEP(pdev, ep_addr);
 80054f4:	f002 fb76 	bl	8007be4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80054f8:	2180      	movs	r1, #128	; 0x80
 80054fa:	4620      	mov	r0, r4
 80054fc:	f002 fb72 	bl	8007be4 <USBD_LL_StallEP>
 8005500:	e7da      	b.n	80054b8 <USBD_StdEPReq+0x46>
          switch (pdev->dev_state)
 8005502:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005506:	2b02      	cmp	r3, #2
 8005508:	d018      	beq.n	800553c <USBD_StdEPReq+0xca>
 800550a:	2b03      	cmp	r3, #3
 800550c:	d1ca      	bne.n	80054a4 <USBD_StdEPReq+0x32>
 800550e:	2314      	movs	r3, #20
 8005510:	f001 020f 	and.w	r2, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 8005514:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005518:	fb03 0202 	mla	r2, r3, r2, r0
              if ((ep_addr & 0x80U) == 0x80U)
 800551c:	d01f      	beq.n	800555e <USBD_StdEPReq+0xec>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800551e:	6992      	ldr	r2, [r2, #24]
 8005520:	2a00      	cmp	r2, #0
 8005522:	d0bf      	beq.n	80054a4 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005524:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8005528:	fb05 3503 	mla	r5, r5, r3, r3
 800552c:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800552e:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8005532:	d11f      	bne.n	8005574 <USBD_StdEPReq+0x102>
                pep->status = 0x0001U;
 8005534:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005536:	2202      	movs	r2, #2
 8005538:	4629      	mov	r1, r5
 800553a:	e00c      	b.n	8005556 <USBD_StdEPReq+0xe4>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800553c:	064a      	lsls	r2, r1, #25
 800553e:	d1b1      	bne.n	80054a4 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005540:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 8005542:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005546:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800554a:	bf4c      	ite	mi
 800554c:	f100 0114 	addmi.w	r1, r0, #20
 8005550:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 8005554:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005556:	4620      	mov	r0, r4
 8005558:	f000 f84f 	bl	80055fa <USBD_CtlSendData>
              break;
 800555c:	e7ac      	b.n	80054b8 <USBD_StdEPReq+0x46>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800555e:	f8d2 2158 	ldr.w	r2, [r2, #344]	; 0x158
 8005562:	2a00      	cmp	r2, #0
 8005564:	d09e      	beq.n	80054a4 <USBD_StdEPReq+0x32>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005566:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800556a:	fb03 0505 	mla	r5, r3, r5, r0
 800556e:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 8005572:	e7dc      	b.n	800552e <USBD_StdEPReq+0xbc>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005574:	4620      	mov	r0, r4
 8005576:	f002 fb51 	bl	8007c1c <USBD_LL_IsStallEP>
 800557a:	b108      	cbz	r0, 8005580 <USBD_StdEPReq+0x10e>
                pep->status = 0x0001U;
 800557c:	2301      	movs	r3, #1
 800557e:	e7d9      	b.n	8005534 <USBD_StdEPReq+0xc2>
                pep->status = 0x0000U;
 8005580:	6028      	str	r0, [r5, #0]
 8005582:	e7d8      	b.n	8005536 <USBD_StdEPReq+0xc4>

08005584 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8005584:	780b      	ldrb	r3, [r1, #0]
 8005586:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005588:	784b      	ldrb	r3, [r1, #1]
 800558a:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800558c:	78ca      	ldrb	r2, [r1, #3]
 800558e:	788b      	ldrb	r3, [r1, #2]
 8005590:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005594:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005596:	794a      	ldrb	r2, [r1, #5]
 8005598:	790b      	ldrb	r3, [r1, #4]
 800559a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800559e:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80055a0:	79ca      	ldrb	r2, [r1, #7]
 80055a2:	798b      	ldrb	r3, [r1, #6]
 80055a4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80055a8:	80c3      	strh	r3, [r0, #6]
}
 80055aa:	4770      	bx	lr

080055ac <USBD_CtlError>:
{
 80055ac:	b510      	push	{r4, lr}
 80055ae:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 80055b0:	2180      	movs	r1, #128	; 0x80
 80055b2:	f002 fb17 	bl	8007be4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80055b6:	4620      	mov	r0, r4
}
 80055b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 80055bc:	2100      	movs	r1, #0
 80055be:	f002 bb11 	b.w	8007be4 <USBD_LL_StallEP>

080055c2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80055c2:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 80055c4:	b188      	cbz	r0, 80055ea <USBD_GetString+0x28>
 80055c6:	4605      	mov	r5, r0
 80055c8:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 80055ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	2c00      	cmp	r4, #0
 80055d2:	d1f9      	bne.n	80055c8 <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80055d4:	3301      	adds	r3, #1
 80055d6:	005b      	lsls	r3, r3, #1
 80055d8:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80055da:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80055dc:	2303      	movs	r3, #3
 80055de:	704b      	strb	r3, [r1, #1]
 80055e0:	2302      	movs	r3, #2
 80055e2:	3801      	subs	r0, #1
    while (*desc != '\0')
 80055e4:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80055e8:	b905      	cbnz	r5, 80055ec <USBD_GetString+0x2a>
}
 80055ea:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 80055ec:	1c5a      	adds	r2, r3, #1
 80055ee:	54cd      	strb	r5, [r1, r3]
 80055f0:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 80055f2:	3302      	adds	r3, #2
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	548c      	strb	r4, [r1, r2]
 80055f8:	e7f4      	b.n	80055e4 <USBD_GetString+0x22>

080055fa <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80055fa:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80055fc:	2202      	movs	r2, #2
{
 80055fe:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005600:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 8005604:	e9c0 3307 	strd	r3, r3, [r0, #28]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005608:	460a      	mov	r2, r1
 800560a:	2100      	movs	r1, #0
 800560c:	f002 fb24 	bl	8007c58 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005610:	2000      	movs	r0, #0
 8005612:	bd10      	pop	{r4, pc}

08005614 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005614:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005616:	4613      	mov	r3, r2
 8005618:	460a      	mov	r2, r1
 800561a:	2100      	movs	r1, #0
 800561c:	f002 fb1c 	bl	8007c58 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005620:	2000      	movs	r0, #0
 8005622:	bd08      	pop	{r3, pc}

08005624 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005624:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005626:	2203      	movs	r2, #3
{
 8005628:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800562a:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800562e:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005632:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8005634:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005638:	2100      	movs	r1, #0
 800563a:	f002 fb1b 	bl	8007c74 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800563e:	2000      	movs	r0, #0
 8005640:	bd10      	pop	{r4, pc}

08005642 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005642:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005644:	4613      	mov	r3, r2
 8005646:	460a      	mov	r2, r1
 8005648:	2100      	movs	r1, #0
 800564a:	f002 fb13 	bl	8007c74 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800564e:	2000      	movs	r0, #0
 8005650:	bd08      	pop	{r3, pc}

08005652 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005652:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005654:	2304      	movs	r3, #4
 8005656:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800565a:	2300      	movs	r3, #0
 800565c:	461a      	mov	r2, r3
 800565e:	4619      	mov	r1, r3
 8005660:	f002 fafa 	bl	8007c58 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005664:	2000      	movs	r0, #0
 8005666:	bd08      	pop	{r3, pc}

08005668 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005668:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800566a:	2305      	movs	r3, #5
 800566c:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005670:	2300      	movs	r3, #0
 8005672:	461a      	mov	r2, r3
 8005674:	4619      	mov	r1, r3
 8005676:	f002 fafd 	bl	8007c74 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800567a:	2000      	movs	r0, #0
 800567c:	bd08      	pop	{r3, pc}
	...

08005680 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005680:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 8005682:	4b0f      	ldr	r3, [pc, #60]	; (80056c0 <FATFS_LinkDriverEx+0x40>)
 8005684:	7a5c      	ldrb	r4, [r3, #9]
 8005686:	2c01      	cmp	r4, #1
 8005688:	d818      	bhi.n	80056bc <FATFS_LinkDriverEx+0x3c>
  {
    disk.is_initialized[disk.nbr] = 0;
 800568a:	2400      	movs	r4, #0
 800568c:	7a5d      	ldrb	r5, [r3, #9]
 800568e:	b2ed      	uxtb	r5, r5
 8005690:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;  
 8005692:	7a5d      	ldrb	r5, [r3, #9]
 8005694:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8005698:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;  
 800569a:	7a58      	ldrb	r0, [r3, #9]
 800569c:	4418      	add	r0, r3
 800569e:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 80056a0:	7a5a      	ldrb	r2, [r3, #9]
 80056a2:	b2d2      	uxtb	r2, r2
 80056a4:	1c50      	adds	r0, r2, #1
 80056a6:	b2c0      	uxtb	r0, r0
 80056a8:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 80056aa:	233a      	movs	r3, #58	; 0x3a
 80056ac:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 80056ae:	232f      	movs	r3, #47	; 0x2f
    path[3] = 0;
 80056b0:	4620      	mov	r0, r4
    path[0] = DiskNum + '0';
 80056b2:	3230      	adds	r2, #48	; 0x30
 80056b4:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 80056b6:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 80056b8:	70cc      	strb	r4, [r1, #3]
    ret = 0;
  }
  
  return ret;
}
 80056ba:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 80056bc:	2001      	movs	r0, #1
 80056be:	e7fc      	b.n	80056ba <FATFS_LinkDriverEx+0x3a>
 80056c0:	200007b4 	.word	0x200007b4

080056c4 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 80056c4:	2200      	movs	r2, #0
 80056c6:	f7ff bfdb 	b.w	8005680 <FATFS_LinkDriverEx>
	...

080056cc <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056cc:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80056d0:	b113      	cbz	r3, 80056d8 <osKernelInitialize+0xc>
    stat = osErrorISR;
 80056d2:	f06f 0005 	mvn.w	r0, #5
 80056d6:	4770      	bx	lr
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056d8:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1f8      	bne.n	80056d2 <osKernelInitialize+0x6>
 80056e0:	4b07      	ldr	r3, [pc, #28]	; (8005700 <osKernelInitialize+0x34>)
 80056e2:	6818      	ldr	r0, [r3, #0]
 80056e4:	2802      	cmp	r0, #2
 80056e6:	d106      	bne.n	80056f6 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80056e8:	f3ef 8311 	mrs	r3, BASEPRI
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1f0      	bne.n	80056d2 <osKernelInitialize+0x6>
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
      stat = osOK;
    } else {
      stat = osError;
 80056f0:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 80056f4:	4770      	bx	lr
    if (KernelState == osKernelInactive) {
 80056f6:	2800      	cmp	r0, #0
 80056f8:	d1fa      	bne.n	80056f0 <osKernelInitialize+0x24>
      KernelState = osKernelReady;
 80056fa:	2201      	movs	r2, #1
 80056fc:	601a      	str	r2, [r3, #0]
 80056fe:	4770      	bx	lr
 8005700:	2000091c 	.word	0x2000091c

08005704 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005704:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005706:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800570a:	b113      	cbz	r3, 8005712 <osKernelStart+0xe>
    stat = osErrorISR;
 800570c:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 8005710:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005712:	f3ef 8410 	mrs	r4, PRIMASK
  if (IS_IRQ()) {
 8005716:	2c00      	cmp	r4, #0
 8005718:	d1f8      	bne.n	800570c <osKernelStart+0x8>
 800571a:	4b09      	ldr	r3, [pc, #36]	; (8005740 <osKernelStart+0x3c>)
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	2a02      	cmp	r2, #2
 8005720:	d106      	bne.n	8005730 <osKernelStart+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005722:	f3ef 8311 	mrs	r3, BASEPRI
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1f0      	bne.n	800570c <osKernelStart+0x8>
      stat = osError;
 800572a:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800572e:	e7ef      	b.n	8005710 <osKernelStart+0xc>
    if (KernelState == osKernelReady) {
 8005730:	2a01      	cmp	r2, #1
 8005732:	d1fa      	bne.n	800572a <osKernelStart+0x26>
      KernelState = osKernelRunning;
 8005734:	2202      	movs	r2, #2
 8005736:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005738:	f001 f92e 	bl	8006998 <vTaskStartScheduler>
      stat = osOK;
 800573c:	4620      	mov	r0, r4
 800573e:	e7e7      	b.n	8005710 <osKernelStart+0xc>
 8005740:	2000091c 	.word	0x2000091c

08005744 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005746:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005748:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800574a:	b087      	sub	sp, #28
 800574c:	460b      	mov	r3, r1
  hTask = NULL;
 800574e:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005750:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8005754:	bb62      	cbnz	r2, 80057b0 <osThreadNew+0x6c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005756:	f3ef 8210 	mrs	r2, PRIMASK
 800575a:	bb4a      	cbnz	r2, 80057b0 <osThreadNew+0x6c>
 800575c:	4a26      	ldr	r2, [pc, #152]	; (80057f8 <osThreadNew+0xb4>)
 800575e:	6812      	ldr	r2, [r2, #0]
 8005760:	2a02      	cmp	r2, #2
 8005762:	d102      	bne.n	800576a <osThreadNew+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005764:	f3ef 8211 	mrs	r2, BASEPRI
 8005768:	bb12      	cbnz	r2, 80057b0 <osThreadNew+0x6c>
 800576a:	b308      	cbz	r0, 80057b0 <osThreadNew+0x6c>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 800576c:	2200      	movs	r2, #0
 800576e:	f88d 2013 	strb.w	r2, [sp, #19]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 8005772:	2c00      	cmp	r4, #0
 8005774:	d039      	beq.n	80057ea <osThreadNew+0xa6>
      if (attr->name != NULL) {
 8005776:	6821      	ldr	r1, [r4, #0]
 8005778:	b909      	cbnz	r1, 800577e <osThreadNew+0x3a>
    name  = &empty;
 800577a:	f10d 0113 	add.w	r1, sp, #19
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800577e:	69a5      	ldr	r5, [r4, #24]
 8005780:	2d00      	cmp	r5, #0
 8005782:	bf08      	it	eq
 8005784:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005786:	1e6a      	subs	r2, r5, #1
 8005788:	2a37      	cmp	r2, #55	; 0x37
 800578a:	462f      	mov	r7, r5
 800578c:	d832      	bhi.n	80057f4 <osThreadNew+0xb0>
 800578e:	6862      	ldr	r2, [r4, #4]
 8005790:	07d2      	lsls	r2, r2, #31
 8005792:	d42f      	bmi.n	80057f4 <osThreadNew+0xb0>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8005794:	6966      	ldr	r6, [r4, #20]
 8005796:	b176      	cbz	r6, 80057b6 <osThreadNew+0x72>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005798:	08b2      	lsrs	r2, r6, #2
 800579a:	e9d4 ce02 	ldrd	ip, lr, [r4, #8]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800579e:	f1bc 0f00 	cmp.w	ip, #0
 80057a2:	d00a      	beq.n	80057ba <osThreadNew+0x76>
 80057a4:	f1be 0f5b 	cmp.w	lr, #91	; 0x5b
 80057a8:	d902      	bls.n	80057b0 <osThreadNew+0x6c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80057aa:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80057ac:	b104      	cbz	r4, 80057b0 <osThreadNew+0x6c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80057ae:	b9ae      	cbnz	r6, 80057dc <osThreadNew+0x98>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80057b0:	9805      	ldr	r0, [sp, #20]
}
 80057b2:	b007      	add	sp, #28
 80057b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 80057b6:	2240      	movs	r2, #64	; 0x40
 80057b8:	e7ef      	b.n	800579a <osThreadNew+0x56>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80057ba:	f1be 0f00 	cmp.w	lr, #0
 80057be:	d1f7      	bne.n	80057b0 <osThreadNew+0x6c>
      if (mem == 0) {
 80057c0:	6924      	ldr	r4, [r4, #16]
 80057c2:	2c00      	cmp	r4, #0
 80057c4:	d1f4      	bne.n	80057b0 <osThreadNew+0x6c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80057c6:	ac05      	add	r4, sp, #20
 80057c8:	e9cd 7400 	strd	r7, r4, [sp]
 80057cc:	b292      	uxth	r2, r2
 80057ce:	f001 f8b6 	bl	800693e <xTaskCreate>
 80057d2:	2801      	cmp	r0, #1
          hTask = NULL;
 80057d4:	bf1c      	itt	ne
 80057d6:	2300      	movne	r3, #0
 80057d8:	9305      	strne	r3, [sp, #20]
 80057da:	e7e9      	b.n	80057b0 <osThreadNew+0x6c>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80057dc:	e9cd 4c01 	strd	r4, ip, [sp, #4]
 80057e0:	9500      	str	r5, [sp, #0]
 80057e2:	f001 f875 	bl	80068d0 <xTaskCreateStatic>
 80057e6:	9005      	str	r0, [sp, #20]
 80057e8:	e7e2      	b.n	80057b0 <osThreadNew+0x6c>
    prio  = (UBaseType_t)osPriorityNormal;
 80057ea:	2718      	movs	r7, #24
    stack = configMINIMAL_STACK_SIZE;
 80057ec:	2240      	movs	r2, #64	; 0x40
    name  = &empty;
 80057ee:	f10d 0113 	add.w	r1, sp, #19
 80057f2:	e7e8      	b.n	80057c6 <osThreadNew+0x82>
        return (NULL);
 80057f4:	2000      	movs	r0, #0
 80057f6:	e7dc      	b.n	80057b2 <osThreadNew+0x6e>
 80057f8:	2000091c 	.word	0x2000091c

080057fc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80057fc:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057fe:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8005802:	b113      	cbz	r3, 800580a <osDelay+0xe>
    stat = osErrorISR;
 8005804:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8005808:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800580a:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1f8      	bne.n	8005804 <osDelay+0x8>
 8005812:	4b07      	ldr	r3, [pc, #28]	; (8005830 <osDelay+0x34>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2b02      	cmp	r3, #2
 8005818:	d103      	bne.n	8005822 <osDelay+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800581a:	f3ef 8311 	mrs	r3, BASEPRI
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1f0      	bne.n	8005804 <osDelay+0x8>
    if (ticks != 0U) {
 8005822:	2800      	cmp	r0, #0
 8005824:	d0f0      	beq.n	8005808 <osDelay+0xc>
      vTaskDelay(ticks);
 8005826:	f001 fa0d 	bl	8006c44 <vTaskDelay>
    stat = osOK;
 800582a:	2000      	movs	r0, #0
 800582c:	e7ec      	b.n	8005808 <osDelay+0xc>
 800582e:	bf00      	nop
 8005830:	2000091c 	.word	0x2000091c

08005834 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005834:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005836:	460e      	mov	r6, r1
 8005838:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800583a:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800583e:	b11b      	cbz	r3, 8005848 <osSemaphoreNew+0x14>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 8005840:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8005842:	4620      	mov	r0, r4
 8005844:	b002      	add	sp, #8
 8005846:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005848:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1f7      	bne.n	8005840 <osSemaphoreNew+0xc>
 8005850:	4b23      	ldr	r3, [pc, #140]	; (80058e0 <osSemaphoreNew+0xac>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2b02      	cmp	r3, #2
 8005856:	d103      	bne.n	8005860 <osSemaphoreNew+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005858:	f3ef 8311 	mrs	r3, BASEPRI
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1ef      	bne.n	8005840 <osSemaphoreNew+0xc>
 8005860:	2800      	cmp	r0, #0
 8005862:	d0ed      	beq.n	8005840 <osSemaphoreNew+0xc>
 8005864:	42b0      	cmp	r0, r6
 8005866:	d3eb      	bcc.n	8005840 <osSemaphoreNew+0xc>
    if (attr != NULL) {
 8005868:	b1ed      	cbz	r5, 80058a6 <osSemaphoreNew+0x72>
 800586a:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800586e:	b1c3      	cbz	r3, 80058a2 <osSemaphoreNew+0x6e>
 8005870:	2a4f      	cmp	r2, #79	; 0x4f
 8005872:	d9e5      	bls.n	8005840 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 8005874:	2801      	cmp	r0, #1
 8005876:	d126      	bne.n	80058c6 <osSemaphoreNew+0x92>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005878:	2203      	movs	r2, #3
 800587a:	9200      	str	r2, [sp, #0]
 800587c:	2200      	movs	r2, #0
 800587e:	4611      	mov	r1, r2
 8005880:	f000 fa9a 	bl	8005db8 <xQueueGenericCreateStatic>
          hSemaphore = xSemaphoreCreateBinary();
 8005884:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005886:	2800      	cmp	r0, #0
 8005888:	d0da      	beq.n	8005840 <osSemaphoreNew+0xc>
 800588a:	b1ce      	cbz	r6, 80058c0 <osSemaphoreNew+0x8c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800588c:	2300      	movs	r3, #0
 800588e:	461a      	mov	r2, r3
 8005890:	4619      	mov	r1, r3
 8005892:	f000 fb45 	bl	8005f20 <xQueueGenericSend>
 8005896:	2801      	cmp	r0, #1
 8005898:	d012      	beq.n	80058c0 <osSemaphoreNew+0x8c>
            vSemaphoreDelete (hSemaphore);
 800589a:	4620      	mov	r0, r4
 800589c:	f000 fe80 	bl	80065a0 <vQueueDelete>
 80058a0:	e7ce      	b.n	8005840 <osSemaphoreNew+0xc>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80058a2:	2a00      	cmp	r2, #0
 80058a4:	d1cc      	bne.n	8005840 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 80058a6:	2801      	cmp	r0, #1
 80058a8:	d104      	bne.n	80058b4 <osSemaphoreNew+0x80>
          hSemaphore = xSemaphoreCreateBinary();
 80058aa:	2203      	movs	r2, #3
 80058ac:	2100      	movs	r1, #0
 80058ae:	f000 fad0 	bl	8005e52 <xQueueGenericCreate>
 80058b2:	e7e7      	b.n	8005884 <osSemaphoreNew+0x50>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80058b4:	4631      	mov	r1, r6
 80058b6:	f000 fb15 	bl	8005ee4 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 80058ba:	4604      	mov	r4, r0
 80058bc:	2800      	cmp	r0, #0
 80058be:	d0bf      	beq.n	8005840 <osSemaphoreNew+0xc>
        if (attr != NULL) {
 80058c0:	b945      	cbnz	r5, 80058d4 <osSemaphoreNew+0xa0>
          name = NULL;
 80058c2:	4629      	mov	r1, r5
 80058c4:	e007      	b.n	80058d6 <osSemaphoreNew+0xa2>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80058c6:	461a      	mov	r2, r3
 80058c8:	4631      	mov	r1, r6
 80058ca:	f000 fae9 	bl	8005ea0 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 80058ce:	4604      	mov	r4, r0
 80058d0:	2800      	cmp	r0, #0
 80058d2:	d0b5      	beq.n	8005840 <osSemaphoreNew+0xc>
          name = attr->name;
 80058d4:	6829      	ldr	r1, [r5, #0]
        vQueueAddToRegistry (hSemaphore, name);
 80058d6:	4620      	mov	r0, r4
 80058d8:	f000 fe3c 	bl	8006554 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 80058dc:	e7b1      	b.n	8005842 <osSemaphoreNew+0xe>
 80058de:	bf00      	nop
 80058e0:	2000091c 	.word	0x2000091c

080058e4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80058e4:	b513      	push	{r0, r1, r4, lr}
 80058e6:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80058e8:	b918      	cbnz	r0, 80058f2 <osSemaphoreAcquire+0xe>
    stat = osErrorParameter;
 80058ea:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 80058ee:	b002      	add	sp, #8
 80058f0:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058f2:	f3ef 8305 	mrs	r3, IPSR
  else if (IS_IRQ()) {
 80058f6:	b16b      	cbz	r3, 8005914 <osSemaphoreAcquire+0x30>
    if (timeout != 0U) {
 80058f8:	2c00      	cmp	r4, #0
 80058fa:	d1f6      	bne.n	80058ea <osSemaphoreAcquire+0x6>
      yield = pdFALSE;
 80058fc:	aa02      	add	r2, sp, #8
 80058fe:	f842 4d04 	str.w	r4, [r2, #-4]!
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005902:	4621      	mov	r1, r4
 8005904:	f000 fdd6 	bl	80064b4 <xQueueReceiveFromISR>
 8005908:	2801      	cmp	r0, #1
 800590a:	d115      	bne.n	8005938 <osSemaphoreAcquire+0x54>
        portYIELD_FROM_ISR (yield);
 800590c:	9b01      	ldr	r3, [sp, #4]
 800590e:	b9b3      	cbnz	r3, 800593e <osSemaphoreAcquire+0x5a>
  stat = osOK;
 8005910:	2000      	movs	r0, #0
 8005912:	e7ec      	b.n	80058ee <osSemaphoreAcquire+0xa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005914:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1ed      	bne.n	80058f8 <osSemaphoreAcquire+0x14>
 800591c:	4b0e      	ldr	r3, [pc, #56]	; (8005958 <osSemaphoreAcquire+0x74>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2b02      	cmp	r3, #2
 8005922:	d103      	bne.n	800592c <osSemaphoreAcquire+0x48>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005924:	f3ef 8311 	mrs	r3, BASEPRI
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1e5      	bne.n	80058f8 <osSemaphoreAcquire+0x14>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800592c:	4621      	mov	r1, r4
 800592e:	f000 fcff 	bl	8006330 <xQueueSemaphoreTake>
 8005932:	2801      	cmp	r0, #1
 8005934:	d0ec      	beq.n	8005910 <osSemaphoreAcquire+0x2c>
      if (timeout != 0U) {
 8005936:	b95c      	cbnz	r4, 8005950 <osSemaphoreAcquire+0x6c>
        stat = osErrorResource;
 8005938:	f06f 0002 	mvn.w	r0, #2
 800593c:	e7d7      	b.n	80058ee <osSemaphoreAcquire+0xa>
        portYIELD_FROM_ISR (yield);
 800593e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005942:	4b06      	ldr	r3, [pc, #24]	; (800595c <osSemaphoreAcquire+0x78>)
 8005944:	601a      	str	r2, [r3, #0]
 8005946:	f3bf 8f4f 	dsb	sy
 800594a:	f3bf 8f6f 	isb	sy
 800594e:	e7df      	b.n	8005910 <osSemaphoreAcquire+0x2c>
        stat = osErrorTimeout;
 8005950:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8005954:	e7cb      	b.n	80058ee <osSemaphoreAcquire+0xa>
 8005956:	bf00      	nop
 8005958:	2000091c 	.word	0x2000091c
 800595c:	e000ed04 	.word	0xe000ed04

08005960 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005960:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8005962:	b378      	cbz	r0, 80059c4 <osSemaphoreRelease+0x64>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005964:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8005968:	b153      	cbz	r3, 8005980 <osSemaphoreRelease+0x20>
    yield = pdFALSE;
 800596a:	2400      	movs	r4, #0
 800596c:	a902      	add	r1, sp, #8
 800596e:	f841 4d04 	str.w	r4, [r1, #-4]!

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005972:	f000 fbe8 	bl	8006146 <xQueueGiveFromISR>
 8005976:	2801      	cmp	r0, #1
 8005978:	d016      	beq.n	80059a8 <osSemaphoreRelease+0x48>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 800597a:	f06f 0002 	mvn.w	r0, #2
 800597e:	e016      	b.n	80059ae <osSemaphoreRelease+0x4e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005980:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1f0      	bne.n	800596a <osSemaphoreRelease+0xa>
 8005988:	4b10      	ldr	r3, [pc, #64]	; (80059cc <osSemaphoreRelease+0x6c>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2b02      	cmp	r3, #2
 800598e:	d103      	bne.n	8005998 <osSemaphoreRelease+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005990:	f3ef 8311 	mrs	r3, BASEPRI
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1e8      	bne.n	800596a <osSemaphoreRelease+0xa>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005998:	2300      	movs	r3, #0
 800599a:	461a      	mov	r2, r3
 800599c:	4619      	mov	r1, r3
 800599e:	f000 fabf 	bl	8005f20 <xQueueGenericSend>
 80059a2:	2801      	cmp	r0, #1
 80059a4:	d002      	beq.n	80059ac <osSemaphoreRelease+0x4c>
 80059a6:	e7e8      	b.n	800597a <osSemaphoreRelease+0x1a>
      portYIELD_FROM_ISR (yield);
 80059a8:	9b01      	ldr	r3, [sp, #4]
 80059aa:	b913      	cbnz	r3, 80059b2 <osSemaphoreRelease+0x52>
  stat = osOK;
 80059ac:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 80059ae:	b002      	add	sp, #8
 80059b0:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 80059b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059b6:	4b06      	ldr	r3, [pc, #24]	; (80059d0 <osSemaphoreRelease+0x70>)
 80059b8:	601a      	str	r2, [r3, #0]
 80059ba:	f3bf 8f4f 	dsb	sy
 80059be:	f3bf 8f6f 	isb	sy
 80059c2:	e7f3      	b.n	80059ac <osSemaphoreRelease+0x4c>
    stat = osErrorParameter;
 80059c4:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80059c8:	e7f1      	b.n	80059ae <osSemaphoreRelease+0x4e>
 80059ca:	bf00      	nop
 80059cc:	2000091c 	.word	0x2000091c
 80059d0:	e000ed04 	.word	0xe000ed04

080059d4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80059d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80059d6:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059d8:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80059dc:	b11b      	cbz	r3, 80059e6 <osMessageQueueNew+0x12>
  hQueue = NULL;
 80059de:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 80059e0:	4628      	mov	r0, r5
 80059e2:	b002      	add	sp, #8
 80059e4:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059e6:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1f7      	bne.n	80059de <osMessageQueueNew+0xa>
 80059ee:	4b1c      	ldr	r3, [pc, #112]	; (8005a60 <osMessageQueueNew+0x8c>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d103      	bne.n	80059fe <osMessageQueueNew+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80059f6:	f3ef 8311 	mrs	r3, BASEPRI
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1ef      	bne.n	80059de <osMessageQueueNew+0xa>
 80059fe:	2800      	cmp	r0, #0
 8005a00:	d0ed      	beq.n	80059de <osMessageQueueNew+0xa>
 8005a02:	2900      	cmp	r1, #0
 8005a04:	d0eb      	beq.n	80059de <osMessageQueueNew+0xa>
    if (attr != NULL) {
 8005a06:	b304      	cbz	r4, 8005a4a <osMessageQueueNew+0x76>
 8005a08:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005a0c:	b1ab      	cbz	r3, 8005a3a <osMessageQueueNew+0x66>
 8005a0e:	2a4f      	cmp	r2, #79	; 0x4f
 8005a10:	d9e5      	bls.n	80059de <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005a12:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005a14:	2a00      	cmp	r2, #0
 8005a16:	d0e2      	beq.n	80059de <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005a18:	fb01 f500 	mul.w	r5, r1, r0
 8005a1c:	6966      	ldr	r6, [r4, #20]
 8005a1e:	42ae      	cmp	r6, r5
 8005a20:	d3dd      	bcc.n	80059de <osMessageQueueNew+0xa>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005a22:	2500      	movs	r5, #0
 8005a24:	9500      	str	r5, [sp, #0]
 8005a26:	f000 f9c7 	bl	8005db8 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8005a2a:	4605      	mov	r5, r0
 8005a2c:	2800      	cmp	r0, #0
 8005a2e:	d0d6      	beq.n	80059de <osMessageQueueNew+0xa>
        name = attr->name;
 8005a30:	6821      	ldr	r1, [r4, #0]
      vQueueAddToRegistry (hQueue, name);
 8005a32:	4628      	mov	r0, r5
 8005a34:	f000 fd8e 	bl	8006554 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8005a38:	e7d2      	b.n	80059e0 <osMessageQueueNew+0xc>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005a3a:	2a00      	cmp	r2, #0
 8005a3c:	d1cf      	bne.n	80059de <osMessageQueueNew+0xa>
 8005a3e:	6923      	ldr	r3, [r4, #16]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1cc      	bne.n	80059de <osMessageQueueNew+0xa>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005a44:	6963      	ldr	r3, [r4, #20]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1c9      	bne.n	80059de <osMessageQueueNew+0xa>
        hQueue = xQueueCreate (msg_count, msg_size);
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f000 fa01 	bl	8005e52 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8005a50:	4605      	mov	r5, r0
 8005a52:	2800      	cmp	r0, #0
 8005a54:	d0c3      	beq.n	80059de <osMessageQueueNew+0xa>
      if (attr != NULL) {
 8005a56:	2c00      	cmp	r4, #0
 8005a58:	d1ea      	bne.n	8005a30 <osMessageQueueNew+0x5c>
        name = NULL;
 8005a5a:	4621      	mov	r1, r4
 8005a5c:	e7e9      	b.n	8005a32 <osMessageQueueNew+0x5e>
 8005a5e:	bf00      	nop
 8005a60:	2000091c 	.word	0x2000091c

08005a64 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005a64:	b513      	push	{r0, r1, r4, lr}
 8005a66:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a68:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8005a6c:	b123      	cbz	r3, 8005a78 <osMessageQueuePut+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005a6e:	b9e8      	cbnz	r0, 8005aac <osMessageQueuePut+0x48>
      stat = osErrorParameter;
 8005a70:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8005a74:	b002      	add	sp, #8
 8005a76:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a78:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1f6      	bne.n	8005a6e <osMessageQueuePut+0xa>
 8005a80:	4b18      	ldr	r3, [pc, #96]	; (8005ae4 <osMessageQueuePut+0x80>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d103      	bne.n	8005a90 <osMessageQueuePut+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a88:	f3ef 8311 	mrs	r3, BASEPRI
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1ee      	bne.n	8005a6e <osMessageQueuePut+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005a90:	2800      	cmp	r0, #0
 8005a92:	d0ed      	beq.n	8005a70 <osMessageQueuePut+0xc>
 8005a94:	2900      	cmp	r1, #0
 8005a96:	d0eb      	beq.n	8005a70 <osMessageQueuePut+0xc>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005a98:	2300      	movs	r3, #0
 8005a9a:	4622      	mov	r2, r4
 8005a9c:	f000 fa40 	bl	8005f20 <xQueueGenericSend>
 8005aa0:	2801      	cmp	r0, #1
 8005aa2:	d011      	beq.n	8005ac8 <osMessageQueuePut+0x64>
        if (timeout != 0U) {
 8005aa4:	b9dc      	cbnz	r4, 8005ade <osMessageQueuePut+0x7a>
          stat = osErrorResource;
 8005aa6:	f06f 0002 	mvn.w	r0, #2
 8005aaa:	e7e3      	b.n	8005a74 <osMessageQueuePut+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005aac:	2900      	cmp	r1, #0
 8005aae:	d0df      	beq.n	8005a70 <osMessageQueuePut+0xc>
 8005ab0:	2c00      	cmp	r4, #0
 8005ab2:	d1dd      	bne.n	8005a70 <osMessageQueuePut+0xc>
      yield = pdFALSE;
 8005ab4:	aa02      	add	r2, sp, #8
 8005ab6:	f842 4d04 	str.w	r4, [r2, #-4]!
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005aba:	4623      	mov	r3, r4
 8005abc:	f000 fae2 	bl	8006084 <xQueueGenericSendFromISR>
 8005ac0:	2801      	cmp	r0, #1
 8005ac2:	d1f0      	bne.n	8005aa6 <osMessageQueuePut+0x42>
        portYIELD_FROM_ISR (yield);
 8005ac4:	9b01      	ldr	r3, [sp, #4]
 8005ac6:	b90b      	cbnz	r3, 8005acc <osMessageQueuePut+0x68>
  stat = osOK;
 8005ac8:	2000      	movs	r0, #0
 8005aca:	e7d3      	b.n	8005a74 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 8005acc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ad0:	4b05      	ldr	r3, [pc, #20]	; (8005ae8 <osMessageQueuePut+0x84>)
 8005ad2:	601a      	str	r2, [r3, #0]
 8005ad4:	f3bf 8f4f 	dsb	sy
 8005ad8:	f3bf 8f6f 	isb	sy
 8005adc:	e7f4      	b.n	8005ac8 <osMessageQueuePut+0x64>
          stat = osErrorTimeout;
 8005ade:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8005ae2:	e7c7      	b.n	8005a74 <osMessageQueuePut+0x10>
 8005ae4:	2000091c 	.word	0x2000091c
 8005ae8:	e000ed04 	.word	0xe000ed04

08005aec <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005aec:	b513      	push	{r0, r1, r4, lr}
 8005aee:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005af0:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8005af4:	b123      	cbz	r3, 8005b00 <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005af6:	b9e0      	cbnz	r0, 8005b32 <osMessageQueueGet+0x46>
      stat = osErrorParameter;
 8005af8:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8005afc:	b002      	add	sp, #8
 8005afe:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b00:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d1f6      	bne.n	8005af6 <osMessageQueueGet+0xa>
 8005b08:	4b17      	ldr	r3, [pc, #92]	; (8005b68 <osMessageQueueGet+0x7c>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d103      	bne.n	8005b18 <osMessageQueueGet+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b10:	f3ef 8311 	mrs	r3, BASEPRI
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1ee      	bne.n	8005af6 <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	d0ed      	beq.n	8005af8 <osMessageQueueGet+0xc>
 8005b1c:	2900      	cmp	r1, #0
 8005b1e:	d0eb      	beq.n	8005af8 <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005b20:	4622      	mov	r2, r4
 8005b22:	f000 fb65 	bl	80061f0 <xQueueReceive>
 8005b26:	2801      	cmp	r0, #1
 8005b28:	d010      	beq.n	8005b4c <osMessageQueueGet+0x60>
        if (timeout != 0U) {
 8005b2a:	b9d4      	cbnz	r4, 8005b62 <osMessageQueueGet+0x76>
          stat = osErrorResource;
 8005b2c:	f06f 0002 	mvn.w	r0, #2
 8005b30:	e7e4      	b.n	8005afc <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005b32:	2900      	cmp	r1, #0
 8005b34:	d0e0      	beq.n	8005af8 <osMessageQueueGet+0xc>
 8005b36:	2c00      	cmp	r4, #0
 8005b38:	d1de      	bne.n	8005af8 <osMessageQueueGet+0xc>
      yield = pdFALSE;
 8005b3a:	aa02      	add	r2, sp, #8
 8005b3c:	f842 4d04 	str.w	r4, [r2, #-4]!
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005b40:	f000 fcb8 	bl	80064b4 <xQueueReceiveFromISR>
 8005b44:	2801      	cmp	r0, #1
 8005b46:	d1f1      	bne.n	8005b2c <osMessageQueueGet+0x40>
        portYIELD_FROM_ISR (yield);
 8005b48:	9b01      	ldr	r3, [sp, #4]
 8005b4a:	b90b      	cbnz	r3, 8005b50 <osMessageQueueGet+0x64>
  stat = osOK;
 8005b4c:	2000      	movs	r0, #0
 8005b4e:	e7d5      	b.n	8005afc <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 8005b50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b54:	4b05      	ldr	r3, [pc, #20]	; (8005b6c <osMessageQueueGet+0x80>)
 8005b56:	601a      	str	r2, [r3, #0]
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	f3bf 8f6f 	isb	sy
 8005b60:	e7f4      	b.n	8005b4c <osMessageQueueGet+0x60>
          stat = osErrorTimeout;
 8005b62:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8005b66:	e7c9      	b.n	8005afc <osMessageQueueGet+0x10>
 8005b68:	2000091c 	.word	0x2000091c
 8005b6c:	e000ed04 	.word	0xe000ed04

08005b70 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005b70:	4b03      	ldr	r3, [pc, #12]	; (8005b80 <vApplicationGetIdleTaskMemory+0x10>)
 8005b72:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005b74:	4b03      	ldr	r3, [pc, #12]	; (8005b84 <vApplicationGetIdleTaskMemory+0x14>)
 8005b76:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005b78:	2340      	movs	r3, #64	; 0x40
 8005b7a:	6013      	str	r3, [r2, #0]
}
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	200008c0 	.word	0x200008c0
 8005b84:	200007c0 	.word	0x200007c0

08005b88 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005b88:	4b03      	ldr	r3, [pc, #12]	; (8005b98 <vApplicationGetTimerTaskMemory+0x10>)
 8005b8a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005b8c:	4b03      	ldr	r3, [pc, #12]	; (8005b9c <vApplicationGetTimerTaskMemory+0x14>)
 8005b8e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005b90:	2380      	movs	r3, #128	; 0x80
 8005b92:	6013      	str	r3, [r2, #0]
}
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	20000b20 	.word	0x20000b20
 8005b9c:	20000920 	.word	0x20000920

08005ba0 <vListInitialise>:
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005ba0:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ba4:	f100 0308 	add.w	r3, r0, #8
 8005ba8:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005baa:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bae:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005bb4:	4770      	bx	lr

08005bb6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005bba:	4770      	bx	lr

08005bbc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8005bbc:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005bbe:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8005bc0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005bc2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005bc4:	689a      	ldr	r2, [r3, #8]
 8005bc6:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005bc8:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8005bca:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005bcc:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8005bce:	3301      	adds	r3, #1
 8005bd0:	6003      	str	r3, [r0, #0]
}
 8005bd2:	4770      	bx	lr

08005bd4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005bd4:	680a      	ldr	r2, [r1, #0]
{
 8005bd6:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005bd8:	1c53      	adds	r3, r2, #1
 8005bda:	d10a      	bne.n	8005bf2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005bdc:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005bde:	685a      	ldr	r2, [r3, #4]
 8005be0:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005be2:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005be4:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8005be6:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8005be8:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005bea:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8005bec:	3301      	adds	r3, #1
 8005bee:	6003      	str	r3, [r0, #0]
}
 8005bf0:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bf2:	f100 0308 	add.w	r3, r0, #8
 8005bf6:	685c      	ldr	r4, [r3, #4]
 8005bf8:	6825      	ldr	r5, [r4, #0]
 8005bfa:	4295      	cmp	r5, r2
 8005bfc:	d8ef      	bhi.n	8005bde <vListInsert+0xa>
 8005bfe:	4623      	mov	r3, r4
 8005c00:	e7f9      	b.n	8005bf6 <vListInsert+0x22>

08005c02 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005c02:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c04:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8005c08:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c0a:	6882      	ldr	r2, [r0, #8]
 8005c0c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005c0e:	6859      	ldr	r1, [r3, #4]
 8005c10:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c12:	bf08      	it	eq
 8005c14:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005c16:	2200      	movs	r2, #0
 8005c18:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	3a01      	subs	r2, #1
 8005c1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005c20:	6818      	ldr	r0, [r3, #0]
}
 8005c22:	4770      	bx	lr

08005c24 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005c24:	b510      	push	{r4, lr}
 8005c26:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c28:	f001 fc4c 	bl	80074c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005c2c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8005c2e:	f001 fc6b 	bl	8007508 <vPortExitCritical>

	return xReturn;
}
 8005c32:	fab4 f084 	clz	r0, r4
 8005c36:	0940      	lsrs	r0, r0, #5
 8005c38:	bd10      	pop	{r4, pc}

08005c3a <prvCopyDataToQueue>:
{
 8005c3a:	b570      	push	{r4, r5, r6, lr}
 8005c3c:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c3e:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8005c40:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c42:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c44:	b942      	cbnz	r2, 8005c58 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c46:	6805      	ldr	r5, [r0, #0]
 8005c48:	b99d      	cbnz	r5, 8005c72 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005c4a:	6840      	ldr	r0, [r0, #4]
 8005c4c:	f001 f974 	bl	8006f38 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8005c50:	6065      	str	r5, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c52:	3601      	adds	r6, #1
 8005c54:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8005c56:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8005c58:	b96d      	cbnz	r5, 8005c76 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005c5a:	6880      	ldr	r0, [r0, #8]
 8005c5c:	f002 f854 	bl	8007d08 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005c60:	68a3      	ldr	r3, [r4, #8]
 8005c62:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005c64:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c66:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005c68:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d301      	bcc.n	8005c72 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8005c72:	2000      	movs	r0, #0
 8005c74:	e7ed      	b.n	8005c52 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c76:	68c0      	ldr	r0, [r0, #12]
 8005c78:	f002 f846 	bl	8007d08 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005c7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c7e:	68e2      	ldr	r2, [r4, #12]
 8005c80:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c82:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005c84:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c86:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005c88:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005c8a:	bf3e      	ittt	cc
 8005c8c:	6862      	ldrcc	r2, [r4, #4]
 8005c8e:	189b      	addcc	r3, r3, r2
 8005c90:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8005c92:	2d02      	cmp	r5, #2
 8005c94:	d1ed      	bne.n	8005c72 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c96:	b10e      	cbz	r6, 8005c9c <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8005c98:	3e01      	subs	r6, #1
 8005c9a:	e7ea      	b.n	8005c72 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8005c9c:	4630      	mov	r0, r6
 8005c9e:	e7d8      	b.n	8005c52 <prvCopyDataToQueue+0x18>

08005ca0 <prvCopyDataFromQueue>:
{
 8005ca0:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005ca2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8005ca4:	b410      	push	{r4}
 8005ca6:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005ca8:	b162      	cbz	r2, 8005cc4 <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005caa:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005cac:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005cae:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005cb0:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005cb2:	60d9      	str	r1, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005cb4:	bf28      	it	cs
 8005cb6:	6819      	ldrcs	r1, [r3, #0]
}
 8005cb8:	bc10      	pop	{r4}
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005cba:	bf28      	it	cs
 8005cbc:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005cbe:	68d9      	ldr	r1, [r3, #12]
 8005cc0:	f002 b822 	b.w	8007d08 <memcpy>
}
 8005cc4:	bc10      	pop	{r4}
 8005cc6:	4770      	bx	lr

08005cc8 <prvUnlockQueue>:
{
 8005cc8:	b570      	push	{r4, r5, r6, lr}
 8005cca:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005ccc:	f001 fbfa 	bl	80074c4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005cd0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cd4:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8005cd8:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cda:	2d00      	cmp	r5, #0
 8005cdc:	dc14      	bgt.n	8005d08 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8005cde:	23ff      	movs	r3, #255	; 0xff
 8005ce0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8005ce4:	f001 fc10 	bl	8007508 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005ce8:	f001 fbec 	bl	80074c4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005cec:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cf0:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8005cf4:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005cf6:	2d00      	cmp	r5, #0
 8005cf8:	dc12      	bgt.n	8005d20 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8005cfa:	23ff      	movs	r3, #255	; 0xff
 8005cfc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8005d00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8005d04:	f001 bc00 	b.w	8007508 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d0e7      	beq.n	8005cde <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d0e:	4630      	mov	r0, r6
 8005d10:	f001 f832 	bl	8006d78 <xTaskRemoveFromEventList>
 8005d14:	b108      	cbz	r0, 8005d1a <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8005d16:	f001 f8b7 	bl	8006e88 <vTaskMissedYield>
 8005d1a:	3d01      	subs	r5, #1
 8005d1c:	b26d      	sxtb	r5, r5
 8005d1e:	e7dc      	b.n	8005cda <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d20:	6923      	ldr	r3, [r4, #16]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d0e9      	beq.n	8005cfa <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d26:	4630      	mov	r0, r6
 8005d28:	f001 f826 	bl	8006d78 <xTaskRemoveFromEventList>
 8005d2c:	b108      	cbz	r0, 8005d32 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8005d2e:	f001 f8ab 	bl	8006e88 <vTaskMissedYield>
 8005d32:	3d01      	subs	r5, #1
 8005d34:	b26d      	sxtb	r5, r5
 8005d36:	e7de      	b.n	8005cf6 <prvUnlockQueue+0x2e>

08005d38 <xQueueGenericReset>:
{
 8005d38:	b538      	push	{r3, r4, r5, lr}
 8005d3a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8005d3c:	4604      	mov	r4, r0
 8005d3e:	b940      	cbnz	r0, 8005d52 <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d44:	f383 8811 	msr	BASEPRI, r3
 8005d48:	f3bf 8f6f 	isb	sy
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	e7fe      	b.n	8005d50 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8005d52:	f001 fbb7 	bl	80074c4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005d56:	e9d4 300f 	ldrd	r3, r0, [r4, #60]	; 0x3c
 8005d5a:	4343      	muls	r3, r0
 8005d5c:	6822      	ldr	r2, [r4, #0]
 8005d5e:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005d60:	1a1b      	subs	r3, r3, r0
 8005d62:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005d64:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005d66:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d68:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8005d6a:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d6c:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d6e:	60a2      	str	r2, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 8005d70:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005d74:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8005d78:	b995      	cbnz	r5, 8005da0 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d7a:	6923      	ldr	r3, [r4, #16]
 8005d7c:	b163      	cbz	r3, 8005d98 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d7e:	f104 0010 	add.w	r0, r4, #16
 8005d82:	f000 fff9 	bl	8006d78 <xTaskRemoveFromEventList>
 8005d86:	b138      	cbz	r0, 8005d98 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8005d88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d8c:	4b09      	ldr	r3, [pc, #36]	; (8005db4 <xQueueGenericReset+0x7c>)
 8005d8e:	601a      	str	r2, [r3, #0]
 8005d90:	f3bf 8f4f 	dsb	sy
 8005d94:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8005d98:	f001 fbb6 	bl	8007508 <vPortExitCritical>
}
 8005d9c:	2001      	movs	r0, #1
 8005d9e:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005da0:	f104 0010 	add.w	r0, r4, #16
 8005da4:	f7ff fefc 	bl	8005ba0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005da8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005dac:	f7ff fef8 	bl	8005ba0 <vListInitialise>
 8005db0:	e7f2      	b.n	8005d98 <xQueueGenericReset+0x60>
 8005db2:	bf00      	nop
 8005db4:	e000ed04 	.word	0xe000ed04

08005db8 <xQueueGenericCreateStatic>:
	{
 8005db8:	b513      	push	{r0, r1, r4, lr}
 8005dba:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005dbc:	b940      	cbnz	r0, 8005dd0 <xQueueGenericCreateStatic+0x18>
 8005dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc2:	f383 8811 	msr	BASEPRI, r3
 8005dc6:	f3bf 8f6f 	isb	sy
 8005dca:	f3bf 8f4f 	dsb	sy
 8005dce:	e7fe      	b.n	8005dce <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 8005dd0:	b943      	cbnz	r3, 8005de4 <xQueueGenericCreateStatic+0x2c>
 8005dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd6:	f383 8811 	msr	BASEPRI, r3
 8005dda:	f3bf 8f6f 	isb	sy
 8005dde:	f3bf 8f4f 	dsb	sy
 8005de2:	e7fe      	b.n	8005de2 <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005de4:	b14a      	cbz	r2, 8005dfa <xQueueGenericCreateStatic+0x42>
 8005de6:	b991      	cbnz	r1, 8005e0e <xQueueGenericCreateStatic+0x56>
 8005de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dec:	f383 8811 	msr	BASEPRI, r3
 8005df0:	f3bf 8f6f 	isb	sy
 8005df4:	f3bf 8f4f 	dsb	sy
 8005df8:	e7fe      	b.n	8005df8 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005dfa:	b141      	cbz	r1, 8005e0e <xQueueGenericCreateStatic+0x56>
 8005dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e00:	f383 8811 	msr	BASEPRI, r3
 8005e04:	f3bf 8f6f 	isb	sy
 8005e08:	f3bf 8f4f 	dsb	sy
 8005e0c:	e7fe      	b.n	8005e0c <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005e0e:	2350      	movs	r3, #80	; 0x50
 8005e10:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005e12:	9b01      	ldr	r3, [sp, #4]
 8005e14:	2b50      	cmp	r3, #80	; 0x50
 8005e16:	d008      	beq.n	8005e2a <xQueueGenericCreateStatic+0x72>
 8005e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1c:	f383 8811 	msr	BASEPRI, r3
 8005e20:	f3bf 8f6f 	isb	sy
 8005e24:	f3bf 8f4f 	dsb	sy
 8005e28:	e7fe      	b.n	8005e28 <xQueueGenericCreateStatic+0x70>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005e2a:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e2c:	2900      	cmp	r1, #0
 8005e2e:	bf08      	it	eq
 8005e30:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8005e32:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005e36:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e3a:	4619      	mov	r1, r3
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e3c:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e3e:	4620      	mov	r0, r4
 8005e40:	f7ff ff7a 	bl	8005d38 <xQueueGenericReset>
	}
 8005e44:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8005e46:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8005e4a:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8005e4e:	b002      	add	sp, #8
 8005e50:	bd10      	pop	{r4, pc}

08005e52 <xQueueGenericCreate>:
	{
 8005e52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e54:	460d      	mov	r5, r1
 8005e56:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e58:	4606      	mov	r6, r0
 8005e5a:	b940      	cbnz	r0, 8005e6e <xQueueGenericCreate+0x1c>
 8005e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e60:	f383 8811 	msr	BASEPRI, r3
 8005e64:	f3bf 8f6f 	isb	sy
 8005e68:	f3bf 8f4f 	dsb	sy
 8005e6c:	e7fe      	b.n	8005e6c <xQueueGenericCreate+0x1a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e6e:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005e70:	3050      	adds	r0, #80	; 0x50
 8005e72:	f001 fc5b 	bl	800772c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8005e76:	4604      	mov	r4, r0
 8005e78:	b160      	cbz	r0, 8005e94 <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8005e80:	b955      	cbnz	r5, 8005e98 <xQueueGenericCreate+0x46>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e82:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8005e84:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e88:	2101      	movs	r1, #1
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	f7ff ff54 	bl	8005d38 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8005e90:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 8005e94:	4620      	mov	r0, r4
 8005e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005e98:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005e9c:	6003      	str	r3, [r0, #0]
 8005e9e:	e7f1      	b.n	8005e84 <xQueueGenericCreate+0x32>

08005ea0 <xQueueCreateCountingSemaphoreStatic>:
	{
 8005ea0:	b513      	push	{r0, r1, r4, lr}
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8005ea6:	b940      	cbnz	r0, 8005eba <xQueueCreateCountingSemaphoreStatic+0x1a>
 8005ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eac:	f383 8811 	msr	BASEPRI, r3
 8005eb0:	f3bf 8f6f 	isb	sy
 8005eb4:	f3bf 8f4f 	dsb	sy
 8005eb8:	e7fe      	b.n	8005eb8 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005eba:	4288      	cmp	r0, r1
 8005ebc:	d208      	bcs.n	8005ed0 <xQueueCreateCountingSemaphoreStatic+0x30>
 8005ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec2:	f383 8811 	msr	BASEPRI, r3
 8005ec6:	f3bf 8f6f 	isb	sy
 8005eca:	f3bf 8f4f 	dsb	sy
 8005ece:	e7fe      	b.n	8005ece <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005ed0:	2202      	movs	r2, #2
 8005ed2:	9200      	str	r2, [sp, #0]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	4611      	mov	r1, r2
 8005ed8:	f7ff ff6e 	bl	8005db8 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8005edc:	b100      	cbz	r0, 8005ee0 <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005ede:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8005ee0:	b002      	add	sp, #8
 8005ee2:	bd10      	pop	{r4, pc}

08005ee4 <xQueueCreateCountingSemaphore>:
	{
 8005ee4:	b510      	push	{r4, lr}
 8005ee6:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8005ee8:	b940      	cbnz	r0, 8005efc <xQueueCreateCountingSemaphore+0x18>
 8005eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eee:	f383 8811 	msr	BASEPRI, r3
 8005ef2:	f3bf 8f6f 	isb	sy
 8005ef6:	f3bf 8f4f 	dsb	sy
 8005efa:	e7fe      	b.n	8005efa <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005efc:	4288      	cmp	r0, r1
 8005efe:	d208      	bcs.n	8005f12 <xQueueCreateCountingSemaphore+0x2e>
 8005f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f04:	f383 8811 	msr	BASEPRI, r3
 8005f08:	f3bf 8f6f 	isb	sy
 8005f0c:	f3bf 8f4f 	dsb	sy
 8005f10:	e7fe      	b.n	8005f10 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005f12:	2202      	movs	r2, #2
 8005f14:	2100      	movs	r1, #0
 8005f16:	f7ff ff9c 	bl	8005e52 <xQueueGenericCreate>
		if( xHandle != NULL )
 8005f1a:	b100      	cbz	r0, 8005f1e <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005f1c:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8005f1e:	bd10      	pop	{r4, pc}

08005f20 <xQueueGenericSend>:
{
 8005f20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f24:	4688      	mov	r8, r1
 8005f26:	9201      	str	r2, [sp, #4]
 8005f28:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8005f2a:	4604      	mov	r4, r0
 8005f2c:	b940      	cbnz	r0, 8005f40 <xQueueGenericSend+0x20>
 8005f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	e7fe      	b.n	8005f3e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f40:	b951      	cbnz	r1, 8005f58 <xQueueGenericSend+0x38>
 8005f42:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005f44:	b143      	cbz	r3, 8005f58 <xQueueGenericSend+0x38>
 8005f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4a:	f383 8811 	msr	BASEPRI, r3
 8005f4e:	f3bf 8f6f 	isb	sy
 8005f52:	f3bf 8f4f 	dsb	sy
 8005f56:	e7fe      	b.n	8005f56 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f58:	2f02      	cmp	r7, #2
 8005f5a:	d10b      	bne.n	8005f74 <xQueueGenericSend+0x54>
 8005f5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d008      	beq.n	8005f74 <xQueueGenericSend+0x54>
 8005f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f66:	f383 8811 	msr	BASEPRI, r3
 8005f6a:	f3bf 8f6f 	isb	sy
 8005f6e:	f3bf 8f4f 	dsb	sy
 8005f72:	e7fe      	b.n	8005f72 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f74:	f000 ff8e 	bl	8006e94 <xTaskGetSchedulerState>
 8005f78:	b950      	cbnz	r0, 8005f90 <xQueueGenericSend+0x70>
 8005f7a:	9e01      	ldr	r6, [sp, #4]
 8005f7c:	b14e      	cbz	r6, 8005f92 <xQueueGenericSend+0x72>
 8005f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f82:	f383 8811 	msr	BASEPRI, r3
 8005f86:	f3bf 8f6f 	isb	sy
 8005f8a:	f3bf 8f4f 	dsb	sy
 8005f8e:	e7fe      	b.n	8005f8e <xQueueGenericSend+0x6e>
 8005f90:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8005f92:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 8005f96:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8006080 <xQueueGenericSend+0x160>
 8005f9a:	e037      	b.n	800600c <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f9c:	9d01      	ldr	r5, [sp, #4]
 8005f9e:	b91d      	cbnz	r5, 8005fa8 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 8005fa0:	f001 fab2 	bl	8007508 <vPortExitCritical>
			return errQUEUE_FULL;
 8005fa4:	2000      	movs	r0, #0
 8005fa6:	e050      	b.n	800604a <xQueueGenericSend+0x12a>
				else if( xEntryTimeSet == pdFALSE )
 8005fa8:	b916      	cbnz	r6, 8005fb0 <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005faa:	a802      	add	r0, sp, #8
 8005fac:	f000 ff24 	bl	8006df8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8005fb0:	f001 faaa 	bl	8007508 <vPortExitCritical>
		vTaskSuspendAll();
 8005fb4:	f000 fd34 	bl	8006a20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005fb8:	f001 fa84 	bl	80074c4 <vPortEnterCritical>
 8005fbc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005fc0:	2bff      	cmp	r3, #255	; 0xff
 8005fc2:	bf08      	it	eq
 8005fc4:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 8005fc8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005fcc:	2bff      	cmp	r3, #255	; 0xff
 8005fce:	bf08      	it	eq
 8005fd0:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 8005fd4:	f001 fa98 	bl	8007508 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005fd8:	a901      	add	r1, sp, #4
 8005fda:	a802      	add	r0, sp, #8
 8005fdc:	f000 ff18 	bl	8006e10 <xTaskCheckForTimeOut>
 8005fe0:	2800      	cmp	r0, #0
 8005fe2:	d146      	bne.n	8006072 <xQueueGenericSend+0x152>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005fe4:	f001 fa6e 	bl	80074c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005fe8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005fea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d12f      	bne.n	8006050 <xQueueGenericSend+0x130>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8005ff0:	f001 fa8a 	bl	8007508 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005ff4:	9901      	ldr	r1, [sp, #4]
 8005ff6:	f104 0010 	add.w	r0, r4, #16
 8005ffa:	f000 fe83 	bl	8006d04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ffe:	4620      	mov	r0, r4
 8006000:	f7ff fe62 	bl	8005cc8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006004:	f000 fdaa 	bl	8006b5c <xTaskResumeAll>
 8006008:	b350      	cbz	r0, 8006060 <xQueueGenericSend+0x140>
 800600a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800600c:	f001 fa5a 	bl	80074c4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006010:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006012:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006014:	429a      	cmp	r2, r3
 8006016:	d301      	bcc.n	800601c <xQueueGenericSend+0xfc>
 8006018:	2f02      	cmp	r7, #2
 800601a:	d1bf      	bne.n	8005f9c <xQueueGenericSend+0x7c>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800601c:	463a      	mov	r2, r7
 800601e:	4641      	mov	r1, r8
 8006020:	4620      	mov	r0, r4
 8006022:	f7ff fe0a 	bl	8005c3a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006028:	b11b      	cbz	r3, 8006032 <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800602a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800602e:	f000 fea3 	bl	8006d78 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8006032:	b138      	cbz	r0, 8006044 <xQueueGenericSend+0x124>
						queueYIELD_IF_USING_PREEMPTION();
 8006034:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006038:	4b11      	ldr	r3, [pc, #68]	; (8006080 <xQueueGenericSend+0x160>)
 800603a:	601a      	str	r2, [r3, #0]
 800603c:	f3bf 8f4f 	dsb	sy
 8006040:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8006044:	f001 fa60 	bl	8007508 <vPortExitCritical>
				return pdPASS;
 8006048:	2001      	movs	r0, #1
}
 800604a:	b004      	add	sp, #16
 800604c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 8006050:	f001 fa5a 	bl	8007508 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8006054:	4620      	mov	r0, r4
 8006056:	f7ff fe37 	bl	8005cc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800605a:	f000 fd7f 	bl	8006b5c <xTaskResumeAll>
 800605e:	e7d4      	b.n	800600a <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8006060:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006064:	f8ca 3000 	str.w	r3, [sl]
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	f3bf 8f6f 	isb	sy
 8006070:	e7cb      	b.n	800600a <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 8006072:	4620      	mov	r0, r4
 8006074:	f7ff fe28 	bl	8005cc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006078:	f000 fd70 	bl	8006b5c <xTaskResumeAll>
 800607c:	e792      	b.n	8005fa4 <xQueueGenericSend+0x84>
 800607e:	bf00      	nop
 8006080:	e000ed04 	.word	0xe000ed04

08006084 <xQueueGenericSendFromISR>:
{
 8006084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006088:	4689      	mov	r9, r1
 800608a:	4690      	mov	r8, r2
 800608c:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800608e:	4604      	mov	r4, r0
 8006090:	b940      	cbnz	r0, 80060a4 <xQueueGenericSendFromISR+0x20>
 8006092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006096:	f383 8811 	msr	BASEPRI, r3
 800609a:	f3bf 8f6f 	isb	sy
 800609e:	f3bf 8f4f 	dsb	sy
 80060a2:	e7fe      	b.n	80060a2 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060a4:	b951      	cbnz	r1, 80060bc <xQueueGenericSendFromISR+0x38>
 80060a6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80060a8:	b143      	cbz	r3, 80060bc <xQueueGenericSendFromISR+0x38>
 80060aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ae:	f383 8811 	msr	BASEPRI, r3
 80060b2:	f3bf 8f6f 	isb	sy
 80060b6:	f3bf 8f4f 	dsb	sy
 80060ba:	e7fe      	b.n	80060ba <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060bc:	2f02      	cmp	r7, #2
 80060be:	d10b      	bne.n	80060d8 <xQueueGenericSendFromISR+0x54>
 80060c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d008      	beq.n	80060d8 <xQueueGenericSendFromISR+0x54>
 80060c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ca:	f383 8811 	msr	BASEPRI, r3
 80060ce:	f3bf 8f6f 	isb	sy
 80060d2:	f3bf 8f4f 	dsb	sy
 80060d6:	e7fe      	b.n	80060d6 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80060d8:	f001 fad6 	bl	8007688 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80060dc:	f3ef 8611 	mrs	r6, BASEPRI
 80060e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80060f0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80060f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d301      	bcc.n	80060fc <xQueueGenericSendFromISR+0x78>
 80060f8:	2f02      	cmp	r7, #2
 80060fa:	d122      	bne.n	8006142 <xQueueGenericSendFromISR+0xbe>
			const int8_t cTxLock = pxQueue->cTxLock;
 80060fc:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006100:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 8006102:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006104:	4649      	mov	r1, r9
 8006106:	4620      	mov	r0, r4
 8006108:	f7ff fd97 	bl	8005c3a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800610c:	1c6b      	adds	r3, r5, #1
 800610e:	d113      	bne.n	8006138 <xQueueGenericSendFromISR+0xb4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006110:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006112:	b90b      	cbnz	r3, 8006118 <xQueueGenericSendFromISR+0x94>
			xReturn = pdPASS;
 8006114:	2001      	movs	r0, #1
 8006116:	e00b      	b.n	8006130 <xQueueGenericSendFromISR+0xac>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006118:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800611c:	f000 fe2c 	bl	8006d78 <xTaskRemoveFromEventList>
 8006120:	2800      	cmp	r0, #0
 8006122:	d0f7      	beq.n	8006114 <xQueueGenericSendFromISR+0x90>
							if( pxHigherPriorityTaskWoken != NULL )
 8006124:	f1b8 0f00 	cmp.w	r8, #0
 8006128:	d0f4      	beq.n	8006114 <xQueueGenericSendFromISR+0x90>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800612a:	2001      	movs	r0, #1
 800612c:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006130:	f386 8811 	msr	BASEPRI, r6
}
 8006134:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006138:	3501      	adds	r5, #1
 800613a:	b26d      	sxtb	r5, r5
 800613c:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8006140:	e7e8      	b.n	8006114 <xQueueGenericSendFromISR+0x90>
			xReturn = errQUEUE_FULL;
 8006142:	2000      	movs	r0, #0
 8006144:	e7f4      	b.n	8006130 <xQueueGenericSendFromISR+0xac>

08006146 <xQueueGiveFromISR>:
{
 8006146:	b570      	push	{r4, r5, r6, lr}
 8006148:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800614a:	4604      	mov	r4, r0
 800614c:	b940      	cbnz	r0, 8006160 <xQueueGiveFromISR+0x1a>
	__asm volatile
 800614e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006152:	f383 8811 	msr	BASEPRI, r3
 8006156:	f3bf 8f6f 	isb	sy
 800615a:	f3bf 8f4f 	dsb	sy
 800615e:	e7fe      	b.n	800615e <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 8006160:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006162:	b143      	cbz	r3, 8006176 <xQueueGiveFromISR+0x30>
 8006164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006168:	f383 8811 	msr	BASEPRI, r3
 800616c:	f3bf 8f6f 	isb	sy
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	e7fe      	b.n	8006174 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8006176:	6803      	ldr	r3, [r0, #0]
 8006178:	b953      	cbnz	r3, 8006190 <xQueueGiveFromISR+0x4a>
 800617a:	6843      	ldr	r3, [r0, #4]
 800617c:	b143      	cbz	r3, 8006190 <xQueueGiveFromISR+0x4a>
 800617e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	e7fe      	b.n	800618e <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006190:	f001 fa7a 	bl	8007688 <vPortValidateInterruptPriority>
	__asm volatile
 8006194:	f3ef 8611 	mrs	r6, BASEPRI
 8006198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619c:	f383 8811 	msr	BASEPRI, r3
 80061a0:	f3bf 8f6f 	isb	sy
 80061a4:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061a8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80061aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d91c      	bls.n	80061ea <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 80061b0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80061b4:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 80061b6:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80061b8:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 80061ba:	1c5a      	adds	r2, r3, #1
 80061bc:	d110      	bne.n	80061e0 <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061c0:	b90b      	cbnz	r3, 80061c6 <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 80061c2:	2001      	movs	r0, #1
 80061c4:	e009      	b.n	80061da <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061c6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80061ca:	f000 fdd5 	bl	8006d78 <xTaskRemoveFromEventList>
 80061ce:	2800      	cmp	r0, #0
 80061d0:	d0f7      	beq.n	80061c2 <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 80061d2:	2d00      	cmp	r5, #0
 80061d4:	d0f5      	beq.n	80061c2 <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80061d6:	2001      	movs	r0, #1
 80061d8:	6028      	str	r0, [r5, #0]
	__asm volatile
 80061da:	f386 8811 	msr	BASEPRI, r6
}
 80061de:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80061e0:	3301      	adds	r3, #1
 80061e2:	b25b      	sxtb	r3, r3
 80061e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80061e8:	e7eb      	b.n	80061c2 <xQueueGiveFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 80061ea:	2000      	movs	r0, #0
 80061ec:	e7f5      	b.n	80061da <xQueueGiveFromISR+0x94>
	...

080061f0 <xQueueReceive>:
{
 80061f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80061f4:	b085      	sub	sp, #20
 80061f6:	460f      	mov	r7, r1
 80061f8:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80061fa:	4604      	mov	r4, r0
 80061fc:	b940      	cbnz	r0, 8006210 <xQueueReceive+0x20>
	__asm volatile
 80061fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006202:	f383 8811 	msr	BASEPRI, r3
 8006206:	f3bf 8f6f 	isb	sy
 800620a:	f3bf 8f4f 	dsb	sy
 800620e:	e7fe      	b.n	800620e <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006210:	b951      	cbnz	r1, 8006228 <xQueueReceive+0x38>
 8006212:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006214:	b143      	cbz	r3, 8006228 <xQueueReceive+0x38>
 8006216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621a:	f383 8811 	msr	BASEPRI, r3
 800621e:	f3bf 8f6f 	isb	sy
 8006222:	f3bf 8f4f 	dsb	sy
 8006226:	e7fe      	b.n	8006226 <xQueueReceive+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006228:	f000 fe34 	bl	8006e94 <xTaskGetSchedulerState>
 800622c:	b950      	cbnz	r0, 8006244 <xQueueReceive+0x54>
 800622e:	9e01      	ldr	r6, [sp, #4]
 8006230:	b14e      	cbz	r6, 8006246 <xQueueReceive+0x56>
 8006232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006236:	f383 8811 	msr	BASEPRI, r3
 800623a:	f3bf 8f6f 	isb	sy
 800623e:	f3bf 8f4f 	dsb	sy
 8006242:	e7fe      	b.n	8006242 <xQueueReceive+0x52>
 8006244:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8006246:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 800624a:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 800632c <xQueueReceive+0x13c>
 800624e:	e03b      	b.n	80062c8 <xQueueReceive+0xd8>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006250:	9d01      	ldr	r5, [sp, #4]
 8006252:	b91d      	cbnz	r5, 800625c <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 8006254:	f001 f958 	bl	8007508 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8006258:	2000      	movs	r0, #0
 800625a:	e052      	b.n	8006302 <xQueueReceive+0x112>
				else if( xEntryTimeSet == pdFALSE )
 800625c:	b916      	cbnz	r6, 8006264 <xQueueReceive+0x74>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800625e:	a802      	add	r0, sp, #8
 8006260:	f000 fdca 	bl	8006df8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8006264:	f001 f950 	bl	8007508 <vPortExitCritical>
		vTaskSuspendAll();
 8006268:	f000 fbda 	bl	8006a20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800626c:	f001 f92a 	bl	80074c4 <vPortEnterCritical>
 8006270:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006274:	2bff      	cmp	r3, #255	; 0xff
 8006276:	bf08      	it	eq
 8006278:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 800627c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006280:	2bff      	cmp	r3, #255	; 0xff
 8006282:	bf08      	it	eq
 8006284:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8006288:	f001 f93e 	bl	8007508 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800628c:	a901      	add	r1, sp, #4
 800628e:	a802      	add	r0, sp, #8
 8006290:	f000 fdbe 	bl	8006e10 <xTaskCheckForTimeOut>
 8006294:	2800      	cmp	r0, #0
 8006296:	d13d      	bne.n	8006314 <xQueueReceive+0x124>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006298:	4620      	mov	r0, r4
 800629a:	f7ff fcc3 	bl	8005c24 <prvIsQueueEmpty>
 800629e:	b398      	cbz	r0, 8006308 <xQueueReceive+0x118>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80062a0:	9901      	ldr	r1, [sp, #4]
 80062a2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80062a6:	f000 fd2d 	bl	8006d04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80062aa:	4620      	mov	r0, r4
 80062ac:	f7ff fd0c 	bl	8005cc8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80062b0:	f000 fc54 	bl	8006b5c <xTaskResumeAll>
 80062b4:	b938      	cbnz	r0, 80062c6 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 80062b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80062ba:	f8c9 3000 	str.w	r3, [r9]
 80062be:	f3bf 8f4f 	dsb	sy
 80062c2:	f3bf 8f6f 	isb	sy
 80062c6:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80062c8:	f001 f8fc 	bl	80074c4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062cc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062ce:	2d00      	cmp	r5, #0
 80062d0:	d0be      	beq.n	8006250 <xQueueReceive+0x60>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80062d2:	4639      	mov	r1, r7
 80062d4:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80062d6:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80062d8:	f7ff fce2 	bl	8005ca0 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80062dc:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062de:	6923      	ldr	r3, [r4, #16]
 80062e0:	b163      	cbz	r3, 80062fc <xQueueReceive+0x10c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062e2:	f104 0010 	add.w	r0, r4, #16
 80062e6:	f000 fd47 	bl	8006d78 <xTaskRemoveFromEventList>
 80062ea:	b138      	cbz	r0, 80062fc <xQueueReceive+0x10c>
						queueYIELD_IF_USING_PREEMPTION();
 80062ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062f0:	4b0e      	ldr	r3, [pc, #56]	; (800632c <xQueueReceive+0x13c>)
 80062f2:	601a      	str	r2, [r3, #0]
 80062f4:	f3bf 8f4f 	dsb	sy
 80062f8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80062fc:	f001 f904 	bl	8007508 <vPortExitCritical>
				return pdPASS;
 8006300:	2001      	movs	r0, #1
}
 8006302:	b005      	add	sp, #20
 8006304:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 8006308:	4620      	mov	r0, r4
 800630a:	f7ff fcdd 	bl	8005cc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800630e:	f000 fc25 	bl	8006b5c <xTaskResumeAll>
 8006312:	e7d8      	b.n	80062c6 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 8006314:	4620      	mov	r0, r4
 8006316:	f7ff fcd7 	bl	8005cc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800631a:	f000 fc1f 	bl	8006b5c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800631e:	4620      	mov	r0, r4
 8006320:	f7ff fc80 	bl	8005c24 <prvIsQueueEmpty>
 8006324:	2800      	cmp	r0, #0
 8006326:	d0ce      	beq.n	80062c6 <xQueueReceive+0xd6>
 8006328:	e796      	b.n	8006258 <xQueueReceive+0x68>
 800632a:	bf00      	nop
 800632c:	e000ed04 	.word	0xe000ed04

08006330 <xQueueSemaphoreTake>:
{
 8006330:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 8006334:	4604      	mov	r4, r0
{
 8006336:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8006338:	b940      	cbnz	r0, 800634c <xQueueSemaphoreTake+0x1c>
 800633a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633e:	f383 8811 	msr	BASEPRI, r3
 8006342:	f3bf 8f6f 	isb	sy
 8006346:	f3bf 8f4f 	dsb	sy
 800634a:	e7fe      	b.n	800634a <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800634c:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800634e:	b145      	cbz	r5, 8006362 <xQueueSemaphoreTake+0x32>
 8006350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006354:	f383 8811 	msr	BASEPRI, r3
 8006358:	f3bf 8f6f 	isb	sy
 800635c:	f3bf 8f4f 	dsb	sy
 8006360:	e7fe      	b.n	8006360 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006362:	f000 fd97 	bl	8006e94 <xTaskGetSchedulerState>
 8006366:	b950      	cbnz	r0, 800637e <xQueueSemaphoreTake+0x4e>
 8006368:	9d01      	ldr	r5, [sp, #4]
 800636a:	b145      	cbz	r5, 800637e <xQueueSemaphoreTake+0x4e>
 800636c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006370:	f383 8811 	msr	BASEPRI, r3
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	f3bf 8f4f 	dsb	sy
 800637c:	e7fe      	b.n	800637c <xQueueSemaphoreTake+0x4c>
 800637e:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8006380:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8006382:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80064b0 <xQueueSemaphoreTake+0x180>
 8006386:	e04f      	b.n	8006428 <xQueueSemaphoreTake+0xf8>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006388:	9b01      	ldr	r3, [sp, #4]
 800638a:	b963      	cbnz	r3, 80063a6 <xQueueSemaphoreTake+0x76>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800638c:	b145      	cbz	r5, 80063a0 <xQueueSemaphoreTake+0x70>
 800638e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006392:	f383 8811 	msr	BASEPRI, r3
 8006396:	f3bf 8f6f 	isb	sy
 800639a:	f3bf 8f4f 	dsb	sy
 800639e:	e7fe      	b.n	800639e <xQueueSemaphoreTake+0x6e>
					taskEXIT_CRITICAL();
 80063a0:	f001 f8b2 	bl	8007508 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80063a4:	e05e      	b.n	8006464 <xQueueSemaphoreTake+0x134>
				else if( xEntryTimeSet == pdFALSE )
 80063a6:	b916      	cbnz	r6, 80063ae <xQueueSemaphoreTake+0x7e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80063a8:	a802      	add	r0, sp, #8
 80063aa:	f000 fd25 	bl	8006df8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80063ae:	f001 f8ab 	bl	8007508 <vPortExitCritical>
		vTaskSuspendAll();
 80063b2:	f000 fb35 	bl	8006a20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80063b6:	f001 f885 	bl	80074c4 <vPortEnterCritical>
 80063ba:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80063be:	2bff      	cmp	r3, #255	; 0xff
 80063c0:	bf08      	it	eq
 80063c2:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 80063c6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80063ca:	2bff      	cmp	r3, #255	; 0xff
 80063cc:	bf08      	it	eq
 80063ce:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 80063d2:	f001 f899 	bl	8007508 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80063d6:	a901      	add	r1, sp, #4
 80063d8:	a802      	add	r0, sp, #8
 80063da:	f000 fd19 	bl	8006e10 <xTaskCheckForTimeOut>
 80063de:	2800      	cmp	r0, #0
 80063e0:	d14a      	bne.n	8006478 <xQueueSemaphoreTake+0x148>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063e2:	4620      	mov	r0, r4
 80063e4:	f7ff fc1e 	bl	8005c24 <prvIsQueueEmpty>
 80063e8:	2800      	cmp	r0, #0
 80063ea:	d03f      	beq.n	800646c <xQueueSemaphoreTake+0x13c>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063ec:	6823      	ldr	r3, [r4, #0]
 80063ee:	b93b      	cbnz	r3, 8006400 <xQueueSemaphoreTake+0xd0>
						taskENTER_CRITICAL();
 80063f0:	f001 f868 	bl	80074c4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80063f4:	6860      	ldr	r0, [r4, #4]
 80063f6:	f000 fd5d 	bl	8006eb4 <xTaskPriorityInherit>
 80063fa:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 80063fc:	f001 f884 	bl	8007508 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006400:	9901      	ldr	r1, [sp, #4]
 8006402:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006406:	f000 fc7d 	bl	8006d04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800640a:	4620      	mov	r0, r4
 800640c:	f7ff fc5c 	bl	8005cc8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006410:	f000 fba4 	bl	8006b5c <xTaskResumeAll>
 8006414:	b938      	cbnz	r0, 8006426 <xQueueSemaphoreTake+0xf6>
					portYIELD_WITHIN_API();
 8006416:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800641a:	f8c8 3000 	str.w	r3, [r8]
 800641e:	f3bf 8f4f 	dsb	sy
 8006422:	f3bf 8f6f 	isb	sy
 8006426:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8006428:	f001 f84c 	bl	80074c4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800642c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800642e:	2b00      	cmp	r3, #0
 8006430:	d0aa      	beq.n	8006388 <xQueueSemaphoreTake+0x58>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006432:	3b01      	subs	r3, #1
 8006434:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006436:	6823      	ldr	r3, [r4, #0]
 8006438:	b913      	cbnz	r3, 8006440 <xQueueSemaphoreTake+0x110>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800643a:	f000 fe0d 	bl	8007058 <pvTaskIncrementMutexHeldCount>
 800643e:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006440:	6923      	ldr	r3, [r4, #16]
 8006442:	b163      	cbz	r3, 800645e <xQueueSemaphoreTake+0x12e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006444:	f104 0010 	add.w	r0, r4, #16
 8006448:	f000 fc96 	bl	8006d78 <xTaskRemoveFromEventList>
 800644c:	b138      	cbz	r0, 800645e <xQueueSemaphoreTake+0x12e>
						queueYIELD_IF_USING_PREEMPTION();
 800644e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006452:	4b17      	ldr	r3, [pc, #92]	; (80064b0 <xQueueSemaphoreTake+0x180>)
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800645e:	f001 f853 	bl	8007508 <vPortExitCritical>
				return pdPASS;
 8006462:	2501      	movs	r5, #1
}
 8006464:	4628      	mov	r0, r5
 8006466:	b004      	add	sp, #16
 8006468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 800646c:	4620      	mov	r0, r4
 800646e:	f7ff fc2b 	bl	8005cc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006472:	f000 fb73 	bl	8006b5c <xTaskResumeAll>
 8006476:	e7d6      	b.n	8006426 <xQueueSemaphoreTake+0xf6>
			prvUnlockQueue( pxQueue );
 8006478:	4620      	mov	r0, r4
 800647a:	f7ff fc25 	bl	8005cc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800647e:	f000 fb6d 	bl	8006b5c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006482:	4620      	mov	r0, r4
 8006484:	f7ff fbce 	bl	8005c24 <prvIsQueueEmpty>
 8006488:	2800      	cmp	r0, #0
 800648a:	d0cc      	beq.n	8006426 <xQueueSemaphoreTake+0xf6>
					if( xInheritanceOccurred != pdFALSE )
 800648c:	2d00      	cmp	r5, #0
 800648e:	d0e9      	beq.n	8006464 <xQueueSemaphoreTake+0x134>
						taskENTER_CRITICAL();
 8006490:	f001 f818 	bl	80074c4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8006494:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006496:	b119      	cbz	r1, 80064a0 <xQueueSemaphoreTake+0x170>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006498:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800649a:	6819      	ldr	r1, [r3, #0]
 800649c:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80064a0:	6860      	ldr	r0, [r4, #4]
 80064a2:	f000 fd8b 	bl	8006fbc <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 80064a6:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 80064a8:	f001 f82e 	bl	8007508 <vPortExitCritical>
 80064ac:	e7da      	b.n	8006464 <xQueueSemaphoreTake+0x134>
 80064ae:	bf00      	nop
 80064b0:	e000ed04 	.word	0xe000ed04

080064b4 <xQueueReceiveFromISR>:
{
 80064b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064b8:	4689      	mov	r9, r1
 80064ba:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 80064bc:	4605      	mov	r5, r0
 80064be:	b940      	cbnz	r0, 80064d2 <xQueueReceiveFromISR+0x1e>
 80064c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c4:	f383 8811 	msr	BASEPRI, r3
 80064c8:	f3bf 8f6f 	isb	sy
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	e7fe      	b.n	80064d0 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064d2:	b951      	cbnz	r1, 80064ea <xQueueReceiveFromISR+0x36>
 80064d4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80064d6:	b143      	cbz	r3, 80064ea <xQueueReceiveFromISR+0x36>
 80064d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064dc:	f383 8811 	msr	BASEPRI, r3
 80064e0:	f3bf 8f6f 	isb	sy
 80064e4:	f3bf 8f4f 	dsb	sy
 80064e8:	e7fe      	b.n	80064e8 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064ea:	f001 f8cd 	bl	8007688 <vPortValidateInterruptPriority>
	__asm volatile
 80064ee:	f3ef 8711 	mrs	r7, BASEPRI
 80064f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f6:	f383 8811 	msr	BASEPRI, r3
 80064fa:	f3bf 8f6f 	isb	sy
 80064fe:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006502:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006504:	b31c      	cbz	r4, 800654e <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 8006506:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800650a:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 800650c:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800650e:	4628      	mov	r0, r5
 8006510:	f7ff fbc6 	bl	8005ca0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006514:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 8006516:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006518:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800651a:	d113      	bne.n	8006544 <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800651c:	692b      	ldr	r3, [r5, #16]
 800651e:	b90b      	cbnz	r3, 8006524 <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 8006520:	2001      	movs	r0, #1
 8006522:	e00b      	b.n	800653c <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006524:	f105 0010 	add.w	r0, r5, #16
 8006528:	f000 fc26 	bl	8006d78 <xTaskRemoveFromEventList>
 800652c:	2800      	cmp	r0, #0
 800652e:	d0f7      	beq.n	8006520 <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 8006530:	f1b8 0f00 	cmp.w	r8, #0
 8006534:	d0f4      	beq.n	8006520 <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006536:	2001      	movs	r0, #1
 8006538:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800653c:	f387 8811 	msr	BASEPRI, r7
}
 8006540:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006544:	3601      	adds	r6, #1
 8006546:	b276      	sxtb	r6, r6
 8006548:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 800654c:	e7e8      	b.n	8006520 <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 800654e:	4620      	mov	r0, r4
 8006550:	e7f4      	b.n	800653c <xQueueReceiveFromISR+0x88>
	...

08006554 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006554:	2300      	movs	r3, #0
	{
 8006556:	b530      	push	{r4, r5, lr}
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006558:	4a06      	ldr	r2, [pc, #24]	; (8006574 <vQueueAddToRegistry+0x20>)
 800655a:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800655e:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8006562:	b91d      	cbnz	r5, 800656c <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006564:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006568:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800656a:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800656c:	3301      	adds	r3, #1
 800656e:	2b08      	cmp	r3, #8
 8006570:	d1f3      	bne.n	800655a <vQueueAddToRegistry+0x6>
 8006572:	e7fa      	b.n	800656a <vQueueAddToRegistry+0x16>
 8006574:	20003268 	.word	0x20003268

08006578 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006578:	2300      	movs	r3, #0
	{
 800657a:	b510      	push	{r4, lr}
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800657c:	4a07      	ldr	r2, [pc, #28]	; (800659c <vQueueUnregisterQueue+0x24>)
 800657e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8006582:	684c      	ldr	r4, [r1, #4]
 8006584:	4284      	cmp	r4, r0
 8006586:	d104      	bne.n	8006592 <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006588:	2000      	movs	r0, #0
 800658a:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800658e:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006590:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006592:	3301      	adds	r3, #1
 8006594:	2b08      	cmp	r3, #8
 8006596:	d1f2      	bne.n	800657e <vQueueUnregisterQueue+0x6>
 8006598:	e7fa      	b.n	8006590 <vQueueUnregisterQueue+0x18>
 800659a:	bf00      	nop
 800659c:	20003268 	.word	0x20003268

080065a0 <vQueueDelete>:
{
 80065a0:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 80065a2:	4604      	mov	r4, r0
 80065a4:	b940      	cbnz	r0, 80065b8 <vQueueDelete+0x18>
	__asm volatile
 80065a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065aa:	f383 8811 	msr	BASEPRI, r3
 80065ae:	f3bf 8f6f 	isb	sy
 80065b2:	f3bf 8f4f 	dsb	sy
 80065b6:	e7fe      	b.n	80065b6 <vQueueDelete+0x16>
		vQueueUnregisterQueue( pxQueue );
 80065b8:	f7ff ffde 	bl	8006578 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80065bc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80065c0:	b923      	cbnz	r3, 80065cc <vQueueDelete+0x2c>
			vPortFree( pxQueue );
 80065c2:	4620      	mov	r0, r4
}
 80065c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 80065c8:	f001 b93e 	b.w	8007848 <vPortFree>
}
 80065cc:	bd10      	pop	{r4, pc}

080065ce <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80065ce:	b570      	push	{r4, r5, r6, lr}
 80065d0:	4604      	mov	r4, r0
 80065d2:	460d      	mov	r5, r1
 80065d4:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80065d6:	f000 ff75 	bl	80074c4 <vPortEnterCritical>
 80065da:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80065de:	2bff      	cmp	r3, #255	; 0xff
 80065e0:	bf04      	itt	eq
 80065e2:	2300      	moveq	r3, #0
 80065e4:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 80065e8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80065ec:	2bff      	cmp	r3, #255	; 0xff
 80065ee:	bf04      	itt	eq
 80065f0:	2300      	moveq	r3, #0
 80065f2:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 80065f6:	f000 ff87 	bl	8007508 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80065fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80065fc:	b92b      	cbnz	r3, 800660a <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80065fe:	4632      	mov	r2, r6
 8006600:	4629      	mov	r1, r5
 8006602:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006606:	f000 fb97 	bl	8006d38 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800660a:	4620      	mov	r0, r4
	}
 800660c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8006610:	f7ff bb5a 	b.w	8005cc8 <prvUnlockQueue>

08006614 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006618:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800661a:	f000 ff53 	bl	80074c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800661e:	4b2f      	ldr	r3, [pc, #188]	; (80066dc <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 8006620:	4d2f      	ldr	r5, [pc, #188]	; (80066e0 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	4f2f      	ldr	r7, [pc, #188]	; (80066e4 <prvAddNewTaskToReadyList+0xd0>)
 8006626:	3201      	adds	r2, #1
 8006628:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800662a:	682e      	ldr	r6, [r5, #0]
 800662c:	2e00      	cmp	r6, #0
 800662e:	d149      	bne.n	80066c4 <prvAddNewTaskToReadyList+0xb0>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006630:	602c      	str	r4, [r5, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d11f      	bne.n	8006678 <prvAddNewTaskToReadyList+0x64>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006638:	f04f 0814 	mov.w	r8, #20
 800663c:	fb08 7006 	mla	r0, r8, r6, r7
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006640:	3601      	adds	r6, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006642:	f7ff faad 	bl	8005ba0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006646:	2e38      	cmp	r6, #56	; 0x38
 8006648:	d1f8      	bne.n	800663c <prvAddNewTaskToReadyList+0x28>
	}

	vListInitialise( &xDelayedTaskList1 );
 800664a:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8006710 <prvAddNewTaskToReadyList+0xfc>
	vListInitialise( &xDelayedTaskList2 );
 800664e:	4e26      	ldr	r6, [pc, #152]	; (80066e8 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 8006650:	4640      	mov	r0, r8
 8006652:	f7ff faa5 	bl	8005ba0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006656:	4630      	mov	r0, r6
 8006658:	f7ff faa2 	bl	8005ba0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800665c:	4823      	ldr	r0, [pc, #140]	; (80066ec <prvAddNewTaskToReadyList+0xd8>)
 800665e:	f7ff fa9f 	bl	8005ba0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006662:	4823      	ldr	r0, [pc, #140]	; (80066f0 <prvAddNewTaskToReadyList+0xdc>)
 8006664:	f7ff fa9c 	bl	8005ba0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006668:	4822      	ldr	r0, [pc, #136]	; (80066f4 <prvAddNewTaskToReadyList+0xe0>)
 800666a:	f7ff fa99 	bl	8005ba0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800666e:	4b22      	ldr	r3, [pc, #136]	; (80066f8 <prvAddNewTaskToReadyList+0xe4>)
 8006670:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006674:	4b21      	ldr	r3, [pc, #132]	; (80066fc <prvAddNewTaskToReadyList+0xe8>)
 8006676:	601e      	str	r6, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8006678:	2014      	movs	r0, #20
		uxTaskNumber++;
 800667a:	4a21      	ldr	r2, [pc, #132]	; (8006700 <prvAddNewTaskToReadyList+0xec>)
 800667c:	6813      	ldr	r3, [r2, #0]
 800667e:	3301      	adds	r3, #1
 8006680:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8006682:	4a20      	ldr	r2, [pc, #128]	; (8006704 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006684:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8006686:	6811      	ldr	r1, [r2, #0]
 8006688:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800668a:	428b      	cmp	r3, r1
 800668c:	fb00 7003 	mla	r0, r0, r3, r7
 8006690:	f104 0104 	add.w	r1, r4, #4
 8006694:	bf88      	it	hi
 8006696:	6013      	strhi	r3, [r2, #0]
 8006698:	f7ff fa90 	bl	8005bbc <vListInsertEnd>
	taskEXIT_CRITICAL();
 800669c:	f000 ff34 	bl	8007508 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80066a0:	4b19      	ldr	r3, [pc, #100]	; (8006708 <prvAddNewTaskToReadyList+0xf4>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	b163      	cbz	r3, 80066c0 <prvAddNewTaskToReadyList+0xac>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80066a6:	682b      	ldr	r3, [r5, #0]
 80066a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d207      	bcs.n	80066c0 <prvAddNewTaskToReadyList+0xac>
			taskYIELD_IF_USING_PREEMPTION();
 80066b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066b4:	4b15      	ldr	r3, [pc, #84]	; (800670c <prvAddNewTaskToReadyList+0xf8>)
 80066b6:	601a      	str	r2, [r3, #0]
 80066b8:	f3bf 8f4f 	dsb	sy
 80066bc:	f3bf 8f6f 	isb	sy
}
 80066c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 80066c4:	4b10      	ldr	r3, [pc, #64]	; (8006708 <prvAddNewTaskToReadyList+0xf4>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d1d5      	bne.n	8006678 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80066cc:	682b      	ldr	r3, [r5, #0]
 80066ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80066d2:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80066d4:	bf98      	it	ls
 80066d6:	602c      	strls	r4, [r5, #0]
 80066d8:	e7ce      	b.n	8006678 <prvAddNewTaskToReadyList+0x64>
 80066da:	bf00      	nop
 80066dc:	20000fe8 	.word	0x20000fe8
 80066e0:	20000b7c 	.word	0x20000b7c
 80066e4:	20000b88 	.word	0x20000b88
 80066e8:	20001014 	.word	0x20001014
 80066ec:	20001030 	.word	0x20001030
 80066f0:	2000105c 	.word	0x2000105c
 80066f4:	20001048 	.word	0x20001048
 80066f8:	20000b80 	.word	0x20000b80
 80066fc:	20000b84 	.word	0x20000b84
 8006700:	20000ff8 	.word	0x20000ff8
 8006704:	20000ffc 	.word	0x20000ffc
 8006708:	20001044 	.word	0x20001044
 800670c:	e000ed04 	.word	0xe000ed04
 8006710:	20001000 	.word	0x20001000

08006714 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006714:	b510      	push	{r4, lr}
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006716:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
	{
 800671a:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800671c:	b93b      	cbnz	r3, 800672e <prvDeleteTCB+0x1a>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800671e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8006720:	f001 f892 	bl	8007848 <vPortFree>
				vPortFree( pxTCB );
 8006724:	4620      	mov	r0, r4
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800672a:	f001 b88d 	b.w	8007848 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800672e:	2b01      	cmp	r3, #1
 8006730:	d0f9      	beq.n	8006726 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006732:	2b02      	cmp	r3, #2
 8006734:	d008      	beq.n	8006748 <prvDeleteTCB+0x34>
 8006736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673a:	f383 8811 	msr	BASEPRI, r3
 800673e:	f3bf 8f6f 	isb	sy
 8006742:	f3bf 8f4f 	dsb	sy
 8006746:	e7fe      	b.n	8006746 <prvDeleteTCB+0x32>
	}
 8006748:	bd10      	pop	{r4, pc}
	...

0800674c <prvIdleTask>:
{
 800674c:	b580      	push	{r7, lr}
				taskYIELD();
 800674e:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80067ac <prvIdleTask+0x60>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006752:	4f12      	ldr	r7, [pc, #72]	; (800679c <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006754:	4c12      	ldr	r4, [pc, #72]	; (80067a0 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8006756:	4d13      	ldr	r5, [pc, #76]	; (80067a4 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006758:	6823      	ldr	r3, [r4, #0]
 800675a:	b963      	cbnz	r3, 8006776 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800675c:	4b12      	ldr	r3, [pc, #72]	; (80067a8 <prvIdleTask+0x5c>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	2b01      	cmp	r3, #1
 8006762:	d9f8      	bls.n	8006756 <prvIdleTask+0xa>
				taskYIELD();
 8006764:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006768:	f8c8 3000 	str.w	r3, [r8]
 800676c:	f3bf 8f4f 	dsb	sy
 8006770:	f3bf 8f6f 	isb	sy
 8006774:	e7ee      	b.n	8006754 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8006776:	f000 fea5 	bl	80074c4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800677e:	1d30      	adds	r0, r6, #4
 8006780:	f7ff fa3f 	bl	8005c02 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006784:	682b      	ldr	r3, [r5, #0]
 8006786:	3b01      	subs	r3, #1
 8006788:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800678a:	6823      	ldr	r3, [r4, #0]
 800678c:	3b01      	subs	r3, #1
 800678e:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8006790:	f000 feba 	bl	8007508 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8006794:	4630      	mov	r0, r6
 8006796:	f7ff ffbd 	bl	8006714 <prvDeleteTCB>
 800679a:	e7dd      	b.n	8006758 <prvIdleTask+0xc>
 800679c:	2000105c 	.word	0x2000105c
 80067a0:	20000fec 	.word	0x20000fec
 80067a4:	20000fe8 	.word	0x20000fe8
 80067a8:	20000b88 	.word	0x20000b88
 80067ac:	e000ed04 	.word	0xe000ed04

080067b0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067b0:	4a06      	ldr	r2, [pc, #24]	; (80067cc <prvResetNextTaskUnblockTime+0x1c>)
 80067b2:	6813      	ldr	r3, [r2, #0]
 80067b4:	6819      	ldr	r1, [r3, #0]
 80067b6:	4b06      	ldr	r3, [pc, #24]	; (80067d0 <prvResetNextTaskUnblockTime+0x20>)
 80067b8:	b919      	cbnz	r1, 80067c2 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80067ba:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80067be:	601a      	str	r2, [r3, #0]
	}
}
 80067c0:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80067c2:	6812      	ldr	r2, [r2, #0]
 80067c4:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80067c6:	68d2      	ldr	r2, [r2, #12]
 80067c8:	6852      	ldr	r2, [r2, #4]
 80067ca:	e7f8      	b.n	80067be <prvResetNextTaskUnblockTime+0xe>
 80067cc:	20000b80 	.word	0x20000b80
 80067d0:	20001028 	.word	0x20001028

080067d4 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80067d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067d8:	460d      	mov	r5, r1
 80067da:	e9dd 7409 	ldrd	r7, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80067de:	0096      	lsls	r6, r2, #2
 80067e0:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80067e2:	4680      	mov	r8, r0
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80067e4:	21a5      	movs	r1, #165	; 0xa5
 80067e6:	6b20      	ldr	r0, [r4, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80067e8:	4699      	mov	r9, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80067ea:	f001 fa98 	bl	8007d1e <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80067ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80067f0:	3e04      	subs	r6, #4
 80067f2:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80067f4:	f026 0607 	bic.w	r6, r6, #7
 80067f8:	1e6b      	subs	r3, r5, #1
 80067fa:	f104 0234 	add.w	r2, r4, #52	; 0x34
 80067fe:	350f      	adds	r5, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006800:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8006804:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8006808:	7819      	ldrb	r1, [r3, #0]
 800680a:	b109      	cbz	r1, 8006810 <prvInitialiseNewTask.isra.2+0x3c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800680c:	42ab      	cmp	r3, r5
 800680e:	d1f7      	bne.n	8006800 <prvInitialiseNewTask.isra.2+0x2c>
 8006810:	9d08      	ldr	r5, [sp, #32]
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006812:	f04f 0a00 	mov.w	sl, #0
 8006816:	2d37      	cmp	r5, #55	; 0x37
 8006818:	bf28      	it	cs
 800681a:	2537      	movcs	r5, #55	; 0x37
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800681c:	1d20      	adds	r0, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 800681e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 8006820:	e9c4 5a13 	strd	r5, sl, [r4, #76]	; 0x4c
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006824:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006828:	f7ff f9c5 	bl	8005bb6 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800682c:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006830:	f104 0018 	add.w	r0, r4, #24
 8006834:	f7ff f9bf 	bl	8005bb6 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8006838:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800683c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800683e:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006840:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006842:	f884 a058 	strb.w	sl, [r4, #88]	; 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006846:	464a      	mov	r2, r9
 8006848:	4641      	mov	r1, r8
 800684a:	4630      	mov	r0, r6
 800684c:	f000 fe16 	bl	800747c <pxPortInitialiseStack>
 8006850:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8006852:	b107      	cbz	r7, 8006856 <prvInitialiseNewTask.isra.2+0x82>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006854:	603c      	str	r4, [r7, #0]
}
 8006856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800685c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800685c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800685e:	4605      	mov	r5, r0
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006860:	4b15      	ldr	r3, [pc, #84]	; (80068b8 <prvAddCurrentTaskToDelayedList+0x5c>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006862:	4e16      	ldr	r6, [pc, #88]	; (80068bc <prvAddCurrentTaskToDelayedList+0x60>)
const TickType_t xConstTickCount = xTickCount;
 8006864:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006866:	6830      	ldr	r0, [r6, #0]
{
 8006868:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800686a:	3004      	adds	r0, #4
 800686c:	f7ff f9c9 	bl	8005c02 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006870:	1c6b      	adds	r3, r5, #1
 8006872:	4633      	mov	r3, r6
 8006874:	d107      	bne.n	8006886 <prvAddCurrentTaskToDelayedList+0x2a>
 8006876:	b137      	cbz	r7, 8006886 <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006878:	6831      	ldr	r1, [r6, #0]
 800687a:	4811      	ldr	r0, [pc, #68]	; (80068c0 <prvAddCurrentTaskToDelayedList+0x64>)
 800687c:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800687e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006882:	f7ff b99b 	b.w	8005bbc <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	1964      	adds	r4, r4, r5
 800688a:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800688c:	d307      	bcc.n	800689e <prvAddCurrentTaskToDelayedList+0x42>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800688e:	4a0d      	ldr	r2, [pc, #52]	; (80068c4 <prvAddCurrentTaskToDelayedList+0x68>)
 8006890:	6810      	ldr	r0, [r2, #0]
 8006892:	6819      	ldr	r1, [r3, #0]
}
 8006894:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006898:	3104      	adds	r1, #4
 800689a:	f7ff b99b 	b.w	8005bd4 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800689e:	4a0a      	ldr	r2, [pc, #40]	; (80068c8 <prvAddCurrentTaskToDelayedList+0x6c>)
 80068a0:	6810      	ldr	r0, [r2, #0]
 80068a2:	6819      	ldr	r1, [r3, #0]
 80068a4:	3104      	adds	r1, #4
 80068a6:	f7ff f995 	bl	8005bd4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80068aa:	4b08      	ldr	r3, [pc, #32]	; (80068cc <prvAddCurrentTaskToDelayedList+0x70>)
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 80068b0:	bf88      	it	hi
 80068b2:	601c      	strhi	r4, [r3, #0]
}
 80068b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068b6:	bf00      	nop
 80068b8:	20001070 	.word	0x20001070
 80068bc:	20000b7c 	.word	0x20000b7c
 80068c0:	20001048 	.word	0x20001048
 80068c4:	20000b84 	.word	0x20000b84
 80068c8:	20000b80 	.word	0x20000b80
 80068cc:	20001028 	.word	0x20001028

080068d0 <xTaskCreateStatic>:
	{
 80068d0:	b570      	push	{r4, r5, r6, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 80068d8:	b945      	cbnz	r5, 80068ec <xTaskCreateStatic+0x1c>
 80068da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068de:	f383 8811 	msr	BASEPRI, r3
 80068e2:	f3bf 8f6f 	isb	sy
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	e7fe      	b.n	80068ea <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 80068ec:	b944      	cbnz	r4, 8006900 <xTaskCreateStatic+0x30>
 80068ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f2:	f383 8811 	msr	BASEPRI, r3
 80068f6:	f3bf 8f6f 	isb	sy
 80068fa:	f3bf 8f4f 	dsb	sy
 80068fe:	e7fe      	b.n	80068fe <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8006900:	265c      	movs	r6, #92	; 0x5c
 8006902:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006904:	9e04      	ldr	r6, [sp, #16]
 8006906:	2e5c      	cmp	r6, #92	; 0x5c
 8006908:	d008      	beq.n	800691c <xTaskCreateStatic+0x4c>
 800690a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690e:	f383 8811 	msr	BASEPRI, r3
 8006912:	f3bf 8f6f 	isb	sy
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	e7fe      	b.n	800691a <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800691c:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800691e:	2502      	movs	r5, #2
 8006920:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006924:	ad05      	add	r5, sp, #20
 8006926:	9501      	str	r5, [sp, #4]
 8006928:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800692a:	9402      	str	r4, [sp, #8]
 800692c:	9500      	str	r5, [sp, #0]
 800692e:	f7ff ff51 	bl	80067d4 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006932:	4620      	mov	r0, r4
 8006934:	f7ff fe6e 	bl	8006614 <prvAddNewTaskToReadyList>
	}
 8006938:	9805      	ldr	r0, [sp, #20]
 800693a:	b006      	add	sp, #24
 800693c:	bd70      	pop	{r4, r5, r6, pc}

0800693e <xTaskCreate>:
	{
 800693e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006942:	4607      	mov	r7, r0
 8006944:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006946:	0090      	lsls	r0, r2, #2
	{
 8006948:	4688      	mov	r8, r1
 800694a:	4616      	mov	r6, r2
 800694c:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800694e:	f000 feed 	bl	800772c <pvPortMalloc>
			if( pxStack != NULL )
 8006952:	4605      	mov	r5, r0
 8006954:	b1e8      	cbz	r0, 8006992 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006956:	205c      	movs	r0, #92	; 0x5c
 8006958:	f000 fee8 	bl	800772c <pvPortMalloc>
				if( pxNewTCB != NULL )
 800695c:	4604      	mov	r4, r0
 800695e:	b1a8      	cbz	r0, 800698c <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006960:	2300      	movs	r3, #0
 8006962:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006966:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8006968:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800696a:	9301      	str	r3, [sp, #4]
 800696c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800696e:	9002      	str	r0, [sp, #8]
 8006970:	9300      	str	r3, [sp, #0]
 8006972:	4632      	mov	r2, r6
 8006974:	464b      	mov	r3, r9
 8006976:	4641      	mov	r1, r8
 8006978:	4638      	mov	r0, r7
 800697a:	f7ff ff2b 	bl	80067d4 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 800697e:	4620      	mov	r0, r4
 8006980:	f7ff fe48 	bl	8006614 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006984:	2001      	movs	r0, #1
	}
 8006986:	b005      	add	sp, #20
 8006988:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800698c:	4628      	mov	r0, r5
 800698e:	f000 ff5b 	bl	8007848 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006992:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8006996:	e7f6      	b.n	8006986 <xTaskCreate+0x48>

08006998 <vTaskStartScheduler>:
{
 8006998:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800699a:	2400      	movs	r4, #0
{
 800699c:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800699e:	aa07      	add	r2, sp, #28
 80069a0:	a906      	add	r1, sp, #24
 80069a2:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80069a4:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80069a8:	f7ff f8e2 	bl	8005b70 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80069ac:	9b05      	ldr	r3, [sp, #20]
 80069ae:	9a07      	ldr	r2, [sp, #28]
 80069b0:	9302      	str	r3, [sp, #8]
 80069b2:	9b06      	ldr	r3, [sp, #24]
 80069b4:	4915      	ldr	r1, [pc, #84]	; (8006a0c <vTaskStartScheduler+0x74>)
 80069b6:	e9cd 4300 	strd	r4, r3, [sp]
 80069ba:	4815      	ldr	r0, [pc, #84]	; (8006a10 <vTaskStartScheduler+0x78>)
 80069bc:	4623      	mov	r3, r4
 80069be:	f7ff ff87 	bl	80068d0 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80069c2:	b1a8      	cbz	r0, 80069f0 <vTaskStartScheduler+0x58>
			xReturn = xTimerCreateTimerTask();
 80069c4:	f000 fba6 	bl	8007114 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80069c8:	2801      	cmp	r0, #1
 80069ca:	d113      	bne.n	80069f4 <vTaskStartScheduler+0x5c>
 80069cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d0:	f383 8811 	msr	BASEPRI, r3
 80069d4:	f3bf 8f6f 	isb	sy
 80069d8:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80069dc:	f04f 32ff 	mov.w	r2, #4294967295
 80069e0:	4b0c      	ldr	r3, [pc, #48]	; (8006a14 <vTaskStartScheduler+0x7c>)
 80069e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80069e4:	4b0c      	ldr	r3, [pc, #48]	; (8006a18 <vTaskStartScheduler+0x80>)
 80069e6:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80069e8:	4b0c      	ldr	r3, [pc, #48]	; (8006a1c <vTaskStartScheduler+0x84>)
 80069ea:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80069ec:	f000 fdf2 	bl	80075d4 <xPortStartScheduler>
}
 80069f0:	b008      	add	sp, #32
 80069f2:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80069f4:	3001      	adds	r0, #1
 80069f6:	d1fb      	bne.n	80069f0 <vTaskStartScheduler+0x58>
 80069f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fc:	f383 8811 	msr	BASEPRI, r3
 8006a00:	f3bf 8f6f 	isb	sy
 8006a04:	f3bf 8f4f 	dsb	sy
 8006a08:	e7fe      	b.n	8006a08 <vTaskStartScheduler+0x70>
 8006a0a:	bf00      	nop
 8006a0c:	0800b4b2 	.word	0x0800b4b2
 8006a10:	0800674d 	.word	0x0800674d
 8006a14:	20001028 	.word	0x20001028
 8006a18:	20001044 	.word	0x20001044
 8006a1c:	20001070 	.word	0x20001070

08006a20 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006a20:	4a02      	ldr	r2, [pc, #8]	; (8006a2c <vTaskSuspendAll+0xc>)
 8006a22:	6813      	ldr	r3, [r2, #0]
 8006a24:	3301      	adds	r3, #1
 8006a26:	6013      	str	r3, [r2, #0]
}
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop
 8006a2c:	20000ff4 	.word	0x20000ff4

08006a30 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8006a30:	4b01      	ldr	r3, [pc, #4]	; (8006a38 <xTaskGetTickCount+0x8>)
 8006a32:	6818      	ldr	r0, [r3, #0]
}
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	20001070 	.word	0x20001070

08006a3c <xTaskIncrementTick>:
{
 8006a3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a40:	4b3b      	ldr	r3, [pc, #236]	; (8006b30 <xTaskIncrementTick+0xf4>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d16b      	bne.n	8006b20 <xTaskIncrementTick+0xe4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a48:	4b3a      	ldr	r3, [pc, #232]	; (8006b34 <xTaskIncrementTick+0xf8>)
 8006a4a:	681c      	ldr	r4, [r3, #0]
 8006a4c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8006a4e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a50:	b9bc      	cbnz	r4, 8006a82 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8006a52:	4b39      	ldr	r3, [pc, #228]	; (8006b38 <xTaskIncrementTick+0xfc>)
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	6812      	ldr	r2, [r2, #0]
 8006a58:	b142      	cbz	r2, 8006a6c <xTaskIncrementTick+0x30>
 8006a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5e:	f383 8811 	msr	BASEPRI, r3
 8006a62:	f3bf 8f6f 	isb	sy
 8006a66:	f3bf 8f4f 	dsb	sy
 8006a6a:	e7fe      	b.n	8006a6a <xTaskIncrementTick+0x2e>
 8006a6c:	4a33      	ldr	r2, [pc, #204]	; (8006b3c <xTaskIncrementTick+0x100>)
 8006a6e:	6819      	ldr	r1, [r3, #0]
 8006a70:	6810      	ldr	r0, [r2, #0]
 8006a72:	6018      	str	r0, [r3, #0]
 8006a74:	6011      	str	r1, [r2, #0]
 8006a76:	4a32      	ldr	r2, [pc, #200]	; (8006b40 <xTaskIncrementTick+0x104>)
 8006a78:	6813      	ldr	r3, [r2, #0]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	6013      	str	r3, [r2, #0]
 8006a7e:	f7ff fe97 	bl	80067b0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006a82:	4d30      	ldr	r5, [pc, #192]	; (8006b44 <xTaskIncrementTick+0x108>)
BaseType_t xSwitchRequired = pdFALSE;
 8006a84:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006a88:	682b      	ldr	r3, [r5, #0]
 8006a8a:	4f2f      	ldr	r7, [pc, #188]	; (8006b48 <xTaskIncrementTick+0x10c>)
 8006a8c:	42a3      	cmp	r3, r4
 8006a8e:	d911      	bls.n	8006ab4 <xTaskIncrementTick+0x78>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a90:	683a      	ldr	r2, [r7, #0]
 8006a92:	4b2e      	ldr	r3, [pc, #184]	; (8006b4c <xTaskIncrementTick+0x110>)
 8006a94:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006a96:	2214      	movs	r2, #20
 8006a98:	434a      	muls	r2, r1
 8006a9a:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8006a9c:	2a02      	cmp	r2, #2
 8006a9e:	bf28      	it	cs
 8006aa0:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8006aa4:	4a2a      	ldr	r2, [pc, #168]	; (8006b50 <xTaskIncrementTick+0x114>)
 8006aa6:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8006aa8:	2a00      	cmp	r2, #0
}
 8006aaa:	bf0c      	ite	eq
 8006aac:	4658      	moveq	r0, fp
 8006aae:	2001      	movne	r0, #1
 8006ab0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ab4:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8006b38 <xTaskIncrementTick+0xfc>
					prvAddTaskToReadyList( pxTCB );
 8006ab8:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8006b58 <xTaskIncrementTick+0x11c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006abc:	f8d9 2000 	ldr.w	r2, [r9]
 8006ac0:	6812      	ldr	r2, [r2, #0]
 8006ac2:	b91a      	cbnz	r2, 8006acc <xTaskIncrementTick+0x90>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ac8:	602a      	str	r2, [r5, #0]
					break;
 8006aca:	e7e1      	b.n	8006a90 <xTaskIncrementTick+0x54>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006acc:	f8d9 2000 	ldr.w	r2, [r9]
 8006ad0:	68d2      	ldr	r2, [r2, #12]
 8006ad2:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006ad4:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8006ad6:	428c      	cmp	r4, r1
 8006ad8:	d201      	bcs.n	8006ade <xTaskIncrementTick+0xa2>
						xNextTaskUnblockTime = xItemValue;
 8006ada:	6029      	str	r1, [r5, #0]
						break;
 8006adc:	e7d8      	b.n	8006a90 <xTaskIncrementTick+0x54>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ade:	f106 0804 	add.w	r8, r6, #4
 8006ae2:	4640      	mov	r0, r8
 8006ae4:	f7ff f88d 	bl	8005c02 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ae8:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8006aea:	b119      	cbz	r1, 8006af4 <xTaskIncrementTick+0xb8>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006aec:	f106 0018 	add.w	r0, r6, #24
 8006af0:	f7ff f887 	bl	8005c02 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006af4:	2214      	movs	r2, #20
 8006af6:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8006af8:	f8da 1000 	ldr.w	r1, [sl]
 8006afc:	4b13      	ldr	r3, [pc, #76]	; (8006b4c <xTaskIncrementTick+0x110>)
 8006afe:	4288      	cmp	r0, r1
 8006b00:	bf88      	it	hi
 8006b02:	f8ca 0000 	strhi.w	r0, [sl]
 8006b06:	4641      	mov	r1, r8
 8006b08:	fb02 3000 	mla	r0, r2, r0, r3
 8006b0c:	f7ff f856 	bl	8005bbc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b10:	6838      	ldr	r0, [r7, #0]
 8006b12:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8006b14:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8006b16:	4291      	cmp	r1, r2
 8006b18:	bf28      	it	cs
 8006b1a:	f04f 0b01 	movcs.w	fp, #1
 8006b1e:	e7cd      	b.n	8006abc <xTaskIncrementTick+0x80>
		++uxPendedTicks;
 8006b20:	4a0c      	ldr	r2, [pc, #48]	; (8006b54 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 8006b22:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 8006b26:	6813      	ldr	r3, [r2, #0]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	6013      	str	r3, [r2, #0]
 8006b2c:	e7ba      	b.n	8006aa4 <xTaskIncrementTick+0x68>
 8006b2e:	bf00      	nop
 8006b30:	20000ff4 	.word	0x20000ff4
 8006b34:	20001070 	.word	0x20001070
 8006b38:	20000b80 	.word	0x20000b80
 8006b3c:	20000b84 	.word	0x20000b84
 8006b40:	2000102c 	.word	0x2000102c
 8006b44:	20001028 	.word	0x20001028
 8006b48:	20000b7c 	.word	0x20000b7c
 8006b4c:	20000b88 	.word	0x20000b88
 8006b50:	20001074 	.word	0x20001074
 8006b54:	20000ff0 	.word	0x20000ff0
 8006b58:	20000ffc 	.word	0x20000ffc

08006b5c <xTaskResumeAll>:
{
 8006b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8006b60:	4c2f      	ldr	r4, [pc, #188]	; (8006c20 <xTaskResumeAll+0xc4>)
 8006b62:	6823      	ldr	r3, [r4, #0]
 8006b64:	b943      	cbnz	r3, 8006b78 <xTaskResumeAll+0x1c>
 8006b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6a:	f383 8811 	msr	BASEPRI, r3
 8006b6e:	f3bf 8f6f 	isb	sy
 8006b72:	f3bf 8f4f 	dsb	sy
 8006b76:	e7fe      	b.n	8006b76 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8006b78:	f000 fca4 	bl	80074c4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8006b7c:	6823      	ldr	r3, [r4, #0]
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b82:	6824      	ldr	r4, [r4, #0]
 8006b84:	b12c      	cbz	r4, 8006b92 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8006b86:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006b88:	f000 fcbe 	bl	8007508 <vPortExitCritical>
}
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b92:	4b24      	ldr	r3, [pc, #144]	; (8006c24 <xTaskResumeAll+0xc8>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d0f5      	beq.n	8006b86 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b9a:	4d23      	ldr	r5, [pc, #140]	; (8006c28 <xTaskResumeAll+0xcc>)
					prvAddTaskToReadyList( pxTCB );
 8006b9c:	4e23      	ldr	r6, [pc, #140]	; (8006c2c <xTaskResumeAll+0xd0>)
 8006b9e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8006c40 <xTaskResumeAll+0xe4>
 8006ba2:	e01d      	b.n	8006be0 <xTaskResumeAll+0x84>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006ba4:	68eb      	ldr	r3, [r5, #12]
 8006ba6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ba8:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006baa:	f104 0018 	add.w	r0, r4, #24
 8006bae:	f7ff f828 	bl	8005c02 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bb2:	4638      	mov	r0, r7
 8006bb4:	f7ff f825 	bl	8005c02 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006bb8:	2014      	movs	r0, #20
 8006bba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006bbc:	6832      	ldr	r2, [r6, #0]
 8006bbe:	fb00 8003 	mla	r0, r0, r3, r8
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	4639      	mov	r1, r7
 8006bc6:	bf88      	it	hi
 8006bc8:	6033      	strhi	r3, [r6, #0]
 8006bca:	f7fe fff7 	bl	8005bbc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bce:	4b18      	ldr	r3, [pc, #96]	; (8006c30 <xTaskResumeAll+0xd4>)
 8006bd0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d302      	bcc.n	8006be0 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 8006bda:	2201      	movs	r2, #1
 8006bdc:	4b15      	ldr	r3, [pc, #84]	; (8006c34 <xTaskResumeAll+0xd8>)
 8006bde:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006be0:	682b      	ldr	r3, [r5, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d1de      	bne.n	8006ba4 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8006be6:	b10c      	cbz	r4, 8006bec <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 8006be8:	f7ff fde2 	bl	80067b0 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006bec:	4d12      	ldr	r5, [pc, #72]	; (8006c38 <xTaskResumeAll+0xdc>)
 8006bee:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006bf0:	b144      	cbz	r4, 8006c04 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 8006bf2:	2701      	movs	r7, #1
 8006bf4:	4e0f      	ldr	r6, [pc, #60]	; (8006c34 <xTaskResumeAll+0xd8>)
							if( xTaskIncrementTick() != pdFALSE )
 8006bf6:	f7ff ff21 	bl	8006a3c <xTaskIncrementTick>
 8006bfa:	b100      	cbz	r0, 8006bfe <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 8006bfc:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006bfe:	3c01      	subs	r4, #1
 8006c00:	d1f9      	bne.n	8006bf6 <xTaskResumeAll+0x9a>
						uxPendedTicks = 0;
 8006c02:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8006c04:	4b0b      	ldr	r3, [pc, #44]	; (8006c34 <xTaskResumeAll+0xd8>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d0bc      	beq.n	8006b86 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8006c0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c10:	4b0a      	ldr	r3, [pc, #40]	; (8006c3c <xTaskResumeAll+0xe0>)
 8006c12:	601a      	str	r2, [r3, #0]
 8006c14:	f3bf 8f4f 	dsb	sy
 8006c18:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8006c1c:	2401      	movs	r4, #1
 8006c1e:	e7b3      	b.n	8006b88 <xTaskResumeAll+0x2c>
 8006c20:	20000ff4 	.word	0x20000ff4
 8006c24:	20000fe8 	.word	0x20000fe8
 8006c28:	20001030 	.word	0x20001030
 8006c2c:	20000ffc 	.word	0x20000ffc
 8006c30:	20000b7c 	.word	0x20000b7c
 8006c34:	20001074 	.word	0x20001074
 8006c38:	20000ff0 	.word	0x20000ff0
 8006c3c:	e000ed04 	.word	0xe000ed04
 8006c40:	20000b88 	.word	0x20000b88

08006c44 <vTaskDelay>:
	{
 8006c44:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006c46:	b940      	cbnz	r0, 8006c5a <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8006c48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c4c:	4b0d      	ldr	r3, [pc, #52]	; (8006c84 <vTaskDelay+0x40>)
 8006c4e:	601a      	str	r2, [r3, #0]
 8006c50:	f3bf 8f4f 	dsb	sy
 8006c54:	f3bf 8f6f 	isb	sy
	}
 8006c58:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8006c5a:	4b0b      	ldr	r3, [pc, #44]	; (8006c88 <vTaskDelay+0x44>)
 8006c5c:	6819      	ldr	r1, [r3, #0]
 8006c5e:	b141      	cbz	r1, 8006c72 <vTaskDelay+0x2e>
 8006c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c64:	f383 8811 	msr	BASEPRI, r3
 8006c68:	f3bf 8f6f 	isb	sy
 8006c6c:	f3bf 8f4f 	dsb	sy
 8006c70:	e7fe      	b.n	8006c70 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006c72:	f7ff fed5 	bl	8006a20 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006c76:	f7ff fdf1 	bl	800685c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8006c7a:	f7ff ff6f 	bl	8006b5c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8006c7e:	2800      	cmp	r0, #0
 8006c80:	d0e2      	beq.n	8006c48 <vTaskDelay+0x4>
 8006c82:	e7e9      	b.n	8006c58 <vTaskDelay+0x14>
 8006c84:	e000ed04 	.word	0xe000ed04
 8006c88:	20000ff4 	.word	0x20000ff4

08006c8c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c8c:	4b18      	ldr	r3, [pc, #96]	; (8006cf0 <vTaskSwitchContext+0x64>)
{
 8006c8e:	b5f0      	push	{r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	4b18      	ldr	r3, [pc, #96]	; (8006cf4 <vTaskSwitchContext+0x68>)
 8006c94:	b112      	cbz	r2, 8006c9c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8006c96:	2201      	movs	r2, #1
 8006c98:	601a      	str	r2, [r3, #0]
}
 8006c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		xYieldPending = pdFALSE;
 8006c9c:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006c9e:	4a16      	ldr	r2, [pc, #88]	; (8006cf8 <vTaskSwitchContext+0x6c>)
 8006ca0:	2714      	movs	r7, #20
 8006ca2:	4616      	mov	r6, r2
 8006ca4:	4d15      	ldr	r5, [pc, #84]	; (8006cfc <vTaskSwitchContext+0x70>)
 8006ca6:	682b      	ldr	r3, [r5, #0]
 8006ca8:	fb07 f103 	mul.w	r1, r7, r3
 8006cac:	5854      	ldr	r4, [r2, r1]
 8006cae:	1850      	adds	r0, r2, r1
 8006cb0:	b194      	cbz	r4, 8006cd8 <vTaskSwitchContext+0x4c>
 8006cb2:	6844      	ldr	r4, [r0, #4]
 8006cb4:	3108      	adds	r1, #8
 8006cb6:	6864      	ldr	r4, [r4, #4]
 8006cb8:	440a      	add	r2, r1
 8006cba:	4294      	cmp	r4, r2
 8006cbc:	bf08      	it	eq
 8006cbe:	6862      	ldreq	r2, [r4, #4]
 8006cc0:	6044      	str	r4, [r0, #4]
 8006cc2:	bf08      	it	eq
 8006cc4:	6042      	streq	r2, [r0, #4]
 8006cc6:	2214      	movs	r2, #20
 8006cc8:	fb02 6203 	mla	r2, r2, r3, r6
 8006ccc:	6852      	ldr	r2, [r2, #4]
 8006cce:	68d1      	ldr	r1, [r2, #12]
 8006cd0:	4a0b      	ldr	r2, [pc, #44]	; (8006d00 <vTaskSwitchContext+0x74>)
 8006cd2:	6011      	str	r1, [r2, #0]
 8006cd4:	602b      	str	r3, [r5, #0]
}
 8006cd6:	e7e0      	b.n	8006c9a <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006cd8:	b943      	cbnz	r3, 8006cec <vTaskSwitchContext+0x60>
 8006cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cde:	f383 8811 	msr	BASEPRI, r3
 8006ce2:	f3bf 8f6f 	isb	sy
 8006ce6:	f3bf 8f4f 	dsb	sy
 8006cea:	e7fe      	b.n	8006cea <vTaskSwitchContext+0x5e>
 8006cec:	3b01      	subs	r3, #1
 8006cee:	e7db      	b.n	8006ca8 <vTaskSwitchContext+0x1c>
 8006cf0:	20000ff4 	.word	0x20000ff4
 8006cf4:	20001074 	.word	0x20001074
 8006cf8:	20000b88 	.word	0x20000b88
 8006cfc:	20000ffc 	.word	0x20000ffc
 8006d00:	20000b7c 	.word	0x20000b7c

08006d04 <vTaskPlaceOnEventList>:
{
 8006d04:	b510      	push	{r4, lr}
 8006d06:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8006d08:	b940      	cbnz	r0, 8006d1c <vTaskPlaceOnEventList+0x18>
 8006d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0e:	f383 8811 	msr	BASEPRI, r3
 8006d12:	f3bf 8f6f 	isb	sy
 8006d16:	f3bf 8f4f 	dsb	sy
 8006d1a:	e7fe      	b.n	8006d1a <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d1c:	4b05      	ldr	r3, [pc, #20]	; (8006d34 <vTaskPlaceOnEventList+0x30>)
 8006d1e:	6819      	ldr	r1, [r3, #0]
 8006d20:	3118      	adds	r1, #24
 8006d22:	f7fe ff57 	bl	8005bd4 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d26:	4620      	mov	r0, r4
}
 8006d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d2c:	2101      	movs	r1, #1
 8006d2e:	f7ff bd95 	b.w	800685c <prvAddCurrentTaskToDelayedList>
 8006d32:	bf00      	nop
 8006d34:	20000b7c 	.word	0x20000b7c

08006d38 <vTaskPlaceOnEventListRestricted>:
	{
 8006d38:	b538      	push	{r3, r4, r5, lr}
 8006d3a:	460d      	mov	r5, r1
 8006d3c:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8006d3e:	b940      	cbnz	r0, 8006d52 <vTaskPlaceOnEventListRestricted+0x1a>
 8006d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d44:	f383 8811 	msr	BASEPRI, r3
 8006d48:	f3bf 8f6f 	isb	sy
 8006d4c:	f3bf 8f4f 	dsb	sy
 8006d50:	e7fe      	b.n	8006d50 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d52:	4b08      	ldr	r3, [pc, #32]	; (8006d74 <vTaskPlaceOnEventListRestricted+0x3c>)
 8006d54:	6819      	ldr	r1, [r3, #0]
 8006d56:	3118      	adds	r1, #24
 8006d58:	f7fe ff30 	bl	8005bbc <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8006d5c:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006d5e:	4621      	mov	r1, r4
 8006d60:	bf08      	it	eq
 8006d62:	4628      	moveq	r0, r5
	}
 8006d64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006d68:	bf18      	it	ne
 8006d6a:	f04f 30ff 	movne.w	r0, #4294967295
 8006d6e:	f7ff bd75 	b.w	800685c <prvAddCurrentTaskToDelayedList>
 8006d72:	bf00      	nop
 8006d74:	20000b7c 	.word	0x20000b7c

08006d78 <xTaskRemoveFromEventList>:
{
 8006d78:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006d7a:	68c3      	ldr	r3, [r0, #12]
 8006d7c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8006d7e:	b944      	cbnz	r4, 8006d92 <xTaskRemoveFromEventList+0x1a>
 8006d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d84:	f383 8811 	msr	BASEPRI, r3
 8006d88:	f3bf 8f6f 	isb	sy
 8006d8c:	f3bf 8f4f 	dsb	sy
 8006d90:	e7fe      	b.n	8006d90 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006d92:	f104 0518 	add.w	r5, r4, #24
 8006d96:	4628      	mov	r0, r5
 8006d98:	f7fe ff33 	bl	8005c02 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d9c:	4b10      	ldr	r3, [pc, #64]	; (8006de0 <xTaskRemoveFromEventList+0x68>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	b9db      	cbnz	r3, 8006dda <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006da2:	1d25      	adds	r5, r4, #4
 8006da4:	4628      	mov	r0, r5
 8006da6:	f7fe ff2c 	bl	8005c02 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006daa:	4a0e      	ldr	r2, [pc, #56]	; (8006de4 <xTaskRemoveFromEventList+0x6c>)
 8006dac:	2014      	movs	r0, #20
 8006dae:	6811      	ldr	r1, [r2, #0]
 8006db0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006db2:	428b      	cmp	r3, r1
 8006db4:	4629      	mov	r1, r5
 8006db6:	bf88      	it	hi
 8006db8:	6013      	strhi	r3, [r2, #0]
 8006dba:	4a0b      	ldr	r2, [pc, #44]	; (8006de8 <xTaskRemoveFromEventList+0x70>)
 8006dbc:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006dc0:	f7fe fefc 	bl	8005bbc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006dc4:	4b09      	ldr	r3, [pc, #36]	; (8006dec <xTaskRemoveFromEventList+0x74>)
 8006dc6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dcc:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8006dce:	bf85      	ittet	hi
 8006dd0:	2001      	movhi	r0, #1
 8006dd2:	4b07      	ldrhi	r3, [pc, #28]	; (8006df0 <xTaskRemoveFromEventList+0x78>)
		xReturn = pdFALSE;
 8006dd4:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 8006dd6:	6018      	strhi	r0, [r3, #0]
}
 8006dd8:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006dda:	4629      	mov	r1, r5
 8006ddc:	4805      	ldr	r0, [pc, #20]	; (8006df4 <xTaskRemoveFromEventList+0x7c>)
 8006dde:	e7ef      	b.n	8006dc0 <xTaskRemoveFromEventList+0x48>
 8006de0:	20000ff4 	.word	0x20000ff4
 8006de4:	20000ffc 	.word	0x20000ffc
 8006de8:	20000b88 	.word	0x20000b88
 8006dec:	20000b7c 	.word	0x20000b7c
 8006df0:	20001074 	.word	0x20001074
 8006df4:	20001030 	.word	0x20001030

08006df8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006df8:	4b03      	ldr	r3, [pc, #12]	; (8006e08 <vTaskInternalSetTimeOutState+0x10>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006dfe:	4b03      	ldr	r3, [pc, #12]	; (8006e0c <vTaskInternalSetTimeOutState+0x14>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	6043      	str	r3, [r0, #4]
}
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop
 8006e08:	2000102c 	.word	0x2000102c
 8006e0c:	20001070 	.word	0x20001070

08006e10 <xTaskCheckForTimeOut>:
{
 8006e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e12:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8006e14:	4605      	mov	r5, r0
 8006e16:	b940      	cbnz	r0, 8006e2a <xTaskCheckForTimeOut+0x1a>
 8006e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1c:	f383 8811 	msr	BASEPRI, r3
 8006e20:	f3bf 8f6f 	isb	sy
 8006e24:	f3bf 8f4f 	dsb	sy
 8006e28:	e7fe      	b.n	8006e28 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8006e2a:	b941      	cbnz	r1, 8006e3e <xTaskCheckForTimeOut+0x2e>
 8006e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e30:	f383 8811 	msr	BASEPRI, r3
 8006e34:	f3bf 8f6f 	isb	sy
 8006e38:	f3bf 8f4f 	dsb	sy
 8006e3c:	e7fe      	b.n	8006e3c <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8006e3e:	f000 fb41 	bl	80074c4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8006e42:	4b0f      	ldr	r3, [pc, #60]	; (8006e80 <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006e44:	6868      	ldr	r0, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 8006e46:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8006e48:	6823      	ldr	r3, [r4, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006e4a:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 8006e4c:	1c5e      	adds	r6, r3, #1
 8006e4e:	d00d      	beq.n	8006e6c <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006e50:	4e0c      	ldr	r6, [pc, #48]	; (8006e84 <xTaskCheckForTimeOut+0x74>)
 8006e52:	682f      	ldr	r7, [r5, #0]
 8006e54:	6836      	ldr	r6, [r6, #0]
 8006e56:	42b7      	cmp	r7, r6
 8006e58:	d001      	beq.n	8006e5e <xTaskCheckForTimeOut+0x4e>
 8006e5a:	4288      	cmp	r0, r1
 8006e5c:	d90d      	bls.n	8006e7a <xTaskCheckForTimeOut+0x6a>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d909      	bls.n	8006e76 <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 8006e62:	1a9b      	subs	r3, r3, r2
 8006e64:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006e66:	4628      	mov	r0, r5
 8006e68:	f7ff ffc6 	bl	8006df8 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8006e6c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006e6e:	f000 fb4b 	bl	8007508 <vPortExitCritical>
}
 8006e72:	4620      	mov	r0, r4
 8006e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*pxTicksToWait = 0;
 8006e76:	2300      	movs	r3, #0
 8006e78:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8006e7a:	2401      	movs	r4, #1
 8006e7c:	e7f7      	b.n	8006e6e <xTaskCheckForTimeOut+0x5e>
 8006e7e:	bf00      	nop
 8006e80:	20001070 	.word	0x20001070
 8006e84:	2000102c 	.word	0x2000102c

08006e88 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8006e88:	2201      	movs	r2, #1
 8006e8a:	4b01      	ldr	r3, [pc, #4]	; (8006e90 <vTaskMissedYield+0x8>)
 8006e8c:	601a      	str	r2, [r3, #0]
}
 8006e8e:	4770      	bx	lr
 8006e90:	20001074 	.word	0x20001074

08006e94 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8006e94:	4b05      	ldr	r3, [pc, #20]	; (8006eac <xTaskGetSchedulerState+0x18>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	b133      	cbz	r3, 8006ea8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e9a:	4b05      	ldr	r3, [pc, #20]	; (8006eb0 <xTaskGetSchedulerState+0x1c>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8006ea0:	bf0c      	ite	eq
 8006ea2:	2002      	moveq	r0, #2
 8006ea4:	2000      	movne	r0, #0
 8006ea6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006ea8:	2001      	movs	r0, #1
	}
 8006eaa:	4770      	bx	lr
 8006eac:	20001044 	.word	0x20001044
 8006eb0:	20000ff4 	.word	0x20000ff4

08006eb4 <xTaskPriorityInherit>:
	{
 8006eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8006eb6:	4604      	mov	r4, r0
 8006eb8:	2800      	cmp	r0, #0
 8006eba:	d02b      	beq.n	8006f14 <xTaskPriorityInherit+0x60>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006ebc:	4a1b      	ldr	r2, [pc, #108]	; (8006f2c <xTaskPriorityInherit+0x78>)
 8006ebe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006ec0:	6811      	ldr	r1, [r2, #0]
 8006ec2:	4616      	mov	r6, r2
 8006ec4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8006ec6:	428b      	cmp	r3, r1
 8006ec8:	d227      	bcs.n	8006f1a <xTaskPriorityInherit+0x66>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006eca:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006ecc:	4d18      	ldr	r5, [pc, #96]	; (8006f30 <xTaskPriorityInherit+0x7c>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006ece:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ed0:	bfa1      	itttt	ge
 8006ed2:	6832      	ldrge	r2, [r6, #0]
 8006ed4:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8006ed6:	f1c2 0238 	rsbge	r2, r2, #56	; 0x38
 8006eda:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006edc:	2214      	movs	r2, #20
 8006ede:	fb02 5303 	mla	r3, r2, r3, r5
 8006ee2:	6942      	ldr	r2, [r0, #20]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d111      	bne.n	8006f0c <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ee8:	1d07      	adds	r7, r0, #4
 8006eea:	4638      	mov	r0, r7
 8006eec:	f7fe fe89 	bl	8005c02 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006ef0:	6833      	ldr	r3, [r6, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006ef2:	4a10      	ldr	r2, [pc, #64]	; (8006f34 <xTaskPriorityInherit+0x80>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006ef6:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006ef8:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006efa:	428b      	cmp	r3, r1
 8006efc:	d80b      	bhi.n	8006f16 <xTaskPriorityInherit+0x62>
 8006efe:	2014      	movs	r0, #20
 8006f00:	4639      	mov	r1, r7
 8006f02:	fb00 5003 	mla	r0, r0, r3, r5
 8006f06:	f7fe fe59 	bl	8005bbc <vListInsertEnd>
 8006f0a:	e002      	b.n	8006f12 <xTaskPriorityInherit+0x5e>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006f0c:	6833      	ldr	r3, [r6, #0]
 8006f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f10:	62c3      	str	r3, [r0, #44]	; 0x2c
				xReturn = pdTRUE;
 8006f12:	2001      	movs	r0, #1
	}
 8006f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006f16:	6013      	str	r3, [r2, #0]
 8006f18:	e7f1      	b.n	8006efe <xTaskPriorityInherit+0x4a>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006f1a:	6813      	ldr	r3, [r2, #0]
 8006f1c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8006f1e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8006f20:	42a0      	cmp	r0, r4
 8006f22:	bf2c      	ite	cs
 8006f24:	2000      	movcs	r0, #0
 8006f26:	2001      	movcc	r0, #1
 8006f28:	e7f4      	b.n	8006f14 <xTaskPriorityInherit+0x60>
 8006f2a:	bf00      	nop
 8006f2c:	20000b7c 	.word	0x20000b7c
 8006f30:	20000b88 	.word	0x20000b88
 8006f34:	20000ffc 	.word	0x20000ffc

08006f38 <xTaskPriorityDisinherit>:
	{
 8006f38:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8006f3a:	b908      	cbnz	r0, 8006f40 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 8006f3c:	2000      	movs	r0, #0
	}
 8006f3e:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8006f40:	4b1b      	ldr	r3, [pc, #108]	; (8006fb0 <xTaskPriorityDisinherit+0x78>)
 8006f42:	681c      	ldr	r4, [r3, #0]
 8006f44:	4284      	cmp	r4, r0
 8006f46:	d008      	beq.n	8006f5a <xTaskPriorityDisinherit+0x22>
 8006f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4c:	f383 8811 	msr	BASEPRI, r3
 8006f50:	f3bf 8f6f 	isb	sy
 8006f54:	f3bf 8f4f 	dsb	sy
 8006f58:	e7fe      	b.n	8006f58 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8006f5a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006f5c:	b943      	cbnz	r3, 8006f70 <xTaskPriorityDisinherit+0x38>
 8006f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	e7fe      	b.n	8006f6e <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006f70:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006f72:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 8006f74:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006f76:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8006f78:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006f7a:	d0df      	beq.n	8006f3c <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1dd      	bne.n	8006f3c <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f80:	1d25      	adds	r5, r4, #4
 8006f82:	4628      	mov	r0, r5
 8006f84:	f7fe fe3d 	bl	8005c02 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f88:	2014      	movs	r0, #20
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006f8a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f8c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006f90:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8006f92:	4a08      	ldr	r2, [pc, #32]	; (8006fb4 <xTaskPriorityDisinherit+0x7c>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006f94:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8006f96:	6811      	ldr	r1, [r2, #0]
 8006f98:	428b      	cmp	r3, r1
 8006f9a:	bf88      	it	hi
 8006f9c:	6013      	strhi	r3, [r2, #0]
 8006f9e:	4a06      	ldr	r2, [pc, #24]	; (8006fb8 <xTaskPriorityDisinherit+0x80>)
 8006fa0:	4629      	mov	r1, r5
 8006fa2:	fb00 2003 	mla	r0, r0, r3, r2
 8006fa6:	f7fe fe09 	bl	8005bbc <vListInsertEnd>
					xReturn = pdTRUE;
 8006faa:	2001      	movs	r0, #1
		return xReturn;
 8006fac:	e7c7      	b.n	8006f3e <xTaskPriorityDisinherit+0x6>
 8006fae:	bf00      	nop
 8006fb0:	20000b7c 	.word	0x20000b7c
 8006fb4:	20000ffc 	.word	0x20000ffc
 8006fb8:	20000b88 	.word	0x20000b88

08006fbc <vTaskPriorityDisinheritAfterTimeout>:
	{
 8006fbc:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8006fbe:	4604      	mov	r4, r0
 8006fc0:	2800      	cmp	r0, #0
 8006fc2:	d041      	beq.n	8007048 <vTaskPriorityDisinheritAfterTimeout+0x8c>
			configASSERT( pxTCB->uxMutexesHeld );
 8006fc4:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8006fc6:	b942      	cbnz	r2, 8006fda <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8006fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fcc:	f383 8811 	msr	BASEPRI, r3
 8006fd0:	f3bf 8f6f 	isb	sy
 8006fd4:	f3bf 8f4f 	dsb	sy
 8006fd8:	e7fe      	b.n	8006fd8 <vTaskPriorityDisinheritAfterTimeout+0x1c>
 8006fda:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006fdc:	4299      	cmp	r1, r3
 8006fde:	bf38      	it	cc
 8006fe0:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006fe2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006fe4:	428b      	cmp	r3, r1
 8006fe6:	d02f      	beq.n	8007048 <vTaskPriorityDisinheritAfterTimeout+0x8c>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006fe8:	2a01      	cmp	r2, #1
 8006fea:	d12d      	bne.n	8007048 <vTaskPriorityDisinheritAfterTimeout+0x8c>
					configASSERT( pxTCB != pxCurrentTCB );
 8006fec:	4a17      	ldr	r2, [pc, #92]	; (800704c <vTaskPriorityDisinheritAfterTimeout+0x90>)
 8006fee:	6812      	ldr	r2, [r2, #0]
 8006ff0:	4282      	cmp	r2, r0
 8006ff2:	d108      	bne.n	8007006 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8006ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff8:	f383 8811 	msr	BASEPRI, r3
 8006ffc:	f3bf 8f6f 	isb	sy
 8007000:	f3bf 8f4f 	dsb	sy
 8007004:	e7fe      	b.n	8007004 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007006:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007008:	4d11      	ldr	r5, [pc, #68]	; (8007050 <vTaskPriorityDisinheritAfterTimeout+0x94>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800700a:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800700c:	f04f 0214 	mov.w	r2, #20
 8007010:	fb02 5303 	mla	r3, r2, r3, r5
 8007014:	6942      	ldr	r2, [r0, #20]
					pxTCB->uxPriority = uxPriorityToUse;
 8007016:	62c1      	str	r1, [r0, #44]	; 0x2c
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007018:	bfa4      	itt	ge
 800701a:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
 800701e:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007020:	429a      	cmp	r2, r3
 8007022:	d111      	bne.n	8007048 <vTaskPriorityDisinheritAfterTimeout+0x8c>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007024:	1d06      	adds	r6, r0, #4
 8007026:	4630      	mov	r0, r6
 8007028:	f7fe fdeb 	bl	8005c02 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800702c:	2014      	movs	r0, #20
 800702e:	4a09      	ldr	r2, [pc, #36]	; (8007054 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8007030:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007032:	6811      	ldr	r1, [r2, #0]
 8007034:	fb00 5003 	mla	r0, r0, r3, r5
 8007038:	428b      	cmp	r3, r1
 800703a:	4631      	mov	r1, r6
	}
 800703c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 8007040:	bf88      	it	hi
 8007042:	6013      	strhi	r3, [r2, #0]
 8007044:	f7fe bdba 	b.w	8005bbc <vListInsertEnd>
	}
 8007048:	bd70      	pop	{r4, r5, r6, pc}
 800704a:	bf00      	nop
 800704c:	20000b7c 	.word	0x20000b7c
 8007050:	20000b88 	.word	0x20000b88
 8007054:	20000ffc 	.word	0x20000ffc

08007058 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8007058:	4b04      	ldr	r3, [pc, #16]	; (800706c <pvTaskIncrementMutexHeldCount+0x14>)
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	b11a      	cbz	r2, 8007066 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800705e:	6819      	ldr	r1, [r3, #0]
 8007060:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8007062:	3201      	adds	r2, #1
 8007064:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 8007066:	6818      	ldr	r0, [r3, #0]
	}
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	20000b7c 	.word	0x20000b7c

08007070 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007070:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8007072:	4c11      	ldr	r4, [pc, #68]	; (80070b8 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8007074:	f000 fa26 	bl	80074c4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8007078:	6825      	ldr	r5, [r4, #0]
 800707a:	b9bd      	cbnz	r5, 80070ac <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800707c:	4f0f      	ldr	r7, [pc, #60]	; (80070bc <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800707e:	4e10      	ldr	r6, [pc, #64]	; (80070c0 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8007080:	4638      	mov	r0, r7
 8007082:	f7fe fd8d 	bl	8005ba0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007086:	4630      	mov	r0, r6
 8007088:	f7fe fd8a 	bl	8005ba0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800708c:	4b0d      	ldr	r3, [pc, #52]	; (80070c4 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800708e:	4a0e      	ldr	r2, [pc, #56]	; (80070c8 <prvCheckForValidListAndQueue+0x58>)
			pxCurrentTimerList = &xActiveTimerList1;
 8007090:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007092:	4b0e      	ldr	r3, [pc, #56]	; (80070cc <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007094:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 8007096:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007098:	200a      	movs	r0, #10
 800709a:	9500      	str	r5, [sp, #0]
 800709c:	4b0c      	ldr	r3, [pc, #48]	; (80070d0 <prvCheckForValidListAndQueue+0x60>)
 800709e:	f7fe fe8b 	bl	8005db8 <xQueueGenericCreateStatic>
 80070a2:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80070a4:	b110      	cbz	r0, 80070ac <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80070a6:	490b      	ldr	r1, [pc, #44]	; (80070d4 <prvCheckForValidListAndQueue+0x64>)
 80070a8:	f7ff fa54 	bl	8006554 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 80070ac:	b003      	add	sp, #12
 80070ae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 80070b2:	f000 ba29 	b.w	8007508 <vPortExitCritical>
 80070b6:	bf00      	nop
 80070b8:	2000119c 	.word	0x2000119c
 80070bc:	20001120 	.word	0x20001120
 80070c0:	20001134 	.word	0x20001134
 80070c4:	20001078 	.word	0x20001078
 80070c8:	20001080 	.word	0x20001080
 80070cc:	2000107c 	.word	0x2000107c
 80070d0:	2000114c 	.word	0x2000114c
 80070d4:	0800b4b7 	.word	0x0800b4b7

080070d8 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 80070d8:	4291      	cmp	r1, r2
{
 80070da:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80070dc:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80070de:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 80070e0:	d80a      	bhi.n	80070f8 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070e2:	1ad2      	subs	r2, r2, r3
 80070e4:	6983      	ldr	r3, [r0, #24]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d20d      	bcs.n	8007106 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80070ea:	4b08      	ldr	r3, [pc, #32]	; (800710c <prvInsertTimerInActiveList+0x34>)
 80070ec:	1d01      	adds	r1, r0, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070ee:	6818      	ldr	r0, [r3, #0]
 80070f0:	f7fe fd70 	bl	8005bd4 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80070f4:	2000      	movs	r0, #0
}
 80070f6:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d201      	bcs.n	8007100 <prvInsertTimerInActiveList+0x28>
 80070fc:	4299      	cmp	r1, r3
 80070fe:	d202      	bcs.n	8007106 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007100:	1d01      	adds	r1, r0, #4
 8007102:	4b03      	ldr	r3, [pc, #12]	; (8007110 <prvInsertTimerInActiveList+0x38>)
 8007104:	e7f3      	b.n	80070ee <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8007106:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8007108:	e7f5      	b.n	80070f6 <prvInsertTimerInActiveList+0x1e>
 800710a:	bf00      	nop
 800710c:	2000107c 	.word	0x2000107c
 8007110:	20001078 	.word	0x20001078

08007114 <xTimerCreateTimerTask>:
{
 8007114:	b510      	push	{r4, lr}
 8007116:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8007118:	f7ff ffaa 	bl	8007070 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800711c:	4b12      	ldr	r3, [pc, #72]	; (8007168 <xTimerCreateTimerTask+0x54>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	b1b3      	cbz	r3, 8007150 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007122:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007124:	aa07      	add	r2, sp, #28
 8007126:	a906      	add	r1, sp, #24
 8007128:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800712a:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800712e:	f7fe fd2b 	bl	8005b88 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007132:	9b05      	ldr	r3, [sp, #20]
 8007134:	9a07      	ldr	r2, [sp, #28]
 8007136:	9302      	str	r3, [sp, #8]
 8007138:	9b06      	ldr	r3, [sp, #24]
 800713a:	490c      	ldr	r1, [pc, #48]	; (800716c <xTimerCreateTimerTask+0x58>)
 800713c:	9301      	str	r3, [sp, #4]
 800713e:	2302      	movs	r3, #2
 8007140:	480b      	ldr	r0, [pc, #44]	; (8007170 <xTimerCreateTimerTask+0x5c>)
 8007142:	9300      	str	r3, [sp, #0]
 8007144:	4623      	mov	r3, r4
 8007146:	f7ff fbc3 	bl	80068d0 <xTaskCreateStatic>
 800714a:	4b0a      	ldr	r3, [pc, #40]	; (8007174 <xTimerCreateTimerTask+0x60>)
 800714c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800714e:	b940      	cbnz	r0, 8007162 <xTimerCreateTimerTask+0x4e>
 8007150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007154:	f383 8811 	msr	BASEPRI, r3
 8007158:	f3bf 8f6f 	isb	sy
 800715c:	f3bf 8f4f 	dsb	sy
 8007160:	e7fe      	b.n	8007160 <xTimerCreateTimerTask+0x4c>
}
 8007162:	2001      	movs	r0, #1
 8007164:	b008      	add	sp, #32
 8007166:	bd10      	pop	{r4, pc}
 8007168:	2000119c 	.word	0x2000119c
 800716c:	0800b4bc 	.word	0x0800b4bc
 8007170:	0800724d 	.word	0x0800724d
 8007174:	200011a0 	.word	0x200011a0

08007178 <xTimerGenericCommand>:
{
 8007178:	b530      	push	{r4, r5, lr}
 800717a:	4615      	mov	r5, r2
 800717c:	b085      	sub	sp, #20
 800717e:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8007180:	4603      	mov	r3, r0
 8007182:	b940      	cbnz	r0, 8007196 <xTimerGenericCommand+0x1e>
 8007184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007188:	f383 8811 	msr	BASEPRI, r3
 800718c:	f3bf 8f6f 	isb	sy
 8007190:	f3bf 8f4f 	dsb	sy
 8007194:	e7fe      	b.n	8007194 <xTimerGenericCommand+0x1c>
	if( xTimerQueue != NULL )
 8007196:	4c0d      	ldr	r4, [pc, #52]	; (80071cc <xTimerGenericCommand+0x54>)
 8007198:	6820      	ldr	r0, [r4, #0]
 800719a:	b178      	cbz	r0, 80071bc <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800719c:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800719e:	e9cd 1500 	strd	r1, r5, [sp]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80071a2:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80071a4:	dc0c      	bgt.n	80071c0 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80071a6:	f7ff fe75 	bl	8006e94 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80071aa:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80071ac:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80071ae:	bf0c      	ite	eq
 80071b0:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80071b2:	461a      	movne	r2, r3
 80071b4:	4669      	mov	r1, sp
 80071b6:	6820      	ldr	r0, [r4, #0]
 80071b8:	f7fe feb2 	bl	8005f20 <xQueueGenericSend>
}
 80071bc:	b005      	add	sp, #20
 80071be:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80071c0:	2300      	movs	r3, #0
 80071c2:	4669      	mov	r1, sp
 80071c4:	f7fe ff5e 	bl	8006084 <xQueueGenericSendFromISR>
 80071c8:	e7f8      	b.n	80071bc <xTimerGenericCommand+0x44>
 80071ca:	bf00      	nop
 80071cc:	2000119c 	.word	0x2000119c

080071d0 <prvSwitchTimerLists>:
{
 80071d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071d4:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80071d8:	4d1a      	ldr	r5, [pc, #104]	; (8007244 <prvSwitchTimerLists+0x74>)
 80071da:	682b      	ldr	r3, [r5, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	b932      	cbnz	r2, 80071ee <prvSwitchTimerLists+0x1e>
	pxCurrentTimerList = pxOverflowTimerList;
 80071e0:	4a19      	ldr	r2, [pc, #100]	; (8007248 <prvSwitchTimerLists+0x78>)
 80071e2:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80071e4:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 80071e6:	6029      	str	r1, [r5, #0]
}
 80071e8:	b002      	add	sp, #8
 80071ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071ee:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071f0:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071f2:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071f4:	1d27      	adds	r7, r4, #4
 80071f6:	4638      	mov	r0, r7
 80071f8:	f7fe fd03 	bl	8005c02 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071fe:	4620      	mov	r0, r4
 8007200:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007202:	69e3      	ldr	r3, [r4, #28]
 8007204:	2b01      	cmp	r3, #1
 8007206:	d1e8      	bne.n	80071da <prvSwitchTimerLists+0xa>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007208:	69a3      	ldr	r3, [r4, #24]
 800720a:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800720c:	429e      	cmp	r6, r3
 800720e:	d206      	bcs.n	800721e <prvSwitchTimerLists+0x4e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007210:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007212:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007214:	4639      	mov	r1, r7
 8007216:	6828      	ldr	r0, [r5, #0]
 8007218:	f7fe fcdc 	bl	8005bd4 <vListInsert>
 800721c:	e7dd      	b.n	80071da <prvSwitchTimerLists+0xa>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800721e:	2300      	movs	r3, #0
 8007220:	f8cd 8000 	str.w	r8, [sp]
 8007224:	4632      	mov	r2, r6
 8007226:	4619      	mov	r1, r3
 8007228:	4620      	mov	r0, r4
 800722a:	f7ff ffa5 	bl	8007178 <xTimerGenericCommand>
				configASSERT( xResult );
 800722e:	2800      	cmp	r0, #0
 8007230:	d1d3      	bne.n	80071da <prvSwitchTimerLists+0xa>
 8007232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007236:	f383 8811 	msr	BASEPRI, r3
 800723a:	f3bf 8f6f 	isb	sy
 800723e:	f3bf 8f4f 	dsb	sy
 8007242:	e7fe      	b.n	8007242 <prvSwitchTimerLists+0x72>
 8007244:	20001078 	.word	0x20001078
 8007248:	2000107c 	.word	0x2000107c

0800724c <prvTimerTask>:
{
 800724c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007250:	4d6d      	ldr	r5, [pc, #436]	; (8007408 <prvTimerTask+0x1bc>)
					portYIELD_WITHIN_API();
 8007252:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8007418 <prvTimerTask+0x1cc>
 8007256:	462f      	mov	r7, r5
{
 8007258:	b087      	sub	sp, #28
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800725a:	682b      	ldr	r3, [r5, #0]
 800725c:	f8d3 b000 	ldr.w	fp, [r3]
	if( *pxListWasEmpty == pdFALSE )
 8007260:	f1bb 0f00 	cmp.w	fp, #0
 8007264:	d04b      	beq.n	80072fe <prvTimerTask+0xb2>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	f8d3 a000 	ldr.w	sl, [r3]
	vTaskSuspendAll();
 800726c:	f7ff fbd8 	bl	8006a20 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8007270:	f7ff fbde 	bl	8006a30 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8007274:	4c65      	ldr	r4, [pc, #404]	; (800740c <prvTimerTask+0x1c0>)
	xTimeNow = xTaskGetTickCount();
 8007276:	4681      	mov	r9, r0
	if( xTimeNow < xLastTime )
 8007278:	6823      	ldr	r3, [r4, #0]
 800727a:	4626      	mov	r6, r4
 800727c:	4298      	cmp	r0, r3
 800727e:	d240      	bcs.n	8007302 <prvTimerTask+0xb6>
		prvSwitchTimerLists();
 8007280:	f7ff ffa6 	bl	80071d0 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8007284:	f8c4 9000 	str.w	r9, [r4]
			( void ) xTaskResumeAll();
 8007288:	f7ff fc68 	bl	8006b5c <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800728c:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8007414 <prvTimerTask+0x1c8>
 8007290:	2200      	movs	r2, #0
 8007292:	a902      	add	r1, sp, #8
 8007294:	f8d9 0000 	ldr.w	r0, [r9]
 8007298:	f7fe ffaa 	bl	80061f0 <xQueueReceive>
 800729c:	2800      	cmp	r0, #0
 800729e:	d0dc      	beq.n	800725a <prvTimerTask+0xe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80072a0:	9b02      	ldr	r3, [sp, #8]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	da03      	bge.n	80072ae <prvTimerTask+0x62>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80072a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072aa:	9b03      	ldr	r3, [sp, #12]
 80072ac:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80072ae:	9b02      	ldr	r3, [sp, #8]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	dbed      	blt.n	8007290 <prvTimerTask+0x44>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80072b4:	9c04      	ldr	r4, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80072b6:	6963      	ldr	r3, [r4, #20]
 80072b8:	b113      	cbz	r3, 80072c0 <prvTimerTask+0x74>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072ba:	1d20      	adds	r0, r4, #4
 80072bc:	f7fe fca1 	bl	8005c02 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 80072c0:	f7ff fbb6 	bl	8006a30 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80072c4:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 80072c6:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 80072c8:	4298      	cmp	r0, r3
 80072ca:	d201      	bcs.n	80072d0 <prvTimerTask+0x84>
		prvSwitchTimerLists();
 80072cc:	f7ff ff80 	bl	80071d0 <prvSwitchTimerLists>
 80072d0:	9a02      	ldr	r2, [sp, #8]
	xLastTime = xTimeNow;
 80072d2:	f8c6 b000 	str.w	fp, [r6]
 80072d6:	2a09      	cmp	r2, #9
 80072d8:	d8da      	bhi.n	8007290 <prvTimerTask+0x44>
 80072da:	2301      	movs	r3, #1
 80072dc:	4093      	lsls	r3, r2
 80072de:	f413 7a04 	ands.w	sl, r3, #528	; 0x210
 80072e2:	d17e      	bne.n	80073e2 <prvTimerTask+0x196>
 80072e4:	f013 0fc7 	tst.w	r3, #199	; 0xc7
 80072e8:	d154      	bne.n	8007394 <prvTimerTask+0x148>
 80072ea:	069b      	lsls	r3, r3, #26
 80072ec:	d5d0      	bpl.n	8007290 <prvTimerTask+0x44>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80072ee:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1cc      	bne.n	8007290 <prvTimerTask+0x44>
							vPortFree( pxTimer );
 80072f6:	4620      	mov	r0, r4
 80072f8:	f000 faa6 	bl	8007848 <vPortFree>
 80072fc:	e7c8      	b.n	8007290 <prvTimerTask+0x44>
		xNextExpireTime = ( TickType_t ) 0U;
 80072fe:	46da      	mov	sl, fp
 8007300:	e7b4      	b.n	800726c <prvTimerTask+0x20>
	xLastTime = xTimeNow;
 8007302:	6020      	str	r0, [r4, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007304:	f1bb 0f00 	cmp.w	fp, #0
 8007308:	d029      	beq.n	800735e <prvTimerTask+0x112>
 800730a:	4582      	cmp	sl, r0
 800730c:	d840      	bhi.n	8007390 <prvTimerTask+0x144>
				( void ) xTaskResumeAll();
 800730e:	f7ff fc25 	bl	8006b5c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007318:	1d20      	adds	r0, r4, #4
 800731a:	f7fe fc72 	bl	8005c02 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800731e:	69e3      	ldr	r3, [r4, #28]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d118      	bne.n	8007356 <prvTimerTask+0x10a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007324:	69a1      	ldr	r1, [r4, #24]
 8007326:	4653      	mov	r3, sl
 8007328:	464a      	mov	r2, r9
 800732a:	4451      	add	r1, sl
 800732c:	4620      	mov	r0, r4
 800732e:	f7ff fed3 	bl	80070d8 <prvInsertTimerInActiveList>
 8007332:	b180      	cbz	r0, 8007356 <prvTimerTask+0x10a>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007334:	2300      	movs	r3, #0
 8007336:	4652      	mov	r2, sl
 8007338:	9300      	str	r3, [sp, #0]
 800733a:	4619      	mov	r1, r3
 800733c:	4620      	mov	r0, r4
 800733e:	f7ff ff1b 	bl	8007178 <xTimerGenericCommand>
			configASSERT( xResult );
 8007342:	b940      	cbnz	r0, 8007356 <prvTimerTask+0x10a>
 8007344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007348:	f383 8811 	msr	BASEPRI, r3
 800734c:	f3bf 8f6f 	isb	sy
 8007350:	f3bf 8f4f 	dsb	sy
 8007354:	e7fe      	b.n	8007354 <prvTimerTask+0x108>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007356:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007358:	4620      	mov	r0, r4
 800735a:	4798      	blx	r3
 800735c:	e796      	b.n	800728c <prvTimerTask+0x40>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800735e:	4b2c      	ldr	r3, [pc, #176]	; (8007410 <prvTimerTask+0x1c4>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	fab2 f282 	clz	r2, r2
 8007368:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800736a:	4b2a      	ldr	r3, [pc, #168]	; (8007414 <prvTimerTask+0x1c8>)
 800736c:	ebaa 0109 	sub.w	r1, sl, r9
 8007370:	6818      	ldr	r0, [r3, #0]
 8007372:	f7ff f92c 	bl	80065ce <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007376:	f7ff fbf1 	bl	8006b5c <xTaskResumeAll>
 800737a:	2800      	cmp	r0, #0
 800737c:	d186      	bne.n	800728c <prvTimerTask+0x40>
					portYIELD_WITHIN_API();
 800737e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007382:	f8c8 3000 	str.w	r3, [r8]
 8007386:	f3bf 8f4f 	dsb	sy
 800738a:	f3bf 8f6f 	isb	sy
 800738e:	e77d      	b.n	800728c <prvTimerTask+0x40>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007390:	2200      	movs	r2, #0
 8007392:	e7ea      	b.n	800736a <prvTimerTask+0x11e>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007394:	69a1      	ldr	r1, [r4, #24]
 8007396:	9b03      	ldr	r3, [sp, #12]
 8007398:	465a      	mov	r2, fp
 800739a:	4419      	add	r1, r3
 800739c:	4620      	mov	r0, r4
 800739e:	f7ff fe9b 	bl	80070d8 <prvInsertTimerInActiveList>
 80073a2:	2800      	cmp	r0, #0
 80073a4:	f43f af74 	beq.w	8007290 <prvTimerTask+0x44>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80073a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073aa:	4620      	mov	r0, r4
 80073ac:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80073ae:	69e3      	ldr	r3, [r4, #28]
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	f47f af6d 	bne.w	8007290 <prvTimerTask+0x44>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80073b6:	69a2      	ldr	r2, [r4, #24]
 80073b8:	9903      	ldr	r1, [sp, #12]
 80073ba:	f8cd a000 	str.w	sl, [sp]
 80073be:	440a      	add	r2, r1
 80073c0:	4653      	mov	r3, sl
 80073c2:	4651      	mov	r1, sl
 80073c4:	4620      	mov	r0, r4
 80073c6:	f7ff fed7 	bl	8007178 <xTimerGenericCommand>
							configASSERT( xResult );
 80073ca:	2800      	cmp	r0, #0
 80073cc:	f47f af60 	bne.w	8007290 <prvTimerTask+0x44>
 80073d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d4:	f383 8811 	msr	BASEPRI, r3
 80073d8:	f3bf 8f6f 	isb	sy
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	e7fe      	b.n	80073e0 <prvTimerTask+0x194>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80073e2:	9903      	ldr	r1, [sp, #12]
 80073e4:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80073e6:	b941      	cbnz	r1, 80073fa <prvTimerTask+0x1ae>
 80073e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ec:	f383 8811 	msr	BASEPRI, r3
 80073f0:	f3bf 8f6f 	isb	sy
 80073f4:	f3bf 8f4f 	dsb	sy
 80073f8:	e7fe      	b.n	80073f8 <prvTimerTask+0x1ac>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80073fa:	465b      	mov	r3, fp
 80073fc:	465a      	mov	r2, fp
 80073fe:	4459      	add	r1, fp
 8007400:	4620      	mov	r0, r4
 8007402:	f7ff fe69 	bl	80070d8 <prvInsertTimerInActiveList>
 8007406:	e743      	b.n	8007290 <prvTimerTask+0x44>
 8007408:	20001078 	.word	0x20001078
 800740c:	20001148 	.word	0x20001148
 8007410:	2000107c 	.word	0x2000107c
 8007414:	2000119c 	.word	0x2000119c
 8007418:	e000ed04 	.word	0xe000ed04

0800741c <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 800741c:	2300      	movs	r3, #0
{
 800741e:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8007420:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007422:	4b0d      	ldr	r3, [pc, #52]	; (8007458 <prvTaskExitError+0x3c>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	3301      	adds	r3, #1
 8007428:	d008      	beq.n	800743c <prvTaskExitError+0x20>
 800742a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742e:	f383 8811 	msr	BASEPRI, r3
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	f3bf 8f4f 	dsb	sy
 800743a:	e7fe      	b.n	800743a <prvTaskExitError+0x1e>
 800743c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007440:	f383 8811 	msr	BASEPRI, r3
 8007444:	f3bf 8f6f 	isb	sy
 8007448:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800744c:	9b01      	ldr	r3, [sp, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d0fc      	beq.n	800744c <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007452:	b002      	add	sp, #8
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	20000144 	.word	0x20000144

0800745c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800745c:	4806      	ldr	r0, [pc, #24]	; (8007478 <prvPortStartFirstTask+0x1c>)
 800745e:	6800      	ldr	r0, [r0, #0]
 8007460:	6800      	ldr	r0, [r0, #0]
 8007462:	f380 8808 	msr	MSP, r0
 8007466:	b662      	cpsie	i
 8007468:	b661      	cpsie	f
 800746a:	f3bf 8f4f 	dsb	sy
 800746e:	f3bf 8f6f 	isb	sy
 8007472:	df00      	svc	0
 8007474:	bf00      	nop
 8007476:	0000      	.short	0x0000
 8007478:	e000ed08 	.word	0xe000ed08

0800747c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800747c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007480:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007484:	4b05      	ldr	r3, [pc, #20]	; (800749c <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007486:	f021 0101 	bic.w	r1, r1, #1
 800748a:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800748e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007492:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8007496:	3840      	subs	r0, #64	; 0x40
 8007498:	4770      	bx	lr
 800749a:	bf00      	nop
 800749c:	0800741d 	.word	0x0800741d

080074a0 <SVC_Handler>:
	__asm volatile (
 80074a0:	4b07      	ldr	r3, [pc, #28]	; (80074c0 <pxCurrentTCBConst2>)
 80074a2:	6819      	ldr	r1, [r3, #0]
 80074a4:	6808      	ldr	r0, [r1, #0]
 80074a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80074aa:	f380 8809 	msr	PSP, r0
 80074ae:	f3bf 8f6f 	isb	sy
 80074b2:	f04f 0000 	mov.w	r0, #0
 80074b6:	f380 8811 	msr	BASEPRI, r0
 80074ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80074be:	4770      	bx	lr

080074c0 <pxCurrentTCBConst2>:
 80074c0:	20000b7c 	.word	0x20000b7c

080074c4 <vPortEnterCritical>:
 80074c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c8:	f383 8811 	msr	BASEPRI, r3
 80074cc:	f3bf 8f6f 	isb	sy
 80074d0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80074d4:	4a0a      	ldr	r2, [pc, #40]	; (8007500 <vPortEnterCritical+0x3c>)
 80074d6:	6813      	ldr	r3, [r2, #0]
 80074d8:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80074da:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80074dc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80074de:	d10d      	bne.n	80074fc <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80074e0:	4b08      	ldr	r3, [pc, #32]	; (8007504 <vPortEnterCritical+0x40>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80074e8:	d008      	beq.n	80074fc <vPortEnterCritical+0x38>
 80074ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ee:	f383 8811 	msr	BASEPRI, r3
 80074f2:	f3bf 8f6f 	isb	sy
 80074f6:	f3bf 8f4f 	dsb	sy
 80074fa:	e7fe      	b.n	80074fa <vPortEnterCritical+0x36>
	}
}
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	20000144 	.word	0x20000144
 8007504:	e000ed04 	.word	0xe000ed04

08007508 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8007508:	4a08      	ldr	r2, [pc, #32]	; (800752c <vPortExitCritical+0x24>)
 800750a:	6813      	ldr	r3, [r2, #0]
 800750c:	b943      	cbnz	r3, 8007520 <vPortExitCritical+0x18>
 800750e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007512:	f383 8811 	msr	BASEPRI, r3
 8007516:	f3bf 8f6f 	isb	sy
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	e7fe      	b.n	800751e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8007520:	3b01      	subs	r3, #1
 8007522:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007524:	b90b      	cbnz	r3, 800752a <vPortExitCritical+0x22>
	__asm volatile
 8007526:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800752a:	4770      	bx	lr
 800752c:	20000144 	.word	0x20000144

08007530 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007530:	f3ef 8009 	mrs	r0, PSP
 8007534:	f3bf 8f6f 	isb	sy
 8007538:	4b0d      	ldr	r3, [pc, #52]	; (8007570 <pxCurrentTCBConst>)
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007540:	6010      	str	r0, [r2, #0]
 8007542:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007546:	f04f 0050 	mov.w	r0, #80	; 0x50
 800754a:	f380 8811 	msr	BASEPRI, r0
 800754e:	f7ff fb9d 	bl	8006c8c <vTaskSwitchContext>
 8007552:	f04f 0000 	mov.w	r0, #0
 8007556:	f380 8811 	msr	BASEPRI, r0
 800755a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800755e:	6819      	ldr	r1, [r3, #0]
 8007560:	6808      	ldr	r0, [r1, #0]
 8007562:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007566:	f380 8809 	msr	PSP, r0
 800756a:	f3bf 8f6f 	isb	sy
 800756e:	4770      	bx	lr

08007570 <pxCurrentTCBConst>:
 8007570:	20000b7c 	.word	0x20000b7c

08007574 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007574:	b508      	push	{r3, lr}
	__asm volatile
 8007576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757a:	f383 8811 	msr	BASEPRI, r3
 800757e:	f3bf 8f6f 	isb	sy
 8007582:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007586:	f7ff fa59 	bl	8006a3c <xTaskIncrementTick>
 800758a:	b118      	cbz	r0, 8007594 <xPortSysTickHandler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800758c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007590:	4b02      	ldr	r3, [pc, #8]	; (800759c <xPortSysTickHandler+0x28>)
 8007592:	601a      	str	r2, [r3, #0]
	__asm volatile
 8007594:	2300      	movs	r3, #0
 8007596:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800759a:	bd08      	pop	{r3, pc}
 800759c:	e000ed04 	.word	0xe000ed04

080075a0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80075a0:	2300      	movs	r3, #0
 80075a2:	4a08      	ldr	r2, [pc, #32]	; (80075c4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80075a4:	4908      	ldr	r1, [pc, #32]	; (80075c8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80075a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80075a8:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80075aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80075ae:	4b07      	ldr	r3, [pc, #28]	; (80075cc <vPortSetupTimerInterrupt+0x2c>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80075b6:	4906      	ldr	r1, [pc, #24]	; (80075d0 <vPortSetupTimerInterrupt+0x30>)
 80075b8:	3b01      	subs	r3, #1
 80075ba:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80075bc:	2307      	movs	r3, #7
 80075be:	6013      	str	r3, [r2, #0]
}
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	e000e010 	.word	0xe000e010
 80075c8:	e000e018 	.word	0xe000e018
 80075cc:	20000010 	.word	0x20000010
 80075d0:	e000e014 	.word	0xe000e014

080075d4 <xPortStartScheduler>:
{
 80075d4:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80075d6:	4b27      	ldr	r3, [pc, #156]	; (8007674 <xPortStartScheduler+0xa0>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80075d8:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80075da:	781a      	ldrb	r2, [r3, #0]
 80075dc:	b2d2      	uxtb	r2, r2
 80075de:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80075e0:	22ff      	movs	r2, #255	; 0xff
 80075e2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80075e4:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80075e6:	4a24      	ldr	r2, [pc, #144]	; (8007678 <xPortStartScheduler+0xa4>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80075ee:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80075f2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80075f6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80075f8:	2207      	movs	r2, #7
 80075fa:	4b20      	ldr	r3, [pc, #128]	; (800767c <xPortStartScheduler+0xa8>)
 80075fc:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80075fe:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8007602:	1e54      	subs	r4, r2, #1
 8007604:	0600      	lsls	r0, r0, #24
 8007606:	d40d      	bmi.n	8007624 <xPortStartScheduler+0x50>
 8007608:	b101      	cbz	r1, 800760c <xPortStartScheduler+0x38>
 800760a:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	2a03      	cmp	r2, #3
 8007610:	d011      	beq.n	8007636 <xPortStartScheduler+0x62>
	__asm volatile
 8007612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007616:	f383 8811 	msr	BASEPRI, r3
 800761a:	f3bf 8f6f 	isb	sy
 800761e:	f3bf 8f4f 	dsb	sy
 8007622:	e7fe      	b.n	8007622 <xPortStartScheduler+0x4e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007624:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8007628:	2101      	movs	r1, #1
 800762a:	0052      	lsls	r2, r2, #1
 800762c:	b2d2      	uxtb	r2, r2
 800762e:	f88d 2003 	strb.w	r2, [sp, #3]
 8007632:	4622      	mov	r2, r4
 8007634:	e7e3      	b.n	80075fe <xPortStartScheduler+0x2a>
	uxCriticalNesting = 0;
 8007636:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007638:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800763a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800763e:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007640:	9b01      	ldr	r3, [sp, #4]
 8007642:	4a0c      	ldr	r2, [pc, #48]	; (8007674 <xPortStartScheduler+0xa0>)
 8007644:	b2db      	uxtb	r3, r3
 8007646:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007648:	4b0d      	ldr	r3, [pc, #52]	; (8007680 <xPortStartScheduler+0xac>)
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8007650:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8007658:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800765a:	f7ff ffa1 	bl	80075a0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800765e:	4b09      	ldr	r3, [pc, #36]	; (8007684 <xPortStartScheduler+0xb0>)
 8007660:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8007662:	f7ff fefb 	bl	800745c <prvPortStartFirstTask>
	vTaskSwitchContext();
 8007666:	f7ff fb11 	bl	8006c8c <vTaskSwitchContext>
	prvTaskExitError();
 800766a:	f7ff fed7 	bl	800741c <prvTaskExitError>
}
 800766e:	4620      	mov	r0, r4
 8007670:	b002      	add	sp, #8
 8007672:	bd10      	pop	{r4, pc}
 8007674:	e000e400 	.word	0xe000e400
 8007678:	200011a4 	.word	0x200011a4
 800767c:	200011a8 	.word	0x200011a8
 8007680:	e000ed20 	.word	0xe000ed20
 8007684:	20000144 	.word	0x20000144

08007688 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007688:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800768c:	2b0f      	cmp	r3, #15
 800768e:	d90e      	bls.n	80076ae <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007690:	4a10      	ldr	r2, [pc, #64]	; (80076d4 <vPortValidateInterruptPriority+0x4c>)
 8007692:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007694:	4a10      	ldr	r2, [pc, #64]	; (80076d8 <vPortValidateInterruptPriority+0x50>)
 8007696:	7812      	ldrb	r2, [r2, #0]
 8007698:	429a      	cmp	r2, r3
 800769a:	d908      	bls.n	80076ae <vPortValidateInterruptPriority+0x26>
 800769c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a0:	f383 8811 	msr	BASEPRI, r3
 80076a4:	f3bf 8f6f 	isb	sy
 80076a8:	f3bf 8f4f 	dsb	sy
 80076ac:	e7fe      	b.n	80076ac <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80076ae:	4b0b      	ldr	r3, [pc, #44]	; (80076dc <vPortValidateInterruptPriority+0x54>)
 80076b0:	4a0b      	ldr	r2, [pc, #44]	; (80076e0 <vPortValidateInterruptPriority+0x58>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	6812      	ldr	r2, [r2, #0]
 80076b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d908      	bls.n	80076d0 <vPortValidateInterruptPriority+0x48>
 80076be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c2:	f383 8811 	msr	BASEPRI, r3
 80076c6:	f3bf 8f6f 	isb	sy
 80076ca:	f3bf 8f4f 	dsb	sy
 80076ce:	e7fe      	b.n	80076ce <vPortValidateInterruptPriority+0x46>
	}
 80076d0:	4770      	bx	lr
 80076d2:	bf00      	nop
 80076d4:	e000e3f0 	.word	0xe000e3f0
 80076d8:	200011a4 	.word	0x200011a4
 80076dc:	e000ed0c 	.word	0xe000ed0c
 80076e0:	200011a8 	.word	0x200011a8

080076e4 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80076e4:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80076e6:	4b0f      	ldr	r3, [pc, #60]	; (8007724 <prvInsertBlockIntoFreeList+0x40>)
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	4282      	cmp	r2, r0
 80076ec:	d318      	bcc.n	8007720 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80076ee:	685c      	ldr	r4, [r3, #4]
 80076f0:	1919      	adds	r1, r3, r4
 80076f2:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80076f4:	bf01      	itttt	eq
 80076f6:	6841      	ldreq	r1, [r0, #4]
 80076f8:	4618      	moveq	r0, r3
 80076fa:	1909      	addeq	r1, r1, r4
 80076fc:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80076fe:	6844      	ldr	r4, [r0, #4]
 8007700:	1901      	adds	r1, r0, r4
 8007702:	428a      	cmp	r2, r1
 8007704:	d107      	bne.n	8007716 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007706:	4908      	ldr	r1, [pc, #32]	; (8007728 <prvInsertBlockIntoFreeList+0x44>)
 8007708:	6809      	ldr	r1, [r1, #0]
 800770a:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800770c:	bf1f      	itttt	ne
 800770e:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007710:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007712:	1909      	addne	r1, r1, r4
 8007714:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007716:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007718:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800771a:	bf18      	it	ne
 800771c:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800771e:	bd10      	pop	{r4, pc}
 8007720:	4613      	mov	r3, r2
 8007722:	e7e1      	b.n	80076e8 <prvInsertBlockIntoFreeList+0x4>
 8007724:	200029c8 	.word	0x200029c8
 8007728:	200011ac 	.word	0x200011ac

0800772c <pvPortMalloc>:
{
 800772c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007730:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8007732:	f7ff f975 	bl	8006a20 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8007736:	493d      	ldr	r1, [pc, #244]	; (800782c <pvPortMalloc+0x100>)
 8007738:	4d3d      	ldr	r5, [pc, #244]	; (8007830 <pvPortMalloc+0x104>)
 800773a:	680b      	ldr	r3, [r1, #0]
 800773c:	b9fb      	cbnz	r3, 800777e <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 800773e:	4a3d      	ldr	r2, [pc, #244]	; (8007834 <pvPortMalloc+0x108>)
	xStart.xBlockSize = ( size_t ) 0;
 8007740:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007742:	0756      	lsls	r6, r2, #29
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007744:	bf0f      	iteee	eq
 8007746:	f641 030a 	movweq	r3, #6154	; 0x180a
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800774a:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800774c:	4b3a      	ldrne	r3, [pc, #232]	; (8007838 <pvPortMalloc+0x10c>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800774e:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007752:	bf18      	it	ne
 8007754:	1a9b      	subne	r3, r3, r2
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007756:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007758:	4e38      	ldr	r6, [pc, #224]	; (800783c <pvPortMalloc+0x110>)
	uxAddress -= xHeapStructSize;
 800775a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800775c:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8007760:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007762:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8007764:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007768:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800776a:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800776c:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007770:	4b33      	ldr	r3, [pc, #204]	; (8007840 <pvPortMalloc+0x114>)
 8007772:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007774:	4b33      	ldr	r3, [pc, #204]	; (8007844 <pvPortMalloc+0x118>)
 8007776:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007778:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800777c:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800777e:	682f      	ldr	r7, [r5, #0]
 8007780:	4227      	tst	r7, r4
 8007782:	d14d      	bne.n	8007820 <pvPortMalloc+0xf4>
			if( xWantedSize > 0 )
 8007784:	2c00      	cmp	r4, #0
 8007786:	d03e      	beq.n	8007806 <pvPortMalloc+0xda>
				xWantedSize += xHeapStructSize;
 8007788:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800778c:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800778e:	bf1c      	itt	ne
 8007790:	f023 0307 	bicne.w	r3, r3, #7
 8007794:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007796:	2b00      	cmp	r3, #0
 8007798:	d042      	beq.n	8007820 <pvPortMalloc+0xf4>
 800779a:	4a2a      	ldr	r2, [pc, #168]	; (8007844 <pvPortMalloc+0x118>)
 800779c:	6816      	ldr	r6, [r2, #0]
 800779e:	4690      	mov	r8, r2
 80077a0:	429e      	cmp	r6, r3
 80077a2:	d33d      	bcc.n	8007820 <pvPortMalloc+0xf4>
				pxBlock = xStart.pxNextFreeBlock;
 80077a4:	4a25      	ldr	r2, [pc, #148]	; (800783c <pvPortMalloc+0x110>)
 80077a6:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077a8:	6868      	ldr	r0, [r5, #4]
 80077aa:	4298      	cmp	r0, r3
 80077ac:	d201      	bcs.n	80077b2 <pvPortMalloc+0x86>
 80077ae:	682c      	ldr	r4, [r5, #0]
 80077b0:	b9a4      	cbnz	r4, 80077dc <pvPortMalloc+0xb0>
				if( pxBlock != pxEnd )
 80077b2:	6809      	ldr	r1, [r1, #0]
 80077b4:	42a9      	cmp	r1, r5
 80077b6:	d033      	beq.n	8007820 <pvPortMalloc+0xf4>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80077b8:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80077ba:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80077bc:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80077be:	1ac2      	subs	r2, r0, r3
 80077c0:	2a10      	cmp	r2, #16
 80077c2:	d912      	bls.n	80077ea <pvPortMalloc+0xbe>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80077c4:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077c6:	0741      	lsls	r1, r0, #29
 80077c8:	d00b      	beq.n	80077e2 <pvPortMalloc+0xb6>
 80077ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ce:	f383 8811 	msr	BASEPRI, r3
 80077d2:	f3bf 8f6f 	isb	sy
 80077d6:	f3bf 8f4f 	dsb	sy
 80077da:	e7fe      	b.n	80077da <pvPortMalloc+0xae>
 80077dc:	462a      	mov	r2, r5
 80077de:	4625      	mov	r5, r4
 80077e0:	e7e2      	b.n	80077a8 <pvPortMalloc+0x7c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80077e2:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80077e4:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80077e6:	f7ff ff7d 	bl	80076e4 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80077ea:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80077ec:	4914      	ldr	r1, [pc, #80]	; (8007840 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80077ee:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80077f0:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 80077f2:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80077f4:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80077f6:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80077fa:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80077fc:	bf38      	it	cc
 80077fe:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007800:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007802:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007804:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8007806:	f7ff f9a9 	bl	8006b5c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800780a:	0763      	lsls	r3, r4, #29
 800780c:	d00a      	beq.n	8007824 <pvPortMalloc+0xf8>
 800780e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007812:	f383 8811 	msr	BASEPRI, r3
 8007816:	f3bf 8f6f 	isb	sy
 800781a:	f3bf 8f4f 	dsb	sy
 800781e:	e7fe      	b.n	800781e <pvPortMalloc+0xf2>
void *pvReturn = NULL;
 8007820:	2400      	movs	r4, #0
 8007822:	e7f0      	b.n	8007806 <pvPortMalloc+0xda>
}
 8007824:	4620      	mov	r0, r4
 8007826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800782a:	bf00      	nop
 800782c:	200011ac 	.word	0x200011ac
 8007830:	200029bc 	.word	0x200029bc
 8007834:	200011b0 	.word	0x200011b0
 8007838:	200029ba 	.word	0x200029ba
 800783c:	200029c8 	.word	0x200029c8
 8007840:	200029c4 	.word	0x200029c4
 8007844:	200029c0 	.word	0x200029c0

08007848 <vPortFree>:
{
 8007848:	b510      	push	{r4, lr}
	if( pv != NULL )
 800784a:	4604      	mov	r4, r0
 800784c:	b370      	cbz	r0, 80078ac <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800784e:	4a18      	ldr	r2, [pc, #96]	; (80078b0 <vPortFree+0x68>)
 8007850:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8007854:	6812      	ldr	r2, [r2, #0]
 8007856:	4213      	tst	r3, r2
 8007858:	d108      	bne.n	800786c <vPortFree+0x24>
 800785a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800785e:	f383 8811 	msr	BASEPRI, r3
 8007862:	f3bf 8f6f 	isb	sy
 8007866:	f3bf 8f4f 	dsb	sy
 800786a:	e7fe      	b.n	800786a <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800786c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8007870:	b141      	cbz	r1, 8007884 <vPortFree+0x3c>
 8007872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007876:	f383 8811 	msr	BASEPRI, r3
 800787a:	f3bf 8f6f 	isb	sy
 800787e:	f3bf 8f4f 	dsb	sy
 8007882:	e7fe      	b.n	8007882 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007884:	ea23 0302 	bic.w	r3, r3, r2
 8007888:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800788c:	f7ff f8c8 	bl	8006a20 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007890:	4a08      	ldr	r2, [pc, #32]	; (80078b4 <vPortFree+0x6c>)
 8007892:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007896:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007898:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800789c:	440b      	add	r3, r1
 800789e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80078a0:	f7ff ff20 	bl	80076e4 <prvInsertBlockIntoFreeList>
}
 80078a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80078a8:	f7ff b958 	b.w	8006b5c <xTaskResumeAll>
}
 80078ac:	bd10      	pop	{r4, pc}
 80078ae:	bf00      	nop
 80078b0:	200029bc 	.word	0x200029bc
 80078b4:	200029c0 	.word	0x200029c0

080078b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80078b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80078ba:	2200      	movs	r2, #0
 80078bc:	490e      	ldr	r1, [pc, #56]	; (80078f8 <MX_USB_DEVICE_Init+0x40>)
 80078be:	480f      	ldr	r0, [pc, #60]	; (80078fc <MX_USB_DEVICE_Init+0x44>)
 80078c0:	f7fd fb45 	bl	8004f4e <USBD_Init>
 80078c4:	b108      	cbz	r0, 80078ca <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 80078c6:	f7fa f93b 	bl	8001b40 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80078ca:	490d      	ldr	r1, [pc, #52]	; (8007900 <MX_USB_DEVICE_Init+0x48>)
 80078cc:	480b      	ldr	r0, [pc, #44]	; (80078fc <MX_USB_DEVICE_Init+0x44>)
 80078ce:	f7fd fb53 	bl	8004f78 <USBD_RegisterClass>
 80078d2:	b108      	cbz	r0, 80078d8 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 80078d4:	f7fa f934 	bl	8001b40 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80078d8:	490a      	ldr	r1, [pc, #40]	; (8007904 <MX_USB_DEVICE_Init+0x4c>)
 80078da:	4808      	ldr	r0, [pc, #32]	; (80078fc <MX_USB_DEVICE_Init+0x44>)
 80078dc:	f7fd fb0f 	bl	8004efe <USBD_CDC_RegisterInterface>
 80078e0:	b108      	cbz	r0, 80078e6 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 80078e2:	f7fa f92d 	bl	8001b40 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80078e6:	4805      	ldr	r0, [pc, #20]	; (80078fc <MX_USB_DEVICE_Init+0x44>)
 80078e8:	f7fd fb4d 	bl	8004f86 <USBD_Start>
 80078ec:	b118      	cbz	r0, 80078f6 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80078ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80078f2:	f7fa b925 	b.w	8001b40 <Error_Handler>
}
 80078f6:	bd08      	pop	{r3, pc}
 80078f8:	20000158 	.word	0x20000158
 80078fc:	200032a8 	.word	0x200032a8
 8007900:	20000034 	.word	0x20000034
 8007904:	20000148 	.word	0x20000148

08007908 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8007908:	2000      	movs	r0, #0
 800790a:	4770      	bx	lr

0800790c <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800790c:	2000      	movs	r0, #0
 800790e:	4770      	bx	lr

08007910 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007910:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007912:	4c05      	ldr	r4, [pc, #20]	; (8007928 <CDC_Receive_FS+0x18>)
 8007914:	4601      	mov	r1, r0
 8007916:	4620      	mov	r0, r4
 8007918:	f7fd fb00 	bl	8004f1c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800791c:	4620      	mov	r0, r4
 800791e:	f7fd fb03 	bl	8004f28 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8007922:	2000      	movs	r0, #0
 8007924:	bd10      	pop	{r4, pc}
 8007926:	bf00      	nop
 8007928:	200032a8 	.word	0x200032a8

0800792c <CDC_Init_FS>:
{
 800792c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800792e:	4c06      	ldr	r4, [pc, #24]	; (8007948 <CDC_Init_FS+0x1c>)
 8007930:	2200      	movs	r2, #0
 8007932:	4906      	ldr	r1, [pc, #24]	; (800794c <CDC_Init_FS+0x20>)
 8007934:	4620      	mov	r0, r4
 8007936:	f7fd fae9 	bl	8004f0c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800793a:	4905      	ldr	r1, [pc, #20]	; (8007950 <CDC_Init_FS+0x24>)
 800793c:	4620      	mov	r0, r4
 800793e:	f7fd faed 	bl	8004f1c <USBD_CDC_SetRxBuffer>
}
 8007942:	2000      	movs	r0, #0
 8007944:	bd10      	pop	{r4, pc}
 8007946:	bf00      	nop
 8007948:	200032a8 	.word	0x200032a8
 800794c:	20003954 	.word	0x20003954
 8007950:	2000356c 	.word	0x2000356c

08007954 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007954:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8007956:	4801      	ldr	r0, [pc, #4]	; (800795c <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8007958:	800b      	strh	r3, [r1, #0]
}
 800795a:	4770      	bx	lr
 800795c:	20000174 	.word	0x20000174

08007960 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007960:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8007962:	4801      	ldr	r0, [pc, #4]	; (8007968 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8007964:	800b      	strh	r3, [r1, #0]
}
 8007966:	4770      	bx	lr
 8007968:	20000188 	.word	0x20000188

0800796c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800796c:	2300      	movs	r3, #0
 800796e:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8007970:	461e      	mov	r6, r3
    if (((value >> 28)) < 0xA)
 8007972:	0f05      	lsrs	r5, r0, #28
 8007974:	b2ec      	uxtb	r4, r5
 8007976:	2d09      	cmp	r5, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8007978:	bf94      	ite	ls
 800797a:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800797c:	3437      	addhi	r4, #55	; 0x37
 800797e:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8007982:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 8007986:	3301      	adds	r3, #1
 8007988:	7066      	strb	r6, [r4, #1]
  for (idx = 0; idx < len; idx++)
 800798a:	b2dc      	uxtb	r4, r3
 800798c:	42a2      	cmp	r2, r4
    value = value << 4;
 800798e:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 8007992:	d8ee      	bhi.n	8007972 <IntToUnicode+0x6>
  }
}
 8007994:	bd70      	pop	{r4, r5, r6, pc}
	...

08007998 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8007998:	231a      	movs	r3, #26
{
 800799a:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800799c:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800799e:	4b09      	ldr	r3, [pc, #36]	; (80079c4 <USBD_FS_SerialStrDescriptor+0x2c>)
 80079a0:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80079a2:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 80079a4:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 80079a6:	18c0      	adds	r0, r0, r3
 80079a8:	d00a      	beq.n	80079c0 <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80079aa:	4b07      	ldr	r3, [pc, #28]	; (80079c8 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80079ac:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80079ae:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80079b0:	4906      	ldr	r1, [pc, #24]	; (80079cc <USBD_FS_SerialStrDescriptor+0x34>)
 80079b2:	f7ff ffdb 	bl	800796c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80079b6:	2204      	movs	r2, #4
 80079b8:	4905      	ldr	r1, [pc, #20]	; (80079d0 <USBD_FS_SerialStrDescriptor+0x38>)
 80079ba:	4620      	mov	r0, r4
 80079bc:	f7ff ffd6 	bl	800796c <IntToUnicode>
}
 80079c0:	4804      	ldr	r0, [pc, #16]	; (80079d4 <USBD_FS_SerialStrDescriptor+0x3c>)
 80079c2:	bd10      	pop	{r4, pc}
 80079c4:	1ffff7e8 	.word	0x1ffff7e8
 80079c8:	1ffff7ec 	.word	0x1ffff7ec
 80079cc:	2000018e 	.word	0x2000018e
 80079d0:	2000019e 	.word	0x2000019e
 80079d4:	2000018c 	.word	0x2000018c

080079d8 <USBD_FS_ManufacturerStrDescriptor>:
{
 80079d8:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80079da:	4c04      	ldr	r4, [pc, #16]	; (80079ec <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80079dc:	460a      	mov	r2, r1
 80079de:	4804      	ldr	r0, [pc, #16]	; (80079f0 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80079e0:	4621      	mov	r1, r4
 80079e2:	f7fd fdee 	bl	80055c2 <USBD_GetString>
}
 80079e6:	4620      	mov	r0, r4
 80079e8:	bd10      	pop	{r4, pc}
 80079ea:	bf00      	nop
 80079ec:	20003d3c 	.word	0x20003d3c
 80079f0:	0800b4dd 	.word	0x0800b4dd

080079f4 <USBD_FS_ProductStrDescriptor>:
{
 80079f4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80079f6:	4c04      	ldr	r4, [pc, #16]	; (8007a08 <USBD_FS_ProductStrDescriptor+0x14>)
 80079f8:	460a      	mov	r2, r1
 80079fa:	4804      	ldr	r0, [pc, #16]	; (8007a0c <USBD_FS_ProductStrDescriptor+0x18>)
 80079fc:	4621      	mov	r1, r4
 80079fe:	f7fd fde0 	bl	80055c2 <USBD_GetString>
}
 8007a02:	4620      	mov	r0, r4
 8007a04:	bd10      	pop	{r4, pc}
 8007a06:	bf00      	nop
 8007a08:	20003d3c 	.word	0x20003d3c
 8007a0c:	0800b4f0 	.word	0x0800b4f0

08007a10 <USBD_FS_ConfigStrDescriptor>:
{
 8007a10:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007a12:	4c04      	ldr	r4, [pc, #16]	; (8007a24 <USBD_FS_ConfigStrDescriptor+0x14>)
 8007a14:	460a      	mov	r2, r1
 8007a16:	4804      	ldr	r0, [pc, #16]	; (8007a28 <USBD_FS_ConfigStrDescriptor+0x18>)
 8007a18:	4621      	mov	r1, r4
 8007a1a:	f7fd fdd2 	bl	80055c2 <USBD_GetString>
}
 8007a1e:	4620      	mov	r0, r4
 8007a20:	bd10      	pop	{r4, pc}
 8007a22:	bf00      	nop
 8007a24:	20003d3c 	.word	0x20003d3c
 8007a28:	0800b4c4 	.word	0x0800b4c4

08007a2c <USBD_FS_InterfaceStrDescriptor>:
{
 8007a2c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a2e:	4c04      	ldr	r4, [pc, #16]	; (8007a40 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8007a30:	460a      	mov	r2, r1
 8007a32:	4804      	ldr	r0, [pc, #16]	; (8007a44 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8007a34:	4621      	mov	r1, r4
 8007a36:	f7fd fdc4 	bl	80055c2 <USBD_GetString>
}
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	bd10      	pop	{r4, pc}
 8007a3e:	bf00      	nop
 8007a40:	20003d3c 	.word	0x20003d3c
 8007a44:	0800b4cf 	.word	0x0800b4cf

08007a48 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007a48:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8007a4a:	4b0e      	ldr	r3, [pc, #56]	; (8007a84 <HAL_PCD_MspInit+0x3c>)
 8007a4c:	6802      	ldr	r2, [r0, #0]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d115      	bne.n	8007a7e <HAL_PCD_MspInit+0x36>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007a52:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8007a56:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8007a58:	2105      	movs	r1, #5
    __HAL_RCC_USB_CLK_ENABLE();
 8007a5a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8007a5e:	61da      	str	r2, [r3, #28]
 8007a60:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8007a62:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8007a64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a68:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8007a6a:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8007a6c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8007a6e:	f7fa fbf9 	bl	8002264 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007a72:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007a74:	b003      	add	sp, #12
 8007a76:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007a7a:	f7fa bc27 	b.w	80022cc <HAL_NVIC_EnableIRQ>
}
 8007a7e:	b003      	add	sp, #12
 8007a80:	f85d fb04 	ldr.w	pc, [sp], #4
 8007a84:	40005c00 	.word	0x40005c00

08007a88 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007a88:	f500 710c 	add.w	r1, r0, #560	; 0x230
 8007a8c:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8007a90:	f7fd ba90 	b.w	8004fb4 <USBD_LL_SetupStage>

08007a94 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007a94:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8007a98:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8007a9c:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8007aa0:	f7fd bab5 	b.w	800500e <USBD_LL_DataOutStage>

08007aa4 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007aa4:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8007aa8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007aaa:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8007aae:	f7fd bae8 	b.w	8005082 <USBD_LL_DataInStage>

08007ab2 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007ab2:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8007ab6:	f7fd bb7c 	b.w	80051b2 <USBD_LL_SOF>

08007aba <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007aba:	6883      	ldr	r3, [r0, #8]
{ 
 8007abc:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007abe:	2b02      	cmp	r3, #2
{ 
 8007ac0:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007ac2:	d001      	beq.n	8007ac8 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8007ac4:	f7fa f83c 	bl	8001b40 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007ac8:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
 8007acc:	2101      	movs	r1, #1
 8007ace:	f7fd fb5a 	bl	8005186 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007ad2:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
}
 8007ad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007ada:	f7fd bb2d 	b.w	8005138 <USBD_LL_Reset>
	...

08007ae0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ae0:	b510      	push	{r4, lr}
 8007ae2:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007ae4:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8007ae8:	f7fd fb50 	bl	800518c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007aec:	69a3      	ldr	r3, [r4, #24]
 8007aee:	b123      	cbz	r3, 8007afa <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007af0:	4a02      	ldr	r2, [pc, #8]	; (8007afc <HAL_PCD_SuspendCallback+0x1c>)
 8007af2:	6913      	ldr	r3, [r2, #16]
 8007af4:	f043 0306 	orr.w	r3, r3, #6
 8007af8:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007afa:	bd10      	pop	{r4, pc}
 8007afc:	e000ed00 	.word	0xe000ed00

08007b00 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007b00:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8007b04:	f7fd bb4b 	b.w	800519e <USBD_LL_Resume>

08007b08 <USBD_LL_Init>:
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007b08:	2308      	movs	r3, #8
{
 8007b0a:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007b0c:	4a1d      	ldr	r2, [pc, #116]	; (8007b84 <USBD_LL_Init+0x7c>)
{
 8007b0e:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8007b10:	481d      	ldr	r0, [pc, #116]	; (8007b88 <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007b12:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007b16:	2302      	movs	r3, #2
 8007b18:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007b1a:	2300      	movs	r3, #0
  pdev->pData = &hpcd_USB_FS;
 8007b1c:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.pData = pdev;
 8007b20:	f8c0 4268 	str.w	r4, [r0, #616]	; 0x268
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007b24:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007b28:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007b2a:	f7fb fa9b 	bl	8003064 <HAL_PCD_Init>
 8007b2e:	b108      	cbz	r0, 8007b34 <USBD_LL_Init+0x2c>
  {
    Error_Handler( );
 8007b30:	f7fa f806 	bl	8001b40 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007b34:	2200      	movs	r2, #0
 8007b36:	2318      	movs	r3, #24
 8007b38:	4611      	mov	r1, r2
 8007b3a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8007b3e:	f7fb fe40 	bl	80037c2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007b42:	2358      	movs	r3, #88	; 0x58
 8007b44:	2200      	movs	r2, #0
 8007b46:	2180      	movs	r1, #128	; 0x80
 8007b48:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8007b4c:	f7fb fe39 	bl	80037c2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007b50:	23c0      	movs	r3, #192	; 0xc0
 8007b52:	2200      	movs	r2, #0
 8007b54:	2181      	movs	r1, #129	; 0x81
 8007b56:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8007b5a:	f7fb fe32 	bl	80037c2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007b5e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007b62:	2200      	movs	r2, #0
 8007b64:	2101      	movs	r1, #1
 8007b66:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8007b6a:	f7fb fe2a 	bl	80037c2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007b6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b72:	2200      	movs	r2, #0
 8007b74:	2182      	movs	r1, #130	; 0x82
 8007b76:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8007b7a:	f7fb fe22 	bl	80037c2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 8007b7e:	2000      	movs	r0, #0
 8007b80:	bd10      	pop	{r4, pc}
 8007b82:	bf00      	nop
 8007b84:	40005c00 	.word	0x40005c00
 8007b88:	20003f3c 	.word	0x20003f3c

08007b8c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007b8c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007b8e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8007b92:	f7fb fadc 	bl	800314e <HAL_PCD_Start>
 8007b96:	2803      	cmp	r0, #3
 8007b98:	bf96      	itet	ls
 8007b9a:	4b02      	ldrls	r3, [pc, #8]	; (8007ba4 <USBD_LL_Start+0x18>)
 8007b9c:	2002      	movhi	r0, #2
 8007b9e:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8007ba0:	bd08      	pop	{r3, pc}
 8007ba2:	bf00      	nop
 8007ba4:	0800b506 	.word	0x0800b506

08007ba8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007ba8:	b510      	push	{r4, lr}
 8007baa:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007bac:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	4622      	mov	r2, r4
 8007bb4:	f7fb faf6 	bl	80031a4 <HAL_PCD_EP_Open>
 8007bb8:	2803      	cmp	r0, #3
 8007bba:	bf96      	itet	ls
 8007bbc:	4b01      	ldrls	r3, [pc, #4]	; (8007bc4 <USBD_LL_OpenEP+0x1c>)
 8007bbe:	2002      	movhi	r0, #2
 8007bc0:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;
}
 8007bc2:	bd10      	pop	{r4, pc}
 8007bc4:	0800b506 	.word	0x0800b506

08007bc8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bc8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007bca:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8007bce:	f7fb fb1c 	bl	800320a <HAL_PCD_EP_Close>
 8007bd2:	2803      	cmp	r0, #3
 8007bd4:	bf96      	itet	ls
 8007bd6:	4b02      	ldrls	r3, [pc, #8]	; (8007be0 <USBD_LL_CloseEP+0x18>)
 8007bd8:	2002      	movhi	r0, #2
 8007bda:	5c18      	ldrbls	r0, [r3, r0]
      
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;  
}
 8007bdc:	bd08      	pop	{r3, pc}
 8007bde:	bf00      	nop
 8007be0:	0800b506 	.word	0x0800b506

08007be4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007be4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007be6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8007bea:	f7fb fd83 	bl	80036f4 <HAL_PCD_EP_SetStall>
 8007bee:	2803      	cmp	r0, #3
 8007bf0:	bf96      	itet	ls
 8007bf2:	4b02      	ldrls	r3, [pc, #8]	; (8007bfc <USBD_LL_StallEP+0x18>)
 8007bf4:	2002      	movhi	r0, #2
 8007bf6:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8007bf8:	bd08      	pop	{r3, pc}
 8007bfa:	bf00      	nop
 8007bfc:	0800b506 	.word	0x0800b506

08007c00 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c00:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8007c02:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8007c06:	f7fb fda9 	bl	800375c <HAL_PCD_EP_ClrStall>
 8007c0a:	2803      	cmp	r0, #3
 8007c0c:	bf96      	itet	ls
 8007c0e:	4b02      	ldrls	r3, [pc, #8]	; (8007c18 <USBD_LL_ClearStallEP+0x18>)
 8007c10:	2002      	movhi	r0, #2
 8007c12:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status; 
}
 8007c14:	bd08      	pop	{r3, pc}
 8007c16:	bf00      	nop
 8007c18:	0800b506 	.word	0x0800b506

08007c1c <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8007c1c:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007c1e:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007c22:	bf45      	ittet	mi
 8007c24:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8007c28:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007c2c:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007c30:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007c34:	bf58      	it	pl
 8007c36:	f893 012a 	ldrbpl.w	r0, [r3, #298]	; 0x12a
  }
}
 8007c3a:	4770      	bx	lr

08007c3c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007c3c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007c3e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8007c42:	f7fb fa9b 	bl	800317c <HAL_PCD_SetAddress>
 8007c46:	2803      	cmp	r0, #3
 8007c48:	bf96      	itet	ls
 8007c4a:	4b02      	ldrls	r3, [pc, #8]	; (8007c54 <USBD_LL_SetUSBAddress+0x18>)
 8007c4c:	2002      	movhi	r0, #2
 8007c4e:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8007c50:	bd08      	pop	{r3, pc}
 8007c52:	bf00      	nop
 8007c54:	0800b506 	.word	0x0800b506

08007c58 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007c58:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007c5a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8007c5e:	f7fb fb1c 	bl	800329a <HAL_PCD_EP_Transmit>
 8007c62:	2803      	cmp	r0, #3
 8007c64:	bf96      	itet	ls
 8007c66:	4b02      	ldrls	r3, [pc, #8]	; (8007c70 <USBD_LL_Transmit+0x18>)
 8007c68:	2002      	movhi	r0, #2
 8007c6a:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;    
}
 8007c6c:	bd08      	pop	{r3, pc}
 8007c6e:	bf00      	nop
 8007c70:	0800b506 	.word	0x0800b506

08007c74 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007c74:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007c76:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8007c7a:	f7fb faef 	bl	800325c <HAL_PCD_EP_Receive>
 8007c7e:	2803      	cmp	r0, #3
 8007c80:	bf96      	itet	ls
 8007c82:	4b02      	ldrls	r3, [pc, #8]	; (8007c8c <USBD_LL_PrepareReceive+0x18>)
 8007c84:	2002      	movhi	r0, #2
 8007c86:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  	
  return usb_status; 
}
 8007c88:	bd08      	pop	{r3, pc}
 8007c8a:	bf00      	nop
 8007c8c:	0800b506 	.word	0x0800b506

08007c90 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007c90:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8007c94:	f7fb bafa 	b.w	800328c <HAL_PCD_EP_GetRxCount>

08007c98 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8007c98:	4800      	ldr	r0, [pc, #0]	; (8007c9c <USBD_static_malloc+0x4>)
 8007c9a:	4770      	bx	lr
 8007c9c:	200029d0 	.word	0x200029d0

08007ca0 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 8007ca0:	4770      	bx	lr

08007ca2 <HAL_PCDEx_SetConnectionState>:
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007ca2:	4770      	bx	lr

08007ca4 <__errno>:
 8007ca4:	4b01      	ldr	r3, [pc, #4]	; (8007cac <__errno+0x8>)
 8007ca6:	6818      	ldr	r0, [r3, #0]
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop
 8007cac:	200001a8 	.word	0x200001a8

08007cb0 <__libc_init_array>:
 8007cb0:	b570      	push	{r4, r5, r6, lr}
 8007cb2:	2500      	movs	r5, #0
 8007cb4:	4e0c      	ldr	r6, [pc, #48]	; (8007ce8 <__libc_init_array+0x38>)
 8007cb6:	4c0d      	ldr	r4, [pc, #52]	; (8007cec <__libc_init_array+0x3c>)
 8007cb8:	1ba4      	subs	r4, r4, r6
 8007cba:	10a4      	asrs	r4, r4, #2
 8007cbc:	42a5      	cmp	r5, r4
 8007cbe:	d109      	bne.n	8007cd4 <__libc_init_array+0x24>
 8007cc0:	f002 f85e 	bl	8009d80 <_init>
 8007cc4:	2500      	movs	r5, #0
 8007cc6:	4e0a      	ldr	r6, [pc, #40]	; (8007cf0 <__libc_init_array+0x40>)
 8007cc8:	4c0a      	ldr	r4, [pc, #40]	; (8007cf4 <__libc_init_array+0x44>)
 8007cca:	1ba4      	subs	r4, r4, r6
 8007ccc:	10a4      	asrs	r4, r4, #2
 8007cce:	42a5      	cmp	r5, r4
 8007cd0:	d105      	bne.n	8007cde <__libc_init_array+0x2e>
 8007cd2:	bd70      	pop	{r4, r5, r6, pc}
 8007cd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007cd8:	4798      	blx	r3
 8007cda:	3501      	adds	r5, #1
 8007cdc:	e7ee      	b.n	8007cbc <__libc_init_array+0xc>
 8007cde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ce2:	4798      	blx	r3
 8007ce4:	3501      	adds	r5, #1
 8007ce6:	e7f2      	b.n	8007cce <__libc_init_array+0x1e>
 8007ce8:	0800b768 	.word	0x0800b768
 8007cec:	0800b768 	.word	0x0800b768
 8007cf0:	0800b768 	.word	0x0800b768
 8007cf4:	0800b76c 	.word	0x0800b76c

08007cf8 <malloc>:
 8007cf8:	4b02      	ldr	r3, [pc, #8]	; (8007d04 <malloc+0xc>)
 8007cfa:	4601      	mov	r1, r0
 8007cfc:	6818      	ldr	r0, [r3, #0]
 8007cfe:	f000 b863 	b.w	8007dc8 <_malloc_r>
 8007d02:	bf00      	nop
 8007d04:	200001a8 	.word	0x200001a8

08007d08 <memcpy>:
 8007d08:	b510      	push	{r4, lr}
 8007d0a:	1e43      	subs	r3, r0, #1
 8007d0c:	440a      	add	r2, r1
 8007d0e:	4291      	cmp	r1, r2
 8007d10:	d100      	bne.n	8007d14 <memcpy+0xc>
 8007d12:	bd10      	pop	{r4, pc}
 8007d14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d1c:	e7f7      	b.n	8007d0e <memcpy+0x6>

08007d1e <memset>:
 8007d1e:	4603      	mov	r3, r0
 8007d20:	4402      	add	r2, r0
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d100      	bne.n	8007d28 <memset+0xa>
 8007d26:	4770      	bx	lr
 8007d28:	f803 1b01 	strb.w	r1, [r3], #1
 8007d2c:	e7f9      	b.n	8007d22 <memset+0x4>
	...

08007d30 <_free_r>:
 8007d30:	b538      	push	{r3, r4, r5, lr}
 8007d32:	4605      	mov	r5, r0
 8007d34:	2900      	cmp	r1, #0
 8007d36:	d043      	beq.n	8007dc0 <_free_r+0x90>
 8007d38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d3c:	1f0c      	subs	r4, r1, #4
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	bfb8      	it	lt
 8007d42:	18e4      	addlt	r4, r4, r3
 8007d44:	f001 fb78 	bl	8009438 <__malloc_lock>
 8007d48:	4a1e      	ldr	r2, [pc, #120]	; (8007dc4 <_free_r+0x94>)
 8007d4a:	6813      	ldr	r3, [r2, #0]
 8007d4c:	4610      	mov	r0, r2
 8007d4e:	b933      	cbnz	r3, 8007d5e <_free_r+0x2e>
 8007d50:	6063      	str	r3, [r4, #4]
 8007d52:	6014      	str	r4, [r2, #0]
 8007d54:	4628      	mov	r0, r5
 8007d56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d5a:	f001 bb6e 	b.w	800943a <__malloc_unlock>
 8007d5e:	42a3      	cmp	r3, r4
 8007d60:	d90b      	bls.n	8007d7a <_free_r+0x4a>
 8007d62:	6821      	ldr	r1, [r4, #0]
 8007d64:	1862      	adds	r2, r4, r1
 8007d66:	4293      	cmp	r3, r2
 8007d68:	bf01      	itttt	eq
 8007d6a:	681a      	ldreq	r2, [r3, #0]
 8007d6c:	685b      	ldreq	r3, [r3, #4]
 8007d6e:	1852      	addeq	r2, r2, r1
 8007d70:	6022      	streq	r2, [r4, #0]
 8007d72:	6063      	str	r3, [r4, #4]
 8007d74:	6004      	str	r4, [r0, #0]
 8007d76:	e7ed      	b.n	8007d54 <_free_r+0x24>
 8007d78:	4613      	mov	r3, r2
 8007d7a:	685a      	ldr	r2, [r3, #4]
 8007d7c:	b10a      	cbz	r2, 8007d82 <_free_r+0x52>
 8007d7e:	42a2      	cmp	r2, r4
 8007d80:	d9fa      	bls.n	8007d78 <_free_r+0x48>
 8007d82:	6819      	ldr	r1, [r3, #0]
 8007d84:	1858      	adds	r0, r3, r1
 8007d86:	42a0      	cmp	r0, r4
 8007d88:	d10b      	bne.n	8007da2 <_free_r+0x72>
 8007d8a:	6820      	ldr	r0, [r4, #0]
 8007d8c:	4401      	add	r1, r0
 8007d8e:	1858      	adds	r0, r3, r1
 8007d90:	4282      	cmp	r2, r0
 8007d92:	6019      	str	r1, [r3, #0]
 8007d94:	d1de      	bne.n	8007d54 <_free_r+0x24>
 8007d96:	6810      	ldr	r0, [r2, #0]
 8007d98:	6852      	ldr	r2, [r2, #4]
 8007d9a:	4401      	add	r1, r0
 8007d9c:	6019      	str	r1, [r3, #0]
 8007d9e:	605a      	str	r2, [r3, #4]
 8007da0:	e7d8      	b.n	8007d54 <_free_r+0x24>
 8007da2:	d902      	bls.n	8007daa <_free_r+0x7a>
 8007da4:	230c      	movs	r3, #12
 8007da6:	602b      	str	r3, [r5, #0]
 8007da8:	e7d4      	b.n	8007d54 <_free_r+0x24>
 8007daa:	6820      	ldr	r0, [r4, #0]
 8007dac:	1821      	adds	r1, r4, r0
 8007dae:	428a      	cmp	r2, r1
 8007db0:	bf01      	itttt	eq
 8007db2:	6811      	ldreq	r1, [r2, #0]
 8007db4:	6852      	ldreq	r2, [r2, #4]
 8007db6:	1809      	addeq	r1, r1, r0
 8007db8:	6021      	streq	r1, [r4, #0]
 8007dba:	6062      	str	r2, [r4, #4]
 8007dbc:	605c      	str	r4, [r3, #4]
 8007dbe:	e7c9      	b.n	8007d54 <_free_r+0x24>
 8007dc0:	bd38      	pop	{r3, r4, r5, pc}
 8007dc2:	bf00      	nop
 8007dc4:	20002bf0 	.word	0x20002bf0

08007dc8 <_malloc_r>:
 8007dc8:	b570      	push	{r4, r5, r6, lr}
 8007dca:	1ccd      	adds	r5, r1, #3
 8007dcc:	f025 0503 	bic.w	r5, r5, #3
 8007dd0:	3508      	adds	r5, #8
 8007dd2:	2d0c      	cmp	r5, #12
 8007dd4:	bf38      	it	cc
 8007dd6:	250c      	movcc	r5, #12
 8007dd8:	2d00      	cmp	r5, #0
 8007dda:	4606      	mov	r6, r0
 8007ddc:	db01      	blt.n	8007de2 <_malloc_r+0x1a>
 8007dde:	42a9      	cmp	r1, r5
 8007de0:	d903      	bls.n	8007dea <_malloc_r+0x22>
 8007de2:	230c      	movs	r3, #12
 8007de4:	6033      	str	r3, [r6, #0]
 8007de6:	2000      	movs	r0, #0
 8007de8:	bd70      	pop	{r4, r5, r6, pc}
 8007dea:	f001 fb25 	bl	8009438 <__malloc_lock>
 8007dee:	4a21      	ldr	r2, [pc, #132]	; (8007e74 <_malloc_r+0xac>)
 8007df0:	6814      	ldr	r4, [r2, #0]
 8007df2:	4621      	mov	r1, r4
 8007df4:	b991      	cbnz	r1, 8007e1c <_malloc_r+0x54>
 8007df6:	4c20      	ldr	r4, [pc, #128]	; (8007e78 <_malloc_r+0xb0>)
 8007df8:	6823      	ldr	r3, [r4, #0]
 8007dfa:	b91b      	cbnz	r3, 8007e04 <_malloc_r+0x3c>
 8007dfc:	4630      	mov	r0, r6
 8007dfe:	f000 fc8d 	bl	800871c <_sbrk_r>
 8007e02:	6020      	str	r0, [r4, #0]
 8007e04:	4629      	mov	r1, r5
 8007e06:	4630      	mov	r0, r6
 8007e08:	f000 fc88 	bl	800871c <_sbrk_r>
 8007e0c:	1c43      	adds	r3, r0, #1
 8007e0e:	d124      	bne.n	8007e5a <_malloc_r+0x92>
 8007e10:	230c      	movs	r3, #12
 8007e12:	4630      	mov	r0, r6
 8007e14:	6033      	str	r3, [r6, #0]
 8007e16:	f001 fb10 	bl	800943a <__malloc_unlock>
 8007e1a:	e7e4      	b.n	8007de6 <_malloc_r+0x1e>
 8007e1c:	680b      	ldr	r3, [r1, #0]
 8007e1e:	1b5b      	subs	r3, r3, r5
 8007e20:	d418      	bmi.n	8007e54 <_malloc_r+0x8c>
 8007e22:	2b0b      	cmp	r3, #11
 8007e24:	d90f      	bls.n	8007e46 <_malloc_r+0x7e>
 8007e26:	600b      	str	r3, [r1, #0]
 8007e28:	18cc      	adds	r4, r1, r3
 8007e2a:	50cd      	str	r5, [r1, r3]
 8007e2c:	4630      	mov	r0, r6
 8007e2e:	f001 fb04 	bl	800943a <__malloc_unlock>
 8007e32:	f104 000b 	add.w	r0, r4, #11
 8007e36:	1d23      	adds	r3, r4, #4
 8007e38:	f020 0007 	bic.w	r0, r0, #7
 8007e3c:	1ac3      	subs	r3, r0, r3
 8007e3e:	d0d3      	beq.n	8007de8 <_malloc_r+0x20>
 8007e40:	425a      	negs	r2, r3
 8007e42:	50e2      	str	r2, [r4, r3]
 8007e44:	e7d0      	b.n	8007de8 <_malloc_r+0x20>
 8007e46:	684b      	ldr	r3, [r1, #4]
 8007e48:	428c      	cmp	r4, r1
 8007e4a:	bf16      	itet	ne
 8007e4c:	6063      	strne	r3, [r4, #4]
 8007e4e:	6013      	streq	r3, [r2, #0]
 8007e50:	460c      	movne	r4, r1
 8007e52:	e7eb      	b.n	8007e2c <_malloc_r+0x64>
 8007e54:	460c      	mov	r4, r1
 8007e56:	6849      	ldr	r1, [r1, #4]
 8007e58:	e7cc      	b.n	8007df4 <_malloc_r+0x2c>
 8007e5a:	1cc4      	adds	r4, r0, #3
 8007e5c:	f024 0403 	bic.w	r4, r4, #3
 8007e60:	42a0      	cmp	r0, r4
 8007e62:	d005      	beq.n	8007e70 <_malloc_r+0xa8>
 8007e64:	1a21      	subs	r1, r4, r0
 8007e66:	4630      	mov	r0, r6
 8007e68:	f000 fc58 	bl	800871c <_sbrk_r>
 8007e6c:	3001      	adds	r0, #1
 8007e6e:	d0cf      	beq.n	8007e10 <_malloc_r+0x48>
 8007e70:	6025      	str	r5, [r4, #0]
 8007e72:	e7db      	b.n	8007e2c <_malloc_r+0x64>
 8007e74:	20002bf0 	.word	0x20002bf0
 8007e78:	20002bf4 	.word	0x20002bf4

08007e7c <__cvt>:
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e82:	461e      	mov	r6, r3
 8007e84:	bfbb      	ittet	lt
 8007e86:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007e8a:	461e      	movlt	r6, r3
 8007e8c:	2300      	movge	r3, #0
 8007e8e:	232d      	movlt	r3, #45	; 0x2d
 8007e90:	b088      	sub	sp, #32
 8007e92:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007e94:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8007e98:	f027 0720 	bic.w	r7, r7, #32
 8007e9c:	2f46      	cmp	r7, #70	; 0x46
 8007e9e:	4614      	mov	r4, r2
 8007ea0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007ea2:	700b      	strb	r3, [r1, #0]
 8007ea4:	d004      	beq.n	8007eb0 <__cvt+0x34>
 8007ea6:	2f45      	cmp	r7, #69	; 0x45
 8007ea8:	d100      	bne.n	8007eac <__cvt+0x30>
 8007eaa:	3501      	adds	r5, #1
 8007eac:	2302      	movs	r3, #2
 8007eae:	e000      	b.n	8007eb2 <__cvt+0x36>
 8007eb0:	2303      	movs	r3, #3
 8007eb2:	aa07      	add	r2, sp, #28
 8007eb4:	9204      	str	r2, [sp, #16]
 8007eb6:	aa06      	add	r2, sp, #24
 8007eb8:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007ebc:	e9cd 3500 	strd	r3, r5, [sp]
 8007ec0:	4622      	mov	r2, r4
 8007ec2:	4633      	mov	r3, r6
 8007ec4:	f000 fce8 	bl	8008898 <_dtoa_r>
 8007ec8:	2f47      	cmp	r7, #71	; 0x47
 8007eca:	4680      	mov	r8, r0
 8007ecc:	d102      	bne.n	8007ed4 <__cvt+0x58>
 8007ece:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ed0:	07db      	lsls	r3, r3, #31
 8007ed2:	d526      	bpl.n	8007f22 <__cvt+0xa6>
 8007ed4:	2f46      	cmp	r7, #70	; 0x46
 8007ed6:	eb08 0905 	add.w	r9, r8, r5
 8007eda:	d111      	bne.n	8007f00 <__cvt+0x84>
 8007edc:	f898 3000 	ldrb.w	r3, [r8]
 8007ee0:	2b30      	cmp	r3, #48	; 0x30
 8007ee2:	d10a      	bne.n	8007efa <__cvt+0x7e>
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	4620      	mov	r0, r4
 8007eea:	4631      	mov	r1, r6
 8007eec:	f7f8 fd5c 	bl	80009a8 <__aeabi_dcmpeq>
 8007ef0:	b918      	cbnz	r0, 8007efa <__cvt+0x7e>
 8007ef2:	f1c5 0501 	rsb	r5, r5, #1
 8007ef6:	f8ca 5000 	str.w	r5, [sl]
 8007efa:	f8da 3000 	ldr.w	r3, [sl]
 8007efe:	4499      	add	r9, r3
 8007f00:	2200      	movs	r2, #0
 8007f02:	2300      	movs	r3, #0
 8007f04:	4620      	mov	r0, r4
 8007f06:	4631      	mov	r1, r6
 8007f08:	f7f8 fd4e 	bl	80009a8 <__aeabi_dcmpeq>
 8007f0c:	b938      	cbnz	r0, 8007f1e <__cvt+0xa2>
 8007f0e:	2230      	movs	r2, #48	; 0x30
 8007f10:	9b07      	ldr	r3, [sp, #28]
 8007f12:	454b      	cmp	r3, r9
 8007f14:	d205      	bcs.n	8007f22 <__cvt+0xa6>
 8007f16:	1c59      	adds	r1, r3, #1
 8007f18:	9107      	str	r1, [sp, #28]
 8007f1a:	701a      	strb	r2, [r3, #0]
 8007f1c:	e7f8      	b.n	8007f10 <__cvt+0x94>
 8007f1e:	f8cd 901c 	str.w	r9, [sp, #28]
 8007f22:	4640      	mov	r0, r8
 8007f24:	9b07      	ldr	r3, [sp, #28]
 8007f26:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007f28:	eba3 0308 	sub.w	r3, r3, r8
 8007f2c:	6013      	str	r3, [r2, #0]
 8007f2e:	b008      	add	sp, #32
 8007f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007f34 <__exponent>:
 8007f34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f36:	2900      	cmp	r1, #0
 8007f38:	bfb4      	ite	lt
 8007f3a:	232d      	movlt	r3, #45	; 0x2d
 8007f3c:	232b      	movge	r3, #43	; 0x2b
 8007f3e:	4604      	mov	r4, r0
 8007f40:	bfb8      	it	lt
 8007f42:	4249      	neglt	r1, r1
 8007f44:	2909      	cmp	r1, #9
 8007f46:	f804 2b02 	strb.w	r2, [r4], #2
 8007f4a:	7043      	strb	r3, [r0, #1]
 8007f4c:	dd21      	ble.n	8007f92 <__exponent+0x5e>
 8007f4e:	f10d 0307 	add.w	r3, sp, #7
 8007f52:	461f      	mov	r7, r3
 8007f54:	260a      	movs	r6, #10
 8007f56:	fb91 f5f6 	sdiv	r5, r1, r6
 8007f5a:	fb06 1115 	mls	r1, r6, r5, r1
 8007f5e:	2d09      	cmp	r5, #9
 8007f60:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8007f64:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007f68:	f103 32ff 	add.w	r2, r3, #4294967295
 8007f6c:	4629      	mov	r1, r5
 8007f6e:	dc09      	bgt.n	8007f84 <__exponent+0x50>
 8007f70:	3130      	adds	r1, #48	; 0x30
 8007f72:	3b02      	subs	r3, #2
 8007f74:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007f78:	42bb      	cmp	r3, r7
 8007f7a:	4622      	mov	r2, r4
 8007f7c:	d304      	bcc.n	8007f88 <__exponent+0x54>
 8007f7e:	1a10      	subs	r0, r2, r0
 8007f80:	b003      	add	sp, #12
 8007f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f84:	4613      	mov	r3, r2
 8007f86:	e7e6      	b.n	8007f56 <__exponent+0x22>
 8007f88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f8c:	f804 2b01 	strb.w	r2, [r4], #1
 8007f90:	e7f2      	b.n	8007f78 <__exponent+0x44>
 8007f92:	2330      	movs	r3, #48	; 0x30
 8007f94:	4419      	add	r1, r3
 8007f96:	7083      	strb	r3, [r0, #2]
 8007f98:	1d02      	adds	r2, r0, #4
 8007f9a:	70c1      	strb	r1, [r0, #3]
 8007f9c:	e7ef      	b.n	8007f7e <__exponent+0x4a>
	...

08007fa0 <_printf_float>:
 8007fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa4:	b091      	sub	sp, #68	; 0x44
 8007fa6:	460c      	mov	r4, r1
 8007fa8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8007faa:	4693      	mov	fp, r2
 8007fac:	461e      	mov	r6, r3
 8007fae:	4605      	mov	r5, r0
 8007fb0:	f001 fa26 	bl	8009400 <_localeconv_r>
 8007fb4:	6803      	ldr	r3, [r0, #0]
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8007fba:	f7f8 f8c9 	bl	8000150 <strlen>
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	930e      	str	r3, [sp, #56]	; 0x38
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	900a      	str	r0, [sp, #40]	; 0x28
 8007fc6:	3307      	adds	r3, #7
 8007fc8:	f023 0307 	bic.w	r3, r3, #7
 8007fcc:	f103 0208 	add.w	r2, r3, #8
 8007fd0:	f894 8018 	ldrb.w	r8, [r4, #24]
 8007fd4:	f8d4 a000 	ldr.w	sl, [r4]
 8007fd8:	603a      	str	r2, [r7, #0]
 8007fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fde:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007fe2:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8007fe6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007fea:	930b      	str	r3, [sp, #44]	; 0x2c
 8007fec:	f04f 32ff 	mov.w	r2, #4294967295
 8007ff0:	4ba6      	ldr	r3, [pc, #664]	; (800828c <_printf_float+0x2ec>)
 8007ff2:	4638      	mov	r0, r7
 8007ff4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ff6:	f7f8 fd09 	bl	8000a0c <__aeabi_dcmpun>
 8007ffa:	bb68      	cbnz	r0, 8008058 <_printf_float+0xb8>
 8007ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8008000:	4ba2      	ldr	r3, [pc, #648]	; (800828c <_printf_float+0x2ec>)
 8008002:	4638      	mov	r0, r7
 8008004:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008006:	f7f8 fce3 	bl	80009d0 <__aeabi_dcmple>
 800800a:	bb28      	cbnz	r0, 8008058 <_printf_float+0xb8>
 800800c:	2200      	movs	r2, #0
 800800e:	2300      	movs	r3, #0
 8008010:	4638      	mov	r0, r7
 8008012:	4649      	mov	r1, r9
 8008014:	f7f8 fcd2 	bl	80009bc <__aeabi_dcmplt>
 8008018:	b110      	cbz	r0, 8008020 <_printf_float+0x80>
 800801a:	232d      	movs	r3, #45	; 0x2d
 800801c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008020:	4f9b      	ldr	r7, [pc, #620]	; (8008290 <_printf_float+0x2f0>)
 8008022:	4b9c      	ldr	r3, [pc, #624]	; (8008294 <_printf_float+0x2f4>)
 8008024:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008028:	bf98      	it	ls
 800802a:	461f      	movls	r7, r3
 800802c:	2303      	movs	r3, #3
 800802e:	f04f 0900 	mov.w	r9, #0
 8008032:	6123      	str	r3, [r4, #16]
 8008034:	f02a 0304 	bic.w	r3, sl, #4
 8008038:	6023      	str	r3, [r4, #0]
 800803a:	9600      	str	r6, [sp, #0]
 800803c:	465b      	mov	r3, fp
 800803e:	aa0f      	add	r2, sp, #60	; 0x3c
 8008040:	4621      	mov	r1, r4
 8008042:	4628      	mov	r0, r5
 8008044:	f000 f9e2 	bl	800840c <_printf_common>
 8008048:	3001      	adds	r0, #1
 800804a:	f040 8090 	bne.w	800816e <_printf_float+0x1ce>
 800804e:	f04f 30ff 	mov.w	r0, #4294967295
 8008052:	b011      	add	sp, #68	; 0x44
 8008054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008058:	463a      	mov	r2, r7
 800805a:	464b      	mov	r3, r9
 800805c:	4638      	mov	r0, r7
 800805e:	4649      	mov	r1, r9
 8008060:	f7f8 fcd4 	bl	8000a0c <__aeabi_dcmpun>
 8008064:	b110      	cbz	r0, 800806c <_printf_float+0xcc>
 8008066:	4f8c      	ldr	r7, [pc, #560]	; (8008298 <_printf_float+0x2f8>)
 8008068:	4b8c      	ldr	r3, [pc, #560]	; (800829c <_printf_float+0x2fc>)
 800806a:	e7db      	b.n	8008024 <_printf_float+0x84>
 800806c:	6863      	ldr	r3, [r4, #4]
 800806e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8008072:	1c59      	adds	r1, r3, #1
 8008074:	a80d      	add	r0, sp, #52	; 0x34
 8008076:	a90e      	add	r1, sp, #56	; 0x38
 8008078:	d140      	bne.n	80080fc <_printf_float+0x15c>
 800807a:	2306      	movs	r3, #6
 800807c:	6063      	str	r3, [r4, #4]
 800807e:	f04f 0c00 	mov.w	ip, #0
 8008082:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8008086:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800808a:	6863      	ldr	r3, [r4, #4]
 800808c:	6022      	str	r2, [r4, #0]
 800808e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8008092:	9300      	str	r3, [sp, #0]
 8008094:	463a      	mov	r2, r7
 8008096:	464b      	mov	r3, r9
 8008098:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800809c:	4628      	mov	r0, r5
 800809e:	f7ff feed 	bl	8007e7c <__cvt>
 80080a2:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80080a6:	2b47      	cmp	r3, #71	; 0x47
 80080a8:	4607      	mov	r7, r0
 80080aa:	d109      	bne.n	80080c0 <_printf_float+0x120>
 80080ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080ae:	1cd8      	adds	r0, r3, #3
 80080b0:	db02      	blt.n	80080b8 <_printf_float+0x118>
 80080b2:	6862      	ldr	r2, [r4, #4]
 80080b4:	4293      	cmp	r3, r2
 80080b6:	dd47      	ble.n	8008148 <_printf_float+0x1a8>
 80080b8:	f1a8 0802 	sub.w	r8, r8, #2
 80080bc:	fa5f f888 	uxtb.w	r8, r8
 80080c0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80080c4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80080c6:	d824      	bhi.n	8008112 <_printf_float+0x172>
 80080c8:	3901      	subs	r1, #1
 80080ca:	4642      	mov	r2, r8
 80080cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80080d0:	910d      	str	r1, [sp, #52]	; 0x34
 80080d2:	f7ff ff2f 	bl	8007f34 <__exponent>
 80080d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80080d8:	4681      	mov	r9, r0
 80080da:	1813      	adds	r3, r2, r0
 80080dc:	2a01      	cmp	r2, #1
 80080de:	6123      	str	r3, [r4, #16]
 80080e0:	dc02      	bgt.n	80080e8 <_printf_float+0x148>
 80080e2:	6822      	ldr	r2, [r4, #0]
 80080e4:	07d1      	lsls	r1, r2, #31
 80080e6:	d501      	bpl.n	80080ec <_printf_float+0x14c>
 80080e8:	3301      	adds	r3, #1
 80080ea:	6123      	str	r3, [r4, #16]
 80080ec:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d0a2      	beq.n	800803a <_printf_float+0x9a>
 80080f4:	232d      	movs	r3, #45	; 0x2d
 80080f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080fa:	e79e      	b.n	800803a <_printf_float+0x9a>
 80080fc:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8008100:	f000 816e 	beq.w	80083e0 <_printf_float+0x440>
 8008104:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008108:	d1b9      	bne.n	800807e <_printf_float+0xde>
 800810a:	2b00      	cmp	r3, #0
 800810c:	d1b7      	bne.n	800807e <_printf_float+0xde>
 800810e:	2301      	movs	r3, #1
 8008110:	e7b4      	b.n	800807c <_printf_float+0xdc>
 8008112:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8008116:	d119      	bne.n	800814c <_printf_float+0x1ac>
 8008118:	2900      	cmp	r1, #0
 800811a:	6863      	ldr	r3, [r4, #4]
 800811c:	dd0c      	ble.n	8008138 <_printf_float+0x198>
 800811e:	6121      	str	r1, [r4, #16]
 8008120:	b913      	cbnz	r3, 8008128 <_printf_float+0x188>
 8008122:	6822      	ldr	r2, [r4, #0]
 8008124:	07d2      	lsls	r2, r2, #31
 8008126:	d502      	bpl.n	800812e <_printf_float+0x18e>
 8008128:	3301      	adds	r3, #1
 800812a:	440b      	add	r3, r1
 800812c:	6123      	str	r3, [r4, #16]
 800812e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008130:	f04f 0900 	mov.w	r9, #0
 8008134:	65a3      	str	r3, [r4, #88]	; 0x58
 8008136:	e7d9      	b.n	80080ec <_printf_float+0x14c>
 8008138:	b913      	cbnz	r3, 8008140 <_printf_float+0x1a0>
 800813a:	6822      	ldr	r2, [r4, #0]
 800813c:	07d0      	lsls	r0, r2, #31
 800813e:	d501      	bpl.n	8008144 <_printf_float+0x1a4>
 8008140:	3302      	adds	r3, #2
 8008142:	e7f3      	b.n	800812c <_printf_float+0x18c>
 8008144:	2301      	movs	r3, #1
 8008146:	e7f1      	b.n	800812c <_printf_float+0x18c>
 8008148:	f04f 0867 	mov.w	r8, #103	; 0x67
 800814c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008150:	4293      	cmp	r3, r2
 8008152:	db05      	blt.n	8008160 <_printf_float+0x1c0>
 8008154:	6822      	ldr	r2, [r4, #0]
 8008156:	6123      	str	r3, [r4, #16]
 8008158:	07d1      	lsls	r1, r2, #31
 800815a:	d5e8      	bpl.n	800812e <_printf_float+0x18e>
 800815c:	3301      	adds	r3, #1
 800815e:	e7e5      	b.n	800812c <_printf_float+0x18c>
 8008160:	2b00      	cmp	r3, #0
 8008162:	bfcc      	ite	gt
 8008164:	2301      	movgt	r3, #1
 8008166:	f1c3 0302 	rsble	r3, r3, #2
 800816a:	4413      	add	r3, r2
 800816c:	e7de      	b.n	800812c <_printf_float+0x18c>
 800816e:	6823      	ldr	r3, [r4, #0]
 8008170:	055a      	lsls	r2, r3, #21
 8008172:	d407      	bmi.n	8008184 <_printf_float+0x1e4>
 8008174:	6923      	ldr	r3, [r4, #16]
 8008176:	463a      	mov	r2, r7
 8008178:	4659      	mov	r1, fp
 800817a:	4628      	mov	r0, r5
 800817c:	47b0      	blx	r6
 800817e:	3001      	adds	r0, #1
 8008180:	d129      	bne.n	80081d6 <_printf_float+0x236>
 8008182:	e764      	b.n	800804e <_printf_float+0xae>
 8008184:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8008188:	f240 80d7 	bls.w	800833a <_printf_float+0x39a>
 800818c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008190:	2200      	movs	r2, #0
 8008192:	2300      	movs	r3, #0
 8008194:	f7f8 fc08 	bl	80009a8 <__aeabi_dcmpeq>
 8008198:	b388      	cbz	r0, 80081fe <_printf_float+0x25e>
 800819a:	2301      	movs	r3, #1
 800819c:	4a40      	ldr	r2, [pc, #256]	; (80082a0 <_printf_float+0x300>)
 800819e:	4659      	mov	r1, fp
 80081a0:	4628      	mov	r0, r5
 80081a2:	47b0      	blx	r6
 80081a4:	3001      	adds	r0, #1
 80081a6:	f43f af52 	beq.w	800804e <_printf_float+0xae>
 80081aa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80081ae:	429a      	cmp	r2, r3
 80081b0:	db02      	blt.n	80081b8 <_printf_float+0x218>
 80081b2:	6823      	ldr	r3, [r4, #0]
 80081b4:	07d8      	lsls	r0, r3, #31
 80081b6:	d50e      	bpl.n	80081d6 <_printf_float+0x236>
 80081b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081bc:	4659      	mov	r1, fp
 80081be:	4628      	mov	r0, r5
 80081c0:	47b0      	blx	r6
 80081c2:	3001      	adds	r0, #1
 80081c4:	f43f af43 	beq.w	800804e <_printf_float+0xae>
 80081c8:	2700      	movs	r7, #0
 80081ca:	f104 081a 	add.w	r8, r4, #26
 80081ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081d0:	3b01      	subs	r3, #1
 80081d2:	42bb      	cmp	r3, r7
 80081d4:	dc09      	bgt.n	80081ea <_printf_float+0x24a>
 80081d6:	6823      	ldr	r3, [r4, #0]
 80081d8:	079f      	lsls	r7, r3, #30
 80081da:	f100 80fd 	bmi.w	80083d8 <_printf_float+0x438>
 80081de:	68e0      	ldr	r0, [r4, #12]
 80081e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80081e2:	4298      	cmp	r0, r3
 80081e4:	bfb8      	it	lt
 80081e6:	4618      	movlt	r0, r3
 80081e8:	e733      	b.n	8008052 <_printf_float+0xb2>
 80081ea:	2301      	movs	r3, #1
 80081ec:	4642      	mov	r2, r8
 80081ee:	4659      	mov	r1, fp
 80081f0:	4628      	mov	r0, r5
 80081f2:	47b0      	blx	r6
 80081f4:	3001      	adds	r0, #1
 80081f6:	f43f af2a 	beq.w	800804e <_printf_float+0xae>
 80081fa:	3701      	adds	r7, #1
 80081fc:	e7e7      	b.n	80081ce <_printf_float+0x22e>
 80081fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008200:	2b00      	cmp	r3, #0
 8008202:	dc2b      	bgt.n	800825c <_printf_float+0x2bc>
 8008204:	2301      	movs	r3, #1
 8008206:	4a26      	ldr	r2, [pc, #152]	; (80082a0 <_printf_float+0x300>)
 8008208:	4659      	mov	r1, fp
 800820a:	4628      	mov	r0, r5
 800820c:	47b0      	blx	r6
 800820e:	3001      	adds	r0, #1
 8008210:	f43f af1d 	beq.w	800804e <_printf_float+0xae>
 8008214:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008216:	b923      	cbnz	r3, 8008222 <_printf_float+0x282>
 8008218:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800821a:	b913      	cbnz	r3, 8008222 <_printf_float+0x282>
 800821c:	6823      	ldr	r3, [r4, #0]
 800821e:	07d9      	lsls	r1, r3, #31
 8008220:	d5d9      	bpl.n	80081d6 <_printf_float+0x236>
 8008222:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008226:	4659      	mov	r1, fp
 8008228:	4628      	mov	r0, r5
 800822a:	47b0      	blx	r6
 800822c:	3001      	adds	r0, #1
 800822e:	f43f af0e 	beq.w	800804e <_printf_float+0xae>
 8008232:	f04f 0800 	mov.w	r8, #0
 8008236:	f104 091a 	add.w	r9, r4, #26
 800823a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800823c:	425b      	negs	r3, r3
 800823e:	4543      	cmp	r3, r8
 8008240:	dc01      	bgt.n	8008246 <_printf_float+0x2a6>
 8008242:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008244:	e797      	b.n	8008176 <_printf_float+0x1d6>
 8008246:	2301      	movs	r3, #1
 8008248:	464a      	mov	r2, r9
 800824a:	4659      	mov	r1, fp
 800824c:	4628      	mov	r0, r5
 800824e:	47b0      	blx	r6
 8008250:	3001      	adds	r0, #1
 8008252:	f43f aefc 	beq.w	800804e <_printf_float+0xae>
 8008256:	f108 0801 	add.w	r8, r8, #1
 800825a:	e7ee      	b.n	800823a <_printf_float+0x29a>
 800825c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800825e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008260:	429a      	cmp	r2, r3
 8008262:	bfa8      	it	ge
 8008264:	461a      	movge	r2, r3
 8008266:	2a00      	cmp	r2, #0
 8008268:	4690      	mov	r8, r2
 800826a:	dd07      	ble.n	800827c <_printf_float+0x2dc>
 800826c:	4613      	mov	r3, r2
 800826e:	4659      	mov	r1, fp
 8008270:	463a      	mov	r2, r7
 8008272:	4628      	mov	r0, r5
 8008274:	47b0      	blx	r6
 8008276:	3001      	adds	r0, #1
 8008278:	f43f aee9 	beq.w	800804e <_printf_float+0xae>
 800827c:	f104 031a 	add.w	r3, r4, #26
 8008280:	f04f 0a00 	mov.w	sl, #0
 8008284:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8008288:	930b      	str	r3, [sp, #44]	; 0x2c
 800828a:	e015      	b.n	80082b8 <_printf_float+0x318>
 800828c:	7fefffff 	.word	0x7fefffff
 8008290:	0800b50e 	.word	0x0800b50e
 8008294:	0800b50a 	.word	0x0800b50a
 8008298:	0800b516 	.word	0x0800b516
 800829c:	0800b512 	.word	0x0800b512
 80082a0:	0800b51a 	.word	0x0800b51a
 80082a4:	2301      	movs	r3, #1
 80082a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80082a8:	4659      	mov	r1, fp
 80082aa:	4628      	mov	r0, r5
 80082ac:	47b0      	blx	r6
 80082ae:	3001      	adds	r0, #1
 80082b0:	f43f aecd 	beq.w	800804e <_printf_float+0xae>
 80082b4:	f10a 0a01 	add.w	sl, sl, #1
 80082b8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80082bc:	eba9 0308 	sub.w	r3, r9, r8
 80082c0:	4553      	cmp	r3, sl
 80082c2:	dcef      	bgt.n	80082a4 <_printf_float+0x304>
 80082c4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80082c8:	429a      	cmp	r2, r3
 80082ca:	444f      	add	r7, r9
 80082cc:	db14      	blt.n	80082f8 <_printf_float+0x358>
 80082ce:	6823      	ldr	r3, [r4, #0]
 80082d0:	07da      	lsls	r2, r3, #31
 80082d2:	d411      	bmi.n	80082f8 <_printf_float+0x358>
 80082d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082d6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80082d8:	eba3 0209 	sub.w	r2, r3, r9
 80082dc:	eba3 0901 	sub.w	r9, r3, r1
 80082e0:	4591      	cmp	r9, r2
 80082e2:	bfa8      	it	ge
 80082e4:	4691      	movge	r9, r2
 80082e6:	f1b9 0f00 	cmp.w	r9, #0
 80082ea:	dc0d      	bgt.n	8008308 <_printf_float+0x368>
 80082ec:	2700      	movs	r7, #0
 80082ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80082f2:	f104 081a 	add.w	r8, r4, #26
 80082f6:	e018      	b.n	800832a <_printf_float+0x38a>
 80082f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082fc:	4659      	mov	r1, fp
 80082fe:	4628      	mov	r0, r5
 8008300:	47b0      	blx	r6
 8008302:	3001      	adds	r0, #1
 8008304:	d1e6      	bne.n	80082d4 <_printf_float+0x334>
 8008306:	e6a2      	b.n	800804e <_printf_float+0xae>
 8008308:	464b      	mov	r3, r9
 800830a:	463a      	mov	r2, r7
 800830c:	4659      	mov	r1, fp
 800830e:	4628      	mov	r0, r5
 8008310:	47b0      	blx	r6
 8008312:	3001      	adds	r0, #1
 8008314:	d1ea      	bne.n	80082ec <_printf_float+0x34c>
 8008316:	e69a      	b.n	800804e <_printf_float+0xae>
 8008318:	2301      	movs	r3, #1
 800831a:	4642      	mov	r2, r8
 800831c:	4659      	mov	r1, fp
 800831e:	4628      	mov	r0, r5
 8008320:	47b0      	blx	r6
 8008322:	3001      	adds	r0, #1
 8008324:	f43f ae93 	beq.w	800804e <_printf_float+0xae>
 8008328:	3701      	adds	r7, #1
 800832a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800832e:	1a9b      	subs	r3, r3, r2
 8008330:	eba3 0309 	sub.w	r3, r3, r9
 8008334:	42bb      	cmp	r3, r7
 8008336:	dcef      	bgt.n	8008318 <_printf_float+0x378>
 8008338:	e74d      	b.n	80081d6 <_printf_float+0x236>
 800833a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800833c:	2a01      	cmp	r2, #1
 800833e:	dc01      	bgt.n	8008344 <_printf_float+0x3a4>
 8008340:	07db      	lsls	r3, r3, #31
 8008342:	d538      	bpl.n	80083b6 <_printf_float+0x416>
 8008344:	2301      	movs	r3, #1
 8008346:	463a      	mov	r2, r7
 8008348:	4659      	mov	r1, fp
 800834a:	4628      	mov	r0, r5
 800834c:	47b0      	blx	r6
 800834e:	3001      	adds	r0, #1
 8008350:	f43f ae7d 	beq.w	800804e <_printf_float+0xae>
 8008354:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008358:	4659      	mov	r1, fp
 800835a:	4628      	mov	r0, r5
 800835c:	47b0      	blx	r6
 800835e:	3001      	adds	r0, #1
 8008360:	f107 0701 	add.w	r7, r7, #1
 8008364:	f43f ae73 	beq.w	800804e <_printf_float+0xae>
 8008368:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800836c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800836e:	2200      	movs	r2, #0
 8008370:	f103 38ff 	add.w	r8, r3, #4294967295
 8008374:	2300      	movs	r3, #0
 8008376:	f7f8 fb17 	bl	80009a8 <__aeabi_dcmpeq>
 800837a:	b9c0      	cbnz	r0, 80083ae <_printf_float+0x40e>
 800837c:	4643      	mov	r3, r8
 800837e:	463a      	mov	r2, r7
 8008380:	4659      	mov	r1, fp
 8008382:	4628      	mov	r0, r5
 8008384:	47b0      	blx	r6
 8008386:	3001      	adds	r0, #1
 8008388:	d10d      	bne.n	80083a6 <_printf_float+0x406>
 800838a:	e660      	b.n	800804e <_printf_float+0xae>
 800838c:	2301      	movs	r3, #1
 800838e:	4642      	mov	r2, r8
 8008390:	4659      	mov	r1, fp
 8008392:	4628      	mov	r0, r5
 8008394:	47b0      	blx	r6
 8008396:	3001      	adds	r0, #1
 8008398:	f43f ae59 	beq.w	800804e <_printf_float+0xae>
 800839c:	3701      	adds	r7, #1
 800839e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083a0:	3b01      	subs	r3, #1
 80083a2:	42bb      	cmp	r3, r7
 80083a4:	dcf2      	bgt.n	800838c <_printf_float+0x3ec>
 80083a6:	464b      	mov	r3, r9
 80083a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80083ac:	e6e4      	b.n	8008178 <_printf_float+0x1d8>
 80083ae:	2700      	movs	r7, #0
 80083b0:	f104 081a 	add.w	r8, r4, #26
 80083b4:	e7f3      	b.n	800839e <_printf_float+0x3fe>
 80083b6:	2301      	movs	r3, #1
 80083b8:	e7e1      	b.n	800837e <_printf_float+0x3de>
 80083ba:	2301      	movs	r3, #1
 80083bc:	4642      	mov	r2, r8
 80083be:	4659      	mov	r1, fp
 80083c0:	4628      	mov	r0, r5
 80083c2:	47b0      	blx	r6
 80083c4:	3001      	adds	r0, #1
 80083c6:	f43f ae42 	beq.w	800804e <_printf_float+0xae>
 80083ca:	3701      	adds	r7, #1
 80083cc:	68e3      	ldr	r3, [r4, #12]
 80083ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80083d0:	1a9b      	subs	r3, r3, r2
 80083d2:	42bb      	cmp	r3, r7
 80083d4:	dcf1      	bgt.n	80083ba <_printf_float+0x41a>
 80083d6:	e702      	b.n	80081de <_printf_float+0x23e>
 80083d8:	2700      	movs	r7, #0
 80083da:	f104 0819 	add.w	r8, r4, #25
 80083de:	e7f5      	b.n	80083cc <_printf_float+0x42c>
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	f43f ae94 	beq.w	800810e <_printf_float+0x16e>
 80083e6:	f04f 0c00 	mov.w	ip, #0
 80083ea:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80083ee:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80083f2:	6022      	str	r2, [r4, #0]
 80083f4:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80083f8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80083fc:	9300      	str	r3, [sp, #0]
 80083fe:	463a      	mov	r2, r7
 8008400:	464b      	mov	r3, r9
 8008402:	4628      	mov	r0, r5
 8008404:	f7ff fd3a 	bl	8007e7c <__cvt>
 8008408:	4607      	mov	r7, r0
 800840a:	e64f      	b.n	80080ac <_printf_float+0x10c>

0800840c <_printf_common>:
 800840c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008410:	4691      	mov	r9, r2
 8008412:	461f      	mov	r7, r3
 8008414:	688a      	ldr	r2, [r1, #8]
 8008416:	690b      	ldr	r3, [r1, #16]
 8008418:	4606      	mov	r6, r0
 800841a:	4293      	cmp	r3, r2
 800841c:	bfb8      	it	lt
 800841e:	4613      	movlt	r3, r2
 8008420:	f8c9 3000 	str.w	r3, [r9]
 8008424:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008428:	460c      	mov	r4, r1
 800842a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800842e:	b112      	cbz	r2, 8008436 <_printf_common+0x2a>
 8008430:	3301      	adds	r3, #1
 8008432:	f8c9 3000 	str.w	r3, [r9]
 8008436:	6823      	ldr	r3, [r4, #0]
 8008438:	0699      	lsls	r1, r3, #26
 800843a:	bf42      	ittt	mi
 800843c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008440:	3302      	addmi	r3, #2
 8008442:	f8c9 3000 	strmi.w	r3, [r9]
 8008446:	6825      	ldr	r5, [r4, #0]
 8008448:	f015 0506 	ands.w	r5, r5, #6
 800844c:	d107      	bne.n	800845e <_printf_common+0x52>
 800844e:	f104 0a19 	add.w	sl, r4, #25
 8008452:	68e3      	ldr	r3, [r4, #12]
 8008454:	f8d9 2000 	ldr.w	r2, [r9]
 8008458:	1a9b      	subs	r3, r3, r2
 800845a:	42ab      	cmp	r3, r5
 800845c:	dc29      	bgt.n	80084b2 <_printf_common+0xa6>
 800845e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008462:	6822      	ldr	r2, [r4, #0]
 8008464:	3300      	adds	r3, #0
 8008466:	bf18      	it	ne
 8008468:	2301      	movne	r3, #1
 800846a:	0692      	lsls	r2, r2, #26
 800846c:	d42e      	bmi.n	80084cc <_printf_common+0xc0>
 800846e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008472:	4639      	mov	r1, r7
 8008474:	4630      	mov	r0, r6
 8008476:	47c0      	blx	r8
 8008478:	3001      	adds	r0, #1
 800847a:	d021      	beq.n	80084c0 <_printf_common+0xb4>
 800847c:	6823      	ldr	r3, [r4, #0]
 800847e:	68e5      	ldr	r5, [r4, #12]
 8008480:	f003 0306 	and.w	r3, r3, #6
 8008484:	2b04      	cmp	r3, #4
 8008486:	bf18      	it	ne
 8008488:	2500      	movne	r5, #0
 800848a:	f8d9 2000 	ldr.w	r2, [r9]
 800848e:	f04f 0900 	mov.w	r9, #0
 8008492:	bf08      	it	eq
 8008494:	1aad      	subeq	r5, r5, r2
 8008496:	68a3      	ldr	r3, [r4, #8]
 8008498:	6922      	ldr	r2, [r4, #16]
 800849a:	bf08      	it	eq
 800849c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084a0:	4293      	cmp	r3, r2
 80084a2:	bfc4      	itt	gt
 80084a4:	1a9b      	subgt	r3, r3, r2
 80084a6:	18ed      	addgt	r5, r5, r3
 80084a8:	341a      	adds	r4, #26
 80084aa:	454d      	cmp	r5, r9
 80084ac:	d11a      	bne.n	80084e4 <_printf_common+0xd8>
 80084ae:	2000      	movs	r0, #0
 80084b0:	e008      	b.n	80084c4 <_printf_common+0xb8>
 80084b2:	2301      	movs	r3, #1
 80084b4:	4652      	mov	r2, sl
 80084b6:	4639      	mov	r1, r7
 80084b8:	4630      	mov	r0, r6
 80084ba:	47c0      	blx	r8
 80084bc:	3001      	adds	r0, #1
 80084be:	d103      	bne.n	80084c8 <_printf_common+0xbc>
 80084c0:	f04f 30ff 	mov.w	r0, #4294967295
 80084c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084c8:	3501      	adds	r5, #1
 80084ca:	e7c2      	b.n	8008452 <_printf_common+0x46>
 80084cc:	2030      	movs	r0, #48	; 0x30
 80084ce:	18e1      	adds	r1, r4, r3
 80084d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80084d4:	1c5a      	adds	r2, r3, #1
 80084d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80084da:	4422      	add	r2, r4
 80084dc:	3302      	adds	r3, #2
 80084de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80084e2:	e7c4      	b.n	800846e <_printf_common+0x62>
 80084e4:	2301      	movs	r3, #1
 80084e6:	4622      	mov	r2, r4
 80084e8:	4639      	mov	r1, r7
 80084ea:	4630      	mov	r0, r6
 80084ec:	47c0      	blx	r8
 80084ee:	3001      	adds	r0, #1
 80084f0:	d0e6      	beq.n	80084c0 <_printf_common+0xb4>
 80084f2:	f109 0901 	add.w	r9, r9, #1
 80084f6:	e7d8      	b.n	80084aa <_printf_common+0x9e>

080084f8 <_printf_i>:
 80084f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80084fc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008500:	460c      	mov	r4, r1
 8008502:	7e09      	ldrb	r1, [r1, #24]
 8008504:	b085      	sub	sp, #20
 8008506:	296e      	cmp	r1, #110	; 0x6e
 8008508:	4617      	mov	r7, r2
 800850a:	4606      	mov	r6, r0
 800850c:	4698      	mov	r8, r3
 800850e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008510:	f000 80b3 	beq.w	800867a <_printf_i+0x182>
 8008514:	d822      	bhi.n	800855c <_printf_i+0x64>
 8008516:	2963      	cmp	r1, #99	; 0x63
 8008518:	d036      	beq.n	8008588 <_printf_i+0x90>
 800851a:	d80a      	bhi.n	8008532 <_printf_i+0x3a>
 800851c:	2900      	cmp	r1, #0
 800851e:	f000 80b9 	beq.w	8008694 <_printf_i+0x19c>
 8008522:	2958      	cmp	r1, #88	; 0x58
 8008524:	f000 8083 	beq.w	800862e <_printf_i+0x136>
 8008528:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800852c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008530:	e032      	b.n	8008598 <_printf_i+0xa0>
 8008532:	2964      	cmp	r1, #100	; 0x64
 8008534:	d001      	beq.n	800853a <_printf_i+0x42>
 8008536:	2969      	cmp	r1, #105	; 0x69
 8008538:	d1f6      	bne.n	8008528 <_printf_i+0x30>
 800853a:	6820      	ldr	r0, [r4, #0]
 800853c:	6813      	ldr	r3, [r2, #0]
 800853e:	0605      	lsls	r5, r0, #24
 8008540:	f103 0104 	add.w	r1, r3, #4
 8008544:	d52a      	bpl.n	800859c <_printf_i+0xa4>
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	6011      	str	r1, [r2, #0]
 800854a:	2b00      	cmp	r3, #0
 800854c:	da03      	bge.n	8008556 <_printf_i+0x5e>
 800854e:	222d      	movs	r2, #45	; 0x2d
 8008550:	425b      	negs	r3, r3
 8008552:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008556:	486f      	ldr	r0, [pc, #444]	; (8008714 <_printf_i+0x21c>)
 8008558:	220a      	movs	r2, #10
 800855a:	e039      	b.n	80085d0 <_printf_i+0xd8>
 800855c:	2973      	cmp	r1, #115	; 0x73
 800855e:	f000 809d 	beq.w	800869c <_printf_i+0x1a4>
 8008562:	d808      	bhi.n	8008576 <_printf_i+0x7e>
 8008564:	296f      	cmp	r1, #111	; 0x6f
 8008566:	d020      	beq.n	80085aa <_printf_i+0xb2>
 8008568:	2970      	cmp	r1, #112	; 0x70
 800856a:	d1dd      	bne.n	8008528 <_printf_i+0x30>
 800856c:	6823      	ldr	r3, [r4, #0]
 800856e:	f043 0320 	orr.w	r3, r3, #32
 8008572:	6023      	str	r3, [r4, #0]
 8008574:	e003      	b.n	800857e <_printf_i+0x86>
 8008576:	2975      	cmp	r1, #117	; 0x75
 8008578:	d017      	beq.n	80085aa <_printf_i+0xb2>
 800857a:	2978      	cmp	r1, #120	; 0x78
 800857c:	d1d4      	bne.n	8008528 <_printf_i+0x30>
 800857e:	2378      	movs	r3, #120	; 0x78
 8008580:	4865      	ldr	r0, [pc, #404]	; (8008718 <_printf_i+0x220>)
 8008582:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008586:	e055      	b.n	8008634 <_printf_i+0x13c>
 8008588:	6813      	ldr	r3, [r2, #0]
 800858a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800858e:	1d19      	adds	r1, r3, #4
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	6011      	str	r1, [r2, #0]
 8008594:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008598:	2301      	movs	r3, #1
 800859a:	e08c      	b.n	80086b6 <_printf_i+0x1be>
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80085a2:	6011      	str	r1, [r2, #0]
 80085a4:	bf18      	it	ne
 80085a6:	b21b      	sxthne	r3, r3
 80085a8:	e7cf      	b.n	800854a <_printf_i+0x52>
 80085aa:	6813      	ldr	r3, [r2, #0]
 80085ac:	6825      	ldr	r5, [r4, #0]
 80085ae:	1d18      	adds	r0, r3, #4
 80085b0:	6010      	str	r0, [r2, #0]
 80085b2:	0628      	lsls	r0, r5, #24
 80085b4:	d501      	bpl.n	80085ba <_printf_i+0xc2>
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	e002      	b.n	80085c0 <_printf_i+0xc8>
 80085ba:	0668      	lsls	r0, r5, #25
 80085bc:	d5fb      	bpl.n	80085b6 <_printf_i+0xbe>
 80085be:	881b      	ldrh	r3, [r3, #0]
 80085c0:	296f      	cmp	r1, #111	; 0x6f
 80085c2:	bf14      	ite	ne
 80085c4:	220a      	movne	r2, #10
 80085c6:	2208      	moveq	r2, #8
 80085c8:	4852      	ldr	r0, [pc, #328]	; (8008714 <_printf_i+0x21c>)
 80085ca:	2100      	movs	r1, #0
 80085cc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80085d0:	6865      	ldr	r5, [r4, #4]
 80085d2:	2d00      	cmp	r5, #0
 80085d4:	60a5      	str	r5, [r4, #8]
 80085d6:	f2c0 8095 	blt.w	8008704 <_printf_i+0x20c>
 80085da:	6821      	ldr	r1, [r4, #0]
 80085dc:	f021 0104 	bic.w	r1, r1, #4
 80085e0:	6021      	str	r1, [r4, #0]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d13d      	bne.n	8008662 <_printf_i+0x16a>
 80085e6:	2d00      	cmp	r5, #0
 80085e8:	f040 808e 	bne.w	8008708 <_printf_i+0x210>
 80085ec:	4665      	mov	r5, ip
 80085ee:	2a08      	cmp	r2, #8
 80085f0:	d10b      	bne.n	800860a <_printf_i+0x112>
 80085f2:	6823      	ldr	r3, [r4, #0]
 80085f4:	07db      	lsls	r3, r3, #31
 80085f6:	d508      	bpl.n	800860a <_printf_i+0x112>
 80085f8:	6923      	ldr	r3, [r4, #16]
 80085fa:	6862      	ldr	r2, [r4, #4]
 80085fc:	429a      	cmp	r2, r3
 80085fe:	bfde      	ittt	le
 8008600:	2330      	movle	r3, #48	; 0x30
 8008602:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008606:	f105 35ff 	addle.w	r5, r5, #4294967295
 800860a:	ebac 0305 	sub.w	r3, ip, r5
 800860e:	6123      	str	r3, [r4, #16]
 8008610:	f8cd 8000 	str.w	r8, [sp]
 8008614:	463b      	mov	r3, r7
 8008616:	aa03      	add	r2, sp, #12
 8008618:	4621      	mov	r1, r4
 800861a:	4630      	mov	r0, r6
 800861c:	f7ff fef6 	bl	800840c <_printf_common>
 8008620:	3001      	adds	r0, #1
 8008622:	d14d      	bne.n	80086c0 <_printf_i+0x1c8>
 8008624:	f04f 30ff 	mov.w	r0, #4294967295
 8008628:	b005      	add	sp, #20
 800862a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800862e:	4839      	ldr	r0, [pc, #228]	; (8008714 <_printf_i+0x21c>)
 8008630:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008634:	6813      	ldr	r3, [r2, #0]
 8008636:	6821      	ldr	r1, [r4, #0]
 8008638:	1d1d      	adds	r5, r3, #4
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	6015      	str	r5, [r2, #0]
 800863e:	060a      	lsls	r2, r1, #24
 8008640:	d50b      	bpl.n	800865a <_printf_i+0x162>
 8008642:	07ca      	lsls	r2, r1, #31
 8008644:	bf44      	itt	mi
 8008646:	f041 0120 	orrmi.w	r1, r1, #32
 800864a:	6021      	strmi	r1, [r4, #0]
 800864c:	b91b      	cbnz	r3, 8008656 <_printf_i+0x15e>
 800864e:	6822      	ldr	r2, [r4, #0]
 8008650:	f022 0220 	bic.w	r2, r2, #32
 8008654:	6022      	str	r2, [r4, #0]
 8008656:	2210      	movs	r2, #16
 8008658:	e7b7      	b.n	80085ca <_printf_i+0xd2>
 800865a:	064d      	lsls	r5, r1, #25
 800865c:	bf48      	it	mi
 800865e:	b29b      	uxthmi	r3, r3
 8008660:	e7ef      	b.n	8008642 <_printf_i+0x14a>
 8008662:	4665      	mov	r5, ip
 8008664:	fbb3 f1f2 	udiv	r1, r3, r2
 8008668:	fb02 3311 	mls	r3, r2, r1, r3
 800866c:	5cc3      	ldrb	r3, [r0, r3]
 800866e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008672:	460b      	mov	r3, r1
 8008674:	2900      	cmp	r1, #0
 8008676:	d1f5      	bne.n	8008664 <_printf_i+0x16c>
 8008678:	e7b9      	b.n	80085ee <_printf_i+0xf6>
 800867a:	6813      	ldr	r3, [r2, #0]
 800867c:	6825      	ldr	r5, [r4, #0]
 800867e:	1d18      	adds	r0, r3, #4
 8008680:	6961      	ldr	r1, [r4, #20]
 8008682:	6010      	str	r0, [r2, #0]
 8008684:	0628      	lsls	r0, r5, #24
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	d501      	bpl.n	800868e <_printf_i+0x196>
 800868a:	6019      	str	r1, [r3, #0]
 800868c:	e002      	b.n	8008694 <_printf_i+0x19c>
 800868e:	066a      	lsls	r2, r5, #25
 8008690:	d5fb      	bpl.n	800868a <_printf_i+0x192>
 8008692:	8019      	strh	r1, [r3, #0]
 8008694:	2300      	movs	r3, #0
 8008696:	4665      	mov	r5, ip
 8008698:	6123      	str	r3, [r4, #16]
 800869a:	e7b9      	b.n	8008610 <_printf_i+0x118>
 800869c:	6813      	ldr	r3, [r2, #0]
 800869e:	1d19      	adds	r1, r3, #4
 80086a0:	6011      	str	r1, [r2, #0]
 80086a2:	681d      	ldr	r5, [r3, #0]
 80086a4:	6862      	ldr	r2, [r4, #4]
 80086a6:	2100      	movs	r1, #0
 80086a8:	4628      	mov	r0, r5
 80086aa:	f000 feb7 	bl	800941c <memchr>
 80086ae:	b108      	cbz	r0, 80086b4 <_printf_i+0x1bc>
 80086b0:	1b40      	subs	r0, r0, r5
 80086b2:	6060      	str	r0, [r4, #4]
 80086b4:	6863      	ldr	r3, [r4, #4]
 80086b6:	6123      	str	r3, [r4, #16]
 80086b8:	2300      	movs	r3, #0
 80086ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086be:	e7a7      	b.n	8008610 <_printf_i+0x118>
 80086c0:	6923      	ldr	r3, [r4, #16]
 80086c2:	462a      	mov	r2, r5
 80086c4:	4639      	mov	r1, r7
 80086c6:	4630      	mov	r0, r6
 80086c8:	47c0      	blx	r8
 80086ca:	3001      	adds	r0, #1
 80086cc:	d0aa      	beq.n	8008624 <_printf_i+0x12c>
 80086ce:	6823      	ldr	r3, [r4, #0]
 80086d0:	079b      	lsls	r3, r3, #30
 80086d2:	d413      	bmi.n	80086fc <_printf_i+0x204>
 80086d4:	68e0      	ldr	r0, [r4, #12]
 80086d6:	9b03      	ldr	r3, [sp, #12]
 80086d8:	4298      	cmp	r0, r3
 80086da:	bfb8      	it	lt
 80086dc:	4618      	movlt	r0, r3
 80086de:	e7a3      	b.n	8008628 <_printf_i+0x130>
 80086e0:	2301      	movs	r3, #1
 80086e2:	464a      	mov	r2, r9
 80086e4:	4639      	mov	r1, r7
 80086e6:	4630      	mov	r0, r6
 80086e8:	47c0      	blx	r8
 80086ea:	3001      	adds	r0, #1
 80086ec:	d09a      	beq.n	8008624 <_printf_i+0x12c>
 80086ee:	3501      	adds	r5, #1
 80086f0:	68e3      	ldr	r3, [r4, #12]
 80086f2:	9a03      	ldr	r2, [sp, #12]
 80086f4:	1a9b      	subs	r3, r3, r2
 80086f6:	42ab      	cmp	r3, r5
 80086f8:	dcf2      	bgt.n	80086e0 <_printf_i+0x1e8>
 80086fa:	e7eb      	b.n	80086d4 <_printf_i+0x1dc>
 80086fc:	2500      	movs	r5, #0
 80086fe:	f104 0919 	add.w	r9, r4, #25
 8008702:	e7f5      	b.n	80086f0 <_printf_i+0x1f8>
 8008704:	2b00      	cmp	r3, #0
 8008706:	d1ac      	bne.n	8008662 <_printf_i+0x16a>
 8008708:	7803      	ldrb	r3, [r0, #0]
 800870a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800870e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008712:	e76c      	b.n	80085ee <_printf_i+0xf6>
 8008714:	0800b51c 	.word	0x0800b51c
 8008718:	0800b52d 	.word	0x0800b52d

0800871c <_sbrk_r>:
 800871c:	b538      	push	{r3, r4, r5, lr}
 800871e:	2300      	movs	r3, #0
 8008720:	4c05      	ldr	r4, [pc, #20]	; (8008738 <_sbrk_r+0x1c>)
 8008722:	4605      	mov	r5, r0
 8008724:	4608      	mov	r0, r1
 8008726:	6023      	str	r3, [r4, #0]
 8008728:	f7f9 fcca 	bl	80020c0 <_sbrk>
 800872c:	1c43      	adds	r3, r0, #1
 800872e:	d102      	bne.n	8008736 <_sbrk_r+0x1a>
 8008730:	6823      	ldr	r3, [r4, #0]
 8008732:	b103      	cbz	r3, 8008736 <_sbrk_r+0x1a>
 8008734:	602b      	str	r3, [r5, #0]
 8008736:	bd38      	pop	{r3, r4, r5, pc}
 8008738:	200041a8 	.word	0x200041a8

0800873c <siprintf>:
 800873c:	b40e      	push	{r1, r2, r3}
 800873e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008742:	b500      	push	{lr}
 8008744:	b09c      	sub	sp, #112	; 0x70
 8008746:	ab1d      	add	r3, sp, #116	; 0x74
 8008748:	9002      	str	r0, [sp, #8]
 800874a:	9006      	str	r0, [sp, #24]
 800874c:	9107      	str	r1, [sp, #28]
 800874e:	9104      	str	r1, [sp, #16]
 8008750:	4808      	ldr	r0, [pc, #32]	; (8008774 <siprintf+0x38>)
 8008752:	4909      	ldr	r1, [pc, #36]	; (8008778 <siprintf+0x3c>)
 8008754:	f853 2b04 	ldr.w	r2, [r3], #4
 8008758:	9105      	str	r1, [sp, #20]
 800875a:	6800      	ldr	r0, [r0, #0]
 800875c:	a902      	add	r1, sp, #8
 800875e:	9301      	str	r3, [sp, #4]
 8008760:	f001 f9b0 	bl	8009ac4 <_svfiprintf_r>
 8008764:	2200      	movs	r2, #0
 8008766:	9b02      	ldr	r3, [sp, #8]
 8008768:	701a      	strb	r2, [r3, #0]
 800876a:	b01c      	add	sp, #112	; 0x70
 800876c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008770:	b003      	add	sp, #12
 8008772:	4770      	bx	lr
 8008774:	200001a8 	.word	0x200001a8
 8008778:	ffff0208 	.word	0xffff0208

0800877c <quorem>:
 800877c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008780:	6903      	ldr	r3, [r0, #16]
 8008782:	690c      	ldr	r4, [r1, #16]
 8008784:	4680      	mov	r8, r0
 8008786:	42a3      	cmp	r3, r4
 8008788:	f2c0 8084 	blt.w	8008894 <quorem+0x118>
 800878c:	3c01      	subs	r4, #1
 800878e:	f101 0714 	add.w	r7, r1, #20
 8008792:	f100 0614 	add.w	r6, r0, #20
 8008796:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800879a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800879e:	3501      	adds	r5, #1
 80087a0:	fbb0 f5f5 	udiv	r5, r0, r5
 80087a4:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80087a8:	eb06 030c 	add.w	r3, r6, ip
 80087ac:	eb07 090c 	add.w	r9, r7, ip
 80087b0:	9301      	str	r3, [sp, #4]
 80087b2:	b39d      	cbz	r5, 800881c <quorem+0xa0>
 80087b4:	f04f 0a00 	mov.w	sl, #0
 80087b8:	4638      	mov	r0, r7
 80087ba:	46b6      	mov	lr, r6
 80087bc:	46d3      	mov	fp, sl
 80087be:	f850 2b04 	ldr.w	r2, [r0], #4
 80087c2:	b293      	uxth	r3, r2
 80087c4:	fb05 a303 	mla	r3, r5, r3, sl
 80087c8:	0c12      	lsrs	r2, r2, #16
 80087ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80087ce:	fb05 a202 	mla	r2, r5, r2, sl
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	ebab 0303 	sub.w	r3, fp, r3
 80087d8:	f8de b000 	ldr.w	fp, [lr]
 80087dc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80087e0:	fa1f fb8b 	uxth.w	fp, fp
 80087e4:	445b      	add	r3, fp
 80087e6:	fa1f fb82 	uxth.w	fp, r2
 80087ea:	f8de 2000 	ldr.w	r2, [lr]
 80087ee:	4581      	cmp	r9, r0
 80087f0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80087f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087fe:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008802:	f84e 3b04 	str.w	r3, [lr], #4
 8008806:	d2da      	bcs.n	80087be <quorem+0x42>
 8008808:	f856 300c 	ldr.w	r3, [r6, ip]
 800880c:	b933      	cbnz	r3, 800881c <quorem+0xa0>
 800880e:	9b01      	ldr	r3, [sp, #4]
 8008810:	3b04      	subs	r3, #4
 8008812:	429e      	cmp	r6, r3
 8008814:	461a      	mov	r2, r3
 8008816:	d331      	bcc.n	800887c <quorem+0x100>
 8008818:	f8c8 4010 	str.w	r4, [r8, #16]
 800881c:	4640      	mov	r0, r8
 800881e:	f001 f821 	bl	8009864 <__mcmp>
 8008822:	2800      	cmp	r0, #0
 8008824:	db26      	blt.n	8008874 <quorem+0xf8>
 8008826:	4630      	mov	r0, r6
 8008828:	f04f 0c00 	mov.w	ip, #0
 800882c:	3501      	adds	r5, #1
 800882e:	f857 1b04 	ldr.w	r1, [r7], #4
 8008832:	f8d0 e000 	ldr.w	lr, [r0]
 8008836:	b28b      	uxth	r3, r1
 8008838:	ebac 0303 	sub.w	r3, ip, r3
 800883c:	fa1f f28e 	uxth.w	r2, lr
 8008840:	4413      	add	r3, r2
 8008842:	0c0a      	lsrs	r2, r1, #16
 8008844:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008848:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800884c:	b29b      	uxth	r3, r3
 800884e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008852:	45b9      	cmp	r9, r7
 8008854:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008858:	f840 3b04 	str.w	r3, [r0], #4
 800885c:	d2e7      	bcs.n	800882e <quorem+0xb2>
 800885e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008862:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008866:	b92a      	cbnz	r2, 8008874 <quorem+0xf8>
 8008868:	3b04      	subs	r3, #4
 800886a:	429e      	cmp	r6, r3
 800886c:	461a      	mov	r2, r3
 800886e:	d30b      	bcc.n	8008888 <quorem+0x10c>
 8008870:	f8c8 4010 	str.w	r4, [r8, #16]
 8008874:	4628      	mov	r0, r5
 8008876:	b003      	add	sp, #12
 8008878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800887c:	6812      	ldr	r2, [r2, #0]
 800887e:	3b04      	subs	r3, #4
 8008880:	2a00      	cmp	r2, #0
 8008882:	d1c9      	bne.n	8008818 <quorem+0x9c>
 8008884:	3c01      	subs	r4, #1
 8008886:	e7c4      	b.n	8008812 <quorem+0x96>
 8008888:	6812      	ldr	r2, [r2, #0]
 800888a:	3b04      	subs	r3, #4
 800888c:	2a00      	cmp	r2, #0
 800888e:	d1ef      	bne.n	8008870 <quorem+0xf4>
 8008890:	3c01      	subs	r4, #1
 8008892:	e7ea      	b.n	800886a <quorem+0xee>
 8008894:	2000      	movs	r0, #0
 8008896:	e7ee      	b.n	8008876 <quorem+0xfa>

08008898 <_dtoa_r>:
 8008898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800889c:	4616      	mov	r6, r2
 800889e:	461f      	mov	r7, r3
 80088a0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80088a2:	b095      	sub	sp, #84	; 0x54
 80088a4:	4604      	mov	r4, r0
 80088a6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80088aa:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80088ae:	b93d      	cbnz	r5, 80088c0 <_dtoa_r+0x28>
 80088b0:	2010      	movs	r0, #16
 80088b2:	f7ff fa21 	bl	8007cf8 <malloc>
 80088b6:	6260      	str	r0, [r4, #36]	; 0x24
 80088b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80088bc:	6005      	str	r5, [r0, #0]
 80088be:	60c5      	str	r5, [r0, #12]
 80088c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088c2:	6819      	ldr	r1, [r3, #0]
 80088c4:	b151      	cbz	r1, 80088dc <_dtoa_r+0x44>
 80088c6:	685a      	ldr	r2, [r3, #4]
 80088c8:	2301      	movs	r3, #1
 80088ca:	4093      	lsls	r3, r2
 80088cc:	604a      	str	r2, [r1, #4]
 80088ce:	608b      	str	r3, [r1, #8]
 80088d0:	4620      	mov	r0, r4
 80088d2:	f000 fde7 	bl	80094a4 <_Bfree>
 80088d6:	2200      	movs	r2, #0
 80088d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088da:	601a      	str	r2, [r3, #0]
 80088dc:	1e3b      	subs	r3, r7, #0
 80088de:	bfaf      	iteee	ge
 80088e0:	2300      	movge	r3, #0
 80088e2:	2201      	movlt	r2, #1
 80088e4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80088e8:	9303      	strlt	r3, [sp, #12]
 80088ea:	bfac      	ite	ge
 80088ec:	f8c8 3000 	strge.w	r3, [r8]
 80088f0:	f8c8 2000 	strlt.w	r2, [r8]
 80088f4:	4bae      	ldr	r3, [pc, #696]	; (8008bb0 <_dtoa_r+0x318>)
 80088f6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80088fa:	ea33 0308 	bics.w	r3, r3, r8
 80088fe:	d11b      	bne.n	8008938 <_dtoa_r+0xa0>
 8008900:	f242 730f 	movw	r3, #9999	; 0x270f
 8008904:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008906:	6013      	str	r3, [r2, #0]
 8008908:	9b02      	ldr	r3, [sp, #8]
 800890a:	b923      	cbnz	r3, 8008916 <_dtoa_r+0x7e>
 800890c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008910:	2800      	cmp	r0, #0
 8008912:	f000 8545 	beq.w	80093a0 <_dtoa_r+0xb08>
 8008916:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008918:	b953      	cbnz	r3, 8008930 <_dtoa_r+0x98>
 800891a:	4ba6      	ldr	r3, [pc, #664]	; (8008bb4 <_dtoa_r+0x31c>)
 800891c:	e021      	b.n	8008962 <_dtoa_r+0xca>
 800891e:	4ba6      	ldr	r3, [pc, #664]	; (8008bb8 <_dtoa_r+0x320>)
 8008920:	9306      	str	r3, [sp, #24]
 8008922:	3308      	adds	r3, #8
 8008924:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008926:	6013      	str	r3, [r2, #0]
 8008928:	9806      	ldr	r0, [sp, #24]
 800892a:	b015      	add	sp, #84	; 0x54
 800892c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008930:	4ba0      	ldr	r3, [pc, #640]	; (8008bb4 <_dtoa_r+0x31c>)
 8008932:	9306      	str	r3, [sp, #24]
 8008934:	3303      	adds	r3, #3
 8008936:	e7f5      	b.n	8008924 <_dtoa_r+0x8c>
 8008938:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800893c:	2200      	movs	r2, #0
 800893e:	2300      	movs	r3, #0
 8008940:	4630      	mov	r0, r6
 8008942:	4639      	mov	r1, r7
 8008944:	f7f8 f830 	bl	80009a8 <__aeabi_dcmpeq>
 8008948:	4682      	mov	sl, r0
 800894a:	b160      	cbz	r0, 8008966 <_dtoa_r+0xce>
 800894c:	2301      	movs	r3, #1
 800894e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008950:	6013      	str	r3, [r2, #0]
 8008952:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008954:	2b00      	cmp	r3, #0
 8008956:	f000 8520 	beq.w	800939a <_dtoa_r+0xb02>
 800895a:	4b98      	ldr	r3, [pc, #608]	; (8008bbc <_dtoa_r+0x324>)
 800895c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800895e:	6013      	str	r3, [r2, #0]
 8008960:	3b01      	subs	r3, #1
 8008962:	9306      	str	r3, [sp, #24]
 8008964:	e7e0      	b.n	8008928 <_dtoa_r+0x90>
 8008966:	ab12      	add	r3, sp, #72	; 0x48
 8008968:	9301      	str	r3, [sp, #4]
 800896a:	ab13      	add	r3, sp, #76	; 0x4c
 800896c:	9300      	str	r3, [sp, #0]
 800896e:	4632      	mov	r2, r6
 8008970:	463b      	mov	r3, r7
 8008972:	4620      	mov	r0, r4
 8008974:	f000 ffee 	bl	8009954 <__d2b>
 8008978:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800897c:	4683      	mov	fp, r0
 800897e:	2d00      	cmp	r5, #0
 8008980:	d07d      	beq.n	8008a7e <_dtoa_r+0x1e6>
 8008982:	46b0      	mov	r8, r6
 8008984:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008988:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800898c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8008990:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008994:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8008998:	2200      	movs	r2, #0
 800899a:	4b89      	ldr	r3, [pc, #548]	; (8008bc0 <_dtoa_r+0x328>)
 800899c:	4640      	mov	r0, r8
 800899e:	4649      	mov	r1, r9
 80089a0:	f7f7 fbe2 	bl	8000168 <__aeabi_dsub>
 80089a4:	a37c      	add	r3, pc, #496	; (adr r3, 8008b98 <_dtoa_r+0x300>)
 80089a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089aa:	f7f7 fd95 	bl	80004d8 <__aeabi_dmul>
 80089ae:	a37c      	add	r3, pc, #496	; (adr r3, 8008ba0 <_dtoa_r+0x308>)
 80089b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b4:	f7f7 fbda 	bl	800016c <__adddf3>
 80089b8:	4606      	mov	r6, r0
 80089ba:	4628      	mov	r0, r5
 80089bc:	460f      	mov	r7, r1
 80089be:	f7f7 fd21 	bl	8000404 <__aeabi_i2d>
 80089c2:	a379      	add	r3, pc, #484	; (adr r3, 8008ba8 <_dtoa_r+0x310>)
 80089c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c8:	f7f7 fd86 	bl	80004d8 <__aeabi_dmul>
 80089cc:	4602      	mov	r2, r0
 80089ce:	460b      	mov	r3, r1
 80089d0:	4630      	mov	r0, r6
 80089d2:	4639      	mov	r1, r7
 80089d4:	f7f7 fbca 	bl	800016c <__adddf3>
 80089d8:	4606      	mov	r6, r0
 80089da:	460f      	mov	r7, r1
 80089dc:	f7f8 f82c 	bl	8000a38 <__aeabi_d2iz>
 80089e0:	2200      	movs	r2, #0
 80089e2:	4682      	mov	sl, r0
 80089e4:	2300      	movs	r3, #0
 80089e6:	4630      	mov	r0, r6
 80089e8:	4639      	mov	r1, r7
 80089ea:	f7f7 ffe7 	bl	80009bc <__aeabi_dcmplt>
 80089ee:	b148      	cbz	r0, 8008a04 <_dtoa_r+0x16c>
 80089f0:	4650      	mov	r0, sl
 80089f2:	f7f7 fd07 	bl	8000404 <__aeabi_i2d>
 80089f6:	4632      	mov	r2, r6
 80089f8:	463b      	mov	r3, r7
 80089fa:	f7f7 ffd5 	bl	80009a8 <__aeabi_dcmpeq>
 80089fe:	b908      	cbnz	r0, 8008a04 <_dtoa_r+0x16c>
 8008a00:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a04:	f1ba 0f16 	cmp.w	sl, #22
 8008a08:	d85a      	bhi.n	8008ac0 <_dtoa_r+0x228>
 8008a0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a0e:	496d      	ldr	r1, [pc, #436]	; (8008bc4 <_dtoa_r+0x32c>)
 8008a10:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008a14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a18:	f7f7 ffee 	bl	80009f8 <__aeabi_dcmpgt>
 8008a1c:	2800      	cmp	r0, #0
 8008a1e:	d051      	beq.n	8008ac4 <_dtoa_r+0x22c>
 8008a20:	2300      	movs	r3, #0
 8008a22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a26:	930d      	str	r3, [sp, #52]	; 0x34
 8008a28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a2a:	1b5d      	subs	r5, r3, r5
 8008a2c:	1e6b      	subs	r3, r5, #1
 8008a2e:	9307      	str	r3, [sp, #28]
 8008a30:	bf43      	ittte	mi
 8008a32:	2300      	movmi	r3, #0
 8008a34:	f1c5 0901 	rsbmi	r9, r5, #1
 8008a38:	9307      	strmi	r3, [sp, #28]
 8008a3a:	f04f 0900 	movpl.w	r9, #0
 8008a3e:	f1ba 0f00 	cmp.w	sl, #0
 8008a42:	db41      	blt.n	8008ac8 <_dtoa_r+0x230>
 8008a44:	9b07      	ldr	r3, [sp, #28]
 8008a46:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8008a4a:	4453      	add	r3, sl
 8008a4c:	9307      	str	r3, [sp, #28]
 8008a4e:	2300      	movs	r3, #0
 8008a50:	9308      	str	r3, [sp, #32]
 8008a52:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008a54:	2b09      	cmp	r3, #9
 8008a56:	f200 808f 	bhi.w	8008b78 <_dtoa_r+0x2e0>
 8008a5a:	2b05      	cmp	r3, #5
 8008a5c:	bfc4      	itt	gt
 8008a5e:	3b04      	subgt	r3, #4
 8008a60:	931e      	strgt	r3, [sp, #120]	; 0x78
 8008a62:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008a64:	bfc8      	it	gt
 8008a66:	2500      	movgt	r5, #0
 8008a68:	f1a3 0302 	sub.w	r3, r3, #2
 8008a6c:	bfd8      	it	le
 8008a6e:	2501      	movle	r5, #1
 8008a70:	2b03      	cmp	r3, #3
 8008a72:	f200 808d 	bhi.w	8008b90 <_dtoa_r+0x2f8>
 8008a76:	e8df f003 	tbb	[pc, r3]
 8008a7a:	7d7b      	.short	0x7d7b
 8008a7c:	6f2f      	.short	0x6f2f
 8008a7e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008a82:	441d      	add	r5, r3
 8008a84:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008a88:	2820      	cmp	r0, #32
 8008a8a:	dd13      	ble.n	8008ab4 <_dtoa_r+0x21c>
 8008a8c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008a90:	9b02      	ldr	r3, [sp, #8]
 8008a92:	fa08 f800 	lsl.w	r8, r8, r0
 8008a96:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008a9a:	fa23 f000 	lsr.w	r0, r3, r0
 8008a9e:	ea48 0000 	orr.w	r0, r8, r0
 8008aa2:	f7f7 fc9f 	bl	80003e4 <__aeabi_ui2d>
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	4680      	mov	r8, r0
 8008aaa:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8008aae:	3d01      	subs	r5, #1
 8008ab0:	9310      	str	r3, [sp, #64]	; 0x40
 8008ab2:	e771      	b.n	8008998 <_dtoa_r+0x100>
 8008ab4:	9b02      	ldr	r3, [sp, #8]
 8008ab6:	f1c0 0020 	rsb	r0, r0, #32
 8008aba:	fa03 f000 	lsl.w	r0, r3, r0
 8008abe:	e7f0      	b.n	8008aa2 <_dtoa_r+0x20a>
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	e7b0      	b.n	8008a26 <_dtoa_r+0x18e>
 8008ac4:	900d      	str	r0, [sp, #52]	; 0x34
 8008ac6:	e7af      	b.n	8008a28 <_dtoa_r+0x190>
 8008ac8:	f1ca 0300 	rsb	r3, sl, #0
 8008acc:	9308      	str	r3, [sp, #32]
 8008ace:	2300      	movs	r3, #0
 8008ad0:	eba9 090a 	sub.w	r9, r9, sl
 8008ad4:	930c      	str	r3, [sp, #48]	; 0x30
 8008ad6:	e7bc      	b.n	8008a52 <_dtoa_r+0x1ba>
 8008ad8:	2301      	movs	r3, #1
 8008ada:	9309      	str	r3, [sp, #36]	; 0x24
 8008adc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	dd74      	ble.n	8008bcc <_dtoa_r+0x334>
 8008ae2:	4698      	mov	r8, r3
 8008ae4:	9304      	str	r3, [sp, #16]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008aea:	6072      	str	r2, [r6, #4]
 8008aec:	2204      	movs	r2, #4
 8008aee:	f102 0014 	add.w	r0, r2, #20
 8008af2:	4298      	cmp	r0, r3
 8008af4:	6871      	ldr	r1, [r6, #4]
 8008af6:	d96e      	bls.n	8008bd6 <_dtoa_r+0x33e>
 8008af8:	4620      	mov	r0, r4
 8008afa:	f000 fc9f 	bl	800943c <_Balloc>
 8008afe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b00:	6030      	str	r0, [r6, #0]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f1b8 0f0e 	cmp.w	r8, #14
 8008b08:	9306      	str	r3, [sp, #24]
 8008b0a:	f200 80ed 	bhi.w	8008ce8 <_dtoa_r+0x450>
 8008b0e:	2d00      	cmp	r5, #0
 8008b10:	f000 80ea 	beq.w	8008ce8 <_dtoa_r+0x450>
 8008b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b18:	f1ba 0f00 	cmp.w	sl, #0
 8008b1c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008b20:	dd77      	ble.n	8008c12 <_dtoa_r+0x37a>
 8008b22:	4a28      	ldr	r2, [pc, #160]	; (8008bc4 <_dtoa_r+0x32c>)
 8008b24:	f00a 030f 	and.w	r3, sl, #15
 8008b28:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008b2c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008b30:	06f0      	lsls	r0, r6, #27
 8008b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b36:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008b3a:	d568      	bpl.n	8008c0e <_dtoa_r+0x376>
 8008b3c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008b40:	4b21      	ldr	r3, [pc, #132]	; (8008bc8 <_dtoa_r+0x330>)
 8008b42:	2503      	movs	r5, #3
 8008b44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b48:	f7f7 fdf0 	bl	800072c <__aeabi_ddiv>
 8008b4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b50:	f006 060f 	and.w	r6, r6, #15
 8008b54:	4f1c      	ldr	r7, [pc, #112]	; (8008bc8 <_dtoa_r+0x330>)
 8008b56:	e04f      	b.n	8008bf8 <_dtoa_r+0x360>
 8008b58:	2301      	movs	r3, #1
 8008b5a:	9309      	str	r3, [sp, #36]	; 0x24
 8008b5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008b5e:	4453      	add	r3, sl
 8008b60:	f103 0801 	add.w	r8, r3, #1
 8008b64:	9304      	str	r3, [sp, #16]
 8008b66:	4643      	mov	r3, r8
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	bfb8      	it	lt
 8008b6c:	2301      	movlt	r3, #1
 8008b6e:	e7ba      	b.n	8008ae6 <_dtoa_r+0x24e>
 8008b70:	2300      	movs	r3, #0
 8008b72:	e7b2      	b.n	8008ada <_dtoa_r+0x242>
 8008b74:	2300      	movs	r3, #0
 8008b76:	e7f0      	b.n	8008b5a <_dtoa_r+0x2c2>
 8008b78:	2501      	movs	r5, #1
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	9509      	str	r5, [sp, #36]	; 0x24
 8008b7e:	931e      	str	r3, [sp, #120]	; 0x78
 8008b80:	f04f 33ff 	mov.w	r3, #4294967295
 8008b84:	2200      	movs	r2, #0
 8008b86:	9304      	str	r3, [sp, #16]
 8008b88:	4698      	mov	r8, r3
 8008b8a:	2312      	movs	r3, #18
 8008b8c:	921f      	str	r2, [sp, #124]	; 0x7c
 8008b8e:	e7aa      	b.n	8008ae6 <_dtoa_r+0x24e>
 8008b90:	2301      	movs	r3, #1
 8008b92:	9309      	str	r3, [sp, #36]	; 0x24
 8008b94:	e7f4      	b.n	8008b80 <_dtoa_r+0x2e8>
 8008b96:	bf00      	nop
 8008b98:	636f4361 	.word	0x636f4361
 8008b9c:	3fd287a7 	.word	0x3fd287a7
 8008ba0:	8b60c8b3 	.word	0x8b60c8b3
 8008ba4:	3fc68a28 	.word	0x3fc68a28
 8008ba8:	509f79fb 	.word	0x509f79fb
 8008bac:	3fd34413 	.word	0x3fd34413
 8008bb0:	7ff00000 	.word	0x7ff00000
 8008bb4:	0800b547 	.word	0x0800b547
 8008bb8:	0800b53e 	.word	0x0800b53e
 8008bbc:	0800b51b 	.word	0x0800b51b
 8008bc0:	3ff80000 	.word	0x3ff80000
 8008bc4:	0800b578 	.word	0x0800b578
 8008bc8:	0800b550 	.word	0x0800b550
 8008bcc:	2301      	movs	r3, #1
 8008bce:	9304      	str	r3, [sp, #16]
 8008bd0:	4698      	mov	r8, r3
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	e7da      	b.n	8008b8c <_dtoa_r+0x2f4>
 8008bd6:	3101      	adds	r1, #1
 8008bd8:	6071      	str	r1, [r6, #4]
 8008bda:	0052      	lsls	r2, r2, #1
 8008bdc:	e787      	b.n	8008aee <_dtoa_r+0x256>
 8008bde:	07f1      	lsls	r1, r6, #31
 8008be0:	d508      	bpl.n	8008bf4 <_dtoa_r+0x35c>
 8008be2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008be6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bea:	f7f7 fc75 	bl	80004d8 <__aeabi_dmul>
 8008bee:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008bf2:	3501      	adds	r5, #1
 8008bf4:	1076      	asrs	r6, r6, #1
 8008bf6:	3708      	adds	r7, #8
 8008bf8:	2e00      	cmp	r6, #0
 8008bfa:	d1f0      	bne.n	8008bde <_dtoa_r+0x346>
 8008bfc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008c00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c04:	f7f7 fd92 	bl	800072c <__aeabi_ddiv>
 8008c08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c0c:	e01b      	b.n	8008c46 <_dtoa_r+0x3ae>
 8008c0e:	2502      	movs	r5, #2
 8008c10:	e7a0      	b.n	8008b54 <_dtoa_r+0x2bc>
 8008c12:	f000 80a4 	beq.w	8008d5e <_dtoa_r+0x4c6>
 8008c16:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008c1a:	f1ca 0600 	rsb	r6, sl, #0
 8008c1e:	4ba0      	ldr	r3, [pc, #640]	; (8008ea0 <_dtoa_r+0x608>)
 8008c20:	f006 020f 	and.w	r2, r6, #15
 8008c24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c2c:	f7f7 fc54 	bl	80004d8 <__aeabi_dmul>
 8008c30:	2502      	movs	r5, #2
 8008c32:	2300      	movs	r3, #0
 8008c34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c38:	4f9a      	ldr	r7, [pc, #616]	; (8008ea4 <_dtoa_r+0x60c>)
 8008c3a:	1136      	asrs	r6, r6, #4
 8008c3c:	2e00      	cmp	r6, #0
 8008c3e:	f040 8083 	bne.w	8008d48 <_dtoa_r+0x4b0>
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d1e0      	bne.n	8008c08 <_dtoa_r+0x370>
 8008c46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	f000 808a 	beq.w	8008d62 <_dtoa_r+0x4ca>
 8008c4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c52:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008c56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	4b92      	ldr	r3, [pc, #584]	; (8008ea8 <_dtoa_r+0x610>)
 8008c5e:	f7f7 fead 	bl	80009bc <__aeabi_dcmplt>
 8008c62:	2800      	cmp	r0, #0
 8008c64:	d07d      	beq.n	8008d62 <_dtoa_r+0x4ca>
 8008c66:	f1b8 0f00 	cmp.w	r8, #0
 8008c6a:	d07a      	beq.n	8008d62 <_dtoa_r+0x4ca>
 8008c6c:	9b04      	ldr	r3, [sp, #16]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	dd36      	ble.n	8008ce0 <_dtoa_r+0x448>
 8008c72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008c76:	2200      	movs	r2, #0
 8008c78:	4b8c      	ldr	r3, [pc, #560]	; (8008eac <_dtoa_r+0x614>)
 8008c7a:	f7f7 fc2d 	bl	80004d8 <__aeabi_dmul>
 8008c7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c82:	9e04      	ldr	r6, [sp, #16]
 8008c84:	f10a 37ff 	add.w	r7, sl, #4294967295
 8008c88:	3501      	adds	r5, #1
 8008c8a:	4628      	mov	r0, r5
 8008c8c:	f7f7 fbba 	bl	8000404 <__aeabi_i2d>
 8008c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c94:	f7f7 fc20 	bl	80004d8 <__aeabi_dmul>
 8008c98:	2200      	movs	r2, #0
 8008c9a:	4b85      	ldr	r3, [pc, #532]	; (8008eb0 <_dtoa_r+0x618>)
 8008c9c:	f7f7 fa66 	bl	800016c <__adddf3>
 8008ca0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8008ca4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008ca8:	950b      	str	r5, [sp, #44]	; 0x2c
 8008caa:	2e00      	cmp	r6, #0
 8008cac:	d15c      	bne.n	8008d68 <_dtoa_r+0x4d0>
 8008cae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	4b7f      	ldr	r3, [pc, #508]	; (8008eb4 <_dtoa_r+0x61c>)
 8008cb6:	f7f7 fa57 	bl	8000168 <__aeabi_dsub>
 8008cba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cbc:	462b      	mov	r3, r5
 8008cbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cc2:	f7f7 fe99 	bl	80009f8 <__aeabi_dcmpgt>
 8008cc6:	2800      	cmp	r0, #0
 8008cc8:	f040 8281 	bne.w	80091ce <_dtoa_r+0x936>
 8008ccc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cd2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008cd6:	f7f7 fe71 	bl	80009bc <__aeabi_dcmplt>
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	f040 8275 	bne.w	80091ca <_dtoa_r+0x932>
 8008ce0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008ce4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ce8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	f2c0 814b 	blt.w	8008f86 <_dtoa_r+0x6ee>
 8008cf0:	f1ba 0f0e 	cmp.w	sl, #14
 8008cf4:	f300 8147 	bgt.w	8008f86 <_dtoa_r+0x6ee>
 8008cf8:	4b69      	ldr	r3, [pc, #420]	; (8008ea0 <_dtoa_r+0x608>)
 8008cfa:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008d06:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	f280 80d7 	bge.w	8008ebc <_dtoa_r+0x624>
 8008d0e:	f1b8 0f00 	cmp.w	r8, #0
 8008d12:	f300 80d3 	bgt.w	8008ebc <_dtoa_r+0x624>
 8008d16:	f040 8257 	bne.w	80091c8 <_dtoa_r+0x930>
 8008d1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	4b64      	ldr	r3, [pc, #400]	; (8008eb4 <_dtoa_r+0x61c>)
 8008d22:	f7f7 fbd9 	bl	80004d8 <__aeabi_dmul>
 8008d26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d2a:	f7f7 fe5b 	bl	80009e4 <__aeabi_dcmpge>
 8008d2e:	4646      	mov	r6, r8
 8008d30:	4647      	mov	r7, r8
 8008d32:	2800      	cmp	r0, #0
 8008d34:	f040 822d 	bne.w	8009192 <_dtoa_r+0x8fa>
 8008d38:	9b06      	ldr	r3, [sp, #24]
 8008d3a:	9a06      	ldr	r2, [sp, #24]
 8008d3c:	1c5d      	adds	r5, r3, #1
 8008d3e:	2331      	movs	r3, #49	; 0x31
 8008d40:	f10a 0a01 	add.w	sl, sl, #1
 8008d44:	7013      	strb	r3, [r2, #0]
 8008d46:	e228      	b.n	800919a <_dtoa_r+0x902>
 8008d48:	07f2      	lsls	r2, r6, #31
 8008d4a:	d505      	bpl.n	8008d58 <_dtoa_r+0x4c0>
 8008d4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d50:	f7f7 fbc2 	bl	80004d8 <__aeabi_dmul>
 8008d54:	2301      	movs	r3, #1
 8008d56:	3501      	adds	r5, #1
 8008d58:	1076      	asrs	r6, r6, #1
 8008d5a:	3708      	adds	r7, #8
 8008d5c:	e76e      	b.n	8008c3c <_dtoa_r+0x3a4>
 8008d5e:	2502      	movs	r5, #2
 8008d60:	e771      	b.n	8008c46 <_dtoa_r+0x3ae>
 8008d62:	4657      	mov	r7, sl
 8008d64:	4646      	mov	r6, r8
 8008d66:	e790      	b.n	8008c8a <_dtoa_r+0x3f2>
 8008d68:	4b4d      	ldr	r3, [pc, #308]	; (8008ea0 <_dtoa_r+0x608>)
 8008d6a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008d6e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d048      	beq.n	8008e0a <_dtoa_r+0x572>
 8008d78:	4602      	mov	r2, r0
 8008d7a:	460b      	mov	r3, r1
 8008d7c:	2000      	movs	r0, #0
 8008d7e:	494e      	ldr	r1, [pc, #312]	; (8008eb8 <_dtoa_r+0x620>)
 8008d80:	f7f7 fcd4 	bl	800072c <__aeabi_ddiv>
 8008d84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008d88:	f7f7 f9ee 	bl	8000168 <__aeabi_dsub>
 8008d8c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008d90:	9d06      	ldr	r5, [sp, #24]
 8008d92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d96:	f7f7 fe4f 	bl	8000a38 <__aeabi_d2iz>
 8008d9a:	9011      	str	r0, [sp, #68]	; 0x44
 8008d9c:	f7f7 fb32 	bl	8000404 <__aeabi_i2d>
 8008da0:	4602      	mov	r2, r0
 8008da2:	460b      	mov	r3, r1
 8008da4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008da8:	f7f7 f9de 	bl	8000168 <__aeabi_dsub>
 8008dac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008dae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008db2:	3330      	adds	r3, #48	; 0x30
 8008db4:	f805 3b01 	strb.w	r3, [r5], #1
 8008db8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008dbc:	f7f7 fdfe 	bl	80009bc <__aeabi_dcmplt>
 8008dc0:	2800      	cmp	r0, #0
 8008dc2:	d163      	bne.n	8008e8c <_dtoa_r+0x5f4>
 8008dc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008dc8:	2000      	movs	r0, #0
 8008dca:	4937      	ldr	r1, [pc, #220]	; (8008ea8 <_dtoa_r+0x610>)
 8008dcc:	f7f7 f9cc 	bl	8000168 <__aeabi_dsub>
 8008dd0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008dd4:	f7f7 fdf2 	bl	80009bc <__aeabi_dcmplt>
 8008dd8:	2800      	cmp	r0, #0
 8008dda:	f040 80b5 	bne.w	8008f48 <_dtoa_r+0x6b0>
 8008dde:	9b06      	ldr	r3, [sp, #24]
 8008de0:	1aeb      	subs	r3, r5, r3
 8008de2:	429e      	cmp	r6, r3
 8008de4:	f77f af7c 	ble.w	8008ce0 <_dtoa_r+0x448>
 8008de8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008dec:	2200      	movs	r2, #0
 8008dee:	4b2f      	ldr	r3, [pc, #188]	; (8008eac <_dtoa_r+0x614>)
 8008df0:	f7f7 fb72 	bl	80004d8 <__aeabi_dmul>
 8008df4:	2200      	movs	r2, #0
 8008df6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008dfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dfe:	4b2b      	ldr	r3, [pc, #172]	; (8008eac <_dtoa_r+0x614>)
 8008e00:	f7f7 fb6a 	bl	80004d8 <__aeabi_dmul>
 8008e04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e08:	e7c3      	b.n	8008d92 <_dtoa_r+0x4fa>
 8008e0a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008e0e:	f7f7 fb63 	bl	80004d8 <__aeabi_dmul>
 8008e12:	9b06      	ldr	r3, [sp, #24]
 8008e14:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008e18:	199d      	adds	r5, r3, r6
 8008e1a:	461e      	mov	r6, r3
 8008e1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e20:	f7f7 fe0a 	bl	8000a38 <__aeabi_d2iz>
 8008e24:	9011      	str	r0, [sp, #68]	; 0x44
 8008e26:	f7f7 faed 	bl	8000404 <__aeabi_i2d>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e32:	f7f7 f999 	bl	8000168 <__aeabi_dsub>
 8008e36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e3c:	3330      	adds	r3, #48	; 0x30
 8008e3e:	f806 3b01 	strb.w	r3, [r6], #1
 8008e42:	42ae      	cmp	r6, r5
 8008e44:	f04f 0200 	mov.w	r2, #0
 8008e48:	d124      	bne.n	8008e94 <_dtoa_r+0x5fc>
 8008e4a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008e4e:	4b1a      	ldr	r3, [pc, #104]	; (8008eb8 <_dtoa_r+0x620>)
 8008e50:	f7f7 f98c 	bl	800016c <__adddf3>
 8008e54:	4602      	mov	r2, r0
 8008e56:	460b      	mov	r3, r1
 8008e58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e5c:	f7f7 fdcc 	bl	80009f8 <__aeabi_dcmpgt>
 8008e60:	2800      	cmp	r0, #0
 8008e62:	d171      	bne.n	8008f48 <_dtoa_r+0x6b0>
 8008e64:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008e68:	2000      	movs	r0, #0
 8008e6a:	4913      	ldr	r1, [pc, #76]	; (8008eb8 <_dtoa_r+0x620>)
 8008e6c:	f7f7 f97c 	bl	8000168 <__aeabi_dsub>
 8008e70:	4602      	mov	r2, r0
 8008e72:	460b      	mov	r3, r1
 8008e74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e78:	f7f7 fda0 	bl	80009bc <__aeabi_dcmplt>
 8008e7c:	2800      	cmp	r0, #0
 8008e7e:	f43f af2f 	beq.w	8008ce0 <_dtoa_r+0x448>
 8008e82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008e86:	1e6a      	subs	r2, r5, #1
 8008e88:	2b30      	cmp	r3, #48	; 0x30
 8008e8a:	d001      	beq.n	8008e90 <_dtoa_r+0x5f8>
 8008e8c:	46ba      	mov	sl, r7
 8008e8e:	e04a      	b.n	8008f26 <_dtoa_r+0x68e>
 8008e90:	4615      	mov	r5, r2
 8008e92:	e7f6      	b.n	8008e82 <_dtoa_r+0x5ea>
 8008e94:	4b05      	ldr	r3, [pc, #20]	; (8008eac <_dtoa_r+0x614>)
 8008e96:	f7f7 fb1f 	bl	80004d8 <__aeabi_dmul>
 8008e9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e9e:	e7bd      	b.n	8008e1c <_dtoa_r+0x584>
 8008ea0:	0800b578 	.word	0x0800b578
 8008ea4:	0800b550 	.word	0x0800b550
 8008ea8:	3ff00000 	.word	0x3ff00000
 8008eac:	40240000 	.word	0x40240000
 8008eb0:	401c0000 	.word	0x401c0000
 8008eb4:	40140000 	.word	0x40140000
 8008eb8:	3fe00000 	.word	0x3fe00000
 8008ebc:	9d06      	ldr	r5, [sp, #24]
 8008ebe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008ec2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ec6:	4630      	mov	r0, r6
 8008ec8:	4639      	mov	r1, r7
 8008eca:	f7f7 fc2f 	bl	800072c <__aeabi_ddiv>
 8008ece:	f7f7 fdb3 	bl	8000a38 <__aeabi_d2iz>
 8008ed2:	4681      	mov	r9, r0
 8008ed4:	f7f7 fa96 	bl	8000404 <__aeabi_i2d>
 8008ed8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008edc:	f7f7 fafc 	bl	80004d8 <__aeabi_dmul>
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	460b      	mov	r3, r1
 8008ee4:	4630      	mov	r0, r6
 8008ee6:	4639      	mov	r1, r7
 8008ee8:	f7f7 f93e 	bl	8000168 <__aeabi_dsub>
 8008eec:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8008ef0:	f805 6b01 	strb.w	r6, [r5], #1
 8008ef4:	9e06      	ldr	r6, [sp, #24]
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	1bae      	subs	r6, r5, r6
 8008efa:	45b0      	cmp	r8, r6
 8008efc:	460b      	mov	r3, r1
 8008efe:	d135      	bne.n	8008f6c <_dtoa_r+0x6d4>
 8008f00:	f7f7 f934 	bl	800016c <__adddf3>
 8008f04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f08:	4606      	mov	r6, r0
 8008f0a:	460f      	mov	r7, r1
 8008f0c:	f7f7 fd74 	bl	80009f8 <__aeabi_dcmpgt>
 8008f10:	b9c8      	cbnz	r0, 8008f46 <_dtoa_r+0x6ae>
 8008f12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f16:	4630      	mov	r0, r6
 8008f18:	4639      	mov	r1, r7
 8008f1a:	f7f7 fd45 	bl	80009a8 <__aeabi_dcmpeq>
 8008f1e:	b110      	cbz	r0, 8008f26 <_dtoa_r+0x68e>
 8008f20:	f019 0f01 	tst.w	r9, #1
 8008f24:	d10f      	bne.n	8008f46 <_dtoa_r+0x6ae>
 8008f26:	4659      	mov	r1, fp
 8008f28:	4620      	mov	r0, r4
 8008f2a:	f000 fabb 	bl	80094a4 <_Bfree>
 8008f2e:	2300      	movs	r3, #0
 8008f30:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008f32:	702b      	strb	r3, [r5, #0]
 8008f34:	f10a 0301 	add.w	r3, sl, #1
 8008f38:	6013      	str	r3, [r2, #0]
 8008f3a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	f43f acf3 	beq.w	8008928 <_dtoa_r+0x90>
 8008f42:	601d      	str	r5, [r3, #0]
 8008f44:	e4f0      	b.n	8008928 <_dtoa_r+0x90>
 8008f46:	4657      	mov	r7, sl
 8008f48:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008f4c:	1e6b      	subs	r3, r5, #1
 8008f4e:	2a39      	cmp	r2, #57	; 0x39
 8008f50:	d106      	bne.n	8008f60 <_dtoa_r+0x6c8>
 8008f52:	9a06      	ldr	r2, [sp, #24]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d107      	bne.n	8008f68 <_dtoa_r+0x6d0>
 8008f58:	2330      	movs	r3, #48	; 0x30
 8008f5a:	7013      	strb	r3, [r2, #0]
 8008f5c:	4613      	mov	r3, r2
 8008f5e:	3701      	adds	r7, #1
 8008f60:	781a      	ldrb	r2, [r3, #0]
 8008f62:	3201      	adds	r2, #1
 8008f64:	701a      	strb	r2, [r3, #0]
 8008f66:	e791      	b.n	8008e8c <_dtoa_r+0x5f4>
 8008f68:	461d      	mov	r5, r3
 8008f6a:	e7ed      	b.n	8008f48 <_dtoa_r+0x6b0>
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	4b99      	ldr	r3, [pc, #612]	; (80091d4 <_dtoa_r+0x93c>)
 8008f70:	f7f7 fab2 	bl	80004d8 <__aeabi_dmul>
 8008f74:	2200      	movs	r2, #0
 8008f76:	2300      	movs	r3, #0
 8008f78:	4606      	mov	r6, r0
 8008f7a:	460f      	mov	r7, r1
 8008f7c:	f7f7 fd14 	bl	80009a8 <__aeabi_dcmpeq>
 8008f80:	2800      	cmp	r0, #0
 8008f82:	d09e      	beq.n	8008ec2 <_dtoa_r+0x62a>
 8008f84:	e7cf      	b.n	8008f26 <_dtoa_r+0x68e>
 8008f86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f88:	2a00      	cmp	r2, #0
 8008f8a:	f000 8088 	beq.w	800909e <_dtoa_r+0x806>
 8008f8e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008f90:	2a01      	cmp	r2, #1
 8008f92:	dc6d      	bgt.n	8009070 <_dtoa_r+0x7d8>
 8008f94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008f96:	2a00      	cmp	r2, #0
 8008f98:	d066      	beq.n	8009068 <_dtoa_r+0x7d0>
 8008f9a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008f9e:	464d      	mov	r5, r9
 8008fa0:	9e08      	ldr	r6, [sp, #32]
 8008fa2:	9a07      	ldr	r2, [sp, #28]
 8008fa4:	2101      	movs	r1, #1
 8008fa6:	441a      	add	r2, r3
 8008fa8:	4620      	mov	r0, r4
 8008faa:	4499      	add	r9, r3
 8008fac:	9207      	str	r2, [sp, #28]
 8008fae:	f000 fb19 	bl	80095e4 <__i2b>
 8008fb2:	4607      	mov	r7, r0
 8008fb4:	2d00      	cmp	r5, #0
 8008fb6:	dd0b      	ble.n	8008fd0 <_dtoa_r+0x738>
 8008fb8:	9b07      	ldr	r3, [sp, #28]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	dd08      	ble.n	8008fd0 <_dtoa_r+0x738>
 8008fbe:	42ab      	cmp	r3, r5
 8008fc0:	bfa8      	it	ge
 8008fc2:	462b      	movge	r3, r5
 8008fc4:	9a07      	ldr	r2, [sp, #28]
 8008fc6:	eba9 0903 	sub.w	r9, r9, r3
 8008fca:	1aed      	subs	r5, r5, r3
 8008fcc:	1ad3      	subs	r3, r2, r3
 8008fce:	9307      	str	r3, [sp, #28]
 8008fd0:	9b08      	ldr	r3, [sp, #32]
 8008fd2:	b1eb      	cbz	r3, 8009010 <_dtoa_r+0x778>
 8008fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d065      	beq.n	80090a6 <_dtoa_r+0x80e>
 8008fda:	b18e      	cbz	r6, 8009000 <_dtoa_r+0x768>
 8008fdc:	4639      	mov	r1, r7
 8008fde:	4632      	mov	r2, r6
 8008fe0:	4620      	mov	r0, r4
 8008fe2:	f000 fb9d 	bl	8009720 <__pow5mult>
 8008fe6:	465a      	mov	r2, fp
 8008fe8:	4601      	mov	r1, r0
 8008fea:	4607      	mov	r7, r0
 8008fec:	4620      	mov	r0, r4
 8008fee:	f000 fb02 	bl	80095f6 <__multiply>
 8008ff2:	4659      	mov	r1, fp
 8008ff4:	900a      	str	r0, [sp, #40]	; 0x28
 8008ff6:	4620      	mov	r0, r4
 8008ff8:	f000 fa54 	bl	80094a4 <_Bfree>
 8008ffc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ffe:	469b      	mov	fp, r3
 8009000:	9b08      	ldr	r3, [sp, #32]
 8009002:	1b9a      	subs	r2, r3, r6
 8009004:	d004      	beq.n	8009010 <_dtoa_r+0x778>
 8009006:	4659      	mov	r1, fp
 8009008:	4620      	mov	r0, r4
 800900a:	f000 fb89 	bl	8009720 <__pow5mult>
 800900e:	4683      	mov	fp, r0
 8009010:	2101      	movs	r1, #1
 8009012:	4620      	mov	r0, r4
 8009014:	f000 fae6 	bl	80095e4 <__i2b>
 8009018:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800901a:	4606      	mov	r6, r0
 800901c:	2b00      	cmp	r3, #0
 800901e:	f000 81c6 	beq.w	80093ae <_dtoa_r+0xb16>
 8009022:	461a      	mov	r2, r3
 8009024:	4601      	mov	r1, r0
 8009026:	4620      	mov	r0, r4
 8009028:	f000 fb7a 	bl	8009720 <__pow5mult>
 800902c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800902e:	4606      	mov	r6, r0
 8009030:	2b01      	cmp	r3, #1
 8009032:	dc3e      	bgt.n	80090b2 <_dtoa_r+0x81a>
 8009034:	9b02      	ldr	r3, [sp, #8]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d137      	bne.n	80090aa <_dtoa_r+0x812>
 800903a:	9b03      	ldr	r3, [sp, #12]
 800903c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009040:	2b00      	cmp	r3, #0
 8009042:	d134      	bne.n	80090ae <_dtoa_r+0x816>
 8009044:	9b03      	ldr	r3, [sp, #12]
 8009046:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800904a:	0d1b      	lsrs	r3, r3, #20
 800904c:	051b      	lsls	r3, r3, #20
 800904e:	b12b      	cbz	r3, 800905c <_dtoa_r+0x7c4>
 8009050:	9b07      	ldr	r3, [sp, #28]
 8009052:	f109 0901 	add.w	r9, r9, #1
 8009056:	3301      	adds	r3, #1
 8009058:	9307      	str	r3, [sp, #28]
 800905a:	2301      	movs	r3, #1
 800905c:	9308      	str	r3, [sp, #32]
 800905e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009060:	2b00      	cmp	r3, #0
 8009062:	d128      	bne.n	80090b6 <_dtoa_r+0x81e>
 8009064:	2001      	movs	r0, #1
 8009066:	e02e      	b.n	80090c6 <_dtoa_r+0x82e>
 8009068:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800906a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800906e:	e796      	b.n	8008f9e <_dtoa_r+0x706>
 8009070:	9b08      	ldr	r3, [sp, #32]
 8009072:	f108 36ff 	add.w	r6, r8, #4294967295
 8009076:	42b3      	cmp	r3, r6
 8009078:	bfb7      	itett	lt
 800907a:	9b08      	ldrlt	r3, [sp, #32]
 800907c:	1b9e      	subge	r6, r3, r6
 800907e:	1af2      	sublt	r2, r6, r3
 8009080:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8009082:	bfbf      	itttt	lt
 8009084:	9608      	strlt	r6, [sp, #32]
 8009086:	189b      	addlt	r3, r3, r2
 8009088:	930c      	strlt	r3, [sp, #48]	; 0x30
 800908a:	2600      	movlt	r6, #0
 800908c:	f1b8 0f00 	cmp.w	r8, #0
 8009090:	bfb9      	ittee	lt
 8009092:	eba9 0508 	sublt.w	r5, r9, r8
 8009096:	2300      	movlt	r3, #0
 8009098:	464d      	movge	r5, r9
 800909a:	4643      	movge	r3, r8
 800909c:	e781      	b.n	8008fa2 <_dtoa_r+0x70a>
 800909e:	9e08      	ldr	r6, [sp, #32]
 80090a0:	464d      	mov	r5, r9
 80090a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80090a4:	e786      	b.n	8008fb4 <_dtoa_r+0x71c>
 80090a6:	9a08      	ldr	r2, [sp, #32]
 80090a8:	e7ad      	b.n	8009006 <_dtoa_r+0x76e>
 80090aa:	2300      	movs	r3, #0
 80090ac:	e7d6      	b.n	800905c <_dtoa_r+0x7c4>
 80090ae:	9b02      	ldr	r3, [sp, #8]
 80090b0:	e7d4      	b.n	800905c <_dtoa_r+0x7c4>
 80090b2:	2300      	movs	r3, #0
 80090b4:	9308      	str	r3, [sp, #32]
 80090b6:	6933      	ldr	r3, [r6, #16]
 80090b8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80090bc:	6918      	ldr	r0, [r3, #16]
 80090be:	f000 fa43 	bl	8009548 <__hi0bits>
 80090c2:	f1c0 0020 	rsb	r0, r0, #32
 80090c6:	9b07      	ldr	r3, [sp, #28]
 80090c8:	4418      	add	r0, r3
 80090ca:	f010 001f 	ands.w	r0, r0, #31
 80090ce:	d047      	beq.n	8009160 <_dtoa_r+0x8c8>
 80090d0:	f1c0 0320 	rsb	r3, r0, #32
 80090d4:	2b04      	cmp	r3, #4
 80090d6:	dd3b      	ble.n	8009150 <_dtoa_r+0x8b8>
 80090d8:	9b07      	ldr	r3, [sp, #28]
 80090da:	f1c0 001c 	rsb	r0, r0, #28
 80090de:	4481      	add	r9, r0
 80090e0:	4405      	add	r5, r0
 80090e2:	4403      	add	r3, r0
 80090e4:	9307      	str	r3, [sp, #28]
 80090e6:	f1b9 0f00 	cmp.w	r9, #0
 80090ea:	dd05      	ble.n	80090f8 <_dtoa_r+0x860>
 80090ec:	4659      	mov	r1, fp
 80090ee:	464a      	mov	r2, r9
 80090f0:	4620      	mov	r0, r4
 80090f2:	f000 fb63 	bl	80097bc <__lshift>
 80090f6:	4683      	mov	fp, r0
 80090f8:	9b07      	ldr	r3, [sp, #28]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	dd05      	ble.n	800910a <_dtoa_r+0x872>
 80090fe:	4631      	mov	r1, r6
 8009100:	461a      	mov	r2, r3
 8009102:	4620      	mov	r0, r4
 8009104:	f000 fb5a 	bl	80097bc <__lshift>
 8009108:	4606      	mov	r6, r0
 800910a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800910c:	b353      	cbz	r3, 8009164 <_dtoa_r+0x8cc>
 800910e:	4631      	mov	r1, r6
 8009110:	4658      	mov	r0, fp
 8009112:	f000 fba7 	bl	8009864 <__mcmp>
 8009116:	2800      	cmp	r0, #0
 8009118:	da24      	bge.n	8009164 <_dtoa_r+0x8cc>
 800911a:	2300      	movs	r3, #0
 800911c:	4659      	mov	r1, fp
 800911e:	220a      	movs	r2, #10
 8009120:	4620      	mov	r0, r4
 8009122:	f000 f9d6 	bl	80094d2 <__multadd>
 8009126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009128:	f10a 3aff 	add.w	sl, sl, #4294967295
 800912c:	4683      	mov	fp, r0
 800912e:	2b00      	cmp	r3, #0
 8009130:	f000 8144 	beq.w	80093bc <_dtoa_r+0xb24>
 8009134:	2300      	movs	r3, #0
 8009136:	4639      	mov	r1, r7
 8009138:	220a      	movs	r2, #10
 800913a:	4620      	mov	r0, r4
 800913c:	f000 f9c9 	bl	80094d2 <__multadd>
 8009140:	9b04      	ldr	r3, [sp, #16]
 8009142:	4607      	mov	r7, r0
 8009144:	2b00      	cmp	r3, #0
 8009146:	dc4d      	bgt.n	80091e4 <_dtoa_r+0x94c>
 8009148:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800914a:	2b02      	cmp	r3, #2
 800914c:	dd4a      	ble.n	80091e4 <_dtoa_r+0x94c>
 800914e:	e011      	b.n	8009174 <_dtoa_r+0x8dc>
 8009150:	d0c9      	beq.n	80090e6 <_dtoa_r+0x84e>
 8009152:	9a07      	ldr	r2, [sp, #28]
 8009154:	331c      	adds	r3, #28
 8009156:	441a      	add	r2, r3
 8009158:	4499      	add	r9, r3
 800915a:	441d      	add	r5, r3
 800915c:	4613      	mov	r3, r2
 800915e:	e7c1      	b.n	80090e4 <_dtoa_r+0x84c>
 8009160:	4603      	mov	r3, r0
 8009162:	e7f6      	b.n	8009152 <_dtoa_r+0x8ba>
 8009164:	f1b8 0f00 	cmp.w	r8, #0
 8009168:	dc36      	bgt.n	80091d8 <_dtoa_r+0x940>
 800916a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800916c:	2b02      	cmp	r3, #2
 800916e:	dd33      	ble.n	80091d8 <_dtoa_r+0x940>
 8009170:	f8cd 8010 	str.w	r8, [sp, #16]
 8009174:	9b04      	ldr	r3, [sp, #16]
 8009176:	b963      	cbnz	r3, 8009192 <_dtoa_r+0x8fa>
 8009178:	4631      	mov	r1, r6
 800917a:	2205      	movs	r2, #5
 800917c:	4620      	mov	r0, r4
 800917e:	f000 f9a8 	bl	80094d2 <__multadd>
 8009182:	4601      	mov	r1, r0
 8009184:	4606      	mov	r6, r0
 8009186:	4658      	mov	r0, fp
 8009188:	f000 fb6c 	bl	8009864 <__mcmp>
 800918c:	2800      	cmp	r0, #0
 800918e:	f73f add3 	bgt.w	8008d38 <_dtoa_r+0x4a0>
 8009192:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009194:	9d06      	ldr	r5, [sp, #24]
 8009196:	ea6f 0a03 	mvn.w	sl, r3
 800919a:	f04f 0900 	mov.w	r9, #0
 800919e:	4631      	mov	r1, r6
 80091a0:	4620      	mov	r0, r4
 80091a2:	f000 f97f 	bl	80094a4 <_Bfree>
 80091a6:	2f00      	cmp	r7, #0
 80091a8:	f43f aebd 	beq.w	8008f26 <_dtoa_r+0x68e>
 80091ac:	f1b9 0f00 	cmp.w	r9, #0
 80091b0:	d005      	beq.n	80091be <_dtoa_r+0x926>
 80091b2:	45b9      	cmp	r9, r7
 80091b4:	d003      	beq.n	80091be <_dtoa_r+0x926>
 80091b6:	4649      	mov	r1, r9
 80091b8:	4620      	mov	r0, r4
 80091ba:	f000 f973 	bl	80094a4 <_Bfree>
 80091be:	4639      	mov	r1, r7
 80091c0:	4620      	mov	r0, r4
 80091c2:	f000 f96f 	bl	80094a4 <_Bfree>
 80091c6:	e6ae      	b.n	8008f26 <_dtoa_r+0x68e>
 80091c8:	2600      	movs	r6, #0
 80091ca:	4637      	mov	r7, r6
 80091cc:	e7e1      	b.n	8009192 <_dtoa_r+0x8fa>
 80091ce:	46ba      	mov	sl, r7
 80091d0:	4637      	mov	r7, r6
 80091d2:	e5b1      	b.n	8008d38 <_dtoa_r+0x4a0>
 80091d4:	40240000 	.word	0x40240000
 80091d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091da:	f8cd 8010 	str.w	r8, [sp, #16]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	f000 80f3 	beq.w	80093ca <_dtoa_r+0xb32>
 80091e4:	2d00      	cmp	r5, #0
 80091e6:	dd05      	ble.n	80091f4 <_dtoa_r+0x95c>
 80091e8:	4639      	mov	r1, r7
 80091ea:	462a      	mov	r2, r5
 80091ec:	4620      	mov	r0, r4
 80091ee:	f000 fae5 	bl	80097bc <__lshift>
 80091f2:	4607      	mov	r7, r0
 80091f4:	9b08      	ldr	r3, [sp, #32]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d04c      	beq.n	8009294 <_dtoa_r+0x9fc>
 80091fa:	6879      	ldr	r1, [r7, #4]
 80091fc:	4620      	mov	r0, r4
 80091fe:	f000 f91d 	bl	800943c <_Balloc>
 8009202:	4605      	mov	r5, r0
 8009204:	693a      	ldr	r2, [r7, #16]
 8009206:	f107 010c 	add.w	r1, r7, #12
 800920a:	3202      	adds	r2, #2
 800920c:	0092      	lsls	r2, r2, #2
 800920e:	300c      	adds	r0, #12
 8009210:	f7fe fd7a 	bl	8007d08 <memcpy>
 8009214:	2201      	movs	r2, #1
 8009216:	4629      	mov	r1, r5
 8009218:	4620      	mov	r0, r4
 800921a:	f000 facf 	bl	80097bc <__lshift>
 800921e:	46b9      	mov	r9, r7
 8009220:	4607      	mov	r7, r0
 8009222:	9b06      	ldr	r3, [sp, #24]
 8009224:	9307      	str	r3, [sp, #28]
 8009226:	9b02      	ldr	r3, [sp, #8]
 8009228:	f003 0301 	and.w	r3, r3, #1
 800922c:	9308      	str	r3, [sp, #32]
 800922e:	4631      	mov	r1, r6
 8009230:	4658      	mov	r0, fp
 8009232:	f7ff faa3 	bl	800877c <quorem>
 8009236:	4649      	mov	r1, r9
 8009238:	4605      	mov	r5, r0
 800923a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800923e:	4658      	mov	r0, fp
 8009240:	f000 fb10 	bl	8009864 <__mcmp>
 8009244:	463a      	mov	r2, r7
 8009246:	9002      	str	r0, [sp, #8]
 8009248:	4631      	mov	r1, r6
 800924a:	4620      	mov	r0, r4
 800924c:	f000 fb24 	bl	8009898 <__mdiff>
 8009250:	68c3      	ldr	r3, [r0, #12]
 8009252:	4602      	mov	r2, r0
 8009254:	bb03      	cbnz	r3, 8009298 <_dtoa_r+0xa00>
 8009256:	4601      	mov	r1, r0
 8009258:	9009      	str	r0, [sp, #36]	; 0x24
 800925a:	4658      	mov	r0, fp
 800925c:	f000 fb02 	bl	8009864 <__mcmp>
 8009260:	4603      	mov	r3, r0
 8009262:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009264:	4611      	mov	r1, r2
 8009266:	4620      	mov	r0, r4
 8009268:	9309      	str	r3, [sp, #36]	; 0x24
 800926a:	f000 f91b 	bl	80094a4 <_Bfree>
 800926e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009270:	b9a3      	cbnz	r3, 800929c <_dtoa_r+0xa04>
 8009272:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009274:	b992      	cbnz	r2, 800929c <_dtoa_r+0xa04>
 8009276:	9a08      	ldr	r2, [sp, #32]
 8009278:	b982      	cbnz	r2, 800929c <_dtoa_r+0xa04>
 800927a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800927e:	d029      	beq.n	80092d4 <_dtoa_r+0xa3c>
 8009280:	9b02      	ldr	r3, [sp, #8]
 8009282:	2b00      	cmp	r3, #0
 8009284:	dd01      	ble.n	800928a <_dtoa_r+0x9f2>
 8009286:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800928a:	9b07      	ldr	r3, [sp, #28]
 800928c:	1c5d      	adds	r5, r3, #1
 800928e:	f883 8000 	strb.w	r8, [r3]
 8009292:	e784      	b.n	800919e <_dtoa_r+0x906>
 8009294:	4638      	mov	r0, r7
 8009296:	e7c2      	b.n	800921e <_dtoa_r+0x986>
 8009298:	2301      	movs	r3, #1
 800929a:	e7e3      	b.n	8009264 <_dtoa_r+0x9cc>
 800929c:	9a02      	ldr	r2, [sp, #8]
 800929e:	2a00      	cmp	r2, #0
 80092a0:	db04      	blt.n	80092ac <_dtoa_r+0xa14>
 80092a2:	d123      	bne.n	80092ec <_dtoa_r+0xa54>
 80092a4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80092a6:	bb0a      	cbnz	r2, 80092ec <_dtoa_r+0xa54>
 80092a8:	9a08      	ldr	r2, [sp, #32]
 80092aa:	b9fa      	cbnz	r2, 80092ec <_dtoa_r+0xa54>
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	ddec      	ble.n	800928a <_dtoa_r+0x9f2>
 80092b0:	4659      	mov	r1, fp
 80092b2:	2201      	movs	r2, #1
 80092b4:	4620      	mov	r0, r4
 80092b6:	f000 fa81 	bl	80097bc <__lshift>
 80092ba:	4631      	mov	r1, r6
 80092bc:	4683      	mov	fp, r0
 80092be:	f000 fad1 	bl	8009864 <__mcmp>
 80092c2:	2800      	cmp	r0, #0
 80092c4:	dc03      	bgt.n	80092ce <_dtoa_r+0xa36>
 80092c6:	d1e0      	bne.n	800928a <_dtoa_r+0x9f2>
 80092c8:	f018 0f01 	tst.w	r8, #1
 80092cc:	d0dd      	beq.n	800928a <_dtoa_r+0x9f2>
 80092ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80092d2:	d1d8      	bne.n	8009286 <_dtoa_r+0x9ee>
 80092d4:	9b07      	ldr	r3, [sp, #28]
 80092d6:	9a07      	ldr	r2, [sp, #28]
 80092d8:	1c5d      	adds	r5, r3, #1
 80092da:	2339      	movs	r3, #57	; 0x39
 80092dc:	7013      	strb	r3, [r2, #0]
 80092de:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80092e2:	1e6a      	subs	r2, r5, #1
 80092e4:	2b39      	cmp	r3, #57	; 0x39
 80092e6:	d04d      	beq.n	8009384 <_dtoa_r+0xaec>
 80092e8:	3301      	adds	r3, #1
 80092ea:	e052      	b.n	8009392 <_dtoa_r+0xafa>
 80092ec:	9a07      	ldr	r2, [sp, #28]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	f102 0501 	add.w	r5, r2, #1
 80092f4:	dd06      	ble.n	8009304 <_dtoa_r+0xa6c>
 80092f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80092fa:	d0eb      	beq.n	80092d4 <_dtoa_r+0xa3c>
 80092fc:	f108 0801 	add.w	r8, r8, #1
 8009300:	9b07      	ldr	r3, [sp, #28]
 8009302:	e7c4      	b.n	800928e <_dtoa_r+0x9f6>
 8009304:	9b06      	ldr	r3, [sp, #24]
 8009306:	9a04      	ldr	r2, [sp, #16]
 8009308:	1aeb      	subs	r3, r5, r3
 800930a:	4293      	cmp	r3, r2
 800930c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009310:	d021      	beq.n	8009356 <_dtoa_r+0xabe>
 8009312:	4659      	mov	r1, fp
 8009314:	2300      	movs	r3, #0
 8009316:	220a      	movs	r2, #10
 8009318:	4620      	mov	r0, r4
 800931a:	f000 f8da 	bl	80094d2 <__multadd>
 800931e:	45b9      	cmp	r9, r7
 8009320:	4683      	mov	fp, r0
 8009322:	f04f 0300 	mov.w	r3, #0
 8009326:	f04f 020a 	mov.w	r2, #10
 800932a:	4649      	mov	r1, r9
 800932c:	4620      	mov	r0, r4
 800932e:	d105      	bne.n	800933c <_dtoa_r+0xaa4>
 8009330:	f000 f8cf 	bl	80094d2 <__multadd>
 8009334:	4681      	mov	r9, r0
 8009336:	4607      	mov	r7, r0
 8009338:	9507      	str	r5, [sp, #28]
 800933a:	e778      	b.n	800922e <_dtoa_r+0x996>
 800933c:	f000 f8c9 	bl	80094d2 <__multadd>
 8009340:	4639      	mov	r1, r7
 8009342:	4681      	mov	r9, r0
 8009344:	2300      	movs	r3, #0
 8009346:	220a      	movs	r2, #10
 8009348:	4620      	mov	r0, r4
 800934a:	f000 f8c2 	bl	80094d2 <__multadd>
 800934e:	4607      	mov	r7, r0
 8009350:	e7f2      	b.n	8009338 <_dtoa_r+0xaa0>
 8009352:	f04f 0900 	mov.w	r9, #0
 8009356:	4659      	mov	r1, fp
 8009358:	2201      	movs	r2, #1
 800935a:	4620      	mov	r0, r4
 800935c:	f000 fa2e 	bl	80097bc <__lshift>
 8009360:	4631      	mov	r1, r6
 8009362:	4683      	mov	fp, r0
 8009364:	f000 fa7e 	bl	8009864 <__mcmp>
 8009368:	2800      	cmp	r0, #0
 800936a:	dcb8      	bgt.n	80092de <_dtoa_r+0xa46>
 800936c:	d102      	bne.n	8009374 <_dtoa_r+0xadc>
 800936e:	f018 0f01 	tst.w	r8, #1
 8009372:	d1b4      	bne.n	80092de <_dtoa_r+0xa46>
 8009374:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009378:	1e6a      	subs	r2, r5, #1
 800937a:	2b30      	cmp	r3, #48	; 0x30
 800937c:	f47f af0f 	bne.w	800919e <_dtoa_r+0x906>
 8009380:	4615      	mov	r5, r2
 8009382:	e7f7      	b.n	8009374 <_dtoa_r+0xadc>
 8009384:	9b06      	ldr	r3, [sp, #24]
 8009386:	4293      	cmp	r3, r2
 8009388:	d105      	bne.n	8009396 <_dtoa_r+0xafe>
 800938a:	2331      	movs	r3, #49	; 0x31
 800938c:	9a06      	ldr	r2, [sp, #24]
 800938e:	f10a 0a01 	add.w	sl, sl, #1
 8009392:	7013      	strb	r3, [r2, #0]
 8009394:	e703      	b.n	800919e <_dtoa_r+0x906>
 8009396:	4615      	mov	r5, r2
 8009398:	e7a1      	b.n	80092de <_dtoa_r+0xa46>
 800939a:	4b17      	ldr	r3, [pc, #92]	; (80093f8 <_dtoa_r+0xb60>)
 800939c:	f7ff bae1 	b.w	8008962 <_dtoa_r+0xca>
 80093a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	f47f aabb 	bne.w	800891e <_dtoa_r+0x86>
 80093a8:	4b14      	ldr	r3, [pc, #80]	; (80093fc <_dtoa_r+0xb64>)
 80093aa:	f7ff bada 	b.w	8008962 <_dtoa_r+0xca>
 80093ae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	f77f ae3f 	ble.w	8009034 <_dtoa_r+0x79c>
 80093b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093b8:	9308      	str	r3, [sp, #32]
 80093ba:	e653      	b.n	8009064 <_dtoa_r+0x7cc>
 80093bc:	9b04      	ldr	r3, [sp, #16]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	dc03      	bgt.n	80093ca <_dtoa_r+0xb32>
 80093c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80093c4:	2b02      	cmp	r3, #2
 80093c6:	f73f aed5 	bgt.w	8009174 <_dtoa_r+0x8dc>
 80093ca:	9d06      	ldr	r5, [sp, #24]
 80093cc:	4631      	mov	r1, r6
 80093ce:	4658      	mov	r0, fp
 80093d0:	f7ff f9d4 	bl	800877c <quorem>
 80093d4:	9b06      	ldr	r3, [sp, #24]
 80093d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80093da:	f805 8b01 	strb.w	r8, [r5], #1
 80093de:	9a04      	ldr	r2, [sp, #16]
 80093e0:	1aeb      	subs	r3, r5, r3
 80093e2:	429a      	cmp	r2, r3
 80093e4:	ddb5      	ble.n	8009352 <_dtoa_r+0xaba>
 80093e6:	4659      	mov	r1, fp
 80093e8:	2300      	movs	r3, #0
 80093ea:	220a      	movs	r2, #10
 80093ec:	4620      	mov	r0, r4
 80093ee:	f000 f870 	bl	80094d2 <__multadd>
 80093f2:	4683      	mov	fp, r0
 80093f4:	e7ea      	b.n	80093cc <_dtoa_r+0xb34>
 80093f6:	bf00      	nop
 80093f8:	0800b51a 	.word	0x0800b51a
 80093fc:	0800b53e 	.word	0x0800b53e

08009400 <_localeconv_r>:
 8009400:	4b04      	ldr	r3, [pc, #16]	; (8009414 <_localeconv_r+0x14>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	6a18      	ldr	r0, [r3, #32]
 8009406:	4b04      	ldr	r3, [pc, #16]	; (8009418 <_localeconv_r+0x18>)
 8009408:	2800      	cmp	r0, #0
 800940a:	bf08      	it	eq
 800940c:	4618      	moveq	r0, r3
 800940e:	30f0      	adds	r0, #240	; 0xf0
 8009410:	4770      	bx	lr
 8009412:	bf00      	nop
 8009414:	200001a8 	.word	0x200001a8
 8009418:	2000020c 	.word	0x2000020c

0800941c <memchr>:
 800941c:	b510      	push	{r4, lr}
 800941e:	b2c9      	uxtb	r1, r1
 8009420:	4402      	add	r2, r0
 8009422:	4290      	cmp	r0, r2
 8009424:	4603      	mov	r3, r0
 8009426:	d101      	bne.n	800942c <memchr+0x10>
 8009428:	2300      	movs	r3, #0
 800942a:	e003      	b.n	8009434 <memchr+0x18>
 800942c:	781c      	ldrb	r4, [r3, #0]
 800942e:	3001      	adds	r0, #1
 8009430:	428c      	cmp	r4, r1
 8009432:	d1f6      	bne.n	8009422 <memchr+0x6>
 8009434:	4618      	mov	r0, r3
 8009436:	bd10      	pop	{r4, pc}

08009438 <__malloc_lock>:
 8009438:	4770      	bx	lr

0800943a <__malloc_unlock>:
 800943a:	4770      	bx	lr

0800943c <_Balloc>:
 800943c:	b570      	push	{r4, r5, r6, lr}
 800943e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009440:	4604      	mov	r4, r0
 8009442:	460e      	mov	r6, r1
 8009444:	b93d      	cbnz	r5, 8009456 <_Balloc+0x1a>
 8009446:	2010      	movs	r0, #16
 8009448:	f7fe fc56 	bl	8007cf8 <malloc>
 800944c:	6260      	str	r0, [r4, #36]	; 0x24
 800944e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009452:	6005      	str	r5, [r0, #0]
 8009454:	60c5      	str	r5, [r0, #12]
 8009456:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009458:	68eb      	ldr	r3, [r5, #12]
 800945a:	b183      	cbz	r3, 800947e <_Balloc+0x42>
 800945c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009464:	b9b8      	cbnz	r0, 8009496 <_Balloc+0x5a>
 8009466:	2101      	movs	r1, #1
 8009468:	fa01 f506 	lsl.w	r5, r1, r6
 800946c:	1d6a      	adds	r2, r5, #5
 800946e:	0092      	lsls	r2, r2, #2
 8009470:	4620      	mov	r0, r4
 8009472:	f000 fabe 	bl	80099f2 <_calloc_r>
 8009476:	b160      	cbz	r0, 8009492 <_Balloc+0x56>
 8009478:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800947c:	e00e      	b.n	800949c <_Balloc+0x60>
 800947e:	2221      	movs	r2, #33	; 0x21
 8009480:	2104      	movs	r1, #4
 8009482:	4620      	mov	r0, r4
 8009484:	f000 fab5 	bl	80099f2 <_calloc_r>
 8009488:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800948a:	60e8      	str	r0, [r5, #12]
 800948c:	68db      	ldr	r3, [r3, #12]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d1e4      	bne.n	800945c <_Balloc+0x20>
 8009492:	2000      	movs	r0, #0
 8009494:	bd70      	pop	{r4, r5, r6, pc}
 8009496:	6802      	ldr	r2, [r0, #0]
 8009498:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800949c:	2300      	movs	r3, #0
 800949e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80094a2:	e7f7      	b.n	8009494 <_Balloc+0x58>

080094a4 <_Bfree>:
 80094a4:	b570      	push	{r4, r5, r6, lr}
 80094a6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80094a8:	4606      	mov	r6, r0
 80094aa:	460d      	mov	r5, r1
 80094ac:	b93c      	cbnz	r4, 80094be <_Bfree+0x1a>
 80094ae:	2010      	movs	r0, #16
 80094b0:	f7fe fc22 	bl	8007cf8 <malloc>
 80094b4:	6270      	str	r0, [r6, #36]	; 0x24
 80094b6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80094ba:	6004      	str	r4, [r0, #0]
 80094bc:	60c4      	str	r4, [r0, #12]
 80094be:	b13d      	cbz	r5, 80094d0 <_Bfree+0x2c>
 80094c0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80094c2:	686a      	ldr	r2, [r5, #4]
 80094c4:	68db      	ldr	r3, [r3, #12]
 80094c6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80094ca:	6029      	str	r1, [r5, #0]
 80094cc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80094d0:	bd70      	pop	{r4, r5, r6, pc}

080094d2 <__multadd>:
 80094d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094d6:	461f      	mov	r7, r3
 80094d8:	4606      	mov	r6, r0
 80094da:	460c      	mov	r4, r1
 80094dc:	2300      	movs	r3, #0
 80094de:	690d      	ldr	r5, [r1, #16]
 80094e0:	f101 0c14 	add.w	ip, r1, #20
 80094e4:	f8dc 0000 	ldr.w	r0, [ip]
 80094e8:	3301      	adds	r3, #1
 80094ea:	b281      	uxth	r1, r0
 80094ec:	fb02 7101 	mla	r1, r2, r1, r7
 80094f0:	0c00      	lsrs	r0, r0, #16
 80094f2:	0c0f      	lsrs	r7, r1, #16
 80094f4:	fb02 7000 	mla	r0, r2, r0, r7
 80094f8:	b289      	uxth	r1, r1
 80094fa:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80094fe:	429d      	cmp	r5, r3
 8009500:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009504:	f84c 1b04 	str.w	r1, [ip], #4
 8009508:	dcec      	bgt.n	80094e4 <__multadd+0x12>
 800950a:	b1d7      	cbz	r7, 8009542 <__multadd+0x70>
 800950c:	68a3      	ldr	r3, [r4, #8]
 800950e:	42ab      	cmp	r3, r5
 8009510:	dc12      	bgt.n	8009538 <__multadd+0x66>
 8009512:	6861      	ldr	r1, [r4, #4]
 8009514:	4630      	mov	r0, r6
 8009516:	3101      	adds	r1, #1
 8009518:	f7ff ff90 	bl	800943c <_Balloc>
 800951c:	4680      	mov	r8, r0
 800951e:	6922      	ldr	r2, [r4, #16]
 8009520:	f104 010c 	add.w	r1, r4, #12
 8009524:	3202      	adds	r2, #2
 8009526:	0092      	lsls	r2, r2, #2
 8009528:	300c      	adds	r0, #12
 800952a:	f7fe fbed 	bl	8007d08 <memcpy>
 800952e:	4621      	mov	r1, r4
 8009530:	4630      	mov	r0, r6
 8009532:	f7ff ffb7 	bl	80094a4 <_Bfree>
 8009536:	4644      	mov	r4, r8
 8009538:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800953c:	3501      	adds	r5, #1
 800953e:	615f      	str	r7, [r3, #20]
 8009540:	6125      	str	r5, [r4, #16]
 8009542:	4620      	mov	r0, r4
 8009544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009548 <__hi0bits>:
 8009548:	0c02      	lsrs	r2, r0, #16
 800954a:	0412      	lsls	r2, r2, #16
 800954c:	4603      	mov	r3, r0
 800954e:	b9b2      	cbnz	r2, 800957e <__hi0bits+0x36>
 8009550:	0403      	lsls	r3, r0, #16
 8009552:	2010      	movs	r0, #16
 8009554:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009558:	bf04      	itt	eq
 800955a:	021b      	lsleq	r3, r3, #8
 800955c:	3008      	addeq	r0, #8
 800955e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009562:	bf04      	itt	eq
 8009564:	011b      	lsleq	r3, r3, #4
 8009566:	3004      	addeq	r0, #4
 8009568:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800956c:	bf04      	itt	eq
 800956e:	009b      	lsleq	r3, r3, #2
 8009570:	3002      	addeq	r0, #2
 8009572:	2b00      	cmp	r3, #0
 8009574:	db06      	blt.n	8009584 <__hi0bits+0x3c>
 8009576:	005b      	lsls	r3, r3, #1
 8009578:	d503      	bpl.n	8009582 <__hi0bits+0x3a>
 800957a:	3001      	adds	r0, #1
 800957c:	4770      	bx	lr
 800957e:	2000      	movs	r0, #0
 8009580:	e7e8      	b.n	8009554 <__hi0bits+0xc>
 8009582:	2020      	movs	r0, #32
 8009584:	4770      	bx	lr

08009586 <__lo0bits>:
 8009586:	6803      	ldr	r3, [r0, #0]
 8009588:	4601      	mov	r1, r0
 800958a:	f013 0207 	ands.w	r2, r3, #7
 800958e:	d00b      	beq.n	80095a8 <__lo0bits+0x22>
 8009590:	07da      	lsls	r2, r3, #31
 8009592:	d423      	bmi.n	80095dc <__lo0bits+0x56>
 8009594:	0798      	lsls	r0, r3, #30
 8009596:	bf49      	itett	mi
 8009598:	085b      	lsrmi	r3, r3, #1
 800959a:	089b      	lsrpl	r3, r3, #2
 800959c:	2001      	movmi	r0, #1
 800959e:	600b      	strmi	r3, [r1, #0]
 80095a0:	bf5c      	itt	pl
 80095a2:	600b      	strpl	r3, [r1, #0]
 80095a4:	2002      	movpl	r0, #2
 80095a6:	4770      	bx	lr
 80095a8:	b298      	uxth	r0, r3
 80095aa:	b9a8      	cbnz	r0, 80095d8 <__lo0bits+0x52>
 80095ac:	2010      	movs	r0, #16
 80095ae:	0c1b      	lsrs	r3, r3, #16
 80095b0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80095b4:	bf04      	itt	eq
 80095b6:	0a1b      	lsreq	r3, r3, #8
 80095b8:	3008      	addeq	r0, #8
 80095ba:	071a      	lsls	r2, r3, #28
 80095bc:	bf04      	itt	eq
 80095be:	091b      	lsreq	r3, r3, #4
 80095c0:	3004      	addeq	r0, #4
 80095c2:	079a      	lsls	r2, r3, #30
 80095c4:	bf04      	itt	eq
 80095c6:	089b      	lsreq	r3, r3, #2
 80095c8:	3002      	addeq	r0, #2
 80095ca:	07da      	lsls	r2, r3, #31
 80095cc:	d402      	bmi.n	80095d4 <__lo0bits+0x4e>
 80095ce:	085b      	lsrs	r3, r3, #1
 80095d0:	d006      	beq.n	80095e0 <__lo0bits+0x5a>
 80095d2:	3001      	adds	r0, #1
 80095d4:	600b      	str	r3, [r1, #0]
 80095d6:	4770      	bx	lr
 80095d8:	4610      	mov	r0, r2
 80095da:	e7e9      	b.n	80095b0 <__lo0bits+0x2a>
 80095dc:	2000      	movs	r0, #0
 80095de:	4770      	bx	lr
 80095e0:	2020      	movs	r0, #32
 80095e2:	4770      	bx	lr

080095e4 <__i2b>:
 80095e4:	b510      	push	{r4, lr}
 80095e6:	460c      	mov	r4, r1
 80095e8:	2101      	movs	r1, #1
 80095ea:	f7ff ff27 	bl	800943c <_Balloc>
 80095ee:	2201      	movs	r2, #1
 80095f0:	6144      	str	r4, [r0, #20]
 80095f2:	6102      	str	r2, [r0, #16]
 80095f4:	bd10      	pop	{r4, pc}

080095f6 <__multiply>:
 80095f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095fa:	4614      	mov	r4, r2
 80095fc:	690a      	ldr	r2, [r1, #16]
 80095fe:	6923      	ldr	r3, [r4, #16]
 8009600:	4688      	mov	r8, r1
 8009602:	429a      	cmp	r2, r3
 8009604:	bfbe      	ittt	lt
 8009606:	460b      	movlt	r3, r1
 8009608:	46a0      	movlt	r8, r4
 800960a:	461c      	movlt	r4, r3
 800960c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009610:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009614:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009618:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800961c:	eb07 0609 	add.w	r6, r7, r9
 8009620:	42b3      	cmp	r3, r6
 8009622:	bfb8      	it	lt
 8009624:	3101      	addlt	r1, #1
 8009626:	f7ff ff09 	bl	800943c <_Balloc>
 800962a:	f100 0514 	add.w	r5, r0, #20
 800962e:	462b      	mov	r3, r5
 8009630:	2200      	movs	r2, #0
 8009632:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009636:	4573      	cmp	r3, lr
 8009638:	d316      	bcc.n	8009668 <__multiply+0x72>
 800963a:	f104 0214 	add.w	r2, r4, #20
 800963e:	f108 0114 	add.w	r1, r8, #20
 8009642:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009646:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800964a:	9300      	str	r3, [sp, #0]
 800964c:	9b00      	ldr	r3, [sp, #0]
 800964e:	9201      	str	r2, [sp, #4]
 8009650:	4293      	cmp	r3, r2
 8009652:	d80c      	bhi.n	800966e <__multiply+0x78>
 8009654:	2e00      	cmp	r6, #0
 8009656:	dd03      	ble.n	8009660 <__multiply+0x6a>
 8009658:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800965c:	2b00      	cmp	r3, #0
 800965e:	d05d      	beq.n	800971c <__multiply+0x126>
 8009660:	6106      	str	r6, [r0, #16]
 8009662:	b003      	add	sp, #12
 8009664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009668:	f843 2b04 	str.w	r2, [r3], #4
 800966c:	e7e3      	b.n	8009636 <__multiply+0x40>
 800966e:	f8b2 b000 	ldrh.w	fp, [r2]
 8009672:	f1bb 0f00 	cmp.w	fp, #0
 8009676:	d023      	beq.n	80096c0 <__multiply+0xca>
 8009678:	4689      	mov	r9, r1
 800967a:	46ac      	mov	ip, r5
 800967c:	f04f 0800 	mov.w	r8, #0
 8009680:	f859 4b04 	ldr.w	r4, [r9], #4
 8009684:	f8dc a000 	ldr.w	sl, [ip]
 8009688:	b2a3      	uxth	r3, r4
 800968a:	fa1f fa8a 	uxth.w	sl, sl
 800968e:	fb0b a303 	mla	r3, fp, r3, sl
 8009692:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009696:	f8dc 4000 	ldr.w	r4, [ip]
 800969a:	4443      	add	r3, r8
 800969c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80096a0:	fb0b 840a 	mla	r4, fp, sl, r8
 80096a4:	46e2      	mov	sl, ip
 80096a6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80096b0:	454f      	cmp	r7, r9
 80096b2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80096b6:	f84a 3b04 	str.w	r3, [sl], #4
 80096ba:	d82b      	bhi.n	8009714 <__multiply+0x11e>
 80096bc:	f8cc 8004 	str.w	r8, [ip, #4]
 80096c0:	9b01      	ldr	r3, [sp, #4]
 80096c2:	3204      	adds	r2, #4
 80096c4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80096c8:	f1ba 0f00 	cmp.w	sl, #0
 80096cc:	d020      	beq.n	8009710 <__multiply+0x11a>
 80096ce:	4689      	mov	r9, r1
 80096d0:	46a8      	mov	r8, r5
 80096d2:	f04f 0b00 	mov.w	fp, #0
 80096d6:	682b      	ldr	r3, [r5, #0]
 80096d8:	f8b9 c000 	ldrh.w	ip, [r9]
 80096dc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	fb0a 440c 	mla	r4, sl, ip, r4
 80096e6:	46c4      	mov	ip, r8
 80096e8:	445c      	add	r4, fp
 80096ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80096ee:	f84c 3b04 	str.w	r3, [ip], #4
 80096f2:	f859 3b04 	ldr.w	r3, [r9], #4
 80096f6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80096fa:	0c1b      	lsrs	r3, r3, #16
 80096fc:	fb0a b303 	mla	r3, sl, r3, fp
 8009700:	454f      	cmp	r7, r9
 8009702:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009706:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800970a:	d805      	bhi.n	8009718 <__multiply+0x122>
 800970c:	f8c8 3004 	str.w	r3, [r8, #4]
 8009710:	3504      	adds	r5, #4
 8009712:	e79b      	b.n	800964c <__multiply+0x56>
 8009714:	46d4      	mov	ip, sl
 8009716:	e7b3      	b.n	8009680 <__multiply+0x8a>
 8009718:	46e0      	mov	r8, ip
 800971a:	e7dd      	b.n	80096d8 <__multiply+0xe2>
 800971c:	3e01      	subs	r6, #1
 800971e:	e799      	b.n	8009654 <__multiply+0x5e>

08009720 <__pow5mult>:
 8009720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009724:	4615      	mov	r5, r2
 8009726:	f012 0203 	ands.w	r2, r2, #3
 800972a:	4606      	mov	r6, r0
 800972c:	460f      	mov	r7, r1
 800972e:	d007      	beq.n	8009740 <__pow5mult+0x20>
 8009730:	4c21      	ldr	r4, [pc, #132]	; (80097b8 <__pow5mult+0x98>)
 8009732:	3a01      	subs	r2, #1
 8009734:	2300      	movs	r3, #0
 8009736:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800973a:	f7ff feca 	bl	80094d2 <__multadd>
 800973e:	4607      	mov	r7, r0
 8009740:	10ad      	asrs	r5, r5, #2
 8009742:	d035      	beq.n	80097b0 <__pow5mult+0x90>
 8009744:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009746:	b93c      	cbnz	r4, 8009758 <__pow5mult+0x38>
 8009748:	2010      	movs	r0, #16
 800974a:	f7fe fad5 	bl	8007cf8 <malloc>
 800974e:	6270      	str	r0, [r6, #36]	; 0x24
 8009750:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009754:	6004      	str	r4, [r0, #0]
 8009756:	60c4      	str	r4, [r0, #12]
 8009758:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800975c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009760:	b94c      	cbnz	r4, 8009776 <__pow5mult+0x56>
 8009762:	f240 2171 	movw	r1, #625	; 0x271
 8009766:	4630      	mov	r0, r6
 8009768:	f7ff ff3c 	bl	80095e4 <__i2b>
 800976c:	2300      	movs	r3, #0
 800976e:	4604      	mov	r4, r0
 8009770:	f8c8 0008 	str.w	r0, [r8, #8]
 8009774:	6003      	str	r3, [r0, #0]
 8009776:	f04f 0800 	mov.w	r8, #0
 800977a:	07eb      	lsls	r3, r5, #31
 800977c:	d50a      	bpl.n	8009794 <__pow5mult+0x74>
 800977e:	4639      	mov	r1, r7
 8009780:	4622      	mov	r2, r4
 8009782:	4630      	mov	r0, r6
 8009784:	f7ff ff37 	bl	80095f6 <__multiply>
 8009788:	4681      	mov	r9, r0
 800978a:	4639      	mov	r1, r7
 800978c:	4630      	mov	r0, r6
 800978e:	f7ff fe89 	bl	80094a4 <_Bfree>
 8009792:	464f      	mov	r7, r9
 8009794:	106d      	asrs	r5, r5, #1
 8009796:	d00b      	beq.n	80097b0 <__pow5mult+0x90>
 8009798:	6820      	ldr	r0, [r4, #0]
 800979a:	b938      	cbnz	r0, 80097ac <__pow5mult+0x8c>
 800979c:	4622      	mov	r2, r4
 800979e:	4621      	mov	r1, r4
 80097a0:	4630      	mov	r0, r6
 80097a2:	f7ff ff28 	bl	80095f6 <__multiply>
 80097a6:	6020      	str	r0, [r4, #0]
 80097a8:	f8c0 8000 	str.w	r8, [r0]
 80097ac:	4604      	mov	r4, r0
 80097ae:	e7e4      	b.n	800977a <__pow5mult+0x5a>
 80097b0:	4638      	mov	r0, r7
 80097b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097b6:	bf00      	nop
 80097b8:	0800b640 	.word	0x0800b640

080097bc <__lshift>:
 80097bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097c0:	460c      	mov	r4, r1
 80097c2:	4607      	mov	r7, r0
 80097c4:	4616      	mov	r6, r2
 80097c6:	6923      	ldr	r3, [r4, #16]
 80097c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80097cc:	eb0a 0903 	add.w	r9, sl, r3
 80097d0:	6849      	ldr	r1, [r1, #4]
 80097d2:	68a3      	ldr	r3, [r4, #8]
 80097d4:	f109 0501 	add.w	r5, r9, #1
 80097d8:	42ab      	cmp	r3, r5
 80097da:	db32      	blt.n	8009842 <__lshift+0x86>
 80097dc:	4638      	mov	r0, r7
 80097de:	f7ff fe2d 	bl	800943c <_Balloc>
 80097e2:	2300      	movs	r3, #0
 80097e4:	4680      	mov	r8, r0
 80097e6:	461a      	mov	r2, r3
 80097e8:	f100 0114 	add.w	r1, r0, #20
 80097ec:	4553      	cmp	r3, sl
 80097ee:	db2b      	blt.n	8009848 <__lshift+0x8c>
 80097f0:	6920      	ldr	r0, [r4, #16]
 80097f2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80097f6:	f104 0314 	add.w	r3, r4, #20
 80097fa:	f016 021f 	ands.w	r2, r6, #31
 80097fe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009802:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009806:	d025      	beq.n	8009854 <__lshift+0x98>
 8009808:	2000      	movs	r0, #0
 800980a:	f1c2 0e20 	rsb	lr, r2, #32
 800980e:	468a      	mov	sl, r1
 8009810:	681e      	ldr	r6, [r3, #0]
 8009812:	4096      	lsls	r6, r2
 8009814:	4330      	orrs	r0, r6
 8009816:	f84a 0b04 	str.w	r0, [sl], #4
 800981a:	f853 0b04 	ldr.w	r0, [r3], #4
 800981e:	459c      	cmp	ip, r3
 8009820:	fa20 f00e 	lsr.w	r0, r0, lr
 8009824:	d814      	bhi.n	8009850 <__lshift+0x94>
 8009826:	6048      	str	r0, [r1, #4]
 8009828:	b108      	cbz	r0, 800982e <__lshift+0x72>
 800982a:	f109 0502 	add.w	r5, r9, #2
 800982e:	3d01      	subs	r5, #1
 8009830:	4638      	mov	r0, r7
 8009832:	f8c8 5010 	str.w	r5, [r8, #16]
 8009836:	4621      	mov	r1, r4
 8009838:	f7ff fe34 	bl	80094a4 <_Bfree>
 800983c:	4640      	mov	r0, r8
 800983e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009842:	3101      	adds	r1, #1
 8009844:	005b      	lsls	r3, r3, #1
 8009846:	e7c7      	b.n	80097d8 <__lshift+0x1c>
 8009848:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800984c:	3301      	adds	r3, #1
 800984e:	e7cd      	b.n	80097ec <__lshift+0x30>
 8009850:	4651      	mov	r1, sl
 8009852:	e7dc      	b.n	800980e <__lshift+0x52>
 8009854:	3904      	subs	r1, #4
 8009856:	f853 2b04 	ldr.w	r2, [r3], #4
 800985a:	459c      	cmp	ip, r3
 800985c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009860:	d8f9      	bhi.n	8009856 <__lshift+0x9a>
 8009862:	e7e4      	b.n	800982e <__lshift+0x72>

08009864 <__mcmp>:
 8009864:	6903      	ldr	r3, [r0, #16]
 8009866:	690a      	ldr	r2, [r1, #16]
 8009868:	b530      	push	{r4, r5, lr}
 800986a:	1a9b      	subs	r3, r3, r2
 800986c:	d10c      	bne.n	8009888 <__mcmp+0x24>
 800986e:	0092      	lsls	r2, r2, #2
 8009870:	3014      	adds	r0, #20
 8009872:	3114      	adds	r1, #20
 8009874:	1884      	adds	r4, r0, r2
 8009876:	4411      	add	r1, r2
 8009878:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800987c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009880:	4295      	cmp	r5, r2
 8009882:	d003      	beq.n	800988c <__mcmp+0x28>
 8009884:	d305      	bcc.n	8009892 <__mcmp+0x2e>
 8009886:	2301      	movs	r3, #1
 8009888:	4618      	mov	r0, r3
 800988a:	bd30      	pop	{r4, r5, pc}
 800988c:	42a0      	cmp	r0, r4
 800988e:	d3f3      	bcc.n	8009878 <__mcmp+0x14>
 8009890:	e7fa      	b.n	8009888 <__mcmp+0x24>
 8009892:	f04f 33ff 	mov.w	r3, #4294967295
 8009896:	e7f7      	b.n	8009888 <__mcmp+0x24>

08009898 <__mdiff>:
 8009898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800989c:	460d      	mov	r5, r1
 800989e:	4607      	mov	r7, r0
 80098a0:	4611      	mov	r1, r2
 80098a2:	4628      	mov	r0, r5
 80098a4:	4614      	mov	r4, r2
 80098a6:	f7ff ffdd 	bl	8009864 <__mcmp>
 80098aa:	1e06      	subs	r6, r0, #0
 80098ac:	d108      	bne.n	80098c0 <__mdiff+0x28>
 80098ae:	4631      	mov	r1, r6
 80098b0:	4638      	mov	r0, r7
 80098b2:	f7ff fdc3 	bl	800943c <_Balloc>
 80098b6:	2301      	movs	r3, #1
 80098b8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80098bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098c0:	bfa4      	itt	ge
 80098c2:	4623      	movge	r3, r4
 80098c4:	462c      	movge	r4, r5
 80098c6:	4638      	mov	r0, r7
 80098c8:	6861      	ldr	r1, [r4, #4]
 80098ca:	bfa6      	itte	ge
 80098cc:	461d      	movge	r5, r3
 80098ce:	2600      	movge	r6, #0
 80098d0:	2601      	movlt	r6, #1
 80098d2:	f7ff fdb3 	bl	800943c <_Balloc>
 80098d6:	f04f 0e00 	mov.w	lr, #0
 80098da:	60c6      	str	r6, [r0, #12]
 80098dc:	692b      	ldr	r3, [r5, #16]
 80098de:	6926      	ldr	r6, [r4, #16]
 80098e0:	f104 0214 	add.w	r2, r4, #20
 80098e4:	f105 0914 	add.w	r9, r5, #20
 80098e8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80098ec:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80098f0:	f100 0114 	add.w	r1, r0, #20
 80098f4:	f852 ab04 	ldr.w	sl, [r2], #4
 80098f8:	f859 5b04 	ldr.w	r5, [r9], #4
 80098fc:	fa1f f38a 	uxth.w	r3, sl
 8009900:	4473      	add	r3, lr
 8009902:	b2ac      	uxth	r4, r5
 8009904:	1b1b      	subs	r3, r3, r4
 8009906:	0c2c      	lsrs	r4, r5, #16
 8009908:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800990c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8009910:	b29b      	uxth	r3, r3
 8009912:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8009916:	45c8      	cmp	r8, r9
 8009918:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800991c:	4694      	mov	ip, r2
 800991e:	f841 4b04 	str.w	r4, [r1], #4
 8009922:	d8e7      	bhi.n	80098f4 <__mdiff+0x5c>
 8009924:	45bc      	cmp	ip, r7
 8009926:	d304      	bcc.n	8009932 <__mdiff+0x9a>
 8009928:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800992c:	b183      	cbz	r3, 8009950 <__mdiff+0xb8>
 800992e:	6106      	str	r6, [r0, #16]
 8009930:	e7c4      	b.n	80098bc <__mdiff+0x24>
 8009932:	f85c 4b04 	ldr.w	r4, [ip], #4
 8009936:	b2a2      	uxth	r2, r4
 8009938:	4472      	add	r2, lr
 800993a:	1413      	asrs	r3, r2, #16
 800993c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009940:	b292      	uxth	r2, r2
 8009942:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009946:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800994a:	f841 2b04 	str.w	r2, [r1], #4
 800994e:	e7e9      	b.n	8009924 <__mdiff+0x8c>
 8009950:	3e01      	subs	r6, #1
 8009952:	e7e9      	b.n	8009928 <__mdiff+0x90>

08009954 <__d2b>:
 8009954:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009958:	461c      	mov	r4, r3
 800995a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800995e:	2101      	movs	r1, #1
 8009960:	4690      	mov	r8, r2
 8009962:	f7ff fd6b 	bl	800943c <_Balloc>
 8009966:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800996a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800996e:	4607      	mov	r7, r0
 8009970:	bb34      	cbnz	r4, 80099c0 <__d2b+0x6c>
 8009972:	9201      	str	r2, [sp, #4]
 8009974:	f1b8 0200 	subs.w	r2, r8, #0
 8009978:	d027      	beq.n	80099ca <__d2b+0x76>
 800997a:	a802      	add	r0, sp, #8
 800997c:	f840 2d08 	str.w	r2, [r0, #-8]!
 8009980:	f7ff fe01 	bl	8009586 <__lo0bits>
 8009984:	9900      	ldr	r1, [sp, #0]
 8009986:	b1f0      	cbz	r0, 80099c6 <__d2b+0x72>
 8009988:	9a01      	ldr	r2, [sp, #4]
 800998a:	f1c0 0320 	rsb	r3, r0, #32
 800998e:	fa02 f303 	lsl.w	r3, r2, r3
 8009992:	430b      	orrs	r3, r1
 8009994:	40c2      	lsrs	r2, r0
 8009996:	617b      	str	r3, [r7, #20]
 8009998:	9201      	str	r2, [sp, #4]
 800999a:	9b01      	ldr	r3, [sp, #4]
 800999c:	2b00      	cmp	r3, #0
 800999e:	bf14      	ite	ne
 80099a0:	2102      	movne	r1, #2
 80099a2:	2101      	moveq	r1, #1
 80099a4:	61bb      	str	r3, [r7, #24]
 80099a6:	6139      	str	r1, [r7, #16]
 80099a8:	b1c4      	cbz	r4, 80099dc <__d2b+0x88>
 80099aa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80099ae:	4404      	add	r4, r0
 80099b0:	6034      	str	r4, [r6, #0]
 80099b2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80099b6:	6028      	str	r0, [r5, #0]
 80099b8:	4638      	mov	r0, r7
 80099ba:	b002      	add	sp, #8
 80099bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099c0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80099c4:	e7d5      	b.n	8009972 <__d2b+0x1e>
 80099c6:	6179      	str	r1, [r7, #20]
 80099c8:	e7e7      	b.n	800999a <__d2b+0x46>
 80099ca:	a801      	add	r0, sp, #4
 80099cc:	f7ff fddb 	bl	8009586 <__lo0bits>
 80099d0:	2101      	movs	r1, #1
 80099d2:	9b01      	ldr	r3, [sp, #4]
 80099d4:	6139      	str	r1, [r7, #16]
 80099d6:	617b      	str	r3, [r7, #20]
 80099d8:	3020      	adds	r0, #32
 80099da:	e7e5      	b.n	80099a8 <__d2b+0x54>
 80099dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80099e0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80099e4:	6030      	str	r0, [r6, #0]
 80099e6:	6918      	ldr	r0, [r3, #16]
 80099e8:	f7ff fdae 	bl	8009548 <__hi0bits>
 80099ec:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80099f0:	e7e1      	b.n	80099b6 <__d2b+0x62>

080099f2 <_calloc_r>:
 80099f2:	b538      	push	{r3, r4, r5, lr}
 80099f4:	fb02 f401 	mul.w	r4, r2, r1
 80099f8:	4621      	mov	r1, r4
 80099fa:	f7fe f9e5 	bl	8007dc8 <_malloc_r>
 80099fe:	4605      	mov	r5, r0
 8009a00:	b118      	cbz	r0, 8009a0a <_calloc_r+0x18>
 8009a02:	4622      	mov	r2, r4
 8009a04:	2100      	movs	r1, #0
 8009a06:	f7fe f98a 	bl	8007d1e <memset>
 8009a0a:	4628      	mov	r0, r5
 8009a0c:	bd38      	pop	{r3, r4, r5, pc}

08009a0e <__ssputs_r>:
 8009a0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a12:	688e      	ldr	r6, [r1, #8]
 8009a14:	4682      	mov	sl, r0
 8009a16:	429e      	cmp	r6, r3
 8009a18:	460c      	mov	r4, r1
 8009a1a:	4690      	mov	r8, r2
 8009a1c:	4699      	mov	r9, r3
 8009a1e:	d837      	bhi.n	8009a90 <__ssputs_r+0x82>
 8009a20:	898a      	ldrh	r2, [r1, #12]
 8009a22:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009a26:	d031      	beq.n	8009a8c <__ssputs_r+0x7e>
 8009a28:	2302      	movs	r3, #2
 8009a2a:	6825      	ldr	r5, [r4, #0]
 8009a2c:	6909      	ldr	r1, [r1, #16]
 8009a2e:	1a6f      	subs	r7, r5, r1
 8009a30:	6965      	ldr	r5, [r4, #20]
 8009a32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a36:	fb95 f5f3 	sdiv	r5, r5, r3
 8009a3a:	f109 0301 	add.w	r3, r9, #1
 8009a3e:	443b      	add	r3, r7
 8009a40:	429d      	cmp	r5, r3
 8009a42:	bf38      	it	cc
 8009a44:	461d      	movcc	r5, r3
 8009a46:	0553      	lsls	r3, r2, #21
 8009a48:	d530      	bpl.n	8009aac <__ssputs_r+0x9e>
 8009a4a:	4629      	mov	r1, r5
 8009a4c:	f7fe f9bc 	bl	8007dc8 <_malloc_r>
 8009a50:	4606      	mov	r6, r0
 8009a52:	b950      	cbnz	r0, 8009a6a <__ssputs_r+0x5c>
 8009a54:	230c      	movs	r3, #12
 8009a56:	f04f 30ff 	mov.w	r0, #4294967295
 8009a5a:	f8ca 3000 	str.w	r3, [sl]
 8009a5e:	89a3      	ldrh	r3, [r4, #12]
 8009a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a64:	81a3      	strh	r3, [r4, #12]
 8009a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a6a:	463a      	mov	r2, r7
 8009a6c:	6921      	ldr	r1, [r4, #16]
 8009a6e:	f7fe f94b 	bl	8007d08 <memcpy>
 8009a72:	89a3      	ldrh	r3, [r4, #12]
 8009a74:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a7c:	81a3      	strh	r3, [r4, #12]
 8009a7e:	6126      	str	r6, [r4, #16]
 8009a80:	443e      	add	r6, r7
 8009a82:	6026      	str	r6, [r4, #0]
 8009a84:	464e      	mov	r6, r9
 8009a86:	6165      	str	r5, [r4, #20]
 8009a88:	1bed      	subs	r5, r5, r7
 8009a8a:	60a5      	str	r5, [r4, #8]
 8009a8c:	454e      	cmp	r6, r9
 8009a8e:	d900      	bls.n	8009a92 <__ssputs_r+0x84>
 8009a90:	464e      	mov	r6, r9
 8009a92:	4632      	mov	r2, r6
 8009a94:	4641      	mov	r1, r8
 8009a96:	6820      	ldr	r0, [r4, #0]
 8009a98:	f000 f91e 	bl	8009cd8 <memmove>
 8009a9c:	68a3      	ldr	r3, [r4, #8]
 8009a9e:	2000      	movs	r0, #0
 8009aa0:	1b9b      	subs	r3, r3, r6
 8009aa2:	60a3      	str	r3, [r4, #8]
 8009aa4:	6823      	ldr	r3, [r4, #0]
 8009aa6:	441e      	add	r6, r3
 8009aa8:	6026      	str	r6, [r4, #0]
 8009aaa:	e7dc      	b.n	8009a66 <__ssputs_r+0x58>
 8009aac:	462a      	mov	r2, r5
 8009aae:	f000 f92c 	bl	8009d0a <_realloc_r>
 8009ab2:	4606      	mov	r6, r0
 8009ab4:	2800      	cmp	r0, #0
 8009ab6:	d1e2      	bne.n	8009a7e <__ssputs_r+0x70>
 8009ab8:	6921      	ldr	r1, [r4, #16]
 8009aba:	4650      	mov	r0, sl
 8009abc:	f7fe f938 	bl	8007d30 <_free_r>
 8009ac0:	e7c8      	b.n	8009a54 <__ssputs_r+0x46>
	...

08009ac4 <_svfiprintf_r>:
 8009ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ac8:	461d      	mov	r5, r3
 8009aca:	898b      	ldrh	r3, [r1, #12]
 8009acc:	b09d      	sub	sp, #116	; 0x74
 8009ace:	061f      	lsls	r7, r3, #24
 8009ad0:	4680      	mov	r8, r0
 8009ad2:	460c      	mov	r4, r1
 8009ad4:	4616      	mov	r6, r2
 8009ad6:	d50f      	bpl.n	8009af8 <_svfiprintf_r+0x34>
 8009ad8:	690b      	ldr	r3, [r1, #16]
 8009ada:	b96b      	cbnz	r3, 8009af8 <_svfiprintf_r+0x34>
 8009adc:	2140      	movs	r1, #64	; 0x40
 8009ade:	f7fe f973 	bl	8007dc8 <_malloc_r>
 8009ae2:	6020      	str	r0, [r4, #0]
 8009ae4:	6120      	str	r0, [r4, #16]
 8009ae6:	b928      	cbnz	r0, 8009af4 <_svfiprintf_r+0x30>
 8009ae8:	230c      	movs	r3, #12
 8009aea:	f8c8 3000 	str.w	r3, [r8]
 8009aee:	f04f 30ff 	mov.w	r0, #4294967295
 8009af2:	e0c8      	b.n	8009c86 <_svfiprintf_r+0x1c2>
 8009af4:	2340      	movs	r3, #64	; 0x40
 8009af6:	6163      	str	r3, [r4, #20]
 8009af8:	2300      	movs	r3, #0
 8009afa:	9309      	str	r3, [sp, #36]	; 0x24
 8009afc:	2320      	movs	r3, #32
 8009afe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b02:	2330      	movs	r3, #48	; 0x30
 8009b04:	f04f 0b01 	mov.w	fp, #1
 8009b08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b0c:	9503      	str	r5, [sp, #12]
 8009b0e:	4637      	mov	r7, r6
 8009b10:	463d      	mov	r5, r7
 8009b12:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009b16:	b10b      	cbz	r3, 8009b1c <_svfiprintf_r+0x58>
 8009b18:	2b25      	cmp	r3, #37	; 0x25
 8009b1a:	d13e      	bne.n	8009b9a <_svfiprintf_r+0xd6>
 8009b1c:	ebb7 0a06 	subs.w	sl, r7, r6
 8009b20:	d00b      	beq.n	8009b3a <_svfiprintf_r+0x76>
 8009b22:	4653      	mov	r3, sl
 8009b24:	4632      	mov	r2, r6
 8009b26:	4621      	mov	r1, r4
 8009b28:	4640      	mov	r0, r8
 8009b2a:	f7ff ff70 	bl	8009a0e <__ssputs_r>
 8009b2e:	3001      	adds	r0, #1
 8009b30:	f000 80a4 	beq.w	8009c7c <_svfiprintf_r+0x1b8>
 8009b34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b36:	4453      	add	r3, sl
 8009b38:	9309      	str	r3, [sp, #36]	; 0x24
 8009b3a:	783b      	ldrb	r3, [r7, #0]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	f000 809d 	beq.w	8009c7c <_svfiprintf_r+0x1b8>
 8009b42:	2300      	movs	r3, #0
 8009b44:	f04f 32ff 	mov.w	r2, #4294967295
 8009b48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b4c:	9304      	str	r3, [sp, #16]
 8009b4e:	9307      	str	r3, [sp, #28]
 8009b50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b54:	931a      	str	r3, [sp, #104]	; 0x68
 8009b56:	462f      	mov	r7, r5
 8009b58:	2205      	movs	r2, #5
 8009b5a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009b5e:	4850      	ldr	r0, [pc, #320]	; (8009ca0 <_svfiprintf_r+0x1dc>)
 8009b60:	f7ff fc5c 	bl	800941c <memchr>
 8009b64:	9b04      	ldr	r3, [sp, #16]
 8009b66:	b9d0      	cbnz	r0, 8009b9e <_svfiprintf_r+0xda>
 8009b68:	06d9      	lsls	r1, r3, #27
 8009b6a:	bf44      	itt	mi
 8009b6c:	2220      	movmi	r2, #32
 8009b6e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009b72:	071a      	lsls	r2, r3, #28
 8009b74:	bf44      	itt	mi
 8009b76:	222b      	movmi	r2, #43	; 0x2b
 8009b78:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009b7c:	782a      	ldrb	r2, [r5, #0]
 8009b7e:	2a2a      	cmp	r2, #42	; 0x2a
 8009b80:	d015      	beq.n	8009bae <_svfiprintf_r+0xea>
 8009b82:	462f      	mov	r7, r5
 8009b84:	2000      	movs	r0, #0
 8009b86:	250a      	movs	r5, #10
 8009b88:	9a07      	ldr	r2, [sp, #28]
 8009b8a:	4639      	mov	r1, r7
 8009b8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b90:	3b30      	subs	r3, #48	; 0x30
 8009b92:	2b09      	cmp	r3, #9
 8009b94:	d94d      	bls.n	8009c32 <_svfiprintf_r+0x16e>
 8009b96:	b1b8      	cbz	r0, 8009bc8 <_svfiprintf_r+0x104>
 8009b98:	e00f      	b.n	8009bba <_svfiprintf_r+0xf6>
 8009b9a:	462f      	mov	r7, r5
 8009b9c:	e7b8      	b.n	8009b10 <_svfiprintf_r+0x4c>
 8009b9e:	4a40      	ldr	r2, [pc, #256]	; (8009ca0 <_svfiprintf_r+0x1dc>)
 8009ba0:	463d      	mov	r5, r7
 8009ba2:	1a80      	subs	r0, r0, r2
 8009ba4:	fa0b f000 	lsl.w	r0, fp, r0
 8009ba8:	4318      	orrs	r0, r3
 8009baa:	9004      	str	r0, [sp, #16]
 8009bac:	e7d3      	b.n	8009b56 <_svfiprintf_r+0x92>
 8009bae:	9a03      	ldr	r2, [sp, #12]
 8009bb0:	1d11      	adds	r1, r2, #4
 8009bb2:	6812      	ldr	r2, [r2, #0]
 8009bb4:	9103      	str	r1, [sp, #12]
 8009bb6:	2a00      	cmp	r2, #0
 8009bb8:	db01      	blt.n	8009bbe <_svfiprintf_r+0xfa>
 8009bba:	9207      	str	r2, [sp, #28]
 8009bbc:	e004      	b.n	8009bc8 <_svfiprintf_r+0x104>
 8009bbe:	4252      	negs	r2, r2
 8009bc0:	f043 0302 	orr.w	r3, r3, #2
 8009bc4:	9207      	str	r2, [sp, #28]
 8009bc6:	9304      	str	r3, [sp, #16]
 8009bc8:	783b      	ldrb	r3, [r7, #0]
 8009bca:	2b2e      	cmp	r3, #46	; 0x2e
 8009bcc:	d10c      	bne.n	8009be8 <_svfiprintf_r+0x124>
 8009bce:	787b      	ldrb	r3, [r7, #1]
 8009bd0:	2b2a      	cmp	r3, #42	; 0x2a
 8009bd2:	d133      	bne.n	8009c3c <_svfiprintf_r+0x178>
 8009bd4:	9b03      	ldr	r3, [sp, #12]
 8009bd6:	3702      	adds	r7, #2
 8009bd8:	1d1a      	adds	r2, r3, #4
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	9203      	str	r2, [sp, #12]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	bfb8      	it	lt
 8009be2:	f04f 33ff 	movlt.w	r3, #4294967295
 8009be6:	9305      	str	r3, [sp, #20]
 8009be8:	4d2e      	ldr	r5, [pc, #184]	; (8009ca4 <_svfiprintf_r+0x1e0>)
 8009bea:	2203      	movs	r2, #3
 8009bec:	7839      	ldrb	r1, [r7, #0]
 8009bee:	4628      	mov	r0, r5
 8009bf0:	f7ff fc14 	bl	800941c <memchr>
 8009bf4:	b138      	cbz	r0, 8009c06 <_svfiprintf_r+0x142>
 8009bf6:	2340      	movs	r3, #64	; 0x40
 8009bf8:	1b40      	subs	r0, r0, r5
 8009bfa:	fa03 f000 	lsl.w	r0, r3, r0
 8009bfe:	9b04      	ldr	r3, [sp, #16]
 8009c00:	3701      	adds	r7, #1
 8009c02:	4303      	orrs	r3, r0
 8009c04:	9304      	str	r3, [sp, #16]
 8009c06:	7839      	ldrb	r1, [r7, #0]
 8009c08:	2206      	movs	r2, #6
 8009c0a:	4827      	ldr	r0, [pc, #156]	; (8009ca8 <_svfiprintf_r+0x1e4>)
 8009c0c:	1c7e      	adds	r6, r7, #1
 8009c0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c12:	f7ff fc03 	bl	800941c <memchr>
 8009c16:	2800      	cmp	r0, #0
 8009c18:	d038      	beq.n	8009c8c <_svfiprintf_r+0x1c8>
 8009c1a:	4b24      	ldr	r3, [pc, #144]	; (8009cac <_svfiprintf_r+0x1e8>)
 8009c1c:	bb13      	cbnz	r3, 8009c64 <_svfiprintf_r+0x1a0>
 8009c1e:	9b03      	ldr	r3, [sp, #12]
 8009c20:	3307      	adds	r3, #7
 8009c22:	f023 0307 	bic.w	r3, r3, #7
 8009c26:	3308      	adds	r3, #8
 8009c28:	9303      	str	r3, [sp, #12]
 8009c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c2c:	444b      	add	r3, r9
 8009c2e:	9309      	str	r3, [sp, #36]	; 0x24
 8009c30:	e76d      	b.n	8009b0e <_svfiprintf_r+0x4a>
 8009c32:	fb05 3202 	mla	r2, r5, r2, r3
 8009c36:	2001      	movs	r0, #1
 8009c38:	460f      	mov	r7, r1
 8009c3a:	e7a6      	b.n	8009b8a <_svfiprintf_r+0xc6>
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	250a      	movs	r5, #10
 8009c40:	4619      	mov	r1, r3
 8009c42:	3701      	adds	r7, #1
 8009c44:	9305      	str	r3, [sp, #20]
 8009c46:	4638      	mov	r0, r7
 8009c48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c4c:	3a30      	subs	r2, #48	; 0x30
 8009c4e:	2a09      	cmp	r2, #9
 8009c50:	d903      	bls.n	8009c5a <_svfiprintf_r+0x196>
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d0c8      	beq.n	8009be8 <_svfiprintf_r+0x124>
 8009c56:	9105      	str	r1, [sp, #20]
 8009c58:	e7c6      	b.n	8009be8 <_svfiprintf_r+0x124>
 8009c5a:	fb05 2101 	mla	r1, r5, r1, r2
 8009c5e:	2301      	movs	r3, #1
 8009c60:	4607      	mov	r7, r0
 8009c62:	e7f0      	b.n	8009c46 <_svfiprintf_r+0x182>
 8009c64:	ab03      	add	r3, sp, #12
 8009c66:	9300      	str	r3, [sp, #0]
 8009c68:	4622      	mov	r2, r4
 8009c6a:	4b11      	ldr	r3, [pc, #68]	; (8009cb0 <_svfiprintf_r+0x1ec>)
 8009c6c:	a904      	add	r1, sp, #16
 8009c6e:	4640      	mov	r0, r8
 8009c70:	f7fe f996 	bl	8007fa0 <_printf_float>
 8009c74:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009c78:	4681      	mov	r9, r0
 8009c7a:	d1d6      	bne.n	8009c2a <_svfiprintf_r+0x166>
 8009c7c:	89a3      	ldrh	r3, [r4, #12]
 8009c7e:	065b      	lsls	r3, r3, #25
 8009c80:	f53f af35 	bmi.w	8009aee <_svfiprintf_r+0x2a>
 8009c84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c86:	b01d      	add	sp, #116	; 0x74
 8009c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c8c:	ab03      	add	r3, sp, #12
 8009c8e:	9300      	str	r3, [sp, #0]
 8009c90:	4622      	mov	r2, r4
 8009c92:	4b07      	ldr	r3, [pc, #28]	; (8009cb0 <_svfiprintf_r+0x1ec>)
 8009c94:	a904      	add	r1, sp, #16
 8009c96:	4640      	mov	r0, r8
 8009c98:	f7fe fc2e 	bl	80084f8 <_printf_i>
 8009c9c:	e7ea      	b.n	8009c74 <_svfiprintf_r+0x1b0>
 8009c9e:	bf00      	nop
 8009ca0:	0800b64c 	.word	0x0800b64c
 8009ca4:	0800b652 	.word	0x0800b652
 8009ca8:	0800b656 	.word	0x0800b656
 8009cac:	08007fa1 	.word	0x08007fa1
 8009cb0:	08009a0f 	.word	0x08009a0f

08009cb4 <__ascii_mbtowc>:
 8009cb4:	b082      	sub	sp, #8
 8009cb6:	b901      	cbnz	r1, 8009cba <__ascii_mbtowc+0x6>
 8009cb8:	a901      	add	r1, sp, #4
 8009cba:	b142      	cbz	r2, 8009cce <__ascii_mbtowc+0x1a>
 8009cbc:	b14b      	cbz	r3, 8009cd2 <__ascii_mbtowc+0x1e>
 8009cbe:	7813      	ldrb	r3, [r2, #0]
 8009cc0:	600b      	str	r3, [r1, #0]
 8009cc2:	7812      	ldrb	r2, [r2, #0]
 8009cc4:	1c10      	adds	r0, r2, #0
 8009cc6:	bf18      	it	ne
 8009cc8:	2001      	movne	r0, #1
 8009cca:	b002      	add	sp, #8
 8009ccc:	4770      	bx	lr
 8009cce:	4610      	mov	r0, r2
 8009cd0:	e7fb      	b.n	8009cca <__ascii_mbtowc+0x16>
 8009cd2:	f06f 0001 	mvn.w	r0, #1
 8009cd6:	e7f8      	b.n	8009cca <__ascii_mbtowc+0x16>

08009cd8 <memmove>:
 8009cd8:	4288      	cmp	r0, r1
 8009cda:	b510      	push	{r4, lr}
 8009cdc:	eb01 0302 	add.w	r3, r1, r2
 8009ce0:	d807      	bhi.n	8009cf2 <memmove+0x1a>
 8009ce2:	1e42      	subs	r2, r0, #1
 8009ce4:	4299      	cmp	r1, r3
 8009ce6:	d00a      	beq.n	8009cfe <memmove+0x26>
 8009ce8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cec:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009cf0:	e7f8      	b.n	8009ce4 <memmove+0xc>
 8009cf2:	4283      	cmp	r3, r0
 8009cf4:	d9f5      	bls.n	8009ce2 <memmove+0xa>
 8009cf6:	1881      	adds	r1, r0, r2
 8009cf8:	1ad2      	subs	r2, r2, r3
 8009cfa:	42d3      	cmn	r3, r2
 8009cfc:	d100      	bne.n	8009d00 <memmove+0x28>
 8009cfe:	bd10      	pop	{r4, pc}
 8009d00:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d04:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009d08:	e7f7      	b.n	8009cfa <memmove+0x22>

08009d0a <_realloc_r>:
 8009d0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d0c:	4607      	mov	r7, r0
 8009d0e:	4614      	mov	r4, r2
 8009d10:	460e      	mov	r6, r1
 8009d12:	b921      	cbnz	r1, 8009d1e <_realloc_r+0x14>
 8009d14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009d18:	4611      	mov	r1, r2
 8009d1a:	f7fe b855 	b.w	8007dc8 <_malloc_r>
 8009d1e:	b922      	cbnz	r2, 8009d2a <_realloc_r+0x20>
 8009d20:	f7fe f806 	bl	8007d30 <_free_r>
 8009d24:	4625      	mov	r5, r4
 8009d26:	4628      	mov	r0, r5
 8009d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d2a:	f000 f821 	bl	8009d70 <_malloc_usable_size_r>
 8009d2e:	42a0      	cmp	r0, r4
 8009d30:	d20f      	bcs.n	8009d52 <_realloc_r+0x48>
 8009d32:	4621      	mov	r1, r4
 8009d34:	4638      	mov	r0, r7
 8009d36:	f7fe f847 	bl	8007dc8 <_malloc_r>
 8009d3a:	4605      	mov	r5, r0
 8009d3c:	2800      	cmp	r0, #0
 8009d3e:	d0f2      	beq.n	8009d26 <_realloc_r+0x1c>
 8009d40:	4631      	mov	r1, r6
 8009d42:	4622      	mov	r2, r4
 8009d44:	f7fd ffe0 	bl	8007d08 <memcpy>
 8009d48:	4631      	mov	r1, r6
 8009d4a:	4638      	mov	r0, r7
 8009d4c:	f7fd fff0 	bl	8007d30 <_free_r>
 8009d50:	e7e9      	b.n	8009d26 <_realloc_r+0x1c>
 8009d52:	4635      	mov	r5, r6
 8009d54:	e7e7      	b.n	8009d26 <_realloc_r+0x1c>

08009d56 <__ascii_wctomb>:
 8009d56:	b149      	cbz	r1, 8009d6c <__ascii_wctomb+0x16>
 8009d58:	2aff      	cmp	r2, #255	; 0xff
 8009d5a:	bf8b      	itete	hi
 8009d5c:	238a      	movhi	r3, #138	; 0x8a
 8009d5e:	700a      	strbls	r2, [r1, #0]
 8009d60:	6003      	strhi	r3, [r0, #0]
 8009d62:	2001      	movls	r0, #1
 8009d64:	bf88      	it	hi
 8009d66:	f04f 30ff 	movhi.w	r0, #4294967295
 8009d6a:	4770      	bx	lr
 8009d6c:	4608      	mov	r0, r1
 8009d6e:	4770      	bx	lr

08009d70 <_malloc_usable_size_r>:
 8009d70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d74:	1f18      	subs	r0, r3, #4
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	bfbc      	itt	lt
 8009d7a:	580b      	ldrlt	r3, [r1, r0]
 8009d7c:	18c0      	addlt	r0, r0, r3
 8009d7e:	4770      	bx	lr

08009d80 <_init>:
 8009d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d82:	bf00      	nop
 8009d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d86:	bc08      	pop	{r3}
 8009d88:	469e      	mov	lr, r3
 8009d8a:	4770      	bx	lr

08009d8c <_fini>:
 8009d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d8e:	bf00      	nop
 8009d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d92:	bc08      	pop	{r3}
 8009d94:	469e      	mov	lr, r3
 8009d96:	4770      	bx	lr
