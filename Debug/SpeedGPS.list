
SpeedGPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005928  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f2c  08005a38  08005a38  00015a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006964  08006964  000201a0  2**0
                  CONTENTS
  4 .ARM          00000000  08006964  08006964  000201a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006964  08006964  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006964  08006964  00016964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006968  08006968  00016968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  0800696c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003498  200001a0  08006b0c  000201a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003638  08006b0c  00023638  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030fbc  00000000  00000000  000201c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000066ca  00000000  00000000  00051185  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000151e7  00000000  00000000  0005784f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001968  00000000  00000000  0006ca38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000024f0  00000000  00000000  0006e3a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001a897  00000000  00000000  00070890  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001ac05  00000000  00000000  0008b127  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00085af7  00000000  00000000  000a5d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0012b823  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004aec  00000000  00000000  0012b8a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001a0 	.word	0x200001a0
 800012c:	00000000 	.word	0x00000000
 8000130:	08005a20 	.word	0x08005a20

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001a4 	.word	0x200001a4
 800014c:	08005a20 	.word	0x08005a20

08000150 <BuzzerSetFreq>:
}

void BuzzerSetFreq(uint16_t freq)
{

	TIM2->PSC = (48000000  / ((BUZZER_VOLUME_MAX*2)*freq)) - 1; //prescaller
 8000150:	23fa      	movs	r3, #250	; 0xfa
 8000152:	4343      	muls	r3, r0
 8000154:	4803      	ldr	r0, [pc, #12]	; (8000164 <BuzzerSetFreq+0x14>)
 8000156:	fb90 f0f3 	sdiv	r0, r0, r3
 800015a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800015e:	3801      	subs	r0, #1
 8000160:	6298      	str	r0, [r3, #40]	; 0x28
}
 8000162:	4770      	bx	lr
 8000164:	02dc6c00 	.word	0x02dc6c00

08000168 <BuzzerSetVolume>:
void BuzzerSetVolume(uint16_t volume)
{
	if(volume > BUZZER_VOLUME_MAX)
		volume = BUZZER_VOLUME_MAX;

	TIM2->CCR1 = volume;
 8000168:	287d      	cmp	r0, #125	; 0x7d
 800016a:	bf28      	it	cs
 800016c:	207d      	movcs	r0, #125	; 0x7d
 800016e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000172:	6358      	str	r0, [r3, #52]	; 0x34
}
 8000174:	4770      	bx	lr
	...

08000178 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000178:	b573      	push	{r0, r1, r4, r5, r6, lr}
	/* init code for USB_DEVICE */
	MX_USB_DEVICE_Init();
 800017a:	f005 fa23 	bl	80055c4 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 5 */
	osStatus_t keyStatus;
	buttonStruct buttonEvent;

	BuzzerSetVolume(0);
 800017e:	2000      	movs	r0, #0
 8000180:	f7ff fff2 	bl	8000168 <BuzzerSetVolume>
	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 8000184:	2100      	movs	r1, #0
 8000186:	4833      	ldr	r0, [pc, #204]	; (8000254 <StartDefaultTask+0xdc>)
 8000188:	f002 fa6c 	bl	8002664 <HAL_TIM_OC_Start>

	ssd1306_Init();
 800018c:	f000 fb60 	bl	8000850 <ssd1306_Init>
	HAL_Delay(1000);
 8000190:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000194:	f000 fe3a 	bl	8000e0c <HAL_Delay>
	ssd1306_Fill(Black);
 8000198:	2000      	movs	r0, #0
 800019a:	f000 fb25 	bl	80007e8 <ssd1306_Fill>
	ssd1306_UpdateScreen();
	HAL_Delay(1000);
	ssd1306_SetCursor(2,23);
	ssd1306_WriteString("Search GPS",Font_11x18,White);
 800019e:	4c2e      	ldr	r4, [pc, #184]	; (8000258 <StartDefaultTask+0xe0>)
	ssd1306_UpdateScreen();
 80001a0:	f000 fb30 	bl	8000804 <ssd1306_UpdateScreen>
	HAL_Delay(1000);
 80001a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001a8:	f000 fe30 	bl	8000e0c <HAL_Delay>
	ssd1306_SetCursor(2,23);
 80001ac:	2117      	movs	r1, #23
 80001ae:	2002      	movs	r0, #2
 80001b0:	f000 fc38 	bl	8000a24 <ssd1306_SetCursor>
	ssd1306_WriteString("Search GPS",Font_11x18,White);
 80001b4:	e894 0006 	ldmia.w	r4, {r1, r2}
 80001b8:	2301      	movs	r3, #1
 80001ba:	4828      	ldr	r0, [pc, #160]	; (800025c <StartDefaultTask+0xe4>)
 80001bc:	f000 fc1c 	bl	80009f8 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80001c0:	f000 fb20 	bl	8000804 <ssd1306_UpdateScreen>
	HAL_Delay(1000);
 80001c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001c8:	f000 fe20 	bl	8000e0c <HAL_Delay>
	ssd1306_Fill(Black);
 80001cc:	2000      	movs	r0, #0
 80001ce:	f000 fb0b 	bl	80007e8 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 80001d2:	f000 fb17 	bl	8000804 <ssd1306_UpdateScreen>
	/* Infinite loop */
	for(;;)
	{
		keyStatus = osMessageQueueGet(keyboardQueueHandle, &buttonEvent, NULL, 1U);   // wait for message
 80001d6:	4d22      	ldr	r5, [pc, #136]	; (8000260 <StartDefaultTask+0xe8>)
				break;
			default:
				break;
			}

			ssd1306_WriteString(" ",Font_11x18,White);
 80001d8:	4e22      	ldr	r6, [pc, #136]	; (8000264 <StartDefaultTask+0xec>)
		keyStatus = osMessageQueueGet(keyboardQueueHandle, &buttonEvent, NULL, 1U);   // wait for message
 80001da:	2301      	movs	r3, #1
 80001dc:	2200      	movs	r2, #0
 80001de:	a901      	add	r1, sp, #4
 80001e0:	6828      	ldr	r0, [r5, #0]
 80001e2:	f003 fd25 	bl	8003c30 <osMessageQueueGet>
		if (keyStatus == osOK) {
 80001e6:	bb10      	cbnz	r0, 800022e <StartDefaultTask+0xb6>
			ssd1306_SetCursor(2,23);
 80001e8:	2117      	movs	r1, #23
 80001ea:	2002      	movs	r0, #2
 80001ec:	f000 fc1a 	bl	8000a24 <ssd1306_SetCursor>
			switch (buttonEvent.buttonNumber) {
 80001f0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80001f4:	2b02      	cmp	r3, #2
 80001f6:	d01e      	beq.n	8000236 <StartDefaultTask+0xbe>
 80001f8:	2b03      	cmp	r3, #3
 80001fa:	d021      	beq.n	8000240 <StartDefaultTask+0xc8>
 80001fc:	2b01      	cmp	r3, #1
 80001fe:	d104      	bne.n	800020a <StartDefaultTask+0x92>
				ssd1306_WriteString("1",Font_11x18,White);
 8000200:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000204:	4818      	ldr	r0, [pc, #96]	; (8000268 <StartDefaultTask+0xf0>)
				ssd1306_WriteString("3",Font_11x18,White);
 8000206:	f000 fbf7 	bl	80009f8 <ssd1306_WriteString>
			ssd1306_WriteString(" ",Font_11x18,White);
 800020a:	e894 0006 	ldmia.w	r4, {r1, r2}
 800020e:	2301      	movs	r3, #1
 8000210:	4630      	mov	r0, r6
 8000212:	f000 fbf1 	bl	80009f8 <ssd1306_WriteString>

			switch (buttonEvent.state) {
 8000216:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800021a:	b1b3      	cbz	r3, 800024a <StartDefaultTask+0xd2>
 800021c:	2b01      	cmp	r3, #1
 800021e:	d104      	bne.n	800022a <StartDefaultTask+0xb2>
			case BUTTON_SHORT_PRESSED:
				ssd1306_WriteString("PRESS",Font_11x18,White);
 8000220:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000224:	4811      	ldr	r0, [pc, #68]	; (800026c <StartDefaultTask+0xf4>)
				break;
			case BUTTON_RELEASED:
				ssd1306_WriteString("RELEAS",Font_11x18,White);
 8000226:	f000 fbe7 	bl	80009f8 <ssd1306_WriteString>
				break;
			default:
				break;
			}
			ssd1306_UpdateScreen();
 800022a:	f000 faeb 	bl	8000804 <ssd1306_UpdateScreen>
		}

		osDelay(1);
 800022e:	2001      	movs	r0, #1
 8000230:	f003 fc56 	bl	8003ae0 <osDelay>
		keyStatus = osMessageQueueGet(keyboardQueueHandle, &buttonEvent, NULL, 1U);   // wait for message
 8000234:	e7d1      	b.n	80001da <StartDefaultTask+0x62>
				ssd1306_WriteString("2",Font_11x18,White);
 8000236:	2301      	movs	r3, #1
 8000238:	e894 0006 	ldmia.w	r4, {r1, r2}
 800023c:	480c      	ldr	r0, [pc, #48]	; (8000270 <StartDefaultTask+0xf8>)
 800023e:	e7e2      	b.n	8000206 <StartDefaultTask+0x8e>
				ssd1306_WriteString("3",Font_11x18,White);
 8000240:	2301      	movs	r3, #1
 8000242:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000246:	480b      	ldr	r0, [pc, #44]	; (8000274 <StartDefaultTask+0xfc>)
 8000248:	e7dd      	b.n	8000206 <StartDefaultTask+0x8e>
				ssd1306_WriteString("RELEAS",Font_11x18,White);
 800024a:	2301      	movs	r3, #1
 800024c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000250:	4809      	ldr	r0, [pc, #36]	; (8000278 <StartDefaultTask+0x100>)
 8000252:	e7e8      	b.n	8000226 <StartDefaultTask+0xae>
 8000254:	2000224c 	.word	0x2000224c
 8000258:	20000000 	.word	0x20000000
 800025c:	080067a4 	.word	0x080067a4
 8000260:	200021fc 	.word	0x200021fc
 8000264:	080067b5 	.word	0x080067b5
 8000268:	080067af 	.word	0x080067af
 800026c:	080067b7 	.word	0x080067b7
 8000270:	080067b1 	.word	0x080067b1
 8000274:	080067b3 	.word	0x080067b3
 8000278:	080067bd 	.word	0x080067bd

0800027c <StartDysplayTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDysplayTask */
void StartDysplayTask(void *argument)
{
 800027c:	b508      	push	{r3, lr}
	/* USER CODE BEGIN StartDysplayTask */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 800027e:	2001      	movs	r0, #1
 8000280:	f003 fc2e 	bl	8003ae0 <osDelay>
 8000284:	e7fb      	b.n	800027e <StartDysplayTask+0x2>
	...

08000288 <StartBuzzerTask>:
{
 8000288:	b537      	push	{r0, r1, r2, r4, r5, lr}
		status = osMessageQueueGet(buzzerQueueHandle, &buzzerParameters, NULL, 0U);   // wait for message
 800028a:	4d0d      	ldr	r5, [pc, #52]	; (80002c0 <StartBuzzerTask+0x38>)
 800028c:	2300      	movs	r3, #0
 800028e:	4669      	mov	r1, sp
 8000290:	461a      	mov	r2, r3
 8000292:	6828      	ldr	r0, [r5, #0]
 8000294:	f003 fccc 	bl	8003c30 <osMessageQueueGet>
		if (status == osOK) {
 8000298:	4604      	mov	r4, r0
 800029a:	2800      	cmp	r0, #0
 800029c:	d1f6      	bne.n	800028c <StartBuzzerTask+0x4>
			BuzzerSetFreq(buzzerParameters.freq);
 800029e:	f8bd 0000 	ldrh.w	r0, [sp]
 80002a2:	f7ff ff55 	bl	8000150 <BuzzerSetFreq>
			BuzzerSetVolume(buzzerParameters.volume);
 80002a6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80002aa:	f7ff ff5d 	bl	8000168 <BuzzerSetVolume>
			osDelay(buzzerParameters.duration);
 80002ae:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 80002b2:	f003 fc15 	bl	8003ae0 <osDelay>
			BuzzerSetVolume(0);
 80002b6:	4620      	mov	r0, r4
 80002b8:	f7ff ff56 	bl	8000168 <BuzzerSetVolume>
 80002bc:	e7e6      	b.n	800028c <StartBuzzerTask+0x4>
 80002be:	bf00      	nop
 80002c0:	200021f4 	.word	0x200021f4

080002c4 <StartKeyboardTask>:
{
 80002c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint8_t button_three_flag=1;
 80002c8:	2401      	movs	r4, #1
	uint8_t button_two_flag=1;
 80002ca:	4626      	mov	r6, r4
	uint8_t button_one_flag=1;
 80002cc:	4625      	mov	r5, r4
		if(HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin) == GPIO_PIN_RESET && button_one_flag)
 80002ce:	4f6d      	ldr	r7, [pc, #436]	; (8000484 <StartKeyboardTask+0x1c0>)
 80002d0:	2120      	movs	r1, #32
 80002d2:	4638      	mov	r0, r7
 80002d4:	f000 fef6 	bl	80010c4 <HAL_GPIO_ReadPin>
 80002d8:	4680      	mov	r8, r0
 80002da:	b9c8      	cbnz	r0, 8000310 <StartKeyboardTask+0x4c>
 80002dc:	b1c5      	cbz	r5, 8000310 <StartKeyboardTask+0x4c>
			buzzerParameters.freq=3000;
 80002de:	4b6a      	ldr	r3, [pc, #424]	; (8000488 <StartKeyboardTask+0x1c4>)
			osMessageQueuePut(buzzerQueueHandle, &buzzerParameters, 0U, 0U);
 80002e0:	4602      	mov	r2, r0
			buzzerParameters.freq=3000;
 80002e2:	9302      	str	r3, [sp, #8]
			buzzerParameters.duration=15;
 80002e4:	237d      	movs	r3, #125	; 0x7d
 80002e6:	f8ad 300c 	strh.w	r3, [sp, #12]
			osMessageQueuePut(buzzerQueueHandle, &buzzerParameters, 0U, 0U);
 80002ea:	4603      	mov	r3, r0
 80002ec:	4867      	ldr	r0, [pc, #412]	; (800048c <StartKeyboardTask+0x1c8>)
 80002ee:	a902      	add	r1, sp, #8
 80002f0:	6800      	ldr	r0, [r0, #0]
 80002f2:	f003 fc59 	bl	8003ba8 <osMessageQueuePut>
			buttonEvent.buttonNumber=1;
 80002f6:	2301      	movs	r3, #1
			osMessageQueuePut(keyboardQueueHandle, &buttonEvent, 0U, 0U);
 80002f8:	4865      	ldr	r0, [pc, #404]	; (8000490 <StartKeyboardTask+0x1cc>)
			buttonEvent.buttonNumber=1;
 80002fa:	f88d 3004 	strb.w	r3, [sp, #4]
			buttonEvent.state = BUTTON_SHORT_PRESSED;
 80002fe:	f88d 3005 	strb.w	r3, [sp, #5]
			osMessageQueuePut(keyboardQueueHandle, &buttonEvent, 0U, 0U);
 8000302:	4642      	mov	r2, r8
 8000304:	4643      	mov	r3, r8
 8000306:	a901      	add	r1, sp, #4
 8000308:	6800      	ldr	r0, [r0, #0]
 800030a:	f003 fc4d 	bl	8003ba8 <osMessageQueuePut>
			button_one_flag=0;
 800030e:	4645      	mov	r5, r8
		if(HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin) == GPIO_PIN_SET && (!button_one_flag))
 8000310:	2120      	movs	r1, #32
 8000312:	4638      	mov	r0, r7
 8000314:	f000 fed6 	bl	80010c4 <HAL_GPIO_ReadPin>
 8000318:	2801      	cmp	r0, #1
 800031a:	4680      	mov	r8, r0
 800031c:	d117      	bne.n	800034e <StartKeyboardTask+0x8a>
 800031e:	b9b5      	cbnz	r5, 800034e <StartKeyboardTask+0x8a>
			buzzerParameters.freq=3500;
 8000320:	4b5c      	ldr	r3, [pc, #368]	; (8000494 <StartKeyboardTask+0x1d0>)
			osMessageQueuePut(buzzerQueueHandle, &buzzerParameters, 0U, 0U);
 8000322:	485a      	ldr	r0, [pc, #360]	; (800048c <StartKeyboardTask+0x1c8>)
			buzzerParameters.freq=3500;
 8000324:	9302      	str	r3, [sp, #8]
			buzzerParameters.duration=15;
 8000326:	237d      	movs	r3, #125	; 0x7d
			osMessageQueuePut(buzzerQueueHandle, &buzzerParameters, 0U, 0U);
 8000328:	462a      	mov	r2, r5
			buzzerParameters.duration=15;
 800032a:	f8ad 300c 	strh.w	r3, [sp, #12]
			osMessageQueuePut(buzzerQueueHandle, &buzzerParameters, 0U, 0U);
 800032e:	a902      	add	r1, sp, #8
 8000330:	462b      	mov	r3, r5
 8000332:	6800      	ldr	r0, [r0, #0]
 8000334:	f003 fc38 	bl	8003ba8 <osMessageQueuePut>
			osMessageQueuePut(keyboardQueueHandle, &buttonEvent, 0U, 0U);
 8000338:	4855      	ldr	r0, [pc, #340]	; (8000490 <StartKeyboardTask+0x1cc>)
 800033a:	462b      	mov	r3, r5
 800033c:	462a      	mov	r2, r5
 800033e:	a901      	add	r1, sp, #4
 8000340:	6800      	ldr	r0, [r0, #0]
			buttonEvent.buttonNumber=1;
 8000342:	f88d 8004 	strb.w	r8, [sp, #4]
			buttonEvent.state = BUTTON_RELEASED;
 8000346:	f88d 5005 	strb.w	r5, [sp, #5]
			osMessageQueuePut(keyboardQueueHandle, &buttonEvent, 0U, 0U);
 800034a:	f003 fc2d 	bl	8003ba8 <osMessageQueuePut>
		if(HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin) == GPIO_PIN_SET)
 800034e:	2120      	movs	r1, #32
 8000350:	4638      	mov	r0, r7
 8000352:	f000 feb7 	bl	80010c4 <HAL_GPIO_ReadPin>
		if(HAL_GPIO_ReadPin(BTN_2_GPIO_Port, BTN_2_Pin) == GPIO_PIN_RESET && button_two_flag)
 8000356:	2110      	movs	r1, #16
			button_one_flag=1;
 8000358:	2801      	cmp	r0, #1
		if(HAL_GPIO_ReadPin(BTN_2_GPIO_Port, BTN_2_Pin) == GPIO_PIN_RESET && button_two_flag)
 800035a:	4638      	mov	r0, r7
			button_one_flag=1;
 800035c:	bf08      	it	eq
 800035e:	2501      	moveq	r5, #1
		if(HAL_GPIO_ReadPin(BTN_2_GPIO_Port, BTN_2_Pin) == GPIO_PIN_RESET && button_two_flag)
 8000360:	f000 feb0 	bl	80010c4 <HAL_GPIO_ReadPin>
 8000364:	4680      	mov	r8, r0
 8000366:	b9d0      	cbnz	r0, 800039e <StartKeyboardTask+0xda>
 8000368:	b1ce      	cbz	r6, 800039e <StartKeyboardTask+0xda>
			buzzerParameters.freq=3000;
 800036a:	4b47      	ldr	r3, [pc, #284]	; (8000488 <StartKeyboardTask+0x1c4>)
			osMessageQueuePut(buzzerQueueHandle, &buzzerParameters, 0U, 0U);
 800036c:	4602      	mov	r2, r0
			buzzerParameters.freq=3000;
 800036e:	9302      	str	r3, [sp, #8]
			buzzerParameters.duration=15;
 8000370:	237d      	movs	r3, #125	; 0x7d
 8000372:	f8ad 300c 	strh.w	r3, [sp, #12]
			osMessageQueuePut(buzzerQueueHandle, &buzzerParameters, 0U, 0U);
 8000376:	4603      	mov	r3, r0
 8000378:	4844      	ldr	r0, [pc, #272]	; (800048c <StartKeyboardTask+0x1c8>)
 800037a:	a902      	add	r1, sp, #8
 800037c:	6800      	ldr	r0, [r0, #0]
 800037e:	f003 fc13 	bl	8003ba8 <osMessageQueuePut>
			buttonEvent.buttonNumber=2;
 8000382:	2302      	movs	r3, #2
 8000384:	f88d 3004 	strb.w	r3, [sp, #4]
			buttonEvent.state = BUTTON_SHORT_PRESSED;
 8000388:	2301      	movs	r3, #1
			osMessageQueuePut(keyboardQueueHandle, &buttonEvent, 0U, 0U);
 800038a:	4841      	ldr	r0, [pc, #260]	; (8000490 <StartKeyboardTask+0x1cc>)
			buttonEvent.state = BUTTON_SHORT_PRESSED;
 800038c:	f88d 3005 	strb.w	r3, [sp, #5]
			osMessageQueuePut(keyboardQueueHandle, &buttonEvent, 0U, 0U);
 8000390:	4642      	mov	r2, r8
 8000392:	4643      	mov	r3, r8
 8000394:	a901      	add	r1, sp, #4
 8000396:	6800      	ldr	r0, [r0, #0]
 8000398:	f003 fc06 	bl	8003ba8 <osMessageQueuePut>
			button_two_flag=0;
 800039c:	4646      	mov	r6, r8
		if(HAL_GPIO_ReadPin(BTN_2_GPIO_Port, BTN_2_Pin) == GPIO_PIN_SET && (!button_two_flag))
 800039e:	2110      	movs	r1, #16
 80003a0:	4638      	mov	r0, r7
 80003a2:	f000 fe8f 	bl	80010c4 <HAL_GPIO_ReadPin>
 80003a6:	2801      	cmp	r0, #1
 80003a8:	d118      	bne.n	80003dc <StartKeyboardTask+0x118>
 80003aa:	b9be      	cbnz	r6, 80003dc <StartKeyboardTask+0x118>
			buzzerParameters.freq=3500;
 80003ac:	4b39      	ldr	r3, [pc, #228]	; (8000494 <StartKeyboardTask+0x1d0>)
			osMessageQueuePut(buzzerQueueHandle, &buzzerParameters, 0U, 0U);
 80003ae:	4837      	ldr	r0, [pc, #220]	; (800048c <StartKeyboardTask+0x1c8>)
			buzzerParameters.freq=3500;
 80003b0:	9302      	str	r3, [sp, #8]
			buzzerParameters.duration=15;
 80003b2:	237d      	movs	r3, #125	; 0x7d
			osMessageQueuePut(buzzerQueueHandle, &buzzerParameters, 0U, 0U);
 80003b4:	4632      	mov	r2, r6
			buzzerParameters.duration=15;
 80003b6:	f8ad 300c 	strh.w	r3, [sp, #12]
			osMessageQueuePut(buzzerQueueHandle, &buzzerParameters, 0U, 0U);
 80003ba:	a902      	add	r1, sp, #8
 80003bc:	4633      	mov	r3, r6
 80003be:	6800      	ldr	r0, [r0, #0]
 80003c0:	f003 fbf2 	bl	8003ba8 <osMessageQueuePut>
			buttonEvent.buttonNumber=2;
 80003c4:	2302      	movs	r3, #2
			osMessageQueuePut(keyboardQueueHandle, &buttonEvent, 0U, 0U);
 80003c6:	4832      	ldr	r0, [pc, #200]	; (8000490 <StartKeyboardTask+0x1cc>)
			buttonEvent.buttonNumber=2;
 80003c8:	f88d 3004 	strb.w	r3, [sp, #4]
			osMessageQueuePut(keyboardQueueHandle, &buttonEvent, 0U, 0U);
 80003cc:	4632      	mov	r2, r6
 80003ce:	4633      	mov	r3, r6
 80003d0:	a901      	add	r1, sp, #4
 80003d2:	6800      	ldr	r0, [r0, #0]
			buttonEvent.state = BUTTON_RELEASED;
 80003d4:	f88d 6005 	strb.w	r6, [sp, #5]
			osMessageQueuePut(keyboardQueueHandle, &buttonEvent, 0U, 0U);
 80003d8:	f003 fbe6 	bl	8003ba8 <osMessageQueuePut>
		if(HAL_GPIO_ReadPin(BTN_2_GPIO_Port, BTN_2_Pin) == GPIO_PIN_SET)
 80003dc:	2110      	movs	r1, #16
 80003de:	4638      	mov	r0, r7
 80003e0:	f000 fe70 	bl	80010c4 <HAL_GPIO_ReadPin>
		if(HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin) == GPIO_PIN_RESET && button_three_flag)
 80003e4:	2108      	movs	r1, #8
			button_two_flag=1;
 80003e6:	2801      	cmp	r0, #1
		if(HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin) == GPIO_PIN_RESET && button_three_flag)
 80003e8:	4638      	mov	r0, r7
			button_two_flag=1;
 80003ea:	bf08      	it	eq
 80003ec:	2601      	moveq	r6, #1
		if(HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin) == GPIO_PIN_RESET && button_three_flag)
 80003ee:	f000 fe69 	bl	80010c4 <HAL_GPIO_ReadPin>
 80003f2:	4680      	mov	r8, r0
 80003f4:	b9d0      	cbnz	r0, 800042c <StartKeyboardTask+0x168>
 80003f6:	b1cc      	cbz	r4, 800042c <StartKeyboardTask+0x168>
			buzzerParameters.freq=3000;
 80003f8:	4b23      	ldr	r3, [pc, #140]	; (8000488 <StartKeyboardTask+0x1c4>)
			osMessageQueuePut(buzzerQueueHandle, &buzzerParameters, 0U, 0U);
 80003fa:	4602      	mov	r2, r0
			buzzerParameters.freq=3000;
 80003fc:	9302      	str	r3, [sp, #8]
			buzzerParameters.duration=15;
 80003fe:	237d      	movs	r3, #125	; 0x7d
 8000400:	f8ad 300c 	strh.w	r3, [sp, #12]
			osMessageQueuePut(buzzerQueueHandle, &buzzerParameters, 0U, 0U);
 8000404:	4603      	mov	r3, r0
 8000406:	4821      	ldr	r0, [pc, #132]	; (800048c <StartKeyboardTask+0x1c8>)
 8000408:	a902      	add	r1, sp, #8
 800040a:	6800      	ldr	r0, [r0, #0]
 800040c:	f003 fbcc 	bl	8003ba8 <osMessageQueuePut>
			buttonEvent.buttonNumber=3;
 8000410:	2303      	movs	r3, #3
 8000412:	f88d 3004 	strb.w	r3, [sp, #4]
			buttonEvent.state = BUTTON_SHORT_PRESSED;
 8000416:	2301      	movs	r3, #1
			osMessageQueuePut(keyboardQueueHandle, &buttonEvent, 0U, 0U);
 8000418:	481d      	ldr	r0, [pc, #116]	; (8000490 <StartKeyboardTask+0x1cc>)
			buttonEvent.state = BUTTON_SHORT_PRESSED;
 800041a:	f88d 3005 	strb.w	r3, [sp, #5]
			osMessageQueuePut(keyboardQueueHandle, &buttonEvent, 0U, 0U);
 800041e:	4642      	mov	r2, r8
 8000420:	4643      	mov	r3, r8
 8000422:	a901      	add	r1, sp, #4
 8000424:	6800      	ldr	r0, [r0, #0]
 8000426:	f003 fbbf 	bl	8003ba8 <osMessageQueuePut>
			button_three_flag=0;
 800042a:	4644      	mov	r4, r8
		if(HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin) == GPIO_PIN_SET && (!button_three_flag))
 800042c:	2108      	movs	r1, #8
 800042e:	4638      	mov	r0, r7
 8000430:	f000 fe48 	bl	80010c4 <HAL_GPIO_ReadPin>
 8000434:	2801      	cmp	r0, #1
 8000436:	d118      	bne.n	800046a <StartKeyboardTask+0x1a6>
 8000438:	b9bc      	cbnz	r4, 800046a <StartKeyboardTask+0x1a6>
			buzzerParameters.freq=3500;
 800043a:	4b16      	ldr	r3, [pc, #88]	; (8000494 <StartKeyboardTask+0x1d0>)
			osMessageQueuePut(buzzerQueueHandle, &buzzerParameters, 0U, 0U);
 800043c:	4813      	ldr	r0, [pc, #76]	; (800048c <StartKeyboardTask+0x1c8>)
			buzzerParameters.freq=3500;
 800043e:	9302      	str	r3, [sp, #8]
			buzzerParameters.duration=15;
 8000440:	237d      	movs	r3, #125	; 0x7d
			osMessageQueuePut(buzzerQueueHandle, &buzzerParameters, 0U, 0U);
 8000442:	4622      	mov	r2, r4
			buzzerParameters.duration=15;
 8000444:	f8ad 300c 	strh.w	r3, [sp, #12]
			osMessageQueuePut(buzzerQueueHandle, &buzzerParameters, 0U, 0U);
 8000448:	a902      	add	r1, sp, #8
 800044a:	4623      	mov	r3, r4
 800044c:	6800      	ldr	r0, [r0, #0]
 800044e:	f003 fbab 	bl	8003ba8 <osMessageQueuePut>
			buttonEvent.buttonNumber=3;
 8000452:	2303      	movs	r3, #3
			osMessageQueuePut(keyboardQueueHandle, &buttonEvent, 0U, 0U);
 8000454:	480e      	ldr	r0, [pc, #56]	; (8000490 <StartKeyboardTask+0x1cc>)
			buttonEvent.buttonNumber=3;
 8000456:	f88d 3004 	strb.w	r3, [sp, #4]
			osMessageQueuePut(keyboardQueueHandle, &buttonEvent, 0U, 0U);
 800045a:	4622      	mov	r2, r4
 800045c:	4623      	mov	r3, r4
 800045e:	a901      	add	r1, sp, #4
 8000460:	6800      	ldr	r0, [r0, #0]
			buttonEvent.state = BUTTON_RELEASED;
 8000462:	f88d 4005 	strb.w	r4, [sp, #5]
			osMessageQueuePut(keyboardQueueHandle, &buttonEvent, 0U, 0U);
 8000466:	f003 fb9f 	bl	8003ba8 <osMessageQueuePut>
		if(HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin) == GPIO_PIN_SET)
 800046a:	2108      	movs	r1, #8
 800046c:	4638      	mov	r0, r7
 800046e:	f000 fe29 	bl	80010c4 <HAL_GPIO_ReadPin>
			button_three_flag=1;
 8000472:	2801      	cmp	r0, #1
		osDelay(20);
 8000474:	f04f 0014 	mov.w	r0, #20
			button_three_flag=1;
 8000478:	bf08      	it	eq
 800047a:	2401      	moveq	r4, #1
		osDelay(20);
 800047c:	f003 fb30 	bl	8003ae0 <osDelay>
		if(HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin) == GPIO_PIN_RESET && button_one_flag)
 8000480:	e726      	b.n	80002d0 <StartKeyboardTask+0xc>
 8000482:	bf00      	nop
 8000484:	40010c00 	.word	0x40010c00
 8000488:	000f0bb8 	.word	0x000f0bb8
 800048c:	200021f4 	.word	0x200021f4
 8000490:	200021fc 	.word	0x200021fc
 8000494:	000f0dac 	.word	0x000f0dac

08000498 <SystemClock_Config>:
{
 8000498:	b570      	push	{r4, r5, r6, lr}
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800049a:	2414      	movs	r4, #20
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800049c:	2510      	movs	r5, #16
{
 800049e:	b094      	sub	sp, #80	; 0x50
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004a0:	4622      	mov	r2, r4
 80004a2:	2100      	movs	r1, #0
 80004a4:	a80c      	add	r0, sp, #48	; 0x30
 80004a6:	f005 fab2 	bl	8005a0e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004aa:	4622      	mov	r2, r4
 80004ac:	eb0d 0004 	add.w	r0, sp, r4
 80004b0:	2100      	movs	r1, #0
 80004b2:	f005 faac 	bl	8005a0e <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004b6:	462a      	mov	r2, r5
 80004b8:	2100      	movs	r1, #0
 80004ba:	a801      	add	r0, sp, #4
 80004bc:	f005 faa7 	bl	8005a0e <memset>
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004c0:	2401      	movs	r4, #1
 80004c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004c6:	2602      	movs	r6, #2
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004c8:	e9cd 430a 	strd	r4, r3, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004cc:	e9cd 6311 	strd	r6, r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80004d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d4:	a80a      	add	r0, sp, #40	; 0x28
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80004d6:	9313      	str	r3, [sp, #76]	; 0x4c
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004d8:	940e      	str	r4, [sp, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004da:	f001 fc19 	bl	8001d10 <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004de:	230f      	movs	r3, #15
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004e4:	e9cd 3605 	strd	r3, r6, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004e8:	2300      	movs	r3, #0
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004ea:	4621      	mov	r1, r4
 80004ec:	a805      	add	r0, sp, #20
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004ee:	e9cd 3207 	strd	r3, r2, [sp, #28]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004f2:	9309      	str	r3, [sp, #36]	; 0x24
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004f4:	f001 fde4 	bl	80020c0 <HAL_RCC_ClockConfig>
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80004f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004fc:	a801      	add	r0, sp, #4
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80004fe:	9501      	str	r5, [sp, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000500:	9304      	str	r3, [sp, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000502:	f001 fe99 	bl	8002238 <HAL_RCCEx_PeriphCLKConfig>
}
 8000506:	b014      	add	sp, #80	; 0x50
 8000508:	bd70      	pop	{r4, r5, r6, pc}
	...

0800050c <main>:
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b08e      	sub	sp, #56	; 0x38
	HAL_Init();
 8000510:	f000 fc58 	bl	8000dc4 <HAL_Init>
	SystemClock_Config();
 8000514:	f7ff ffc0 	bl	8000498 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000518:	2210      	movs	r2, #16
 800051a:	2100      	movs	r1, #0
 800051c:	a807      	add	r0, sp, #28
 800051e:	f005 fa76 	bl	8005a0e <memset>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000522:	4b87      	ldr	r3, [pc, #540]	; (8000740 <main+0x234>)
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000524:	2400      	movs	r4, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000526:	699a      	ldr	r2, [r3, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000528:	2601      	movs	r6, #1
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800052a:	f042 0210 	orr.w	r2, r2, #16
 800052e:	619a      	str	r2, [r3, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000530:	f04f 0840 	mov.w	r8, #64	; 0x40
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000534:	2503      	movs	r5, #3
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000536:	699a      	ldr	r2, [r3, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000538:	2702      	movs	r7, #2
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800053a:	f002 0210 	and.w	r2, r2, #16
 800053e:	9201      	str	r2, [sp, #4]
 8000540:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000542:	699a      	ldr	r2, [r3, #24]
	HAL_GPIO_WritePin(SD_SPI_CS_GPIO_Port, SD_SPI_CS_Pin, GPIO_PIN_SET);
 8000544:	2140      	movs	r1, #64	; 0x40
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000546:	f042 0220 	orr.w	r2, r2, #32
 800054a:	619a      	str	r2, [r3, #24]
 800054c:	699a      	ldr	r2, [r3, #24]
	HAL_GPIO_WritePin(SD_SPI_CS_GPIO_Port, SD_SPI_CS_Pin, GPIO_PIN_SET);
 800054e:	487d      	ldr	r0, [pc, #500]	; (8000744 <main+0x238>)
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000550:	f002 0220 	and.w	r2, r2, #32
 8000554:	9202      	str	r2, [sp, #8]
 8000556:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000558:	699a      	ldr	r2, [r3, #24]
 800055a:	f042 0204 	orr.w	r2, r2, #4
 800055e:	619a      	str	r2, [r3, #24]
 8000560:	699a      	ldr	r2, [r3, #24]
 8000562:	f002 0204 	and.w	r2, r2, #4
 8000566:	9203      	str	r2, [sp, #12]
 8000568:	9a03      	ldr	r2, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800056a:	699a      	ldr	r2, [r3, #24]
 800056c:	f042 0208 	orr.w	r2, r2, #8
 8000570:	619a      	str	r2, [r3, #24]
 8000572:	699b      	ldr	r3, [r3, #24]
	HAL_GPIO_WritePin(SD_SPI_CS_GPIO_Port, SD_SPI_CS_Pin, GPIO_PIN_SET);
 8000574:	2201      	movs	r2, #1
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000576:	f003 0308 	and.w	r3, r3, #8
 800057a:	9304      	str	r3, [sp, #16]
 800057c:	9b04      	ldr	r3, [sp, #16]
	HAL_GPIO_WritePin(SD_SPI_CS_GPIO_Port, SD_SPI_CS_Pin, GPIO_PIN_SET);
 800057e:	f000 fda7 	bl	80010d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPS_EN_GPIO_Port, GPS_EN_Pin, GPIO_PIN_RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	2101      	movs	r1, #1
 8000586:	4870      	ldr	r0, [pc, #448]	; (8000748 <main+0x23c>)
 8000588:	f000 fda2 	bl	80010d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_LE_GPIO_Port, LED_LE_Pin, GPIO_PIN_SET);
 800058c:	2201      	movs	r2, #1
 800058e:	2140      	movs	r1, #64	; 0x40
 8000590:	486d      	ldr	r0, [pc, #436]	; (8000748 <main+0x23c>)
 8000592:	f000 fd9d 	bl	80010d0 <HAL_GPIO_WritePin>
	HAL_GPIO_Init(SD_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000596:	a907      	add	r1, sp, #28
 8000598:	486a      	ldr	r0, [pc, #424]	; (8000744 <main+0x238>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059a:	e9cd 8607 	strd	r8, r6, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800059e:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
	HAL_GPIO_Init(SD_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80005a2:	f000 fcaf 	bl	8000f04 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPS_EN_GPIO_Port, &GPIO_InitStruct);
 80005a6:	a907      	add	r1, sp, #28
 80005a8:	4867      	ldr	r0, [pc, #412]	; (8000748 <main+0x23c>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005aa:	e9cd 6607 	strd	r6, r6, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	9409      	str	r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b0:	970a      	str	r7, [sp, #40]	; 0x28
	HAL_GPIO_Init(GPS_EN_GPIO_Port, &GPIO_InitStruct);
 80005b2:	f000 fca7 	bl	8000f04 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPS_PPS_GPIO_Port, &GPIO_InitStruct);
 80005b6:	a907      	add	r1, sp, #28
 80005b8:	4863      	ldr	r0, [pc, #396]	; (8000748 <main+0x23c>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ba:	e9cd 7407 	strd	r7, r4, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	9409      	str	r4, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPS_PPS_GPIO_Port, &GPIO_InitStruct);
 80005c0:	f000 fca0 	bl	8000f04 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = MPU_INT_Pin;
 80005c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	HAL_GPIO_Init(MPU_INT_GPIO_Port, &GPIO_InitStruct);
 80005c8:	a907      	add	r1, sp, #28
 80005ca:	485e      	ldr	r0, [pc, #376]	; (8000744 <main+0x238>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005cc:	e9cd 3407 	strd	r3, r4, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	9409      	str	r4, [sp, #36]	; 0x24
	HAL_GPIO_Init(MPU_INT_GPIO_Port, &GPIO_InitStruct);
 80005d2:	f000 fc97 	bl	8000f04 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = BTN_3_Pin|BTN_2_Pin|BTN_1_Pin;
 80005d6:	2338      	movs	r3, #56	; 0x38
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d8:	a907      	add	r1, sp, #28
 80005da:	485b      	ldr	r0, [pc, #364]	; (8000748 <main+0x23c>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005dc:	e9cd 3407 	strd	r3, r4, [sp, #28]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005e0:	9609      	str	r6, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e2:	f000 fc8f 	bl	8000f04 <HAL_GPIO_Init>
	HAL_GPIO_Init(LED_LE_GPIO_Port, &GPIO_InitStruct);
 80005e6:	a907      	add	r1, sp, #28
 80005e8:	4857      	ldr	r0, [pc, #348]	; (8000748 <main+0x23c>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ea:	e9cd 8607 	strd	r8, r6, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ee:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
	HAL_GPIO_Init(LED_LE_GPIO_Port, &GPIO_InitStruct);
 80005f2:	f000 fc87 	bl	8000f04 <HAL_GPIO_Init>
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80005f6:	f44f 7382 	mov.w	r3, #260	; 0x104
	hspi2.Instance = SPI2;
 80005fa:	4854      	ldr	r0, [pc, #336]	; (800074c <main+0x240>)
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80005fc:	4a54      	ldr	r2, [pc, #336]	; (8000750 <main+0x244>)
	huart1.Init.Mode = UART_MODE_TX_RX;
 80005fe:	250c      	movs	r5, #12
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8000600:	e9c0 2300 	strd	r2, r3, [r0]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8000604:	f44f 7300 	mov.w	r3, #512	; 0x200
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000608:	e9c0 3406 	strd	r3, r4, [r0, #24]
	hspi2.Init.CRCPolynomial = 10;
 800060c:	230a      	movs	r3, #10
	huart1.Init.BaudRate = 115200;
 800060e:	f44f 38e1 	mov.w	r8, #115200	; 0x1c200
	hspi2.Init.CRCPolynomial = 10;
 8000612:	62c3      	str	r3, [r0, #44]	; 0x2c
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000614:	e9c0 4402 	strd	r4, r4, [r0, #8]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000618:	e9c0 4404 	strd	r4, r4, [r0, #16]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800061c:	e9c0 4408 	strd	r4, r4, [r0, #32]
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000620:	6284      	str	r4, [r0, #40]	; 0x28
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000622:	f001 fe81 	bl	8002328 <HAL_SPI_Init>
	huart1.Instance = USART1;
 8000626:	484b      	ldr	r0, [pc, #300]	; (8000754 <main+0x248>)
	huart1.Init.BaudRate = 115200;
 8000628:	4b4b      	ldr	r3, [pc, #300]	; (8000758 <main+0x24c>)
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800062a:	e9c0 5405 	strd	r5, r4, [r0, #20]
	huart1.Init.BaudRate = 115200;
 800062e:	e9c0 3800 	strd	r3, r8, [r0]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000632:	e9c0 4402 	strd	r4, r4, [r0, #8]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000636:	6104      	str	r4, [r0, #16]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000638:	61c4      	str	r4, [r0, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800063a:	f002 f887 	bl	800274c <HAL_UART_Init>
	huart3.Instance = USART3;
 800063e:	4847      	ldr	r0, [pc, #284]	; (800075c <main+0x250>)
 8000640:	4b47      	ldr	r3, [pc, #284]	; (8000760 <main+0x254>)
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000642:	e9c0 4504 	strd	r4, r5, [r0, #16]
	huart3.Init.BaudRate = 115200;
 8000646:	e9c0 3800 	strd	r3, r8, [r0]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800064a:	e9c0 4402 	strd	r4, r4, [r0, #8]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800064e:	e9c0 4406 	strd	r4, r4, [r0, #24]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8000652:	f002 f87b 	bl	800274c <HAL_UART_Init>
	MX_FATFS_Init();
 8000656:	f002 fc6b 	bl	8002f30 <MX_FATFS_Init>
	hi2c1.Instance = I2C1;
 800065a:	4842      	ldr	r0, [pc, #264]	; (8000764 <main+0x258>)
	hi2c1.Init.ClockSpeed = 100000;
 800065c:	4942      	ldr	r1, [pc, #264]	; (8000768 <main+0x25c>)
 800065e:	4b43      	ldr	r3, [pc, #268]	; (800076c <main+0x260>)
	hi2c1.Init.OwnAddress1 = 0;
 8000660:	e9c0 4402 	strd	r4, r4, [r0, #8]
	hi2c1.Init.ClockSpeed = 100000;
 8000664:	e9c0 1300 	strd	r1, r3, [r0]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000668:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800066c:	e9c0 4406 	strd	r4, r4, [r0, #24]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000670:	e9c0 3404 	strd	r3, r4, [r0, #16]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000674:	6204      	str	r4, [r0, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000676:	f000 fe4f 	bl	8001318 <HAL_I2C_Init>
	TIM_OC_InitTypeDef sConfigOC = {0};
 800067a:	221c      	movs	r2, #28
 800067c:	4621      	mov	r1, r4
 800067e:	eb0d 0002 	add.w	r0, sp, r2
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000682:	e9cd 4405 	strd	r4, r4, [sp, #20]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000686:	f005 f9c2 	bl	8005a0e <memset>
	htim2.Init.Prescaler = 479;
 800068a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800068e:	f240 13df 	movw	r3, #479	; 0x1df
	htim2.Instance = TIM2;
 8000692:	4d37      	ldr	r5, [pc, #220]	; (8000770 <main+0x264>)
	htim2.Init.Prescaler = 479;
 8000694:	e9c5 0300 	strd	r0, r3, [r5]
	htim2.Init.Period = 254;
 8000698:	23fe      	movs	r3, #254	; 0xfe
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800069a:	4628      	mov	r0, r5
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800069c:	e9c5 3403 	strd	r3, r4, [r5, #12]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a0:	60ac      	str	r4, [r5, #8]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a2:	61ac      	str	r4, [r5, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006a4:	f001 ff28 	bl	80024f8 <HAL_TIM_PWM_Init>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006a8:	a905      	add	r1, sp, #20
 80006aa:	4628      	mov	r0, r5
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ac:	e9cd 4405 	strd	r4, r4, [sp, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006b0:	f001 fff4 	bl	800269c <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.Pulse = 124;
 80006b4:	f04f 0c60 	mov.w	ip, #96	; 0x60
 80006b8:	237c      	movs	r3, #124	; 0x7c
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006ba:	4622      	mov	r2, r4
 80006bc:	a907      	add	r1, sp, #28
 80006be:	4628      	mov	r0, r5
	sConfigOC.Pulse = 124;
 80006c0:	e9cd c307 	strd	ip, r3, [sp, #28]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006c4:	9409      	str	r4, [sp, #36]	; 0x24
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006c6:	940b      	str	r4, [sp, #44]	; 0x2c
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006c8:	f001 ff5c 	bl	8002584 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_MspPostInit(&htim2);
 80006cc:	4628      	mov	r0, r5
 80006ce:	f000 fa61 	bl	8000b94 <HAL_TIM_MspPostInit>
	osKernelInitialize();
 80006d2:	f003 f96d 	bl	80039b0 <osKernelInitialize>
	buzzerQueueHandle = osMessageQueueNew (2, sizeof(buzzerStruct), &buzzerQueue_attributes);
 80006d6:	4a27      	ldr	r2, [pc, #156]	; (8000774 <main+0x268>)
 80006d8:	2106      	movs	r1, #6
 80006da:	4638      	mov	r0, r7
 80006dc:	f003 fa1c 	bl	8003b18 <osMessageQueueNew>
 80006e0:	4b25      	ldr	r3, [pc, #148]	; (8000778 <main+0x26c>)
	dysplayQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &dysplayQueue_attributes);
 80006e2:	4a26      	ldr	r2, [pc, #152]	; (800077c <main+0x270>)
	buzzerQueueHandle = osMessageQueueNew (2, sizeof(buzzerStruct), &buzzerQueue_attributes);
 80006e4:	6018      	str	r0, [r3, #0]
	dysplayQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &dysplayQueue_attributes);
 80006e6:	4639      	mov	r1, r7
 80006e8:	2010      	movs	r0, #16
 80006ea:	f003 fa15 	bl	8003b18 <osMessageQueueNew>
 80006ee:	4b24      	ldr	r3, [pc, #144]	; (8000780 <main+0x274>)
	keyboardQueueHandle = osMessageQueueNew (1, sizeof(buttonStruct), &keyboardQueue_attributes);
 80006f0:	4a24      	ldr	r2, [pc, #144]	; (8000784 <main+0x278>)
	dysplayQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &dysplayQueue_attributes);
 80006f2:	6018      	str	r0, [r3, #0]
	keyboardQueueHandle = osMessageQueueNew (1, sizeof(buttonStruct), &keyboardQueue_attributes);
 80006f4:	4639      	mov	r1, r7
 80006f6:	4630      	mov	r0, r6
 80006f8:	f003 fa0e 	bl	8003b18 <osMessageQueueNew>
 80006fc:	4b22      	ldr	r3, [pc, #136]	; (8000788 <main+0x27c>)
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006fe:	4a23      	ldr	r2, [pc, #140]	; (800078c <main+0x280>)
	keyboardQueueHandle = osMessageQueueNew (1, sizeof(buttonStruct), &keyboardQueue_attributes);
 8000700:	6018      	str	r0, [r3, #0]
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000702:	4621      	mov	r1, r4
 8000704:	4822      	ldr	r0, [pc, #136]	; (8000790 <main+0x284>)
 8000706:	f003 f98f 	bl	8003a28 <osThreadNew>
 800070a:	4b22      	ldr	r3, [pc, #136]	; (8000794 <main+0x288>)
	buzzerTaskHandle = osThreadNew(StartBuzzerTask, NULL, &buzzerTask_attributes);
 800070c:	4a22      	ldr	r2, [pc, #136]	; (8000798 <main+0x28c>)
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800070e:	6018      	str	r0, [r3, #0]
	buzzerTaskHandle = osThreadNew(StartBuzzerTask, NULL, &buzzerTask_attributes);
 8000710:	4621      	mov	r1, r4
 8000712:	4822      	ldr	r0, [pc, #136]	; (800079c <main+0x290>)
 8000714:	f003 f988 	bl	8003a28 <osThreadNew>
 8000718:	4b21      	ldr	r3, [pc, #132]	; (80007a0 <main+0x294>)
	keyboardTaskHandle = osThreadNew(StartKeyboardTask, NULL, &keyboardTask_attributes);
 800071a:	4a22      	ldr	r2, [pc, #136]	; (80007a4 <main+0x298>)
	buzzerTaskHandle = osThreadNew(StartBuzzerTask, NULL, &buzzerTask_attributes);
 800071c:	6018      	str	r0, [r3, #0]
	keyboardTaskHandle = osThreadNew(StartKeyboardTask, NULL, &keyboardTask_attributes);
 800071e:	4621      	mov	r1, r4
 8000720:	4821      	ldr	r0, [pc, #132]	; (80007a8 <main+0x29c>)
 8000722:	f003 f981 	bl	8003a28 <osThreadNew>
 8000726:	4b21      	ldr	r3, [pc, #132]	; (80007ac <main+0x2a0>)
	dysplayTaskHandle = osThreadNew(StartDysplayTask, NULL, &dysplayTask_attributes);
 8000728:	4a21      	ldr	r2, [pc, #132]	; (80007b0 <main+0x2a4>)
	keyboardTaskHandle = osThreadNew(StartKeyboardTask, NULL, &keyboardTask_attributes);
 800072a:	6018      	str	r0, [r3, #0]
	dysplayTaskHandle = osThreadNew(StartDysplayTask, NULL, &dysplayTask_attributes);
 800072c:	4621      	mov	r1, r4
 800072e:	4821      	ldr	r0, [pc, #132]	; (80007b4 <main+0x2a8>)
 8000730:	f003 f97a 	bl	8003a28 <osThreadNew>
 8000734:	4b20      	ldr	r3, [pc, #128]	; (80007b8 <main+0x2ac>)
 8000736:	6018      	str	r0, [r3, #0]
	osKernelStart();
 8000738:	f003 f956 	bl	80039e8 <osKernelStart>
 800073c:	e7fe      	b.n	800073c <main+0x230>
 800073e:	bf00      	nop
 8000740:	40021000 	.word	0x40021000
 8000744:	40010800 	.word	0x40010800
 8000748:	40010c00 	.word	0x40010c00
 800074c:	20002108 	.word	0x20002108
 8000750:	40003800 	.word	0x40003800
 8000754:	20002200 	.word	0x20002200
 8000758:	40013800 	.word	0x40013800
 800075c:	20002160 	.word	0x20002160
 8000760:	40004800 	.word	0x40004800
 8000764:	200021a0 	.word	0x200021a0
 8000768:	40005400 	.word	0x40005400
 800076c:	000186a0 	.word	0x000186a0
 8000770:	2000224c 	.word	0x2000224c
 8000774:	080067c4 	.word	0x080067c4
 8000778:	200021f4 	.word	0x200021f4
 800077c:	08006824 	.word	0x08006824
 8000780:	200021f8 	.word	0x200021f8
 8000784:	08006860 	.word	0x08006860
 8000788:	200021fc 	.word	0x200021fc
 800078c:	08006800 	.word	0x08006800
 8000790:	08000179 	.word	0x08000179
 8000794:	20002104 	.word	0x20002104
 8000798:	080067dc 	.word	0x080067dc
 800079c:	08000289 	.word	0x08000289
 80007a0:	20002244 	.word	0x20002244
 80007a4:	08006878 	.word	0x08006878
 80007a8:	080002c5 	.word	0x080002c5
 80007ac:	20002248 	.word	0x20002248
 80007b0:	0800683c 	.word	0x0800683c
 80007b4:	0800027d 	.word	0x0800027d
 80007b8:	20002240 	.word	0x20002240

080007bc <Error_Handler>:
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80007bc:	4770      	bx	lr
	...

080007c0 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 80007c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 80007c2:	2301      	movs	r3, #1
 80007c4:	210a      	movs	r1, #10
{
 80007c6:	aa06      	add	r2, sp, #24
 80007c8:	f802 0d01 	strb.w	r0, [r2, #-1]!
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 80007cc:	9200      	str	r2, [sp, #0]
 80007ce:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80007d2:	2200      	movs	r2, #0
 80007d4:	2178      	movs	r1, #120	; 0x78
 80007d6:	4803      	ldr	r0, [pc, #12]	; (80007e4 <ssd1306_WriteCommand+0x24>)
 80007d8:	f000 fe42 	bl	8001460 <HAL_I2C_Mem_Write>
}
 80007dc:	b007      	add	sp, #28
 80007de:	f85d fb04 	ldr.w	pc, [sp], #4
 80007e2:	bf00      	nop
 80007e4:	200021a0 	.word	0x200021a0

080007e8 <ssd1306_Fill>:
void ssd1306_Fill(SSD1306_COLOR color)
{
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80007e8:	2300      	movs	r3, #0
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80007ea:	4905      	ldr	r1, [pc, #20]	; (8000800 <ssd1306_Fill+0x18>)
 80007ec:	1c02      	adds	r2, r0, #0
 80007ee:	bf18      	it	ne
 80007f0:	2201      	movne	r2, #1
 80007f2:	4252      	negs	r2, r2
 80007f4:	545a      	strb	r2, [r3, r1]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80007f6:	3301      	adds	r3, #1
 80007f8:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 80007fc:	d1f6      	bne.n	80007ec <ssd1306_Fill+0x4>
	}
}
 80007fe:	4770      	bx	lr
 8000800:	200001c2 	.word	0x200001c2

08000804 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 8000804:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8000806:	2400      	movs	r4, #0
	for (i = 0; i < 8; i++) {
		ssd1306_WriteCommand(0xB0 + i);
		ssd1306_WriteCommand(0x00);
		ssd1306_WriteCommand(0x10);

		HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100);
 8000808:	4e0f      	ldr	r6, [pc, #60]	; (8000848 <ssd1306_UpdateScreen+0x44>)
 800080a:	4d10      	ldr	r5, [pc, #64]	; (800084c <ssd1306_UpdateScreen+0x48>)
		ssd1306_WriteCommand(0xB0 + i);
 800080c:	f1a4 0050 	sub.w	r0, r4, #80	; 0x50
 8000810:	b2c0      	uxtb	r0, r0
 8000812:	f7ff ffd5 	bl	80007c0 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8000816:	2000      	movs	r0, #0
 8000818:	f7ff ffd2 	bl	80007c0 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 800081c:	2010      	movs	r0, #16
 800081e:	f7ff ffcf 	bl	80007c0 <ssd1306_WriteCommand>
		HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100);
 8000822:	2382      	movs	r3, #130	; 0x82
 8000824:	2264      	movs	r2, #100	; 0x64
 8000826:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800082a:	fb03 6304 	mla	r3, r3, r4, r6
 800082e:	2240      	movs	r2, #64	; 0x40
 8000830:	9300      	str	r3, [sp, #0]
 8000832:	2178      	movs	r1, #120	; 0x78
 8000834:	2301      	movs	r3, #1
 8000836:	4628      	mov	r0, r5
 8000838:	3401      	adds	r4, #1
 800083a:	f000 fe11 	bl	8001460 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 800083e:	2c08      	cmp	r4, #8
 8000840:	d1e4      	bne.n	800080c <ssd1306_UpdateScreen+0x8>
	}
}
 8000842:	b004      	add	sp, #16
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	bf00      	nop
 8000848:	200001c2 	.word	0x200001c2
 800084c:	200021a0 	.word	0x200021a0

08000850 <ssd1306_Init>:
{
 8000850:	b508      	push	{r3, lr}
	HAL_Delay(100);
 8000852:	2064      	movs	r0, #100	; 0x64
 8000854:	f000 fada 	bl	8000e0c <HAL_Delay>
	ssd1306_WriteCommand(0xAE); //display off
 8000858:	20ae      	movs	r0, #174	; 0xae
 800085a:	f7ff ffb1 	bl	80007c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800085e:	2020      	movs	r0, #32
 8000860:	f7ff ffae 	bl	80007c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000864:	2010      	movs	r0, #16
 8000866:	f7ff ffab 	bl	80007c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800086a:	20b0      	movs	r0, #176	; 0xb0
 800086c:	f7ff ffa8 	bl	80007c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000870:	20c8      	movs	r0, #200	; 0xc8
 8000872:	f7ff ffa5 	bl	80007c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 8000876:	2000      	movs	r0, #0
 8000878:	f7ff ffa2 	bl	80007c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 800087c:	2010      	movs	r0, #16
 800087e:	f7ff ff9f 	bl	80007c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8000882:	2040      	movs	r0, #64	; 0x40
 8000884:	f7ff ff9c 	bl	80007c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 8000888:	2081      	movs	r0, #129	; 0x81
 800088a:	f7ff ff99 	bl	80007c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 800088e:	20ff      	movs	r0, #255	; 0xff
 8000890:	f7ff ff96 	bl	80007c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 8000894:	20a1      	movs	r0, #161	; 0xa1
 8000896:	f7ff ff93 	bl	80007c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 800089a:	20a6      	movs	r0, #166	; 0xa6
 800089c:	f7ff ff90 	bl	80007c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 80008a0:	20a8      	movs	r0, #168	; 0xa8
 80008a2:	f7ff ff8d 	bl	80007c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 80008a6:	203f      	movs	r0, #63	; 0x3f
 80008a8:	f7ff ff8a 	bl	80007c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80008ac:	20a4      	movs	r0, #164	; 0xa4
 80008ae:	f7ff ff87 	bl	80007c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 80008b2:	20d3      	movs	r0, #211	; 0xd3
 80008b4:	f7ff ff84 	bl	80007c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 80008b8:	2000      	movs	r0, #0
 80008ba:	f7ff ff81 	bl	80007c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80008be:	20d5      	movs	r0, #213	; 0xd5
 80008c0:	f7ff ff7e 	bl	80007c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 80008c4:	20f0      	movs	r0, #240	; 0xf0
 80008c6:	f7ff ff7b 	bl	80007c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80008ca:	20d9      	movs	r0, #217	; 0xd9
 80008cc:	f7ff ff78 	bl	80007c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 80008d0:	2022      	movs	r0, #34	; 0x22
 80008d2:	f7ff ff75 	bl	80007c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 80008d6:	20da      	movs	r0, #218	; 0xda
 80008d8:	f7ff ff72 	bl	80007c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 80008dc:	2012      	movs	r0, #18
 80008de:	f7ff ff6f 	bl	80007c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 80008e2:	20db      	movs	r0, #219	; 0xdb
 80008e4:	f7ff ff6c 	bl	80007c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80008e8:	2020      	movs	r0, #32
 80008ea:	f7ff ff69 	bl	80007c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80008ee:	208d      	movs	r0, #141	; 0x8d
 80008f0:	f7ff ff66 	bl	80007c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 80008f4:	2014      	movs	r0, #20
 80008f6:	f7ff ff63 	bl	80007c0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 80008fa:	20af      	movs	r0, #175	; 0xaf
 80008fc:	f7ff ff60 	bl	80007c0 <ssd1306_WriteCommand>
	ssd1306_Fill(Black);
 8000900:	2000      	movs	r0, #0
 8000902:	f7ff ff71 	bl	80007e8 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8000906:	f7ff ff7d 	bl	8000804 <ssd1306_UpdateScreen>
	SSD1306.Initialized = 1;
 800090a:	2001      	movs	r0, #1
	SSD1306.CurrentX = 0;
 800090c:	2200      	movs	r2, #0
 800090e:	4b02      	ldr	r3, [pc, #8]	; (8000918 <ssd1306_Init+0xc8>)
	SSD1306.Initialized = 1;
 8000910:	7158      	strb	r0, [r3, #5]
	SSD1306.CurrentX = 0;
 8000912:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000914:	805a      	strh	r2, [r3, #2]
}
 8000916:	bd08      	pop	{r3, pc}
 8000918:	200001bc 	.word	0x200001bc

0800091c <ssd1306_DrawPixel>:
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 800091c:	2881      	cmp	r0, #129	; 0x81
{
 800091e:	b530      	push	{r4, r5, lr}
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8000920:	d817      	bhi.n	8000952 <ssd1306_DrawPixel+0x36>
 8000922:	293f      	cmp	r1, #63	; 0x3f
 8000924:	d815      	bhi.n	8000952 <ssd1306_DrawPixel+0x36>
		// Don't write outside the buffer
		return;
	}

	// Check if pixel should be inverted
	if (SSD1306.Inverted)
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <ssd1306_DrawPixel+0x38>)
 8000928:	791b      	ldrb	r3, [r3, #4]
 800092a:	b113      	cbz	r3, 8000932 <ssd1306_DrawPixel+0x16>
	{
		color = (SSD1306_COLOR)!color;
 800092c:	fab2 f282 	clz	r2, r2
 8000930:	0952      	lsrs	r2, r2, #5
 8000932:	2382      	movs	r3, #130	; 0x82
 8000934:	08cc      	lsrs	r4, r1, #3
 8000936:	fb03 0004 	mla	r0, r3, r4, r0
 800093a:	f001 0407 	and.w	r4, r1, #7
 800093e:	2101      	movs	r1, #1
 8000940:	4d05      	ldr	r5, [pc, #20]	; (8000958 <ssd1306_DrawPixel+0x3c>)
 8000942:	40a1      	lsls	r1, r4
 8000944:	562b      	ldrsb	r3, [r5, r0]
 8000946:	b249      	sxtb	r1, r1
	}

	// Draw in the right color
	if (color == White)
 8000948:	2a01      	cmp	r2, #1
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800094a:	bf0c      	ite	eq
 800094c:	430b      	orreq	r3, r1
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800094e:	438b      	bicne	r3, r1
 8000950:	542b      	strb	r3, [r5, r0]
	}
}
 8000952:	bd30      	pop	{r4, r5, pc}
 8000954:	200001bc 	.word	0x200001bc
 8000958:	200001c2 	.word	0x200001c2

0800095c <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 800095c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000960:	b087      	sub	sp, #28
 8000962:	4607      	mov	r7, r0
 8000964:	a806      	add	r0, sp, #24
 8000966:	e900 0006 	stmdb	r0, {r1, r2}
 800096a:	469b      	mov	fp, r3
	uint32_t i, b, j;

	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800096c:	4b21      	ldr	r3, [pc, #132]	; (80009f4 <ssd1306_WriteChar+0x98>)
 800096e:	f89d 9010 	ldrb.w	r9, [sp, #16]
 8000972:	881c      	ldrh	r4, [r3, #0]
 8000974:	9301      	str	r3, [sp, #4]
 8000976:	eb04 0209 	add.w	r2, r4, r9
 800097a:	2a81      	cmp	r2, #129	; 0x81
 800097c:	dc37      	bgt.n	80009ee <ssd1306_WriteChar+0x92>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 800097e:	885b      	ldrh	r3, [r3, #2]
 8000980:	f89d a011 	ldrb.w	sl, [sp, #17]
 8000984:	9300      	str	r3, [sp, #0]
 8000986:	eb03 020a 	add.w	r2, r3, sl
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800098a:	2a3f      	cmp	r2, #63	; 0x3f
 800098c:	dc2f      	bgt.n	80009ee <ssd1306_WriteChar+0x92>
		// Not enough space on current line
		return 0;
	}

	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 800098e:	2500      	movs	r5, #0
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000990:	f1a7 0220 	sub.w	r2, r7, #32
 8000994:	fb0a f302 	mul.w	r3, sl, r2
 8000998:	9302      	str	r3, [sp, #8]
	for (i = 0; i < Font.FontHeight; i++)
 800099a:	45aa      	cmp	sl, r5
 800099c:	d806      	bhi.n	80009ac <ssd1306_WriteChar+0x50>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 800099e:	9b01      	ldr	r3, [sp, #4]
 80009a0:	444c      	add	r4, r9
 80009a2:	801c      	strh	r4, [r3, #0]

	// Return written char for validation
	return ch;
}
 80009a4:	4638      	mov	r0, r7
 80009a6:	b007      	add	sp, #28
 80009a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (j = 0; j < Font.FontWidth; j++)
 80009ac:	2600      	movs	r6, #0
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 80009ae:	9b02      	ldr	r3, [sp, #8]
 80009b0:	9905      	ldr	r1, [sp, #20]
 80009b2:	195a      	adds	r2, r3, r5
 80009b4:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 80009b8:	9303      	str	r3, [sp, #12]
 80009ba:	9b00      	ldr	r3, [sp, #0]
 80009bc:	eb05 0803 	add.w	r8, r5, r3
 80009c0:	fa5f f888 	uxtb.w	r8, r8
		for (j = 0; j < Font.FontWidth; j++)
 80009c4:	45b1      	cmp	r9, r6
 80009c6:	d801      	bhi.n	80009cc <ssd1306_WriteChar+0x70>
	for (i = 0; i < Font.FontHeight; i++)
 80009c8:	3501      	adds	r5, #1
 80009ca:	e7e6      	b.n	800099a <ssd1306_WriteChar+0x3e>
			if ((b << j) & 0x8000)
 80009cc:	9b03      	ldr	r3, [sp, #12]
 80009ce:	1930      	adds	r0, r6, r4
 80009d0:	fa03 f206 	lsl.w	r2, r3, r6
 80009d4:	0413      	lsls	r3, r2, #16
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80009d6:	bf58      	it	pl
 80009d8:	fabb f28b 	clzpl	r2, fp
 80009dc:	b2c0      	uxtb	r0, r0
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80009de:	bf4c      	ite	mi
 80009e0:	465a      	movmi	r2, fp
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80009e2:	0952      	lsrpl	r2, r2, #5
 80009e4:	4641      	mov	r1, r8
 80009e6:	f7ff ff99 	bl	800091c <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 80009ea:	3601      	adds	r6, #1
 80009ec:	e7ea      	b.n	80009c4 <ssd1306_WriteChar+0x68>
		return 0;
 80009ee:	2700      	movs	r7, #0
 80009f0:	e7d8      	b.n	80009a4 <ssd1306_WriteChar+0x48>
 80009f2:	bf00      	nop
 80009f4:	200001bc 	.word	0x200001bc

080009f8 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 80009f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80009fa:	466d      	mov	r5, sp
 80009fc:	461f      	mov	r7, r3
 80009fe:	e885 0006 	stmia.w	r5, {r1, r2}
 8000a02:	1e46      	subs	r6, r0, #1
	// Write until null-byte
	while (*str)
 8000a04:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 8000a08:	b144      	cbz	r4, 8000a1c <ssd1306_WriteString+0x24>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 8000a0a:	e895 0006 	ldmia.w	r5, {r1, r2}
 8000a0e:	4620      	mov	r0, r4
 8000a10:	463b      	mov	r3, r7
 8000a12:	f7ff ffa3 	bl	800095c <ssd1306_WriteChar>
 8000a16:	7834      	ldrb	r4, [r6, #0]
 8000a18:	42a0      	cmp	r0, r4
 8000a1a:	d0f3      	beq.n	8000a04 <ssd1306_WriteString+0xc>
		str++;
	}

	// Everything ok
	return *str;
}
 8000a1c:	4620      	mov	r0, r4
 8000a1e:	b003      	add	sp, #12
 8000a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000a24 <ssd1306_SetCursor>:
//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
	SSD1306.CurrentX = x;
 8000a24:	4b01      	ldr	r3, [pc, #4]	; (8000a2c <ssd1306_SetCursor+0x8>)
 8000a26:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8000a28:	8059      	strh	r1, [r3, #2]
}
 8000a2a:	4770      	bx	lr
 8000a2c:	200001bc 	.word	0x200001bc

08000a30 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a30:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <HAL_MspInit+0x48>)
{
 8000a32:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a34:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a36:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a38:	f042 0201 	orr.w	r2, r2, #1
 8000a3c:	619a      	str	r2, [r3, #24]
 8000a3e:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a40:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a44:	f002 0201 	and.w	r2, r2, #1
 8000a48:	9200      	str	r2, [sp, #0]
 8000a4a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4c:	69da      	ldr	r2, [r3, #28]
 8000a4e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a52:	61da      	str	r2, [r3, #28]
 8000a54:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a56:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5c:	9301      	str	r3, [sp, #4]
 8000a5e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a60:	f000 f9f8 	bl	8000e54 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a64:	4a05      	ldr	r2, [pc, #20]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a66:	6853      	ldr	r3, [r2, #4]
 8000a68:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a70:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a72:	b003      	add	sp, #12
 8000a74:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	40010000 	.word	0x40010000

08000a80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a80:	b510      	push	{r4, lr}
 8000a82:	4604      	mov	r4, r0
 8000a84:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a86:	2210      	movs	r2, #16
 8000a88:	2100      	movs	r1, #0
 8000a8a:	a802      	add	r0, sp, #8
 8000a8c:	f004 ffbf 	bl	8005a0e <memset>
  if(hi2c->Instance==I2C1)
 8000a90:	6822      	ldr	r2, [r4, #0]
 8000a92:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <HAL_I2C_MspInit+0x68>)
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d124      	bne.n	8000ae2 <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a98:	4c14      	ldr	r4, [pc, #80]	; (8000aec <HAL_I2C_MspInit+0x6c>)
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a9a:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9e:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa0:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa2:	f043 0308 	orr.w	r3, r3, #8
 8000aa6:	61a3      	str	r3, [r4, #24]
 8000aa8:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aaa:	4811      	ldr	r0, [pc, #68]	; (8000af0 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aac:	f003 0308 	and.w	r3, r3, #8
 8000ab0:	9300      	str	r3, [sp, #0]
 8000ab2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ab4:	2312      	movs	r3, #18
 8000ab6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aba:	2303      	movs	r3, #3
 8000abc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000abe:	f000 fa21 	bl	8000f04 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000ac2:	4a0c      	ldr	r2, [pc, #48]	; (8000af4 <HAL_I2C_MspInit+0x74>)
 8000ac4:	6853      	ldr	r3, [r2, #4]
 8000ac6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000aca:	f043 0302 	orr.w	r3, r3, #2
 8000ace:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ad0:	69e3      	ldr	r3, [r4, #28]
 8000ad2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ad6:	61e3      	str	r3, [r4, #28]
 8000ad8:	69e3      	ldr	r3, [r4, #28]
 8000ada:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ade:	9301      	str	r3, [sp, #4]
 8000ae0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ae2:	b006      	add	sp, #24
 8000ae4:	bd10      	pop	{r4, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40005400 	.word	0x40005400
 8000aec:	40021000 	.word	0x40021000
 8000af0:	40010c00 	.word	0x40010c00
 8000af4:	40010000 	.word	0x40010000

08000af8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000af8:	b510      	push	{r4, lr}
 8000afa:	4604      	mov	r4, r0
 8000afc:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afe:	2210      	movs	r2, #16
 8000b00:	2100      	movs	r1, #0
 8000b02:	a802      	add	r0, sp, #8
 8000b04:	f004 ff83 	bl	8005a0e <memset>
  if(hspi->Instance==SPI2)
 8000b08:	6822      	ldr	r2, [r4, #0]
 8000b0a:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <HAL_SPI_MspInit+0x70>)
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d128      	bne.n	8000b62 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b10:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 8000b14:	69da      	ldr	r2, [r3, #28]
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b16:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000b1c:	61da      	str	r2, [r3, #28]
 8000b1e:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b20:	4812      	ldr	r0, [pc, #72]	; (8000b6c <HAL_SPI_MspInit+0x74>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b22:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000b26:	9200      	str	r2, [sp, #0]
 8000b28:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	699a      	ldr	r2, [r3, #24]
 8000b2c:	f042 0208 	orr.w	r2, r2, #8
 8000b30:	619a      	str	r2, [r3, #24]
 8000b32:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b38:	f003 0308 	and.w	r3, r3, #8
 8000b3c:	9301      	str	r3, [sp, #4]
 8000b3e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	2302      	movs	r3, #2
 8000b42:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b46:	2303      	movs	r3, #3
 8000b48:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4a:	f000 f9db 	bl	8000f04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b52:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b54:	4805      	ldr	r0, [pc, #20]	; (8000b6c <HAL_SPI_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b56:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5e:	f000 f9d1 	bl	8000f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000b62:	b006      	add	sp, #24
 8000b64:	bd10      	pop	{r4, pc}
 8000b66:	bf00      	nop
 8000b68:	40003800 	.word	0x40003800
 8000b6c:	40010c00 	.word	0x40010c00

08000b70 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM2)
 8000b70:	6803      	ldr	r3, [r0, #0]
{
 8000b72:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM2)
 8000b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b78:	d10a      	bne.n	8000b90 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b7a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000b7e:	69da      	ldr	r2, [r3, #28]
 8000b80:	f042 0201 	orr.w	r2, r2, #1
 8000b84:	61da      	str	r2, [r3, #28]
 8000b86:	69db      	ldr	r3, [r3, #28]
 8000b88:	f003 0301 	and.w	r3, r3, #1
 8000b8c:	9301      	str	r3, [sp, #4]
 8000b8e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b90:	b002      	add	sp, #8
 8000b92:	4770      	bx	lr

08000b94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b94:	b510      	push	{r4, lr}
 8000b96:	4604      	mov	r4, r0
 8000b98:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9a:	2210      	movs	r2, #16
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	a802      	add	r0, sp, #8
 8000ba0:	f004 ff35 	bl	8005a0e <memset>
  if(htim->Instance==TIM2)
 8000ba4:	6823      	ldr	r3, [r4, #0]
 8000ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000baa:	d113      	bne.n	8000bd4 <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bac:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000bb0:	699a      	ldr	r2, [r3, #24]
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb4:	f042 0204 	orr.w	r2, r2, #4
 8000bb8:	619a      	str	r2, [r3, #24]
 8000bba:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbc:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	f003 0304 	and.w	r3, r3, #4
 8000bc2:	9301      	str	r3, [sp, #4]
 8000bc4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	2302      	movs	r3, #2
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <HAL_TIM_MspPostInit+0x44>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bca:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f000 f998 	bl	8000f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000bd4:	b006      	add	sp, #24
 8000bd6:	bd10      	pop	{r4, pc}
 8000bd8:	40010800 	.word	0x40010800

08000bdc <HAL_UART_MspInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	2210      	movs	r2, #16
{
 8000bde:	b510      	push	{r4, lr}
 8000be0:	4604      	mov	r4, r0
 8000be2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	eb0d 0002 	add.w	r0, sp, r2
 8000be8:	2100      	movs	r1, #0
 8000bea:	f004 ff10 	bl	8005a0e <memset>
  if(huart->Instance==USART1)
 8000bee:	6823      	ldr	r3, [r4, #0]
 8000bf0:	4a2b      	ldr	r2, [pc, #172]	; (8000ca0 <HAL_UART_MspInit+0xc4>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d129      	bne.n	8000c4a <HAL_UART_MspInit+0x6e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bf6:	4b2b      	ldr	r3, [pc, #172]	; (8000ca4 <HAL_UART_MspInit+0xc8>)
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	f44f 7000 	mov.w	r0, #512	; 0x200
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bfc:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	a904      	add	r1, sp, #16
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000c04:	619a      	str	r2, [r3, #24]
 8000c06:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c08:	f44f 6480 	mov.w	r4, #1024	; 0x400
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c0c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000c10:	9200      	str	r2, [sp, #0]
 8000c12:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c14:	699a      	ldr	r2, [r3, #24]
 8000c16:	f042 0204 	orr.w	r2, r2, #4
 8000c1a:	619a      	str	r2, [r3, #24]
 8000c1c:	699b      	ldr	r3, [r3, #24]
 8000c1e:	f003 0304 	and.w	r3, r3, #4
 8000c22:	9301      	str	r3, [sp, #4]
 8000c24:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	e9cd 0304 	strd	r0, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c2c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2e:	481e      	ldr	r0, [pc, #120]	; (8000ca8 <HAL_UART_MspInit+0xcc>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c30:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c32:	f000 f967 	bl	8000f04 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c36:	2300      	movs	r3, #0
 8000c38:	e9cd 4304 	strd	r4, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3c:	481a      	ldr	r0, [pc, #104]	; (8000ca8 <HAL_UART_MspInit+0xcc>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c40:	a904      	add	r1, sp, #16
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c42:	f000 f95f 	bl	8000f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c46:	b008      	add	sp, #32
 8000c48:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 8000c4a:	4a18      	ldr	r2, [pc, #96]	; (8000cac <HAL_UART_MspInit+0xd0>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d1fa      	bne.n	8000c46 <HAL_UART_MspInit+0x6a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c50:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <HAL_UART_MspInit+0xc8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c52:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c54:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c56:	4816      	ldr	r0, [pc, #88]	; (8000cb0 <HAL_UART_MspInit+0xd4>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c58:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000c5c:	61da      	str	r2, [r3, #28]
 8000c5e:	69da      	ldr	r2, [r3, #28]
 8000c60:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8000c64:	9202      	str	r2, [sp, #8]
 8000c66:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c68:	699a      	ldr	r2, [r3, #24]
 8000c6a:	f042 0208 	orr.w	r2, r2, #8
 8000c6e:	619a      	str	r2, [r3, #24]
 8000c70:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c76:	f003 0308 	and.w	r3, r3, #8
 8000c7a:	9303      	str	r3, [sp, #12]
 8000c7c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c84:	2303      	movs	r3, #3
 8000c86:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c88:	f000 f93c 	bl	8000f04 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c90:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c92:	4807      	ldr	r0, [pc, #28]	; (8000cb0 <HAL_UART_MspInit+0xd4>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c94:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9a:	a904      	add	r1, sp, #16
 8000c9c:	e7d1      	b.n	8000c42 <HAL_UART_MspInit+0x66>
 8000c9e:	bf00      	nop
 8000ca0:	40013800 	.word	0x40013800
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	40010800 	.word	0x40010800
 8000cac:	40004800 	.word	0x40004800
 8000cb0:	40010c00 	.word	0x40010c00

08000cb4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cb4:	4770      	bx	lr

08000cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb6:	e7fe      	b.n	8000cb6 <HardFault_Handler>

08000cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb8:	e7fe      	b.n	8000cb8 <MemManage_Handler>

08000cba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cba:	e7fe      	b.n	8000cba <BusFault_Handler>

08000cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cbc:	e7fe      	b.n	8000cbc <UsageFault_Handler>

08000cbe <DebugMon_Handler>:
 8000cbe:	4770      	bx	lr

08000cc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc2:	f000 f891 	bl	8000de8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000cc6:	f004 f807 	bl	8004cd8 <xTaskGetSchedulerState>
 8000cca:	2801      	cmp	r0, #1
 8000ccc:	d003      	beq.n	8000cd6 <SysTick_Handler+0x16>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  xPortSysTickHandler();
 8000cd2:	f004 bad7 	b.w	8005284 <xPortSysTickHandler>
}
 8000cd6:	bd08      	pop	{r3, pc}

08000cd8 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000cd8:	4801      	ldr	r0, [pc, #4]	; (8000ce0 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8000cda:	f000 bd83 	b.w	80017e4 <HAL_PCD_IRQHandler>
 8000cde:	bf00      	nop
 8000ce0:	200033cc 	.word	0x200033cc

08000ce4 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <SystemInit+0x40>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	f042 0201 	orr.w	r2, r2, #1
 8000cec:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000cee:	6859      	ldr	r1, [r3, #4]
 8000cf0:	4a0d      	ldr	r2, [pc, #52]	; (8000d28 <SystemInit+0x44>)
 8000cf2:	400a      	ands	r2, r1
 8000cf4:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000cfc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d00:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d08:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000d0a:	685a      	ldr	r2, [r3, #4]
 8000d0c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000d10:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000d12:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000d16:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000d18:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d1c:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <SystemInit+0x48>)
 8000d1e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	40021000 	.word	0x40021000
 8000d28:	f8ff0000 	.word	0xf8ff0000
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000d30:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000d32:	e003      	b.n	8000d3c <LoopCopyDataInit>

08000d34 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000d34:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000d36:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000d38:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000d3a:	3104      	adds	r1, #4

08000d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000d3c:	480a      	ldr	r0, [pc, #40]	; (8000d68 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000d40:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000d42:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000d44:	d3f6      	bcc.n	8000d34 <CopyDataInit>
  ldr r2, =_sbss
 8000d46:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000d48:	e002      	b.n	8000d50 <LoopFillZerobss>

08000d4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000d4a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000d4c:	f842 3b04 	str.w	r3, [r2], #4

08000d50 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000d52:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000d54:	d3f9      	bcc.n	8000d4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d56:	f7ff ffc5 	bl	8000ce4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d5a:	f004 fe29 	bl	80059b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d5e:	f7ff fbd5 	bl	800050c <main>
  bx lr
 8000d62:	4770      	bx	lr
  ldr r3, =_sidata
 8000d64:	0800696c 	.word	0x0800696c
  ldr r0, =_sdata
 8000d68:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000d6c:	200001a0 	.word	0x200001a0
  ldr r2, =_sbss
 8000d70:	200001a0 	.word	0x200001a0
  ldr r3, = _ebss
 8000d74:	20003638 	.word	0x20003638

08000d78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d78:	e7fe      	b.n	8000d78 <ADC1_2_IRQHandler>
	...

08000d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d7c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <HAL_InitTick+0x3c>)
{
 8000d80:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d82:	7818      	ldrb	r0, [r3, #0]
 8000d84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d88:	fbb3 f3f0 	udiv	r3, r3, r0
 8000d8c:	4a0b      	ldr	r2, [pc, #44]	; (8000dbc <HAL_InitTick+0x40>)
 8000d8e:	6810      	ldr	r0, [r2, #0]
 8000d90:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d94:	f000 f8a0 	bl	8000ed8 <HAL_SYSTICK_Config>
 8000d98:	4604      	mov	r4, r0
 8000d9a:	b958      	cbnz	r0, 8000db4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9c:	2d0f      	cmp	r5, #15
 8000d9e:	d809      	bhi.n	8000db4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da0:	4602      	mov	r2, r0
 8000da2:	4629      	mov	r1, r5
 8000da4:	f04f 30ff 	mov.w	r0, #4294967295
 8000da8:	f000 f854 	bl	8000e54 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dac:	4620      	mov	r0, r4
 8000dae:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <HAL_InitTick+0x44>)
 8000db0:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000db2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000db4:	2001      	movs	r0, #1
 8000db6:	e7fc      	b.n	8000db2 <HAL_InitTick+0x36>
 8000db8:	2000000c 	.word	0x2000000c
 8000dbc:	20000008 	.word	0x20000008
 8000dc0:	20000010 	.word	0x20000010

08000dc4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc4:	4a07      	ldr	r2, [pc, #28]	; (8000de4 <HAL_Init+0x20>)
{
 8000dc6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dca:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dcc:	f043 0310 	orr.w	r3, r3, #16
 8000dd0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd2:	f000 f82d 	bl	8000e30 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dd6:	200f      	movs	r0, #15
 8000dd8:	f7ff ffd0 	bl	8000d7c <HAL_InitTick>
  HAL_MspInit();
 8000ddc:	f7ff fe28 	bl	8000a30 <HAL_MspInit>
}
 8000de0:	2000      	movs	r0, #0
 8000de2:	bd08      	pop	{r3, pc}
 8000de4:	40022000 	.word	0x40022000

08000de8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000de8:	4a03      	ldr	r2, [pc, #12]	; (8000df8 <HAL_IncTick+0x10>)
 8000dea:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <HAL_IncTick+0x14>)
 8000dec:	6811      	ldr	r1, [r2, #0]
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	440b      	add	r3, r1
 8000df2:	6013      	str	r3, [r2, #0]
}
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	2000228c 	.word	0x2000228c
 8000dfc:	2000000c 	.word	0x2000000c

08000e00 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e00:	4b01      	ldr	r3, [pc, #4]	; (8000e08 <HAL_GetTick+0x8>)
 8000e02:	6818      	ldr	r0, [r3, #0]
}
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	2000228c 	.word	0x2000228c

08000e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e0c:	b538      	push	{r3, r4, r5, lr}
 8000e0e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000e10:	f7ff fff6 	bl	8000e00 <HAL_GetTick>
 8000e14:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e16:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000e18:	bf1e      	ittt	ne
 8000e1a:	4b04      	ldrne	r3, [pc, #16]	; (8000e2c <HAL_Delay+0x20>)
 8000e1c:	781b      	ldrbne	r3, [r3, #0]
 8000e1e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e20:	f7ff ffee 	bl	8000e00 <HAL_GetTick>
 8000e24:	1b40      	subs	r0, r0, r5
 8000e26:	42a0      	cmp	r0, r4
 8000e28:	d3fa      	bcc.n	8000e20 <HAL_Delay+0x14>
  {
  }
}
 8000e2a:	bd38      	pop	{r3, r4, r5, pc}
 8000e2c:	2000000c 	.word	0x2000000c

08000e30 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e30:	4a07      	ldr	r2, [pc, #28]	; (8000e50 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e32:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e34:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e36:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e3e:	041b      	lsls	r3, r3, #16
 8000e40:	0c1b      	lsrs	r3, r3, #16
 8000e42:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000e4a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000e4c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000e4e:	4770      	bx	lr
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e54:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e56:	b570      	push	{r4, r5, r6, lr}
 8000e58:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5a:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e5e:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e62:	f1c4 0507 	rsb	r5, r4, #7
 8000e66:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e68:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e6c:	bf28      	it	cs
 8000e6e:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e70:	2b06      	cmp	r3, #6
 8000e72:	bf98      	it	ls
 8000e74:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e76:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7a:	bf88      	it	hi
 8000e7c:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7e:	ea21 0303 	bic.w	r3, r1, r3
 8000e82:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e84:	fa06 f404 	lsl.w	r4, r6, r4
 8000e88:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000e8c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8e:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e92:	bfa8      	it	ge
 8000e94:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8000e98:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9c:	bfb8      	it	lt
 8000e9e:	4a06      	ldrlt	r2, [pc, #24]	; (8000eb8 <HAL_NVIC_SetPriority+0x64>)
 8000ea0:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea2:	bfab      	itete	ge
 8000ea4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eac:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb0:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000eb2:	bd70      	pop	{r4, r5, r6, pc}
 8000eb4:	e000ed00 	.word	0xe000ed00
 8000eb8:	e000ed14 	.word	0xe000ed14

08000ebc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000ebc:	2800      	cmp	r0, #0
 8000ebe:	db08      	blt.n	8000ed2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	0942      	lsrs	r2, r0, #5
 8000ec4:	f000 001f 	and.w	r0, r0, #31
 8000ec8:	fa03 f000 	lsl.w	r0, r3, r0
 8000ecc:	4b01      	ldr	r3, [pc, #4]	; (8000ed4 <HAL_NVIC_EnableIRQ+0x18>)
 8000ece:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000ed2:	4770      	bx	lr
 8000ed4:	e000e100 	.word	0xe000e100

08000ed8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed8:	3801      	subs	r0, #1
 8000eda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ede:	d20a      	bcs.n	8000ef6 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee0:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee4:	4a06      	ldr	r2, [pc, #24]	; (8000f00 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eec:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eee:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000ef6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000e010 	.word	0xe000e010
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f08:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8000f0a:	4626      	mov	r6, r4
 8000f0c:	4b65      	ldr	r3, [pc, #404]	; (80010a4 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f0e:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80010b4 <HAL_GPIO_Init+0x1b0>
 8000f12:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80010b8 <HAL_GPIO_Init+0x1b4>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f16:	680a      	ldr	r2, [r1, #0]
 8000f18:	fa32 f506 	lsrs.w	r5, r2, r6
 8000f1c:	d102      	bne.n	8000f24 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8000f1e:	b003      	add	sp, #12
 8000f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000f24:	f04f 0801 	mov.w	r8, #1
 8000f28:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f2c:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8000f30:	4590      	cmp	r8, r2
 8000f32:	d17e      	bne.n	8001032 <HAL_GPIO_Init+0x12e>
      switch (GPIO_Init->Mode)
 8000f34:	684d      	ldr	r5, [r1, #4]
 8000f36:	2d12      	cmp	r5, #18
 8000f38:	f000 80a9 	beq.w	800108e <HAL_GPIO_Init+0x18a>
 8000f3c:	f200 8082 	bhi.w	8001044 <HAL_GPIO_Init+0x140>
 8000f40:	2d02      	cmp	r5, #2
 8000f42:	f000 80a1 	beq.w	8001088 <HAL_GPIO_Init+0x184>
 8000f46:	d876      	bhi.n	8001036 <HAL_GPIO_Init+0x132>
 8000f48:	2d00      	cmp	r5, #0
 8000f4a:	f000 8088 	beq.w	800105e <HAL_GPIO_Init+0x15a>
 8000f4e:	2d01      	cmp	r5, #1
 8000f50:	f000 8098 	beq.w	8001084 <HAL_GPIO_Init+0x180>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f54:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f58:	2aff      	cmp	r2, #255	; 0xff
 8000f5a:	bf93      	iteet	ls
 8000f5c:	4682      	movls	sl, r0
 8000f5e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000f62:	3d08      	subhi	r5, #8
 8000f64:	f8d0 b000 	ldrls.w	fp, [r0]
 8000f68:	bf92      	itee	ls
 8000f6a:	00b5      	lslls	r5, r6, #2
 8000f6c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000f70:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f72:	fa09 f805 	lsl.w	r8, r9, r5
 8000f76:	ea2b 0808 	bic.w	r8, fp, r8
 8000f7a:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f7e:	bf88      	it	hi
 8000f80:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f84:	ea48 0505 	orr.w	r5, r8, r5
 8000f88:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f8c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000f90:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000f94:	d04d      	beq.n	8001032 <HAL_GPIO_Init+0x12e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f96:	4f44      	ldr	r7, [pc, #272]	; (80010a8 <HAL_GPIO_Init+0x1a4>)
 8000f98:	f026 0803 	bic.w	r8, r6, #3
 8000f9c:	69bd      	ldr	r5, [r7, #24]
 8000f9e:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000fa2:	f045 0501 	orr.w	r5, r5, #1
 8000fa6:	61bd      	str	r5, [r7, #24]
 8000fa8:	69bd      	ldr	r5, [r7, #24]
 8000faa:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8000fae:	f005 0501 	and.w	r5, r5, #1
 8000fb2:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fb4:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fb8:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fba:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000fbe:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fc2:	fa09 f90b 	lsl.w	r9, r9, fp
 8000fc6:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fca:	4d38      	ldr	r5, [pc, #224]	; (80010ac <HAL_GPIO_Init+0x1a8>)
 8000fcc:	42a8      	cmp	r0, r5
 8000fce:	d063      	beq.n	8001098 <HAL_GPIO_Init+0x194>
 8000fd0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fd4:	42a8      	cmp	r0, r5
 8000fd6:	d061      	beq.n	800109c <HAL_GPIO_Init+0x198>
 8000fd8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fdc:	42a8      	cmp	r0, r5
 8000fde:	d05f      	beq.n	80010a0 <HAL_GPIO_Init+0x19c>
 8000fe0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fe4:	42a8      	cmp	r0, r5
 8000fe6:	bf0c      	ite	eq
 8000fe8:	2503      	moveq	r5, #3
 8000fea:	2504      	movne	r5, #4
 8000fec:	fa05 f50b 	lsl.w	r5, r5, fp
 8000ff0:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000ff4:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000ff8:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ffa:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000ffe:	bf14      	ite	ne
 8001000:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001002:	4395      	biceq	r5, r2
 8001004:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8001006:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001008:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800100c:	bf14      	ite	ne
 800100e:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001010:	4395      	biceq	r5, r2
 8001012:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8001014:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001016:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800101a:	bf14      	ite	ne
 800101c:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800101e:	4395      	biceq	r5, r2
 8001020:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8001022:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001024:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001028:	bf14      	ite	ne
 800102a:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800102c:	ea25 0202 	biceq.w	r2, r5, r2
 8001030:	60da      	str	r2, [r3, #12]
	position++;
 8001032:	3601      	adds	r6, #1
 8001034:	e76f      	b.n	8000f16 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8001036:	2d03      	cmp	r5, #3
 8001038:	d022      	beq.n	8001080 <HAL_GPIO_Init+0x17c>
 800103a:	2d11      	cmp	r5, #17
 800103c:	d18a      	bne.n	8000f54 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800103e:	68cc      	ldr	r4, [r1, #12]
 8001040:	3404      	adds	r4, #4
          break;
 8001042:	e787      	b.n	8000f54 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8001044:	4f1a      	ldr	r7, [pc, #104]	; (80010b0 <HAL_GPIO_Init+0x1ac>)
 8001046:	42bd      	cmp	r5, r7
 8001048:	d009      	beq.n	800105e <HAL_GPIO_Init+0x15a>
 800104a:	d812      	bhi.n	8001072 <HAL_GPIO_Init+0x16e>
 800104c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80010bc <HAL_GPIO_Init+0x1b8>
 8001050:	454d      	cmp	r5, r9
 8001052:	d004      	beq.n	800105e <HAL_GPIO_Init+0x15a>
 8001054:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001058:	454d      	cmp	r5, r9
 800105a:	f47f af7b 	bne.w	8000f54 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800105e:	688c      	ldr	r4, [r1, #8]
 8001060:	b1c4      	cbz	r4, 8001094 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001062:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8001064:	bf0c      	ite	eq
 8001066:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800106a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800106e:	2408      	movs	r4, #8
 8001070:	e770      	b.n	8000f54 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8001072:	4565      	cmp	r5, ip
 8001074:	d0f3      	beq.n	800105e <HAL_GPIO_Init+0x15a>
 8001076:	4575      	cmp	r5, lr
 8001078:	d0f1      	beq.n	800105e <HAL_GPIO_Init+0x15a>
 800107a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80010c0 <HAL_GPIO_Init+0x1bc>
 800107e:	e7eb      	b.n	8001058 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001080:	2400      	movs	r4, #0
 8001082:	e767      	b.n	8000f54 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001084:	68cc      	ldr	r4, [r1, #12]
          break;
 8001086:	e765      	b.n	8000f54 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001088:	68cc      	ldr	r4, [r1, #12]
 800108a:	3408      	adds	r4, #8
          break;
 800108c:	e762      	b.n	8000f54 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800108e:	68cc      	ldr	r4, [r1, #12]
 8001090:	340c      	adds	r4, #12
          break;
 8001092:	e75f      	b.n	8000f54 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001094:	2404      	movs	r4, #4
 8001096:	e75d      	b.n	8000f54 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001098:	2500      	movs	r5, #0
 800109a:	e7a7      	b.n	8000fec <HAL_GPIO_Init+0xe8>
 800109c:	2501      	movs	r5, #1
 800109e:	e7a5      	b.n	8000fec <HAL_GPIO_Init+0xe8>
 80010a0:	2502      	movs	r5, #2
 80010a2:	e7a3      	b.n	8000fec <HAL_GPIO_Init+0xe8>
 80010a4:	40010400 	.word	0x40010400
 80010a8:	40021000 	.word	0x40021000
 80010ac:	40010800 	.word	0x40010800
 80010b0:	10210000 	.word	0x10210000
 80010b4:	10310000 	.word	0x10310000
 80010b8:	10320000 	.word	0x10320000
 80010bc:	10110000 	.word	0x10110000
 80010c0:	10220000 	.word	0x10220000

080010c4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010c4:	6883      	ldr	r3, [r0, #8]
 80010c6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80010c8:	bf14      	ite	ne
 80010ca:	2001      	movne	r0, #1
 80010cc:	2000      	moveq	r0, #0
 80010ce:	4770      	bx	lr

080010d0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010d0:	b10a      	cbz	r2, 80010d6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010d2:	6101      	str	r1, [r0, #16]
  }
}
 80010d4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010d6:	0409      	lsls	r1, r1, #16
 80010d8:	e7fb      	b.n	80010d2 <HAL_GPIO_WritePin+0x2>

080010da <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80010da:	6801      	ldr	r1, [r0, #0]
 80010dc:	2200      	movs	r2, #0
 80010de:	694b      	ldr	r3, [r1, #20]
 80010e0:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80010e4:	d010      	beq.n	8001108 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80010e6:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80010ea:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80010ec:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80010ee:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80010f0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80010f4:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80010f8:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010fa:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80010fe:	f043 0304 	orr.w	r3, r3, #4
 8001102:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8001104:	2001      	movs	r0, #1
 8001106:	4770      	bx	lr
  }
  return HAL_OK;
 8001108:	4618      	mov	r0, r3
}
 800110a:	4770      	bx	lr

0800110c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800110c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001110:	4604      	mov	r4, r0
 8001112:	4616      	mov	r6, r2
 8001114:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001116:	b28f      	uxth	r7, r1
 8001118:	6825      	ldr	r5, [r4, #0]
 800111a:	6968      	ldr	r0, [r5, #20]
 800111c:	ea37 0000 	bics.w	r0, r7, r0
 8001120:	d017      	beq.n	8001152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001122:	696b      	ldr	r3, [r5, #20]
 8001124:	055a      	lsls	r2, r3, #21
 8001126:	d516      	bpl.n	8001156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001128:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 800112a:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800112c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001130:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001132:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001136:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001138:	2300      	movs	r3, #0
 800113a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800113c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001140:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001144:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001146:	f042 0204 	orr.w	r2, r2, #4
        return HAL_ERROR;
 800114a:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800114c:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800114e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001156:	1c73      	adds	r3, r6, #1
 8001158:	d0df      	beq.n	800111a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800115a:	f7ff fe51 	bl	8000e00 <HAL_GetTick>
 800115e:	eba0 0008 	sub.w	r0, r0, r8
 8001162:	42b0      	cmp	r0, r6
 8001164:	d801      	bhi.n	800116a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>
 8001166:	2e00      	cmp	r6, #0
 8001168:	d1d6      	bne.n	8001118 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800116a:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800116c:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800116e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001170:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001174:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001178:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800117a:	f042 0220 	orr.w	r2, r2, #32
 800117e:	e7e4      	b.n	800114a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3e>

08001180 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8001180:	b570      	push	{r4, r5, r6, lr}
 8001182:	4604      	mov	r4, r0
 8001184:	460d      	mov	r5, r1
 8001186:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001188:	6823      	ldr	r3, [r4, #0]
 800118a:	695b      	ldr	r3, [r3, #20]
 800118c:	075b      	lsls	r3, r3, #29
 800118e:	d501      	bpl.n	8001194 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001190:	2000      	movs	r0, #0
}
 8001192:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001194:	4620      	mov	r0, r4
 8001196:	f7ff ffa0 	bl	80010da <I2C_IsAcknowledgeFailed>
 800119a:	b9a8      	cbnz	r0, 80011c8 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 800119c:	1c6a      	adds	r2, r5, #1
 800119e:	d0f3      	beq.n	8001188 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011a0:	f7ff fe2e 	bl	8000e00 <HAL_GetTick>
 80011a4:	1b80      	subs	r0, r0, r6
 80011a6:	42a8      	cmp	r0, r5
 80011a8:	d801      	bhi.n	80011ae <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80011aa:	2d00      	cmp	r5, #0
 80011ac:	d1ec      	bne.n	8001188 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80011ae:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80011b0:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80011b2:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80011b4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80011b8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80011bc:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80011be:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80011c2:	f042 0220 	orr.w	r2, r2, #32
 80011c6:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80011c8:	2001      	movs	r0, #1
 80011ca:	e7e2      	b.n	8001192 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

080011cc <I2C_WaitOnFlagUntilTimeout>:
{
 80011cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80011d0:	4604      	mov	r4, r0
 80011d2:	4690      	mov	r8, r2
 80011d4:	461f      	mov	r7, r3
 80011d6:	9e08      	ldr	r6, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80011d8:	ea4f 4911 	mov.w	r9, r1, lsr #16
 80011dc:	b28d      	uxth	r5, r1
 80011de:	6821      	ldr	r1, [r4, #0]
 80011e0:	f1b9 0f01 	cmp.w	r9, #1
 80011e4:	bf0c      	ite	eq
 80011e6:	694b      	ldreq	r3, [r1, #20]
 80011e8:	698b      	ldrne	r3, [r1, #24]
 80011ea:	ea35 0303 	bics.w	r3, r5, r3
 80011ee:	bf0c      	ite	eq
 80011f0:	2301      	moveq	r3, #1
 80011f2:	2300      	movne	r3, #0
 80011f4:	4598      	cmp	r8, r3
 80011f6:	d001      	beq.n	80011fc <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 80011f8:	2000      	movs	r0, #0
 80011fa:	e016      	b.n	800122a <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 80011fc:	1c7b      	adds	r3, r7, #1
 80011fe:	d0ef      	beq.n	80011e0 <I2C_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001200:	f7ff fdfe 	bl	8000e00 <HAL_GetTick>
 8001204:	1b80      	subs	r0, r0, r6
 8001206:	42b8      	cmp	r0, r7
 8001208:	d801      	bhi.n	800120e <I2C_WaitOnFlagUntilTimeout+0x42>
 800120a:	2f00      	cmp	r7, #0
 800120c:	d1e7      	bne.n	80011de <I2C_WaitOnFlagUntilTimeout+0x12>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800120e:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8001210:	2220      	movs	r2, #32
        __HAL_UNLOCK(hi2c);
 8001212:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001214:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001216:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800121a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800121e:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001220:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001224:	f042 0220 	orr.w	r2, r2, #32
 8001228:	6422      	str	r2, [r4, #64]	; 0x40
}
 800122a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800122e <I2C_WaitOnTXEFlagUntilTimeout>:
{
 800122e:	b570      	push	{r4, r5, r6, lr}
 8001230:	4604      	mov	r4, r0
 8001232:	460d      	mov	r5, r1
 8001234:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001236:	6823      	ldr	r3, [r4, #0]
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	061b      	lsls	r3, r3, #24
 800123c:	d501      	bpl.n	8001242 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 800123e:	2000      	movs	r0, #0
}
 8001240:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001242:	4620      	mov	r0, r4
 8001244:	f7ff ff49 	bl	80010da <I2C_IsAcknowledgeFailed>
 8001248:	b9a8      	cbnz	r0, 8001276 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 800124a:	1c6a      	adds	r2, r5, #1
 800124c:	d0f3      	beq.n	8001236 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800124e:	f7ff fdd7 	bl	8000e00 <HAL_GetTick>
 8001252:	1b80      	subs	r0, r0, r6
 8001254:	42a8      	cmp	r0, r5
 8001256:	d801      	bhi.n	800125c <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001258:	2d00      	cmp	r5, #0
 800125a:	d1ec      	bne.n	8001236 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800125c:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800125e:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001260:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001262:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001266:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800126a:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800126c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001270:	f042 0220 	orr.w	r2, r2, #32
 8001274:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001276:	2001      	movs	r0, #1
 8001278:	e7e2      	b.n	8001240 <I2C_WaitOnTXEFlagUntilTimeout+0x12>
	...

0800127c <I2C_RequestMemoryWrite>:
{
 800127c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001280:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001282:	6802      	ldr	r2, [r0, #0]
{
 8001284:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001286:	6813      	ldr	r3, [r2, #0]
{
 8001288:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800128a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800128e:	6013      	str	r3, [r2, #0]
{
 8001290:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001292:	9600      	str	r6, [sp, #0]
 8001294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001296:	2200      	movs	r2, #0
 8001298:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 800129c:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800129e:	f7ff ff95 	bl	80011cc <I2C_WaitOnFlagUntilTimeout>
 80012a2:	b118      	cbz	r0, 80012ac <I2C_RequestMemoryWrite+0x30>
      return HAL_ERROR;
 80012a4:	2001      	movs	r0, #1
}
 80012a6:	b004      	add	sp, #16
 80012a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80012ac:	6823      	ldr	r3, [r4, #0]
 80012ae:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 80012b2:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80012b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80012b6:	4633      	mov	r3, r6
 80012b8:	4916      	ldr	r1, [pc, #88]	; (8001314 <I2C_RequestMemoryWrite+0x98>)
 80012ba:	4620      	mov	r0, r4
 80012bc:	f7ff ff26 	bl	800110c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80012c0:	2800      	cmp	r0, #0
 80012c2:	d1ef      	bne.n	80012a4 <I2C_RequestMemoryWrite+0x28>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012c4:	6823      	ldr	r3, [r4, #0]
 80012c6:	9003      	str	r0, [sp, #12]
 80012c8:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80012ca:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012cc:	9203      	str	r2, [sp, #12]
 80012ce:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80012d0:	4632      	mov	r2, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012d2:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80012d4:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012d6:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80012d8:	f7ff ffa9 	bl	800122e <I2C_WaitOnTXEFlagUntilTimeout>
 80012dc:	b140      	cbz	r0, 80012f0 <I2C_RequestMemoryWrite+0x74>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80012de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012e0:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012e2:	bf01      	itttt	eq
 80012e4:	6822      	ldreq	r2, [r4, #0]
 80012e6:	6813      	ldreq	r3, [r2, #0]
 80012e8:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80012ec:	6013      	streq	r3, [r2, #0]
 80012ee:	e7d9      	b.n	80012a4 <I2C_RequestMemoryWrite+0x28>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80012f0:	f1b8 0f01 	cmp.w	r8, #1
 80012f4:	6823      	ldr	r3, [r4, #0]
 80012f6:	d102      	bne.n	80012fe <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80012f8:	b2ed      	uxtb	r5, r5
 80012fa:	611d      	str	r5, [r3, #16]
 80012fc:	e7d3      	b.n	80012a6 <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80012fe:	0a2a      	lsrs	r2, r5, #8
 8001300:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001302:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001304:	4632      	mov	r2, r6
 8001306:	4620      	mov	r0, r4
 8001308:	f7ff ff91 	bl	800122e <I2C_WaitOnTXEFlagUntilTimeout>
 800130c:	2800      	cmp	r0, #0
 800130e:	d1e6      	bne.n	80012de <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001310:	6823      	ldr	r3, [r4, #0]
 8001312:	e7f1      	b.n	80012f8 <I2C_RequestMemoryWrite+0x7c>
 8001314:	00010002 	.word	0x00010002

08001318 <HAL_I2C_Init>:
{
 8001318:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 800131a:	4604      	mov	r4, r0
 800131c:	b908      	cbnz	r0, 8001322 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800131e:	2001      	movs	r0, #1
}
 8001320:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001322:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001326:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800132a:	b91b      	cbnz	r3, 8001334 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 800132c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001330:	f7ff fba6 	bl	8000a80 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001334:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8001336:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001338:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800133c:	6813      	ldr	r3, [r2, #0]
 800133e:	f023 0301 	bic.w	r3, r3, #1
 8001342:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001344:	f000 ff58 	bl	80021f8 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001348:	6863      	ldr	r3, [r4, #4]
 800134a:	4a41      	ldr	r2, [pc, #260]	; (8001450 <HAL_I2C_Init+0x138>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d84d      	bhi.n	80013ec <HAL_I2C_Init+0xd4>
 8001350:	4a40      	ldr	r2, [pc, #256]	; (8001454 <HAL_I2C_Init+0x13c>)
 8001352:	4290      	cmp	r0, r2
 8001354:	d9e3      	bls.n	800131e <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001356:	4940      	ldr	r1, [pc, #256]	; (8001458 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001358:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800135a:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800135e:	6855      	ldr	r5, [r2, #4]
 8001360:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8001364:	430d      	orrs	r5, r1
 8001366:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001368:	6a15      	ldr	r5, [r2, #32]
 800136a:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800136e:	3101      	adds	r1, #1
 8001370:	4329      	orrs	r1, r5
 8001372:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001374:	69d1      	ldr	r1, [r2, #28]
 8001376:	4d36      	ldr	r5, [pc, #216]	; (8001450 <HAL_I2C_Init+0x138>)
 8001378:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800137c:	42ab      	cmp	r3, r5
 800137e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001382:	f100 30ff 	add.w	r0, r0, #4294967295
 8001386:	d848      	bhi.n	800141a <HAL_I2C_Init+0x102>
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	fbb0 f0f3 	udiv	r0, r0, r3
 800138e:	1c43      	adds	r3, r0, #1
 8001390:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001394:	2b04      	cmp	r3, #4
 8001396:	bf38      	it	cc
 8001398:	2304      	movcc	r3, #4
 800139a:	430b      	orrs	r3, r1
 800139c:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800139e:	6811      	ldr	r1, [r2, #0]
 80013a0:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80013a4:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80013a8:	4303      	orrs	r3, r0
 80013aa:	430b      	orrs	r3, r1
 80013ac:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80013ae:	6891      	ldr	r1, [r2, #8]
 80013b0:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80013b4:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80013b8:	4303      	orrs	r3, r0
 80013ba:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80013be:	430b      	orrs	r3, r1
 80013c0:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80013c2:	68d1      	ldr	r1, [r2, #12]
 80013c4:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80013c8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80013cc:	4303      	orrs	r3, r0
 80013ce:	430b      	orrs	r3, r1
 80013d0:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80013d2:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013d4:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80013dc:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013de:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80013e0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80013e4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013e6:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80013ea:	e799      	b.n	8001320 <HAL_I2C_Init+0x8>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013ec:	4a1b      	ldr	r2, [pc, #108]	; (800145c <HAL_I2C_Init+0x144>)
 80013ee:	4290      	cmp	r0, r2
 80013f0:	d995      	bls.n	800131e <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80013f2:	4e19      	ldr	r6, [pc, #100]	; (8001458 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013f4:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 80013f8:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013fc:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013fe:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001400:	6855      	ldr	r5, [r2, #4]
 8001402:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8001406:	4335      	orrs	r5, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001408:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800140c:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800140e:	6a15      	ldr	r5, [r2, #32]
 8001410:	fbb1 f1f6 	udiv	r1, r1, r6
 8001414:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8001418:	e7a9      	b.n	800136e <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800141a:	68a5      	ldr	r5, [r4, #8]
 800141c:	b955      	cbnz	r5, 8001434 <HAL_I2C_Init+0x11c>
 800141e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001422:	fbb0 f0f3 	udiv	r0, r0, r3
 8001426:	1c43      	adds	r3, r0, #1
 8001428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800142c:	b16b      	cbz	r3, 800144a <HAL_I2C_Init+0x132>
 800142e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001432:	e7b2      	b.n	800139a <HAL_I2C_Init+0x82>
 8001434:	2519      	movs	r5, #25
 8001436:	436b      	muls	r3, r5
 8001438:	fbb0 f0f3 	udiv	r0, r0, r3
 800143c:	1c43      	adds	r3, r0, #1
 800143e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001442:	b113      	cbz	r3, 800144a <HAL_I2C_Init+0x132>
 8001444:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001448:	e7a7      	b.n	800139a <HAL_I2C_Init+0x82>
 800144a:	2301      	movs	r3, #1
 800144c:	e7a5      	b.n	800139a <HAL_I2C_Init+0x82>
 800144e:	bf00      	nop
 8001450:	000186a0 	.word	0x000186a0
 8001454:	001e847f 	.word	0x001e847f
 8001458:	000f4240 	.word	0x000f4240
 800145c:	003d08ff 	.word	0x003d08ff

08001460 <HAL_I2C_Mem_Write>:
{
 8001460:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001464:	4604      	mov	r4, r0
 8001466:	4699      	mov	r9, r3
 8001468:	460f      	mov	r7, r1
 800146a:	4690      	mov	r8, r2
 800146c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 800146e:	f7ff fcc7 	bl	8000e00 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001472:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8001476:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001478:	2b20      	cmp	r3, #32
 800147a:	d003      	beq.n	8001484 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 800147c:	2002      	movs	r0, #2
}
 800147e:	b003      	add	sp, #12
 8001480:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001484:	9000      	str	r0, [sp, #0]
 8001486:	2319      	movs	r3, #25
 8001488:	2201      	movs	r2, #1
 800148a:	493b      	ldr	r1, [pc, #236]	; (8001578 <HAL_I2C_Mem_Write+0x118>)
 800148c:	4620      	mov	r0, r4
 800148e:	f7ff fe9d 	bl	80011cc <I2C_WaitOnFlagUntilTimeout>
 8001492:	2800      	cmp	r0, #0
 8001494:	d1f2      	bne.n	800147c <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8001496:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800149a:	2b01      	cmp	r3, #1
 800149c:	d0ee      	beq.n	800147c <HAL_I2C_Mem_Write+0x1c>
 800149e:	2301      	movs	r3, #1
 80014a0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014a4:	6823      	ldr	r3, [r4, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80014a6:	4620      	mov	r0, r4
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	07d1      	lsls	r1, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80014ac:	bf58      	it	pl
 80014ae:	681a      	ldrpl	r2, [r3, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80014b0:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 80014b2:	bf5c      	itt	pl
 80014b4:	f042 0201 	orrpl.w	r2, r2, #1
 80014b8:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014c0:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80014c2:	2321      	movs	r3, #33	; 0x21
 80014c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80014c8:	2340      	movs	r3, #64	; 0x40
 80014ca:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80014d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80014d4:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->pBuffPtr    = pData;
 80014d8:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80014da:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80014de:	4642      	mov	r2, r8
    hi2c->XferCount   = Size;
 80014e0:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80014e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80014e4:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80014e6:	4b25      	ldr	r3, [pc, #148]	; (800157c <HAL_I2C_Mem_Write+0x11c>)
 80014e8:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80014ea:	464b      	mov	r3, r9
 80014ec:	f7ff fec6 	bl	800127c <I2C_RequestMemoryWrite>
 80014f0:	2800      	cmp	r0, #0
 80014f2:	d02a      	beq.n	800154a <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 80014f4:	2001      	movs	r0, #1
 80014f6:	e7c2      	b.n	800147e <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014f8:	f7ff fe99 	bl	800122e <I2C_WaitOnTXEFlagUntilTimeout>
 80014fc:	b140      	cbz	r0, 8001510 <HAL_I2C_Mem_Write+0xb0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001500:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001502:	bf01      	itttt	eq
 8001504:	6822      	ldreq	r2, [r4, #0]
 8001506:	6813      	ldreq	r3, [r2, #0]
 8001508:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 800150c:	6013      	streq	r3, [r2, #0]
 800150e:	e7f1      	b.n	80014f4 <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001510:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001512:	6827      	ldr	r7, [r4, #0]
 8001514:	461a      	mov	r2, r3
 8001516:	f812 1b01 	ldrb.w	r1, [r2], #1
 800151a:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 800151c:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800151e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001520:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001522:	3a01      	subs	r2, #1
 8001524:	b292      	uxth	r2, r2
 8001526:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001528:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 800152a:	1e48      	subs	r0, r1, #1
 800152c:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800152e:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8001530:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001532:	d50a      	bpl.n	800154a <HAL_I2C_Mem_Write+0xea>
 8001534:	b148      	cbz	r0, 800154a <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001536:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 8001538:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800153a:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 800153c:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800153e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001540:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8001542:	3b01      	subs	r3, #1
 8001544:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8001546:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001548:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800154a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800154c:	462a      	mov	r2, r5
 800154e:	4631      	mov	r1, r6
 8001550:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1d0      	bne.n	80014f8 <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001556:	f7ff fe13 	bl	8001180 <I2C_WaitOnBTFFlagUntilTimeout>
 800155a:	2800      	cmp	r0, #0
 800155c:	d1cf      	bne.n	80014fe <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800155e:	6822      	ldr	r2, [r4, #0]
 8001560:	6813      	ldr	r3, [r2, #0]
 8001562:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001566:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001568:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 800156a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 800156e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001572:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8001576:	e782      	b.n	800147e <HAL_I2C_Mem_Write+0x1e>
 8001578:	00100002 	.word	0x00100002
 800157c:	ffff0000 	.word	0xffff0000

08001580 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001580:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001582:	4604      	mov	r4, r0
{
 8001584:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8001586:	b310      	cbz	r0, 80015ce <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001588:	f890 3229 	ldrb.w	r3, [r0, #553]	; 0x229
 800158c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001590:	b91b      	cbnz	r3, 800159a <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001592:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001596:	f004 f8dd 	bl	8005754 <HAL_PCD_MspInit>
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800159a:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 800159c:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800159e:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 80015a0:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 80015a4:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  __HAL_PCD_DISABLE(hpcd);
 80015a8:	f001 f90d 	bl	80027c6 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ae:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80015b0:	682b      	ldr	r3, [r5, #0]
 80015b2:	4625      	mov	r5, r4
 80015b4:	6033      	str	r3, [r6, #0]
 80015b6:	1d27      	adds	r7, r4, #4
 80015b8:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80015bc:	f855 0b10 	ldr.w	r0, [r5], #16
 80015c0:	f001 f8f2 	bl	80027a8 <USB_CoreInit>
 80015c4:	4606      	mov	r6, r0
 80015c6:	b120      	cbz	r0, 80015d2 <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015c8:	2302      	movs	r3, #2
 80015ca:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
    return HAL_ERROR;
 80015ce:	2501      	movs	r5, #1
 80015d0:	e048      	b.n	8001664 <HAL_PCD_Init+0xe4>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80015d2:	4601      	mov	r1, r0
 80015d4:	6820      	ldr	r0, [r4, #0]
 80015d6:	f001 f900 	bl	80027da <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015da:	4630      	mov	r0, r6
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015dc:	f04f 0c01 	mov.w	ip, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015e0:	6861      	ldr	r1, [r4, #4]
 80015e2:	b2c3      	uxtb	r3, r0
 80015e4:	4299      	cmp	r1, r3
 80015e6:	f100 0001 	add.w	r0, r0, #1
 80015ea:	d817      	bhi.n	800161c <HAL_PCD_Init+0x9c>
 80015ec:	2200      	movs	r2, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015ee:	4610      	mov	r0, r2
 80015f0:	b2d3      	uxtb	r3, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015f2:	4299      	cmp	r1, r3
 80015f4:	f102 0201 	add.w	r2, r2, #1
 80015f8:	d81d      	bhi.n	8001636 <HAL_PCD_Init+0xb6>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015fc:	466e      	mov	r6, sp
 80015fe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001600:	682b      	ldr	r3, [r5, #0]
 8001602:	6033      	str	r3, [r6, #0]
 8001604:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001608:	6820      	ldr	r0, [r4, #0]
 800160a:	f001 f8e8 	bl	80027de <USB_DevInit>
 800160e:	2301      	movs	r3, #1
 8001610:	4605      	mov	r5, r0
 8001612:	b300      	cbz	r0, 8001656 <HAL_PCD_Init+0xd6>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001614:	2202      	movs	r2, #2
 8001616:	f884 2229 	strb.w	r2, [r4, #553]	; 0x229
 800161a:	e7d8      	b.n	80015ce <HAL_PCD_Init+0x4e>
    hpcd->IN_ep[i].is_in = 1U;
 800161c:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8001620:	f882 c029 	strb.w	ip, [r2, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8001624:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001628:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800162a:	f882 602b 	strb.w	r6, [r2, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_buff = 0U;
 800162e:	e9c2 660e 	strd	r6, r6, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_len = 0U;
 8001632:	6416      	str	r6, [r2, #64]	; 0x40
 8001634:	e7d5      	b.n	80015e2 <HAL_PCD_Init+0x62>
    hpcd->OUT_ep[i].is_in = 0U;
 8001636:	eb04 1643 	add.w	r6, r4, r3, lsl #5
    hpcd->OUT_ep[i].num = i;
 800163a:	f886 3128 	strb.w	r3, [r6, #296]	; 0x128
    hpcd->OUT_ep[i].xfer_len = 0U;
 800163e:	330a      	adds	r3, #10
 8001640:	015b      	lsls	r3, r3, #5
    hpcd->OUT_ep[i].is_in = 0U;
 8001642:	f886 0129 	strb.w	r0, [r6, #297]	; 0x129
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001646:	f886 012b 	strb.w	r0, [r6, #299]	; 0x12b
    hpcd->OUT_ep[i].maxpacket = 0U;
 800164a:	f8c6 0138 	str.w	r0, [r6, #312]	; 0x138
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800164e:	f8c6 013c 	str.w	r0, [r6, #316]	; 0x13c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001652:	50e0      	str	r0, [r4, r3]
 8001654:	e7cc      	b.n	80015f0 <HAL_PCD_Init+0x70>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 8001656:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800165a:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 800165e:	6820      	ldr	r0, [r4, #0]
 8001660:	f001 fb5f 	bl	8002d22 <USB_DevDisconnect>

  return HAL_OK;
}
 8001664:	4628      	mov	r0, r5
 8001666:	b007      	add	sp, #28
 8001668:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800166a <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 800166a:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
{
 800166e:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8001670:	2b01      	cmp	r3, #1
{
 8001672:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001674:	d00e      	beq.n	8001694 <HAL_PCD_Start+0x2a>
 8001676:	2101      	movs	r1, #1
 8001678:	f880 1228 	strb.w	r1, [r0, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800167c:	f004 f997 	bl	80059ae <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8001680:	6820      	ldr	r0, [r4, #0]
 8001682:	f001 fb4c 	bl	8002d1e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001686:	6820      	ldr	r0, [r4, #0]
 8001688:	f001 f895 	bl	80027b6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800168c:	2000      	movs	r0, #0
 800168e:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 8001692:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001694:	2002      	movs	r0, #2
 8001696:	e7fc      	b.n	8001692 <HAL_PCD_Start+0x28>

08001698 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8001698:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
{
 800169c:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800169e:	2a01      	cmp	r2, #1
{
 80016a0:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80016a2:	d00b      	beq.n	80016bc <HAL_PCD_SetAddress+0x24>
 80016a4:	2201      	movs	r2, #1
 80016a6:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228
  hpcd->USB_Address = address;
 80016aa:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80016ae:	6800      	ldr	r0, [r0, #0]
 80016b0:	f001 fb2f 	bl	8002d12 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80016b4:	2000      	movs	r0, #0
 80016b6:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 80016ba:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80016bc:	2002      	movs	r0, #2
 80016be:	e7fc      	b.n	80016ba <HAL_PCD_SetAddress+0x22>

080016c0 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80016c0:	b570      	push	{r4, r5, r6, lr}
 80016c2:	4604      	mov	r4, r0
 80016c4:	f001 0507 	and.w	r5, r1, #7
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80016c8:	f011 0f80 	tst.w	r1, #128	; 0x80
 80016cc:	ea4f 1045 	mov.w	r0, r5, lsl #5
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016d0:	bf14      	ite	ne
 80016d2:	f100 0128 	addne.w	r1, r0, #40	; 0x28
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016d6:	f500 7194 	addeq.w	r1, r0, #296	; 0x128
 80016da:	eb04 0600 	add.w	r6, r4, r0
    ep->is_in = 1U;
 80016de:	bf17      	itett	ne
 80016e0:	2001      	movne	r0, #1
    ep->is_in = 0U;
 80016e2:	2000      	moveq	r0, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016e4:	1909      	addne	r1, r1, r4
    ep->is_in = 1U;
 80016e6:	f886 0029 	strbne.w	r0, [r6, #41]	; 0x29
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016ea:	bf04      	itt	eq
 80016ec:	1909      	addeq	r1, r1, r4
    ep->is_in = 0U;
 80016ee:	f886 0129 	strbeq.w	r0, [r6, #297]	; 0x129
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = ep_mps;
 80016f2:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;

  if (ep->is_in != 0U)
 80016f4:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016f6:	700d      	strb	r5, [r1, #0]
  ep->type = ep_type;
 80016f8:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80016fa:	b102      	cbz	r2, 80016fe <HAL_PCD_EP_Open+0x3e>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80016fc:	81cd      	strh	r5, [r1, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80016fe:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 8001700:	bf04      	itt	eq
 8001702:	2300      	moveq	r3, #0
 8001704:	710b      	strbeq	r3, [r1, #4]
  }

  __HAL_LOCK(hpcd);
 8001706:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 800170a:	2b01      	cmp	r3, #1
 800170c:	d009      	beq.n	8001722 <HAL_PCD_EP_Open+0x62>
 800170e:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001710:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001712:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001716:	f001 f87d 	bl	8002814 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800171a:	2000      	movs	r0, #0
 800171c:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228

  return ret;
}
 8001720:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8001722:	2002      	movs	r0, #2
 8001724:	e7fc      	b.n	8001720 <HAL_PCD_EP_Open+0x60>

08001726 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001726:	f001 0207 	and.w	r2, r1, #7
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800172a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800172e:	ea4f 1342 	mov.w	r3, r2, lsl #5
{
 8001732:	b510      	push	{r4, lr}
 8001734:	4604      	mov	r4, r0
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001736:	bf18      	it	ne
 8001738:	f103 0128 	addne.w	r1, r3, #40	; 0x28
 800173c:	4418      	add	r0, r3
    ep->is_in = 1U;
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800173e:	bf0b      	itete	eq
 8001740:	f503 7194 	addeq.w	r1, r3, #296	; 0x128
    ep->is_in = 1U;
 8001744:	2301      	movne	r3, #1
    ep->is_in = 0U;
 8001746:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001748:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800174a:	bf0a      	itet	eq
 800174c:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 800174e:	f880 3029 	strbne.w	r3, [r0, #41]	; 0x29
    ep->is_in = 0U;
 8001752:	f880 3129 	strbeq.w	r3, [r0, #297]	; 0x129
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001756:	700a      	strb	r2, [r1, #0]

  __HAL_LOCK(hpcd);
 8001758:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 800175c:	2b01      	cmp	r3, #1
 800175e:	d009      	beq.n	8001774 <HAL_PCD_EP_Close+0x4e>
 8001760:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001762:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001764:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001768:	f001 f9ae 	bl	8002ac8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800176c:	2000      	movs	r0, #0
 800176e:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
}
 8001772:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001774:	2002      	movs	r0, #2
 8001776:	e7fc      	b.n	8001772 <HAL_PCD_EP_Close+0x4c>

08001778 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001778:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 800177a:	2600      	movs	r6, #0
 800177c:	f001 0107 	and.w	r1, r1, #7
 8001780:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;
 8001782:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & EP_ADDR_MSK;
 8001784:	f884 1128 	strb.w	r1, [r4, #296]	; 0x128
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001788:	f505 7194 	add.w	r1, r5, #296	; 0x128
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800178c:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 800178e:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
  ep->xfer_len = len;
 8001792:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
  ep->xfer_count = 0U;
 8001796:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
  ep->is_in = 0U;
 800179a:	f884 6129 	strb.w	r6, [r4, #297]	; 0x129
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800179e:	6800      	ldr	r0, [r0, #0]
 80017a0:	f001 fad6 	bl	8002d50 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80017a4:	4630      	mov	r0, r6
 80017a6:	bd70      	pop	{r4, r5, r6, pc}

080017a8 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80017a8:	f001 0107 	and.w	r1, r1, #7
 80017ac:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 80017b0:	f8d1 0144 	ldr.w	r0, [r1, #324]	; 0x144
 80017b4:	4770      	bx	lr

080017b6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80017b6:	f001 0107 	and.w	r1, r1, #7
 80017ba:	b570      	push	{r4, r5, r6, lr}
 80017bc:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80017be:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 80017c0:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 80017c4:	2600      	movs	r6, #0
  ep->is_in = 1U;
 80017c6:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80017c8:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017cc:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017d0:	4401      	add	r1, r0
  ep->xfer_count = 0U;
 80017d2:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 80017d4:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017d8:	6800      	ldr	r0, [r0, #0]
 80017da:	f001 fab9 	bl	8002d50 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80017de:	4630      	mov	r0, r6
 80017e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080017e4 <HAL_PCD_IRQHandler>:
{
 80017e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017e8:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80017ea:	6800      	ldr	r0, [r0, #0]
 80017ec:	f001 fa9b 	bl	8002d26 <USB_ReadInterrupts>
 80017f0:	0402      	lsls	r2, r0, #16
 80017f2:	d50b      	bpl.n	800180c <HAL_PCD_IRQHandler+0x28>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80017f4:	f8df 940c 	ldr.w	r9, [pc, #1036]	; 8001c04 <HAL_PCD_IRQHandler+0x420>
 80017f8:	f8df a40c 	ldr.w	sl, [pc, #1036]	; 8001c08 <HAL_PCD_IRQHandler+0x424>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80017fc:	f8df b40c 	ldr.w	fp, [pc, #1036]	; 8001c0c <HAL_PCD_IRQHandler+0x428>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001800:	6820      	ldr	r0, [r4, #0]
 8001802:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001806:	041b      	lsls	r3, r3, #16
 8001808:	f100 809e 	bmi.w	8001948 <HAL_PCD_IRQHandler+0x164>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800180c:	6820      	ldr	r0, [r4, #0]
 800180e:	f001 fa8a 	bl	8002d26 <USB_ReadInterrupts>
 8001812:	0543      	lsls	r3, r0, #21
 8001814:	d50f      	bpl.n	8001836 <HAL_PCD_IRQHandler+0x52>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001816:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8001818:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800181a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800181e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001822:	041b      	lsls	r3, r3, #16
 8001824:	0c1b      	lsrs	r3, r3, #16
 8001826:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 800182a:	f003 ffcc 	bl	80057c6 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800182e:	2100      	movs	r1, #0
 8001830:	4620      	mov	r0, r4
 8001832:	f7ff ff31 	bl	8001698 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001836:	6820      	ldr	r0, [r4, #0]
 8001838:	f001 fa75 	bl	8002d26 <USB_ReadInterrupts>
 800183c:	0447      	lsls	r7, r0, #17
 800183e:	d508      	bpl.n	8001852 <HAL_PCD_IRQHandler+0x6e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001840:	6822      	ldr	r2, [r4, #0]
 8001842:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001846:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800184a:	041b      	lsls	r3, r3, #16
 800184c:	0c1b      	lsrs	r3, r3, #16
 800184e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001852:	6820      	ldr	r0, [r4, #0]
 8001854:	f001 fa67 	bl	8002d26 <USB_ReadInterrupts>
 8001858:	0486      	lsls	r6, r0, #18
 800185a:	d508      	bpl.n	800186e <HAL_PCD_IRQHandler+0x8a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800185c:	6822      	ldr	r2, [r4, #0]
 800185e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001862:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001866:	041b      	lsls	r3, r3, #16
 8001868:	0c1b      	lsrs	r3, r3, #16
 800186a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800186e:	6820      	ldr	r0, [r4, #0]
 8001870:	f001 fa59 	bl	8002d26 <USB_ReadInterrupts>
 8001874:	04c5      	lsls	r5, r0, #19
 8001876:	d51c      	bpl.n	80018b2 <HAL_PCD_IRQHandler+0xce>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001878:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 800187a:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800187c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001880:	f023 0304 	bic.w	r3, r3, #4
 8001884:	041b      	lsls	r3, r3, #16
 8001886:	0c1b      	lsrs	r3, r3, #16
 8001888:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800188c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001890:	f023 0308 	bic.w	r3, r3, #8
 8001894:	041b      	lsls	r3, r3, #16
 8001896:	0c1b      	lsrs	r3, r3, #16
 8001898:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 800189c:	f003 ffb6 	bl	800580c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80018a0:	6822      	ldr	r2, [r4, #0]
 80018a2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80018a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018aa:	041b      	lsls	r3, r3, #16
 80018ac:	0c1b      	lsrs	r3, r3, #16
 80018ae:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80018b2:	6820      	ldr	r0, [r4, #0]
 80018b4:	f001 fa37 	bl	8002d26 <USB_ReadInterrupts>
 80018b8:	0500      	lsls	r0, r0, #20
 80018ba:	d524      	bpl.n	8001906 <HAL_PCD_IRQHandler+0x122>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80018bc:	6820      	ldr	r0, [r4, #0]
 80018be:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80018c2:	f043 0308 	orr.w	r3, r3, #8
 80018c6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80018ca:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80018ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80018d2:	041b      	lsls	r3, r3, #16
 80018d4:	0c1b      	lsrs	r3, r3, #16
 80018d6:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80018da:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80018de:	f043 0304 	orr.w	r3, r3, #4
 80018e2:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80018e6:	f001 fa1e 	bl	8002d26 <USB_ReadInterrupts>
 80018ea:	04c1      	lsls	r1, r0, #19
 80018ec:	d508      	bpl.n	8001900 <HAL_PCD_IRQHandler+0x11c>
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80018ee:	6822      	ldr	r2, [r4, #0]
 80018f0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80018f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018f8:	041b      	lsls	r3, r3, #16
 80018fa:	0c1b      	lsrs	r3, r3, #16
 80018fc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SuspendCallback(hpcd);
 8001900:	4620      	mov	r0, r4
 8001902:	f003 ff73 	bl	80057ec <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001906:	6820      	ldr	r0, [r4, #0]
 8001908:	f001 fa0d 	bl	8002d26 <USB_ReadInterrupts>
 800190c:	0582      	lsls	r2, r0, #22
 800190e:	d50b      	bpl.n	8001928 <HAL_PCD_IRQHandler+0x144>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001910:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8001912:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001914:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001918:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800191c:	041b      	lsls	r3, r3, #16
 800191e:	0c1b      	lsrs	r3, r3, #16
 8001920:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001924:	f003 ff4b 	bl	80057be <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001928:	6820      	ldr	r0, [r4, #0]
 800192a:	f001 f9fc 	bl	8002d26 <USB_ReadInterrupts>
 800192e:	05c3      	lsls	r3, r0, #23
 8001930:	d508      	bpl.n	8001944 <HAL_PCD_IRQHandler+0x160>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001932:	6822      	ldr	r2, [r4, #0]
 8001934:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001938:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800193c:	041b      	lsls	r3, r3, #16
 800193e:	0c1b      	lsrs	r3, r3, #16
 8001940:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8001944:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8001948:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
 800194c:	b289      	uxth	r1, r1
    if (epindex == 0U)
 800194e:	f011 060f 	ands.w	r6, r1, #15
 8001952:	f040 80b1 	bne.w	8001ab8 <HAL_PCD_IRQHandler+0x2d4>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001956:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800195a:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800195c:	d12a      	bne.n	80019b4 <HAL_PCD_IRQHandler+0x1d0>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800195e:	ea09 0303 	and.w	r3, r9, r3
 8001962:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001966:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001968:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800196c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8001970:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001974:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8001978:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 800197c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800197e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001982:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8001984:	4413      	add	r3, r2
 8001986:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001988:	4620      	mov	r0, r4
 800198a:	f003 ff11 	bl	80057b0 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800198e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001992:	2b00      	cmp	r3, #0
 8001994:	f43f af34 	beq.w	8001800 <HAL_PCD_IRQHandler+0x1c>
 8001998:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800199a:	2a00      	cmp	r2, #0
 800199c:	f47f af30 	bne.w	8001800 <HAL_PCD_IRQHandler+0x1c>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80019a0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80019a4:	6821      	ldr	r1, [r4, #0]
 80019a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019aa:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80019ae:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 80019b2:	e725      	b.n	8001800 <HAL_PCD_IRQHandler+0x1c>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80019b4:	b29b      	uxth	r3, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80019b6:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
 80019ba:	d020      	beq.n	80019fe <HAL_PCD_IRQHandler+0x21a>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019bc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80019c0:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80019c4:	f504 710c 	add.w	r1, r4, #560	; 0x230
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80019cc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80019d0:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80019d4:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 80019d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019dc:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80019e0:	f001 fa8a 	bl	8002ef8 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019e4:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80019e6:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019e8:	8813      	ldrh	r3, [r2, #0]
 80019ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019ee:	051b      	lsls	r3, r3, #20
 80019f0:	0d1b      	lsrs	r3, r3, #20
 80019f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019f6:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80019f8:	f003 fecc 	bl	8005794 <HAL_PCD_SetupStageCallback>
 80019fc:	e700      	b.n	8001800 <HAL_PCD_IRQHandler+0x1c>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80019fe:	041f      	lsls	r7, r3, #16
 8001a00:	f57f aefe 	bpl.w	8001800 <HAL_PCD_IRQHandler+0x1c>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a04:	8803      	ldrh	r3, [r0, #0]
 8001a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a0a:	051b      	lsls	r3, r3, #20
 8001a0c:	0d1b      	lsrs	r3, r3, #20
 8001a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a12:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a14:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001a18:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 8001a1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001a20:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001a24:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8001a28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a2c:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001a30:	b18b      	cbz	r3, 8001a56 <HAL_PCD_IRQHandler+0x272>
 8001a32:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 8001a36:	b171      	cbz	r1, 8001a56 <HAL_PCD_IRQHandler+0x272>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a38:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 8001a3c:	f001 fa5c 	bl	8002ef8 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8001a40:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 8001a44:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001a48:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8001a4a:	4413      	add	r3, r2
 8001a4c:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001a50:	4620      	mov	r0, r4
 8001a52:	f003 fea5 	bl	80057a0 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001a56:	6821      	ldr	r1, [r4, #0]
 8001a58:	f8d4 5138 	ldr.w	r5, [r4, #312]	; 0x138
 8001a5c:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8001a60:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	b9bd      	cbnz	r5, 8001a98 <HAL_PCD_IRQHandler+0x2b4>
 8001a68:	5ac2      	ldrh	r2, [r0, r3]
 8001a6a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8001a6e:	0412      	lsls	r2, r2, #16
 8001a70:	0c12      	lsrs	r2, r2, #16
 8001a72:	52c2      	strh	r2, [r0, r3]
 8001a74:	5ac2      	ldrh	r2, [r0, r3]
 8001a76:	ea4a 0202 	orr.w	r2, sl, r2
 8001a7a:	b292      	uxth	r2, r2
 8001a7c:	52c2      	strh	r2, [r0, r3]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001a7e:	880b      	ldrh	r3, [r1, #0]
 8001a80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a88:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001a8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a94:	800b      	strh	r3, [r1, #0]
 8001a96:	e6b3      	b.n	8001800 <HAL_PCD_IRQHandler+0x1c>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001a98:	2d3e      	cmp	r5, #62	; 0x3e
 8001a9a:	d805      	bhi.n	8001aa8 <HAL_PCD_IRQHandler+0x2c4>
 8001a9c:	086a      	lsrs	r2, r5, #1
 8001a9e:	07ee      	lsls	r6, r5, #31
 8001aa0:	bf48      	it	mi
 8001aa2:	3201      	addmi	r2, #1
 8001aa4:	0292      	lsls	r2, r2, #10
 8001aa6:	e7e8      	b.n	8001a7a <HAL_PCD_IRQHandler+0x296>
 8001aa8:	096a      	lsrs	r2, r5, #5
 8001aaa:	06ed      	lsls	r5, r5, #27
 8001aac:	bf08      	it	eq
 8001aae:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8001ab2:	ea4a 2282 	orr.w	r2, sl, r2, lsl #10
 8001ab6:	e7e0      	b.n	8001a7a <HAL_PCD_IRQHandler+0x296>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001ab8:	f830 8026 	ldrh.w	r8, [r0, r6, lsl #2]
 8001abc:	fa1f f888 	uxth.w	r8, r8
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ac0:	f418 4f00 	tst.w	r8, #32768	; 0x8000
 8001ac4:	d03c      	beq.n	8001b40 <HAL_PCD_IRQHandler+0x35c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001ac6:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8001aca:	0177      	lsls	r7, r6, #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ad0:	051b      	lsls	r3, r3, #20
 8001ad2:	0d1b      	lsrs	r3, r3, #20
 8001ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ad8:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8001adc:	19e1      	adds	r1, r4, r7
 8001ade:	f891 3134 	ldrb.w	r3, [r1, #308]	; 0x134
 8001ae2:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d150      	bne.n	8001b8c <HAL_PCD_IRQHandler+0x3a8>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001aea:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001aee:	f891 5128 	ldrb.w	r5, [r1, #296]	; 0x128
 8001af2:	3306      	adds	r3, #6
 8001af4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8001af8:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 8001afc:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 8001b00:	b135      	cbz	r5, 8001b10 <HAL_PCD_IRQHandler+0x32c>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001b02:	f8b1 212e 	ldrh.w	r2, [r1, #302]	; 0x12e
 8001b06:	462b      	mov	r3, r5
 8001b08:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 8001b0c:	f001 f9f4 	bl	8002ef8 <USB_ReadPMA>
 8001b10:	19e1      	adds	r1, r4, r7
        ep->xfer_count += count;
 8001b12:	f8d1 3144 	ldr.w	r3, [r1, #324]	; 0x144
        ep->xfer_buff += count;
 8001b16:	f8d1 213c 	ldr.w	r2, [r1, #316]	; 0x13c
        ep->xfer_count += count;
 8001b1a:	442b      	add	r3, r5
 8001b1c:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001b20:	f8d1 3140 	ldr.w	r3, [r1, #320]	; 0x140
        ep->xfer_buff += count;
 8001b24:	442a      	add	r2, r5
 8001b26:	f8c1 213c 	str.w	r2, [r1, #316]	; 0x13c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001b2a:	b11b      	cbz	r3, 8001b34 <HAL_PCD_IRQHandler+0x350>
 8001b2c:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
 8001b30:	4285      	cmp	r5, r0
 8001b32:	d25d      	bcs.n	8001bf0 <HAL_PCD_IRQHandler+0x40c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001b34:	4427      	add	r7, r4
 8001b36:	f897 1128 	ldrb.w	r1, [r7, #296]	; 0x128
 8001b3a:	4620      	mov	r0, r4
 8001b3c:	f003 fe30 	bl	80057a0 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001b40:	f018 0f80 	tst.w	r8, #128	; 0x80
 8001b44:	f43f ae5c 	beq.w	8001800 <HAL_PCD_IRQHandler+0x1c>
 8001b48:	6823      	ldr	r3, [r4, #0]
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001b4a:	4620      	mov	r0, r4
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001b4c:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 8001b50:	ea09 0202 	and.w	r2, r9, r2
 8001b54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b58:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b5c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8001b60:	eb04 1646 	add.w	r6, r4, r6, lsl #5
 8001b64:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8001b68:	3202      	adds	r2, #2
 8001b6a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8001b6e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8001b72:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff += ep->xfer_count;
 8001b76:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b78:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001b7c:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8001b7e:	441a      	add	r2, r3
        if (ep->xfer_len == 0U)
 8001b80:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 8001b82:	63f2      	str	r2, [r6, #60]	; 0x3c
        if (ep->xfer_len == 0U)
 8001b84:	bbd3      	cbnz	r3, 8001bfc <HAL_PCD_IRQHandler+0x418>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001b86:	f003 fe13 	bl	80057b0 <HAL_PCD_DataInStageCallback>
 8001b8a:	e639      	b.n	8001800 <HAL_PCD_IRQHandler+0x1c>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001b8c:	f891 3128 	ldrb.w	r3, [r1, #296]	; 0x128
 8001b90:	f830 5023 	ldrh.w	r5, [r0, r3, lsl #2]
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	f415 4f80 	tst.w	r5, #16384	; 0x4000
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b9a:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
 8001b9e:	442b      	add	r3, r5
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001ba0:	d01b      	beq.n	8001bda <HAL_PCD_IRQHandler+0x3f6>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ba2:	3302      	adds	r3, #2
 8001ba4:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 8001ba8:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8001bac:	b135      	cbz	r5, 8001bbc <HAL_PCD_IRQHandler+0x3d8>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001bae:	462b      	mov	r3, r5
 8001bb0:	f8b1 2130 	ldrh.w	r2, [r1, #304]	; 0x130
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001bb4:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 8001bb8:	f001 f99e 	bl	8002ef8 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001bbc:	19e3      	adds	r3, r4, r7
 8001bbe:	f893 1128 	ldrb.w	r1, [r3, #296]	; 0x128
 8001bc2:	6822      	ldr	r2, [r4, #0]
 8001bc4:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001bc8:	ea0b 0303 	and.w	r3, fp, r3
 8001bcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001bd4:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8001bd8:	e79a      	b.n	8001b10 <HAL_PCD_IRQHandler+0x32c>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001bda:	3306      	adds	r3, #6
 8001bdc:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 8001be0:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8001be4:	2d00      	cmp	r5, #0
 8001be6:	d0e9      	beq.n	8001bbc <HAL_PCD_IRQHandler+0x3d8>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001be8:	462b      	mov	r3, r5
 8001bea:	f8b1 2132 	ldrh.w	r2, [r1, #306]	; 0x132
 8001bee:	e7e1      	b.n	8001bb4 <HAL_PCD_IRQHandler+0x3d0>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001bf0:	f891 1128 	ldrb.w	r1, [r1, #296]	; 0x128
 8001bf4:	4620      	mov	r0, r4
 8001bf6:	f7ff fdbf 	bl	8001778 <HAL_PCD_EP_Receive>
 8001bfa:	e7a1      	b.n	8001b40 <HAL_PCD_IRQHandler+0x35c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001bfc:	f7ff fddb 	bl	80017b6 <HAL_PCD_EP_Transmit>
 8001c00:	e5fe      	b.n	8001800 <HAL_PCD_IRQHandler+0x1c>
 8001c02:	bf00      	nop
 8001c04:	ffff8f0f 	.word	0xffff8f0f
 8001c08:	ffff8000 	.word	0xffff8000
 8001c0c:	ffff8f8f 	.word	0xffff8f8f

08001c10 <HAL_PCD_EP_SetStall>:
{
 8001c10:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c12:	6843      	ldr	r3, [r0, #4]
 8001c14:	f001 0507 	and.w	r5, r1, #7
 8001c18:	429d      	cmp	r5, r3
{
 8001c1a:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c1c:	d828      	bhi.n	8001c70 <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 8001c1e:	060b      	lsls	r3, r1, #24
 8001c20:	d51d      	bpl.n	8001c5e <HAL_PCD_EP_SetStall+0x4e>
    ep->is_in = 1U;
 8001c22:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c24:	016b      	lsls	r3, r5, #5
 8001c26:	f103 0128 	add.w	r1, r3, #40	; 0x28
    ep->is_in = 1U;
 8001c2a:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c2c:	4401      	add	r1, r0
    ep->is_in = 1U;
 8001c2e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ep->is_stall = 1U;
 8001c32:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c34:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8001c36:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8001c38:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d019      	beq.n	8001c74 <HAL_PCD_EP_SetStall+0x64>
 8001c40:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001c44:	6820      	ldr	r0, [r4, #0]
 8001c46:	f001 f805 	bl	8002c54 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c4a:	b925      	cbnz	r5, 8001c56 <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001c4c:	f504 710c 	add.w	r1, r4, #560	; 0x230
 8001c50:	6820      	ldr	r0, [r4, #0]
 8001c52:	f001 f86b 	bl	8002d2c <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8001c56:	2000      	movs	r0, #0
 8001c58:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
}
 8001c5c:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8001c5e:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8001c60:	014b      	lsls	r3, r1, #5
 8001c62:	f503 7194 	add.w	r1, r3, #296	; 0x128
    ep->is_in = 0U;
 8001c66:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8001c68:	4401      	add	r1, r0
    ep->is_in = 0U;
 8001c6a:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 8001c6e:	e7e0      	b.n	8001c32 <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 8001c70:	2001      	movs	r0, #1
 8001c72:	e7f3      	b.n	8001c5c <HAL_PCD_EP_SetStall+0x4c>
  __HAL_LOCK(hpcd);
 8001c74:	2002      	movs	r0, #2
 8001c76:	e7f1      	b.n	8001c5c <HAL_PCD_EP_SetStall+0x4c>

08001c78 <HAL_PCD_EP_ClrStall>:
{
 8001c78:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c7a:	6843      	ldr	r3, [r0, #4]
 8001c7c:	f001 020f 	and.w	r2, r1, #15
 8001c80:	429a      	cmp	r2, r3
{
 8001c82:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c84:	d827      	bhi.n	8001cd6 <HAL_PCD_EP_ClrStall+0x5e>
 8001c86:	f001 0207 	and.w	r2, r1, #7
  if ((0x80U & ep_addr) == 0x80U)
 8001c8a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001c8e:	ea4f 1342 	mov.w	r3, r2, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c92:	bf14      	ite	ne
 8001c94:	f103 0128 	addne.w	r1, r3, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c98:	f503 7194 	addeq.w	r1, r3, #296	; 0x128
 8001c9c:	4418      	add	r0, r3
  ep->is_stall = 0U;
 8001c9e:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 8001ca2:	bf15      	itete	ne
 8001ca4:	2301      	movne	r3, #1
    ep->is_in = 0U;
 8001ca6:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ca8:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001caa:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 8001cac:	bf14      	ite	ne
 8001cae:	f880 3029 	strbne.w	r3, [r0, #41]	; 0x29
    ep->is_in = 0U;
 8001cb2:	f880 3129 	strbeq.w	r3, [r0, #297]	; 0x129
  ep->is_stall = 0U;
 8001cb6:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cb8:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8001cba:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d00b      	beq.n	8001cda <HAL_PCD_EP_ClrStall+0x62>
 8001cc2:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001cc4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001cc6:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001cca:	f000 ffdf 	bl	8002c8c <USB_EPClearStall>
  return HAL_OK;
 8001cce:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8001cd0:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228
}
 8001cd4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001cd6:	2001      	movs	r0, #1
 8001cd8:	e7fc      	b.n	8001cd4 <HAL_PCD_EP_ClrStall+0x5c>
  __HAL_LOCK(hpcd);
 8001cda:	2002      	movs	r0, #2
 8001cdc:	e7fa      	b.n	8001cd4 <HAL_PCD_EP_ClrStall+0x5c>

08001cde <HAL_PCDEx_PMAConfig>:
                                       uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001cde:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ce2:	bf1b      	ittet	ne
 8001ce4:	f001 0107 	andne.w	r1, r1, #7
 8001ce8:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001cec:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cf0:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8001cf2:	bf08      	it	eq
 8001cf4:	f500 7094 	addeq.w	r0, r0, #296	; 0x128
 8001cf8:	b299      	uxth	r1, r3
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001cfa:	b91a      	cbnz	r2, 8001d04 <HAL_PCDEx_PMAConfig+0x26>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001cfc:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001cfe:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8001d00:	2000      	movs	r0, #0
 8001d02:	4770      	bx	lr
    ep->doublebuffer = 1U;
 8001d04:	2201      	movs	r2, #1
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001d06:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8001d08:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001d0a:	8101      	strh	r1, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001d0c:	8143      	strh	r3, [r0, #10]
 8001d0e:	e7f7      	b.n	8001d00 <HAL_PCDEx_PMAConfig+0x22>

08001d10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d14:	4605      	mov	r5, r0
 8001d16:	b908      	cbnz	r0, 8001d1c <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8001d18:	2001      	movs	r0, #1
 8001d1a:	e03c      	b.n	8001d96 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d1c:	6803      	ldr	r3, [r0, #0]
 8001d1e:	07db      	lsls	r3, r3, #31
 8001d20:	d410      	bmi.n	8001d44 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d22:	682b      	ldr	r3, [r5, #0]
 8001d24:	079f      	lsls	r7, r3, #30
 8001d26:	d45d      	bmi.n	8001de4 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d28:	682b      	ldr	r3, [r5, #0]
 8001d2a:	0719      	lsls	r1, r3, #28
 8001d2c:	f100 8094 	bmi.w	8001e58 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d30:	682b      	ldr	r3, [r5, #0]
 8001d32:	075a      	lsls	r2, r3, #29
 8001d34:	f100 80be 	bmi.w	8001eb4 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d38:	69e8      	ldr	r0, [r5, #28]
 8001d3a:	2800      	cmp	r0, #0
 8001d3c:	f040 812c 	bne.w	8001f98 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8001d40:	2000      	movs	r0, #0
 8001d42:	e028      	b.n	8001d96 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d44:	4c8f      	ldr	r4, [pc, #572]	; (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001d46:	6863      	ldr	r3, [r4, #4]
 8001d48:	f003 030c 	and.w	r3, r3, #12
 8001d4c:	2b04      	cmp	r3, #4
 8001d4e:	d007      	beq.n	8001d60 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d50:	6863      	ldr	r3, [r4, #4]
 8001d52:	f003 030c 	and.w	r3, r3, #12
 8001d56:	2b08      	cmp	r3, #8
 8001d58:	d109      	bne.n	8001d6e <HAL_RCC_OscConfig+0x5e>
 8001d5a:	6863      	ldr	r3, [r4, #4]
 8001d5c:	03de      	lsls	r6, r3, #15
 8001d5e:	d506      	bpl.n	8001d6e <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d60:	6823      	ldr	r3, [r4, #0]
 8001d62:	039c      	lsls	r4, r3, #14
 8001d64:	d5dd      	bpl.n	8001d22 <HAL_RCC_OscConfig+0x12>
 8001d66:	686b      	ldr	r3, [r5, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1da      	bne.n	8001d22 <HAL_RCC_OscConfig+0x12>
 8001d6c:	e7d4      	b.n	8001d18 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d6e:	686b      	ldr	r3, [r5, #4]
 8001d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d74:	d112      	bne.n	8001d9c <HAL_RCC_OscConfig+0x8c>
 8001d76:	6823      	ldr	r3, [r4, #0]
 8001d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d7c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001d7e:	f7ff f83f 	bl	8000e00 <HAL_GetTick>
 8001d82:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d84:	6823      	ldr	r3, [r4, #0]
 8001d86:	0398      	lsls	r0, r3, #14
 8001d88:	d4cb      	bmi.n	8001d22 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d8a:	f7ff f839 	bl	8000e00 <HAL_GetTick>
 8001d8e:	1b80      	subs	r0, r0, r6
 8001d90:	2864      	cmp	r0, #100	; 0x64
 8001d92:	d9f7      	bls.n	8001d84 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001d94:	2003      	movs	r0, #3
}
 8001d96:	b002      	add	sp, #8
 8001d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d9c:	b99b      	cbnz	r3, 8001dc6 <HAL_RCC_OscConfig+0xb6>
 8001d9e:	6823      	ldr	r3, [r4, #0]
 8001da0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da4:	6023      	str	r3, [r4, #0]
 8001da6:	6823      	ldr	r3, [r4, #0]
 8001da8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dac:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001dae:	f7ff f827 	bl	8000e00 <HAL_GetTick>
 8001db2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001db4:	6823      	ldr	r3, [r4, #0]
 8001db6:	0399      	lsls	r1, r3, #14
 8001db8:	d5b3      	bpl.n	8001d22 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dba:	f7ff f821 	bl	8000e00 <HAL_GetTick>
 8001dbe:	1b80      	subs	r0, r0, r6
 8001dc0:	2864      	cmp	r0, #100	; 0x64
 8001dc2:	d9f7      	bls.n	8001db4 <HAL_RCC_OscConfig+0xa4>
 8001dc4:	e7e6      	b.n	8001d94 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dc6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dca:	6823      	ldr	r3, [r4, #0]
 8001dcc:	d103      	bne.n	8001dd6 <HAL_RCC_OscConfig+0xc6>
 8001dce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dd2:	6023      	str	r3, [r4, #0]
 8001dd4:	e7cf      	b.n	8001d76 <HAL_RCC_OscConfig+0x66>
 8001dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dda:	6023      	str	r3, [r4, #0]
 8001ddc:	6823      	ldr	r3, [r4, #0]
 8001dde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001de2:	e7cb      	b.n	8001d7c <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001de4:	4c67      	ldr	r4, [pc, #412]	; (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001de6:	6863      	ldr	r3, [r4, #4]
 8001de8:	f013 0f0c 	tst.w	r3, #12
 8001dec:	d007      	beq.n	8001dfe <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dee:	6863      	ldr	r3, [r4, #4]
 8001df0:	f003 030c 	and.w	r3, r3, #12
 8001df4:	2b08      	cmp	r3, #8
 8001df6:	d110      	bne.n	8001e1a <HAL_RCC_OscConfig+0x10a>
 8001df8:	6863      	ldr	r3, [r4, #4]
 8001dfa:	03da      	lsls	r2, r3, #15
 8001dfc:	d40d      	bmi.n	8001e1a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dfe:	6823      	ldr	r3, [r4, #0]
 8001e00:	079b      	lsls	r3, r3, #30
 8001e02:	d502      	bpl.n	8001e0a <HAL_RCC_OscConfig+0xfa>
 8001e04:	692b      	ldr	r3, [r5, #16]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d186      	bne.n	8001d18 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e0a:	6823      	ldr	r3, [r4, #0]
 8001e0c:	696a      	ldr	r2, [r5, #20]
 8001e0e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001e12:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001e16:	6023      	str	r3, [r4, #0]
 8001e18:	e786      	b.n	8001d28 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e1a:	692a      	ldr	r2, [r5, #16]
 8001e1c:	4b5a      	ldr	r3, [pc, #360]	; (8001f88 <HAL_RCC_OscConfig+0x278>)
 8001e1e:	b16a      	cbz	r2, 8001e3c <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8001e20:	2201      	movs	r2, #1
 8001e22:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001e24:	f7fe ffec 	bl	8000e00 <HAL_GetTick>
 8001e28:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e2a:	6823      	ldr	r3, [r4, #0]
 8001e2c:	079f      	lsls	r7, r3, #30
 8001e2e:	d4ec      	bmi.n	8001e0a <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e30:	f7fe ffe6 	bl	8000e00 <HAL_GetTick>
 8001e34:	1b80      	subs	r0, r0, r6
 8001e36:	2802      	cmp	r0, #2
 8001e38:	d9f7      	bls.n	8001e2a <HAL_RCC_OscConfig+0x11a>
 8001e3a:	e7ab      	b.n	8001d94 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001e3c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001e3e:	f7fe ffdf 	bl	8000e00 <HAL_GetTick>
 8001e42:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e44:	6823      	ldr	r3, [r4, #0]
 8001e46:	0798      	lsls	r0, r3, #30
 8001e48:	f57f af6e 	bpl.w	8001d28 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e4c:	f7fe ffd8 	bl	8000e00 <HAL_GetTick>
 8001e50:	1b80      	subs	r0, r0, r6
 8001e52:	2802      	cmp	r0, #2
 8001e54:	d9f6      	bls.n	8001e44 <HAL_RCC_OscConfig+0x134>
 8001e56:	e79d      	b.n	8001d94 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e58:	69aa      	ldr	r2, [r5, #24]
 8001e5a:	4c4a      	ldr	r4, [pc, #296]	; (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001e5c:	4b4b      	ldr	r3, [pc, #300]	; (8001f8c <HAL_RCC_OscConfig+0x27c>)
 8001e5e:	b1da      	cbz	r2, 8001e98 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8001e60:	2201      	movs	r2, #1
 8001e62:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001e64:	f7fe ffcc 	bl	8000e00 <HAL_GetTick>
 8001e68:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e6c:	079b      	lsls	r3, r3, #30
 8001e6e:	d50d      	bpl.n	8001e8c <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e70:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001e74:	4b46      	ldr	r3, [pc, #280]	; (8001f90 <HAL_RCC_OscConfig+0x280>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e7c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001e7e:	bf00      	nop
  }
  while (Delay --);
 8001e80:	9b01      	ldr	r3, [sp, #4]
 8001e82:	1e5a      	subs	r2, r3, #1
 8001e84:	9201      	str	r2, [sp, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f9      	bne.n	8001e7e <HAL_RCC_OscConfig+0x16e>
 8001e8a:	e751      	b.n	8001d30 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e8c:	f7fe ffb8 	bl	8000e00 <HAL_GetTick>
 8001e90:	1b80      	subs	r0, r0, r6
 8001e92:	2802      	cmp	r0, #2
 8001e94:	d9e9      	bls.n	8001e6a <HAL_RCC_OscConfig+0x15a>
 8001e96:	e77d      	b.n	8001d94 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001e98:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001e9a:	f7fe ffb1 	bl	8000e00 <HAL_GetTick>
 8001e9e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ea2:	079f      	lsls	r7, r3, #30
 8001ea4:	f57f af44 	bpl.w	8001d30 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea8:	f7fe ffaa 	bl	8000e00 <HAL_GetTick>
 8001eac:	1b80      	subs	r0, r0, r6
 8001eae:	2802      	cmp	r0, #2
 8001eb0:	d9f6      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x190>
 8001eb2:	e76f      	b.n	8001d94 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eb4:	4c33      	ldr	r4, [pc, #204]	; (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001eb6:	69e3      	ldr	r3, [r4, #28]
 8001eb8:	00d8      	lsls	r0, r3, #3
 8001eba:	d424      	bmi.n	8001f06 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8001ebc:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ebe:	69e3      	ldr	r3, [r4, #28]
 8001ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec4:	61e3      	str	r3, [r4, #28]
 8001ec6:	69e3      	ldr	r3, [r4, #28]
 8001ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed0:	4e30      	ldr	r6, [pc, #192]	; (8001f94 <HAL_RCC_OscConfig+0x284>)
 8001ed2:	6833      	ldr	r3, [r6, #0]
 8001ed4:	05d9      	lsls	r1, r3, #23
 8001ed6:	d518      	bpl.n	8001f0a <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ed8:	68eb      	ldr	r3, [r5, #12]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d126      	bne.n	8001f2c <HAL_RCC_OscConfig+0x21c>
 8001ede:	6a23      	ldr	r3, [r4, #32]
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001ee6:	f7fe ff8b 	bl	8000e00 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eea:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001eee:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef0:	6a23      	ldr	r3, [r4, #32]
 8001ef2:	079b      	lsls	r3, r3, #30
 8001ef4:	d53f      	bpl.n	8001f76 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8001ef6:	2f00      	cmp	r7, #0
 8001ef8:	f43f af1e 	beq.w	8001d38 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001efc:	69e3      	ldr	r3, [r4, #28]
 8001efe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f02:	61e3      	str	r3, [r4, #28]
 8001f04:	e718      	b.n	8001d38 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8001f06:	2700      	movs	r7, #0
 8001f08:	e7e2      	b.n	8001ed0 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f0a:	6833      	ldr	r3, [r6, #0]
 8001f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f10:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001f12:	f7fe ff75 	bl	8000e00 <HAL_GetTick>
 8001f16:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f18:	6833      	ldr	r3, [r6, #0]
 8001f1a:	05da      	lsls	r2, r3, #23
 8001f1c:	d4dc      	bmi.n	8001ed8 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f1e:	f7fe ff6f 	bl	8000e00 <HAL_GetTick>
 8001f22:	eba0 0008 	sub.w	r0, r0, r8
 8001f26:	2864      	cmp	r0, #100	; 0x64
 8001f28:	d9f6      	bls.n	8001f18 <HAL_RCC_OscConfig+0x208>
 8001f2a:	e733      	b.n	8001d94 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f2c:	b9ab      	cbnz	r3, 8001f5a <HAL_RCC_OscConfig+0x24a>
 8001f2e:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f30:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f34:	f023 0301 	bic.w	r3, r3, #1
 8001f38:	6223      	str	r3, [r4, #32]
 8001f3a:	6a23      	ldr	r3, [r4, #32]
 8001f3c:	f023 0304 	bic.w	r3, r3, #4
 8001f40:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001f42:	f7fe ff5d 	bl	8000e00 <HAL_GetTick>
 8001f46:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f48:	6a23      	ldr	r3, [r4, #32]
 8001f4a:	0798      	lsls	r0, r3, #30
 8001f4c:	d5d3      	bpl.n	8001ef6 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4e:	f7fe ff57 	bl	8000e00 <HAL_GetTick>
 8001f52:	1b80      	subs	r0, r0, r6
 8001f54:	4540      	cmp	r0, r8
 8001f56:	d9f7      	bls.n	8001f48 <HAL_RCC_OscConfig+0x238>
 8001f58:	e71c      	b.n	8001d94 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f5a:	2b05      	cmp	r3, #5
 8001f5c:	6a23      	ldr	r3, [r4, #32]
 8001f5e:	d103      	bne.n	8001f68 <HAL_RCC_OscConfig+0x258>
 8001f60:	f043 0304 	orr.w	r3, r3, #4
 8001f64:	6223      	str	r3, [r4, #32]
 8001f66:	e7ba      	b.n	8001ede <HAL_RCC_OscConfig+0x1ce>
 8001f68:	f023 0301 	bic.w	r3, r3, #1
 8001f6c:	6223      	str	r3, [r4, #32]
 8001f6e:	6a23      	ldr	r3, [r4, #32]
 8001f70:	f023 0304 	bic.w	r3, r3, #4
 8001f74:	e7b6      	b.n	8001ee4 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f76:	f7fe ff43 	bl	8000e00 <HAL_GetTick>
 8001f7a:	eba0 0008 	sub.w	r0, r0, r8
 8001f7e:	42b0      	cmp	r0, r6
 8001f80:	d9b6      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x1e0>
 8001f82:	e707      	b.n	8001d94 <HAL_RCC_OscConfig+0x84>
 8001f84:	40021000 	.word	0x40021000
 8001f88:	42420000 	.word	0x42420000
 8001f8c:	42420480 	.word	0x42420480
 8001f90:	20000008 	.word	0x20000008
 8001f94:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f98:	4b2a      	ldr	r3, [pc, #168]	; (8002044 <HAL_RCC_OscConfig+0x334>)
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	461c      	mov	r4, r3
 8001f9e:	f002 020c 	and.w	r2, r2, #12
 8001fa2:	2a08      	cmp	r2, #8
 8001fa4:	d03d      	beq.n	8002022 <HAL_RCC_OscConfig+0x312>
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	4e27      	ldr	r6, [pc, #156]	; (8002048 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001faa:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001fac:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fae:	d12b      	bne.n	8002008 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8001fb0:	f7fe ff26 	bl	8000e00 <HAL_GetTick>
 8001fb4:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb6:	6823      	ldr	r3, [r4, #0]
 8001fb8:	0199      	lsls	r1, r3, #6
 8001fba:	d41f      	bmi.n	8001ffc <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fbc:	6a2b      	ldr	r3, [r5, #32]
 8001fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc2:	d105      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fc4:	6862      	ldr	r2, [r4, #4]
 8001fc6:	68a9      	ldr	r1, [r5, #8]
 8001fc8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fd0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001fd2:	6862      	ldr	r2, [r4, #4]
 8001fd4:	430b      	orrs	r3, r1
 8001fd6:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001fde:	2301      	movs	r3, #1
 8001fe0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001fe2:	f7fe ff0d 	bl	8000e00 <HAL_GetTick>
 8001fe6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fe8:	6823      	ldr	r3, [r4, #0]
 8001fea:	019a      	lsls	r2, r3, #6
 8001fec:	f53f aea8 	bmi.w	8001d40 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff0:	f7fe ff06 	bl	8000e00 <HAL_GetTick>
 8001ff4:	1b40      	subs	r0, r0, r5
 8001ff6:	2802      	cmp	r0, #2
 8001ff8:	d9f6      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x2d8>
 8001ffa:	e6cb      	b.n	8001d94 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ffc:	f7fe ff00 	bl	8000e00 <HAL_GetTick>
 8002000:	1bc0      	subs	r0, r0, r7
 8002002:	2802      	cmp	r0, #2
 8002004:	d9d7      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x2a6>
 8002006:	e6c5      	b.n	8001d94 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8002008:	f7fe fefa 	bl	8000e00 <HAL_GetTick>
 800200c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800200e:	6823      	ldr	r3, [r4, #0]
 8002010:	019b      	lsls	r3, r3, #6
 8002012:	f57f ae95 	bpl.w	8001d40 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002016:	f7fe fef3 	bl	8000e00 <HAL_GetTick>
 800201a:	1b40      	subs	r0, r0, r5
 800201c:	2802      	cmp	r0, #2
 800201e:	d9f6      	bls.n	800200e <HAL_RCC_OscConfig+0x2fe>
 8002020:	e6b8      	b.n	8001d94 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002022:	2801      	cmp	r0, #1
 8002024:	f43f aeb7 	beq.w	8001d96 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8002028:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800202a:	6a2b      	ldr	r3, [r5, #32]
 800202c:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8002030:	429a      	cmp	r2, r3
 8002032:	f47f ae71 	bne.w	8001d18 <HAL_RCC_OscConfig+0x8>
 8002036:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002038:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 800203c:	1ac0      	subs	r0, r0, r3
 800203e:	bf18      	it	ne
 8002040:	2001      	movne	r0, #1
 8002042:	e6a8      	b.n	8001d96 <HAL_RCC_OscConfig+0x86>
 8002044:	40021000 	.word	0x40021000
 8002048:	42420060 	.word	0x42420060

0800204c <HAL_RCC_GetSysClockFreq>:
{
 800204c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800204e:	4b18      	ldr	r3, [pc, #96]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8002050:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002052:	ac02      	add	r4, sp, #8
 8002054:	f103 0510 	add.w	r5, r3, #16
 8002058:	4622      	mov	r2, r4
 800205a:	6818      	ldr	r0, [r3, #0]
 800205c:	6859      	ldr	r1, [r3, #4]
 800205e:	3308      	adds	r3, #8
 8002060:	c203      	stmia	r2!, {r0, r1}
 8002062:	42ab      	cmp	r3, r5
 8002064:	4614      	mov	r4, r2
 8002066:	d1f7      	bne.n	8002058 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002068:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 800206c:	4911      	ldr	r1, [pc, #68]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800206e:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8002072:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002074:	f003 020c 	and.w	r2, r3, #12
 8002078:	2a08      	cmp	r2, #8
 800207a:	d117      	bne.n	80020ac <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800207c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002080:	a806      	add	r0, sp, #24
 8002082:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002084:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002086:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800208a:	d50c      	bpl.n	80020a6 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800208c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800208e:	480a      	ldr	r0, [pc, #40]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002090:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002094:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002096:	aa06      	add	r2, sp, #24
 8002098:	4413      	add	r3, r2
 800209a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800209e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80020a2:	b007      	add	sp, #28
 80020a4:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020a6:	4805      	ldr	r0, [pc, #20]	; (80020bc <HAL_RCC_GetSysClockFreq+0x70>)
 80020a8:	4350      	muls	r0, r2
 80020aa:	e7fa      	b.n	80020a2 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 80020ac:	4802      	ldr	r0, [pc, #8]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 80020ae:	e7f8      	b.n	80020a2 <HAL_RCC_GetSysClockFreq+0x56>
 80020b0:	08005a38 	.word	0x08005a38
 80020b4:	40021000 	.word	0x40021000
 80020b8:	007a1200 	.word	0x007a1200
 80020bc:	003d0900 	.word	0x003d0900

080020c0 <HAL_RCC_ClockConfig>:
{
 80020c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020c4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80020c6:	4604      	mov	r4, r0
 80020c8:	b910      	cbnz	r0, 80020d0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80020ca:	2001      	movs	r0, #1
}
 80020cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020d0:	4a44      	ldr	r2, [pc, #272]	; (80021e4 <HAL_RCC_ClockConfig+0x124>)
 80020d2:	6813      	ldr	r3, [r2, #0]
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	428b      	cmp	r3, r1
 80020da:	d328      	bcc.n	800212e <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020dc:	6821      	ldr	r1, [r4, #0]
 80020de:	078e      	lsls	r6, r1, #30
 80020e0:	d430      	bmi.n	8002144 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020e2:	07ca      	lsls	r2, r1, #31
 80020e4:	d443      	bmi.n	800216e <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020e6:	4a3f      	ldr	r2, [pc, #252]	; (80021e4 <HAL_RCC_ClockConfig+0x124>)
 80020e8:	6813      	ldr	r3, [r2, #0]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	42ab      	cmp	r3, r5
 80020f0:	d865      	bhi.n	80021be <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f2:	6822      	ldr	r2, [r4, #0]
 80020f4:	4d3c      	ldr	r5, [pc, #240]	; (80021e8 <HAL_RCC_ClockConfig+0x128>)
 80020f6:	f012 0f04 	tst.w	r2, #4
 80020fa:	d16c      	bne.n	80021d6 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020fc:	0713      	lsls	r3, r2, #28
 80020fe:	d506      	bpl.n	800210e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002100:	686b      	ldr	r3, [r5, #4]
 8002102:	6922      	ldr	r2, [r4, #16]
 8002104:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002108:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800210c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800210e:	f7ff ff9d 	bl	800204c <HAL_RCC_GetSysClockFreq>
 8002112:	686b      	ldr	r3, [r5, #4]
 8002114:	4a35      	ldr	r2, [pc, #212]	; (80021ec <HAL_RCC_ClockConfig+0x12c>)
 8002116:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800211a:	5cd3      	ldrb	r3, [r2, r3]
 800211c:	40d8      	lsrs	r0, r3
 800211e:	4b34      	ldr	r3, [pc, #208]	; (80021f0 <HAL_RCC_ClockConfig+0x130>)
 8002120:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002122:	4b34      	ldr	r3, [pc, #208]	; (80021f4 <HAL_RCC_ClockConfig+0x134>)
 8002124:	6818      	ldr	r0, [r3, #0]
 8002126:	f7fe fe29 	bl	8000d7c <HAL_InitTick>
  return HAL_OK;
 800212a:	2000      	movs	r0, #0
 800212c:	e7ce      	b.n	80020cc <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212e:	6813      	ldr	r3, [r2, #0]
 8002130:	f023 0307 	bic.w	r3, r3, #7
 8002134:	430b      	orrs	r3, r1
 8002136:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002138:	6813      	ldr	r3, [r2, #0]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	428b      	cmp	r3, r1
 8002140:	d1c3      	bne.n	80020ca <HAL_RCC_ClockConfig+0xa>
 8002142:	e7cb      	b.n	80020dc <HAL_RCC_ClockConfig+0x1c>
 8002144:	4b28      	ldr	r3, [pc, #160]	; (80021e8 <HAL_RCC_ClockConfig+0x128>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002146:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800214a:	bf1e      	ittt	ne
 800214c:	685a      	ldrne	r2, [r3, #4]
 800214e:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8002152:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002154:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002156:	bf42      	ittt	mi
 8002158:	685a      	ldrmi	r2, [r3, #4]
 800215a:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800215e:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002160:	685a      	ldr	r2, [r3, #4]
 8002162:	68a0      	ldr	r0, [r4, #8]
 8002164:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002168:	4302      	orrs	r2, r0
 800216a:	605a      	str	r2, [r3, #4]
 800216c:	e7b9      	b.n	80020e2 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800216e:	6862      	ldr	r2, [r4, #4]
 8002170:	4e1d      	ldr	r6, [pc, #116]	; (80021e8 <HAL_RCC_ClockConfig+0x128>)
 8002172:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002174:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002176:	d11a      	bne.n	80021ae <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002178:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800217c:	d0a5      	beq.n	80020ca <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800217e:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002180:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002184:	f023 0303 	bic.w	r3, r3, #3
 8002188:	4313      	orrs	r3, r2
 800218a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800218c:	f7fe fe38 	bl	8000e00 <HAL_GetTick>
 8002190:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002192:	6873      	ldr	r3, [r6, #4]
 8002194:	6862      	ldr	r2, [r4, #4]
 8002196:	f003 030c 	and.w	r3, r3, #12
 800219a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800219e:	d0a2      	beq.n	80020e6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a0:	f7fe fe2e 	bl	8000e00 <HAL_GetTick>
 80021a4:	1bc0      	subs	r0, r0, r7
 80021a6:	4540      	cmp	r0, r8
 80021a8:	d9f3      	bls.n	8002192 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 80021aa:	2003      	movs	r0, #3
 80021ac:	e78e      	b.n	80020cc <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ae:	2a02      	cmp	r2, #2
 80021b0:	d102      	bne.n	80021b8 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80021b6:	e7e1      	b.n	800217c <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b8:	f013 0f02 	tst.w	r3, #2
 80021bc:	e7de      	b.n	800217c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021be:	6813      	ldr	r3, [r2, #0]
 80021c0:	f023 0307 	bic.w	r3, r3, #7
 80021c4:	432b      	orrs	r3, r5
 80021c6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c8:	6813      	ldr	r3, [r2, #0]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	42ab      	cmp	r3, r5
 80021d0:	f47f af7b 	bne.w	80020ca <HAL_RCC_ClockConfig+0xa>
 80021d4:	e78d      	b.n	80020f2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021d6:	686b      	ldr	r3, [r5, #4]
 80021d8:	68e1      	ldr	r1, [r4, #12]
 80021da:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80021de:	430b      	orrs	r3, r1
 80021e0:	606b      	str	r3, [r5, #4]
 80021e2:	e78b      	b.n	80020fc <HAL_RCC_ClockConfig+0x3c>
 80021e4:	40022000 	.word	0x40022000
 80021e8:	40021000 	.word	0x40021000
 80021ec:	080068f3 	.word	0x080068f3
 80021f0:	20000008 	.word	0x20000008
 80021f4:	20000010 	.word	0x20000010

080021f8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021f8:	4b04      	ldr	r3, [pc, #16]	; (800220c <HAL_RCC_GetPCLK1Freq+0x14>)
 80021fa:	4a05      	ldr	r2, [pc, #20]	; (8002210 <HAL_RCC_GetPCLK1Freq+0x18>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002202:	5cd3      	ldrb	r3, [r2, r3]
 8002204:	4a03      	ldr	r2, [pc, #12]	; (8002214 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002206:	6810      	ldr	r0, [r2, #0]
}
 8002208:	40d8      	lsrs	r0, r3
 800220a:	4770      	bx	lr
 800220c:	40021000 	.word	0x40021000
 8002210:	08006903 	.word	0x08006903
 8002214:	20000008 	.word	0x20000008

08002218 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002218:	4b04      	ldr	r3, [pc, #16]	; (800222c <HAL_RCC_GetPCLK2Freq+0x14>)
 800221a:	4a05      	ldr	r2, [pc, #20]	; (8002230 <HAL_RCC_GetPCLK2Freq+0x18>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002222:	5cd3      	ldrb	r3, [r2, r3]
 8002224:	4a03      	ldr	r2, [pc, #12]	; (8002234 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002226:	6810      	ldr	r0, [r2, #0]
}
 8002228:	40d8      	lsrs	r0, r3
 800222a:	4770      	bx	lr
 800222c:	40021000 	.word	0x40021000
 8002230:	08006903 	.word	0x08006903
 8002234:	20000008 	.word	0x20000008

08002238 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002238:	6803      	ldr	r3, [r0, #0]
{
 800223a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800223e:	07d9      	lsls	r1, r3, #31
{
 8002240:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002242:	d520      	bpl.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002244:	4c35      	ldr	r4, [pc, #212]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002246:	69e3      	ldr	r3, [r4, #28]
 8002248:	00da      	lsls	r2, r3, #3
 800224a:	d432      	bmi.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 800224c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800224e:	69e3      	ldr	r3, [r4, #28]
 8002250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002254:	61e3      	str	r3, [r4, #28]
 8002256:	69e3      	ldr	r3, [r4, #28]
 8002258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225c:	9301      	str	r3, [sp, #4]
 800225e:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002260:	4e2f      	ldr	r6, [pc, #188]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002262:	6833      	ldr	r3, [r6, #0]
 8002264:	05db      	lsls	r3, r3, #23
 8002266:	d526      	bpl.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002268:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800226a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800226e:	d136      	bne.n	80022de <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002270:	6a23      	ldr	r3, [r4, #32]
 8002272:	686a      	ldr	r2, [r5, #4]
 8002274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002278:	4313      	orrs	r3, r2
 800227a:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800227c:	b11f      	cbz	r7, 8002286 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800227e:	69e3      	ldr	r3, [r4, #28]
 8002280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002284:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002286:	6828      	ldr	r0, [r5, #0]
 8002288:	0783      	lsls	r3, r0, #30
 800228a:	d506      	bpl.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800228c:	4a23      	ldr	r2, [pc, #140]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800228e:	68a9      	ldr	r1, [r5, #8]
 8002290:	6853      	ldr	r3, [r2, #4]
 8002292:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002296:	430b      	orrs	r3, r1
 8002298:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800229a:	f010 0010 	ands.w	r0, r0, #16
 800229e:	d01b      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022a0:	4a1e      	ldr	r2, [pc, #120]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80022a2:	68e9      	ldr	r1, [r5, #12]
 80022a4:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80022a6:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022a8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80022ac:	430b      	orrs	r3, r1
 80022ae:	6053      	str	r3, [r2, #4]
 80022b0:	e012      	b.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 80022b2:	2700      	movs	r7, #0
 80022b4:	e7d4      	b.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022b6:	6833      	ldr	r3, [r6, #0]
 80022b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022bc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80022be:	f7fe fd9f 	bl	8000e00 <HAL_GetTick>
 80022c2:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c4:	6833      	ldr	r3, [r6, #0]
 80022c6:	05d8      	lsls	r0, r3, #23
 80022c8:	d4ce      	bmi.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ca:	f7fe fd99 	bl	8000e00 <HAL_GetTick>
 80022ce:	eba0 0008 	sub.w	r0, r0, r8
 80022d2:	2864      	cmp	r0, #100	; 0x64
 80022d4:	d9f6      	bls.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 80022d6:	2003      	movs	r0, #3
}
 80022d8:	b002      	add	sp, #8
 80022da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022de:	686a      	ldr	r2, [r5, #4]
 80022e0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d0c3      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 80022e8:	2001      	movs	r0, #1
 80022ea:	4a0e      	ldr	r2, [pc, #56]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022ec:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80022ee:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022f0:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022f6:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 80022f8:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022fa:	07d9      	lsls	r1, r3, #31
 80022fc:	d5b8      	bpl.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 80022fe:	f7fe fd7f 	bl	8000e00 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002302:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002306:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002308:	6a23      	ldr	r3, [r4, #32]
 800230a:	079a      	lsls	r2, r3, #30
 800230c:	d4b0      	bmi.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800230e:	f7fe fd77 	bl	8000e00 <HAL_GetTick>
 8002312:	1b80      	subs	r0, r0, r6
 8002314:	4540      	cmp	r0, r8
 8002316:	d9f7      	bls.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8002318:	e7dd      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800231a:	bf00      	nop
 800231c:	40021000 	.word	0x40021000
 8002320:	40007000 	.word	0x40007000
 8002324:	42420440 	.word	0x42420440

08002328 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002328:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800232a:	4604      	mov	r4, r0
 800232c:	2800      	cmp	r0, #0
 800232e:	d034      	beq.n	800239a <HAL_SPI_Init+0x72>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002330:	2300      	movs	r3, #0
 8002332:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002334:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002338:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800233c:	b91b      	cbnz	r3, 8002346 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800233e:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002342:	f7fe fbd9 	bl	8000af8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002346:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002348:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800234a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800234e:	6813      	ldr	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002350:	69a1      	ldr	r1, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 8002352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002356:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002358:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 800235c:	4303      	orrs	r3, r0
 800235e:	68e0      	ldr	r0, [r4, #12]
 8002360:	4303      	orrs	r3, r0
 8002362:	6920      	ldr	r0, [r4, #16]
 8002364:	4303      	orrs	r3, r0
 8002366:	6960      	ldr	r0, [r4, #20]
 8002368:	4303      	orrs	r3, r0
 800236a:	69e0      	ldr	r0, [r4, #28]
 800236c:	4303      	orrs	r3, r0
 800236e:	6a20      	ldr	r0, [r4, #32]
 8002370:	4303      	orrs	r3, r0
 8002372:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002374:	4303      	orrs	r3, r0
 8002376:	f401 7000 	and.w	r0, r1, #512	; 0x200
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800237a:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800237c:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800237e:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002382:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002384:	6051      	str	r1, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002386:	69d3      	ldr	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002388:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800238a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800238e:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8002390:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002392:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002394:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 8002398:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800239a:	2001      	movs	r0, #1
 800239c:	e7fc      	b.n	8002398 <HAL_SPI_Init+0x70>
	...

080023a0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023a0:	6a03      	ldr	r3, [r0, #32]
{
 80023a2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023a4:	f023 0301 	bic.w	r3, r3, #1
 80023a8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023aa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023ac:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023ae:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023b0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80023b2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80023b6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80023b8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80023ba:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80023be:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80023c0:	4d0a      	ldr	r5, [pc, #40]	; (80023ec <TIM_OC1_SetConfig+0x4c>)
 80023c2:	42a8      	cmp	r0, r5
 80023c4:	d10b      	bne.n	80023de <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80023c6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80023c8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80023cc:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80023ce:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80023d2:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80023d6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80023d8:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80023dc:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023de:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023e0:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80023e2:	684a      	ldr	r2, [r1, #4]
 80023e4:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023e6:	6203      	str	r3, [r0, #32]
}
 80023e8:	bd70      	pop	{r4, r5, r6, pc}
 80023ea:	bf00      	nop
 80023ec:	40012c00 	.word	0x40012c00

080023f0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80023f0:	6a03      	ldr	r3, [r0, #32]
{
 80023f2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80023f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023f8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023fa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023fc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023fe:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002400:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002402:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002406:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002408:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800240a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800240e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002412:	4d0b      	ldr	r5, [pc, #44]	; (8002440 <TIM_OC3_SetConfig+0x50>)
 8002414:	42a8      	cmp	r0, r5
 8002416:	d10d      	bne.n	8002434 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002418:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800241a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800241e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002422:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002426:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800242a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 800242c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002430:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002434:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002436:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002438:	684a      	ldr	r2, [r1, #4]
 800243a:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800243c:	6203      	str	r3, [r0, #32]
}
 800243e:	bd70      	pop	{r4, r5, r6, pc}
 8002440:	40012c00 	.word	0x40012c00

08002444 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002444:	6a03      	ldr	r3, [r0, #32]
{
 8002446:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002448:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800244c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800244e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002450:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002452:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002454:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002456:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800245a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800245e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002460:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002464:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002468:	4d06      	ldr	r5, [pc, #24]	; (8002484 <TIM_OC4_SetConfig+0x40>)
 800246a:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800246c:	bf02      	ittt	eq
 800246e:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002470:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002474:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002478:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800247a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800247c:	684a      	ldr	r2, [r1, #4]
 800247e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002480:	6203      	str	r3, [r0, #32]
}
 8002482:	bd30      	pop	{r4, r5, pc}
 8002484:	40012c00 	.word	0x40012c00

08002488 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002488:	4a1a      	ldr	r2, [pc, #104]	; (80024f4 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800248a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800248c:	4290      	cmp	r0, r2
 800248e:	d00a      	beq.n	80024a6 <TIM_Base_SetConfig+0x1e>
 8002490:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002494:	d007      	beq.n	80024a6 <TIM_Base_SetConfig+0x1e>
 8002496:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800249a:	4290      	cmp	r0, r2
 800249c:	d003      	beq.n	80024a6 <TIM_Base_SetConfig+0x1e>
 800249e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024a2:	4290      	cmp	r0, r2
 80024a4:	d115      	bne.n	80024d2 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 80024a6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80024ac:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024ae:	4a11      	ldr	r2, [pc, #68]	; (80024f4 <TIM_Base_SetConfig+0x6c>)
 80024b0:	4290      	cmp	r0, r2
 80024b2:	d00a      	beq.n	80024ca <TIM_Base_SetConfig+0x42>
 80024b4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80024b8:	d007      	beq.n	80024ca <TIM_Base_SetConfig+0x42>
 80024ba:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80024be:	4290      	cmp	r0, r2
 80024c0:	d003      	beq.n	80024ca <TIM_Base_SetConfig+0x42>
 80024c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024c6:	4290      	cmp	r0, r2
 80024c8:	d103      	bne.n	80024d2 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024ca:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80024cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024d0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024d2:	694a      	ldr	r2, [r1, #20]
 80024d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024d8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80024da:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024dc:	688b      	ldr	r3, [r1, #8]
 80024de:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80024e0:	680b      	ldr	r3, [r1, #0]
 80024e2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024e4:	4b03      	ldr	r3, [pc, #12]	; (80024f4 <TIM_Base_SetConfig+0x6c>)
 80024e6:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80024e8:	bf04      	itt	eq
 80024ea:	690b      	ldreq	r3, [r1, #16]
 80024ec:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80024ee:	2301      	movs	r3, #1
 80024f0:	6143      	str	r3, [r0, #20]
}
 80024f2:	4770      	bx	lr
 80024f4:	40012c00 	.word	0x40012c00

080024f8 <HAL_TIM_PWM_Init>:
{
 80024f8:	b510      	push	{r4, lr}
  if (htim == NULL)
 80024fa:	4604      	mov	r4, r0
 80024fc:	b1a0      	cbz	r0, 8002528 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80024fe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002502:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002506:	b91b      	cbnz	r3, 8002510 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002508:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800250c:	f7fe fb30 	bl	8000b70 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002510:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002512:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002514:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002518:	1d21      	adds	r1, r4, #4
 800251a:	f7ff ffb5 	bl	8002488 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800251e:	2301      	movs	r3, #1
  return HAL_OK;
 8002520:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002522:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002526:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002528:	2001      	movs	r0, #1
 800252a:	e7fc      	b.n	8002526 <HAL_TIM_PWM_Init+0x2e>

0800252c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800252c:	6a03      	ldr	r3, [r0, #32]
{
 800252e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002530:	f023 0310 	bic.w	r3, r3, #16
 8002534:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002536:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002538:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800253a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800253c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800253e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002542:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002546:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002548:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800254c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002550:	4d0b      	ldr	r5, [pc, #44]	; (8002580 <TIM_OC2_SetConfig+0x54>)
 8002552:	42a8      	cmp	r0, r5
 8002554:	d10d      	bne.n	8002572 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002556:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002558:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800255c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002560:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002564:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8002568:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800256a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800256e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8002572:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002574:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002576:	684a      	ldr	r2, [r1, #4]
 8002578:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800257a:	6203      	str	r3, [r0, #32]
}
 800257c:	bd70      	pop	{r4, r5, r6, pc}
 800257e:	bf00      	nop
 8002580:	40012c00 	.word	0x40012c00

08002584 <HAL_TIM_PWM_ConfigChannel>:
{
 8002584:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002586:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800258a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800258c:	2b01      	cmp	r3, #1
 800258e:	f04f 0002 	mov.w	r0, #2
 8002592:	d025      	beq.n	80025e0 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8002594:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002596:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 800259a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 800259e:	2a0c      	cmp	r2, #12
 80025a0:	d818      	bhi.n	80025d4 <HAL_TIM_PWM_ConfigChannel+0x50>
 80025a2:	e8df f002 	tbb	[pc, r2]
 80025a6:	1707      	.short	0x1707
 80025a8:	171e1717 	.word	0x171e1717
 80025ac:	172f1717 	.word	0x172f1717
 80025b0:	1717      	.short	0x1717
 80025b2:	40          	.byte	0x40
 80025b3:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025b4:	6820      	ldr	r0, [r4, #0]
 80025b6:	f7ff fef3 	bl	80023a0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025ba:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025bc:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025be:	699a      	ldr	r2, [r3, #24]
 80025c0:	f042 0208 	orr.w	r2, r2, #8
 80025c4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80025c6:	699a      	ldr	r2, [r3, #24]
 80025c8:	f022 0204 	bic.w	r2, r2, #4
 80025cc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025ce:	699a      	ldr	r2, [r3, #24]
 80025d0:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80025d2:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80025d4:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80025d6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80025d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80025dc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80025e0:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80025e2:	6820      	ldr	r0, [r4, #0]
 80025e4:	f7ff ffa2 	bl	800252c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80025e8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80025ea:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80025ec:	699a      	ldr	r2, [r3, #24]
 80025ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80025f4:	699a      	ldr	r2, [r3, #24]
 80025f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80025fc:	699a      	ldr	r2, [r3, #24]
 80025fe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002602:	e7e6      	b.n	80025d2 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002604:	6820      	ldr	r0, [r4, #0]
 8002606:	f7ff fef3 	bl	80023f0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800260a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800260c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800260e:	69da      	ldr	r2, [r3, #28]
 8002610:	f042 0208 	orr.w	r2, r2, #8
 8002614:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002616:	69da      	ldr	r2, [r3, #28]
 8002618:	f022 0204 	bic.w	r2, r2, #4
 800261c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800261e:	69da      	ldr	r2, [r3, #28]
 8002620:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002622:	61da      	str	r2, [r3, #28]
      break;
 8002624:	e7d6      	b.n	80025d4 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002626:	6820      	ldr	r0, [r4, #0]
 8002628:	f7ff ff0c 	bl	8002444 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800262c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800262e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002630:	69da      	ldr	r2, [r3, #28]
 8002632:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002636:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002638:	69da      	ldr	r2, [r3, #28]
 800263a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800263e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002640:	69da      	ldr	r2, [r3, #28]
 8002642:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002646:	e7ec      	b.n	8002622 <HAL_TIM_PWM_ConfigChannel+0x9e>

08002648 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002648:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800264a:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800264c:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800264e:	f001 011f 	and.w	r1, r1, #31
 8002652:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8002654:	ea23 0304 	bic.w	r3, r3, r4
 8002658:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800265a:	6a03      	ldr	r3, [r0, #32]
 800265c:	408a      	lsls	r2, r1
 800265e:	431a      	orrs	r2, r3
 8002660:	6202      	str	r2, [r0, #32]
}
 8002662:	bd10      	pop	{r4, pc}

08002664 <HAL_TIM_OC_Start>:
{
 8002664:	b510      	push	{r4, lr}
 8002666:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002668:	2201      	movs	r2, #1
 800266a:	6800      	ldr	r0, [r0, #0]
 800266c:	f7ff ffec 	bl	8002648 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002670:	6823      	ldr	r3, [r4, #0]
 8002672:	4a09      	ldr	r2, [pc, #36]	; (8002698 <HAL_TIM_OC_Start+0x34>)
}
 8002674:	2000      	movs	r0, #0
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002676:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8002678:	bf02      	ittt	eq
 800267a:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 800267c:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8002680:	645a      	streq	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002688:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 800268a:	bf1e      	ittt	ne
 800268c:	681a      	ldrne	r2, [r3, #0]
 800268e:	f042 0201 	orrne.w	r2, r2, #1
 8002692:	601a      	strne	r2, [r3, #0]
}
 8002694:	bd10      	pop	{r4, pc}
 8002696:	bf00      	nop
 8002698:	40012c00 	.word	0x40012c00

0800269c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800269c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80026a0:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	f04f 0302 	mov.w	r3, #2
 80026a8:	d014      	beq.n	80026d4 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026aa:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80026ac:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80026b0:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026b2:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026b4:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026b6:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 80026b8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 80026bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026c0:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026c2:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026c4:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80026c6:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026c8:	2301      	movs	r3, #1
 80026ca:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026ce:	2300      	movs	r3, #0
 80026d0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80026d4:	4618      	mov	r0, r3

  return HAL_OK;
}
 80026d6:	bd30      	pop	{r4, r5, pc}

080026d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026d8:	b538      	push	{r3, r4, r5, lr}
 80026da:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026dc:	6803      	ldr	r3, [r0, #0]
 80026de:	68c1      	ldr	r1, [r0, #12]
 80026e0:	691a      	ldr	r2, [r3, #16]
 80026e2:	2419      	movs	r4, #25
 80026e4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80026e8:	430a      	orrs	r2, r1
 80026ea:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80026ec:	6882      	ldr	r2, [r0, #8]
 80026ee:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80026f0:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80026f2:	4302      	orrs	r2, r0
 80026f4:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 80026f6:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80026fa:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80026fe:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002700:	430a      	orrs	r2, r1
 8002702:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002704:	695a      	ldr	r2, [r3, #20]
 8002706:	69a9      	ldr	r1, [r5, #24]
 8002708:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800270c:	430a      	orrs	r2, r1
 800270e:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002710:	4a0d      	ldr	r2, [pc, #52]	; (8002748 <UART_SetConfig+0x70>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d114      	bne.n	8002740 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002716:	f7ff fd7f 	bl	8002218 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800271a:	4360      	muls	r0, r4
 800271c:	686c      	ldr	r4, [r5, #4]
 800271e:	2264      	movs	r2, #100	; 0x64
 8002720:	00a4      	lsls	r4, r4, #2
 8002722:	fbb0 f0f4 	udiv	r0, r0, r4
 8002726:	fbb0 f1f2 	udiv	r1, r0, r2
 800272a:	fb02 0311 	mls	r3, r2, r1, r0
 800272e:	011b      	lsls	r3, r3, #4
 8002730:	3332      	adds	r3, #50	; 0x32
 8002732:	fbb3 f3f2 	udiv	r3, r3, r2
 8002736:	682c      	ldr	r4, [r5, #0]
 8002738:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800273c:	60a3      	str	r3, [r4, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 800273e:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8002740:	f7ff fd5a 	bl	80021f8 <HAL_RCC_GetPCLK1Freq>
 8002744:	e7e9      	b.n	800271a <UART_SetConfig+0x42>
 8002746:	bf00      	nop
 8002748:	40013800 	.word	0x40013800

0800274c <HAL_UART_Init>:
{
 800274c:	b510      	push	{r4, lr}
  if (huart == NULL)
 800274e:	4604      	mov	r4, r0
 8002750:	b340      	cbz	r0, 80027a4 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002752:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002756:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800275a:	b91b      	cbnz	r3, 8002764 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800275c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002760:	f7fe fa3c 	bl	8000bdc <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002764:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002766:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002768:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800276c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800276e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002770:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002774:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002776:	f7ff ffaf 	bl	80026d8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800277a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800277c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800277e:	691a      	ldr	r2, [r3, #16]
 8002780:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002784:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002786:	695a      	ldr	r2, [r3, #20]
 8002788:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800278c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800278e:	68da      	ldr	r2, [r3, #12]
 8002790:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002794:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002796:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002798:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800279a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800279e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80027a2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80027a4:	2001      	movs	r0, #1
 80027a6:	e7fc      	b.n	80027a2 <HAL_UART_Init+0x56>

080027a8 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80027a8:	b084      	sub	sp, #16
 80027aa:	a801      	add	r0, sp, #4
 80027ac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80027b0:	b004      	add	sp, #16
 80027b2:	2000      	movs	r0, #0
 80027b4:	4770      	bx	lr

080027b6 <USB_EnableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80027b6:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80027ba:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 80027be:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80027c2:	2000      	movs	r0, #0
 80027c4:	4770      	bx	lr

080027c6 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80027c6:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80027ca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80027ce:	045b      	lsls	r3, r3, #17
 80027d0:	0c5b      	lsrs	r3, r3, #17
 80027d2:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80027d6:	2000      	movs	r0, #0
 80027d8:	4770      	bx	lr

080027da <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80027da:	2000      	movs	r0, #0
 80027dc:	4770      	bx	lr

080027de <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80027de:	b084      	sub	sp, #16
 80027e0:	b510      	push	{r4, lr}
 80027e2:	ac03      	add	r4, sp, #12
 80027e4:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 80027e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = USB_CNTR_FRES;
 80027ec:	2301      	movs	r3, #1
 80027ee:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 80027f2:	2300      	movs	r3, #0
 80027f4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->ISTR = 0;
 80027f8:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 80027fc:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 8002800:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
}
 8002804:	b004      	add	sp, #16
  USBx->CNTR |= winterruptmask;
 8002806:	f442 423f 	orr.w	r2, r2, #48896	; 0xbf00
 800280a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
}
 800280e:	4618      	mov	r0, r3
 8002810:	4770      	bx	lr
	...

08002814 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002814:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002816:	780c      	ldrb	r4, [r1, #0]
{
 8002818:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800281a:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]

  /* initialize Endpoint */
  switch (ep->type)
 800281e:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002820:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8002824:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  switch (ep->type)
 8002828:	2803      	cmp	r0, #3
 800282a:	d803      	bhi.n	8002834 <USB_ActivateEndpoint+0x20>
 800282c:	e8df f000 	tbb	[pc, r0]
 8002830:	46444942 	.word	0x46444942
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 8002834:	2001      	movs	r0, #1
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8002836:	f248 0580 	movw	r5, #32896	; 0x8080
 800283a:	432a      	orrs	r2, r5
 800283c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002840:	780e      	ldrb	r6, [r1, #0]
 8002842:	4a9e      	ldr	r2, [pc, #632]	; (8002abc <USB_ActivateEndpoint+0x2a8>)
 8002844:	f833 4026 	ldrh.w	r4, [r3, r6, lsl #2]
 8002848:	4335      	orrs	r5, r6
 800284a:	4014      	ands	r4, r2
 800284c:	432c      	orrs	r4, r5
 800284e:	f823 4026 	strh.w	r4, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 8002852:	7b0d      	ldrb	r5, [r1, #12]
 8002854:	780c      	ldrb	r4, [r1, #0]
 8002856:	2d00      	cmp	r5, #0
 8002858:	f040 8082 	bne.w	8002960 <USB_ActivateEndpoint+0x14c>
 800285c:	88cd      	ldrh	r5, [r1, #6]
  {
    if (ep->is_in != 0U)
 800285e:	784e      	ldrb	r6, [r1, #1]
 8002860:	086d      	lsrs	r5, r5, #1
 8002862:	006d      	lsls	r5, r5, #1
 8002864:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8002868:	b376      	cbz	r6, 80028c8 <USB_ActivateEndpoint+0xb4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800286a:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 800286e:	4434      	add	r4, r6
 8002870:	f8a4 5400 	strh.w	r5, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002874:	780d      	ldrb	r5, [r1, #0]
 8002876:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 800287a:	0667      	lsls	r7, r4, #25
 800287c:	d508      	bpl.n	8002890 <USB_ActivateEndpoint+0x7c>
 800287e:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8002882:	4022      	ands	r2, r4
 8002884:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002888:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800288c:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8002890:	78ca      	ldrb	r2, [r1, #3]
 8002892:	780c      	ldrb	r4, [r1, #0]
 8002894:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002896:	f833 1024 	ldrh.w	r1, [r3, r4, lsl #2]
 800289a:	4a89      	ldr	r2, [pc, #548]	; (8002ac0 <USB_ActivateEndpoint+0x2ac>)
 800289c:	ea02 0201 	and.w	r2, r2, r1
 80028a0:	bf18      	it	ne
 80028a2:	f082 0220 	eorne.w	r2, r2, #32
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80028a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028ae:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 80028b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_CONTROL;
 80028b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 80028b8:	2000      	movs	r0, #0
 80028ba:	e7bc      	b.n	8002836 <USB_ActivateEndpoint+0x22>
      wEpRegVal |= USB_EP_INTERRUPT;
 80028bc:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 80028c0:	e7fa      	b.n	80028b8 <USB_ActivateEndpoint+0xa4>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80028c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028c6:	e7f7      	b.n	80028b8 <USB_ActivateEndpoint+0xa4>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80028c8:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80028cc:	690e      	ldr	r6, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80028ce:	4414      	add	r4, r2
 80028d0:	f8a4 5408 	strh.w	r5, [r4, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80028d4:	780a      	ldrb	r2, [r1, #0]
 80028d6:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 80028da:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80028de:	b2a4      	uxth	r4, r4
 80028e0:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 80028e4:	bb56      	cbnz	r6, 800293c <USB_ActivateEndpoint+0x128>
 80028e6:	5b15      	ldrh	r5, [r2, r4]
 80028e8:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 80028ec:	042d      	lsls	r5, r5, #16
 80028ee:	0c2d      	lsrs	r5, r5, #16
 80028f0:	5315      	strh	r5, [r2, r4]
 80028f2:	5b15      	ldrh	r5, [r2, r4]
 80028f4:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 80028f8:	5315      	strh	r5, [r2, r4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80028fa:	780c      	ldrb	r4, [r1, #0]
 80028fc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002900:	0457      	lsls	r7, r2, #17
 8002902:	d50b      	bpl.n	800291c <USB_ActivateEndpoint+0x108>
 8002904:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002908:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800290c:	0512      	lsls	r2, r2, #20
 800290e:	0d12      	lsrs	r2, r2, #20
 8002910:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002914:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002918:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800291c:	7809      	ldrb	r1, [r1, #0]
 800291e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002922:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002926:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800292a:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800292e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002932:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002936:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800293a:	e7ba      	b.n	80028b2 <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800293c:	2e3e      	cmp	r6, #62	; 0x3e
 800293e:	d806      	bhi.n	800294e <USB_ActivateEndpoint+0x13a>
 8002940:	0875      	lsrs	r5, r6, #1
 8002942:	07f6      	lsls	r6, r6, #31
 8002944:	bf48      	it	mi
 8002946:	3501      	addmi	r5, #1
 8002948:	02ad      	lsls	r5, r5, #10
 800294a:	b2ad      	uxth	r5, r5
 800294c:	e7d4      	b.n	80028f8 <USB_ActivateEndpoint+0xe4>
 800294e:	0977      	lsrs	r7, r6, #5
 8002950:	06f5      	lsls	r5, r6, #27
 8002952:	4d5c      	ldr	r5, [pc, #368]	; (8002ac4 <USB_ActivateEndpoint+0x2b0>)
 8002954:	bf08      	it	eq
 8002956:	f107 37ff 	addeq.w	r7, r7, #4294967295
 800295a:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 800295e:	e7f4      	b.n	800294a <USB_ActivateEndpoint+0x136>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002960:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 8002964:	4015      	ands	r5, r2
 8002966:	f445 4501 	orr.w	r5, r5, #33024	; 0x8100
 800296a:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800296e:	f823 5024 	strh.w	r5, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002972:	780c      	ldrb	r4, [r1, #0]
 8002974:	890d      	ldrh	r5, [r1, #8]
 8002976:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 800297a:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 800297e:	086d      	lsrs	r5, r5, #1
 8002980:	b2b6      	uxth	r6, r6
 8002982:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002986:	006d      	lsls	r5, r5, #1
 8002988:	53a5      	strh	r5, [r4, r6]
 800298a:	780c      	ldrb	r4, [r1, #0]
 800298c:	894d      	ldrh	r5, [r1, #10]
 800298e:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8002992:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8002996:	086d      	lsrs	r5, r5, #1
 8002998:	f504 6481 	add.w	r4, r4, #1032	; 0x408
 800299c:	006d      	lsls	r5, r5, #1
 800299e:	b2b6      	uxth	r6, r6
 80029a0:	53a5      	strh	r5, [r4, r6]
    if (ep->is_in == 0U)
 80029a2:	784c      	ldrb	r4, [r1, #1]
 80029a4:	780d      	ldrb	r5, [r1, #0]
 80029a6:	2c00      	cmp	r4, #0
 80029a8:	d143      	bne.n	8002a32 <USB_ActivateEndpoint+0x21e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80029aa:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 80029ae:	0466      	lsls	r6, r4, #17
 80029b0:	d508      	bpl.n	80029c4 <USB_ActivateEndpoint+0x1b0>
 80029b2:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 80029b6:	4022      	ands	r2, r4
 80029b8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80029bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029c0:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80029c4:	780c      	ldrb	r4, [r1, #0]
 80029c6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80029ca:	0655      	lsls	r5, r2, #25
 80029cc:	d50b      	bpl.n	80029e6 <USB_ActivateEndpoint+0x1d2>
 80029ce:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80029d2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80029d6:	0512      	lsls	r2, r2, #20
 80029d8:	0d12      	lsrs	r2, r2, #20
 80029da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029de:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80029e2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80029e6:	780c      	ldrb	r4, [r1, #0]
 80029e8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80029ec:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80029f0:	0512      	lsls	r2, r2, #20
 80029f2:	0d12      	lsrs	r2, r2, #20
 80029f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029f8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80029fc:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002a00:	f248 0480 	movw	r4, #32896	; 0x8080
 8002a04:	780d      	ldrb	r5, [r1, #0]
 8002a06:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8002a0a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a0e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002a12:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8002a16:	4322      	orrs	r2, r4
 8002a18:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002a1c:	7809      	ldrb	r1, [r1, #0]
 8002a1e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002a22:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002a26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a2a:	4314      	orrs	r4, r2
 8002a2c:	f823 4021 	strh.w	r4, [r3, r1, lsl #2]
 8002a30:	e73f      	b.n	80028b2 <USB_ActivateEndpoint+0x9e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002a32:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8002a36:	0464      	lsls	r4, r4, #17
 8002a38:	d508      	bpl.n	8002a4c <USB_ActivateEndpoint+0x238>
 8002a3a:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8002a3e:	4022      	ands	r2, r4
 8002a40:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002a44:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a48:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002a4c:	780c      	ldrb	r4, [r1, #0]
 8002a4e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002a52:	0652      	lsls	r2, r2, #25
 8002a54:	d50b      	bpl.n	8002a6e <USB_ActivateEndpoint+0x25a>
 8002a56:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002a5a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002a5e:	0512      	lsls	r2, r2, #20
 8002a60:	0d12      	lsrs	r2, r2, #20
 8002a62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a66:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002a6a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8002a6e:	780c      	ldrb	r4, [r1, #0]
 8002a70:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002a74:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002a78:	0512      	lsls	r2, r2, #20
 8002a7a:	0d12      	lsrs	r2, r2, #20
 8002a7c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002a80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a84:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8002a88:	78ca      	ldrb	r2, [r1, #3]
 8002a8a:	780c      	ldrb	r4, [r1, #0]
 8002a8c:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002a8e:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 8002a92:	4a0b      	ldr	r2, [pc, #44]	; (8002ac0 <USB_ActivateEndpoint+0x2ac>)
 8002a94:	ea02 0205 	and.w	r2, r2, r5
 8002a98:	bf18      	it	ne
 8002a9a:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002a9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002aa2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002aa6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002aaa:	7809      	ldrb	r1, [r1, #0]
 8002aac:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002ab0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002ab4:	0492      	lsls	r2, r2, #18
 8002ab6:	0c92      	lsrs	r2, r2, #18
 8002ab8:	e739      	b.n	800292e <USB_ActivateEndpoint+0x11a>
 8002aba:	bf00      	nop
 8002abc:	ffff8f8f 	.word	0xffff8f8f
 8002ac0:	ffff8fbf 	.word	0xffff8fbf
 8002ac4:	ffff8000 	.word	0xffff8000

08002ac8 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002ac8:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 8002aca:	7b0c      	ldrb	r4, [r1, #12]
 8002acc:	784a      	ldrb	r2, [r1, #1]
 8002ace:	780b      	ldrb	r3, [r1, #0]
 8002ad0:	bbbc      	cbnz	r4, 8002b42 <USB_DeactivateEndpoint+0x7a>
  {
    if (ep->is_in != 0U)
 8002ad2:	b1f2      	cbz	r2, 8002b12 <USB_DeactivateEndpoint+0x4a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002ad4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002ad8:	0652      	lsls	r2, r2, #25
 8002ada:	d50b      	bpl.n	8002af4 <USB_DeactivateEndpoint+0x2c>
 8002adc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002ae0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002ae4:	0512      	lsls	r2, r2, #20
 8002ae6:	0d12      	lsrs	r2, r2, #20
 8002ae8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002aec:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002af0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002af4:	780a      	ldrb	r2, [r1, #0]
 8002af6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002afa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002afe:	051b      	lsls	r3, r3, #20
 8002b00:	0d1b      	lsrs	r3, r3, #20
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b0a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8002b0e:	2000      	movs	r0, #0
 8002b10:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002b12:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002b16:	0454      	lsls	r4, r2, #17
 8002b18:	d50b      	bpl.n	8002b32 <USB_DeactivateEndpoint+0x6a>
 8002b1a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002b1e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002b22:	0512      	lsls	r2, r2, #20
 8002b24:	0d12      	lsrs	r2, r2, #20
 8002b26:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002b2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b2e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002b32:	780a      	ldrb	r2, [r1, #0]
 8002b34:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b3c:	049b      	lsls	r3, r3, #18
 8002b3e:	0c9b      	lsrs	r3, r3, #18
 8002b40:	e7df      	b.n	8002b02 <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 8002b42:	2a00      	cmp	r2, #0
 8002b44:	d144      	bne.n	8002bd0 <USB_DeactivateEndpoint+0x108>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002b46:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002b4a:	0452      	lsls	r2, r2, #17
 8002b4c:	d50b      	bpl.n	8002b66 <USB_DeactivateEndpoint+0x9e>
 8002b4e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002b52:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002b56:	0512      	lsls	r2, r2, #20
 8002b58:	0d12      	lsrs	r2, r2, #20
 8002b5a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002b5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b62:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002b66:	780a      	ldrb	r2, [r1, #0]
 8002b68:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b6c:	065c      	lsls	r4, r3, #25
 8002b6e:	d50b      	bpl.n	8002b88 <USB_DeactivateEndpoint+0xc0>
 8002b70:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b78:	051b      	lsls	r3, r3, #20
 8002b7a:	0d1b      	lsrs	r3, r3, #20
 8002b7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b84:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8002b88:	780a      	ldrb	r2, [r1, #0]
 8002b8a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b92:	051b      	lsls	r3, r3, #20
 8002b94:	0d1b      	lsrs	r3, r3, #20
 8002b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b9e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002ba2:	f248 0280 	movw	r2, #32896	; 0x8080
 8002ba6:	780c      	ldrb	r4, [r1, #0]
 8002ba8:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002bac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002bba:	7809      	ldrb	r1, [r1, #0]
 8002bbc:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002bc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
 8002bce:	e79e      	b.n	8002b0e <USB_DeactivateEndpoint+0x46>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002bd0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002bd4:	0452      	lsls	r2, r2, #17
 8002bd6:	d50b      	bpl.n	8002bf0 <USB_DeactivateEndpoint+0x128>
 8002bd8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002bdc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002be0:	0512      	lsls	r2, r2, #20
 8002be2:	0d12      	lsrs	r2, r2, #20
 8002be4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002be8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002bec:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002bf0:	780a      	ldrb	r2, [r1, #0]
 8002bf2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002bf6:	065b      	lsls	r3, r3, #25
 8002bf8:	d50b      	bpl.n	8002c12 <USB_DeactivateEndpoint+0x14a>
 8002bfa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002bfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c02:	051b      	lsls	r3, r3, #20
 8002c04:	0d1b      	lsrs	r3, r3, #20
 8002c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c0a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c0e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8002c12:	780a      	ldrb	r2, [r1, #0]
 8002c14:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002c18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c1c:	051b      	lsls	r3, r3, #20
 8002c1e:	0d1b      	lsrs	r3, r3, #20
 8002c20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c28:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002c2c:	f248 0280 	movw	r2, #32896	; 0x8080
 8002c30:	780c      	ldrb	r4, [r1, #0]
 8002c32:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002c44:	7809      	ldrb	r1, [r1, #0]
 8002c46:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002c4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c52:	e7b9      	b.n	8002bc8 <USB_DeactivateEndpoint+0x100>

08002c54 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8002c54:	784b      	ldrb	r3, [r1, #1]
 8002c56:	780a      	ldrb	r2, [r1, #0]
 8002c58:	b17b      	cbz	r3, 8002c7a <USB_EPSetStall+0x26>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8002c5a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c66:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8002c6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c72:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8002c76:	2000      	movs	r0, #0
 8002c78:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8002c7a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002c7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c86:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002c8a:	e7ee      	b.n	8002c6a <USB_EPSetStall+0x16>

08002c8c <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8002c8c:	7b0b      	ldrb	r3, [r1, #12]
 8002c8e:	bb23      	cbnz	r3, 8002cda <USB_EPClearStall+0x4e>
  {
    if (ep->is_in != 0U)
 8002c90:	784b      	ldrb	r3, [r1, #1]
 8002c92:	780a      	ldrb	r2, [r1, #0]
 8002c94:	b31b      	cbz	r3, 8002cde <USB_EPClearStall+0x52>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002c96:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002c9a:	065b      	lsls	r3, r3, #25
 8002c9c:	d50b      	bpl.n	8002cb6 <USB_EPClearStall+0x2a>
 8002c9e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002ca2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ca6:	051b      	lsls	r3, r3, #20
 8002ca8:	0d1b      	lsrs	r3, r3, #20
 8002caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002cb2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8002cb6:	78cb      	ldrb	r3, [r1, #3]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d00e      	beq.n	8002cda <USB_EPClearStall+0x4e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002cbc:	780a      	ldrb	r2, [r1, #0]
 8002cbe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cca:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002cce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cd6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8002cda:	2000      	movs	r0, #0
 8002cdc:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002cde:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002ce2:	045b      	lsls	r3, r3, #17
 8002ce4:	d50b      	bpl.n	8002cfe <USB_EPClearStall+0x72>
 8002ce6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002cea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cee:	051b      	lsls	r3, r3, #20
 8002cf0:	0d1b      	lsrs	r3, r3, #20
 8002cf2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cfa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002cfe:	780a      	ldrb	r2, [r1, #0]
 8002d00:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002d04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d0c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002d10:	e7dd      	b.n	8002cce <USB_EPClearStall+0x42>

08002d12 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8002d12:	b911      	cbnz	r1, 8002d1a <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8002d14:	2380      	movs	r3, #128	; 0x80
 8002d16:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8002d1a:	2000      	movs	r0, #0
 8002d1c:	4770      	bx	lr

08002d1e <USB_DevConnect>:
 8002d1e:	2000      	movs	r0, #0
 8002d20:	4770      	bx	lr

08002d22 <USB_DevDisconnect>:
 8002d22:	2000      	movs	r0, #0
 8002d24:	4770      	bx	lr

08002d26 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8002d26:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8002d2a:	4770      	bx	lr

08002d2c <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002d2c:	2000      	movs	r0, #0
 8002d2e:	4770      	bx	lr

08002d30 <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002d30:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8002d34:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002d36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8002d3a:	085b      	lsrs	r3, r3, #1
 8002d3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d100      	bne.n	8002d46 <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8002d44:	4770      	bx	lr
 8002d46:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 8002d4a:	f822 0b04 	strh.w	r0, [r2], #4
 8002d4e:	e7f7      	b.n	8002d40 <USB_WritePMA+0x10>

08002d50 <USB_EPStartXfer>:
{
 8002d50:	b570      	push	{r4, r5, r6, lr}
 8002d52:	460d      	mov	r5, r1
  if (ep->is_in == 1U)
 8002d54:	7849      	ldrb	r1, [r1, #1]
{
 8002d56:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 8002d58:	2901      	cmp	r1, #1
 8002d5a:	69aa      	ldr	r2, [r5, #24]
 8002d5c:	692b      	ldr	r3, [r5, #16]
 8002d5e:	7b28      	ldrb	r0, [r5, #12]
 8002d60:	d15d      	bne.n	8002e1e <USB_EPStartXfer+0xce>
    if (ep->xfer_len > ep->maxpacket)
 8002d62:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8002d64:	bf9d      	ittte	ls
 8002d66:	2300      	movls	r3, #0
 8002d68:	61ab      	strls	r3, [r5, #24]
 8002d6a:	4613      	movls	r3, r2
      ep->xfer_len -= len;
 8002d6c:	1ad2      	subhi	r2, r2, r3
 8002d6e:	bf88      	it	hi
 8002d70:	61aa      	strhi	r2, [r5, #24]
 8002d72:	6969      	ldr	r1, [r5, #20]
 8002d74:	b29e      	uxth	r6, r3
    if (ep->doublebuffer == 0U)
 8002d76:	b9e8      	cbnz	r0, 8002db4 <USB_EPStartXfer+0x64>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002d78:	4633      	mov	r3, r6
 8002d7a:	88ea      	ldrh	r2, [r5, #6]
 8002d7c:	4620      	mov	r0, r4
 8002d7e:	f7ff ffd7 	bl	8002d30 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002d82:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8002d86:	782a      	ldrb	r2, [r5, #0]
 8002d88:	f204 4304 	addw	r3, r4, #1028	; 0x404
 8002d8c:	0112      	lsls	r2, r2, #4
 8002d8e:	440b      	add	r3, r1
 8002d90:	52d6      	strh	r6, [r2, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002d92:	782a      	ldrb	r2, [r5, #0]
 8002d94:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002d98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002da0:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002da4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dac:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 8002db0:	2000      	movs	r0, #0
 8002db2:	bd70      	pop	{r4, r5, r6, pc}
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002db4:	782b      	ldrb	r3, [r5, #0]
 8002db6:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002dba:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002dbe:	0652      	lsls	r2, r2, #25
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002dc0:	bf4b      	itete	mi
 8002dc2:	f204 420c 	addwmi	r2, r4, #1036	; 0x40c
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002dc6:	f204 4204 	addwpl	r2, r4, #1028	; 0x404
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002dca:	1812      	addmi	r2, r2, r0
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002dcc:	1812      	addpl	r2, r2, r0
 8002dce:	ea4f 1303 	mov.w	r3, r3, lsl #4
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002dd2:	bf4b      	itete	mi
 8002dd4:	52d6      	strhmi	r6, [r2, r3]
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002dd6:	52d6      	strhpl	r6, [r2, r3]
        pmabuffer = ep->pmaaddr1;
 8002dd8:	896a      	ldrhmi	r2, [r5, #10]
        pmabuffer = ep->pmaaddr0;
 8002dda:	892a      	ldrhpl	r2, [r5, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002ddc:	4633      	mov	r3, r6
 8002dde:	4620      	mov	r0, r4
 8002de0:	f7ff ffa6 	bl	8002d30 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002de4:	786b      	ldrb	r3, [r5, #1]
 8002de6:	782a      	ldrb	r2, [r5, #0]
 8002de8:	b963      	cbnz	r3, 8002e04 <USB_EPStartXfer+0xb4>
 8002dea:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002dee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002df2:	051b      	lsls	r3, r3, #20
 8002df4:	0d1b      	lsrs	r3, r3, #20
 8002df6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dfa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002dfe:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8002e02:	e7c6      	b.n	8002d92 <USB_EPStartXfer+0x42>
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d1c4      	bne.n	8002d92 <USB_EPStartXfer+0x42>
 8002e08:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002e0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e10:	051b      	lsls	r3, r3, #20
 8002e12:	0d1b      	lsrs	r3, r3, #20
 8002e14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e1c:	e7ef      	b.n	8002dfe <USB_EPStartXfer+0xae>
    if (ep->xfer_len > ep->maxpacket)
 8002e1e:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8002e20:	bf93      	iteet	ls
 8002e22:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 8002e24:	1ad2      	subhi	r2, r2, r3
 8002e26:	61aa      	strhi	r2, [r5, #24]
      ep->xfer_len = 0U;
 8002e28:	61ab      	strls	r3, [r5, #24]
 8002e2a:	bf98      	it	ls
 8002e2c:	4613      	movls	r3, r2
 8002e2e:	782a      	ldrb	r2, [r5, #0]
    if (ep->doublebuffer == 0U)
 8002e30:	b990      	cbnz	r0, 8002e58 <USB_EPStartXfer+0x108>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002e32:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8002e36:	f204 400c 	addw	r0, r4, #1036	; 0x40c
 8002e3a:	4401      	add	r1, r0
 8002e3c:	0112      	lsls	r2, r2, #4
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d13b      	bne.n	8002eba <USB_EPStartXfer+0x16a>
 8002e42:	5a8b      	ldrh	r3, [r1, r2]
 8002e44:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e48:	041b      	lsls	r3, r3, #16
 8002e4a:	0c1b      	lsrs	r3, r3, #16
 8002e4c:	528b      	strh	r3, [r1, r2]
 8002e4e:	5a8b      	ldrh	r3, [r1, r2]
 8002e50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e54:	528b      	strh	r3, [r1, r2]
 8002e56:	e039      	b.n	8002ecc <USB_EPStartXfer+0x17c>
 8002e58:	b981      	cbnz	r1, 8002e7c <USB_EPStartXfer+0x12c>
 8002e5a:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8002e5e:	f204 4004 	addw	r0, r4, #1028	; 0x404
 8002e62:	4401      	add	r1, r0
 8002e64:	0112      	lsls	r2, r2, #4
 8002e66:	b9b3      	cbnz	r3, 8002e96 <USB_EPStartXfer+0x146>
 8002e68:	5a88      	ldrh	r0, [r1, r2]
 8002e6a:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8002e6e:	0400      	lsls	r0, r0, #16
 8002e70:	0c00      	lsrs	r0, r0, #16
 8002e72:	5288      	strh	r0, [r1, r2]
 8002e74:	5a88      	ldrh	r0, [r1, r2]
 8002e76:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8002e7a:	5288      	strh	r0, [r1, r2]
 8002e7c:	7869      	ldrb	r1, [r5, #1]
 8002e7e:	782a      	ldrb	r2, [r5, #0]
 8002e80:	2900      	cmp	r1, #0
 8002e82:	d0d6      	beq.n	8002e32 <USB_EPStartXfer+0xe2>
 8002e84:	2901      	cmp	r1, #1
 8002e86:	d121      	bne.n	8002ecc <USB_EPStartXfer+0x17c>
 8002e88:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8002e8c:	f204 410c 	addw	r1, r4, #1036	; 0x40c
 8002e90:	4401      	add	r1, r0
 8002e92:	0112      	lsls	r2, r2, #4
 8002e94:	e02c      	b.n	8002ef0 <USB_EPStartXfer+0x1a0>
 8002e96:	2b3e      	cmp	r3, #62	; 0x3e
 8002e98:	d806      	bhi.n	8002ea8 <USB_EPStartXfer+0x158>
 8002e9a:	0858      	lsrs	r0, r3, #1
 8002e9c:	07de      	lsls	r6, r3, #31
 8002e9e:	bf48      	it	mi
 8002ea0:	3001      	addmi	r0, #1
 8002ea2:	0280      	lsls	r0, r0, #10
 8002ea4:	b280      	uxth	r0, r0
 8002ea6:	e7e8      	b.n	8002e7a <USB_EPStartXfer+0x12a>
 8002ea8:	095e      	lsrs	r6, r3, #5
 8002eaa:	06d8      	lsls	r0, r3, #27
 8002eac:	4811      	ldr	r0, [pc, #68]	; (8002ef4 <USB_EPStartXfer+0x1a4>)
 8002eae:	bf08      	it	eq
 8002eb0:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8002eb4:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8002eb8:	e7f4      	b.n	8002ea4 <USB_EPStartXfer+0x154>
 8002eba:	2b3e      	cmp	r3, #62	; 0x3e
 8002ebc:	d810      	bhi.n	8002ee0 <USB_EPStartXfer+0x190>
 8002ebe:	0858      	lsrs	r0, r3, #1
 8002ec0:	07de      	lsls	r6, r3, #31
 8002ec2:	bf48      	it	mi
 8002ec4:	3001      	addmi	r0, #1
 8002ec6:	0280      	lsls	r0, r0, #10
 8002ec8:	b280      	uxth	r0, r0
 8002eca:	5288      	strh	r0, [r1, r2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002ecc:	782a      	ldrb	r2, [r5, #0]
 8002ece:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8002ed2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eda:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002ede:	e761      	b.n	8002da4 <USB_EPStartXfer+0x54>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002ee0:	0958      	lsrs	r0, r3, #5
 8002ee2:	06db      	lsls	r3, r3, #27
 8002ee4:	4b03      	ldr	r3, [pc, #12]	; (8002ef4 <USB_EPStartXfer+0x1a4>)
 8002ee6:	bf08      	it	eq
 8002ee8:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8002eec:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	e7af      	b.n	8002e54 <USB_EPStartXfer+0x104>
 8002ef4:	ffff8000 	.word	0xffff8000

08002ef8 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002ef8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 8002efc:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002efe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8002f02:	085d      	lsrs	r5, r3, #1
 8002f04:	4608      	mov	r0, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002f06:	4617      	mov	r7, r2

  for (i = n; i != 0U; i--)
 8002f08:	462e      	mov	r6, r5
 8002f0a:	3002      	adds	r0, #2
 8002f0c:	b936      	cbnz	r6, 8002f1c <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8002f0e:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8002f10:	bf44      	itt	mi
 8002f12:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8002f16:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 8002f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8002f1c:	f837 4b04 	ldrh.w	r4, [r7], #4
  for (i = n; i != 0U; i--)
 8002f20:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 8002f22:	b2a4      	uxth	r4, r4
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8002f24:	f800 4c02 	strb.w	r4, [r0, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8002f28:	0a24      	lsrs	r4, r4, #8
 8002f2a:	f800 4c01 	strb.w	r4, [r0, #-1]
 8002f2e:	e7ec      	b.n	8002f0a <USB_ReadPMA+0x12>

08002f30 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8002f30:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002f32:	4903      	ldr	r1, [pc, #12]	; (8002f40 <MX_FATFS_Init+0x10>)
 8002f34:	4803      	ldr	r0, [pc, #12]	; (8002f44 <MX_FATFS_Init+0x14>)
 8002f36:	f000 fd37 	bl	80039a8 <FATFS_LinkDriver>
 8002f3a:	4b03      	ldr	r3, [pc, #12]	; (8002f48 <MX_FATFS_Init+0x18>)
 8002f3c:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8002f3e:	bd08      	pop	{r3, pc}
 8002f40:	20002290 	.word	0x20002290
 8002f44:	20000018 	.word	0x20000018
 8002f48:	20002294 	.word	0x20002294

08002f4c <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	4b02      	ldr	r3, [pc, #8]	; (8002f58 <USER_initialize+0xc>)
 8002f50:	701a      	strb	r2, [r3, #0]
    return Stat;
 8002f52:	7818      	ldrb	r0, [r3, #0]
  /* USER CODE END INIT */
}
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	20000014 	.word	0x20000014

08002f5c <USER_read>:
)
{
  /* USER CODE BEGIN READ */
    return RES_OK;
  /* USER CODE END READ */
}
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	4770      	bx	lr

08002f60 <USER_ioctl>:
{
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
    return res;
  /* USER CODE END IOCTL */
}
 8002f60:	2001      	movs	r0, #1
 8002f62:	4770      	bx	lr

08002f64 <USER_write>:
 8002f64:	2000      	movs	r0, #0
 8002f66:	4770      	bx	lr

08002f68 <USER_status>:
 8002f68:	2201      	movs	r2, #1
 8002f6a:	4b02      	ldr	r3, [pc, #8]	; (8002f74 <USER_status+0xc>)
 8002f6c:	701a      	strb	r2, [r3, #0]
 8002f6e:	7818      	ldrb	r0, [r3, #0]
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	20000014 	.word	0x20000014

08002f78 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8002f78:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8002f7c:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8002f7e:	b16b      	cbz	r3, 8002f9c <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002f80:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8002f84:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8002f88:	28ff      	cmp	r0, #255	; 0xff
 8002f8a:	d007      	beq.n	8002f9c <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8002f92:	4621      	mov	r1, r4
 8002f94:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8002f96:	23ff      	movs	r3, #255	; 0xff
 8002f98:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8002f9c:	2000      	movs	r0, #0
 8002f9e:	bd10      	pop	{r4, pc}

08002fa0 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8002fa0:	2343      	movs	r3, #67	; 0x43
 8002fa2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8002fa4:	4800      	ldr	r0, [pc, #0]	; (8002fa8 <USBD_CDC_GetFSCfgDesc+0x8>)
 8002fa6:	4770      	bx	lr
 8002fa8:	20000064 	.word	0x20000064

08002fac <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8002fac:	2343      	movs	r3, #67	; 0x43
 8002fae:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8002fb0:	4800      	ldr	r0, [pc, #0]	; (8002fb4 <USBD_CDC_GetHSCfgDesc+0x8>)
 8002fb2:	4770      	bx	lr
 8002fb4:	200000a8 	.word	0x200000a8

08002fb8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8002fb8:	2343      	movs	r3, #67	; 0x43
 8002fba:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8002fbc:	4800      	ldr	r0, [pc, #0]	; (8002fc0 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8002fbe:	4770      	bx	lr
 8002fc0:	200000f8 	.word	0x200000f8

08002fc4 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8002fc4:	230a      	movs	r3, #10
 8002fc6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8002fc8:	4800      	ldr	r0, [pc, #0]	; (8002fcc <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8002fca:	4770      	bx	lr
 8002fcc:	200000ec 	.word	0x200000ec

08002fd0 <USBD_CDC_DataOut>:
{
 8002fd0:	b538      	push	{r3, r4, r5, lr}
 8002fd2:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8002fd4:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8002fd8:	f002 fce0 	bl	800599c <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8002fdc:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8002fe0:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8002fe4:	b14b      	cbz	r3, 8002ffa <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8002fe6:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
 8002fea:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8002ff4:	4798      	blx	r3
    return USBD_OK;
 8002ff6:	2000      	movs	r0, #0
}
 8002ff8:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8002ffa:	2002      	movs	r0, #2
 8002ffc:	e7fc      	b.n	8002ff8 <USBD_CDC_DataOut+0x28>

08002ffe <USBD_CDC_DataIn>:
{
 8002ffe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003000:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 8003004:	b1ce      	cbz	r6, 800303a <USBD_CDC_DataIn+0x3c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003006:	2314      	movs	r3, #20
 8003008:	fb03 0301 	mla	r3, r3, r1, r0
 800300c:	69da      	ldr	r2, [r3, #28]
 800300e:	b182      	cbz	r2, 8003032 <USBD_CDC_DataIn+0x34>
 8003010:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 8003014:	eb04 1441 	add.w	r4, r4, r1, lsl #5
 8003018:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800301a:	fbb2 f4f5 	udiv	r4, r2, r5
 800301e:	fb05 2414 	mls	r4, r5, r4, r2
 8003022:	b934      	cbnz	r4, 8003032 <USBD_CDC_DataIn+0x34>
      pdev->ep_in[epnum].total_length = 0U;
 8003024:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003026:	4622      	mov	r2, r4
 8003028:	4623      	mov	r3, r4
 800302a:	f002 fc9b 	bl	8005964 <USBD_LL_Transmit>
    return USBD_OK;
 800302e:	4620      	mov	r0, r4
}
 8003030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8003032:	2000      	movs	r0, #0
 8003034:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 8003038:	e7fa      	b.n	8003030 <USBD_CDC_DataIn+0x32>
    return USBD_FAIL;
 800303a:	2002      	movs	r0, #2
 800303c:	e7f8      	b.n	8003030 <USBD_CDC_DataIn+0x32>

0800303e <USBD_CDC_Setup>:
{
 800303e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t ifalt = 0U;
 8003042:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003046:	780a      	ldrb	r2, [r1, #0]
{
 8003048:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800304a:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 800304e:	460e      	mov	r6, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003050:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8003054:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 8003058:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800305c:	d028      	beq.n	80030b0 <USBD_CDC_Setup+0x72>
 800305e:	2c20      	cmp	r4, #32
 8003060:	d145      	bne.n	80030ee <USBD_CDC_Setup+0xb0>
      if (req->wLength)
 8003062:	88cc      	ldrh	r4, [r1, #6]
 8003064:	784b      	ldrb	r3, [r1, #1]
 8003066:	b1e4      	cbz	r4, 80030a2 <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 8003068:	0612      	lsls	r2, r2, #24
 800306a:	d511      	bpl.n	8003090 <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800306c:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8003070:	4639      	mov	r1, r7
 8003072:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8003076:	4618      	mov	r0, r3
 8003078:	4622      	mov	r2, r4
 800307a:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800307c:	88f2      	ldrh	r2, [r6, #6]
 800307e:	4639      	mov	r1, r7
 8003080:	4628      	mov	r0, r5
 8003082:	f000 fc2c 	bl	80038de <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8003086:	4644      	mov	r4, r8
}
 8003088:	4620      	mov	r0, r4
 800308a:	b003      	add	sp, #12
 800308c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hcdc->CmdOpCode = req->bRequest;
 8003090:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8003094:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003098:	4622      	mov	r2, r4
 800309a:	4639      	mov	r1, r7
 800309c:	f000 fc34 	bl	8003908 <USBD_CtlPrepareRx>
 80030a0:	e7f1      	b.n	8003086 <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80030a2:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 80030a6:	4618      	mov	r0, r3
 80030a8:	6895      	ldr	r5, [r2, #8]
 80030aa:	4622      	mov	r2, r4
 80030ac:	47a8      	blx	r5
 80030ae:	e7eb      	b.n	8003088 <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 80030b0:	784f      	ldrb	r7, [r1, #1]
 80030b2:	2f0a      	cmp	r7, #10
 80030b4:	d00d      	beq.n	80030d2 <USBD_CDC_Setup+0x94>
 80030b6:	2f0b      	cmp	r7, #11
 80030b8:	d015      	beq.n	80030e6 <USBD_CDC_Setup+0xa8>
 80030ba:	b9c7      	cbnz	r7, 80030ee <USBD_CDC_Setup+0xb0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80030bc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80030c0:	2b03      	cmp	r3, #3
 80030c2:	d114      	bne.n	80030ee <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80030c4:	2202      	movs	r2, #2
 80030c6:	f10d 0106 	add.w	r1, sp, #6
 80030ca:	f000 fc08 	bl	80038de <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80030ce:	463c      	mov	r4, r7
 80030d0:	e7da      	b.n	8003088 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80030d2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80030d6:	2b03      	cmp	r3, #3
 80030d8:	d109      	bne.n	80030ee <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80030da:	2201      	movs	r2, #1
 80030dc:	f10d 0105 	add.w	r1, sp, #5
 80030e0:	f000 fbfd 	bl	80038de <USBD_CtlSendData>
 80030e4:	e7d0      	b.n	8003088 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80030e6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80030ea:	2b03      	cmp	r3, #3
 80030ec:	d0cc      	beq.n	8003088 <USBD_CDC_Setup+0x4a>
          USBD_CtlError(pdev, req);
 80030ee:	4631      	mov	r1, r6
 80030f0:	4628      	mov	r0, r5
 80030f2:	f000 fbcd 	bl	8003890 <USBD_CtlError>
          ret = USBD_FAIL;
 80030f6:	2402      	movs	r4, #2
          break;
 80030f8:	e7c6      	b.n	8003088 <USBD_CDC_Setup+0x4a>

080030fa <USBD_CDC_DeInit>:
{
 80030fa:	b538      	push	{r3, r4, r5, lr}
 80030fc:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80030fe:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8003100:	2181      	movs	r1, #129	; 0x81
 8003102:	f002 fbe7 	bl	80058d4 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003106:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003108:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800310a:	4620      	mov	r0, r4
 800310c:	f002 fbe2 	bl	80058d4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8003110:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8003114:	2182      	movs	r1, #130	; 0x82
 8003116:	4620      	mov	r0, r4
 8003118:	f002 fbdc 	bl	80058d4 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800311c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8003120:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8003122:	b14b      	cbz	r3, 8003138 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003124:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800312c:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8003130:	f002 fc3c 	bl	80059ac <USBD_static_free>
    pdev->pClassData = NULL;
 8003134:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8003138:	2000      	movs	r0, #0
 800313a:	bd38      	pop	{r3, r4, r5, pc}

0800313c <USBD_CDC_Init>:
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800313c:	7c03      	ldrb	r3, [r0, #16]
{
 800313e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003142:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003144:	bbcb      	cbnz	r3, 80031ba <USBD_CDC_Init+0x7e>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003146:	f44f 7300 	mov.w	r3, #512	; 0x200
 800314a:	2202      	movs	r2, #2
 800314c:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800314e:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003150:	f002 fbb0 	bl	80058b4 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003154:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003158:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800315a:	4629      	mov	r1, r5
 800315c:	2202      	movs	r2, #2
 800315e:	4620      	mov	r0, r4
 8003160:	f002 fba8 	bl	80058b4 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003164:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003168:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800316a:	2308      	movs	r3, #8
 800316c:	2203      	movs	r2, #3
 800316e:	2182      	movs	r1, #130	; 0x82
 8003170:	4620      	mov	r0, r4
 8003172:	f002 fb9f 	bl	80058b4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003176:	6425      	str	r5, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003178:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800317c:	f002 fc12 	bl	80059a4 <USBD_static_malloc>
 8003180:	4606      	mov	r6, r0
 8003182:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8003186:	b350      	cbz	r0, 80031de <USBD_CDC_Init+0xa2>
    hcdc->TxState = 0U;
 8003188:	2700      	movs	r7, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800318a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4798      	blx	r3
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003192:	f894 8010 	ldrb.w	r8, [r4, #16]
    hcdc->TxState = 0U;
 8003196:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    hcdc->RxState = 0U;
 800319a:	f8c6 7218 	str.w	r7, [r6, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800319e:	f1b8 0f00 	cmp.w	r8, #0
 80031a2:	d113      	bne.n	80031cc <USBD_CDC_Init+0x90>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80031a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031a8:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80031ac:	4629      	mov	r1, r5
 80031ae:	4620      	mov	r0, r4
 80031b0:	f002 fbe6 	bl	8005980 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80031b4:	4640      	mov	r0, r8
}
 80031b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80031ba:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80031bc:	2340      	movs	r3, #64	; 0x40
 80031be:	2202      	movs	r2, #2
 80031c0:	2181      	movs	r1, #129	; 0x81
 80031c2:	f002 fb77 	bl	80058b4 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80031c6:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80031c8:	2340      	movs	r3, #64	; 0x40
 80031ca:	e7c6      	b.n	800315a <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80031cc:	2340      	movs	r3, #64	; 0x40
 80031ce:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80031d2:	4629      	mov	r1, r5
 80031d4:	4620      	mov	r0, r4
 80031d6:	f002 fbd3 	bl	8005980 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80031da:	4638      	mov	r0, r7
 80031dc:	e7eb      	b.n	80031b6 <USBD_CDC_Init+0x7a>
    ret = 1U;
 80031de:	4628      	mov	r0, r5
 80031e0:	e7e9      	b.n	80031b6 <USBD_CDC_Init+0x7a>

080031e2 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 80031e2:	b119      	cbz	r1, 80031ec <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 80031e4:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 80031e8:	2000      	movs	r0, #0
 80031ea:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80031ec:	2002      	movs	r0, #2
  }

  return ret;
}
 80031ee:	4770      	bx	lr

080031f0 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80031f0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 80031f4:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 80031f6:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80031fa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 80031fe:	4770      	bx	lr

08003200 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8003200:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 8003204:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8003206:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800320a:	4770      	bx	lr

0800320c <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800320c:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8003210:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8003212:	b162      	cbz	r2, 800322e <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003214:	7c04      	ldrb	r4, [r0, #16]
 8003216:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800321a:	b934      	cbnz	r4, 800322a <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800321c:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003220:	2101      	movs	r1, #1
 8003222:	f002 fbad 	bl	8005980 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8003226:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 8003228:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 800322a:	2340      	movs	r3, #64	; 0x40
 800322c:	e7f8      	b.n	8003220 <USBD_CDC_ReceivePacket+0x14>
    return USBD_FAIL;
 800322e:	2002      	movs	r0, #2
 8003230:	e7fa      	b.n	8003228 <USBD_CDC_ReceivePacket+0x1c>

08003232 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8003232:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8003234:	b180      	cbz	r0, 8003258 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8003236:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800323a:	b113      	cbz	r3, 8003242 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800323c:	2300      	movs	r3, #0
 800323e:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8003242:	b109      	cbz	r1, 8003248 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8003244:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003248:	2301      	movs	r3, #1
  pdev->id = id;
 800324a:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 800324c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003250:	f002 fae0 	bl	8005814 <USBD_LL_Init>

  return USBD_OK;
 8003254:	2000      	movs	r0, #0
}
 8003256:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8003258:	2002      	movs	r0, #2
 800325a:	e7fc      	b.n	8003256 <USBD_Init+0x24>

0800325c <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 800325c:	b119      	cbz	r1, 8003266 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800325e:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8003262:	2000      	movs	r0, #0
 8003264:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8003266:	2002      	movs	r0, #2
  }

  return status;
}
 8003268:	4770      	bx	lr

0800326a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800326a:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800326c:	f002 fb14 	bl	8005898 <USBD_LL_Start>

  return USBD_OK;
}
 8003270:	2000      	movs	r0, #0
 8003272:	bd08      	pop	{r3, pc}

08003274 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003274:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8003276:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800327a:	b90b      	cbnz	r3, 8003280 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 800327c:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 800327e:	bd08      	pop	{r3, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4798      	blx	r3
 8003284:	2800      	cmp	r0, #0
 8003286:	d0fa      	beq.n	800327e <USBD_SetClassConfig+0xa>
 8003288:	e7f8      	b.n	800327c <USBD_SetClassConfig+0x8>

0800328a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800328a:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800328c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	4798      	blx	r3

  return USBD_OK;
}
 8003294:	2000      	movs	r0, #0
 8003296:	bd08      	pop	{r3, pc}

08003298 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003298:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800329a:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 800329e:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80032a0:	4628      	mov	r0, r5
 80032a2:	f000 fae1 	bl	8003868 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80032a6:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80032a8:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 80032ac:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 80032b0:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 80032b4:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 80032b8:	f001 031f 	and.w	r3, r1, #31
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d00e      	beq.n	80032de <USBD_LL_SetupStage+0x46>
 80032c0:	d307      	bcc.n	80032d2 <USBD_LL_SetupStage+0x3a>
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d010      	beq.n	80032e8 <USBD_LL_SetupStage+0x50>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80032c6:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80032ca:	4620      	mov	r0, r4
 80032cc:	f002 fb10 	bl	80058f0 <USBD_LL_StallEP>
      break;
 80032d0:	e003      	b.n	80032da <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 80032d2:	4629      	mov	r1, r5
 80032d4:	4620      	mov	r0, r4
 80032d6:	f000 f8f5 	bl	80034c4 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 80032da:	2000      	movs	r0, #0
 80032dc:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 80032de:	4629      	mov	r1, r5
 80032e0:	4620      	mov	r0, r4
 80032e2:	f000 fa13 	bl	800370c <USBD_StdItfReq>
      break;
 80032e6:	e7f8      	b.n	80032da <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 80032e8:	4629      	mov	r1, r5
 80032ea:	4620      	mov	r0, r4
 80032ec:	f000 fa33 	bl	8003756 <USBD_StdEPReq>
      break;
 80032f0:	e7f3      	b.n	80032da <USBD_LL_SetupStage+0x42>

080032f2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80032f2:	b570      	push	{r4, r5, r6, lr}
 80032f4:	4605      	mov	r5, r0
 80032f6:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80032f8:	bb49      	cbnz	r1, 800334e <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80032fa:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80032fe:	2b03      	cmp	r3, #3
 8003300:	d11e      	bne.n	8003340 <USBD_LL_DataOutStage+0x4e>
    {
      if (pep->rem_length > pep->maxpacket)
 8003302:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 8003306:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 800330a:	4293      	cmp	r3, r2
 800330c:	d90b      	bls.n	8003326 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -= pep->maxpacket;
 800330e:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx(pdev, pdata,
 8003310:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 8003312:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8003316:	bf8c      	ite	hi
 8003318:	b29a      	uxthhi	r2, r3
 800331a:	b292      	uxthls	r2, r2
 800331c:	4631      	mov	r1, r6
 800331e:	f000 fb02 	bl	8003926 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8003322:	2000      	movs	r0, #0
}
 8003324:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003326:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	b123      	cbz	r3, 8003338 <USBD_LL_DataOutStage+0x46>
 800332e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003332:	2a03      	cmp	r2, #3
 8003334:	d100      	bne.n	8003338 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 8003336:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8003338:	4628      	mov	r0, r5
 800333a:	f000 fafc 	bl	8003936 <USBD_CtlSendStatus>
 800333e:	e7f0      	b.n	8003322 <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8003340:	2b05      	cmp	r3, #5
 8003342:	d1ee      	bne.n	8003322 <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 8003344:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8003348:	f002 fad2 	bl	80058f0 <USBD_LL_StallEP>
 800334c:	e7e9      	b.n	8003322 <USBD_LL_DataOutStage+0x30>
  else if ((pdev->pClass->DataOut != NULL) &&
 800334e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	b12b      	cbz	r3, 8003362 <USBD_LL_DataOutStage+0x70>
 8003356:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800335a:	2a03      	cmp	r2, #3
 800335c:	d101      	bne.n	8003362 <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 800335e:	4798      	blx	r3
 8003360:	e7df      	b.n	8003322 <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 8003362:	2002      	movs	r0, #2
 8003364:	e7de      	b.n	8003324 <USBD_LL_DataOutStage+0x32>

08003366 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8003366:	b570      	push	{r4, r5, r6, lr}
 8003368:	4613      	mov	r3, r2
 800336a:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800336c:	460e      	mov	r6, r1
 800336e:	2900      	cmp	r1, #0
 8003370:	d147      	bne.n	8003402 <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8003372:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8003376:	2a02      	cmp	r2, #2
 8003378:	d13c      	bne.n	80033f4 <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 800337a:	e9d0 5208 	ldrd	r5, r2, [r0, #32]
 800337e:	4295      	cmp	r5, r2
 8003380:	d913      	bls.n	80033aa <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 8003382:	1aaa      	subs	r2, r5, r2
 8003384:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8003386:	4619      	mov	r1, r3
 8003388:	b292      	uxth	r2, r2
 800338a:	f000 fab5 	bl	80038f8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800338e:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003390:	461a      	mov	r2, r3
 8003392:	4619      	mov	r1, r3
 8003394:	4620      	mov	r0, r4
 8003396:	f002 faf3 	bl	8005980 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 800339a:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800339e:	2000      	movs	r0, #0
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d101      	bne.n	80033a8 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80033a4:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 80033a8:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80033aa:	69c3      	ldr	r3, [r0, #28]
 80033ac:	fbb3 f5f2 	udiv	r5, r3, r2
 80033b0:	fb02 3515 	mls	r5, r2, r5, r3
 80033b4:	b965      	cbnz	r5, 80033d0 <USBD_LL_DataInStage+0x6a>
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d80a      	bhi.n	80033d0 <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 80033ba:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 80033be:	4293      	cmp	r3, r2
 80033c0:	d206      	bcs.n	80033d0 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80033c2:	462a      	mov	r2, r5
 80033c4:	f000 fa98 	bl	80038f8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80033c8:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80033cc:	462b      	mov	r3, r5
 80033ce:	e7df      	b.n	8003390 <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80033d0:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	b12b      	cbz	r3, 80033e4 <USBD_LL_DataInStage+0x7e>
 80033d8:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 80033dc:	2a03      	cmp	r2, #3
 80033de:	d101      	bne.n	80033e4 <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 80033e0:	4620      	mov	r0, r4
 80033e2:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 80033e4:	2180      	movs	r1, #128	; 0x80
 80033e6:	4620      	mov	r0, r4
 80033e8:	f002 fa82 	bl	80058f0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80033ec:	4620      	mov	r0, r4
 80033ee:	f000 faad 	bl	800394c <USBD_CtlReceiveStatus>
 80033f2:	e7d2      	b.n	800339a <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80033f4:	f032 0304 	bics.w	r3, r2, #4
 80033f8:	d1cf      	bne.n	800339a <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 80033fa:	2180      	movs	r1, #128	; 0x80
 80033fc:	f002 fa78 	bl	80058f0 <USBD_LL_StallEP>
 8003400:	e7cb      	b.n	800339a <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 8003402:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	b133      	cbz	r3, 8003418 <USBD_LL_DataInStage+0xb2>
 800340a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800340e:	2a03      	cmp	r2, #3
 8003410:	d102      	bne.n	8003418 <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 8003412:	4798      	blx	r3
  return USBD_OK;
 8003414:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8003416:	e7c7      	b.n	80033a8 <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 8003418:	2002      	movs	r0, #2
 800341a:	e7c5      	b.n	80033a8 <USBD_LL_DataInStage+0x42>

0800341c <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800341c:	2200      	movs	r2, #0
{
 800341e:	b570      	push	{r4, r5, r6, lr}
 8003420:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003422:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003424:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003426:	4611      	mov	r1, r2
 8003428:	2340      	movs	r3, #64	; 0x40
 800342a:	f002 fa43 	bl	80058b4 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800342e:	4633      	mov	r3, r6
 8003430:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003432:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003436:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800343a:	2200      	movs	r2, #0
 800343c:	4620      	mov	r0, r4
 800343e:	f002 fa39 	bl	80058b4 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8003442:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8003444:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003448:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800344a:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 800344c:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8003450:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8003454:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8003456:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 800345a:	b123      	cbz	r3, 8003466 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800345c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003460:	4620      	mov	r0, r4
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	4798      	blx	r3
  }

  return USBD_OK;
}
 8003466:	2000      	movs	r0, #0
 8003468:	bd70      	pop	{r4, r5, r6, pc}

0800346a <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800346a:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800346c:	2000      	movs	r0, #0
 800346e:	4770      	bx	lr

08003470 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8003470:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003474:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8003478:	2304      	movs	r3, #4
 800347a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800347e:	2000      	movs	r0, #0
 8003480:	4770      	bx	lr

08003482 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8003482:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003486:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8003488:	bf04      	itt	eq
 800348a:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 800348e:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8003492:	2000      	movs	r0, #0
 8003494:	4770      	bx	lr

08003496 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8003496:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003498:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800349c:	2a03      	cmp	r2, #3
 800349e:	d104      	bne.n	80034aa <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 80034a0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	b103      	cbz	r3, 80034aa <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80034a8:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 80034aa:	2000      	movs	r0, #0
 80034ac:	bd08      	pop	{r3, pc}

080034ae <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 80034ae:	b510      	push	{r4, lr}
 80034b0:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 80034b2:	2180      	movs	r1, #128	; 0x80
 80034b4:	f002 fa1c 	bl	80058f0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80034b8:	4620      	mov	r0, r4
}
 80034ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 80034be:	2100      	movs	r1, #0
 80034c0:	f002 ba16 	b.w	80058f0 <USBD_LL_StallEP>

080034c4 <USBD_StdDevReq>:
{
 80034c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80034c6:	780b      	ldrb	r3, [r1, #0]
{
 80034c8:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80034ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80034ce:	2b20      	cmp	r3, #32
{
 80034d0:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80034d2:	d012      	beq.n	80034fa <USBD_StdDevReq+0x36>
 80034d4:	2b40      	cmp	r3, #64	; 0x40
 80034d6:	d010      	beq.n	80034fa <USBD_StdDevReq+0x36>
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d15b      	bne.n	8003594 <USBD_StdDevReq+0xd0>
      switch (req->bRequest)
 80034dc:	784b      	ldrb	r3, [r1, #1]
 80034de:	2b09      	cmp	r3, #9
 80034e0:	d858      	bhi.n	8003594 <USBD_StdDevReq+0xd0>
 80034e2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80034e6:	00e9      	.short	0x00e9
 80034e8:	00570105 	.word	0x00570105
 80034ec:	005700fe 	.word	0x005700fe
 80034f0:	00130084 	.word	0x00130084
 80034f4:	00d20057 	.word	0x00d20057
 80034f8:	00a0      	.short	0x00a0
      pdev->pClass->Setup(pdev, req);
 80034fa:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80034fe:	4629      	mov	r1, r5
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	4620      	mov	r0, r4
 8003504:	4798      	blx	r3
}
 8003506:	2000      	movs	r0, #0
 8003508:	b003      	add	sp, #12
 800350a:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 800350c:	2300      	movs	r3, #0
 800350e:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8003512:	884b      	ldrh	r3, [r1, #2]
 8003514:	0a1a      	lsrs	r2, r3, #8
 8003516:	3a01      	subs	r2, #1
 8003518:	2a06      	cmp	r2, #6
 800351a:	d83b      	bhi.n	8003594 <USBD_StdDevReq+0xd0>
 800351c:	e8df f002 	tbb	[pc, r2]
 8003520:	3a2d2004 	.word	0x3a2d2004
 8003524:	523a      	.short	0x523a
 8003526:	5c          	.byte	0x5c
 8003527:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003528:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800352c:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800352e:	f10d 0106 	add.w	r1, sp, #6
 8003532:	7c20      	ldrb	r0, [r4, #16]
 8003534:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8003536:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800353a:	b152      	cbz	r2, 8003552 <USBD_StdDevReq+0x8e>
 800353c:	88eb      	ldrh	r3, [r5, #6]
 800353e:	b143      	cbz	r3, 8003552 <USBD_StdDevReq+0x8e>
      len = MIN(len, req->wLength);
 8003540:	429a      	cmp	r2, r3
 8003542:	bf28      	it	cs
 8003544:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8003546:	4601      	mov	r1, r0
 8003548:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 800354a:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800354e:	f000 f9c6 	bl	80038de <USBD_CtlSendData>
    if (req->wLength == 0U)
 8003552:	88eb      	ldrh	r3, [r5, #6]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1d6      	bne.n	8003506 <USBD_StdDevReq+0x42>
        USBD_CtlSendStatus(pdev);
 8003558:	4620      	mov	r0, r4
 800355a:	f000 f9ec 	bl	8003936 <USBD_CtlSendStatus>
 800355e:	e7d2      	b.n	8003506 <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003560:	7c02      	ldrb	r2, [r0, #16]
 8003562:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003566:	b932      	cbnz	r2, 8003576 <USBD_StdDevReq+0xb2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8003568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800356a:	f10d 0006 	add.w	r0, sp, #6
 800356e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003570:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003572:	7043      	strb	r3, [r0, #1]
 8003574:	e7df      	b.n	8003536 <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8003576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003578:	e7f7      	b.n	800356a <USBD_StdDevReq+0xa6>
      switch ((uint8_t)(req->wValue))
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b05      	cmp	r3, #5
 800357e:	d809      	bhi.n	8003594 <USBD_StdDevReq+0xd0>
 8003580:	e8df f003 	tbb	[pc, r3]
 8003584:	14100c03 	.word	0x14100c03
 8003588:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800358a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 800358e:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1cc      	bne.n	800352e <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 8003594:	4620      	mov	r0, r4
 8003596:	f7ff ff8a 	bl	80034ae <USBD_CtlError.constprop.1>
 800359a:	e7b4      	b.n	8003506 <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800359c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	e7f5      	b.n	8003590 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80035a4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	e7f1      	b.n	8003590 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80035ac:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	e7ed      	b.n	8003590 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80035b4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	e7e9      	b.n	8003590 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80035bc:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	e7e5      	b.n	8003590 <USBD_StdDevReq+0xcc>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80035c4:	7c03      	ldrb	r3, [r0, #16]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1e4      	bne.n	8003594 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80035ca:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80035ce:	f10d 0006 	add.w	r0, sp, #6
 80035d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d4:	4798      	blx	r3
 80035d6:	e7ae      	b.n	8003536 <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80035d8:	7c03      	ldrb	r3, [r0, #16]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1da      	bne.n	8003594 <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80035de:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80035e2:	f10d 0006 	add.w	r0, sp, #6
 80035e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e8:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80035ea:	2307      	movs	r3, #7
 80035ec:	e7c1      	b.n	8003572 <USBD_StdDevReq+0xae>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80035ee:	888b      	ldrh	r3, [r1, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1cf      	bne.n	8003594 <USBD_StdDevReq+0xd0>
 80035f4:	88cb      	ldrh	r3, [r1, #6]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1cc      	bne.n	8003594 <USBD_StdDevReq+0xd0>
 80035fa:	884d      	ldrh	r5, [r1, #2]
 80035fc:	2d7f      	cmp	r5, #127	; 0x7f
 80035fe:	d8c9      	bhi.n	8003594 <USBD_StdDevReq+0xd0>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003600:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003604:	2b03      	cmp	r3, #3
 8003606:	d0c5      	beq.n	8003594 <USBD_StdDevReq+0xd0>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8003608:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 800360a:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800360e:	f002 f99b 	bl	8005948 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8003612:	4620      	mov	r0, r4
 8003614:	f000 f98f 	bl	8003936 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8003618:	b11d      	cbz	r5, 8003622 <USBD_StdDevReq+0x15e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800361a:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 800361c:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8003620:	e771      	b.n	8003506 <USBD_StdDevReq+0x42>
 8003622:	2301      	movs	r3, #1
 8003624:	e7fa      	b.n	800361c <USBD_StdDevReq+0x158>
  cfgidx = (uint8_t)(req->wValue);
 8003626:	7889      	ldrb	r1, [r1, #2]
 8003628:	4d37      	ldr	r5, [pc, #220]	; (8003708 <USBD_StdDevReq+0x244>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800362a:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800362c:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800362e:	d8b1      	bhi.n	8003594 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 8003630:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003634:	2b02      	cmp	r3, #2
 8003636:	d008      	beq.n	800364a <USBD_StdDevReq+0x186>
 8003638:	2b03      	cmp	r3, #3
 800363a:	d014      	beq.n	8003666 <USBD_StdDevReq+0x1a2>
        USBD_CtlError(pdev, req);
 800363c:	f7ff ff37 	bl	80034ae <USBD_CtlError.constprop.1>
        USBD_ClrClassConfig(pdev, cfgidx);
 8003640:	7829      	ldrb	r1, [r5, #0]
 8003642:	4620      	mov	r0, r4
 8003644:	f7ff fe21 	bl	800328a <USBD_ClrClassConfig>
 8003648:	e75d      	b.n	8003506 <USBD_StdDevReq+0x42>
        if (cfgidx)
 800364a:	2900      	cmp	r1, #0
 800364c:	d084      	beq.n	8003558 <USBD_StdDevReq+0x94>
          pdev->dev_config = cfgidx;
 800364e:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8003650:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8003652:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8003654:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8003658:	4620      	mov	r0, r4
 800365a:	f7ff fe0b 	bl	8003274 <USBD_SetClassConfig>
 800365e:	2802      	cmp	r0, #2
 8003660:	f47f af7a 	bne.w	8003558 <USBD_StdDevReq+0x94>
 8003664:	e796      	b.n	8003594 <USBD_StdDevReq+0xd0>
        if (cfgidx == 0U)
 8003666:	b931      	cbnz	r1, 8003676 <USBD_StdDevReq+0x1b2>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8003668:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 800366a:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800366c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8003670:	f7ff fe0b 	bl	800328a <USBD_ClrClassConfig>
 8003674:	e770      	b.n	8003558 <USBD_StdDevReq+0x94>
        else if (cfgidx != pdev->dev_config)
 8003676:	6841      	ldr	r1, [r0, #4]
 8003678:	2901      	cmp	r1, #1
 800367a:	f43f af6d 	beq.w	8003558 <USBD_StdDevReq+0x94>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800367e:	b2c9      	uxtb	r1, r1
 8003680:	f7ff fe03 	bl	800328a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8003684:	7829      	ldrb	r1, [r5, #0]
 8003686:	6061      	str	r1, [r4, #4]
 8003688:	e7e6      	b.n	8003658 <USBD_StdDevReq+0x194>
  if (req->wLength != 1U)
 800368a:	88ca      	ldrh	r2, [r1, #6]
 800368c:	2a01      	cmp	r2, #1
 800368e:	d181      	bne.n	8003594 <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 8003690:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003694:	2b00      	cmp	r3, #0
 8003696:	f43f af7d 	beq.w	8003594 <USBD_StdDevReq+0xd0>
 800369a:	2b02      	cmp	r3, #2
 800369c:	d904      	bls.n	80036a8 <USBD_StdDevReq+0x1e4>
 800369e:	2b03      	cmp	r3, #3
 80036a0:	f47f af78 	bne.w	8003594 <USBD_StdDevReq+0xd0>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80036a4:	1d01      	adds	r1, r0, #4
 80036a6:	e003      	b.n	80036b0 <USBD_StdDevReq+0x1ec>
        pdev->dev_default_config = 0U;
 80036a8:	4601      	mov	r1, r0
 80036aa:	2300      	movs	r3, #0
 80036ac:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80036b0:	4620      	mov	r0, r4
 80036b2:	f000 f914 	bl	80038de <USBD_CtlSendData>
 80036b6:	e726      	b.n	8003506 <USBD_StdDevReq+0x42>
  switch (pdev->dev_state)
 80036b8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80036bc:	3b01      	subs	r3, #1
 80036be:	2b02      	cmp	r3, #2
 80036c0:	f63f af68 	bhi.w	8003594 <USBD_StdDevReq+0xd0>
      if (req->wLength != 0x2U)
 80036c4:	88cb      	ldrh	r3, [r1, #6]
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	f47f af64 	bne.w	8003594 <USBD_StdDevReq+0xd0>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80036cc:	2301      	movs	r3, #1
 80036ce:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 80036d0:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 80036d4:	b10b      	cbz	r3, 80036da <USBD_StdDevReq+0x216>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80036d6:	2303      	movs	r3, #3
 80036d8:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80036da:	2202      	movs	r2, #2
 80036dc:	f104 010c 	add.w	r1, r4, #12
 80036e0:	e7e6      	b.n	80036b0 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80036e2:	884b      	ldrh	r3, [r1, #2]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	f47f af0e 	bne.w	8003506 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 80036ea:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 80036ee:	e733      	b.n	8003558 <USBD_StdDevReq+0x94>
  switch (pdev->dev_state)
 80036f0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80036f4:	3b01      	subs	r3, #1
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	f63f af4c 	bhi.w	8003594 <USBD_StdDevReq+0xd0>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80036fc:	884b      	ldrh	r3, [r1, #2]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	f47f af01 	bne.w	8003506 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8003704:	2300      	movs	r3, #0
 8003706:	e7f0      	b.n	80036ea <USBD_StdDevReq+0x226>
 8003708:	200005d2 	.word	0x200005d2

0800370c <USBD_StdItfReq>:
{
 800370c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800370e:	780b      	ldrb	r3, [r1, #0]
{
 8003710:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003712:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003716:	2b20      	cmp	r3, #32
{
 8003718:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800371a:	d002      	beq.n	8003722 <USBD_StdItfReq+0x16>
 800371c:	2b40      	cmp	r3, #64	; 0x40
 800371e:	d000      	beq.n	8003722 <USBD_StdItfReq+0x16>
 8003720:	b9ab      	cbnz	r3, 800374e <USBD_StdItfReq+0x42>
      switch (pdev->dev_state)
 8003722:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8003726:	3b01      	subs	r3, #1
 8003728:	2b02      	cmp	r3, #2
 800372a:	d810      	bhi.n	800374e <USBD_StdItfReq+0x42>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800372c:	792b      	ldrb	r3, [r5, #4]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d80d      	bhi.n	800374e <USBD_StdItfReq+0x42>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003732:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003736:	4629      	mov	r1, r5
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	4620      	mov	r0, r4
 800373c:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800373e:	88eb      	ldrh	r3, [r5, #6]
 8003740:	b91b      	cbnz	r3, 800374a <USBD_StdItfReq+0x3e>
 8003742:	b910      	cbnz	r0, 800374a <USBD_StdItfReq+0x3e>
              USBD_CtlSendStatus(pdev);
 8003744:	4620      	mov	r0, r4
 8003746:	f000 f8f6 	bl	8003936 <USBD_CtlSendStatus>
}
 800374a:	2000      	movs	r0, #0
 800374c:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 800374e:	4620      	mov	r0, r4
 8003750:	f7ff fead 	bl	80034ae <USBD_CtlError.constprop.1>
          break;
 8003754:	e7f9      	b.n	800374a <USBD_StdItfReq+0x3e>

08003756 <USBD_StdEPReq>:
{
 8003756:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003758:	780a      	ldrb	r2, [r1, #0]
{
 800375a:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800375c:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8003760:	2a20      	cmp	r2, #32
{
 8003762:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003764:	d014      	beq.n	8003790 <USBD_StdEPReq+0x3a>
 8003766:	2a40      	cmp	r2, #64	; 0x40
 8003768:	d012      	beq.n	8003790 <USBD_StdEPReq+0x3a>
 800376a:	b96a      	cbnz	r2, 8003788 <USBD_StdEPReq+0x32>
      switch (req->bRequest)
 800376c:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 800376e:	888d      	ldrh	r5, [r1, #4]
      switch (req->bRequest)
 8003770:	2a01      	cmp	r2, #1
  ep_addr  = LOBYTE(req->wIndex);
 8003772:	b2e9      	uxtb	r1, r5
      switch (req->bRequest)
 8003774:	d020      	beq.n	80037b8 <USBD_StdEPReq+0x62>
 8003776:	d336      	bcc.n	80037e6 <USBD_StdEPReq+0x90>
 8003778:	2a03      	cmp	r2, #3
 800377a:	d105      	bne.n	8003788 <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 800377c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003780:	2a02      	cmp	r2, #2
 8003782:	d027      	beq.n	80037d4 <USBD_StdEPReq+0x7e>
 8003784:	2a03      	cmp	r2, #3
 8003786:	d00b      	beq.n	80037a0 <USBD_StdEPReq+0x4a>
              USBD_CtlError(pdev, req);
 8003788:	4620      	mov	r0, r4
 800378a:	f7ff fe90 	bl	80034ae <USBD_CtlError.constprop.1>
              break;
 800378e:	e005      	b.n	800379c <USBD_StdEPReq+0x46>
      pdev->pClass->Setup(pdev, req);
 8003790:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 8003794:	4619      	mov	r1, r3
 8003796:	6892      	ldr	r2, [r2, #8]
 8003798:	4620      	mov	r0, r4
 800379a:	4790      	blx	r2
}
 800379c:	2000      	movs	r0, #0
 800379e:	bd38      	pop	{r3, r4, r5, pc}
              if (req->wValue == USB_FEATURE_EP_HALT)
 80037a0:	885a      	ldrh	r2, [r3, #2]
 80037a2:	b92a      	cbnz	r2, 80037b0 <USBD_StdEPReq+0x5a>
                if ((ep_addr != 0x00U) &&
 80037a4:	064a      	lsls	r2, r1, #25
 80037a6:	d003      	beq.n	80037b0 <USBD_StdEPReq+0x5a>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80037a8:	88db      	ldrh	r3, [r3, #6]
 80037aa:	b90b      	cbnz	r3, 80037b0 <USBD_StdEPReq+0x5a>
                  USBD_LL_StallEP(pdev, ep_addr);
 80037ac:	f002 f8a0 	bl	80058f0 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 80037b0:	4620      	mov	r0, r4
 80037b2:	f000 f8c0 	bl	8003936 <USBD_CtlSendStatus>
              break;
 80037b6:	e7f1      	b.n	800379c <USBD_StdEPReq+0x46>
          switch (pdev->dev_state)
 80037b8:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80037bc:	2a02      	cmp	r2, #2
 80037be:	d009      	beq.n	80037d4 <USBD_StdEPReq+0x7e>
 80037c0:	2a03      	cmp	r2, #3
 80037c2:	d1e1      	bne.n	8003788 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80037c4:	885b      	ldrh	r3, [r3, #2]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1e8      	bne.n	800379c <USBD_StdEPReq+0x46>
                if ((ep_addr & 0x7FU) != 0x00U)
 80037ca:	064d      	lsls	r5, r1, #25
 80037cc:	d0f0      	beq.n	80037b0 <USBD_StdEPReq+0x5a>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80037ce:	f002 f89d 	bl	800590c <USBD_LL_ClearStallEP>
 80037d2:	e7ed      	b.n	80037b0 <USBD_StdEPReq+0x5a>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80037d4:	064b      	lsls	r3, r1, #25
 80037d6:	d0d7      	beq.n	8003788 <USBD_StdEPReq+0x32>
                USBD_LL_StallEP(pdev, ep_addr);
 80037d8:	f002 f88a 	bl	80058f0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80037dc:	2180      	movs	r1, #128	; 0x80
 80037de:	4620      	mov	r0, r4
 80037e0:	f002 f886 	bl	80058f0 <USBD_LL_StallEP>
 80037e4:	e7da      	b.n	800379c <USBD_StdEPReq+0x46>
          switch (pdev->dev_state)
 80037e6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d018      	beq.n	8003820 <USBD_StdEPReq+0xca>
 80037ee:	2b03      	cmp	r3, #3
 80037f0:	d1ca      	bne.n	8003788 <USBD_StdEPReq+0x32>
 80037f2:	2314      	movs	r3, #20
 80037f4:	f001 020f 	and.w	r2, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 80037f8:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80037fc:	fb03 0202 	mla	r2, r3, r2, r0
              if ((ep_addr & 0x80U) == 0x80U)
 8003800:	d01f      	beq.n	8003842 <USBD_StdEPReq+0xec>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003802:	6992      	ldr	r2, [r2, #24]
 8003804:	2a00      	cmp	r2, #0
 8003806:	d0bf      	beq.n	8003788 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003808:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800380c:	fb05 3503 	mla	r5, r5, r3, r3
 8003810:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8003812:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8003816:	d11f      	bne.n	8003858 <USBD_StdEPReq+0x102>
                pep->status = 0x0001U;
 8003818:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800381a:	2202      	movs	r2, #2
 800381c:	4629      	mov	r1, r5
 800381e:	e00c      	b.n	800383a <USBD_StdEPReq+0xe4>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003820:	064a      	lsls	r2, r1, #25
 8003822:	d1b1      	bne.n	8003788 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003824:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 8003826:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800382a:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800382e:	bf4c      	ite	mi
 8003830:	f100 0114 	addmi.w	r1, r0, #20
 8003834:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 8003838:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800383a:	4620      	mov	r0, r4
 800383c:	f000 f84f 	bl	80038de <USBD_CtlSendData>
              break;
 8003840:	e7ac      	b.n	800379c <USBD_StdEPReq+0x46>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8003842:	f8d2 2158 	ldr.w	r2, [r2, #344]	; 0x158
 8003846:	2a00      	cmp	r2, #0
 8003848:	d09e      	beq.n	8003788 <USBD_StdEPReq+0x32>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800384a:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800384e:	fb03 0505 	mla	r5, r3, r5, r0
 8003852:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 8003856:	e7dc      	b.n	8003812 <USBD_StdEPReq+0xbc>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8003858:	4620      	mov	r0, r4
 800385a:	f002 f865 	bl	8005928 <USBD_LL_IsStallEP>
 800385e:	b108      	cbz	r0, 8003864 <USBD_StdEPReq+0x10e>
                pep->status = 0x0001U;
 8003860:	2301      	movs	r3, #1
 8003862:	e7d9      	b.n	8003818 <USBD_StdEPReq+0xc2>
                pep->status = 0x0000U;
 8003864:	6028      	str	r0, [r5, #0]
 8003866:	e7d8      	b.n	800381a <USBD_StdEPReq+0xc4>

08003868 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8003868:	780b      	ldrb	r3, [r1, #0]
 800386a:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800386c:	784b      	ldrb	r3, [r1, #1]
 800386e:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8003870:	78ca      	ldrb	r2, [r1, #3]
 8003872:	788b      	ldrb	r3, [r1, #2]
 8003874:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003878:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800387a:	794a      	ldrb	r2, [r1, #5]
 800387c:	790b      	ldrb	r3, [r1, #4]
 800387e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003882:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8003884:	79ca      	ldrb	r2, [r1, #7]
 8003886:	798b      	ldrb	r3, [r1, #6]
 8003888:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800388c:	80c3      	strh	r3, [r0, #6]
}
 800388e:	4770      	bx	lr

08003890 <USBD_CtlError>:
{
 8003890:	b510      	push	{r4, lr}
 8003892:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8003894:	2180      	movs	r1, #128	; 0x80
 8003896:	f002 f82b 	bl	80058f0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800389a:	4620      	mov	r0, r4
}
 800389c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 80038a0:	2100      	movs	r1, #0
 80038a2:	f002 b825 	b.w	80058f0 <USBD_LL_StallEP>

080038a6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80038a6:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 80038a8:	b188      	cbz	r0, 80038ce <USBD_GetString+0x28>
 80038aa:	4605      	mov	r5, r0
 80038ac:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 80038ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2c00      	cmp	r4, #0
 80038b6:	d1f9      	bne.n	80038ac <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80038b8:	3301      	adds	r3, #1
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80038be:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80038c0:	2303      	movs	r3, #3
 80038c2:	704b      	strb	r3, [r1, #1]
 80038c4:	2302      	movs	r3, #2
 80038c6:	3801      	subs	r0, #1
    while (*desc != '\0')
 80038c8:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80038cc:	b905      	cbnz	r5, 80038d0 <USBD_GetString+0x2a>
}
 80038ce:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 80038d0:	1c5a      	adds	r2, r3, #1
 80038d2:	54cd      	strb	r5, [r1, r3]
 80038d4:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 80038d6:	3302      	adds	r3, #2
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	548c      	strb	r4, [r1, r2]
 80038dc:	e7f4      	b.n	80038c8 <USBD_GetString+0x22>

080038de <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80038de:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80038e0:	2202      	movs	r2, #2
{
 80038e2:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80038e4:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 80038e8:	e9c0 3307 	strd	r3, r3, [r0, #28]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80038ec:	460a      	mov	r2, r1
 80038ee:	2100      	movs	r1, #0
 80038f0:	f002 f838 	bl	8005964 <USBD_LL_Transmit>

  return USBD_OK;
}
 80038f4:	2000      	movs	r0, #0
 80038f6:	bd10      	pop	{r4, pc}

080038f8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80038f8:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80038fa:	4613      	mov	r3, r2
 80038fc:	460a      	mov	r2, r1
 80038fe:	2100      	movs	r1, #0
 8003900:	f002 f830 	bl	8005964 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003904:	2000      	movs	r0, #0
 8003906:	bd08      	pop	{r3, pc}

08003908 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8003908:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800390a:	2203      	movs	r2, #3
{
 800390c:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800390e:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8003912:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8003916:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8003918:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800391c:	2100      	movs	r1, #0
 800391e:	f002 f82f 	bl	8005980 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003922:	2000      	movs	r0, #0
 8003924:	bd10      	pop	{r4, pc}

08003926 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8003926:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8003928:	4613      	mov	r3, r2
 800392a:	460a      	mov	r2, r1
 800392c:	2100      	movs	r1, #0
 800392e:	f002 f827 	bl	8005980 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003932:	2000      	movs	r0, #0
 8003934:	bd08      	pop	{r3, pc}

08003936 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8003936:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003938:	2304      	movs	r3, #4
 800393a:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800393e:	2300      	movs	r3, #0
 8003940:	461a      	mov	r2, r3
 8003942:	4619      	mov	r1, r3
 8003944:	f002 f80e 	bl	8005964 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003948:	2000      	movs	r0, #0
 800394a:	bd08      	pop	{r3, pc}

0800394c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800394c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800394e:	2305      	movs	r3, #5
 8003950:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003954:	2300      	movs	r3, #0
 8003956:	461a      	mov	r2, r3
 8003958:	4619      	mov	r1, r3
 800395a:	f002 f811 	bl	8005980 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800395e:	2000      	movs	r0, #0
 8003960:	bd08      	pop	{r3, pc}
	...

08003964 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8003964:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 8003966:	4b0f      	ldr	r3, [pc, #60]	; (80039a4 <FATFS_LinkDriverEx+0x40>)
 8003968:	7a5c      	ldrb	r4, [r3, #9]
 800396a:	2c01      	cmp	r4, #1
 800396c:	d818      	bhi.n	80039a0 <FATFS_LinkDriverEx+0x3c>
  {
    disk.is_initialized[disk.nbr] = 0;
 800396e:	2400      	movs	r4, #0
 8003970:	7a5d      	ldrb	r5, [r3, #9]
 8003972:	b2ed      	uxtb	r5, r5
 8003974:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;  
 8003976:	7a5d      	ldrb	r5, [r3, #9]
 8003978:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800397c:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;  
 800397e:	7a58      	ldrb	r0, [r3, #9]
 8003980:	4418      	add	r0, r3
 8003982:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8003984:	7a5a      	ldrb	r2, [r3, #9]
 8003986:	b2d2      	uxtb	r2, r2
 8003988:	1c50      	adds	r0, r2, #1
 800398a:	b2c0      	uxtb	r0, r0
 800398c:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 800398e:	233a      	movs	r3, #58	; 0x3a
 8003990:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8003992:	232f      	movs	r3, #47	; 0x2f
    path[3] = 0;
 8003994:	4620      	mov	r0, r4
    path[0] = DiskNum + '0';
 8003996:	3230      	adds	r2, #48	; 0x30
 8003998:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 800399a:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800399c:	70cc      	strb	r4, [r1, #3]
    ret = 0;
  }
  
  return ret;
}
 800399e:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 80039a0:	2001      	movs	r0, #1
 80039a2:	e7fc      	b.n	800399e <FATFS_LinkDriverEx+0x3a>
 80039a4:	200005d4 	.word	0x200005d4

080039a8 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 80039a8:	2200      	movs	r2, #0
 80039aa:	f7ff bfdb 	b.w	8003964 <FATFS_LinkDriverEx>
	...

080039b0 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039b0:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80039b4:	b113      	cbz	r3, 80039bc <osKernelInitialize+0xc>
    stat = osErrorISR;
 80039b6:	f06f 0005 	mvn.w	r0, #5
 80039ba:	4770      	bx	lr
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039bc:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1f8      	bne.n	80039b6 <osKernelInitialize+0x6>
 80039c4:	4b07      	ldr	r3, [pc, #28]	; (80039e4 <osKernelInitialize+0x34>)
 80039c6:	6818      	ldr	r0, [r3, #0]
 80039c8:	2802      	cmp	r0, #2
 80039ca:	d106      	bne.n	80039da <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80039cc:	f3ef 8311 	mrs	r3, BASEPRI
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1f0      	bne.n	80039b6 <osKernelInitialize+0x6>
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
      stat = osOK;
    } else {
      stat = osError;
 80039d4:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 80039d8:	4770      	bx	lr
    if (KernelState == osKernelInactive) {
 80039da:	2800      	cmp	r0, #0
 80039dc:	d1fa      	bne.n	80039d4 <osKernelInitialize+0x24>
      KernelState = osKernelReady;
 80039de:	2201      	movs	r2, #1
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	4770      	bx	lr
 80039e4:	2000083c 	.word	0x2000083c

080039e8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80039e8:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039ea:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80039ee:	b113      	cbz	r3, 80039f6 <osKernelStart+0xe>
    stat = osErrorISR;
 80039f0:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 80039f4:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039f6:	f3ef 8410 	mrs	r4, PRIMASK
  if (IS_IRQ()) {
 80039fa:	2c00      	cmp	r4, #0
 80039fc:	d1f8      	bne.n	80039f0 <osKernelStart+0x8>
 80039fe:	4b09      	ldr	r3, [pc, #36]	; (8003a24 <osKernelStart+0x3c>)
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	2a02      	cmp	r2, #2
 8003a04:	d106      	bne.n	8003a14 <osKernelStart+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a06:	f3ef 8311 	mrs	r3, BASEPRI
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f0      	bne.n	80039f0 <osKernelStart+0x8>
      stat = osError;
 8003a0e:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8003a12:	e7ef      	b.n	80039f4 <osKernelStart+0xc>
    if (KernelState == osKernelReady) {
 8003a14:	2a01      	cmp	r2, #1
 8003a16:	d1fa      	bne.n	8003a0e <osKernelStart+0x26>
      KernelState = osKernelRunning;
 8003a18:	2202      	movs	r2, #2
 8003a1a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003a1c:	f000 fede 	bl	80047dc <vTaskStartScheduler>
      stat = osOK;
 8003a20:	4620      	mov	r0, r4
 8003a22:	e7e7      	b.n	80039f4 <osKernelStart+0xc>
 8003a24:	2000083c 	.word	0x2000083c

08003a28 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a2a:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003a2c:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003a2e:	b087      	sub	sp, #28
 8003a30:	460b      	mov	r3, r1
  hTask = NULL;
 8003a32:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a34:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8003a38:	bb62      	cbnz	r2, 8003a94 <osThreadNew+0x6c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a3a:	f3ef 8210 	mrs	r2, PRIMASK
 8003a3e:	bb4a      	cbnz	r2, 8003a94 <osThreadNew+0x6c>
 8003a40:	4a26      	ldr	r2, [pc, #152]	; (8003adc <osThreadNew+0xb4>)
 8003a42:	6812      	ldr	r2, [r2, #0]
 8003a44:	2a02      	cmp	r2, #2
 8003a46:	d102      	bne.n	8003a4e <osThreadNew+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a48:	f3ef 8211 	mrs	r2, BASEPRI
 8003a4c:	bb12      	cbnz	r2, 8003a94 <osThreadNew+0x6c>
 8003a4e:	b308      	cbz	r0, 8003a94 <osThreadNew+0x6c>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 8003a50:	2200      	movs	r2, #0
 8003a52:	f88d 2013 	strb.w	r2, [sp, #19]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 8003a56:	2c00      	cmp	r4, #0
 8003a58:	d039      	beq.n	8003ace <osThreadNew+0xa6>
      if (attr->name != NULL) {
 8003a5a:	6821      	ldr	r1, [r4, #0]
 8003a5c:	b909      	cbnz	r1, 8003a62 <osThreadNew+0x3a>
    name  = &empty;
 8003a5e:	f10d 0113 	add.w	r1, sp, #19
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8003a62:	69a5      	ldr	r5, [r4, #24]
 8003a64:	2d00      	cmp	r5, #0
 8003a66:	bf08      	it	eq
 8003a68:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003a6a:	1e6a      	subs	r2, r5, #1
 8003a6c:	2a37      	cmp	r2, #55	; 0x37
 8003a6e:	462f      	mov	r7, r5
 8003a70:	d832      	bhi.n	8003ad8 <osThreadNew+0xb0>
 8003a72:	6862      	ldr	r2, [r4, #4]
 8003a74:	07d2      	lsls	r2, r2, #31
 8003a76:	d42f      	bmi.n	8003ad8 <osThreadNew+0xb0>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8003a78:	6966      	ldr	r6, [r4, #20]
 8003a7a:	b176      	cbz	r6, 8003a9a <osThreadNew+0x72>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003a7c:	08b2      	lsrs	r2, r6, #2
 8003a7e:	e9d4 ce02 	ldrd	ip, lr, [r4, #8]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a82:	f1bc 0f00 	cmp.w	ip, #0
 8003a86:	d00a      	beq.n	8003a9e <osThreadNew+0x76>
 8003a88:	f1be 0f5b 	cmp.w	lr, #91	; 0x5b
 8003a8c:	d902      	bls.n	8003a94 <osThreadNew+0x6c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a8e:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a90:	b104      	cbz	r4, 8003a94 <osThreadNew+0x6c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a92:	b9ae      	cbnz	r6, 8003ac0 <osThreadNew+0x98>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003a94:	9805      	ldr	r0, [sp, #20]
}
 8003a96:	b007      	add	sp, #28
 8003a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8003a9a:	2280      	movs	r2, #128	; 0x80
 8003a9c:	e7ef      	b.n	8003a7e <osThreadNew+0x56>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003a9e:	f1be 0f00 	cmp.w	lr, #0
 8003aa2:	d1f7      	bne.n	8003a94 <osThreadNew+0x6c>
      if (mem == 0) {
 8003aa4:	6924      	ldr	r4, [r4, #16]
 8003aa6:	2c00      	cmp	r4, #0
 8003aa8:	d1f4      	bne.n	8003a94 <osThreadNew+0x6c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003aaa:	ac05      	add	r4, sp, #20
 8003aac:	e9cd 7400 	strd	r7, r4, [sp]
 8003ab0:	b292      	uxth	r2, r2
 8003ab2:	f000 fe66 	bl	8004782 <xTaskCreate>
 8003ab6:	2801      	cmp	r0, #1
          hTask = NULL;
 8003ab8:	bf1c      	itt	ne
 8003aba:	2300      	movne	r3, #0
 8003abc:	9305      	strne	r3, [sp, #20]
 8003abe:	e7e9      	b.n	8003a94 <osThreadNew+0x6c>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ac0:	e9cd 4c01 	strd	r4, ip, [sp, #4]
 8003ac4:	9500      	str	r5, [sp, #0]
 8003ac6:	f000 fe25 	bl	8004714 <xTaskCreateStatic>
 8003aca:	9005      	str	r0, [sp, #20]
 8003acc:	e7e2      	b.n	8003a94 <osThreadNew+0x6c>
    prio  = (UBaseType_t)osPriorityNormal;
 8003ace:	2718      	movs	r7, #24
    stack = configMINIMAL_STACK_SIZE;
 8003ad0:	2280      	movs	r2, #128	; 0x80
    name  = &empty;
 8003ad2:	f10d 0113 	add.w	r1, sp, #19
 8003ad6:	e7e8      	b.n	8003aaa <osThreadNew+0x82>
        return (NULL);
 8003ad8:	2000      	movs	r0, #0
 8003ada:	e7dc      	b.n	8003a96 <osThreadNew+0x6e>
 8003adc:	2000083c 	.word	0x2000083c

08003ae0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003ae0:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ae2:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ae6:	b113      	cbz	r3, 8003aee <osDelay+0xe>
    stat = osErrorISR;
 8003ae8:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8003aec:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aee:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1f8      	bne.n	8003ae8 <osDelay+0x8>
 8003af6:	4b07      	ldr	r3, [pc, #28]	; (8003b14 <osDelay+0x34>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d103      	bne.n	8003b06 <osDelay+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003afe:	f3ef 8311 	mrs	r3, BASEPRI
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1f0      	bne.n	8003ae8 <osDelay+0x8>
    if (ticks != 0U) {
 8003b06:	2800      	cmp	r0, #0
 8003b08:	d0f0      	beq.n	8003aec <osDelay+0xc>
      vTaskDelay(ticks);
 8003b0a:	f000 ffbd 	bl	8004a88 <vTaskDelay>
    stat = osOK;
 8003b0e:	2000      	movs	r0, #0
 8003b10:	e7ec      	b.n	8003aec <osDelay+0xc>
 8003b12:	bf00      	nop
 8003b14:	2000083c 	.word	0x2000083c

08003b18 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003b18:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b1a:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b1c:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003b20:	b11b      	cbz	r3, 8003b2a <osMessageQueueNew+0x12>
  hQueue = NULL;
 8003b22:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8003b24:	4628      	mov	r0, r5
 8003b26:	b002      	add	sp, #8
 8003b28:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b2a:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1f7      	bne.n	8003b22 <osMessageQueueNew+0xa>
 8003b32:	4b1c      	ldr	r3, [pc, #112]	; (8003ba4 <osMessageQueueNew+0x8c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d103      	bne.n	8003b42 <osMessageQueueNew+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003b3a:	f3ef 8311 	mrs	r3, BASEPRI
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1ef      	bne.n	8003b22 <osMessageQueueNew+0xa>
 8003b42:	2800      	cmp	r0, #0
 8003b44:	d0ed      	beq.n	8003b22 <osMessageQueueNew+0xa>
 8003b46:	2900      	cmp	r1, #0
 8003b48:	d0eb      	beq.n	8003b22 <osMessageQueueNew+0xa>
    if (attr != NULL) {
 8003b4a:	b304      	cbz	r4, 8003b8e <osMessageQueueNew+0x76>
 8003b4c:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003b50:	b1ab      	cbz	r3, 8003b7e <osMessageQueueNew+0x66>
 8003b52:	2a4f      	cmp	r2, #79	; 0x4f
 8003b54:	d9e5      	bls.n	8003b22 <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003b56:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003b58:	2a00      	cmp	r2, #0
 8003b5a:	d0e2      	beq.n	8003b22 <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003b5c:	fb01 f500 	mul.w	r5, r1, r0
 8003b60:	6966      	ldr	r6, [r4, #20]
 8003b62:	42ae      	cmp	r6, r5
 8003b64:	d3dd      	bcc.n	8003b22 <osMessageQueueNew+0xa>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003b66:	2500      	movs	r5, #0
 8003b68:	9500      	str	r5, [sp, #0]
 8003b6a:	f000 f9c7 	bl	8003efc <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8003b6e:	4605      	mov	r5, r0
 8003b70:	2800      	cmp	r0, #0
 8003b72:	d0d6      	beq.n	8003b22 <osMessageQueueNew+0xa>
        name = attr->name;
 8003b74:	6821      	ldr	r1, [r4, #0]
      vQueueAddToRegistry (hQueue, name);
 8003b76:	4628      	mov	r0, r5
 8003b78:	f000 fc38 	bl	80043ec <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8003b7c:	e7d2      	b.n	8003b24 <osMessageQueueNew+0xc>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003b7e:	2a00      	cmp	r2, #0
 8003b80:	d1cf      	bne.n	8003b22 <osMessageQueueNew+0xa>
 8003b82:	6923      	ldr	r3, [r4, #16]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1cc      	bne.n	8003b22 <osMessageQueueNew+0xa>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003b88:	6963      	ldr	r3, [r4, #20]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1c9      	bne.n	8003b22 <osMessageQueueNew+0xa>
        hQueue = xQueueCreate (msg_count, msg_size);
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f000 fa01 	bl	8003f96 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8003b94:	4605      	mov	r5, r0
 8003b96:	2800      	cmp	r0, #0
 8003b98:	d0c3      	beq.n	8003b22 <osMessageQueueNew+0xa>
      if (attr != NULL) {
 8003b9a:	2c00      	cmp	r4, #0
 8003b9c:	d1ea      	bne.n	8003b74 <osMessageQueueNew+0x5c>
        name = NULL;
 8003b9e:	4621      	mov	r1, r4
 8003ba0:	e7e9      	b.n	8003b76 <osMessageQueueNew+0x5e>
 8003ba2:	bf00      	nop
 8003ba4:	2000083c 	.word	0x2000083c

08003ba8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003ba8:	b513      	push	{r0, r1, r4, lr}
 8003baa:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bac:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8003bb0:	b123      	cbz	r3, 8003bbc <osMessageQueuePut+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003bb2:	b9e8      	cbnz	r0, 8003bf0 <osMessageQueuePut+0x48>
      stat = osErrorParameter;
 8003bb4:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8003bb8:	b002      	add	sp, #8
 8003bba:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bbc:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1f6      	bne.n	8003bb2 <osMessageQueuePut+0xa>
 8003bc4:	4b18      	ldr	r3, [pc, #96]	; (8003c28 <osMessageQueuePut+0x80>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d103      	bne.n	8003bd4 <osMessageQueuePut+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003bcc:	f3ef 8311 	mrs	r3, BASEPRI
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1ee      	bne.n	8003bb2 <osMessageQueuePut+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003bd4:	2800      	cmp	r0, #0
 8003bd6:	d0ed      	beq.n	8003bb4 <osMessageQueuePut+0xc>
 8003bd8:	2900      	cmp	r1, #0
 8003bda:	d0eb      	beq.n	8003bb4 <osMessageQueuePut+0xc>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003bdc:	2300      	movs	r3, #0
 8003bde:	4622      	mov	r2, r4
 8003be0:	f000 fa00 	bl	8003fe4 <xQueueGenericSend>
 8003be4:	2801      	cmp	r0, #1
 8003be6:	d011      	beq.n	8003c0c <osMessageQueuePut+0x64>
        if (timeout != 0U) {
 8003be8:	b9dc      	cbnz	r4, 8003c22 <osMessageQueuePut+0x7a>
          stat = osErrorResource;
 8003bea:	f06f 0002 	mvn.w	r0, #2
 8003bee:	e7e3      	b.n	8003bb8 <osMessageQueuePut+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003bf0:	2900      	cmp	r1, #0
 8003bf2:	d0df      	beq.n	8003bb4 <osMessageQueuePut+0xc>
 8003bf4:	2c00      	cmp	r4, #0
 8003bf6:	d1dd      	bne.n	8003bb4 <osMessageQueuePut+0xc>
      yield = pdFALSE;
 8003bf8:	aa02      	add	r2, sp, #8
 8003bfa:	f842 4d04 	str.w	r4, [r2, #-4]!
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003bfe:	4623      	mov	r3, r4
 8003c00:	f000 faa2 	bl	8004148 <xQueueGenericSendFromISR>
 8003c04:	2801      	cmp	r0, #1
 8003c06:	d1f0      	bne.n	8003bea <osMessageQueuePut+0x42>
        portYIELD_FROM_ISR (yield);
 8003c08:	9b01      	ldr	r3, [sp, #4]
 8003c0a:	b90b      	cbnz	r3, 8003c10 <osMessageQueuePut+0x68>
  stat = osOK;
 8003c0c:	2000      	movs	r0, #0
 8003c0e:	e7d3      	b.n	8003bb8 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 8003c10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c14:	4b05      	ldr	r3, [pc, #20]	; (8003c2c <osMessageQueuePut+0x84>)
 8003c16:	601a      	str	r2, [r3, #0]
 8003c18:	f3bf 8f4f 	dsb	sy
 8003c1c:	f3bf 8f6f 	isb	sy
 8003c20:	e7f4      	b.n	8003c0c <osMessageQueuePut+0x64>
          stat = osErrorTimeout;
 8003c22:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8003c26:	e7c7      	b.n	8003bb8 <osMessageQueuePut+0x10>
 8003c28:	2000083c 	.word	0x2000083c
 8003c2c:	e000ed04 	.word	0xe000ed04

08003c30 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003c30:	b513      	push	{r0, r1, r4, lr}
 8003c32:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c34:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8003c38:	b123      	cbz	r3, 8003c44 <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003c3a:	b9e0      	cbnz	r0, 8003c76 <osMessageQueueGet+0x46>
      stat = osErrorParameter;
 8003c3c:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8003c40:	b002      	add	sp, #8
 8003c42:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c44:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1f6      	bne.n	8003c3a <osMessageQueueGet+0xa>
 8003c4c:	4b17      	ldr	r3, [pc, #92]	; (8003cac <osMessageQueueGet+0x7c>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d103      	bne.n	8003c5c <osMessageQueueGet+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c54:	f3ef 8311 	mrs	r3, BASEPRI
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1ee      	bne.n	8003c3a <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003c5c:	2800      	cmp	r0, #0
 8003c5e:	d0ed      	beq.n	8003c3c <osMessageQueueGet+0xc>
 8003c60:	2900      	cmp	r1, #0
 8003c62:	d0eb      	beq.n	8003c3c <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003c64:	4622      	mov	r2, r4
 8003c66:	f000 fad1 	bl	800420c <xQueueReceive>
 8003c6a:	2801      	cmp	r0, #1
 8003c6c:	d010      	beq.n	8003c90 <osMessageQueueGet+0x60>
        if (timeout != 0U) {
 8003c6e:	b9d4      	cbnz	r4, 8003ca6 <osMessageQueueGet+0x76>
          stat = osErrorResource;
 8003c70:	f06f 0002 	mvn.w	r0, #2
 8003c74:	e7e4      	b.n	8003c40 <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003c76:	2900      	cmp	r1, #0
 8003c78:	d0e0      	beq.n	8003c3c <osMessageQueueGet+0xc>
 8003c7a:	2c00      	cmp	r4, #0
 8003c7c:	d1de      	bne.n	8003c3c <osMessageQueueGet+0xc>
      yield = pdFALSE;
 8003c7e:	aa02      	add	r2, sp, #8
 8003c80:	f842 4d04 	str.w	r4, [r2, #-4]!
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003c84:	f000 fb62 	bl	800434c <xQueueReceiveFromISR>
 8003c88:	2801      	cmp	r0, #1
 8003c8a:	d1f1      	bne.n	8003c70 <osMessageQueueGet+0x40>
        portYIELD_FROM_ISR (yield);
 8003c8c:	9b01      	ldr	r3, [sp, #4]
 8003c8e:	b90b      	cbnz	r3, 8003c94 <osMessageQueueGet+0x64>
  stat = osOK;
 8003c90:	2000      	movs	r0, #0
 8003c92:	e7d5      	b.n	8003c40 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 8003c94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c98:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <osMessageQueueGet+0x80>)
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	f3bf 8f4f 	dsb	sy
 8003ca0:	f3bf 8f6f 	isb	sy
 8003ca4:	e7f4      	b.n	8003c90 <osMessageQueueGet+0x60>
          stat = osErrorTimeout;
 8003ca6:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8003caa:	e7c9      	b.n	8003c40 <osMessageQueueGet+0x10>
 8003cac:	2000083c 	.word	0x2000083c
 8003cb0:	e000ed04 	.word	0xe000ed04

08003cb4 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003cb4:	4b03      	ldr	r3, [pc, #12]	; (8003cc4 <vApplicationGetIdleTaskMemory+0x10>)
 8003cb6:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003cb8:	4b03      	ldr	r3, [pc, #12]	; (8003cc8 <vApplicationGetIdleTaskMemory+0x14>)
 8003cba:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003cbc:	2380      	movs	r3, #128	; 0x80
 8003cbe:	6013      	str	r3, [r2, #0]
}
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	200007e0 	.word	0x200007e0
 8003cc8:	200005e0 	.word	0x200005e0

08003ccc <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003ccc:	4b03      	ldr	r3, [pc, #12]	; (8003cdc <vApplicationGetTimerTaskMemory+0x10>)
 8003cce:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003cd0:	4b03      	ldr	r3, [pc, #12]	; (8003ce0 <vApplicationGetTimerTaskMemory+0x14>)
 8003cd2:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003cd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cd8:	6013      	str	r3, [r2, #0]
}
 8003cda:	4770      	bx	lr
 8003cdc:	20000c40 	.word	0x20000c40
 8003ce0:	20000840 	.word	0x20000840

08003ce4 <vListInitialise>:
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003ce4:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ce8:	f100 0308 	add.w	r3, r0, #8
 8003cec:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cee:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cf2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003cf8:	4770      	bx	lr

08003cfa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003cfe:	4770      	bx	lr

08003d00 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d00:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d02:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8003d04:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d06:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d08:	689a      	ldr	r2, [r3, #8]
 8003d0a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d0c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8003d0e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003d10:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003d12:	3301      	adds	r3, #1
 8003d14:	6003      	str	r3, [r0, #0]
}
 8003d16:	4770      	bx	lr

08003d18 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d18:	680a      	ldr	r2, [r1, #0]
{
 8003d1a:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d1c:	1c53      	adds	r3, r2, #1
 8003d1e:	d10a      	bne.n	8003d36 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d20:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d26:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d28:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d2a:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8003d2c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003d2e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003d30:	3301      	adds	r3, #1
 8003d32:	6003      	str	r3, [r0, #0]
}
 8003d34:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d36:	f100 0308 	add.w	r3, r0, #8
 8003d3a:	685c      	ldr	r4, [r3, #4]
 8003d3c:	6825      	ldr	r5, [r4, #0]
 8003d3e:	4295      	cmp	r5, r2
 8003d40:	d8ef      	bhi.n	8003d22 <vListInsert+0xa>
 8003d42:	4623      	mov	r3, r4
 8003d44:	e7f9      	b.n	8003d3a <vListInsert+0x22>

08003d46 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003d46:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d48:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8003d4c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d4e:	6882      	ldr	r2, [r0, #8]
 8003d50:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d52:	6859      	ldr	r1, [r3, #4]
 8003d54:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d56:	bf08      	it	eq
 8003d58:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	3a01      	subs	r2, #1
 8003d62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d64:	6818      	ldr	r0, [r3, #0]
}
 8003d66:	4770      	bx	lr

08003d68 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003d68:	b510      	push	{r4, lr}
 8003d6a:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d6c:	f001 fa32 	bl	80051d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003d70:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8003d72:	f001 fa51 	bl	8005218 <vPortExitCritical>

	return xReturn;
}
 8003d76:	fab4 f084 	clz	r0, r4
 8003d7a:	0940      	lsrs	r0, r0, #5
 8003d7c:	bd10      	pop	{r4, pc}

08003d7e <prvCopyDataToQueue>:
{
 8003d7e:	b570      	push	{r4, r5, r6, lr}
 8003d80:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003d82:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8003d84:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d86:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003d88:	b942      	cbnz	r2, 8003d9c <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d8a:	6805      	ldr	r5, [r0, #0]
 8003d8c:	b99d      	cbnz	r5, 8003db6 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003d8e:	6840      	ldr	r0, [r0, #4]
 8003d90:	f000 ffb2 	bl	8004cf8 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8003d94:	6065      	str	r5, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003d96:	3601      	adds	r6, #1
 8003d98:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8003d9a:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8003d9c:	b96d      	cbnz	r5, 8003dba <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003d9e:	6880      	ldr	r0, [r0, #8]
 8003da0:	f001 fe2a 	bl	80059f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003da4:	68a3      	ldr	r3, [r4, #8]
 8003da6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003da8:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003daa:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003dac:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d301      	bcc.n	8003db6 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003db2:	6823      	ldr	r3, [r4, #0]
 8003db4:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8003db6:	2000      	movs	r0, #0
 8003db8:	e7ed      	b.n	8003d96 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dba:	68c0      	ldr	r0, [r0, #12]
 8003dbc:	f001 fe1c 	bl	80059f8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003dc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003dc2:	68e2      	ldr	r2, [r4, #12]
 8003dc4:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003dc6:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003dc8:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003dca:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003dcc:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003dce:	bf3e      	ittt	cc
 8003dd0:	6862      	ldrcc	r2, [r4, #4]
 8003dd2:	189b      	addcc	r3, r3, r2
 8003dd4:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8003dd6:	2d02      	cmp	r5, #2
 8003dd8:	d1ed      	bne.n	8003db6 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003dda:	b10e      	cbz	r6, 8003de0 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8003ddc:	3e01      	subs	r6, #1
 8003dde:	e7ea      	b.n	8003db6 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8003de0:	4630      	mov	r0, r6
 8003de2:	e7d8      	b.n	8003d96 <prvCopyDataToQueue+0x18>

08003de4 <prvCopyDataFromQueue>:
{
 8003de4:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003de6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8003de8:	b410      	push	{r4}
 8003dea:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003dec:	b162      	cbz	r2, 8003e08 <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003dee:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003df0:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003df2:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003df4:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003df6:	60d9      	str	r1, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003df8:	bf28      	it	cs
 8003dfa:	6819      	ldrcs	r1, [r3, #0]
}
 8003dfc:	bc10      	pop	{r4}
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003dfe:	bf28      	it	cs
 8003e00:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003e02:	68d9      	ldr	r1, [r3, #12]
 8003e04:	f001 bdf8 	b.w	80059f8 <memcpy>
}
 8003e08:	bc10      	pop	{r4}
 8003e0a:	4770      	bx	lr

08003e0c <prvUnlockQueue>:
{
 8003e0c:	b570      	push	{r4, r5, r6, lr}
 8003e0e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8003e10:	f001 f9e0 	bl	80051d4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8003e14:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e18:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8003e1c:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e1e:	2d00      	cmp	r5, #0
 8003e20:	dc14      	bgt.n	8003e4c <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8003e22:	23ff      	movs	r3, #255	; 0xff
 8003e24:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8003e28:	f001 f9f6 	bl	8005218 <vPortExitCritical>
	taskENTER_CRITICAL();
 8003e2c:	f001 f9d2 	bl	80051d4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8003e30:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e34:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8003e38:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e3a:	2d00      	cmp	r5, #0
 8003e3c:	dc12      	bgt.n	8003e64 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8003e3e:	23ff      	movs	r3, #255	; 0xff
 8003e40:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8003e44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8003e48:	f001 b9e6 	b.w	8005218 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0e7      	beq.n	8003e22 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e52:	4630      	mov	r0, r6
 8003e54:	f000 feb2 	bl	8004bbc <xTaskRemoveFromEventList>
 8003e58:	b108      	cbz	r0, 8003e5e <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8003e5a:	f000 ff37 	bl	8004ccc <vTaskMissedYield>
 8003e5e:	3d01      	subs	r5, #1
 8003e60:	b26d      	sxtb	r5, r5
 8003e62:	e7dc      	b.n	8003e1e <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e64:	6923      	ldr	r3, [r4, #16]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d0e9      	beq.n	8003e3e <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e6a:	4630      	mov	r0, r6
 8003e6c:	f000 fea6 	bl	8004bbc <xTaskRemoveFromEventList>
 8003e70:	b108      	cbz	r0, 8003e76 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8003e72:	f000 ff2b 	bl	8004ccc <vTaskMissedYield>
 8003e76:	3d01      	subs	r5, #1
 8003e78:	b26d      	sxtb	r5, r5
 8003e7a:	e7de      	b.n	8003e3a <prvUnlockQueue+0x2e>

08003e7c <xQueueGenericReset>:
{
 8003e7c:	b538      	push	{r3, r4, r5, lr}
 8003e7e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8003e80:	4604      	mov	r4, r0
 8003e82:	b940      	cbnz	r0, 8003e96 <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e88:	f383 8811 	msr	BASEPRI, r3
 8003e8c:	f3bf 8f6f 	isb	sy
 8003e90:	f3bf 8f4f 	dsb	sy
 8003e94:	e7fe      	b.n	8003e94 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8003e96:	f001 f99d 	bl	80051d4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003e9a:	e9d4 300f 	ldrd	r3, r0, [r4, #60]	; 0x3c
 8003e9e:	4343      	muls	r3, r0
 8003ea0:	6822      	ldr	r2, [r4, #0]
 8003ea2:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003ea4:	1a1b      	subs	r3, r3, r0
 8003ea6:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003ea8:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003eaa:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003eac:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8003eae:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003eb0:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003eb2:	60a2      	str	r2, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 8003eb4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003eb8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8003ebc:	b995      	cbnz	r5, 8003ee4 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ebe:	6923      	ldr	r3, [r4, #16]
 8003ec0:	b163      	cbz	r3, 8003edc <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ec2:	f104 0010 	add.w	r0, r4, #16
 8003ec6:	f000 fe79 	bl	8004bbc <xTaskRemoveFromEventList>
 8003eca:	b138      	cbz	r0, 8003edc <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8003ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ed0:	4b09      	ldr	r3, [pc, #36]	; (8003ef8 <xQueueGenericReset+0x7c>)
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	f3bf 8f4f 	dsb	sy
 8003ed8:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8003edc:	f001 f99c 	bl	8005218 <vPortExitCritical>
}
 8003ee0:	2001      	movs	r0, #1
 8003ee2:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003ee4:	f104 0010 	add.w	r0, r4, #16
 8003ee8:	f7ff fefc 	bl	8003ce4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003eec:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003ef0:	f7ff fef8 	bl	8003ce4 <vListInitialise>
 8003ef4:	e7f2      	b.n	8003edc <xQueueGenericReset+0x60>
 8003ef6:	bf00      	nop
 8003ef8:	e000ed04 	.word	0xe000ed04

08003efc <xQueueGenericCreateStatic>:
	{
 8003efc:	b513      	push	{r0, r1, r4, lr}
 8003efe:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f00:	b940      	cbnz	r0, 8003f14 <xQueueGenericCreateStatic+0x18>
 8003f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f06:	f383 8811 	msr	BASEPRI, r3
 8003f0a:	f3bf 8f6f 	isb	sy
 8003f0e:	f3bf 8f4f 	dsb	sy
 8003f12:	e7fe      	b.n	8003f12 <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 8003f14:	b943      	cbnz	r3, 8003f28 <xQueueGenericCreateStatic+0x2c>
 8003f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1a:	f383 8811 	msr	BASEPRI, r3
 8003f1e:	f3bf 8f6f 	isb	sy
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	e7fe      	b.n	8003f26 <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003f28:	b14a      	cbz	r2, 8003f3e <xQueueGenericCreateStatic+0x42>
 8003f2a:	b991      	cbnz	r1, 8003f52 <xQueueGenericCreateStatic+0x56>
 8003f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f30:	f383 8811 	msr	BASEPRI, r3
 8003f34:	f3bf 8f6f 	isb	sy
 8003f38:	f3bf 8f4f 	dsb	sy
 8003f3c:	e7fe      	b.n	8003f3c <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003f3e:	b141      	cbz	r1, 8003f52 <xQueueGenericCreateStatic+0x56>
 8003f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f44:	f383 8811 	msr	BASEPRI, r3
 8003f48:	f3bf 8f6f 	isb	sy
 8003f4c:	f3bf 8f4f 	dsb	sy
 8003f50:	e7fe      	b.n	8003f50 <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003f52:	2350      	movs	r3, #80	; 0x50
 8003f54:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003f56:	9b01      	ldr	r3, [sp, #4]
 8003f58:	2b50      	cmp	r3, #80	; 0x50
 8003f5a:	d008      	beq.n	8003f6e <xQueueGenericCreateStatic+0x72>
 8003f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f60:	f383 8811 	msr	BASEPRI, r3
 8003f64:	f3bf 8f6f 	isb	sy
 8003f68:	f3bf 8f4f 	dsb	sy
 8003f6c:	e7fe      	b.n	8003f6c <xQueueGenericCreateStatic+0x70>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003f6e:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f70:	2900      	cmp	r1, #0
 8003f72:	bf08      	it	eq
 8003f74:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8003f76:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003f7a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003f7e:	4619      	mov	r1, r3
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f80:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003f82:	4620      	mov	r0, r4
 8003f84:	f7ff ff7a 	bl	8003e7c <xQueueGenericReset>
	}
 8003f88:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8003f8a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003f8e:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8003f92:	b002      	add	sp, #8
 8003f94:	bd10      	pop	{r4, pc}

08003f96 <xQueueGenericCreate>:
	{
 8003f96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f98:	460d      	mov	r5, r1
 8003f9a:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f9c:	4606      	mov	r6, r0
 8003f9e:	b940      	cbnz	r0, 8003fb2 <xQueueGenericCreate+0x1c>
 8003fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa4:	f383 8811 	msr	BASEPRI, r3
 8003fa8:	f3bf 8f6f 	isb	sy
 8003fac:	f3bf 8f4f 	dsb	sy
 8003fb0:	e7fe      	b.n	8003fb0 <xQueueGenericCreate+0x1a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fb2:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003fb4:	3050      	adds	r0, #80	; 0x50
 8003fb6:	f001 fa41 	bl	800543c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8003fba:	4604      	mov	r4, r0
 8003fbc:	b160      	cbz	r0, 8003fd8 <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8003fc4:	b955      	cbnz	r5, 8003fdc <xQueueGenericCreate+0x46>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003fc6:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8003fc8:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003fcc:	2101      	movs	r1, #1
 8003fce:	4620      	mov	r0, r4
 8003fd0:	f7ff ff54 	bl	8003e7c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8003fd4:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 8003fd8:	4620      	mov	r0, r4
 8003fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003fdc:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003fe0:	6003      	str	r3, [r0, #0]
 8003fe2:	e7f1      	b.n	8003fc8 <xQueueGenericCreate+0x32>

08003fe4 <xQueueGenericSend>:
{
 8003fe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fe8:	4688      	mov	r8, r1
 8003fea:	9201      	str	r2, [sp, #4]
 8003fec:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8003fee:	4604      	mov	r4, r0
 8003ff0:	b940      	cbnz	r0, 8004004 <xQueueGenericSend+0x20>
 8003ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff6:	f383 8811 	msr	BASEPRI, r3
 8003ffa:	f3bf 8f6f 	isb	sy
 8003ffe:	f3bf 8f4f 	dsb	sy
 8004002:	e7fe      	b.n	8004002 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004004:	b951      	cbnz	r1, 800401c <xQueueGenericSend+0x38>
 8004006:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004008:	b143      	cbz	r3, 800401c <xQueueGenericSend+0x38>
 800400a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400e:	f383 8811 	msr	BASEPRI, r3
 8004012:	f3bf 8f6f 	isb	sy
 8004016:	f3bf 8f4f 	dsb	sy
 800401a:	e7fe      	b.n	800401a <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800401c:	2f02      	cmp	r7, #2
 800401e:	d10b      	bne.n	8004038 <xQueueGenericSend+0x54>
 8004020:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004022:	2b01      	cmp	r3, #1
 8004024:	d008      	beq.n	8004038 <xQueueGenericSend+0x54>
 8004026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402a:	f383 8811 	msr	BASEPRI, r3
 800402e:	f3bf 8f6f 	isb	sy
 8004032:	f3bf 8f4f 	dsb	sy
 8004036:	e7fe      	b.n	8004036 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004038:	f000 fe4e 	bl	8004cd8 <xTaskGetSchedulerState>
 800403c:	b950      	cbnz	r0, 8004054 <xQueueGenericSend+0x70>
 800403e:	9e01      	ldr	r6, [sp, #4]
 8004040:	b14e      	cbz	r6, 8004056 <xQueueGenericSend+0x72>
 8004042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004046:	f383 8811 	msr	BASEPRI, r3
 800404a:	f3bf 8f6f 	isb	sy
 800404e:	f3bf 8f4f 	dsb	sy
 8004052:	e7fe      	b.n	8004052 <xQueueGenericSend+0x6e>
 8004054:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8004056:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 800405a:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8004144 <xQueueGenericSend+0x160>
 800405e:	e037      	b.n	80040d0 <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004060:	9d01      	ldr	r5, [sp, #4]
 8004062:	b91d      	cbnz	r5, 800406c <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 8004064:	f001 f8d8 	bl	8005218 <vPortExitCritical>
			return errQUEUE_FULL;
 8004068:	2000      	movs	r0, #0
 800406a:	e050      	b.n	800410e <xQueueGenericSend+0x12a>
				else if( xEntryTimeSet == pdFALSE )
 800406c:	b916      	cbnz	r6, 8004074 <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800406e:	a802      	add	r0, sp, #8
 8004070:	f000 fde4 	bl	8004c3c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8004074:	f001 f8d0 	bl	8005218 <vPortExitCritical>
		vTaskSuspendAll();
 8004078:	f000 fbf4 	bl	8004864 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800407c:	f001 f8aa 	bl	80051d4 <vPortEnterCritical>
 8004080:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004084:	2bff      	cmp	r3, #255	; 0xff
 8004086:	bf08      	it	eq
 8004088:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 800408c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004090:	2bff      	cmp	r3, #255	; 0xff
 8004092:	bf08      	it	eq
 8004094:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 8004098:	f001 f8be 	bl	8005218 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800409c:	a901      	add	r1, sp, #4
 800409e:	a802      	add	r0, sp, #8
 80040a0:	f000 fdd8 	bl	8004c54 <xTaskCheckForTimeOut>
 80040a4:	2800      	cmp	r0, #0
 80040a6:	d146      	bne.n	8004136 <xQueueGenericSend+0x152>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040a8:	f001 f894 	bl	80051d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80040ac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80040ae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d12f      	bne.n	8004114 <xQueueGenericSend+0x130>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80040b4:	f001 f8b0 	bl	8005218 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80040b8:	9901      	ldr	r1, [sp, #4]
 80040ba:	f104 0010 	add.w	r0, r4, #16
 80040be:	f000 fd43 	bl	8004b48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80040c2:	4620      	mov	r0, r4
 80040c4:	f7ff fea2 	bl	8003e0c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80040c8:	f000 fc6a 	bl	80049a0 <xTaskResumeAll>
 80040cc:	b350      	cbz	r0, 8004124 <xQueueGenericSend+0x140>
 80040ce:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80040d0:	f001 f880 	bl	80051d4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80040d4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80040d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80040d8:	429a      	cmp	r2, r3
 80040da:	d301      	bcc.n	80040e0 <xQueueGenericSend+0xfc>
 80040dc:	2f02      	cmp	r7, #2
 80040de:	d1bf      	bne.n	8004060 <xQueueGenericSend+0x7c>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040e0:	463a      	mov	r2, r7
 80040e2:	4641      	mov	r1, r8
 80040e4:	4620      	mov	r0, r4
 80040e6:	f7ff fe4a 	bl	8003d7e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040ec:	b11b      	cbz	r3, 80040f6 <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040ee:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80040f2:	f000 fd63 	bl	8004bbc <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80040f6:	b138      	cbz	r0, 8004108 <xQueueGenericSend+0x124>
						queueYIELD_IF_USING_PREEMPTION();
 80040f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040fc:	4b11      	ldr	r3, [pc, #68]	; (8004144 <xQueueGenericSend+0x160>)
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	f3bf 8f4f 	dsb	sy
 8004104:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004108:	f001 f886 	bl	8005218 <vPortExitCritical>
				return pdPASS;
 800410c:	2001      	movs	r0, #1
}
 800410e:	b004      	add	sp, #16
 8004110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 8004114:	f001 f880 	bl	8005218 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8004118:	4620      	mov	r0, r4
 800411a:	f7ff fe77 	bl	8003e0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800411e:	f000 fc3f 	bl	80049a0 <xTaskResumeAll>
 8004122:	e7d4      	b.n	80040ce <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8004124:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004128:	f8ca 3000 	str.w	r3, [sl]
 800412c:	f3bf 8f4f 	dsb	sy
 8004130:	f3bf 8f6f 	isb	sy
 8004134:	e7cb      	b.n	80040ce <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 8004136:	4620      	mov	r0, r4
 8004138:	f7ff fe68 	bl	8003e0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800413c:	f000 fc30 	bl	80049a0 <xTaskResumeAll>
 8004140:	e792      	b.n	8004068 <xQueueGenericSend+0x84>
 8004142:	bf00      	nop
 8004144:	e000ed04 	.word	0xe000ed04

08004148 <xQueueGenericSendFromISR>:
{
 8004148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800414c:	4689      	mov	r9, r1
 800414e:	4690      	mov	r8, r2
 8004150:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8004152:	4604      	mov	r4, r0
 8004154:	b940      	cbnz	r0, 8004168 <xQueueGenericSendFromISR+0x20>
 8004156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415a:	f383 8811 	msr	BASEPRI, r3
 800415e:	f3bf 8f6f 	isb	sy
 8004162:	f3bf 8f4f 	dsb	sy
 8004166:	e7fe      	b.n	8004166 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004168:	b951      	cbnz	r1, 8004180 <xQueueGenericSendFromISR+0x38>
 800416a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800416c:	b143      	cbz	r3, 8004180 <xQueueGenericSendFromISR+0x38>
 800416e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004172:	f383 8811 	msr	BASEPRI, r3
 8004176:	f3bf 8f6f 	isb	sy
 800417a:	f3bf 8f4f 	dsb	sy
 800417e:	e7fe      	b.n	800417e <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004180:	2f02      	cmp	r7, #2
 8004182:	d10b      	bne.n	800419c <xQueueGenericSendFromISR+0x54>
 8004184:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004186:	2b01      	cmp	r3, #1
 8004188:	d008      	beq.n	800419c <xQueueGenericSendFromISR+0x54>
 800418a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418e:	f383 8811 	msr	BASEPRI, r3
 8004192:	f3bf 8f6f 	isb	sy
 8004196:	f3bf 8f4f 	dsb	sy
 800419a:	e7fe      	b.n	800419a <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800419c:	f001 f8fc 	bl	8005398 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80041a0:	f3ef 8611 	mrs	r6, BASEPRI
 80041a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a8:	f383 8811 	msr	BASEPRI, r3
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041b4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80041b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d301      	bcc.n	80041c0 <xQueueGenericSendFromISR+0x78>
 80041bc:	2f02      	cmp	r7, #2
 80041be:	d122      	bne.n	8004206 <xQueueGenericSendFromISR+0xbe>
			const int8_t cTxLock = pxQueue->cTxLock;
 80041c0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041c4:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 80041c6:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041c8:	4649      	mov	r1, r9
 80041ca:	4620      	mov	r0, r4
 80041cc:	f7ff fdd7 	bl	8003d7e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80041d0:	1c6b      	adds	r3, r5, #1
 80041d2:	d113      	bne.n	80041fc <xQueueGenericSendFromISR+0xb4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041d6:	b90b      	cbnz	r3, 80041dc <xQueueGenericSendFromISR+0x94>
			xReturn = pdPASS;
 80041d8:	2001      	movs	r0, #1
 80041da:	e00b      	b.n	80041f4 <xQueueGenericSendFromISR+0xac>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041dc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80041e0:	f000 fcec 	bl	8004bbc <xTaskRemoveFromEventList>
 80041e4:	2800      	cmp	r0, #0
 80041e6:	d0f7      	beq.n	80041d8 <xQueueGenericSendFromISR+0x90>
							if( pxHigherPriorityTaskWoken != NULL )
 80041e8:	f1b8 0f00 	cmp.w	r8, #0
 80041ec:	d0f4      	beq.n	80041d8 <xQueueGenericSendFromISR+0x90>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80041ee:	2001      	movs	r0, #1
 80041f0:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80041f4:	f386 8811 	msr	BASEPRI, r6
}
 80041f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80041fc:	3501      	adds	r5, #1
 80041fe:	b26d      	sxtb	r5, r5
 8004200:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8004204:	e7e8      	b.n	80041d8 <xQueueGenericSendFromISR+0x90>
			xReturn = errQUEUE_FULL;
 8004206:	2000      	movs	r0, #0
 8004208:	e7f4      	b.n	80041f4 <xQueueGenericSendFromISR+0xac>
	...

0800420c <xQueueReceive>:
{
 800420c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004210:	b085      	sub	sp, #20
 8004212:	460f      	mov	r7, r1
 8004214:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8004216:	4604      	mov	r4, r0
 8004218:	b940      	cbnz	r0, 800422c <xQueueReceive+0x20>
	__asm volatile
 800421a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421e:	f383 8811 	msr	BASEPRI, r3
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	e7fe      	b.n	800422a <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800422c:	b951      	cbnz	r1, 8004244 <xQueueReceive+0x38>
 800422e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004230:	b143      	cbz	r3, 8004244 <xQueueReceive+0x38>
 8004232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004236:	f383 8811 	msr	BASEPRI, r3
 800423a:	f3bf 8f6f 	isb	sy
 800423e:	f3bf 8f4f 	dsb	sy
 8004242:	e7fe      	b.n	8004242 <xQueueReceive+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004244:	f000 fd48 	bl	8004cd8 <xTaskGetSchedulerState>
 8004248:	b950      	cbnz	r0, 8004260 <xQueueReceive+0x54>
 800424a:	9e01      	ldr	r6, [sp, #4]
 800424c:	b14e      	cbz	r6, 8004262 <xQueueReceive+0x56>
 800424e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004252:	f383 8811 	msr	BASEPRI, r3
 8004256:	f3bf 8f6f 	isb	sy
 800425a:	f3bf 8f4f 	dsb	sy
 800425e:	e7fe      	b.n	800425e <xQueueReceive+0x52>
 8004260:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8004262:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8004266:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8004348 <xQueueReceive+0x13c>
 800426a:	e03b      	b.n	80042e4 <xQueueReceive+0xd8>
				if( xTicksToWait == ( TickType_t ) 0 )
 800426c:	9d01      	ldr	r5, [sp, #4]
 800426e:	b91d      	cbnz	r5, 8004278 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 8004270:	f000 ffd2 	bl	8005218 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8004274:	2000      	movs	r0, #0
 8004276:	e052      	b.n	800431e <xQueueReceive+0x112>
				else if( xEntryTimeSet == pdFALSE )
 8004278:	b916      	cbnz	r6, 8004280 <xQueueReceive+0x74>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800427a:	a802      	add	r0, sp, #8
 800427c:	f000 fcde 	bl	8004c3c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8004280:	f000 ffca 	bl	8005218 <vPortExitCritical>
		vTaskSuspendAll();
 8004284:	f000 faee 	bl	8004864 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004288:	f000 ffa4 	bl	80051d4 <vPortEnterCritical>
 800428c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004290:	2bff      	cmp	r3, #255	; 0xff
 8004292:	bf08      	it	eq
 8004294:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8004298:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800429c:	2bff      	cmp	r3, #255	; 0xff
 800429e:	bf08      	it	eq
 80042a0:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 80042a4:	f000 ffb8 	bl	8005218 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042a8:	a901      	add	r1, sp, #4
 80042aa:	a802      	add	r0, sp, #8
 80042ac:	f000 fcd2 	bl	8004c54 <xTaskCheckForTimeOut>
 80042b0:	2800      	cmp	r0, #0
 80042b2:	d13d      	bne.n	8004330 <xQueueReceive+0x124>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80042b4:	4620      	mov	r0, r4
 80042b6:	f7ff fd57 	bl	8003d68 <prvIsQueueEmpty>
 80042ba:	b398      	cbz	r0, 8004324 <xQueueReceive+0x118>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80042bc:	9901      	ldr	r1, [sp, #4]
 80042be:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80042c2:	f000 fc41 	bl	8004b48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80042c6:	4620      	mov	r0, r4
 80042c8:	f7ff fda0 	bl	8003e0c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80042cc:	f000 fb68 	bl	80049a0 <xTaskResumeAll>
 80042d0:	b938      	cbnz	r0, 80042e2 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 80042d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80042d6:	f8c9 3000 	str.w	r3, [r9]
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	f3bf 8f6f 	isb	sy
 80042e2:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80042e4:	f000 ff76 	bl	80051d4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042e8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042ea:	2d00      	cmp	r5, #0
 80042ec:	d0be      	beq.n	800426c <xQueueReceive+0x60>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80042ee:	4639      	mov	r1, r7
 80042f0:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80042f2:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80042f4:	f7ff fd76 	bl	8003de4 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80042f8:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042fa:	6923      	ldr	r3, [r4, #16]
 80042fc:	b163      	cbz	r3, 8004318 <xQueueReceive+0x10c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042fe:	f104 0010 	add.w	r0, r4, #16
 8004302:	f000 fc5b 	bl	8004bbc <xTaskRemoveFromEventList>
 8004306:	b138      	cbz	r0, 8004318 <xQueueReceive+0x10c>
						queueYIELD_IF_USING_PREEMPTION();
 8004308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800430c:	4b0e      	ldr	r3, [pc, #56]	; (8004348 <xQueueReceive+0x13c>)
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	f3bf 8f4f 	dsb	sy
 8004314:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004318:	f000 ff7e 	bl	8005218 <vPortExitCritical>
				return pdPASS;
 800431c:	2001      	movs	r0, #1
}
 800431e:	b005      	add	sp, #20
 8004320:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 8004324:	4620      	mov	r0, r4
 8004326:	f7ff fd71 	bl	8003e0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800432a:	f000 fb39 	bl	80049a0 <xTaskResumeAll>
 800432e:	e7d8      	b.n	80042e2 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 8004330:	4620      	mov	r0, r4
 8004332:	f7ff fd6b 	bl	8003e0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004336:	f000 fb33 	bl	80049a0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800433a:	4620      	mov	r0, r4
 800433c:	f7ff fd14 	bl	8003d68 <prvIsQueueEmpty>
 8004340:	2800      	cmp	r0, #0
 8004342:	d0ce      	beq.n	80042e2 <xQueueReceive+0xd6>
 8004344:	e796      	b.n	8004274 <xQueueReceive+0x68>
 8004346:	bf00      	nop
 8004348:	e000ed04 	.word	0xe000ed04

0800434c <xQueueReceiveFromISR>:
{
 800434c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004350:	4689      	mov	r9, r1
 8004352:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8004354:	4605      	mov	r5, r0
 8004356:	b940      	cbnz	r0, 800436a <xQueueReceiveFromISR+0x1e>
 8004358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435c:	f383 8811 	msr	BASEPRI, r3
 8004360:	f3bf 8f6f 	isb	sy
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	e7fe      	b.n	8004368 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800436a:	b951      	cbnz	r1, 8004382 <xQueueReceiveFromISR+0x36>
 800436c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800436e:	b143      	cbz	r3, 8004382 <xQueueReceiveFromISR+0x36>
 8004370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004374:	f383 8811 	msr	BASEPRI, r3
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	e7fe      	b.n	8004380 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004382:	f001 f809 	bl	8005398 <vPortValidateInterruptPriority>
	__asm volatile
 8004386:	f3ef 8711 	mrs	r7, BASEPRI
 800438a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800439a:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800439c:	b31c      	cbz	r4, 80043e6 <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 800439e:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80043a2:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 80043a4:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80043a6:	4628      	mov	r0, r5
 80043a8:	f7ff fd1c 	bl	8003de4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80043ac:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 80043ae:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80043b0:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 80043b2:	d113      	bne.n	80043dc <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043b4:	692b      	ldr	r3, [r5, #16]
 80043b6:	b90b      	cbnz	r3, 80043bc <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 80043b8:	2001      	movs	r0, #1
 80043ba:	e00b      	b.n	80043d4 <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043bc:	f105 0010 	add.w	r0, r5, #16
 80043c0:	f000 fbfc 	bl	8004bbc <xTaskRemoveFromEventList>
 80043c4:	2800      	cmp	r0, #0
 80043c6:	d0f7      	beq.n	80043b8 <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 80043c8:	f1b8 0f00 	cmp.w	r8, #0
 80043cc:	d0f4      	beq.n	80043b8 <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80043ce:	2001      	movs	r0, #1
 80043d0:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 80043d4:	f387 8811 	msr	BASEPRI, r7
}
 80043d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80043dc:	3601      	adds	r6, #1
 80043de:	b276      	sxtb	r6, r6
 80043e0:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 80043e4:	e7e8      	b.n	80043b8 <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 80043e6:	4620      	mov	r0, r4
 80043e8:	e7f4      	b.n	80043d4 <xQueueReceiveFromISR+0x88>
	...

080043ec <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80043ec:	2300      	movs	r3, #0
	{
 80043ee:	b530      	push	{r4, r5, lr}
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80043f0:	4a06      	ldr	r2, [pc, #24]	; (800440c <vQueueAddToRegistry+0x20>)
 80043f2:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 80043f6:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 80043fa:	b91d      	cbnz	r5, 8004404 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80043fc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004400:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004402:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004404:	3301      	adds	r3, #1
 8004406:	2b08      	cmp	r3, #8
 8004408:	d1f3      	bne.n	80043f2 <vQueueAddToRegistry+0x6>
 800440a:	e7fa      	b.n	8004402 <vQueueAddToRegistry+0x16>
 800440c:	200026f8 	.word	0x200026f8

08004410 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004410:	b570      	push	{r4, r5, r6, lr}
 8004412:	4604      	mov	r4, r0
 8004414:	460d      	mov	r5, r1
 8004416:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004418:	f000 fedc 	bl	80051d4 <vPortEnterCritical>
 800441c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004420:	2bff      	cmp	r3, #255	; 0xff
 8004422:	bf04      	itt	eq
 8004424:	2300      	moveq	r3, #0
 8004426:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 800442a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800442e:	2bff      	cmp	r3, #255	; 0xff
 8004430:	bf04      	itt	eq
 8004432:	2300      	moveq	r3, #0
 8004434:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8004438:	f000 feee 	bl	8005218 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800443c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800443e:	b92b      	cbnz	r3, 800444c <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004440:	4632      	mov	r2, r6
 8004442:	4629      	mov	r1, r5
 8004444:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004448:	f000 fb98 	bl	8004b7c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800444c:	4620      	mov	r0, r4
	}
 800444e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8004452:	f7ff bcdb 	b.w	8003e0c <prvUnlockQueue>
	...

08004458 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800445c:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800445e:	f000 feb9 	bl	80051d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004462:	4b2f      	ldr	r3, [pc, #188]	; (8004520 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 8004464:	4d2f      	ldr	r5, [pc, #188]	; (8004524 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	4f2f      	ldr	r7, [pc, #188]	; (8004528 <prvAddNewTaskToReadyList+0xd0>)
 800446a:	3201      	adds	r2, #1
 800446c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800446e:	682e      	ldr	r6, [r5, #0]
 8004470:	2e00      	cmp	r6, #0
 8004472:	d149      	bne.n	8004508 <prvAddNewTaskToReadyList+0xb0>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004474:	602c      	str	r4, [r5, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d11f      	bne.n	80044bc <prvAddNewTaskToReadyList+0x64>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800447c:	f04f 0814 	mov.w	r8, #20
 8004480:	fb08 7006 	mla	r0, r8, r6, r7
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004484:	3601      	adds	r6, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004486:	f7ff fc2d 	bl	8003ce4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800448a:	2e38      	cmp	r6, #56	; 0x38
 800448c:	d1f8      	bne.n	8004480 <prvAddNewTaskToReadyList+0x28>
	}

	vListInitialise( &xDelayedTaskList1 );
 800448e:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8004554 <prvAddNewTaskToReadyList+0xfc>
	vListInitialise( &xDelayedTaskList2 );
 8004492:	4e26      	ldr	r6, [pc, #152]	; (800452c <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 8004494:	4640      	mov	r0, r8
 8004496:	f7ff fc25 	bl	8003ce4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800449a:	4630      	mov	r0, r6
 800449c:	f7ff fc22 	bl	8003ce4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80044a0:	4823      	ldr	r0, [pc, #140]	; (8004530 <prvAddNewTaskToReadyList+0xd8>)
 80044a2:	f7ff fc1f 	bl	8003ce4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80044a6:	4823      	ldr	r0, [pc, #140]	; (8004534 <prvAddNewTaskToReadyList+0xdc>)
 80044a8:	f7ff fc1c 	bl	8003ce4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80044ac:	4822      	ldr	r0, [pc, #136]	; (8004538 <prvAddNewTaskToReadyList+0xe0>)
 80044ae:	f7ff fc19 	bl	8003ce4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80044b2:	4b22      	ldr	r3, [pc, #136]	; (800453c <prvAddNewTaskToReadyList+0xe4>)
 80044b4:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80044b8:	4b21      	ldr	r3, [pc, #132]	; (8004540 <prvAddNewTaskToReadyList+0xe8>)
 80044ba:	601e      	str	r6, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80044bc:	2014      	movs	r0, #20
		uxTaskNumber++;
 80044be:	4a21      	ldr	r2, [pc, #132]	; (8004544 <prvAddNewTaskToReadyList+0xec>)
 80044c0:	6813      	ldr	r3, [r2, #0]
 80044c2:	3301      	adds	r3, #1
 80044c4:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80044c6:	4a20      	ldr	r2, [pc, #128]	; (8004548 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80044c8:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80044ca:	6811      	ldr	r1, [r2, #0]
 80044cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80044ce:	428b      	cmp	r3, r1
 80044d0:	fb00 7003 	mla	r0, r0, r3, r7
 80044d4:	f104 0104 	add.w	r1, r4, #4
 80044d8:	bf88      	it	hi
 80044da:	6013      	strhi	r3, [r2, #0]
 80044dc:	f7ff fc10 	bl	8003d00 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80044e0:	f000 fe9a 	bl	8005218 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80044e4:	4b19      	ldr	r3, [pc, #100]	; (800454c <prvAddNewTaskToReadyList+0xf4>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	b163      	cbz	r3, 8004504 <prvAddNewTaskToReadyList+0xac>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80044ea:	682b      	ldr	r3, [r5, #0]
 80044ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d207      	bcs.n	8004504 <prvAddNewTaskToReadyList+0xac>
			taskYIELD_IF_USING_PREEMPTION();
 80044f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044f8:	4b15      	ldr	r3, [pc, #84]	; (8004550 <prvAddNewTaskToReadyList+0xf8>)
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	f3bf 8f4f 	dsb	sy
 8004500:	f3bf 8f6f 	isb	sy
}
 8004504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8004508:	4b10      	ldr	r3, [pc, #64]	; (800454c <prvAddNewTaskToReadyList+0xf4>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1d5      	bne.n	80044bc <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004510:	682b      	ldr	r3, [r5, #0]
 8004512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004514:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004516:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8004518:	bf98      	it	ls
 800451a:	602c      	strls	r4, [r5, #0]
 800451c:	e7ce      	b.n	80044bc <prvAddNewTaskToReadyList+0x64>
 800451e:	bf00      	nop
 8004520:	20001108 	.word	0x20001108
 8004524:	20000c9c 	.word	0x20000c9c
 8004528:	20000ca8 	.word	0x20000ca8
 800452c:	20001134 	.word	0x20001134
 8004530:	20001150 	.word	0x20001150
 8004534:	2000117c 	.word	0x2000117c
 8004538:	20001168 	.word	0x20001168
 800453c:	20000ca0 	.word	0x20000ca0
 8004540:	20000ca4 	.word	0x20000ca4
 8004544:	20001118 	.word	0x20001118
 8004548:	2000111c 	.word	0x2000111c
 800454c:	20001164 	.word	0x20001164
 8004550:	e000ed04 	.word	0xe000ed04
 8004554:	20001120 	.word	0x20001120

08004558 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004558:	b510      	push	{r4, lr}
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800455a:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
	{
 800455e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004560:	b93b      	cbnz	r3, 8004572 <prvDeleteTCB+0x1a>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004562:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8004564:	f000 fff6 	bl	8005554 <vPortFree>
				vPortFree( pxTCB );
 8004568:	4620      	mov	r0, r4
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800456a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800456e:	f000 bff1 	b.w	8005554 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004572:	2b01      	cmp	r3, #1
 8004574:	d0f9      	beq.n	800456a <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004576:	2b02      	cmp	r3, #2
 8004578:	d008      	beq.n	800458c <prvDeleteTCB+0x34>
	__asm volatile
 800457a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457e:	f383 8811 	msr	BASEPRI, r3
 8004582:	f3bf 8f6f 	isb	sy
 8004586:	f3bf 8f4f 	dsb	sy
 800458a:	e7fe      	b.n	800458a <prvDeleteTCB+0x32>
	}
 800458c:	bd10      	pop	{r4, pc}
	...

08004590 <prvIdleTask>:
{
 8004590:	b580      	push	{r7, lr}
				taskYIELD();
 8004592:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80045f0 <prvIdleTask+0x60>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004596:	4f12      	ldr	r7, [pc, #72]	; (80045e0 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004598:	4c12      	ldr	r4, [pc, #72]	; (80045e4 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 800459a:	4d13      	ldr	r5, [pc, #76]	; (80045e8 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800459c:	6823      	ldr	r3, [r4, #0]
 800459e:	b963      	cbnz	r3, 80045ba <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80045a0:	4b12      	ldr	r3, [pc, #72]	; (80045ec <prvIdleTask+0x5c>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d9f8      	bls.n	800459a <prvIdleTask+0xa>
				taskYIELD();
 80045a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80045ac:	f8c8 3000 	str.w	r3, [r8]
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	f3bf 8f6f 	isb	sy
 80045b8:	e7ee      	b.n	8004598 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 80045ba:	f000 fe0b 	bl	80051d4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045c2:	1d30      	adds	r0, r6, #4
 80045c4:	f7ff fbbf 	bl	8003d46 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80045c8:	682b      	ldr	r3, [r5, #0]
 80045ca:	3b01      	subs	r3, #1
 80045cc:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80045ce:	6823      	ldr	r3, [r4, #0]
 80045d0:	3b01      	subs	r3, #1
 80045d2:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80045d4:	f000 fe20 	bl	8005218 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80045d8:	4630      	mov	r0, r6
 80045da:	f7ff ffbd 	bl	8004558 <prvDeleteTCB>
 80045de:	e7dd      	b.n	800459c <prvIdleTask+0xc>
 80045e0:	2000117c 	.word	0x2000117c
 80045e4:	2000110c 	.word	0x2000110c
 80045e8:	20001108 	.word	0x20001108
 80045ec:	20000ca8 	.word	0x20000ca8
 80045f0:	e000ed04 	.word	0xe000ed04

080045f4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045f4:	4a06      	ldr	r2, [pc, #24]	; (8004610 <prvResetNextTaskUnblockTime+0x1c>)
 80045f6:	6813      	ldr	r3, [r2, #0]
 80045f8:	6819      	ldr	r1, [r3, #0]
 80045fa:	4b06      	ldr	r3, [pc, #24]	; (8004614 <prvResetNextTaskUnblockTime+0x20>)
 80045fc:	b919      	cbnz	r1, 8004606 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80045fe:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004602:	601a      	str	r2, [r3, #0]
	}
}
 8004604:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004606:	6812      	ldr	r2, [r2, #0]
 8004608:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800460a:	68d2      	ldr	r2, [r2, #12]
 800460c:	6852      	ldr	r2, [r2, #4]
 800460e:	e7f8      	b.n	8004602 <prvResetNextTaskUnblockTime+0xe>
 8004610:	20000ca0 	.word	0x20000ca0
 8004614:	20001148 	.word	0x20001148

08004618 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8004618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800461c:	460d      	mov	r5, r1
 800461e:	e9dd 7409 	ldrd	r7, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004622:	0096      	lsls	r6, r2, #2
 8004624:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8004626:	4680      	mov	r8, r0
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004628:	21a5      	movs	r1, #165	; 0xa5
 800462a:	6b20      	ldr	r0, [r4, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800462c:	4699      	mov	r9, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800462e:	f001 f9ee 	bl	8005a0e <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004632:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004634:	3e04      	subs	r6, #4
 8004636:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004638:	f026 0607 	bic.w	r6, r6, #7
 800463c:	1e6b      	subs	r3, r5, #1
 800463e:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8004642:	350f      	adds	r5, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004644:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8004648:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 800464c:	7819      	ldrb	r1, [r3, #0]
 800464e:	b109      	cbz	r1, 8004654 <prvInitialiseNewTask.isra.2+0x3c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004650:	42ab      	cmp	r3, r5
 8004652:	d1f7      	bne.n	8004644 <prvInitialiseNewTask.isra.2+0x2c>
 8004654:	9d08      	ldr	r5, [sp, #32]
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004656:	f04f 0a00 	mov.w	sl, #0
 800465a:	2d37      	cmp	r5, #55	; 0x37
 800465c:	bf28      	it	cs
 800465e:	2537      	movcs	r5, #55	; 0x37
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004660:	1d20      	adds	r0, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8004662:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 8004664:	e9c4 5a13 	strd	r5, sl, [r4, #76]	; 0x4c
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004668:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800466c:	f7ff fb45 	bl	8003cfa <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004670:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004674:	f104 0018 	add.w	r0, r4, #24
 8004678:	f7ff fb3f 	bl	8003cfa <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800467c:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004680:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004682:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004684:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004686:	f884 a058 	strb.w	sl, [r4, #88]	; 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800468a:	464a      	mov	r2, r9
 800468c:	4641      	mov	r1, r8
 800468e:	4630      	mov	r0, r6
 8004690:	f000 fd7a 	bl	8005188 <pxPortInitialiseStack>
 8004694:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8004696:	b107      	cbz	r7, 800469a <prvInitialiseNewTask.isra.2+0x82>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004698:	603c      	str	r4, [r7, #0]
}
 800469a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080046a0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80046a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046a2:	4605      	mov	r5, r0
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80046a4:	4b15      	ldr	r3, [pc, #84]	; (80046fc <prvAddCurrentTaskToDelayedList+0x5c>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046a6:	4e16      	ldr	r6, [pc, #88]	; (8004700 <prvAddCurrentTaskToDelayedList+0x60>)
const TickType_t xConstTickCount = xTickCount;
 80046a8:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046aa:	6830      	ldr	r0, [r6, #0]
{
 80046ac:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046ae:	3004      	adds	r0, #4
 80046b0:	f7ff fb49 	bl	8003d46 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046b4:	1c6b      	adds	r3, r5, #1
 80046b6:	4633      	mov	r3, r6
 80046b8:	d107      	bne.n	80046ca <prvAddCurrentTaskToDelayedList+0x2a>
 80046ba:	b137      	cbz	r7, 80046ca <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046bc:	6831      	ldr	r1, [r6, #0]
 80046be:	4811      	ldr	r0, [pc, #68]	; (8004704 <prvAddCurrentTaskToDelayedList+0x64>)
 80046c0:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80046c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046c6:	f7ff bb1b 	b.w	8003d00 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	1964      	adds	r4, r4, r5
 80046ce:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 80046d0:	d307      	bcc.n	80046e2 <prvAddCurrentTaskToDelayedList+0x42>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046d2:	4a0d      	ldr	r2, [pc, #52]	; (8004708 <prvAddCurrentTaskToDelayedList+0x68>)
 80046d4:	6810      	ldr	r0, [r2, #0]
 80046d6:	6819      	ldr	r1, [r3, #0]
}
 80046d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046dc:	3104      	adds	r1, #4
 80046de:	f7ff bb1b 	b.w	8003d18 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046e2:	4a0a      	ldr	r2, [pc, #40]	; (800470c <prvAddCurrentTaskToDelayedList+0x6c>)
 80046e4:	6810      	ldr	r0, [r2, #0]
 80046e6:	6819      	ldr	r1, [r3, #0]
 80046e8:	3104      	adds	r1, #4
 80046ea:	f7ff fb15 	bl	8003d18 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80046ee:	4b08      	ldr	r3, [pc, #32]	; (8004710 <prvAddCurrentTaskToDelayedList+0x70>)
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 80046f4:	bf88      	it	hi
 80046f6:	601c      	strhi	r4, [r3, #0]
}
 80046f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046fa:	bf00      	nop
 80046fc:	20001190 	.word	0x20001190
 8004700:	20000c9c 	.word	0x20000c9c
 8004704:	20001168 	.word	0x20001168
 8004708:	20000ca4 	.word	0x20000ca4
 800470c:	20000ca0 	.word	0x20000ca0
 8004710:	20001148 	.word	0x20001148

08004714 <xTaskCreateStatic>:
	{
 8004714:	b570      	push	{r4, r5, r6, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800471c:	b945      	cbnz	r5, 8004730 <xTaskCreateStatic+0x1c>
 800471e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004722:	f383 8811 	msr	BASEPRI, r3
 8004726:	f3bf 8f6f 	isb	sy
 800472a:	f3bf 8f4f 	dsb	sy
 800472e:	e7fe      	b.n	800472e <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8004730:	b944      	cbnz	r4, 8004744 <xTaskCreateStatic+0x30>
 8004732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004736:	f383 8811 	msr	BASEPRI, r3
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	e7fe      	b.n	8004742 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8004744:	265c      	movs	r6, #92	; 0x5c
 8004746:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004748:	9e04      	ldr	r6, [sp, #16]
 800474a:	2e5c      	cmp	r6, #92	; 0x5c
 800474c:	d008      	beq.n	8004760 <xTaskCreateStatic+0x4c>
 800474e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004752:	f383 8811 	msr	BASEPRI, r3
 8004756:	f3bf 8f6f 	isb	sy
 800475a:	f3bf 8f4f 	dsb	sy
 800475e:	e7fe      	b.n	800475e <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004760:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004762:	2502      	movs	r5, #2
 8004764:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004768:	ad05      	add	r5, sp, #20
 800476a:	9501      	str	r5, [sp, #4]
 800476c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800476e:	9402      	str	r4, [sp, #8]
 8004770:	9500      	str	r5, [sp, #0]
 8004772:	f7ff ff51 	bl	8004618 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004776:	4620      	mov	r0, r4
 8004778:	f7ff fe6e 	bl	8004458 <prvAddNewTaskToReadyList>
	}
 800477c:	9805      	ldr	r0, [sp, #20]
 800477e:	b006      	add	sp, #24
 8004780:	bd70      	pop	{r4, r5, r6, pc}

08004782 <xTaskCreate>:
	{
 8004782:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004786:	4607      	mov	r7, r0
 8004788:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800478a:	0090      	lsls	r0, r2, #2
	{
 800478c:	4688      	mov	r8, r1
 800478e:	4616      	mov	r6, r2
 8004790:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004792:	f000 fe53 	bl	800543c <pvPortMalloc>
			if( pxStack != NULL )
 8004796:	4605      	mov	r5, r0
 8004798:	b1e8      	cbz	r0, 80047d6 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800479a:	205c      	movs	r0, #92	; 0x5c
 800479c:	f000 fe4e 	bl	800543c <pvPortMalloc>
				if( pxNewTCB != NULL )
 80047a0:	4604      	mov	r4, r0
 80047a2:	b1a8      	cbz	r0, 80047d0 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80047a4:	2300      	movs	r3, #0
 80047a6:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80047aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 80047ac:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80047ae:	9301      	str	r3, [sp, #4]
 80047b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80047b2:	9002      	str	r0, [sp, #8]
 80047b4:	9300      	str	r3, [sp, #0]
 80047b6:	4632      	mov	r2, r6
 80047b8:	464b      	mov	r3, r9
 80047ba:	4641      	mov	r1, r8
 80047bc:	4638      	mov	r0, r7
 80047be:	f7ff ff2b 	bl	8004618 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 80047c2:	4620      	mov	r0, r4
 80047c4:	f7ff fe48 	bl	8004458 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80047c8:	2001      	movs	r0, #1
	}
 80047ca:	b005      	add	sp, #20
 80047cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80047d0:	4628      	mov	r0, r5
 80047d2:	f000 febf 	bl	8005554 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80047d6:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 80047da:	e7f6      	b.n	80047ca <xTaskCreate+0x48>

080047dc <vTaskStartScheduler>:
{
 80047dc:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80047de:	2400      	movs	r4, #0
{
 80047e0:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80047e2:	aa07      	add	r2, sp, #28
 80047e4:	a906      	add	r1, sp, #24
 80047e6:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80047e8:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80047ec:	f7ff fa62 	bl	8003cb4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80047f0:	9b05      	ldr	r3, [sp, #20]
 80047f2:	9a07      	ldr	r2, [sp, #28]
 80047f4:	9302      	str	r3, [sp, #8]
 80047f6:	9b06      	ldr	r3, [sp, #24]
 80047f8:	4915      	ldr	r1, [pc, #84]	; (8004850 <vTaskStartScheduler+0x74>)
 80047fa:	e9cd 4300 	strd	r4, r3, [sp]
 80047fe:	4815      	ldr	r0, [pc, #84]	; (8004854 <vTaskStartScheduler+0x78>)
 8004800:	4623      	mov	r3, r4
 8004802:	f7ff ff87 	bl	8004714 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8004806:	b1a8      	cbz	r0, 8004834 <vTaskStartScheduler+0x58>
			xReturn = xTimerCreateTimerTask();
 8004808:	f000 fb0a 	bl	8004e20 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800480c:	2801      	cmp	r0, #1
 800480e:	d113      	bne.n	8004838 <vTaskStartScheduler+0x5c>
 8004810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004814:	f383 8811 	msr	BASEPRI, r3
 8004818:	f3bf 8f6f 	isb	sy
 800481c:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8004820:	f04f 32ff 	mov.w	r2, #4294967295
 8004824:	4b0c      	ldr	r3, [pc, #48]	; (8004858 <vTaskStartScheduler+0x7c>)
 8004826:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004828:	4b0c      	ldr	r3, [pc, #48]	; (800485c <vTaskStartScheduler+0x80>)
 800482a:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800482c:	4b0c      	ldr	r3, [pc, #48]	; (8004860 <vTaskStartScheduler+0x84>)
 800482e:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8004830:	f000 fd58 	bl	80052e4 <xPortStartScheduler>
}
 8004834:	b008      	add	sp, #32
 8004836:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004838:	3001      	adds	r0, #1
 800483a:	d1fb      	bne.n	8004834 <vTaskStartScheduler+0x58>
 800483c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004840:	f383 8811 	msr	BASEPRI, r3
 8004844:	f3bf 8f6f 	isb	sy
 8004848:	f3bf 8f4f 	dsb	sy
 800484c:	e7fe      	b.n	800484c <vTaskStartScheduler+0x70>
 800484e:	bf00      	nop
 8004850:	0800690b 	.word	0x0800690b
 8004854:	08004591 	.word	0x08004591
 8004858:	20001148 	.word	0x20001148
 800485c:	20001164 	.word	0x20001164
 8004860:	20001190 	.word	0x20001190

08004864 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004864:	4a02      	ldr	r2, [pc, #8]	; (8004870 <vTaskSuspendAll+0xc>)
 8004866:	6813      	ldr	r3, [r2, #0]
 8004868:	3301      	adds	r3, #1
 800486a:	6013      	str	r3, [r2, #0]
}
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	20001114 	.word	0x20001114

08004874 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8004874:	4b01      	ldr	r3, [pc, #4]	; (800487c <xTaskGetTickCount+0x8>)
 8004876:	6818      	ldr	r0, [r3, #0]
}
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	20001190 	.word	0x20001190

08004880 <xTaskIncrementTick>:
{
 8004880:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004884:	4b3b      	ldr	r3, [pc, #236]	; (8004974 <xTaskIncrementTick+0xf4>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d16b      	bne.n	8004964 <xTaskIncrementTick+0xe4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800488c:	4b3a      	ldr	r3, [pc, #232]	; (8004978 <xTaskIncrementTick+0xf8>)
 800488e:	681c      	ldr	r4, [r3, #0]
 8004890:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8004892:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004894:	b9bc      	cbnz	r4, 80048c6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8004896:	4b39      	ldr	r3, [pc, #228]	; (800497c <xTaskIncrementTick+0xfc>)
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	6812      	ldr	r2, [r2, #0]
 800489c:	b142      	cbz	r2, 80048b0 <xTaskIncrementTick+0x30>
 800489e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a2:	f383 8811 	msr	BASEPRI, r3
 80048a6:	f3bf 8f6f 	isb	sy
 80048aa:	f3bf 8f4f 	dsb	sy
 80048ae:	e7fe      	b.n	80048ae <xTaskIncrementTick+0x2e>
 80048b0:	4a33      	ldr	r2, [pc, #204]	; (8004980 <xTaskIncrementTick+0x100>)
 80048b2:	6819      	ldr	r1, [r3, #0]
 80048b4:	6810      	ldr	r0, [r2, #0]
 80048b6:	6018      	str	r0, [r3, #0]
 80048b8:	6011      	str	r1, [r2, #0]
 80048ba:	4a32      	ldr	r2, [pc, #200]	; (8004984 <xTaskIncrementTick+0x104>)
 80048bc:	6813      	ldr	r3, [r2, #0]
 80048be:	3301      	adds	r3, #1
 80048c0:	6013      	str	r3, [r2, #0]
 80048c2:	f7ff fe97 	bl	80045f4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80048c6:	4d30      	ldr	r5, [pc, #192]	; (8004988 <xTaskIncrementTick+0x108>)
BaseType_t xSwitchRequired = pdFALSE;
 80048c8:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 80048cc:	682b      	ldr	r3, [r5, #0]
 80048ce:	4f2f      	ldr	r7, [pc, #188]	; (800498c <xTaskIncrementTick+0x10c>)
 80048d0:	42a3      	cmp	r3, r4
 80048d2:	d911      	bls.n	80048f8 <xTaskIncrementTick+0x78>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	4b2e      	ldr	r3, [pc, #184]	; (8004990 <xTaskIncrementTick+0x110>)
 80048d8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80048da:	2214      	movs	r2, #20
 80048dc:	434a      	muls	r2, r1
 80048de:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 80048e0:	2a02      	cmp	r2, #2
 80048e2:	bf28      	it	cs
 80048e4:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80048e8:	4a2a      	ldr	r2, [pc, #168]	; (8004994 <xTaskIncrementTick+0x114>)
 80048ea:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80048ec:	2a00      	cmp	r2, #0
}
 80048ee:	bf0c      	ite	eq
 80048f0:	4658      	moveq	r0, fp
 80048f2:	2001      	movne	r0, #1
 80048f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048f8:	f8df 9080 	ldr.w	r9, [pc, #128]	; 800497c <xTaskIncrementTick+0xfc>
					prvAddTaskToReadyList( pxTCB );
 80048fc:	f8df a09c 	ldr.w	sl, [pc, #156]	; 800499c <xTaskIncrementTick+0x11c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004900:	f8d9 2000 	ldr.w	r2, [r9]
 8004904:	6812      	ldr	r2, [r2, #0]
 8004906:	b91a      	cbnz	r2, 8004910 <xTaskIncrementTick+0x90>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004908:	f04f 32ff 	mov.w	r2, #4294967295
 800490c:	602a      	str	r2, [r5, #0]
					break;
 800490e:	e7e1      	b.n	80048d4 <xTaskIncrementTick+0x54>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004910:	f8d9 2000 	ldr.w	r2, [r9]
 8004914:	68d2      	ldr	r2, [r2, #12]
 8004916:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004918:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 800491a:	428c      	cmp	r4, r1
 800491c:	d201      	bcs.n	8004922 <xTaskIncrementTick+0xa2>
						xNextTaskUnblockTime = xItemValue;
 800491e:	6029      	str	r1, [r5, #0]
						break;
 8004920:	e7d8      	b.n	80048d4 <xTaskIncrementTick+0x54>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004922:	f106 0804 	add.w	r8, r6, #4
 8004926:	4640      	mov	r0, r8
 8004928:	f7ff fa0d 	bl	8003d46 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800492c:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800492e:	b119      	cbz	r1, 8004938 <xTaskIncrementTick+0xb8>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004930:	f106 0018 	add.w	r0, r6, #24
 8004934:	f7ff fa07 	bl	8003d46 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004938:	2214      	movs	r2, #20
 800493a:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800493c:	f8da 1000 	ldr.w	r1, [sl]
 8004940:	4b13      	ldr	r3, [pc, #76]	; (8004990 <xTaskIncrementTick+0x110>)
 8004942:	4288      	cmp	r0, r1
 8004944:	bf88      	it	hi
 8004946:	f8ca 0000 	strhi.w	r0, [sl]
 800494a:	4641      	mov	r1, r8
 800494c:	fb02 3000 	mla	r0, r2, r0, r3
 8004950:	f7ff f9d6 	bl	8003d00 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004954:	6838      	ldr	r0, [r7, #0]
 8004956:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8004958:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800495a:	4291      	cmp	r1, r2
 800495c:	bf28      	it	cs
 800495e:	f04f 0b01 	movcs.w	fp, #1
 8004962:	e7cd      	b.n	8004900 <xTaskIncrementTick+0x80>
		++uxPendedTicks;
 8004964:	4a0c      	ldr	r2, [pc, #48]	; (8004998 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 8004966:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 800496a:	6813      	ldr	r3, [r2, #0]
 800496c:	3301      	adds	r3, #1
 800496e:	6013      	str	r3, [r2, #0]
 8004970:	e7ba      	b.n	80048e8 <xTaskIncrementTick+0x68>
 8004972:	bf00      	nop
 8004974:	20001114 	.word	0x20001114
 8004978:	20001190 	.word	0x20001190
 800497c:	20000ca0 	.word	0x20000ca0
 8004980:	20000ca4 	.word	0x20000ca4
 8004984:	2000114c 	.word	0x2000114c
 8004988:	20001148 	.word	0x20001148
 800498c:	20000c9c 	.word	0x20000c9c
 8004990:	20000ca8 	.word	0x20000ca8
 8004994:	20001194 	.word	0x20001194
 8004998:	20001110 	.word	0x20001110
 800499c:	2000111c 	.word	0x2000111c

080049a0 <xTaskResumeAll>:
{
 80049a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 80049a4:	4c2f      	ldr	r4, [pc, #188]	; (8004a64 <xTaskResumeAll+0xc4>)
 80049a6:	6823      	ldr	r3, [r4, #0]
 80049a8:	b943      	cbnz	r3, 80049bc <xTaskResumeAll+0x1c>
 80049aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ae:	f383 8811 	msr	BASEPRI, r3
 80049b2:	f3bf 8f6f 	isb	sy
 80049b6:	f3bf 8f4f 	dsb	sy
 80049ba:	e7fe      	b.n	80049ba <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80049bc:	f000 fc0a 	bl	80051d4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80049c0:	6823      	ldr	r3, [r4, #0]
 80049c2:	3b01      	subs	r3, #1
 80049c4:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049c6:	6824      	ldr	r4, [r4, #0]
 80049c8:	b12c      	cbz	r4, 80049d6 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80049ca:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80049cc:	f000 fc24 	bl	8005218 <vPortExitCritical>
}
 80049d0:	4620      	mov	r0, r4
 80049d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80049d6:	4b24      	ldr	r3, [pc, #144]	; (8004a68 <xTaskResumeAll+0xc8>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d0f5      	beq.n	80049ca <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049de:	4d23      	ldr	r5, [pc, #140]	; (8004a6c <xTaskResumeAll+0xcc>)
					prvAddTaskToReadyList( pxTCB );
 80049e0:	4e23      	ldr	r6, [pc, #140]	; (8004a70 <xTaskResumeAll+0xd0>)
 80049e2:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8004a84 <xTaskResumeAll+0xe4>
 80049e6:	e01d      	b.n	8004a24 <xTaskResumeAll+0x84>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80049e8:	68eb      	ldr	r3, [r5, #12]
 80049ea:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049ec:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049ee:	f104 0018 	add.w	r0, r4, #24
 80049f2:	f7ff f9a8 	bl	8003d46 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049f6:	4638      	mov	r0, r7
 80049f8:	f7ff f9a5 	bl	8003d46 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80049fc:	2014      	movs	r0, #20
 80049fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004a00:	6832      	ldr	r2, [r6, #0]
 8004a02:	fb00 8003 	mla	r0, r0, r3, r8
 8004a06:	4293      	cmp	r3, r2
 8004a08:	4639      	mov	r1, r7
 8004a0a:	bf88      	it	hi
 8004a0c:	6033      	strhi	r3, [r6, #0]
 8004a0e:	f7ff f977 	bl	8003d00 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a12:	4b18      	ldr	r3, [pc, #96]	; (8004a74 <xTaskResumeAll+0xd4>)
 8004a14:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d302      	bcc.n	8004a24 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 8004a1e:	2201      	movs	r2, #1
 8004a20:	4b15      	ldr	r3, [pc, #84]	; (8004a78 <xTaskResumeAll+0xd8>)
 8004a22:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a24:	682b      	ldr	r3, [r5, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1de      	bne.n	80049e8 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8004a2a:	b10c      	cbz	r4, 8004a30 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 8004a2c:	f7ff fde2 	bl	80045f4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004a30:	4d12      	ldr	r5, [pc, #72]	; (8004a7c <xTaskResumeAll+0xdc>)
 8004a32:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004a34:	b144      	cbz	r4, 8004a48 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 8004a36:	2701      	movs	r7, #1
 8004a38:	4e0f      	ldr	r6, [pc, #60]	; (8004a78 <xTaskResumeAll+0xd8>)
							if( xTaskIncrementTick() != pdFALSE )
 8004a3a:	f7ff ff21 	bl	8004880 <xTaskIncrementTick>
 8004a3e:	b100      	cbz	r0, 8004a42 <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 8004a40:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004a42:	3c01      	subs	r4, #1
 8004a44:	d1f9      	bne.n	8004a3a <xTaskResumeAll+0x9a>
						uxPendedTicks = 0;
 8004a46:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8004a48:	4b0b      	ldr	r3, [pc, #44]	; (8004a78 <xTaskResumeAll+0xd8>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d0bc      	beq.n	80049ca <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8004a50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a54:	4b0a      	ldr	r3, [pc, #40]	; (8004a80 <xTaskResumeAll+0xe0>)
 8004a56:	601a      	str	r2, [r3, #0]
 8004a58:	f3bf 8f4f 	dsb	sy
 8004a5c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8004a60:	2401      	movs	r4, #1
 8004a62:	e7b3      	b.n	80049cc <xTaskResumeAll+0x2c>
 8004a64:	20001114 	.word	0x20001114
 8004a68:	20001108 	.word	0x20001108
 8004a6c:	20001150 	.word	0x20001150
 8004a70:	2000111c 	.word	0x2000111c
 8004a74:	20000c9c 	.word	0x20000c9c
 8004a78:	20001194 	.word	0x20001194
 8004a7c:	20001110 	.word	0x20001110
 8004a80:	e000ed04 	.word	0xe000ed04
 8004a84:	20000ca8 	.word	0x20000ca8

08004a88 <vTaskDelay>:
	{
 8004a88:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004a8a:	b940      	cbnz	r0, 8004a9e <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8004a8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a90:	4b0d      	ldr	r3, [pc, #52]	; (8004ac8 <vTaskDelay+0x40>)
 8004a92:	601a      	str	r2, [r3, #0]
 8004a94:	f3bf 8f4f 	dsb	sy
 8004a98:	f3bf 8f6f 	isb	sy
	}
 8004a9c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8004a9e:	4b0b      	ldr	r3, [pc, #44]	; (8004acc <vTaskDelay+0x44>)
 8004aa0:	6819      	ldr	r1, [r3, #0]
 8004aa2:	b141      	cbz	r1, 8004ab6 <vTaskDelay+0x2e>
 8004aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa8:	f383 8811 	msr	BASEPRI, r3
 8004aac:	f3bf 8f6f 	isb	sy
 8004ab0:	f3bf 8f4f 	dsb	sy
 8004ab4:	e7fe      	b.n	8004ab4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004ab6:	f7ff fed5 	bl	8004864 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004aba:	f7ff fdf1 	bl	80046a0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8004abe:	f7ff ff6f 	bl	80049a0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8004ac2:	2800      	cmp	r0, #0
 8004ac4:	d0e2      	beq.n	8004a8c <vTaskDelay+0x4>
 8004ac6:	e7e9      	b.n	8004a9c <vTaskDelay+0x14>
 8004ac8:	e000ed04 	.word	0xe000ed04
 8004acc:	20001114 	.word	0x20001114

08004ad0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ad0:	4b18      	ldr	r3, [pc, #96]	; (8004b34 <vTaskSwitchContext+0x64>)
{
 8004ad2:	b5f0      	push	{r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	4b18      	ldr	r3, [pc, #96]	; (8004b38 <vTaskSwitchContext+0x68>)
 8004ad8:	b112      	cbz	r2, 8004ae0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8004ada:	2201      	movs	r2, #1
 8004adc:	601a      	str	r2, [r3, #0]
}
 8004ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
		xYieldPending = pdFALSE;
 8004ae0:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004ae2:	4a16      	ldr	r2, [pc, #88]	; (8004b3c <vTaskSwitchContext+0x6c>)
 8004ae4:	2714      	movs	r7, #20
 8004ae6:	4616      	mov	r6, r2
 8004ae8:	4d15      	ldr	r5, [pc, #84]	; (8004b40 <vTaskSwitchContext+0x70>)
 8004aea:	682b      	ldr	r3, [r5, #0]
 8004aec:	fb07 f103 	mul.w	r1, r7, r3
 8004af0:	5854      	ldr	r4, [r2, r1]
 8004af2:	1850      	adds	r0, r2, r1
 8004af4:	b194      	cbz	r4, 8004b1c <vTaskSwitchContext+0x4c>
 8004af6:	6844      	ldr	r4, [r0, #4]
 8004af8:	3108      	adds	r1, #8
 8004afa:	6864      	ldr	r4, [r4, #4]
 8004afc:	440a      	add	r2, r1
 8004afe:	4294      	cmp	r4, r2
 8004b00:	bf08      	it	eq
 8004b02:	6862      	ldreq	r2, [r4, #4]
 8004b04:	6044      	str	r4, [r0, #4]
 8004b06:	bf08      	it	eq
 8004b08:	6042      	streq	r2, [r0, #4]
 8004b0a:	2214      	movs	r2, #20
 8004b0c:	fb02 6203 	mla	r2, r2, r3, r6
 8004b10:	6852      	ldr	r2, [r2, #4]
 8004b12:	68d1      	ldr	r1, [r2, #12]
 8004b14:	4a0b      	ldr	r2, [pc, #44]	; (8004b44 <vTaskSwitchContext+0x74>)
 8004b16:	6011      	str	r1, [r2, #0]
 8004b18:	602b      	str	r3, [r5, #0]
}
 8004b1a:	e7e0      	b.n	8004ade <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004b1c:	b943      	cbnz	r3, 8004b30 <vTaskSwitchContext+0x60>
 8004b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b22:	f383 8811 	msr	BASEPRI, r3
 8004b26:	f3bf 8f6f 	isb	sy
 8004b2a:	f3bf 8f4f 	dsb	sy
 8004b2e:	e7fe      	b.n	8004b2e <vTaskSwitchContext+0x5e>
 8004b30:	3b01      	subs	r3, #1
 8004b32:	e7db      	b.n	8004aec <vTaskSwitchContext+0x1c>
 8004b34:	20001114 	.word	0x20001114
 8004b38:	20001194 	.word	0x20001194
 8004b3c:	20000ca8 	.word	0x20000ca8
 8004b40:	2000111c 	.word	0x2000111c
 8004b44:	20000c9c 	.word	0x20000c9c

08004b48 <vTaskPlaceOnEventList>:
{
 8004b48:	b510      	push	{r4, lr}
 8004b4a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8004b4c:	b940      	cbnz	r0, 8004b60 <vTaskPlaceOnEventList+0x18>
 8004b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b52:	f383 8811 	msr	BASEPRI, r3
 8004b56:	f3bf 8f6f 	isb	sy
 8004b5a:	f3bf 8f4f 	dsb	sy
 8004b5e:	e7fe      	b.n	8004b5e <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b60:	4b05      	ldr	r3, [pc, #20]	; (8004b78 <vTaskPlaceOnEventList+0x30>)
 8004b62:	6819      	ldr	r1, [r3, #0]
 8004b64:	3118      	adds	r1, #24
 8004b66:	f7ff f8d7 	bl	8003d18 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b6a:	4620      	mov	r0, r4
}
 8004b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b70:	2101      	movs	r1, #1
 8004b72:	f7ff bd95 	b.w	80046a0 <prvAddCurrentTaskToDelayedList>
 8004b76:	bf00      	nop
 8004b78:	20000c9c 	.word	0x20000c9c

08004b7c <vTaskPlaceOnEventListRestricted>:
	{
 8004b7c:	b538      	push	{r3, r4, r5, lr}
 8004b7e:	460d      	mov	r5, r1
 8004b80:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8004b82:	b940      	cbnz	r0, 8004b96 <vTaskPlaceOnEventListRestricted+0x1a>
 8004b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b88:	f383 8811 	msr	BASEPRI, r3
 8004b8c:	f3bf 8f6f 	isb	sy
 8004b90:	f3bf 8f4f 	dsb	sy
 8004b94:	e7fe      	b.n	8004b94 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b96:	4b08      	ldr	r3, [pc, #32]	; (8004bb8 <vTaskPlaceOnEventListRestricted+0x3c>)
 8004b98:	6819      	ldr	r1, [r3, #0]
 8004b9a:	3118      	adds	r1, #24
 8004b9c:	f7ff f8b0 	bl	8003d00 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8004ba0:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004ba2:	4621      	mov	r1, r4
 8004ba4:	bf08      	it	eq
 8004ba6:	4628      	moveq	r0, r5
	}
 8004ba8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004bac:	bf18      	it	ne
 8004bae:	f04f 30ff 	movne.w	r0, #4294967295
 8004bb2:	f7ff bd75 	b.w	80046a0 <prvAddCurrentTaskToDelayedList>
 8004bb6:	bf00      	nop
 8004bb8:	20000c9c 	.word	0x20000c9c

08004bbc <xTaskRemoveFromEventList>:
{
 8004bbc:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004bbe:	68c3      	ldr	r3, [r0, #12]
 8004bc0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8004bc2:	b944      	cbnz	r4, 8004bd6 <xTaskRemoveFromEventList+0x1a>
 8004bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc8:	f383 8811 	msr	BASEPRI, r3
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	e7fe      	b.n	8004bd4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004bd6:	f104 0518 	add.w	r5, r4, #24
 8004bda:	4628      	mov	r0, r5
 8004bdc:	f7ff f8b3 	bl	8003d46 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004be0:	4b10      	ldr	r3, [pc, #64]	; (8004c24 <xTaskRemoveFromEventList+0x68>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	b9db      	cbnz	r3, 8004c1e <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004be6:	1d25      	adds	r5, r4, #4
 8004be8:	4628      	mov	r0, r5
 8004bea:	f7ff f8ac 	bl	8003d46 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004bee:	4a0e      	ldr	r2, [pc, #56]	; (8004c28 <xTaskRemoveFromEventList+0x6c>)
 8004bf0:	2014      	movs	r0, #20
 8004bf2:	6811      	ldr	r1, [r2, #0]
 8004bf4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004bf6:	428b      	cmp	r3, r1
 8004bf8:	4629      	mov	r1, r5
 8004bfa:	bf88      	it	hi
 8004bfc:	6013      	strhi	r3, [r2, #0]
 8004bfe:	4a0b      	ldr	r2, [pc, #44]	; (8004c2c <xTaskRemoveFromEventList+0x70>)
 8004c00:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c04:	f7ff f87c 	bl	8003d00 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c08:	4b09      	ldr	r3, [pc, #36]	; (8004c30 <xTaskRemoveFromEventList+0x74>)
 8004c0a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c10:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8004c12:	bf85      	ittet	hi
 8004c14:	2001      	movhi	r0, #1
 8004c16:	4b07      	ldrhi	r3, [pc, #28]	; (8004c34 <xTaskRemoveFromEventList+0x78>)
		xReturn = pdFALSE;
 8004c18:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 8004c1a:	6018      	strhi	r0, [r3, #0]
}
 8004c1c:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c1e:	4629      	mov	r1, r5
 8004c20:	4805      	ldr	r0, [pc, #20]	; (8004c38 <xTaskRemoveFromEventList+0x7c>)
 8004c22:	e7ef      	b.n	8004c04 <xTaskRemoveFromEventList+0x48>
 8004c24:	20001114 	.word	0x20001114
 8004c28:	2000111c 	.word	0x2000111c
 8004c2c:	20000ca8 	.word	0x20000ca8
 8004c30:	20000c9c 	.word	0x20000c9c
 8004c34:	20001194 	.word	0x20001194
 8004c38:	20001150 	.word	0x20001150

08004c3c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c3c:	4b03      	ldr	r3, [pc, #12]	; (8004c4c <vTaskInternalSetTimeOutState+0x10>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004c42:	4b03      	ldr	r3, [pc, #12]	; (8004c50 <vTaskInternalSetTimeOutState+0x14>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6043      	str	r3, [r0, #4]
}
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	2000114c 	.word	0x2000114c
 8004c50:	20001190 	.word	0x20001190

08004c54 <xTaskCheckForTimeOut>:
{
 8004c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c56:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8004c58:	4605      	mov	r5, r0
 8004c5a:	b940      	cbnz	r0, 8004c6e <xTaskCheckForTimeOut+0x1a>
 8004c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c60:	f383 8811 	msr	BASEPRI, r3
 8004c64:	f3bf 8f6f 	isb	sy
 8004c68:	f3bf 8f4f 	dsb	sy
 8004c6c:	e7fe      	b.n	8004c6c <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8004c6e:	b941      	cbnz	r1, 8004c82 <xTaskCheckForTimeOut+0x2e>
 8004c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c74:	f383 8811 	msr	BASEPRI, r3
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	e7fe      	b.n	8004c80 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8004c82:	f000 faa7 	bl	80051d4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8004c86:	4b0f      	ldr	r3, [pc, #60]	; (8004cc4 <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004c88:	6868      	ldr	r0, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 8004c8a:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8004c8c:	6823      	ldr	r3, [r4, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004c8e:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 8004c90:	1c5e      	adds	r6, r3, #1
 8004c92:	d00d      	beq.n	8004cb0 <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004c94:	4e0c      	ldr	r6, [pc, #48]	; (8004cc8 <xTaskCheckForTimeOut+0x74>)
 8004c96:	682f      	ldr	r7, [r5, #0]
 8004c98:	6836      	ldr	r6, [r6, #0]
 8004c9a:	42b7      	cmp	r7, r6
 8004c9c:	d001      	beq.n	8004ca2 <xTaskCheckForTimeOut+0x4e>
 8004c9e:	4288      	cmp	r0, r1
 8004ca0:	d90d      	bls.n	8004cbe <xTaskCheckForTimeOut+0x6a>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d909      	bls.n	8004cba <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 8004ca6:	1a9b      	subs	r3, r3, r2
 8004ca8:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004caa:	4628      	mov	r0, r5
 8004cac:	f7ff ffc6 	bl	8004c3c <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8004cb0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004cb2:	f000 fab1 	bl	8005218 <vPortExitCritical>
}
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*pxTicksToWait = 0;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8004cbe:	2401      	movs	r4, #1
 8004cc0:	e7f7      	b.n	8004cb2 <xTaskCheckForTimeOut+0x5e>
 8004cc2:	bf00      	nop
 8004cc4:	20001190 	.word	0x20001190
 8004cc8:	2000114c 	.word	0x2000114c

08004ccc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8004ccc:	2201      	movs	r2, #1
 8004cce:	4b01      	ldr	r3, [pc, #4]	; (8004cd4 <vTaskMissedYield+0x8>)
 8004cd0:	601a      	str	r2, [r3, #0]
}
 8004cd2:	4770      	bx	lr
 8004cd4:	20001194 	.word	0x20001194

08004cd8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8004cd8:	4b05      	ldr	r3, [pc, #20]	; (8004cf0 <xTaskGetSchedulerState+0x18>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	b133      	cbz	r3, 8004cec <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cde:	4b05      	ldr	r3, [pc, #20]	; (8004cf4 <xTaskGetSchedulerState+0x1c>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8004ce4:	bf0c      	ite	eq
 8004ce6:	2002      	moveq	r0, #2
 8004ce8:	2000      	movne	r0, #0
 8004cea:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004cec:	2001      	movs	r0, #1
	}
 8004cee:	4770      	bx	lr
 8004cf0:	20001164 	.word	0x20001164
 8004cf4:	20001114 	.word	0x20001114

08004cf8 <xTaskPriorityDisinherit>:
	{
 8004cf8:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8004cfa:	b908      	cbnz	r0, 8004d00 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 8004cfc:	2000      	movs	r0, #0
	}
 8004cfe:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8004d00:	4b1b      	ldr	r3, [pc, #108]	; (8004d70 <xTaskPriorityDisinherit+0x78>)
 8004d02:	681c      	ldr	r4, [r3, #0]
 8004d04:	4284      	cmp	r4, r0
 8004d06:	d008      	beq.n	8004d1a <xTaskPriorityDisinherit+0x22>
 8004d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0c:	f383 8811 	msr	BASEPRI, r3
 8004d10:	f3bf 8f6f 	isb	sy
 8004d14:	f3bf 8f4f 	dsb	sy
 8004d18:	e7fe      	b.n	8004d18 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8004d1a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004d1c:	b943      	cbnz	r3, 8004d30 <xTaskPriorityDisinherit+0x38>
 8004d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d22:	f383 8811 	msr	BASEPRI, r3
 8004d26:	f3bf 8f6f 	isb	sy
 8004d2a:	f3bf 8f4f 	dsb	sy
 8004d2e:	e7fe      	b.n	8004d2e <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004d30:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004d32:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 8004d34:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004d36:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8004d38:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004d3a:	d0df      	beq.n	8004cfc <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1dd      	bne.n	8004cfc <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d40:	1d25      	adds	r5, r4, #4
 8004d42:	4628      	mov	r0, r5
 8004d44:	f7fe ffff 	bl	8003d46 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d48:	2014      	movs	r0, #20
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004d4a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d4c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004d50:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8004d52:	4a08      	ldr	r2, [pc, #32]	; (8004d74 <xTaskPriorityDisinherit+0x7c>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004d54:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8004d56:	6811      	ldr	r1, [r2, #0]
 8004d58:	428b      	cmp	r3, r1
 8004d5a:	bf88      	it	hi
 8004d5c:	6013      	strhi	r3, [r2, #0]
 8004d5e:	4a06      	ldr	r2, [pc, #24]	; (8004d78 <xTaskPriorityDisinherit+0x80>)
 8004d60:	4629      	mov	r1, r5
 8004d62:	fb00 2003 	mla	r0, r0, r3, r2
 8004d66:	f7fe ffcb 	bl	8003d00 <vListInsertEnd>
					xReturn = pdTRUE;
 8004d6a:	2001      	movs	r0, #1
		return xReturn;
 8004d6c:	e7c7      	b.n	8004cfe <xTaskPriorityDisinherit+0x6>
 8004d6e:	bf00      	nop
 8004d70:	20000c9c 	.word	0x20000c9c
 8004d74:	2000111c 	.word	0x2000111c
 8004d78:	20000ca8 	.word	0x20000ca8

08004d7c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004d7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8004d7e:	4c11      	ldr	r4, [pc, #68]	; (8004dc4 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8004d80:	f000 fa28 	bl	80051d4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8004d84:	6825      	ldr	r5, [r4, #0]
 8004d86:	b9bd      	cbnz	r5, 8004db8 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8004d88:	4f0f      	ldr	r7, [pc, #60]	; (8004dc8 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8004d8a:	4e10      	ldr	r6, [pc, #64]	; (8004dcc <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8004d8c:	4638      	mov	r0, r7
 8004d8e:	f7fe ffa9 	bl	8003ce4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004d92:	4630      	mov	r0, r6
 8004d94:	f7fe ffa6 	bl	8003ce4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004d98:	4b0d      	ldr	r3, [pc, #52]	; (8004dd0 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004d9a:	4a0e      	ldr	r2, [pc, #56]	; (8004dd4 <prvCheckForValidListAndQueue+0x58>)
			pxCurrentTimerList = &xActiveTimerList1;
 8004d9c:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004d9e:	4b0e      	ldr	r3, [pc, #56]	; (8004dd8 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004da0:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 8004da2:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004da4:	200a      	movs	r0, #10
 8004da6:	9500      	str	r5, [sp, #0]
 8004da8:	4b0c      	ldr	r3, [pc, #48]	; (8004ddc <prvCheckForValidListAndQueue+0x60>)
 8004daa:	f7ff f8a7 	bl	8003efc <xQueueGenericCreateStatic>
 8004dae:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004db0:	b110      	cbz	r0, 8004db8 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004db2:	490b      	ldr	r1, [pc, #44]	; (8004de0 <prvCheckForValidListAndQueue+0x64>)
 8004db4:	f7ff fb1a 	bl	80043ec <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8004db8:	b003      	add	sp, #12
 8004dba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8004dbe:	f000 ba2b 	b.w	8005218 <vPortExitCritical>
 8004dc2:	bf00      	nop
 8004dc4:	200012bc 	.word	0x200012bc
 8004dc8:	20001240 	.word	0x20001240
 8004dcc:	20001254 	.word	0x20001254
 8004dd0:	20001198 	.word	0x20001198
 8004dd4:	200011a0 	.word	0x200011a0
 8004dd8:	2000119c 	.word	0x2000119c
 8004ddc:	2000126c 	.word	0x2000126c
 8004de0:	08006910 	.word	0x08006910

08004de4 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8004de4:	4291      	cmp	r1, r2
{
 8004de6:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004de8:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004dea:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8004dec:	d80a      	bhi.n	8004e04 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dee:	1ad2      	subs	r2, r2, r3
 8004df0:	6983      	ldr	r3, [r0, #24]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d20d      	bcs.n	8004e12 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004df6:	4b08      	ldr	r3, [pc, #32]	; (8004e18 <prvInsertTimerInActiveList+0x34>)
 8004df8:	1d01      	adds	r1, r0, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004dfa:	6818      	ldr	r0, [r3, #0]
 8004dfc:	f7fe ff8c 	bl	8003d18 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8004e00:	2000      	movs	r0, #0
}
 8004e02:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d201      	bcs.n	8004e0c <prvInsertTimerInActiveList+0x28>
 8004e08:	4299      	cmp	r1, r3
 8004e0a:	d202      	bcs.n	8004e12 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e0c:	1d01      	adds	r1, r0, #4
 8004e0e:	4b03      	ldr	r3, [pc, #12]	; (8004e1c <prvInsertTimerInActiveList+0x38>)
 8004e10:	e7f3      	b.n	8004dfa <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8004e12:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8004e14:	e7f5      	b.n	8004e02 <prvInsertTimerInActiveList+0x1e>
 8004e16:	bf00      	nop
 8004e18:	2000119c 	.word	0x2000119c
 8004e1c:	20001198 	.word	0x20001198

08004e20 <xTimerCreateTimerTask>:
{
 8004e20:	b510      	push	{r4, lr}
 8004e22:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8004e24:	f7ff ffaa 	bl	8004d7c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8004e28:	4b12      	ldr	r3, [pc, #72]	; (8004e74 <xTimerCreateTimerTask+0x54>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	b1b3      	cbz	r3, 8004e5c <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004e2e:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004e30:	aa07      	add	r2, sp, #28
 8004e32:	a906      	add	r1, sp, #24
 8004e34:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004e36:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004e3a:	f7fe ff47 	bl	8003ccc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004e3e:	9b05      	ldr	r3, [sp, #20]
 8004e40:	9a07      	ldr	r2, [sp, #28]
 8004e42:	9302      	str	r3, [sp, #8]
 8004e44:	9b06      	ldr	r3, [sp, #24]
 8004e46:	490c      	ldr	r1, [pc, #48]	; (8004e78 <xTimerCreateTimerTask+0x58>)
 8004e48:	9301      	str	r3, [sp, #4]
 8004e4a:	2302      	movs	r3, #2
 8004e4c:	480b      	ldr	r0, [pc, #44]	; (8004e7c <xTimerCreateTimerTask+0x5c>)
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	4623      	mov	r3, r4
 8004e52:	f7ff fc5f 	bl	8004714 <xTaskCreateStatic>
 8004e56:	4b0a      	ldr	r3, [pc, #40]	; (8004e80 <xTimerCreateTimerTask+0x60>)
 8004e58:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8004e5a:	b940      	cbnz	r0, 8004e6e <xTimerCreateTimerTask+0x4e>
 8004e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e60:	f383 8811 	msr	BASEPRI, r3
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	f3bf 8f4f 	dsb	sy
 8004e6c:	e7fe      	b.n	8004e6c <xTimerCreateTimerTask+0x4c>
}
 8004e6e:	2001      	movs	r0, #1
 8004e70:	b008      	add	sp, #32
 8004e72:	bd10      	pop	{r4, pc}
 8004e74:	200012bc 	.word	0x200012bc
 8004e78:	08006915 	.word	0x08006915
 8004e7c:	08004f59 	.word	0x08004f59
 8004e80:	200012c0 	.word	0x200012c0

08004e84 <xTimerGenericCommand>:
{
 8004e84:	b530      	push	{r4, r5, lr}
 8004e86:	4615      	mov	r5, r2
 8004e88:	b085      	sub	sp, #20
 8004e8a:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	b940      	cbnz	r0, 8004ea2 <xTimerGenericCommand+0x1e>
 8004e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e94:	f383 8811 	msr	BASEPRI, r3
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	e7fe      	b.n	8004ea0 <xTimerGenericCommand+0x1c>
	if( xTimerQueue != NULL )
 8004ea2:	4c0d      	ldr	r4, [pc, #52]	; (8004ed8 <xTimerGenericCommand+0x54>)
 8004ea4:	6820      	ldr	r0, [r4, #0]
 8004ea6:	b178      	cbz	r0, 8004ec8 <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004ea8:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004eaa:	e9cd 1500 	strd	r1, r5, [sp]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004eae:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004eb0:	dc0c      	bgt.n	8004ecc <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004eb2:	f7ff ff11 	bl	8004cd8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004eb6:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004eb8:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004eba:	bf0c      	ite	eq
 8004ebc:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004ebe:	461a      	movne	r2, r3
 8004ec0:	4669      	mov	r1, sp
 8004ec2:	6820      	ldr	r0, [r4, #0]
 8004ec4:	f7ff f88e 	bl	8003fe4 <xQueueGenericSend>
}
 8004ec8:	b005      	add	sp, #20
 8004eca:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004ecc:	2300      	movs	r3, #0
 8004ece:	4669      	mov	r1, sp
 8004ed0:	f7ff f93a 	bl	8004148 <xQueueGenericSendFromISR>
 8004ed4:	e7f8      	b.n	8004ec8 <xTimerGenericCommand+0x44>
 8004ed6:	bf00      	nop
 8004ed8:	200012bc 	.word	0x200012bc

08004edc <prvSwitchTimerLists>:
{
 8004edc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ee0:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ee4:	4d1a      	ldr	r5, [pc, #104]	; (8004f50 <prvSwitchTimerLists+0x74>)
 8004ee6:	682b      	ldr	r3, [r5, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	b932      	cbnz	r2, 8004efa <prvSwitchTimerLists+0x1e>
	pxCurrentTimerList = pxOverflowTimerList;
 8004eec:	4a19      	ldr	r2, [pc, #100]	; (8004f54 <prvSwitchTimerLists+0x78>)
 8004eee:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004ef0:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8004ef2:	6029      	str	r1, [r5, #0]
}
 8004ef4:	b002      	add	sp, #8
 8004ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004efa:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004efc:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004efe:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f00:	1d27      	adds	r7, r4, #4
 8004f02:	4638      	mov	r0, r7
 8004f04:	f7fe ff1f 	bl	8003d46 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f0a:	4620      	mov	r0, r4
 8004f0c:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004f0e:	69e3      	ldr	r3, [r4, #28]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d1e8      	bne.n	8004ee6 <prvSwitchTimerLists+0xa>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004f14:	69a3      	ldr	r3, [r4, #24]
 8004f16:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8004f18:	429e      	cmp	r6, r3
 8004f1a:	d206      	bcs.n	8004f2a <prvSwitchTimerLists+0x4e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004f1c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f1e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f20:	4639      	mov	r1, r7
 8004f22:	6828      	ldr	r0, [r5, #0]
 8004f24:	f7fe fef8 	bl	8003d18 <vListInsert>
 8004f28:	e7dd      	b.n	8004ee6 <prvSwitchTimerLists+0xa>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	f8cd 8000 	str.w	r8, [sp]
 8004f30:	4632      	mov	r2, r6
 8004f32:	4619      	mov	r1, r3
 8004f34:	4620      	mov	r0, r4
 8004f36:	f7ff ffa5 	bl	8004e84 <xTimerGenericCommand>
				configASSERT( xResult );
 8004f3a:	2800      	cmp	r0, #0
 8004f3c:	d1d3      	bne.n	8004ee6 <prvSwitchTimerLists+0xa>
 8004f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f42:	f383 8811 	msr	BASEPRI, r3
 8004f46:	f3bf 8f6f 	isb	sy
 8004f4a:	f3bf 8f4f 	dsb	sy
 8004f4e:	e7fe      	b.n	8004f4e <prvSwitchTimerLists+0x72>
 8004f50:	20001198 	.word	0x20001198
 8004f54:	2000119c 	.word	0x2000119c

08004f58 <prvTimerTask>:
{
 8004f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004f5c:	4d6d      	ldr	r5, [pc, #436]	; (8005114 <prvTimerTask+0x1bc>)
					portYIELD_WITHIN_API();
 8004f5e:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8005124 <prvTimerTask+0x1cc>
 8004f62:	462f      	mov	r7, r5
{
 8004f64:	b087      	sub	sp, #28
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004f66:	682b      	ldr	r3, [r5, #0]
 8004f68:	f8d3 b000 	ldr.w	fp, [r3]
	if( *pxListWasEmpty == pdFALSE )
 8004f6c:	f1bb 0f00 	cmp.w	fp, #0
 8004f70:	d04b      	beq.n	800500a <prvTimerTask+0xb2>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	f8d3 a000 	ldr.w	sl, [r3]
	vTaskSuspendAll();
 8004f78:	f7ff fc74 	bl	8004864 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8004f7c:	f7ff fc7a 	bl	8004874 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8004f80:	4c65      	ldr	r4, [pc, #404]	; (8005118 <prvTimerTask+0x1c0>)
	xTimeNow = xTaskGetTickCount();
 8004f82:	4681      	mov	r9, r0
	if( xTimeNow < xLastTime )
 8004f84:	6823      	ldr	r3, [r4, #0]
 8004f86:	4626      	mov	r6, r4
 8004f88:	4298      	cmp	r0, r3
 8004f8a:	d240      	bcs.n	800500e <prvTimerTask+0xb6>
		prvSwitchTimerLists();
 8004f8c:	f7ff ffa6 	bl	8004edc <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8004f90:	f8c4 9000 	str.w	r9, [r4]
			( void ) xTaskResumeAll();
 8004f94:	f7ff fd04 	bl	80049a0 <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f98:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8005120 <prvTimerTask+0x1c8>
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	a902      	add	r1, sp, #8
 8004fa0:	f8d9 0000 	ldr.w	r0, [r9]
 8004fa4:	f7ff f932 	bl	800420c <xQueueReceive>
 8004fa8:	2800      	cmp	r0, #0
 8004faa:	d0dc      	beq.n	8004f66 <prvTimerTask+0xe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004fac:	9b02      	ldr	r3, [sp, #8]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	da03      	bge.n	8004fba <prvTimerTask+0x62>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004fb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004fb6:	9b03      	ldr	r3, [sp, #12]
 8004fb8:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004fba:	9b02      	ldr	r3, [sp, #8]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	dbed      	blt.n	8004f9c <prvTimerTask+0x44>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004fc0:	9c04      	ldr	r4, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004fc2:	6963      	ldr	r3, [r4, #20]
 8004fc4:	b113      	cbz	r3, 8004fcc <prvTimerTask+0x74>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fc6:	1d20      	adds	r0, r4, #4
 8004fc8:	f7fe febd 	bl	8003d46 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8004fcc:	f7ff fc52 	bl	8004874 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8004fd0:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 8004fd2:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 8004fd4:	4298      	cmp	r0, r3
 8004fd6:	d201      	bcs.n	8004fdc <prvTimerTask+0x84>
		prvSwitchTimerLists();
 8004fd8:	f7ff ff80 	bl	8004edc <prvSwitchTimerLists>
 8004fdc:	9a02      	ldr	r2, [sp, #8]
	xLastTime = xTimeNow;
 8004fde:	f8c6 b000 	str.w	fp, [r6]
 8004fe2:	2a09      	cmp	r2, #9
 8004fe4:	d8da      	bhi.n	8004f9c <prvTimerTask+0x44>
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	4093      	lsls	r3, r2
 8004fea:	f413 7a04 	ands.w	sl, r3, #528	; 0x210
 8004fee:	d17e      	bne.n	80050ee <prvTimerTask+0x196>
 8004ff0:	f013 0fc7 	tst.w	r3, #199	; 0xc7
 8004ff4:	d154      	bne.n	80050a0 <prvTimerTask+0x148>
 8004ff6:	069b      	lsls	r3, r3, #26
 8004ff8:	d5d0      	bpl.n	8004f9c <prvTimerTask+0x44>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004ffa:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1cc      	bne.n	8004f9c <prvTimerTask+0x44>
							vPortFree( pxTimer );
 8005002:	4620      	mov	r0, r4
 8005004:	f000 faa6 	bl	8005554 <vPortFree>
 8005008:	e7c8      	b.n	8004f9c <prvTimerTask+0x44>
		xNextExpireTime = ( TickType_t ) 0U;
 800500a:	46da      	mov	sl, fp
 800500c:	e7b4      	b.n	8004f78 <prvTimerTask+0x20>
	xLastTime = xTimeNow;
 800500e:	6020      	str	r0, [r4, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005010:	f1bb 0f00 	cmp.w	fp, #0
 8005014:	d029      	beq.n	800506a <prvTimerTask+0x112>
 8005016:	4582      	cmp	sl, r0
 8005018:	d840      	bhi.n	800509c <prvTimerTask+0x144>
				( void ) xTaskResumeAll();
 800501a:	f7ff fcc1 	bl	80049a0 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005024:	1d20      	adds	r0, r4, #4
 8005026:	f7fe fe8e 	bl	8003d46 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800502a:	69e3      	ldr	r3, [r4, #28]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d118      	bne.n	8005062 <prvTimerTask+0x10a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005030:	69a1      	ldr	r1, [r4, #24]
 8005032:	4653      	mov	r3, sl
 8005034:	464a      	mov	r2, r9
 8005036:	4451      	add	r1, sl
 8005038:	4620      	mov	r0, r4
 800503a:	f7ff fed3 	bl	8004de4 <prvInsertTimerInActiveList>
 800503e:	b180      	cbz	r0, 8005062 <prvTimerTask+0x10a>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005040:	2300      	movs	r3, #0
 8005042:	4652      	mov	r2, sl
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	4619      	mov	r1, r3
 8005048:	4620      	mov	r0, r4
 800504a:	f7ff ff1b 	bl	8004e84 <xTimerGenericCommand>
			configASSERT( xResult );
 800504e:	b940      	cbnz	r0, 8005062 <prvTimerTask+0x10a>
 8005050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	e7fe      	b.n	8005060 <prvTimerTask+0x108>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005062:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005064:	4620      	mov	r0, r4
 8005066:	4798      	blx	r3
 8005068:	e796      	b.n	8004f98 <prvTimerTask+0x40>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800506a:	4b2c      	ldr	r3, [pc, #176]	; (800511c <prvTimerTask+0x1c4>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	fab2 f282 	clz	r2, r2
 8005074:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005076:	4b2a      	ldr	r3, [pc, #168]	; (8005120 <prvTimerTask+0x1c8>)
 8005078:	ebaa 0109 	sub.w	r1, sl, r9
 800507c:	6818      	ldr	r0, [r3, #0]
 800507e:	f7ff f9c7 	bl	8004410 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005082:	f7ff fc8d 	bl	80049a0 <xTaskResumeAll>
 8005086:	2800      	cmp	r0, #0
 8005088:	d186      	bne.n	8004f98 <prvTimerTask+0x40>
					portYIELD_WITHIN_API();
 800508a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800508e:	f8c8 3000 	str.w	r3, [r8]
 8005092:	f3bf 8f4f 	dsb	sy
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	e77d      	b.n	8004f98 <prvTimerTask+0x40>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800509c:	2200      	movs	r2, #0
 800509e:	e7ea      	b.n	8005076 <prvTimerTask+0x11e>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80050a0:	69a1      	ldr	r1, [r4, #24]
 80050a2:	9b03      	ldr	r3, [sp, #12]
 80050a4:	465a      	mov	r2, fp
 80050a6:	4419      	add	r1, r3
 80050a8:	4620      	mov	r0, r4
 80050aa:	f7ff fe9b 	bl	8004de4 <prvInsertTimerInActiveList>
 80050ae:	2800      	cmp	r0, #0
 80050b0:	f43f af74 	beq.w	8004f9c <prvTimerTask+0x44>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050b6:	4620      	mov	r0, r4
 80050b8:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80050ba:	69e3      	ldr	r3, [r4, #28]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	f47f af6d 	bne.w	8004f9c <prvTimerTask+0x44>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80050c2:	69a2      	ldr	r2, [r4, #24]
 80050c4:	9903      	ldr	r1, [sp, #12]
 80050c6:	f8cd a000 	str.w	sl, [sp]
 80050ca:	440a      	add	r2, r1
 80050cc:	4653      	mov	r3, sl
 80050ce:	4651      	mov	r1, sl
 80050d0:	4620      	mov	r0, r4
 80050d2:	f7ff fed7 	bl	8004e84 <xTimerGenericCommand>
							configASSERT( xResult );
 80050d6:	2800      	cmp	r0, #0
 80050d8:	f47f af60 	bne.w	8004f9c <prvTimerTask+0x44>
 80050dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e0:	f383 8811 	msr	BASEPRI, r3
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	e7fe      	b.n	80050ec <prvTimerTask+0x194>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80050ee:	9903      	ldr	r1, [sp, #12]
 80050f0:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80050f2:	b941      	cbnz	r1, 8005106 <prvTimerTask+0x1ae>
 80050f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f8:	f383 8811 	msr	BASEPRI, r3
 80050fc:	f3bf 8f6f 	isb	sy
 8005100:	f3bf 8f4f 	dsb	sy
 8005104:	e7fe      	b.n	8005104 <prvTimerTask+0x1ac>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005106:	465b      	mov	r3, fp
 8005108:	465a      	mov	r2, fp
 800510a:	4459      	add	r1, fp
 800510c:	4620      	mov	r0, r4
 800510e:	f7ff fe69 	bl	8004de4 <prvInsertTimerInActiveList>
 8005112:	e743      	b.n	8004f9c <prvTimerTask+0x44>
 8005114:	20001198 	.word	0x20001198
 8005118:	20001268 	.word	0x20001268
 800511c:	2000119c 	.word	0x2000119c
 8005120:	200012bc 	.word	0x200012bc
 8005124:	e000ed04 	.word	0xe000ed04

08005128 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 8005128:	2300      	movs	r3, #0
{
 800512a:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 800512c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800512e:	4b0d      	ldr	r3, [pc, #52]	; (8005164 <prvTaskExitError+0x3c>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	3301      	adds	r3, #1
 8005134:	d008      	beq.n	8005148 <prvTaskExitError+0x20>
 8005136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513a:	f383 8811 	msr	BASEPRI, r3
 800513e:	f3bf 8f6f 	isb	sy
 8005142:	f3bf 8f4f 	dsb	sy
 8005146:	e7fe      	b.n	8005146 <prvTaskExitError+0x1e>
 8005148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514c:	f383 8811 	msr	BASEPRI, r3
 8005150:	f3bf 8f6f 	isb	sy
 8005154:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005158:	9b01      	ldr	r3, [sp, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d0fc      	beq.n	8005158 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800515e:	b002      	add	sp, #8
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	2000013c 	.word	0x2000013c

08005168 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005168:	4806      	ldr	r0, [pc, #24]	; (8005184 <prvPortStartFirstTask+0x1c>)
 800516a:	6800      	ldr	r0, [r0, #0]
 800516c:	6800      	ldr	r0, [r0, #0]
 800516e:	f380 8808 	msr	MSP, r0
 8005172:	b662      	cpsie	i
 8005174:	b661      	cpsie	f
 8005176:	f3bf 8f4f 	dsb	sy
 800517a:	f3bf 8f6f 	isb	sy
 800517e:	df00      	svc	0
 8005180:	bf00      	nop
 8005182:	0000      	.short	0x0000
 8005184:	e000ed08 	.word	0xe000ed08

08005188 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005188:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800518c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005190:	4b05      	ldr	r3, [pc, #20]	; (80051a8 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005192:	f021 0101 	bic.w	r1, r1, #1
 8005196:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800519a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800519e:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80051a2:	3840      	subs	r0, #64	; 0x40
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	08005129 	.word	0x08005129
 80051ac:	00000000 	.word	0x00000000

080051b0 <SVC_Handler>:
	__asm volatile (
 80051b0:	4b07      	ldr	r3, [pc, #28]	; (80051d0 <pxCurrentTCBConst2>)
 80051b2:	6819      	ldr	r1, [r3, #0]
 80051b4:	6808      	ldr	r0, [r1, #0]
 80051b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80051ba:	f380 8809 	msr	PSP, r0
 80051be:	f3bf 8f6f 	isb	sy
 80051c2:	f04f 0000 	mov.w	r0, #0
 80051c6:	f380 8811 	msr	BASEPRI, r0
 80051ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80051ce:	4770      	bx	lr

080051d0 <pxCurrentTCBConst2>:
 80051d0:	20000c9c 	.word	0x20000c9c

080051d4 <vPortEnterCritical>:
 80051d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d8:	f383 8811 	msr	BASEPRI, r3
 80051dc:	f3bf 8f6f 	isb	sy
 80051e0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80051e4:	4a0a      	ldr	r2, [pc, #40]	; (8005210 <vPortEnterCritical+0x3c>)
 80051e6:	6813      	ldr	r3, [r2, #0]
 80051e8:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80051ea:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80051ec:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80051ee:	d10d      	bne.n	800520c <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80051f0:	4b08      	ldr	r3, [pc, #32]	; (8005214 <vPortEnterCritical+0x40>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80051f8:	d008      	beq.n	800520c <vPortEnterCritical+0x38>
 80051fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fe:	f383 8811 	msr	BASEPRI, r3
 8005202:	f3bf 8f6f 	isb	sy
 8005206:	f3bf 8f4f 	dsb	sy
 800520a:	e7fe      	b.n	800520a <vPortEnterCritical+0x36>
	}
}
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	2000013c 	.word	0x2000013c
 8005214:	e000ed04 	.word	0xe000ed04

08005218 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8005218:	4a08      	ldr	r2, [pc, #32]	; (800523c <vPortExitCritical+0x24>)
 800521a:	6813      	ldr	r3, [r2, #0]
 800521c:	b943      	cbnz	r3, 8005230 <vPortExitCritical+0x18>
 800521e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	e7fe      	b.n	800522e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8005230:	3b01      	subs	r3, #1
 8005232:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005234:	b90b      	cbnz	r3, 800523a <vPortExitCritical+0x22>
	__asm volatile
 8005236:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800523a:	4770      	bx	lr
 800523c:	2000013c 	.word	0x2000013c

08005240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005240:	f3ef 8009 	mrs	r0, PSP
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	4b0d      	ldr	r3, [pc, #52]	; (8005280 <pxCurrentTCBConst>)
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005250:	6010      	str	r0, [r2, #0]
 8005252:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005256:	f04f 0050 	mov.w	r0, #80	; 0x50
 800525a:	f380 8811 	msr	BASEPRI, r0
 800525e:	f7ff fc37 	bl	8004ad0 <vTaskSwitchContext>
 8005262:	f04f 0000 	mov.w	r0, #0
 8005266:	f380 8811 	msr	BASEPRI, r0
 800526a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800526e:	6819      	ldr	r1, [r3, #0]
 8005270:	6808      	ldr	r0, [r1, #0]
 8005272:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005276:	f380 8809 	msr	PSP, r0
 800527a:	f3bf 8f6f 	isb	sy
 800527e:	4770      	bx	lr

08005280 <pxCurrentTCBConst>:
 8005280:	20000c9c 	.word	0x20000c9c

08005284 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005284:	b508      	push	{r3, lr}
	__asm volatile
 8005286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528a:	f383 8811 	msr	BASEPRI, r3
 800528e:	f3bf 8f6f 	isb	sy
 8005292:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005296:	f7ff faf3 	bl	8004880 <xTaskIncrementTick>
 800529a:	b118      	cbz	r0, 80052a4 <xPortSysTickHandler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800529c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052a0:	4b02      	ldr	r3, [pc, #8]	; (80052ac <xPortSysTickHandler+0x28>)
 80052a2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80052a4:	2300      	movs	r3, #0
 80052a6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80052aa:	bd08      	pop	{r3, pc}
 80052ac:	e000ed04 	.word	0xe000ed04

080052b0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80052b0:	2300      	movs	r3, #0
 80052b2:	4a08      	ldr	r2, [pc, #32]	; (80052d4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80052b4:	4908      	ldr	r1, [pc, #32]	; (80052d8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80052b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80052b8:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80052ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80052be:	4b07      	ldr	r3, [pc, #28]	; (80052dc <vPortSetupTimerInterrupt+0x2c>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80052c6:	4906      	ldr	r1, [pc, #24]	; (80052e0 <vPortSetupTimerInterrupt+0x30>)
 80052c8:	3b01      	subs	r3, #1
 80052ca:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80052cc:	2307      	movs	r3, #7
 80052ce:	6013      	str	r3, [r2, #0]
}
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	e000e010 	.word	0xe000e010
 80052d8:	e000e018 	.word	0xe000e018
 80052dc:	20000008 	.word	0x20000008
 80052e0:	e000e014 	.word	0xe000e014

080052e4 <xPortStartScheduler>:
{
 80052e4:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80052e6:	4b27      	ldr	r3, [pc, #156]	; (8005384 <xPortStartScheduler+0xa0>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052e8:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80052ea:	781a      	ldrb	r2, [r3, #0]
 80052ec:	b2d2      	uxtb	r2, r2
 80052ee:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80052f0:	22ff      	movs	r2, #255	; 0xff
 80052f2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80052f4:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052f6:	4a24      	ldr	r2, [pc, #144]	; (8005388 <xPortStartScheduler+0xa4>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052fe:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005302:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005306:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005308:	2207      	movs	r2, #7
 800530a:	4b20      	ldr	r3, [pc, #128]	; (800538c <xPortStartScheduler+0xa8>)
 800530c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800530e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8005312:	1e54      	subs	r4, r2, #1
 8005314:	0600      	lsls	r0, r0, #24
 8005316:	d40d      	bmi.n	8005334 <xPortStartScheduler+0x50>
 8005318:	b101      	cbz	r1, 800531c <xPortStartScheduler+0x38>
 800531a:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	2a03      	cmp	r2, #3
 8005320:	d011      	beq.n	8005346 <xPortStartScheduler+0x62>
	__asm volatile
 8005322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005326:	f383 8811 	msr	BASEPRI, r3
 800532a:	f3bf 8f6f 	isb	sy
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	e7fe      	b.n	8005332 <xPortStartScheduler+0x4e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005334:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8005338:	2101      	movs	r1, #1
 800533a:	0052      	lsls	r2, r2, #1
 800533c:	b2d2      	uxtb	r2, r2
 800533e:	f88d 2003 	strb.w	r2, [sp, #3]
 8005342:	4622      	mov	r2, r4
 8005344:	e7e3      	b.n	800530e <xPortStartScheduler+0x2a>
	uxCriticalNesting = 0;
 8005346:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005348:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800534a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800534e:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005350:	9b01      	ldr	r3, [sp, #4]
 8005352:	4a0c      	ldr	r2, [pc, #48]	; (8005384 <xPortStartScheduler+0xa0>)
 8005354:	b2db      	uxtb	r3, r3
 8005356:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005358:	4b0d      	ldr	r3, [pc, #52]	; (8005390 <xPortStartScheduler+0xac>)
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8005360:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8005368:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800536a:	f7ff ffa1 	bl	80052b0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800536e:	4b09      	ldr	r3, [pc, #36]	; (8005394 <xPortStartScheduler+0xb0>)
 8005370:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8005372:	f7ff fef9 	bl	8005168 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8005376:	f7ff fbab 	bl	8004ad0 <vTaskSwitchContext>
	prvTaskExitError();
 800537a:	f7ff fed5 	bl	8005128 <prvTaskExitError>
}
 800537e:	4620      	mov	r0, r4
 8005380:	b002      	add	sp, #8
 8005382:	bd10      	pop	{r4, pc}
 8005384:	e000e400 	.word	0xe000e400
 8005388:	200012c4 	.word	0x200012c4
 800538c:	200012c8 	.word	0x200012c8
 8005390:	e000ed20 	.word	0xe000ed20
 8005394:	2000013c 	.word	0x2000013c

08005398 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005398:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800539c:	2b0f      	cmp	r3, #15
 800539e:	d90e      	bls.n	80053be <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80053a0:	4a10      	ldr	r2, [pc, #64]	; (80053e4 <vPortValidateInterruptPriority+0x4c>)
 80053a2:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80053a4:	4a10      	ldr	r2, [pc, #64]	; (80053e8 <vPortValidateInterruptPriority+0x50>)
 80053a6:	7812      	ldrb	r2, [r2, #0]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d908      	bls.n	80053be <vPortValidateInterruptPriority+0x26>
 80053ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b0:	f383 8811 	msr	BASEPRI, r3
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	e7fe      	b.n	80053bc <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80053be:	4b0b      	ldr	r3, [pc, #44]	; (80053ec <vPortValidateInterruptPriority+0x54>)
 80053c0:	4a0b      	ldr	r2, [pc, #44]	; (80053f0 <vPortValidateInterruptPriority+0x58>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6812      	ldr	r2, [r2, #0]
 80053c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d908      	bls.n	80053e0 <vPortValidateInterruptPriority+0x48>
 80053ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d2:	f383 8811 	msr	BASEPRI, r3
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	e7fe      	b.n	80053de <vPortValidateInterruptPriority+0x46>
	}
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	e000e3f0 	.word	0xe000e3f0
 80053e8:	200012c4 	.word	0x200012c4
 80053ec:	e000ed0c 	.word	0xe000ed0c
 80053f0:	200012c8 	.word	0x200012c8

080053f4 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80053f4:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80053f6:	4b0f      	ldr	r3, [pc, #60]	; (8005434 <prvInsertBlockIntoFreeList+0x40>)
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	4282      	cmp	r2, r0
 80053fc:	d318      	bcc.n	8005430 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80053fe:	685c      	ldr	r4, [r3, #4]
 8005400:	1919      	adds	r1, r3, r4
 8005402:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005404:	bf01      	itttt	eq
 8005406:	6841      	ldreq	r1, [r0, #4]
 8005408:	4618      	moveq	r0, r3
 800540a:	1909      	addeq	r1, r1, r4
 800540c:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800540e:	6844      	ldr	r4, [r0, #4]
 8005410:	1901      	adds	r1, r0, r4
 8005412:	428a      	cmp	r2, r1
 8005414:	d107      	bne.n	8005426 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005416:	4908      	ldr	r1, [pc, #32]	; (8005438 <prvInsertBlockIntoFreeList+0x44>)
 8005418:	6809      	ldr	r1, [r1, #0]
 800541a:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800541c:	bf1f      	itttt	ne
 800541e:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005420:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005422:	1909      	addne	r1, r1, r4
 8005424:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005426:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005428:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800542a:	bf18      	it	ne
 800542c:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800542e:	bd10      	pop	{r4, pc}
 8005430:	4613      	mov	r3, r2
 8005432:	e7e1      	b.n	80053f8 <prvInsertBlockIntoFreeList+0x4>
 8005434:	20001edc 	.word	0x20001edc
 8005438:	200012cc 	.word	0x200012cc

0800543c <pvPortMalloc>:
{
 800543c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005440:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8005442:	f7ff fa0f 	bl	8004864 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8005446:	493d      	ldr	r1, [pc, #244]	; (800553c <pvPortMalloc+0x100>)
 8005448:	4d3d      	ldr	r5, [pc, #244]	; (8005540 <pvPortMalloc+0x104>)
 800544a:	680b      	ldr	r3, [r1, #0]
 800544c:	b9fb      	cbnz	r3, 800548e <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 800544e:	4a3d      	ldr	r2, [pc, #244]	; (8005544 <pvPortMalloc+0x108>)
	xStart.xBlockSize = ( size_t ) 0;
 8005450:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005452:	0756      	lsls	r6, r2, #29
 8005454:	f502 6340 	add.w	r3, r2, #3072	; 0xc00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005458:	bf0f      	iteee	eq
 800545a:	f44f 6340 	moveq.w	r3, #3072	; 0xc00
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800545e:	3207      	addne	r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005460:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005464:	1a9b      	subne	r3, r3, r2
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005466:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005468:	4e37      	ldr	r6, [pc, #220]	; (8005548 <pvPortMalloc+0x10c>)
	uxAddress -= xHeapStructSize;
 800546a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800546c:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8005470:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005472:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8005474:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005478:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800547a:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800547c:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005480:	4b32      	ldr	r3, [pc, #200]	; (800554c <pvPortMalloc+0x110>)
 8005482:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005484:	4b32      	ldr	r3, [pc, #200]	; (8005550 <pvPortMalloc+0x114>)
 8005486:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005488:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800548c:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800548e:	682f      	ldr	r7, [r5, #0]
 8005490:	4227      	tst	r7, r4
 8005492:	d14d      	bne.n	8005530 <pvPortMalloc+0xf4>
			if( xWantedSize > 0 )
 8005494:	2c00      	cmp	r4, #0
 8005496:	d03e      	beq.n	8005516 <pvPortMalloc+0xda>
				xWantedSize += xHeapStructSize;
 8005498:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800549c:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800549e:	bf1c      	itt	ne
 80054a0:	f023 0307 	bicne.w	r3, r3, #7
 80054a4:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d042      	beq.n	8005530 <pvPortMalloc+0xf4>
 80054aa:	4a29      	ldr	r2, [pc, #164]	; (8005550 <pvPortMalloc+0x114>)
 80054ac:	6816      	ldr	r6, [r2, #0]
 80054ae:	4690      	mov	r8, r2
 80054b0:	429e      	cmp	r6, r3
 80054b2:	d33d      	bcc.n	8005530 <pvPortMalloc+0xf4>
				pxBlock = xStart.pxNextFreeBlock;
 80054b4:	4a24      	ldr	r2, [pc, #144]	; (8005548 <pvPortMalloc+0x10c>)
 80054b6:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054b8:	6868      	ldr	r0, [r5, #4]
 80054ba:	4298      	cmp	r0, r3
 80054bc:	d201      	bcs.n	80054c2 <pvPortMalloc+0x86>
 80054be:	682c      	ldr	r4, [r5, #0]
 80054c0:	b9a4      	cbnz	r4, 80054ec <pvPortMalloc+0xb0>
				if( pxBlock != pxEnd )
 80054c2:	6809      	ldr	r1, [r1, #0]
 80054c4:	42a9      	cmp	r1, r5
 80054c6:	d033      	beq.n	8005530 <pvPortMalloc+0xf4>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054c8:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80054ca:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054cc:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80054ce:	1ac2      	subs	r2, r0, r3
 80054d0:	2a10      	cmp	r2, #16
 80054d2:	d912      	bls.n	80054fa <pvPortMalloc+0xbe>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80054d4:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054d6:	0741      	lsls	r1, r0, #29
 80054d8:	d00b      	beq.n	80054f2 <pvPortMalloc+0xb6>
 80054da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054de:	f383 8811 	msr	BASEPRI, r3
 80054e2:	f3bf 8f6f 	isb	sy
 80054e6:	f3bf 8f4f 	dsb	sy
 80054ea:	e7fe      	b.n	80054ea <pvPortMalloc+0xae>
 80054ec:	462a      	mov	r2, r5
 80054ee:	4625      	mov	r5, r4
 80054f0:	e7e2      	b.n	80054b8 <pvPortMalloc+0x7c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80054f2:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80054f4:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80054f6:	f7ff ff7d 	bl	80053f4 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80054fa:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80054fc:	4913      	ldr	r1, [pc, #76]	; (800554c <pvPortMalloc+0x110>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80054fe:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005500:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 8005502:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005504:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005506:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800550a:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800550c:	bf38      	it	cc
 800550e:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005510:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005512:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005514:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8005516:	f7ff fa43 	bl	80049a0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800551a:	0763      	lsls	r3, r4, #29
 800551c:	d00a      	beq.n	8005534 <pvPortMalloc+0xf8>
 800551e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005522:	f383 8811 	msr	BASEPRI, r3
 8005526:	f3bf 8f6f 	isb	sy
 800552a:	f3bf 8f4f 	dsb	sy
 800552e:	e7fe      	b.n	800552e <pvPortMalloc+0xf2>
void *pvReturn = NULL;
 8005530:	2400      	movs	r4, #0
 8005532:	e7f0      	b.n	8005516 <pvPortMalloc+0xda>
}
 8005534:	4620      	mov	r0, r4
 8005536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800553a:	bf00      	nop
 800553c:	200012cc 	.word	0x200012cc
 8005540:	20001ed0 	.word	0x20001ed0
 8005544:	200012d0 	.word	0x200012d0
 8005548:	20001edc 	.word	0x20001edc
 800554c:	20001ed8 	.word	0x20001ed8
 8005550:	20001ed4 	.word	0x20001ed4

08005554 <vPortFree>:
{
 8005554:	b510      	push	{r4, lr}
	if( pv != NULL )
 8005556:	4604      	mov	r4, r0
 8005558:	b370      	cbz	r0, 80055b8 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800555a:	4a18      	ldr	r2, [pc, #96]	; (80055bc <vPortFree+0x68>)
 800555c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005560:	6812      	ldr	r2, [r2, #0]
 8005562:	4213      	tst	r3, r2
 8005564:	d108      	bne.n	8005578 <vPortFree+0x24>
 8005566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556a:	f383 8811 	msr	BASEPRI, r3
 800556e:	f3bf 8f6f 	isb	sy
 8005572:	f3bf 8f4f 	dsb	sy
 8005576:	e7fe      	b.n	8005576 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005578:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800557c:	b141      	cbz	r1, 8005590 <vPortFree+0x3c>
 800557e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005582:	f383 8811 	msr	BASEPRI, r3
 8005586:	f3bf 8f6f 	isb	sy
 800558a:	f3bf 8f4f 	dsb	sy
 800558e:	e7fe      	b.n	800558e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005590:	ea23 0302 	bic.w	r3, r3, r2
 8005594:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8005598:	f7ff f964 	bl	8004864 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800559c:	4a08      	ldr	r2, [pc, #32]	; (80055c0 <vPortFree+0x6c>)
 800559e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80055a2:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80055a4:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80055a8:	440b      	add	r3, r1
 80055aa:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80055ac:	f7ff ff22 	bl	80053f4 <prvInsertBlockIntoFreeList>
}
 80055b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80055b4:	f7ff b9f4 	b.w	80049a0 <xTaskResumeAll>
}
 80055b8:	bd10      	pop	{r4, pc}
 80055ba:	bf00      	nop
 80055bc:	20001ed0 	.word	0x20001ed0
 80055c0:	20001ed4 	.word	0x20001ed4

080055c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80055c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80055c6:	2200      	movs	r2, #0
 80055c8:	490e      	ldr	r1, [pc, #56]	; (8005604 <MX_USB_DEVICE_Init+0x40>)
 80055ca:	480f      	ldr	r0, [pc, #60]	; (8005608 <MX_USB_DEVICE_Init+0x44>)
 80055cc:	f7fd fe31 	bl	8003232 <USBD_Init>
 80055d0:	b108      	cbz	r0, 80055d6 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 80055d2:	f7fb f8f3 	bl	80007bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80055d6:	490d      	ldr	r1, [pc, #52]	; (800560c <MX_USB_DEVICE_Init+0x48>)
 80055d8:	480b      	ldr	r0, [pc, #44]	; (8005608 <MX_USB_DEVICE_Init+0x44>)
 80055da:	f7fd fe3f 	bl	800325c <USBD_RegisterClass>
 80055de:	b108      	cbz	r0, 80055e4 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 80055e0:	f7fb f8ec 	bl	80007bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80055e4:	490a      	ldr	r1, [pc, #40]	; (8005610 <MX_USB_DEVICE_Init+0x4c>)
 80055e6:	4808      	ldr	r0, [pc, #32]	; (8005608 <MX_USB_DEVICE_Init+0x44>)
 80055e8:	f7fd fdfb 	bl	80031e2 <USBD_CDC_RegisterInterface>
 80055ec:	b108      	cbz	r0, 80055f2 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 80055ee:	f7fb f8e5 	bl	80007bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80055f2:	4805      	ldr	r0, [pc, #20]	; (8005608 <MX_USB_DEVICE_Init+0x44>)
 80055f4:	f7fd fe39 	bl	800326a <USBD_Start>
 80055f8:	b118      	cbz	r0, 8005602 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80055fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80055fe:	f7fb b8dd 	b.w	80007bc <Error_Handler>
}
 8005602:	bd08      	pop	{r3, pc}
 8005604:	20000150 	.word	0x20000150
 8005608:	20002738 	.word	0x20002738
 800560c:	2000002c 	.word	0x2000002c
 8005610:	20000140 	.word	0x20000140

08005614 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8005614:	2000      	movs	r0, #0
 8005616:	4770      	bx	lr

08005618 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8005618:	2000      	movs	r0, #0
 800561a:	4770      	bx	lr

0800561c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800561c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800561e:	4c05      	ldr	r4, [pc, #20]	; (8005634 <CDC_Receive_FS+0x18>)
 8005620:	4601      	mov	r1, r0
 8005622:	4620      	mov	r0, r4
 8005624:	f7fd fdec 	bl	8003200 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005628:	4620      	mov	r0, r4
 800562a:	f7fd fdef 	bl	800320c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 800562e:	2000      	movs	r0, #0
 8005630:	bd10      	pop	{r4, pc}
 8005632:	bf00      	nop
 8005634:	20002738 	.word	0x20002738

08005638 <CDC_Init_FS>:
{
 8005638:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800563a:	4c06      	ldr	r4, [pc, #24]	; (8005654 <CDC_Init_FS+0x1c>)
 800563c:	2200      	movs	r2, #0
 800563e:	4906      	ldr	r1, [pc, #24]	; (8005658 <CDC_Init_FS+0x20>)
 8005640:	4620      	mov	r0, r4
 8005642:	f7fd fdd5 	bl	80031f0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005646:	4905      	ldr	r1, [pc, #20]	; (800565c <CDC_Init_FS+0x24>)
 8005648:	4620      	mov	r0, r4
 800564a:	f7fd fdd9 	bl	8003200 <USBD_CDC_SetRxBuffer>
}
 800564e:	2000      	movs	r0, #0
 8005650:	bd10      	pop	{r4, pc}
 8005652:	bf00      	nop
 8005654:	20002738 	.word	0x20002738
 8005658:	20002de4 	.word	0x20002de4
 800565c:	200029fc 	.word	0x200029fc

08005660 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005660:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8005662:	4801      	ldr	r0, [pc, #4]	; (8005668 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8005664:	800b      	strh	r3, [r1, #0]
}
 8005666:	4770      	bx	lr
 8005668:	2000016c 	.word	0x2000016c

0800566c <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800566c:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800566e:	4801      	ldr	r0, [pc, #4]	; (8005674 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8005670:	800b      	strh	r3, [r1, #0]
}
 8005672:	4770      	bx	lr
 8005674:	20000180 	.word	0x20000180

08005678 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005678:	2300      	movs	r3, #0
 800567a:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800567c:	461e      	mov	r6, r3
    if (((value >> 28)) < 0xA)
 800567e:	0f05      	lsrs	r5, r0, #28
 8005680:	b2ec      	uxtb	r4, r5
 8005682:	2d09      	cmp	r5, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8005684:	bf94      	ite	ls
 8005686:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005688:	3437      	addhi	r4, #55	; 0x37
 800568a:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 800568e:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 8005692:	3301      	adds	r3, #1
 8005694:	7066      	strb	r6, [r4, #1]
  for (idx = 0; idx < len; idx++)
 8005696:	b2dc      	uxtb	r4, r3
 8005698:	42a2      	cmp	r2, r4
    value = value << 4;
 800569a:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 800569e:	d8ee      	bhi.n	800567e <IntToUnicode+0x6>
  }
}
 80056a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080056a4 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 80056a4:	231a      	movs	r3, #26
{
 80056a6:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80056a8:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80056aa:	4b09      	ldr	r3, [pc, #36]	; (80056d0 <USBD_FS_SerialStrDescriptor+0x2c>)
 80056ac:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80056ae:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 80056b0:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 80056b2:	18c0      	adds	r0, r0, r3
 80056b4:	d00a      	beq.n	80056cc <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80056b6:	4b07      	ldr	r3, [pc, #28]	; (80056d4 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80056b8:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80056ba:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80056bc:	4906      	ldr	r1, [pc, #24]	; (80056d8 <USBD_FS_SerialStrDescriptor+0x34>)
 80056be:	f7ff ffdb 	bl	8005678 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80056c2:	2204      	movs	r2, #4
 80056c4:	4905      	ldr	r1, [pc, #20]	; (80056dc <USBD_FS_SerialStrDescriptor+0x38>)
 80056c6:	4620      	mov	r0, r4
 80056c8:	f7ff ffd6 	bl	8005678 <IntToUnicode>
}
 80056cc:	4804      	ldr	r0, [pc, #16]	; (80056e0 <USBD_FS_SerialStrDescriptor+0x3c>)
 80056ce:	bd10      	pop	{r4, pc}
 80056d0:	1ffff7e8 	.word	0x1ffff7e8
 80056d4:	1ffff7ec 	.word	0x1ffff7ec
 80056d8:	20000186 	.word	0x20000186
 80056dc:	20000196 	.word	0x20000196
 80056e0:	20000184 	.word	0x20000184

080056e4 <USBD_FS_ManufacturerStrDescriptor>:
{
 80056e4:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80056e6:	4c04      	ldr	r4, [pc, #16]	; (80056f8 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80056e8:	460a      	mov	r2, r1
 80056ea:	4804      	ldr	r0, [pc, #16]	; (80056fc <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80056ec:	4621      	mov	r1, r4
 80056ee:	f7fe f8da 	bl	80038a6 <USBD_GetString>
}
 80056f2:	4620      	mov	r0, r4
 80056f4:	bd10      	pop	{r4, pc}
 80056f6:	bf00      	nop
 80056f8:	200031cc 	.word	0x200031cc
 80056fc:	08006936 	.word	0x08006936

08005700 <USBD_FS_ProductStrDescriptor>:
{
 8005700:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005702:	4c04      	ldr	r4, [pc, #16]	; (8005714 <USBD_FS_ProductStrDescriptor+0x14>)
 8005704:	460a      	mov	r2, r1
 8005706:	4804      	ldr	r0, [pc, #16]	; (8005718 <USBD_FS_ProductStrDescriptor+0x18>)
 8005708:	4621      	mov	r1, r4
 800570a:	f7fe f8cc 	bl	80038a6 <USBD_GetString>
}
 800570e:	4620      	mov	r0, r4
 8005710:	bd10      	pop	{r4, pc}
 8005712:	bf00      	nop
 8005714:	200031cc 	.word	0x200031cc
 8005718:	08006949 	.word	0x08006949

0800571c <USBD_FS_ConfigStrDescriptor>:
{
 800571c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800571e:	4c04      	ldr	r4, [pc, #16]	; (8005730 <USBD_FS_ConfigStrDescriptor+0x14>)
 8005720:	460a      	mov	r2, r1
 8005722:	4804      	ldr	r0, [pc, #16]	; (8005734 <USBD_FS_ConfigStrDescriptor+0x18>)
 8005724:	4621      	mov	r1, r4
 8005726:	f7fe f8be 	bl	80038a6 <USBD_GetString>
}
 800572a:	4620      	mov	r0, r4
 800572c:	bd10      	pop	{r4, pc}
 800572e:	bf00      	nop
 8005730:	200031cc 	.word	0x200031cc
 8005734:	0800691d 	.word	0x0800691d

08005738 <USBD_FS_InterfaceStrDescriptor>:
{
 8005738:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800573a:	4c04      	ldr	r4, [pc, #16]	; (800574c <USBD_FS_InterfaceStrDescriptor+0x14>)
 800573c:	460a      	mov	r2, r1
 800573e:	4804      	ldr	r0, [pc, #16]	; (8005750 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8005740:	4621      	mov	r1, r4
 8005742:	f7fe f8b0 	bl	80038a6 <USBD_GetString>
}
 8005746:	4620      	mov	r0, r4
 8005748:	bd10      	pop	{r4, pc}
 800574a:	bf00      	nop
 800574c:	200031cc 	.word	0x200031cc
 8005750:	08006928 	.word	0x08006928

08005754 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005754:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8005756:	4b0e      	ldr	r3, [pc, #56]	; (8005790 <HAL_PCD_MspInit+0x3c>)
 8005758:	6802      	ldr	r2, [r0, #0]
 800575a:	429a      	cmp	r2, r3
 800575c:	d115      	bne.n	800578a <HAL_PCD_MspInit+0x36>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800575e:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8005762:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8005764:	2105      	movs	r1, #5
    __HAL_RCC_USB_CLK_ENABLE();
 8005766:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800576a:	61da      	str	r2, [r3, #28]
 800576c:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800576e:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8005770:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005774:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8005776:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8005778:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800577a:	f7fb fb6b 	bl	8000e54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800577e:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8005780:	b003      	add	sp, #12
 8005782:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8005786:	f7fb bb99 	b.w	8000ebc <HAL_NVIC_EnableIRQ>
}
 800578a:	b003      	add	sp, #12
 800578c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005790:	40005c00 	.word	0x40005c00

08005794 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005794:	f500 710c 	add.w	r1, r0, #560	; 0x230
 8005798:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 800579c:	f7fd bd7c 	b.w	8003298 <USBD_LL_SetupStage>

080057a0 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80057a0:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 80057a4:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 80057a8:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 80057ac:	f7fd bda1 	b.w	80032f2 <USBD_LL_DataOutStage>

080057b0 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80057b0:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 80057b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057b6:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 80057ba:	f7fd bdd4 	b.w	8003366 <USBD_LL_DataInStage>

080057be <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80057be:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 80057c2:	f7fd be68 	b.w	8003496 <USBD_LL_SOF>

080057c6 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80057c6:	6883      	ldr	r3, [r0, #8]
{ 
 80057c8:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80057ca:	2b02      	cmp	r3, #2
{ 
 80057cc:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80057ce:	d001      	beq.n	80057d4 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 80057d0:	f7fa fff4 	bl	80007bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80057d4:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
 80057d8:	2101      	movs	r1, #1
 80057da:	f7fd fe46 	bl	800346a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80057de:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
}
 80057e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80057e6:	f7fd be19 	b.w	800341c <USBD_LL_Reset>
	...

080057ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80057ec:	b510      	push	{r4, lr}
 80057ee:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80057f0:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 80057f4:	f7fd fe3c 	bl	8003470 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80057f8:	69a3      	ldr	r3, [r4, #24]
 80057fa:	b123      	cbz	r3, 8005806 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80057fc:	4a02      	ldr	r2, [pc, #8]	; (8005808 <HAL_PCD_SuspendCallback+0x1c>)
 80057fe:	6913      	ldr	r3, [r2, #16]
 8005800:	f043 0306 	orr.w	r3, r3, #6
 8005804:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005806:	bd10      	pop	{r4, pc}
 8005808:	e000ed00 	.word	0xe000ed00

0800580c <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800580c:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8005810:	f7fd be37 	b.w	8003482 <USBD_LL_Resume>

08005814 <USBD_LL_Init>:
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8005814:	2308      	movs	r3, #8
{
 8005816:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8005818:	4a1d      	ldr	r2, [pc, #116]	; (8005890 <USBD_LL_Init+0x7c>)
{
 800581a:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 800581c:	481d      	ldr	r0, [pc, #116]	; (8005894 <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800581e:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8005822:	2302      	movs	r3, #2
 8005824:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8005826:	2300      	movs	r3, #0
  pdev->pData = &hpcd_USB_FS;
 8005828:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.pData = pdev;
 800582c:	f8c0 4268 	str.w	r4, [r0, #616]	; 0x268
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8005830:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8005834:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8005836:	f7fb fea3 	bl	8001580 <HAL_PCD_Init>
 800583a:	b108      	cbz	r0, 8005840 <USBD_LL_Init+0x2c>
  {
    Error_Handler( );
 800583c:	f7fa ffbe 	bl	80007bc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8005840:	2200      	movs	r2, #0
 8005842:	2318      	movs	r3, #24
 8005844:	4611      	mov	r1, r2
 8005846:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800584a:	f7fc fa48 	bl	8001cde <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800584e:	2358      	movs	r3, #88	; 0x58
 8005850:	2200      	movs	r2, #0
 8005852:	2180      	movs	r1, #128	; 0x80
 8005854:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8005858:	f7fc fa41 	bl	8001cde <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800585c:	23c0      	movs	r3, #192	; 0xc0
 800585e:	2200      	movs	r2, #0
 8005860:	2181      	movs	r1, #129	; 0x81
 8005862:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8005866:	f7fc fa3a 	bl	8001cde <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800586a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800586e:	2200      	movs	r2, #0
 8005870:	2101      	movs	r1, #1
 8005872:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8005876:	f7fc fa32 	bl	8001cde <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800587a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800587e:	2200      	movs	r2, #0
 8005880:	2182      	movs	r1, #130	; 0x82
 8005882:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8005886:	f7fc fa2a 	bl	8001cde <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 800588a:	2000      	movs	r0, #0
 800588c:	bd10      	pop	{r4, pc}
 800588e:	bf00      	nop
 8005890:	40005c00 	.word	0x40005c00
 8005894:	200033cc 	.word	0x200033cc

08005898 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005898:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800589a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800589e:	f7fb fee4 	bl	800166a <HAL_PCD_Start>
 80058a2:	2803      	cmp	r0, #3
 80058a4:	bf96      	itet	ls
 80058a6:	4b02      	ldrls	r3, [pc, #8]	; (80058b0 <USBD_LL_Start+0x18>)
 80058a8:	2002      	movhi	r0, #2
 80058aa:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 80058ac:	bd08      	pop	{r3, pc}
 80058ae:	bf00      	nop
 80058b0:	0800695f 	.word	0x0800695f

080058b4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80058b4:	b510      	push	{r4, lr}
 80058b6:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80058b8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80058bc:	4613      	mov	r3, r2
 80058be:	4622      	mov	r2, r4
 80058c0:	f7fb fefe 	bl	80016c0 <HAL_PCD_EP_Open>
 80058c4:	2803      	cmp	r0, #3
 80058c6:	bf96      	itet	ls
 80058c8:	4b01      	ldrls	r3, [pc, #4]	; (80058d0 <USBD_LL_OpenEP+0x1c>)
 80058ca:	2002      	movhi	r0, #2
 80058cc:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;
}
 80058ce:	bd10      	pop	{r4, pc}
 80058d0:	0800695f 	.word	0x0800695f

080058d4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80058d4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80058d6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80058da:	f7fb ff24 	bl	8001726 <HAL_PCD_EP_Close>
 80058de:	2803      	cmp	r0, #3
 80058e0:	bf96      	itet	ls
 80058e2:	4b02      	ldrls	r3, [pc, #8]	; (80058ec <USBD_LL_CloseEP+0x18>)
 80058e4:	2002      	movhi	r0, #2
 80058e6:	5c18      	ldrbls	r0, [r3, r0]
      
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;  
}
 80058e8:	bd08      	pop	{r3, pc}
 80058ea:	bf00      	nop
 80058ec:	0800695f 	.word	0x0800695f

080058f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80058f0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80058f2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80058f6:	f7fc f98b 	bl	8001c10 <HAL_PCD_EP_SetStall>
 80058fa:	2803      	cmp	r0, #3
 80058fc:	bf96      	itet	ls
 80058fe:	4b02      	ldrls	r3, [pc, #8]	; (8005908 <USBD_LL_StallEP+0x18>)
 8005900:	2002      	movhi	r0, #2
 8005902:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8005904:	bd08      	pop	{r3, pc}
 8005906:	bf00      	nop
 8005908:	0800695f 	.word	0x0800695f

0800590c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800590c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800590e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005912:	f7fc f9b1 	bl	8001c78 <HAL_PCD_EP_ClrStall>
 8005916:	2803      	cmp	r0, #3
 8005918:	bf96      	itet	ls
 800591a:	4b02      	ldrls	r3, [pc, #8]	; (8005924 <USBD_LL_ClearStallEP+0x18>)
 800591c:	2002      	movhi	r0, #2
 800591e:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status; 
}
 8005920:	bd08      	pop	{r3, pc}
 8005922:	bf00      	nop
 8005924:	0800695f 	.word	0x0800695f

08005928 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8005928:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800592a:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800592e:	bf45      	ittet	mi
 8005930:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8005934:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005938:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800593c:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005940:	bf58      	it	pl
 8005942:	f893 012a 	ldrbpl.w	r0, [r3, #298]	; 0x12a
  }
}
 8005946:	4770      	bx	lr

08005948 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005948:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800594a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800594e:	f7fb fea3 	bl	8001698 <HAL_PCD_SetAddress>
 8005952:	2803      	cmp	r0, #3
 8005954:	bf96      	itet	ls
 8005956:	4b02      	ldrls	r3, [pc, #8]	; (8005960 <USBD_LL_SetUSBAddress+0x18>)
 8005958:	2002      	movhi	r0, #2
 800595a:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 800595c:	bd08      	pop	{r3, pc}
 800595e:	bf00      	nop
 8005960:	0800695f 	.word	0x0800695f

08005964 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005964:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005966:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800596a:	f7fb ff24 	bl	80017b6 <HAL_PCD_EP_Transmit>
 800596e:	2803      	cmp	r0, #3
 8005970:	bf96      	itet	ls
 8005972:	4b02      	ldrls	r3, [pc, #8]	; (800597c <USBD_LL_Transmit+0x18>)
 8005974:	2002      	movhi	r0, #2
 8005976:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;    
}
 8005978:	bd08      	pop	{r3, pc}
 800597a:	bf00      	nop
 800597c:	0800695f 	.word	0x0800695f

08005980 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005980:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005982:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005986:	f7fb fef7 	bl	8001778 <HAL_PCD_EP_Receive>
 800598a:	2803      	cmp	r0, #3
 800598c:	bf96      	itet	ls
 800598e:	4b02      	ldrls	r3, [pc, #8]	; (8005998 <USBD_LL_PrepareReceive+0x18>)
 8005990:	2002      	movhi	r0, #2
 8005992:	5c18      	ldrbls	r0, [r3, r0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  	
  return usb_status; 
}
 8005994:	bd08      	pop	{r3, pc}
 8005996:	bf00      	nop
 8005998:	0800695f 	.word	0x0800695f

0800599c <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800599c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80059a0:	f7fb bf02 	b.w	80017a8 <HAL_PCD_EP_GetRxCount>

080059a4 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 80059a4:	4800      	ldr	r0, [pc, #0]	; (80059a8 <USBD_static_malloc+0x4>)
 80059a6:	4770      	bx	lr
 80059a8:	20001ee4 	.word	0x20001ee4

080059ac <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 80059ac:	4770      	bx	lr

080059ae <HAL_PCDEx_SetConnectionState>:
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80059ae:	4770      	bx	lr

080059b0 <__libc_init_array>:
 80059b0:	b570      	push	{r4, r5, r6, lr}
 80059b2:	2500      	movs	r5, #0
 80059b4:	4e0c      	ldr	r6, [pc, #48]	; (80059e8 <__libc_init_array+0x38>)
 80059b6:	4c0d      	ldr	r4, [pc, #52]	; (80059ec <__libc_init_array+0x3c>)
 80059b8:	1ba4      	subs	r4, r4, r6
 80059ba:	10a4      	asrs	r4, r4, #2
 80059bc:	42a5      	cmp	r5, r4
 80059be:	d109      	bne.n	80059d4 <__libc_init_array+0x24>
 80059c0:	f000 f82e 	bl	8005a20 <_init>
 80059c4:	2500      	movs	r5, #0
 80059c6:	4e0a      	ldr	r6, [pc, #40]	; (80059f0 <__libc_init_array+0x40>)
 80059c8:	4c0a      	ldr	r4, [pc, #40]	; (80059f4 <__libc_init_array+0x44>)
 80059ca:	1ba4      	subs	r4, r4, r6
 80059cc:	10a4      	asrs	r4, r4, #2
 80059ce:	42a5      	cmp	r5, r4
 80059d0:	d105      	bne.n	80059de <__libc_init_array+0x2e>
 80059d2:	bd70      	pop	{r4, r5, r6, pc}
 80059d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80059d8:	4798      	blx	r3
 80059da:	3501      	adds	r5, #1
 80059dc:	e7ee      	b.n	80059bc <__libc_init_array+0xc>
 80059de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80059e2:	4798      	blx	r3
 80059e4:	3501      	adds	r5, #1
 80059e6:	e7f2      	b.n	80059ce <__libc_init_array+0x1e>
 80059e8:	08006964 	.word	0x08006964
 80059ec:	08006964 	.word	0x08006964
 80059f0:	08006964 	.word	0x08006964
 80059f4:	08006968 	.word	0x08006968

080059f8 <memcpy>:
 80059f8:	b510      	push	{r4, lr}
 80059fa:	1e43      	subs	r3, r0, #1
 80059fc:	440a      	add	r2, r1
 80059fe:	4291      	cmp	r1, r2
 8005a00:	d100      	bne.n	8005a04 <memcpy+0xc>
 8005a02:	bd10      	pop	{r4, pc}
 8005a04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a0c:	e7f7      	b.n	80059fe <memcpy+0x6>

08005a0e <memset>:
 8005a0e:	4603      	mov	r3, r0
 8005a10:	4402      	add	r2, r0
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d100      	bne.n	8005a18 <memset+0xa>
 8005a16:	4770      	bx	lr
 8005a18:	f803 1b01 	strb.w	r1, [r3], #1
 8005a1c:	e7f9      	b.n	8005a12 <memset+0x4>
	...

08005a20 <_init>:
 8005a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a22:	bf00      	nop
 8005a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a26:	bc08      	pop	{r3}
 8005a28:	469e      	mov	lr, r3
 8005a2a:	4770      	bx	lr

08005a2c <_fini>:
 8005a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a2e:	bf00      	nop
 8005a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a32:	bc08      	pop	{r3}
 8005a34:	469e      	mov	lr, r3
 8005a36:	4770      	bx	lr
